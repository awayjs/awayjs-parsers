{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "AssetType",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "ByteArray",
    "DisplayObjectContainer",
    "Geometry",
    "TriangleSubGeometry",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "TextField",
    "Billboard",
    "Skybox",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "DefaultMaterialManager",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "CurveSubGeometry",
    "CurveMaterial",
    "BasicMaterial",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildCommand",
    "UpdatePropertyCommand",
    "RemoveChildCommand",
    "ApplyAS2DepthsCommand",
    "Font",
    "TextFormat",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseMeshLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseTimeLine",
    "paresTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "font_style_cnt",
    "new_font",
    "font_style_name",
    "new_font_style",
    "get_font_table",
    "set_font_em_size",
    "font_style_char_cnt",
    "font_style_char",
    "sm_len",
    "sm_end",
    "idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "indices",
    "readUnsignedShort",
    "idx_pos",
    "idx_curves",
    "idx_uvs",
    "positions",
    "curveData",
    "uvs",
    "readNumber",
    "curve_sub_geom",
    "updateIndices",
    "updatePositions",
    "updateCurves",
    "updateUVs",
    "set_subgeo_for_char",
    "parseProperties",
    "parseUserAttributes",
    "font_id",
    "returnArrayFont",
    "getAssetByID",
    "FONT",
    "font",
    "addError",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "data_id",
    "returnedArrayMaterial",
    "MATERIAL",
    "bothSides",
    "num_uv_values",
    "uvcnt",
    "uv_value",
    "readFloat",
    "format_props",
    1,
    "UINT16",
    2,
    3,
    "UINT8",
    4,
    5,
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "material",
    "newTextField",
    "num_paragraphs",
    "complete_text",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "format_id",
    "text_format",
    "textFormatArray",
    "TEXTFORMAT",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "appendText",
    "closeParagraph",
    "construct_geometry",
    "extra",
    "billboard",
    "num_materials",
    "materials_parsed",
    "geom",
    "returnedArrayGeometry",
    "GEOMETRY",
    "geoID",
    "materials",
    "materialNames",
    "mat_id",
    "m",
    "mesh",
    "subMeshes",
    "Math",
    "min",
    "data_len",
    "url",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "k",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "ms_per_frame",
    "numFrames",
    "objectIDMap",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "labelType",
    "label",
    "numCommands",
    "hasDepthChanges",
    "commandString",
    "objectID",
    "resourceID",
    "commandType",
    "valid_command",
    "instanceID",
    "instanceName",
    "cmd_asset",
    "registerPotentialChild",
    "addConstructCommand",
    "props",
    6,
    "UINT32",
    7,
    "matrix_2d",
    "colortransform",
    "blendmode",
    "visibilty",
    "depth",
    "mask",
    "thisMatrix",
    "rawData",
    "blendmode_string",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_curve_geom",
    "w_indices",
    "weights",
    "subProps",
    "x",
    "y",
    "z",
    "verts",
    "normals",
    "addSubGeometry",
    "triangle_sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateVertexNormals",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "returnedArray",
    "CONTAINER",
    "LIGHT",
    "MESH",
    "obj",
    "addChild",
    "pivot",
    "returnedArrayParent",
    "objC",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "TEXTURE",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "LIGHT_PICKER",
    "lightPicker",
    "smooth",
    "mipmap",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "EFFECTS_METHOD",
    "addEffectMethod",
    "SHADOW_MAP_METHOD",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "getDefaultTexture",
    "curve_mat",
    "preserveAlpha",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "TEXTURE_PROJECTOR",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "SKELETON_POSE",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "ANIMATION_NODE",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "ANIMATION_SET",
    "thisAnimator",
    "SKELETON",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "sub_geom",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "assetType",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/base/BlendMode",
    "undefined",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/library/AssetType",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/CurveSubGeometry",
    "awayjs-display/lib/base/Geometry",
    "awayjs-display/lib/base/TriangleSubGeometry",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Billboard",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/entities/TextField",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/CurveMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/timeline/TimelineKeyFrame",
    "awayjs-player/lib/timeline/commands/AddChildCommand",
    "awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/timeline/commands/RemoveChildCommand",
    "awayjs-player/lib/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-renderergl/lib/managers/DefaultMaterialManager",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "g",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\r\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BlendMode\");\r\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\r\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\r\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\r\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\r\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\r\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\r\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\r\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\r\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\r\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport TextField\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/TextField\");\r\nimport Billboard\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\r\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\r\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\r\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\r\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\r\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\r\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\r\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\r\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\r\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\r\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\r\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\r\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\r\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\r\n\r\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\r\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\r\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\r\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\r\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\r\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\r\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\r\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\r\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\r\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\r\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\r\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\r\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\r\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\r\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\r\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\r\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\r\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\r\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\r\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\r\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\r\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\r\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\r\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\r\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\r\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\r\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\r\n\r\nimport SubGeometryBase\t\t\t\t\t= require(\"awayjs-display/lib/base/SubGeometryBase\");\r\nimport CurveSubGeometry\t\t\t\t\t= require(\"awayjs-display/lib/base/CurveSubGeometry\");\r\nimport CurveMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/CurveMaterial\")\r\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\r\n\r\nimport TimelineSceneGraphFactory \t= require(\"awayjs-player/lib/factories/TimelineSceneGraphFactory\");\r\nimport AS2SceneGraphFactory \t\t= require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\r\nimport MovieClip \t\t\t\t\t= require(\"awayjs-player/lib/display/MovieClip\");\r\nimport TimelineKeyFrame \t\t\t= require(\"awayjs-player/lib/timeline/TimelineKeyFrame\");\r\nimport AddChildCommand \t\t\t\t= require(\"awayjs-player/lib/timeline/commands/AddChildCommand\");\r\nimport UpdatePropertyCommand \t\t= require(\"awayjs-player/lib/timeline/commands/UpdatePropertyCommand\");\r\nimport RemoveChildCommand \t\t\t= require(\"awayjs-player/lib/timeline/commands/RemoveChildCommand\");\r\nimport ApplyAS2DepthsCommand\t\t= require(\"awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand\");\r\n\r\nimport Font\t\t\t\t\t\t\t= require(\"awayjs-display/lib/text/Font\");\r\nimport TesselatedFontTable\t\t\t= require(\"awayjs-display/lib/text/TesselatedFontTable\");\r\nimport TextFormat\t\t\t= require(\"awayjs-display/lib/text/TextFormat\");\r\n/**\r\n * AWDParser provides a parser for the AWD data type.\r\n */\r\nclass AWDParser extends ParserBase\r\n{\r\n\t//set to \"true\" to have some console.logs in the Console\r\n\tprivate _debug:boolean = true;\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean = false;\r\n\tprivate _cur_block_id:number;\r\n\tprivate _blocks:Array<AWDBlock>;\r\n\tprivate _newBlockBytes:ByteArray;\r\n\tprivate _version:Array<number>;\r\n\tprivate _compression:number;\r\n\tprivate _accuracyOnBlocks:boolean;\r\n\tprivate _accuracyMatrix:boolean;\r\n\tprivate _accuracyGeo:boolean;\r\n\tprivate _accuracyProps:boolean;\r\n\tprivate _matrixNrType:number;\r\n\tprivate _geoNrType:number;\r\n\tprivate _propsNrType:number;\r\n\tprivate _streaming:boolean;\r\n\tprivate _texture_users:Object = {};\r\n\tprivate _parsed_header:boolean = false;\r\n\tprivate _body:ByteArray;\r\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\r\n\tprivate _cubeTextures:Array<any>;\r\n\tprivate _defaultBitmapMaterial:MethodMaterial;\r\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\r\n\r\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\r\n\tpublic static UNCOMPRESSED:number = 0;\r\n\tpublic static DEFLATE:number = 1;\r\n\tpublic static LZMA:number = 2;\r\n\tpublic static INT8:number = 1;\r\n\tpublic static INT16:number = 2;\r\n\tpublic static INT32:number = 3;\r\n\tpublic static UINT8:number = 4;\r\n\tpublic static UINT16:number = 5;\r\n\tpublic static UINT32:number = 6;\r\n\tpublic static FLOAT32:number = 7;\r\n\tpublic static FLOAT64:number = 8;\r\n\tpublic static BOOL:number = 21;\r\n\tpublic static COLOR:number = 22;\r\n\tpublic static BADDR:number = 23;\r\n\tpublic static AWDSTRING:number = 31;\r\n\tpublic static AWDBYTEARRAY:number = 32;\r\n\tpublic static VECTOR2x1:number = 41;\r\n\tpublic static VECTOR3x1:number = 42;\r\n\tpublic static VECTOR4x1:number = 43;\r\n\tpublic static MTX3x2:number = 44;\r\n\tpublic static MTX3x3:number = 45;\r\n\tpublic static MTX4x3:number = 46;\r\n\tpublic static MTX4x4:number = 47;\r\n\r\n\tprivate blendModeDic:Array<string>;\r\n\tprivate _depthSizeDic:Array<number>;\r\n\r\n\t/**\r\n\t * Creates a new AWDParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._blocks = new Array<AWDBlock>();\r\n\t\tthis._blocks[0] = new AWDBlock();\r\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\r\n\r\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.ADD);\r\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\r\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\r\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\r\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\r\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\r\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\r\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\r\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\r\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\r\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\r\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\r\n\t\tthis._depthSizeDic.push(256);\r\n\t\tthis._depthSizeDic.push(512);\r\n\t\tthis._depthSizeDic.push(2048);\r\n\t\tthis._depthSizeDic.push(1024);\r\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"awd\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// this will be called when Dependency has finished loading.\r\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\r\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\r\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\r\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\r\n\t\t\tvar asset:TextureProxyBase;\r\n\t\t\tvar thisBitmapTexture:Texture2DBase;\r\n\t\t\tvar block:AWDBlock;\r\n\r\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\r\n\t\t\t{\r\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\r\n\t\t\t\tif (asset) {\r\n\t\t\t\t\tvar mat:MethodMaterial;\r\n\t\t\t\t\tvar users:Array<string>;\r\n\r\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\r\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\r\n\t\t\t{\r\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\r\n\r\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\r\n\r\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\r\n\t\t\t\tthis._texture_users[ressourceID].push(1);\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\r\n\r\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\r\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\r\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\r\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\r\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\r\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\r\n\r\n\t\t\t\t\tasset = <TextureProxyBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\r\n\t\t\t\t\tblock = this._blocks[ressourceID];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\r\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve a dependency name\r\n\t *\r\n\t * @param resourceDependency The dependency to be resolved.\r\n\t */\r\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\r\n\t{\r\n\t\tvar oldName:string = asset.name;\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\r\n\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t}\r\n\r\n\t\tvar newName:string = asset.name;\r\n\r\n\t\tasset.name = oldName;\r\n\r\n\t\treturn newName;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\tif (!this._parsed_header) {\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Parse header and decompress body if needed\r\n\t\t\tthis.parseHeader();\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\r\n\t\t\t\t\tthis._body = this._byteData;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// Compressed AWD Formats not yet supported\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t case AWDParser.DEFLATE:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress();\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t case AWDParser.LZMA:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t //*/\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._parsed_header = true;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t}\r\n\r\n\t\tif (this._body) {\r\n\r\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\r\n\t\t\t{\r\n\t\t\t\tthis.parseNextBlock();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Return complete status\r\n\t\t\tif (this._body.getBytesAvailable() == 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t\treturn  ParserBase.PARSING_DONE;\r\n\t\t\t} else {\r\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t\t// Error - most likely _body not set because we do not support compression.\r\n\t\t\treturn  ParserBase.PARSING_DONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate dispose():void\r\n\t{\r\n\r\n\t\tfor (var c in this._blocks) {\r\n\r\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\r\n\t\t\tb.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseNextBlock():void\r\n\t{\r\n\t\tvar block:AWDBlock;\r\n\t\tvar assetData:IAsset;\r\n\t\tvar isParsed:boolean = false;\r\n\t\tvar ns:number;\r\n\t\tvar type:number;\r\n\t\tvar flags:number;\r\n\t\tvar len:number;\r\n\r\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\r\n\r\n\t\tns = this._body.readUnsignedByte();\r\n\t\ttype = this._body.readUnsignedByte();\r\n\t\tflags = this._body.readUnsignedByte();\r\n\t\tlen = this._body.readUnsignedInt();\r\n\r\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\r\n\r\n\t\tif (this._accuracyOnBlocks) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyGeo) {\r\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyMatrix) {\r\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyProps) {\r\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar blockEndAll:number = this._body.position + len;\r\n\r\n\t\tif (len > this._body.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\r\n\t\t\tthis._body.position += this._body.getBytesAvailable();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._newBlockBytes = new ByteArray();\r\n\r\n\r\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// Compressed AWD Formats not yet supported\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\r\n\t\t\t/*\r\n\t\t\t if (blockCompressionLZMA)\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress();\r\n\t\t\t }\r\n\t\t\t */\r\n\r\n\t\t}\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\r\n\t\t//----------------------------------------------------------------------------\r\n\r\n\t\tthis._newBlockBytes.position = 0;\r\n\t\tblock = new AWDBlock();\r\n\t\tblock.len = this._newBlockBytes.position + len;\r\n\t\tblock.id = this._cur_block_id;\r\n\r\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\r\n\t\t\t//block.len       = blockEndBlock;\r\n\t\t}\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\tthis._blocks[this._cur_block_id] = block;\r\n\r\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\r\n\t\t\t// probably should contain some info about the type of animation\r\n\t\t\tvar factory = new AS2SceneGraphFactory();\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tthis.parseMeshLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 44:\r\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 133:\r\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 134:\r\n\t\t\t\t\tthis.paresTextField(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 135:\r\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 136:\r\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 41:\r\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//  case 43:\r\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\r\n\t\t\t\t//      isParsed = true;\r\n\t\t\t\t//      break;\r\n\r\n\t\t\t\tcase 51:\r\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 91:\r\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 92:\r\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 111:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 112:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 113:\r\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 122:\r\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 253:\r\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t//*/\r\n\t\t}\r\n\t\t//*\r\n\t\tif (isParsed == false) {\r\n\t\t\tswitch (type) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 82:\r\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 101:\r\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 102:\r\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:\r\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 121:\r\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\r\n\t\t\t\t//break;\r\n\t\t\t\tcase 254:\r\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 255:\r\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//*/\r\n\r\n\t\tvar msgCnt:number = 0;\r\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tconsole.log(\"\\n\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._debug) {\r\n\r\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\r\n\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._body.position = blockEndAll;\r\n\t\tthis._newBlockBytes = null;\r\n\r\n\t}\r\n\r\n\r\n\t//--Parser Blocks---------------------------------------------------------------------------\r\n\r\n\r\n\tprivate parseTesselatedFont(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"Font name = \"+this._blocks[blockID].name);\r\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"Font font_style_cnt = \"+font_style_cnt);\r\n\t\tvar new_font:Font=new Font();\r\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\r\n\t\t\tvar font_style_name:string = this.parseVarStr();\r\n\t\t\t//console.log(\"Font font_style_name = \"+font_style_name);\r\n\t\t\tvar new_font_style:TesselatedFontTable=new_font.get_font_table(font_style_name);\r\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\r\n\t\t\t//console.log(\"Font new_font_style.font_em_size = \"+new_font_style.get_font_em_size);\r\n\t\t\tvar font_style_char_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"Font font_style_char_cnt = \"+font_style_char_cnt);\r\n\t\t\tfor (var i:number = 0; i < font_style_char_cnt; ++i) {\r\n\r\n\t\t\t\tvar font_style_char:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"Font font_style_char = \"+font_style_char);\r\n\t\t\t\t// todo: this is basically a simplified version of the subgeom-parsing done in parseTriangleGeometry. Make a parseSubGeom() instead (?)\r\n\t\t\t\tvar sm_len:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar sm_end:number = this._newBlockBytes.position + sm_len;\r\n\t\t\t\t//console.log(\"Font sm_len = \"+sm_len);\r\n\r\n\t\t\t\t//this.parseProperties(null); // no properties for font-table subgeos\r\n\t\t\t\t// Loop through data streams\r\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\t\tvar idx:number = 0;\r\n\t\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t\t// Type, field type, length\r\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\t\tif (str_type == 2) {//face indicies positions\r\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//this.parseProperties(null);// no attributes for font-table subgeos\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tnew_font_style.set_subgeo_for_char(font_style_char.toString(), curve_sub_geom);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a font-table\");\r\n\r\n\t\t}\r\n\t\t//console.log(\"Parsed a font\");\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\r\n\t\tthis._blocks[blockID].data = new_font;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseTextFormat(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"this._blocks[blockID].name  '\" + this._blocks[blockID].name );\r\n\t\tvar font_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"font_id  '\" + font_id);\r\n\t\tvar font_style_name:string = this.parseVarStr();\r\n\t\t//console.log(\"font_style_name  '\" + font_style_name);\r\n\t\tvar returnArrayFont:Array<any> = this.getAssetByID(font_id, [AssetType.FONT]);\r\n\t\tvar font:Font;\r\n\t\tif (returnArrayFont[0]) {\r\n\t\t\tfont = <Font> returnArrayFont[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Font for this TextFormat. A empty Font is created!\");\r\n\t\t\tfont = new Font();\r\n\t\t}\r\n\t\tvar newTextFormat:TextFormat = new TextFormat();\r\n\t\tnewTextFormat.font_name = font.name;\r\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\r\n\t\tif(font_table!=null){\r\n\t\t\tnewTextFormat.font_style = font_style_name;\r\n\t\t\tnewTextFormat.font_table = font_table;\r\n\t\t}\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"mat  '\" + data_id);\r\n\t\tvar mat:BasicMaterial;\r\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [AssetType.MATERIAL]);\r\n\r\n\t\tif (returnedArrayMaterial[0]) {\r\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this TextFormat. Default Material will be used!\");\r\n\t\t\tmat = new BasicMaterial();\r\n\t\t}\r\n\t\tmat.bothSides=true;\r\n\r\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\r\n\t\t//console.log(\"num_uv_values  '\" + num_uv_values);\r\n\t\tfor(var uvcnt:number=0; uvcnt<num_uv_values; uvcnt++){\r\n\t\t\tvar uv_value:number=this._newBlockBytes.readFloat();\r\n\t\t\t//console.log(\"uv_value  '\" + uv_value);\r\n\t\t}\r\n\t\tvar format_props:AWDProperties = this.parseProperties({1:AWDParser.UINT16, 2:AWDParser.UINT16, 3:AWDParser.UINT8,4:AWDParser.UINT8,5:AWDParser.UINT8});\r\n\r\n\t\tnewTextFormat.size = format_props.get(1,12);\r\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\r\n\t\t//newTextFormat.rotated = format_props.get(3,false);\r\n\t\tnewTextFormat.kerning = format_props.get(4,true);\r\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\r\n\t\tnewTextFormat.material = mat;\r\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\r\n\t\t//newTextFormat.extra =\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\r\n\t\tthis._blocks[blockID].data = newTextFormat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\r\n\t\t}\r\n\r\n\t}\r\n\tprivate paresTextField(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"name  '\" + name);\r\n\t\tvar newTextField:TextField = new TextField();\r\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar complete_text:string = \"\";\r\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\r\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\r\n\r\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\r\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\r\n\r\n\t\t\t\tvar format_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"format_id  '\" + format_id);\r\n\t\t\t\tvar text_format:TextFormat;\r\n\t\t\t\tvar textFormatArray:Array<any> = this.getAssetByID(format_id, [AssetType.TEXTFORMAT]);\r\n\t\t\t\tif (textFormatArray[0]) {\r\n\t\t\t\t\ttext_format = <TextFormat> textFormatArray[1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\r\n\t\t\t\t\ttext_format = new TextFormat();\r\n\t\t\t\t}\r\n\t\t\t\t//console.log(\"text_format  '\" + text_format.name);\r\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\r\n\t\t\t\tif (txt_length > 0) {\r\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\r\n\t\t\t\t\tnewTextField.appendText(this_txt, text_format);\r\n\t\t\t\t\tcomplete_text+=this_txt;\r\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnewTextField.closeParagraph();\r\n\t\t}\r\n\t\tnewTextField.construct_geometry();\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tnewTextField.extra = this.parseUserAttributes();\r\n\r\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\r\n\t\tthis._blocks[blockID].data = newTextField;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Block ID = 25\r\n\tprivate parseBillBoardLibraryBlock(blockID:number):void {\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mat:BasicMaterial;\r\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [AssetType.MATERIAL]);\r\n\r\n\t\tif (returnedArrayMaterial[0]) {\r\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\r\n\t\t\tmat = new BasicMaterial();\r\n\t\t}\r\n\t\tmat.bothSides=true;\r\n\t\tvar billboard:Billboard = new Billboard(mat);\r\n\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tbillboard.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\r\n\t\tthis._blocks[blockID].data = billboard;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\r\n\t\t}\r\n\t}\r\n\t// Block ID = 24\r\n\tprivate parseMeshLibraryBlock(blockID:number):void {\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parseProperties(null);\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Library-Mesh: Name = '\" + name + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\t//var asset:Audio;todo create asset for audio\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\t\t\tconsole.log(\"Audio url = \"+url);\r\n\r\n\t\t} else {\r\n\t\t\t// todo: exporter does not export embed sounds yet\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t// todo parse sound from bytes\r\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t//this._blocks[blockID].data = asset;todo\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 4\r\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\tvar i:number;\r\n\t\tvar j:number;\r\n\t\tvar k:number;\r\n\t\tvar timeLineContainer = factory.createMovieClip();\r\n\t\tvar name = this.parseVarStr();\r\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\r\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar fps:number = this._newBlockBytes.readFloat();\r\n\t\tvar ms_per_frame = 1000 / fps;\r\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar objectIDMap : { [id:string]:number; } = {};\r\n\r\n\t\t// var previousTimeLine:TimeLineFrame;\r\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\r\n\r\n\t\tvar totalDuration = 0;\r\n\t\tfor (i = 0; i < numFrames; i++) {\r\n\r\n\t\t\tvar frame = new TimelineKeyFrame();\r\n\t\t\tvar traceString = \"frame = \" + i;\r\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\r\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt() * ms_per_frame;\r\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\r\n\t\t\ttotalDuration += frameDuration;\r\n\t\t\t//console.log(\"duration = \" + frameDuration);\r\n\t\t\ttraceString += \"duration = \" + frameDuration;\r\n\r\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tfor (j = 0; j < numLabels; j++) {\r\n\t\t\t\tvar labelType = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tvar label = this.parseVarStr();\r\n\t\t\t\t// TODO: Handle labels differently\r\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\r\n\t\t\t\ttraceString += \"\\n     label = \" + label + \" - labelType = \" + labelType;\r\n\t\t\t}\r\n\r\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\r\n\t\t\ttraceString += \"\\n      Commands \" + numCommands;\r\n\t\t\tvar hasDepthChanges = false;\r\n\t\t\tvar commandString = \"\";\r\n\t\t\tfor (j = 0; j < numCommands; j++) {\r\n\t\t\t\tvar objectID:number;\r\n\t\t\t\tvar resourceID:number;\r\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t// 1 = Add object by local id (awd-block-id) + update properties\r\n\t\t\t\t// 2 = Add object by global id (string identifier) + update properties !Not used yet.!\r\n\t\t\t\t// 3 = UpdateObject - update a object that is already present\r\n\t\t\t\t// 4 = remove object\r\n\t\t\t\t// 5 = add / update sound\r\n\r\n\t\t\t\tswitch (commandType) {\r\n\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tvar valid_command:boolean = false;\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tvar instanceID = 0; // must be set in folling conditions:\r\n\t\t\t\t\t\tif (commandType == 1) {\r\n\t\t\t\t\t\t\t// this commands looks for a object by awd-id and puts it into the timeline\r\n\t\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\r\n\t\t\t\t\t\t\t// sound is added to timeline with dedicated Command, as it is no display-object (has no matrix etc)\r\n\t\t\t\t\t\t\t// check if a Geometry can be found at the resourceID (AWD-ID)\r\n\t\t\t\t\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\t\t\t\t\tif (cmd_asset != null) {\r\n\t\t\t\t\t\t\t\tinstanceID = timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\t\t\t\t\tobjectIDMap[objectID] = instanceID;\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildCommand(instanceID));\r\n\r\n\t\t\t\t\t\t\t\tif (instanceName.length) {\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"name\", instanceName));\r\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                instanceName = \" + instanceName;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvalid_command = true;\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n      - Add new Resource = \" + resourceID + \" as object_id = \" + objectID;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n      - ERROR - object_id = \" + objectID + \" - NO DISPLAY_OBJECT AT ID = \" + resourceID;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (commandType == 3) {\r\n\t\t\t\t\t\t\tinstanceID = objectIDMap[objectID];\r\n\t\t\t\t\t\t\tvalid_command = true;\r\n\t\t\t\t\t\t\tcommandString += \"\\n      - Update object_id = \" + objectID;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// read the command properties\r\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\r\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\r\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\r\n\t\t\t\t\t\t// 4: blendmode (uint8)\r\n\t\t\t\t\t\t// 5: visibilty (uint8)\r\n\t\t\t\t\t\t// 6: depth (uint32)\r\n\t\t\t\t\t\t// 7: mask (uint32)\r\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({\r\n\t\t\t\t\t\t\t1: this._matrixNrType,\r\n\t\t\t\t\t\t\t2: this._matrixNrType,\r\n\t\t\t\t\t\t\t3: this._propsNrType,\r\n\t\t\t\t\t\t\t4: AWDParser.UINT8,\r\n\t\t\t\t\t\t\t5: AWDParser.UINT8,\r\n\t\t\t\t\t\t\t6: AWDParser.UINT32,\r\n\t\t\t\t\t\t\t7: AWDParser.UINT32\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (valid_command) {\r\n\r\n\t\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\r\n\t\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\r\n\t\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\r\n\t\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\r\n\t\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\r\n\t\t\t\t\t\t\tvar depth:number = props.get(6, -1);\r\n\t\t\t\t\t\t\tvar mask:Array<number> = props.get(7, []);\r\n\t\t\t\t\t\t\t// todo: handle filters\r\n\r\n\t\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\r\n\r\n\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d.length;\r\n\t\t\t\t\t\t\tif (matrix_2d.length == 6) {\r\n\t\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\r\n\t\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\r\n\t\t\t\t\t\t\t\t// todo is this correct for 2d -> 3d scale and rotation. (i doubt it)\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[0] = matrix_2d[0];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[1] = matrix_2d[1];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[4] = matrix_2d[2];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[5] = matrix_2d[3];\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"_iMatrix3D\", thisMatrix));\r\n\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\r\n\t\t\t\t\t\t\tif (colortransform.length == 20) {\r\n\t\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n                colorMatrix = \" + colortransform;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// blendmode must be positive to be valid\r\n\t\t\t\t\t\t\tif (blendmode >= 0) {\r\n\t\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\r\n\t\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n                BlendMode = \" + blendmode_string;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// visibilty must be positive to be valid\r\n\t\t\t\t\t\t\tif (visibilty >= 0) {\r\n\t\t\t\t\t\t\t\tif (visibilty == 0)\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", false));\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// depth must be positive to be valid\r\n\t\t\t\t\t\t\tif (depth >= 0) {\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n                Depth = \" + depth;\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"__AS2Depth\", depth));\r\n\t\t\t\t\t\t\t\thasDepthChanges = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\r\n\t\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\r\n\t\t\t\t\t\t\tif (mask.length > 0) {\r\n\t\t\t\t\t\t\t\tif((mask.length==1)&&(mask[0]<0)){\r\n\t\t\t\t\t\t\t\t\t// TODO: this object is used as mask\r\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                obj is used as mask\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t// TODO: this object is masked by one or more objects defined by ids in mask-array\r\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                obj is masked by \"+mask.length+\" objects\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// todo: handle filters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 4:\r\n\r\n\t\t\t\t\t\t// Remove Object Command\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tvar instanceID = objectIDMap[objectID];\r\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildCommand(instanceID));\r\n\t\t\t\t\t\tcommandString += \"\\n       - Remove object with ID: \" + objectID;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 5:\r\n\r\n\t\t\t\t\t\t// Add Sound Command\r\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\t// TODO: implement sound in timeline\r\n\t\t\t\t\t\tcommandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tcommandString += \"\\n       - Unknown Command Type = \" + commandType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDepthChanges) {\r\n\t\t\t\t// only want to do this once after all children's depth values are updated\r\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\r\n\t\t\t\thasDepthChanges = false;\r\n\t\t\t}\r\n\r\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tif (length_code > 0) {\r\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\r\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\r\n\t\t\t\t//frame.addToScript(frame_code);\r\n\t\t\t\ttraceString += \"\\nframe-code = \" + frame_code;\r\n\t\t\t}\r\n\t\t\ttraceString += commandString;\r\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\r\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\r\n\t\t\tconsole.log(traceString);\r\n\t\t\ttimeLineContainer.addFrame(frame);\r\n\r\n\t\t}\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\r\n\t\tthis._blocks[blockID].data = timeLineContainer;\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t}\r\n\t//Block ID = 1\r\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\r\n\t{\r\n\r\n\t\tvar geom:Geometry = new Geometry();\r\n\r\n\t\t// Read name and sub count\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t// Read optional properties\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\tvar geoScaleU:number = props.get(1, 1);\r\n\t\tvar geoScaleV:number = props.get(2, 1);\r\n\r\n\t\t// Loop through sub meshes\r\n\t\tvar subs_parsed:number = 0;\r\n\t\twhile (subs_parsed < num_subs) {\r\n\t\t\tvar is_curve_geom:boolean=false;\r\n\t\t\tvar i:number;\r\n\t\t\tvar sm_len:number, sm_end:number;\r\n\t\t\tvar w_indices:Array<number>;\r\n\t\t\tvar weights:Array<number>;\r\n\r\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\r\n\r\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\t\t// Loop through data streams\r\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\tvar idx:number = 0;\r\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t// Type, field type, length\r\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\r\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\r\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 3) {\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 4) {\r\n\r\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 6) {\r\n\t\t\t\t\tw_indices = Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 7) {\r\n\r\n\t\t\t\t\tweights = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\tis_curve_geom=true;\r\n\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\tpositions[idx_pos++] =  this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\r\n\t\t\tif(is_curve_geom){\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tgeom.addSubGeometry(curve_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a CurveSubGeometry\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar triangle_sub_geom = new TriangleSubGeometry(true);\r\n\t\t\t\tif (weights)\r\n\t\t\t\t\ttriangle_sub_geom.jointsPerVertex = weights.length / (verts.length / 3);\r\n\t\t\t\tif (normals)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (uvs)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveUVs = false;\r\n\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (true) {\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveTangents = true;\r\n\t\t\t\t}\r\n\t\t\t\ttriangle_sub_geom.updateIndices(indices);\r\n\t\t\t\ttriangle_sub_geom.updatePositions(verts);\r\n\t\t\t\ttriangle_sub_geom.updateVertexNormals(normals);\r\n\t\t\t\ttriangle_sub_geom.updateUVs(uvs);\r\n\t\t\t\ttriangle_sub_geom.updateVertexTangents(null);\r\n\t\t\t\ttriangle_sub_geom.updateJointWeights(weights);\r\n\t\t\t\ttriangle_sub_geom.updateJointIndices(w_indices);\r\n\r\n\t\t\t\tvar scaleU:number = subProps.get(1, 1);\r\n\t\t\t\tvar scaleV:number = subProps.get(2, 1);\r\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\r\n\r\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\r\n\t\t\t\t\tsetSubUVs = true;\r\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\r\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (setSubUVs)\r\n\t\t\t\t\ttriangle_sub_geom.scaleUV(scaleU, scaleV);\r\n\t\t\t\tgeom.addSubGeometry(triangle_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleSubGeometry\");\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\r\n\t\t\t// when creating meshes (and their material assignments.)\r\n\r\n\t\t\tsubs_parsed++;\r\n\t\t}\r\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\r\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\r\n\t\tthis._blocks[blockID].data = geom;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//Block ID = 11\r\n\tprivate parsePrimitves(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar prefab:PrefabBase;\r\n\t\tvar primType:number;\r\n\t\tvar subs_parsed:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar bsm:Matrix3D;\r\n\r\n\t\t// Read name and sub count\r\n\t\tname = this.parseVarStr();\r\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\r\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\r\n\r\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\r\n\r\n\t\tswitch (primType) {\r\n\t\t\t// to do, not all properties are set on all primitives\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3:\r\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\r\n\t\t\t\tif (!props.get(701, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\r\n\t\t\t\tif (!props.get(702, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\r\n\t\t\t\tif (!props.get(703, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 5:\r\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 7:\r\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tprefab = new PrefabBase();\r\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\r\n\t\t\t//geom.subGeometries;\r\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tprefab.name = name;\r\n\t\tthis._pFinalizeAsset(prefab, name);\r\n\t\tthis._blocks[blockID].data = prefab;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif ((primType < 0) || (primType > 7)) {\r\n\t\t\t\tprimType = 0;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 22\r\n\tprivate parseContainer(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar par_id:number;\r\n\t\tvar mtx:Matrix3D;\r\n\t\tvar ctr:DisplayObjectContainer;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\r\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\r\n\t\tmtx = this.parseMatrix3D();\r\n\t\tname = this.parseVarStr();\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tctr = new DisplayObjectContainer();\r\n\t\tctr.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\r\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\r\n\t\t}\r\n\r\n\t\t// in AWD version 2.1 we read the Container properties\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t}\r\n\t\t// in other versions we do not read the Container properties\r\n\t\telse {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\r\n\t\tctr.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\r\n\t\tthis._blocks[blockID].data = ctr;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 23\r\n\tprivate parseMeshInstance(blockID:number):void\r\n\t{\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\t\tmesh.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(mesh);\r\n\t\t\tparentName = objC.name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\t\t}\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\r\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\r\n\t\t\tmesh.castsShadows = props.get(5, true);\r\n\t\t} else {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID 31\r\n\tprivate parseSkyboxInstance(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\r\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\r\n\r\n\t\tthis.parseProperties(null)\r\n\t\tasset.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(asset, name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\r\n\r\n\t}\r\n\r\n\t//Block ID = 41\r\n\tprivate parseLight(blockID:number):void\r\n\t{\r\n\t\tvar light:LightBase;\r\n\t\tvar newShadowMapper:ShadowMapperBase;\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\r\n\t\tvar shadowMapperType:number = props.get(9, 0);\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\r\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\r\n\r\n\t\tif (lightType == 1) {\r\n\t\t\tlight = new PointLight();\r\n\r\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\r\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 4) {\r\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.transform.matrix3D = mtx;\r\n\r\n\t\t}\r\n\r\n\t\tif (lightType == 2) {\r\n\r\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 1) {\r\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (shadowMapperType == 2)\r\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\r\n\t\t\t\t//if (shadowMapperType == 3)\r\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tlight.color = props.get(3, 0xffffff);\r\n\t\tlight.specular = props.get(4, 1.0);\r\n\t\tlight.diffuse = props.get(5, 1.0);\r\n\t\tlight.ambientColor = props.get(7, 0xffffff);\r\n\t\tlight.ambient = props.get(8, 0.0);\r\n\r\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\r\n\t\tif (newShadowMapper) {\r\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\r\n\t\t\t\tif (props.get(10, 1) != 1) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (props.get(10, 2) != 2) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.shadowMapper = newShadowMapper;\r\n\t\t\tlight.castsShadows = true;\r\n\t\t}\r\n\r\n\t\tif (par_id != 0) {\r\n\r\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\r\n\r\n\t\t\tif (returnedArrayParent[0]) {\r\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\r\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\r\n\r\n\t\tthis._blocks[blockID].data = light;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\r\n\r\n\t}\r\n\r\n\t//Block ID = 43\r\n\tprivate parseCamera(blockID:number):void\r\n\t{\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar projection:ProjectionBase;\r\n\r\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\r\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\r\n\r\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\r\n\r\n\t\tswitch (projectiontype) {\r\n\t\t\tcase 5001:\r\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5002:\r\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5003:\r\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar camera:Camera = new Camera(projection);\r\n\t\tcamera.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(camera);\r\n\r\n\t\t\tparentName = objC.name;\r\n\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\r\n\t\t}\r\n\r\n\t\tcamera.name = name;\r\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\tcamera.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(camera, name);\r\n\r\n\t\tthis._blocks[blockID].data = camera\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 51\r\n\tprivate parseLightPicker(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\r\n\t\tvar k:number = 0;\r\n\t\tvar lightID:number = 0;\r\n\r\n\t\tvar returnedArrayLight:Array<any>;\r\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\r\n\r\n\t\tfor (k = 0; k < numLights; k++) {\r\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [AssetType.LIGHT])\r\n\r\n\t\t\tif (returnedArrayLight[0]) {\r\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\r\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lightsArray.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\treturn; //return without any more parsing for this block\r\n\t\t}\r\n\r\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\r\n\t\tlightPick.name = name;\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\r\n\r\n\t\tthis._blocks[blockID].data = lightPick\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 81\r\n\tprivate parseMaterial(blockID:number):void\r\n\t{\r\n\t\t// TODO: not used\r\n\t\t////blockLength = block.len;\r\n\t\tvar name:string;\r\n\t\tvar type:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar attributes:Object;\r\n\t\tvar finalize:boolean;\r\n\t\tvar num_methods:number;\r\n\t\tvar methods_parsed:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tname = this.parseVarStr();\r\n\t\ttype = this._newBlockBytes.readUnsignedByte();\r\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t// Read material numerical properties\r\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\r\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\r\n\r\n\t\tmethods_parsed = 0;\r\n\t\twhile (methods_parsed < num_methods) {\r\n\t\t\tvar method_type:number;\r\n\r\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tmethods_parsed += 1;\r\n\t\t}\r\n\t\tvar debugString:string = \"\";\r\n\t\tattributes = this.parseUserAttributes();\r\n\t\tif (type === 1) { // Color material\r\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\tvar color:number;\r\n\t\t\tcolor = props.get(1, 0xffffff);\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t} else {\r\n\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t}\r\n\t\t} else if (type === 2) {\r\n\t\t\tvar tex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\r\n\r\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\r\n\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t} else {\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmat.extra = attributes;\r\n\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\tmat.repeat = props.get(13, false);\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\t\tthis._blocks[blockID].data = mat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 81 AWD2.1\r\n\tprivate parseMaterial_v1(blockID:number):void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar normalTexture:Texture2DBase;\r\n\t\tvar specTexture:Texture2DBase;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\r\n\t\tvar spezialType:number = props.get(4, 0);\r\n\t\tvar debugString:string = \"Parsed Material \";\r\n\r\n\t\tif (spezialType >= 2) {//this is no supported material\r\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type <= 2) {// Color material\r\n\t\t\tif (this.materialMode == 1)\r\n\t\t\t\tspezialType = 0;\r\n\t\t\telse if (this.materialMode == 2)\r\n\t\t\t\tspezialType = 1;\r\n\r\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\r\n\r\n\t\t\t\tif (type == 1) {// Color material\r\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\r\n\r\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\r\n\r\n\t\t\t\t\t} else { //\tSinglePassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (type == 2) {// texture material\r\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\r\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\r\n\r\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\r\n\r\n\t\t\t\t\tmat = new MethodMaterial(texture);\r\n\r\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t} else {//\tSinglePassMaterial\r\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0])\r\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\r\n\t\t\t\tif (diffuseTexture) {\r\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\r\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tnormalTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tspecTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [AssetType.LIGHT_PICKER])\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\r\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.smooth = props.get(5, true);\r\n\t\t\t\tmat.mipmap = props.get(6, true);\r\n\t\t\t\tmat.bothSides = props.get(7, false);\r\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\r\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\r\n\t\t\t\tmat.repeat = props.get(13, false);\r\n\r\n\t\t\t\tif (normalTexture)\r\n\t\t\t\t\tmat.normalMap = normalTexture;\r\n\r\n\t\t\t\tif (specTexture)\r\n\t\t\t\t\tmat.specularMap = specTexture;\r\n\r\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\t\t\tmat.ambient = props.get(15, 1.0);\r\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\r\n\t\t\t\tmat.specular = props.get(18, 1.0);\r\n\t\t\t\tmat.gloss = props.get(19, 50);\r\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\r\n\r\n\t\t\t\tvar methods_parsed:number = 0;\r\n\t\t\t\tvar targetID:number;\r\n\r\n\t\t\t\twhile (methods_parsed < num_methods) {\r\n\t\t\t\t\tvar method_type:number;\r\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t\tprops = this.parseProperties({\r\n\t\t\t\t\t\t1: AWDParser.BADDR,\r\n\t\t\t\t\t\t2: AWDParser.BADDR,\r\n\t\t\t\t\t\t3: AWDParser.BADDR,\r\n\t\t\t\t\t\t101: this._propsNrType,\r\n\t\t\t\t\t\t102: this._propsNrType,\r\n\t\t\t\t\t\t103: this._propsNrType,\r\n\t\t\t\t\t\t201: AWDParser.UINT32,\r\n\t\t\t\t\t\t202: AWDParser.UINT32,\r\n\t\t\t\t\t\t301: AWDParser.UINT16,\r\n\t\t\t\t\t\t302: AWDParser.UINT16,\r\n\t\t\t\t\t\t401: AWDParser.UINT8,\r\n\t\t\t\t\t\t402: AWDParser.UINT8,\r\n\t\t\t\t\t\t601: AWDParser.COLOR,\r\n\t\t\t\t\t\t602: AWDParser.COLOR,\r\n\t\t\t\t\t\t701: AWDParser.BOOL,\r\n\t\t\t\t\t\t702: AWDParser.BOOL,\r\n\t\t\t\t\t\t801: AWDParser.MTX4x4\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswitch (method_type) {\r\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.EFFECTS_METHOD]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\r\n\r\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\r\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\r\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\r\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\r\n\t\t\t\t\t\t\tif (!mat.normalMap)\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\r\n\r\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\r\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.parseUserAttributes();\r\n\t\t\t\t\tmethods_parsed += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// todo: we should not need this anymore (if using texture-atlas)\r\n\t\telse if ((type>=3)&&(type<=7)){\r\n\t\t\t// if this is a curve material, we create it, finalize it, assign it to block-cache and return and return.\r\n\t\t\tvar color:number = props.get(1, 0xcccccc);\r\n\t\t\tdebugString+=color;\r\n\r\n\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\tvar diffuseTex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\tdiffuseTexture = DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t}\r\n\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\t\t\tvar curve_mat:CurveMaterial = new CurveMaterial(diffuseTexture);\r\n\t\t\t//debugString+= \" alpha = \"+props.get(10, 1.0)+\" \";\r\n\t\t\tdebugString+= \" texture = \"+diffuseTex_addr+\" \";\r\n\t\t\tcurve_mat.bothSides = true;\r\n\t\t\tcurve_mat.preserveAlpha = true;\r\n\t\t\tcurve_mat.alphaBlending = true;\r\n\t\t\tcurve_mat.extra = this.parseUserAttributes();\r\n\t\t\tthis._pFinalizeAsset(<IAsset> curve_mat, name);\r\n\t\t\tthis._blocks[blockID].data = curve_mat;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(debugString);\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\t\tmat.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\r\n\t\tthis._blocks[blockID].data = mat;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 82\r\n\tprivate parseTexture(blockID:number):void\r\n\t{\r\n\r\n\t\tvar asset:Texture2DBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\r\n\t\t} else {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t//\r\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\r\n\t\t\t//\r\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\r\n\t\t\t// This gives the browser time to initialise image width / height.\r\n\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 83\r\n\tprivate parseCubeTexture(blockID:number):void\r\n\t{\r\n\t\t//blockLength = block.len;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:CubeTextureBase;\r\n\t\tvar i:number;\r\n\r\n\t\tthis._cubeTextures = new Array<any>();\r\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\t\t\tthis._cubeTextures.push(null);\r\n\r\n\t\t\t// External\r\n\t\t\tif (type == 0) {\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar url:string;\r\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar data:ByteArray;\r\n\t\t\t\tdata = new ByteArray();\r\n\r\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 91\r\n\tprivate parseSharedMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar asset:EffectMethodBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\t\tasset = this.parseSharedMethodList(blockID);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 92\r\n\tprivate parseShadowMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar type:number;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:ShadowMethodBase;\r\n\t\tvar shadowLightID:number;\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [AssetType.LIGHT]);\r\n\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\r\n\r\n\t\tif (!asset)\r\n\t\t\treturn;\r\n\r\n\t\tthis.parseUserAttributes(); // Ignore for now\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID = 253\r\n\tprivate parseCommand(blockID:number):void\r\n\t{\r\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar parentObject:DisplayObjectContainer;\r\n\t\tvar targetObject:DisplayObjectContainer;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\r\n\t\t}\r\n\r\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\r\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tswitch (typeCommand) {\r\n\t\t\tcase 1:\r\n\r\n\t\t\t\tvar targetID:number = props.get(1, 0);\r\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [AssetType.LIGHT, AssetType.TEXTURE_PROJECTOR]); //for no only light is requested!!!!\r\n\r\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = returnedArrayTarget[1];\r\n\r\n\t\t\t\tif (parentObject) {\r\n\t\t\t\t\tparentObject.addChild(targetObject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (targetObject) {\r\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\r\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t\ttargetObject.extra = this.parseUserAttributes();\r\n\r\n\t\t}\r\n\t\tthis._blocks[blockID].data = targetObject\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//blockID 255\r\n\tprivate parseMetaData(blockID:number):void\r\n\t{\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\r\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\r\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\r\n\t\t}\r\n\t}\r\n\r\n\t//blockID 254\r\n\tprivate parseNameSpace(blockID:number):void\r\n\t{\r\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar nameSpaceString:string = this.parseVarStr();\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\r\n\t}\r\n\r\n\t//--Parser UTILS---------------------------------------------------------------------------\r\n\r\n\t// this functions reads and creates a ShadowMethodMethod\r\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar shadowMethod:ShadowMethodBase;\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\r\n\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>\r\n\t\tswitch (methodType) {\r\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\r\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\r\n\t\t\t//\t\t\t\t\t}\r\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 1002: //ShadowNearMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\r\n\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\r\n\t\t\t\t\treturn shadowMethod;\r\n\t\t\t\t}\r\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1101: //ShadowFilteredMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1102: //ShadowDitheredMethod\r\n\r\n\r\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1103: //ShadowSoftMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1104: //ShadowHardMethod\r\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn shadowMethod;\r\n\t}\r\n\r\n\t//Block ID 101\r\n\tprivate parseSkeleton(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar skeleton:Skeleton = new Skeleton();\r\n\t\tthis.parseProperties(null); // Discard properties for now\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint:SkeletonJoint;\r\n\t\t\tvar ibp:Matrix3D;\r\n\t\t\t// Ignore joint id\r\n\t\t\tthis._newBlockBytes.readUnsignedShort();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\r\n\t\t\tjoint.name = this.parseVarStr();\r\n\r\n\t\t\tibp = this.parseMatrix3D();\r\n\t\t\tjoint.inverseBindPose = ibp.rawData;\r\n\t\t\t// Ignore joint props/attributes for now\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tskeleton.joints.push(joint);\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\r\n\t\t// Discard attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(skeleton, name);\r\n\t\tthis._blocks[blockID].data = skeleton;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//Block ID = 102\r\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar pose:SkeletonPose = new SkeletonPose();\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint_pose:JointPose;\r\n\t\t\tvar has_transform:number /*uint*/;\r\n\t\t\tjoint_pose = new JointPose();\r\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\r\n\t\t\tif (has_transform == 1) {\r\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\r\n\r\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\r\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\r\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\r\n\r\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\r\n\t\t\t}\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\t\t// Skip attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(pose, name);\r\n\t\tthis._blocks[blockID].data = pose;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//blockID 103\r\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar frame_dur:number;\r\n\t\tvar pose_addr:number /*uint*/;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar returnedArray:Array<any>;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [AssetType.SKELETON_POSE]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\r\n\t\t\telse\r\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif (clip.frames.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Ignore attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//Block ID = 111 /  Block ID = 112\r\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\r\n\t{\r\n\t\tvar num_frames:number /*uint*/ = 1;\r\n\t\tvar num_submeshes:number /*uint*/;\r\n\t\tvar frames_parsed:number /*uint*/;\r\n\t\tvar subMeshParsed:number /*uint*/;\r\n\t\tvar frame_dur:number;\r\n\t\tvar x:number;\r\n\t\tvar y:number;\r\n\t\tvar z:number;\r\n\t\tvar str_len:number;\r\n\t\tvar str_end:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar idx:number /*int*/ = 0;\r\n\t\tvar clip:VertexClipNode = new VertexClipNode();\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\t\tvar verts:Array<number>;\r\n\t\tvar num_Streams:number /*int*/ = 0;\r\n\t\tvar streamsParsed:number /*int*/ = 0;\r\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar thisGeo:Geometry;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [AssetType.GEOMETRY]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\r\n\t\tif (!poseOnly)\r\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\r\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\r\n\t\tstreamsParsed = 0;\r\n\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\r\n\t\t\tstreamsParsed++;\r\n\t\t}\r\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\r\n\r\n\t\tclip.looping = props.get(1, true);\r\n\t\tclip.stitchFinalFrame = props.get(2, false);\r\n\r\n\t\tframes_parsed = 0;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tsubMeshParsed = 0;\r\n\t\t\twhile (subMeshParsed < num_submeshes) {\r\n\t\t\t\tstreamsParsed = 0;\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\t\t\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\r\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\r\n\t\t\t\t\t\tverts = new Array<number>();\r\n\t\t\t\t\t\tidx = 0;\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\r\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\r\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\r\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\r\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\r\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\r\n\t\t\t\t\t\tsubMeshParsed++;\r\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\tstreamsParsed++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//BlockID 113\r\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar poseBlockAdress:number /*int*/\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\r\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\r\n\t\t\telse {\r\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\r\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\r\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\r\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\r\n\t\t\t}\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tif (vertexFrames.length > 0) {\r\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\r\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\r\n\r\n\t\t} else if (skeletonFrames.length > 0) {\r\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\r\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\r\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\r\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t//BlockID 122\r\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar targetMesh:Mesh;\r\n\t\tvar animSetBlockAdress:number /*int*/\r\n\t\tvar targetAnimationSet:AnimationSetBase;\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\r\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\r\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\r\n\r\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tvar returnedArray:Array<any>;\r\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\r\n\r\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\r\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [AssetType.MESH]);\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\r\n\t\t}\r\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AssetType.ANIMATION_SET]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\r\n\t\t\treturn\r\n\t\t}\r\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\r\n\t\tvar thisAnimator:AnimatorBase;\r\n\t\tif (type == 1) {\r\n\r\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [AssetType.SKELETON]);\r\n\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\r\n\r\n\t\t} else if (type == 2)\r\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\r\n\r\n\t\tthis._pFinalizeAsset(thisAnimator, name);\r\n\t\tthis._blocks[blockID].data = thisAnimator;\r\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\r\n\t\t\tif (type == 1)\r\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\r\n\t\t\tif (type == 2)\r\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\r\n\r\n\t\t}\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\r\n\t}\r\n\r\n\t// this functions reads and creates a EffectMethod\r\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar effectMethodReturn:EffectMethodBase;\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tswitch (methodType) {\r\n\t\t\t// Effect Methods\r\n\t\t\tcase 401: //ColorMatrix\r\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 402: //ColorTransform\r\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\r\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\r\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 403: //EnvMap\r\n\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\tconsole.log('ENV MAP', targetID);\r\n\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ AssetType.TEXTURE ], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\r\n\t\t\t\ttargetID = props.get(2, 0);\r\n\t\t\t\tif (targetID > 0) {\r\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\r\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\r\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 404: //LightMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE_PROJECTOR]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 406: //RimLightMethod\r\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\r\n\t\t\t\tbreak;\r\n\t\t\tcase 407: //AlphaMaskMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\r\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 410: //FresnelEnvMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 411: //FogMethod\r\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn effectMethodReturn;\r\n\r\n\t}\r\n\r\n\tprivate parseUserAttributes():Object\r\n\t{\r\n\t\tvar attributes:Object;\r\n\t\tvar list_len:number;\r\n\t\tvar attibuteCnt:number;\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tif (list_len > 0) {\r\n\r\n\t\t\tvar list_end:number;\r\n\r\n\t\t\tattributes = {};\r\n\r\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar ns_id:number;\r\n\t\t\t\tvar attr_key:string;\r\n\t\t\t\tvar attr_type:number;\r\n\t\t\t\tvar attr_len:number;\r\n\t\t\t\tvar attr_val:any;\r\n\r\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\r\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_key = this.parseVarStr();\r\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn attributes;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (attr_type) {\r\n\t\t\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.BOOL:\r\n\t\t\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT32:\r\n\t\t\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\r\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributes[attr_key] = attr_val;\r\n\t\t\t\tattibuteCnt += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\tprivate parseProperties(expected:Object):AWDProperties\r\n\t{\r\n\t\tvar list_end:number;\r\n\t\tvar list_len:number;\r\n\t\tvar propertyCnt:number = 0;\r\n\t\tvar props:AWDProperties = new AWDProperties();\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\tif (expected) {\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar len:number;\r\n\t\t\t\tvar key:number;\r\n\t\t\t\tvar type:number;\r\n\r\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn props;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\r\n\t\t\t\t\ttype = expected[key];\r\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpropertyCnt += 1;\r\n\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t}\r\n\r\n\t\treturn props;\r\n\r\n\t}\r\n\r\n\tprivate parseAttrValue(type:number, len:number):any\r\n\t{\r\n\t\tvar elem_len:number;\r\n\t\tvar read_func:Function;\r\n\r\n\t\tswitch (type) {\r\n\r\n\t\t\tcase AWDParser.BOOL:\r\n\t\t\tcase AWDParser.INT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT32:\r\n\t\t\tcase AWDParser.COLOR:\r\n\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\r\n\t\t\tcase AWDParser.VECTOR2x1:\r\n\t\t\tcase AWDParser.VECTOR3x1:\r\n\t\t\tcase AWDParser.VECTOR4x1:\r\n\t\t\tcase AWDParser.MTX3x2:\r\n\t\t\tcase AWDParser.MTX3x3:\r\n\t\t\tcase AWDParser.MTX4x3:\r\n\t\t\tcase AWDParser.MTX4x4:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif (elem_len < len) {\r\n\t\t\tvar list:Array<any> = [];\r\n\t\t\tvar num_read:number = 0;\r\n\t\t\tvar num_elems:number = len/elem_len;\r\n\r\n\t\t\twhile (num_read < num_elems) {\r\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\r\n\t\t\t\tnum_read++;\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t} else {\r\n\r\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\r\n\t\t\treturn val;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseHeader():void\r\n\t{\r\n\t\tvar flags:number;\r\n\t\tvar body_len:number;\r\n\r\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\r\n\r\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\r\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\r\n\r\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\r\n\r\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\r\n\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\t}\r\n\r\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\r\n\r\n\t\t// set storagePrecision types\r\n\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyGeo) {\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyMatrix) {\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyProps) {\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\r\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\t// Check file integrity\r\n\t\tbody_len = this._byteData.readUnsignedInt();\r\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\r\n\t\t}\r\n\r\n\t}\r\n\t// Helper - functions\r\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\r\n\t{\r\n\t\tif (this._blocks[meshID].data instanceof Mesh)\r\n\t\t\tmeshID = this._blocks[meshID].geoID;\r\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\r\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\r\n\t\tvar geoCnt:number /*int*/ = 0;\r\n\t\tvar ud:Array<number>;\r\n\t\tvar uStride:number /*uint*/;\r\n\t\tvar uOffs:number /*uint*/;\r\n\t\tvar numPoints:number /*uint*/;\r\n\t\tvar i:number /*int*/;\r\n\t\tvar newUvs:Array<number>;\r\n\t\tvar sub_geom:TriangleSubGeometry;\r\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\r\n\t\twhile (geoCnt < geometry.subGeometries.length) {\r\n\t\t\tnewUvs = new Array<number>();\r\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\r\n\t\t\tnumPoints = sub_geom.numVertices;\r\n\t\t\tud = sub_geom.uvs;\r\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\r\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\r\n\t\t\tfor (i = 0; i < numPoints; i++) {\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\r\n\t\t\t}\r\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\r\n\t\t\tgeoCnt++;\r\n\t\t}\r\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t}\r\n\r\n\tprivate parseVarStr():string\r\n\t{\r\n\r\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\r\n\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\t}\r\n\r\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\r\n\t{\r\n\t\tvar returnArray:Array<any> = new Array<any>();\r\n\t\tvar typeCnt:number = 0;\r\n\t\tif (assetID > 0) {\r\n\t\t\tif (this._blocks[assetID]) {\r\n\t\t\t\tif (this._blocks[assetID].data) {\r\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\r\n\r\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\r\n\r\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\r\n\t\t\t\t\t\t\t//if the right assetType was found\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"CubeTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"SingleTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (IAsset(_blocks[assetID].data).assetType == AssetType.MESH)) {\r\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (iasset.assetType == AssetType.MESH)) {\r\n\r\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\r\n\r\n\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\r\n\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttypeCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\r\n\t\treturnArray.push(false);\r\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\r\n\t\treturn returnArray;\r\n\t}\r\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\r\n\t{\r\n\t\tswitch (true) {\r\n\t\t\tcase (assetType == AssetType.TEXTURE):\r\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\r\n\t\t\t\t\treturn this.getDefaultCubeTexture();\r\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\r\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t\tbreak;\r\n\t\t\tcase (assetType == AssetType.MATERIAL):\r\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate getDefaultCubeTexture():IAsset\r\n\t{\r\n\t\tif (!this._defaultCubeTexture) {\r\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\r\n\r\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\r\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\r\n\t\t}\r\n\r\n\t\treturn <IAsset> this._defaultCubeTexture;\r\n\t}\r\n\r\n\tprivate readNumber(precision:boolean = false):number\r\n\t{\r\n\t\tif (precision)\r\n\t\t\treturn this._newBlockBytes.readDouble();\r\n\t\treturn this._newBlockBytes.readFloat();\r\n\r\n\t}\r\n\r\n\tprivate parseMatrix3D():Matrix3D\r\n\t{\r\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\r\n\t}\r\n\r\n\tprivate parseMatrix32RawData():Array<number>\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n\tprivate parseMatrix43RawData():Array<number>\r\n\t{\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\r\n\r\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[3] = 0.0;\r\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[7] = 0.0;\r\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[11] = 0.0;\r\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[15] = 1.0;\r\n\r\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\r\n\r\n\t\tif (isNaN(mtx_raw[0])) {\r\n\t\t\tmtx_raw[0] = 1;\r\n\t\t\tmtx_raw[1] = 0;\r\n\t\t\tmtx_raw[2] = 0;\r\n\t\t\tmtx_raw[4] = 0;\r\n\t\t\tmtx_raw[5] = 1;\r\n\t\t\tmtx_raw[6] = 0;\r\n\t\t\tmtx_raw[8] = 0;\r\n\t\t\tmtx_raw[9] = 0;\r\n\t\t\tmtx_raw[10] = 1;\r\n\t\t\tmtx_raw[12] = 0;\r\n\t\t\tmtx_raw[13] = 0;\r\n\t\t\tmtx_raw[14] = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n}\r\n\r\nexport = AWDParser;\r\n\r\nclass AWDBlock\r\n{\r\n\tpublic id:number;\r\n\tpublic name:string;\r\n\tpublic data:any;\r\n\tpublic len:any;\r\n\tpublic geoID:number;\r\n\tpublic extras:Object;\r\n\tpublic bytes:ByteArray;\r\n\tpublic errorMessages:Array<string>;\r\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\r\n\r\n\tconstructor()\r\n\t{\r\n\t}\r\n\r\n\tpublic dispose()\r\n\t{\r\n\r\n\t\tthis.id = null;\r\n\t\tthis.bytes = null;\r\n\t\tthis.errorMessages = null;\r\n\t\tthis.uvsForVertexAnimation = null;\r\n\r\n\t}\r\n\r\n\tpublic addError(errorMsg:string):void\r\n\t{\r\n\t\tif (!this.errorMessages)\r\n\t\t\tthis.errorMessages = new Array<string>();\r\n\r\n\t\tthis.errorMessages.push(errorMsg);\r\n\t}\r\n}\r\n\r\nclass AWDProperties\r\n{\r\n\tpublic set(key:number, value:any):void\r\n\t{\r\n\t\tthis[ key.toString() ] = value;\r\n\t}\r\n\r\n\tpublic get(key:number, fallback:any):any\r\n\t{\r\n\t\tif (this.hasOwnProperty(key.toString())) {\r\n\t\t\treturn this[key.toString()];\r\n\t\t} else {\r\n\t\t\treturn fallback;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BitFlags\r\n{\r\n\tpublic static FLAG1:number = 1;\r\n\tpublic static FLAG2:number = 2;\r\n\tpublic static FLAG3:number = 4;\r\n\tpublic static FLAG4:number = 8;\r\n\tpublic static FLAG5:number = 16;\r\n\tpublic static FLAG6:number = 32;\r\n\tpublic static FLAG7:number = 64;\r\n\tpublic static FLAG8:number = 128;\r\n\tpublic static FLAG9:number = 256;\r\n\tpublic static FLAG10:number = 512;\r\n\tpublic static FLAG11:number = 1024;\r\n\tpublic static FLAG12:number = 2048;\r\n\tpublic static FLAG13:number = 4096;\r\n\tpublic static FLAG14:number = 8192;\r\n\tpublic static FLAG15:number = 16384;\r\n\tpublic static FLAG16:number = 32768;\r\n\r\n\tpublic static test(flags:number, testFlag:number):boolean\r\n\t{\r\n\t\treturn (flags & testFlag) == testFlag;\r\n\t}\r\n}\r\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\n\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * MD2Parser provides a parser for the MD2 data type.\r\n */\r\nclass MD2Parser extends ParserBase\r\n{\r\n\tpublic static FPS:number /*int*/ = 6;\r\n\r\n\tprivate _clipNodes:Object = new Object();\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _parsedHeader:boolean;\r\n\tprivate _parsedUV:boolean;\r\n\tprivate _parsedFaces:boolean;\r\n\tprivate _parsedFrames:boolean;\r\n\r\n\tprivate _ident:number /*uint*/;\r\n\tprivate _version:number /*uint*/;\r\n\tprivate _skinWidth:number /*uint*/;\r\n\tprivate _skinHeight:number /*uint*/;\r\n\t//private _frameSize : number /*uint*/;\r\n\tprivate _numSkins:number /*uint*/;\r\n\tprivate _numVertices:number /*uint*/;\r\n\tprivate _numST:number /*uint*/;\r\n\tprivate _numTris:number /*uint*/;\r\n\t//private _numGlCmds : number /*uint*/;\r\n\tprivate _numFrames:number /*uint*/;\r\n\tprivate _offsetSkins:number /*uint*/;\r\n\tprivate _offsetST:number /*uint*/;\r\n\tprivate _offsetTris:number /*uint*/;\r\n\tprivate _offsetFrames:number /*uint*/;\r\n\t//private _offsetGlCmds : number /*uint*/;\r\n\tprivate _offsetEnd:number /*uint*/;\r\n\r\n\tprivate _uvIndices:Array<number>;\r\n\tprivate _indices:Array<number> /*uint*/;\r\n\tprivate _vertIndices:Array<number>;\r\n\r\n\t// the current subgeom being built\r\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\tprivate _firstSubGeom:TriangleSubGeometry;\r\n\tprivate _uvs:Array<number>;\r\n\tprivate _finalUV:Array<number>;\r\n\r\n\tprivate _materialNames:Array<string>;\r\n\tprivate _textureType:string;\r\n\tprivate _ignoreTexturePath:boolean;\r\n\tprivate _mesh:Mesh;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate materialFinal:boolean = false;\r\n\tprivate geoCreated:boolean = false;\r\n\r\n\t/**\r\n\t * Creates a new MD2Parser object.\r\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\r\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\r\n\t */\r\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\t\tthis._textureType = textureType;\r\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md2\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.assets.length != 1)\r\n\t\t\treturn;\r\n\r\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\r\n\r\n\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\tmaterial.name = this._mesh.material.name;\r\n\t\t\tthis._mesh.material = material;\r\n\t\t\tthis._pFinalizeAsset(material);\r\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t}\r\n\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// apply system default\r\n\t\tif (this.materialMode < 2) {\r\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t} else {\r\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t}\r\n\r\n\t\t//add to the content property\r\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\tthis.materialFinal = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\r\n\t\t\t// Reset bytearray read position (which may have been\r\n\t\t\t// moved forward by the supportsData() function.)\r\n\t\t\tthis._byteData.position = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\tif (!this._parsedHeader) {\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\r\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\r\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\r\n\t\t\t\tthis._geometry = new Geometry();\r\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\r\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\r\n\r\n\t\t\t\t// Parse header and decompress body\r\n\t\t\t\tthis.parseHeader();\r\n\t\t\t\tthis.parseMaterialNames();\r\n\t\t\t} else if (!this._parsedUV) {\r\n\t\t\t\tthis.parseUV();\r\n\t\t\t} else if (!this._parsedFaces) {\r\n\t\t\t\tthis.parseFaces();\r\n\t\t\t} else if (!this._parsedFrames) {\r\n\t\t\t\tthis.parseFrames();\r\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t} else if (!this.geoCreated) {\r\n\t\t\t\tthis.geoCreated = true;\r\n\t\t\t\t//create default subgeometry\r\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\r\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\r\n\t\t\t\tthis._mesh.name = \"\";\r\n\t\t\t\tif (this.materialFinal) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads in all that MD2 Header data that is declared as private variables.\r\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\r\n\t */\r\n\tprivate parseHeader()\r\n\t{\r\n\t\tthis._ident = this._byteData.readInt();\r\n\t\tthis._version = this._byteData.readInt();\r\n\t\tthis._skinWidth = this._byteData.readInt();\r\n\t\tthis._skinHeight = this._byteData.readInt();\r\n\t\t//skip this._frameSize\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numSkins = this._byteData.readInt();\r\n\t\tthis._numVertices = this._byteData.readInt();\r\n\t\tthis._numST = this._byteData.readInt();\r\n\t\tthis._numTris = this._byteData.readInt();\r\n\t\t//skip this._numGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numFrames = this._byteData.readInt();\r\n\t\tthis._offsetSkins = this._byteData.readInt();\r\n\t\tthis._offsetST = this._byteData.readInt();\r\n\t\tthis._offsetTris = this._byteData.readInt();\r\n\t\tthis._offsetFrames = this._byteData.readInt();\r\n\t\t//skip this._offsetGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._offsetEnd = this._byteData.readInt();\r\n\r\n\t\tthis._parsedHeader = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the file names for the materials.\r\n\t */\r\n\tprivate parseMaterialNames()\r\n\t{\r\n\t\tvar url:string;\r\n\t\tvar name:string;\r\n\t\tvar extIndex:number /*int*/;\r\n\t\tvar slashIndex:number /*int*/;\r\n\t\tthis._materialNames = new Array<string>();\r\n\t\tthis._byteData.position = this._offsetSkins;\r\n\r\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\r\n\t\t\tname = this._byteData.readUTFBytes(64);\r\n\t\t\tname = name.replace(regExp, \"\");\r\n\t\t\textIndex = name.lastIndexOf(\".\");\r\n\t\t\tif (this._ignoreTexturePath)\r\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\r\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\r\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\r\n\t\t\t\turl = name + \".\" + this._textureType;\r\n\t\t\t} else {\r\n\t\t\t\turl = name;\r\n\t\t\t}\r\n\r\n\t\t\tthis._materialNames[i] = name;\r\n\r\n\t\t\t// only support 1 skin TODO: really?\r\n\t\t\tif (this.dependencies.length == 0)\r\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\r\n\t\t}\r\n\r\n\t\tif (this._materialNames.length > 0)\r\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\r\n\t\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the uv data for the mesh.\r\n\t */\r\n\tprivate parseUV()\r\n\t{\r\n\t\tvar j:number /*uint*/ = 0;\r\n\r\n\t\tthis._uvs = new Array<number>(this._numST*2);\r\n\t\tthis._byteData.position = this._offsetST;\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\r\n\t\t}\r\n\r\n\t\tthis._parsedUV = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses unique indices for the faces.\r\n\t */\r\n\tprivate parseFaces()\r\n\t{\r\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\r\n\t\tthis._vertIndices = new Array<number>();\r\n\t\tthis._uvIndices = new Array<number>();\r\n\t\tthis._indices = new Array<number>() /*uint*/;\r\n\r\n\t\tthis._byteData.position = this._offsetTris;\r\n\r\n\t\tfor (i = 0; i < this._numTris; i++) {\r\n\t\t\t//collect vertex indices\r\n\t\t\ta = this._byteData.readUnsignedShort();\r\n\t\t\tb = this._byteData.readUnsignedShort();\r\n\t\t\tc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\t//collect uv indices\r\n\t\t\tta = this._byteData.readUnsignedShort();\r\n\t\t\ttb = this._byteData.readUnsignedShort();\r\n\t\t\ttc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis.addIndex(a, ta);\r\n\t\t\tthis.addIndex(b, tb);\r\n\t\t\tthis.addIndex(c, tc);\r\n\t\t}\r\n\r\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\r\n\t\tthis._finalUV = new Array<number>(len*2);\r\n\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\r\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\r\n\t\t}\r\n\r\n\t\tthis._parsedFaces = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\r\n\t * corresponding vertex and uv data in the correct location.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t */\r\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\r\n\t{\r\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\r\n\r\n\t\tif (index == -1) {\r\n\t\t\tthis._indices.push(this._vertIndices.length);\r\n\t\t\tthis._vertIndices.push(vertexIndex);\r\n\t\t\tthis._uvIndices.push(uvIndex);\r\n\t\t} else\r\n\t\t\tthis._indices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\r\n\t */\r\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\r\n\r\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\r\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses all the frame geometries.\r\n\t */\r\n\tprivate parseFrames()\r\n\t{\r\n\t\tvar sx:number, sy:number, sz:number;\r\n\t\tvar tx:number, ty:number, tz:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\r\n\t\tvar fvertices:Array<number>;\r\n\t\tvar tvertices:Array<number>;\r\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\r\n\t\t//var ch : number /*uint*/;\r\n\t\tvar name:string = \"\";\r\n\t\tvar prevClip:VertexClipNode = null;\r\n\r\n\t\tthis._byteData.position = this._offsetFrames;\r\n\r\n\t\tfor (i = 0; i < this._numFrames; i++) {\r\n\r\n\t\t\ttvertices = new Array<number>();\r\n\t\t\tfvertices = new Array<number>(vertLen*3);\r\n\r\n\t\t\tsx = this._byteData.readFloat();\r\n\t\t\tsy = this._byteData.readFloat();\r\n\t\t\tsz = this._byteData.readFloat();\r\n\r\n\t\t\ttx = this._byteData.readFloat();\r\n\t\t\tty = this._byteData.readFloat();\r\n\t\t\ttz = this._byteData.readFloat();\r\n\r\n\t\t\tname = this.readFrameName();\r\n\r\n\t\t\t// Note, the extra data.position++ in the for loop is there\r\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\r\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\r\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\r\n\r\n\t\t\tk = 0;\r\n\t\t\tfor (j = 0; j < vertLen; j++) {\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\r\n\t\t\t}\r\n\r\n\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\r\n\t\t\tif (this._firstSubGeom == null)\r\n\t\t\t\tthis._firstSubGeom = subGeom;\r\n\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tgeometry.addSubGeometry(subGeom);\r\n\r\n\t\t\tsubGeom.updateIndices(this._indices);\r\n\t\t\tsubGeom.updatePositions(fvertices);\r\n\t\t\tsubGeom.updateUVs(this._finalUV);\r\n\t\t\tsubGeom.vertexNormals;\r\n\t\t\tsubGeom.vertexTangents;\r\n\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\tsubGeom.autoDeriveTangents = false;\r\n\r\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\r\n\r\n\t\t\tif (!clip) {\r\n\t\t\t\t// If another sequence was parsed before this one, starting\r\n\t\t\t\t// a new state means the previous one is complete and can\r\n\t\t\t\t// hence be finalized.\r\n\t\t\t\tif (prevClip) {\r\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclip = new VertexClipNode();\r\n\t\t\t\tclip.name = name;\r\n\t\t\t\tclip.stitchFinalFrame = true;\r\n\r\n\t\t\t\tthis._clipNodes[name] = clip;\r\n\r\n\t\t\t\tprevClip = clip;\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\r\n\t\t}\r\n\r\n\t\t// Finalize the last state\r\n\t\tif (prevClip) {\r\n\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t}\r\n\r\n\t\t// Force this._pFinalizeAsset() to decide name\r\n\t\tthis._pFinalizeAsset(this._animationSet);\r\n\r\n\t\tthis._parsedFrames = true;\r\n\t}\r\n\r\n\tprivate readFrameName():string\r\n\t{\r\n\t\tvar name:string = \"\";\r\n\t\tvar k:number /*uint*/ = 0;\r\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\r\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\r\n\r\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\r\n\t\t\t\tname += String.fromCharCode(ch);\r\n\r\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\r\n\t\t\t\tk++;\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n}\r\n\r\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\n\r\n/**\r\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5AnimParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\r\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\r\n\r\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\r\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\r\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\r\n\tpublic static FRAME_TOKEN:string = \"frame\";\r\n\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _frameRate:number /*int*/;\r\n\tprivate _numFrames:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numAnimatedComponents:number /*int*/;\r\n\r\n\tprivate _hierarchy:Array<HierarchyData>;\r\n\tprivate _bounds:Array<BoundsData>;\r\n\tprivate _frameData:Array<FrameData>;\r\n\tprivate _baseFrameData:Array<BaseFrameData>;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\tprivate _clip:SkeletonClipNode;\r\n\r\n\t/**\r\n\t * Creates a new MD5AnimParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\t\tvar t1:Quaternion = new Quaternion();\r\n\t\tvar t2:Quaternion = new Quaternion();\r\n\r\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\r\n\r\n\t\tthis._rotationQuat.multiply(t2, t1);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tthis._rotationQuat.multiply(t2, t1);\r\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5anim\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"\":\r\n\t\t\t\t\t// can occur at the end of a file\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\r\n\t\t\t\t\tthis._numFrames = this.getNextInt();\r\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\r\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\r\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\r\n\t\t\t\t\tthis._frameRate = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\r\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\r\n\t\t\t\t\tthis.parseHierarchy();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\r\n\t\t\t\t\tthis.parseBounds();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseBaseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis._clip = new SkeletonClipNode();\r\n\t\t\t\tthis.translateClip();\r\n\t\t\t\tthis._pFinalizeAsset(this._clip);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts all key frame data to an SkinnedAnimationSequence.\r\n\t */\r\n\tprivate translateClip():void\r\n\t{\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\r\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a single key frame data to a SkeletonPose.\r\n\t * @param frameData The actual frame data.\r\n\t * @return A SkeletonPose containing the frame data's pose.\r\n\t */\r\n\tprivate translatePose(frameData:FrameData):SkeletonPose\r\n\t{\r\n\t\tvar hierarchy:HierarchyData;\r\n\t\tvar pose:JointPose;\r\n\t\tvar base:BaseFrameData;\r\n\t\tvar flags:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar translate:Vector3D = new Vector3D();\r\n\t\tvar orientation:Quaternion = new Quaternion();\r\n\t\tvar components:Array<number> = frameData.components;\r\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\r\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\r\n\t\t\tj = 0;\r\n\t\t\tpose = new JointPose();\r\n\t\t\thierarchy = this._hierarchy[i];\r\n\t\t\tbase = this._baseFrameData[i];\r\n\t\t\tflags = hierarchy.flags;\r\n\t\t\ttranslate.x = base.position.x;\r\n\t\t\ttranslate.y = base.position.y;\r\n\t\t\ttranslate.z = base.position.z;\r\n\t\t\torientation.x = base.orientation.x;\r\n\t\t\torientation.y = base.orientation.y;\r\n\t\t\torientation.z = base.orientation.z;\r\n\r\n\t\t\tif (flags & 1)\r\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 2)\r\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 4)\r\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 8)\r\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 16)\r\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 32)\r\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\r\n\r\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\r\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\r\n\r\n\t\t\tif (hierarchy.parentIndex < 0) {\r\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\r\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\r\n\t\t\t} else {\r\n\t\t\t\tpose.orientation.copyFrom(orientation);\r\n\t\t\t\tpose.translation.x = translate.x;\r\n\t\t\t\tpose.translation.y = translate.y;\r\n\t\t\t\tpose.translation.z = translate.z;\r\n\t\t\t}\r\n\t\t\tpose.orientation.y = -pose.orientation.y;\r\n\t\t\tpose.orientation.z = -pose.orientation.z;\r\n\t\t\tpose.translation.x = -pose.translation.x;\r\n\r\n\t\t\tjointPoses[i] = pose;\r\n\t\t}\r\n\r\n\t\treturn skelPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's hierarchy data.\r\n\t */\r\n\tprivate parseHierarchy():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:HierarchyData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new HierarchyData();\r\n\t\t\tdata.name = this.parseLiteralstring();\r\n\t\t\tdata.parentIndex = this.getNextInt();\r\n\t\t\tdata.flags = this.getNextInt();\r\n\t\t\tdata.startIndex = this.getNextInt();\r\n\t\t\tthis._hierarchy[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses frame bounds.\r\n\t */\r\n\tprivate parseBounds():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BoundsData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BoundsData();\r\n\t\t\tdata.min = this.parseVector3D();\r\n\t\t\tdata.max = this.parseVector3D();\r\n\t\t\tthis._bounds[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the base frame.\r\n\t */\r\n\tprivate parseBaseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BaseFrameData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BaseFrameData();\r\n\t\t\tdata.position = this.parseVector3D();\r\n\t\t\tdata.orientation = this.parseQuaternion();\r\n\t\t\tthis._baseFrameData[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single frame.\r\n\t */\r\n\tprivate parseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:FrameData;\r\n\t\tvar token:string;\r\n\t\tvar frameIndex:number /*int*/;\r\n\r\n\t\tframeIndex = this.getNextInt();\r\n\r\n\t\ttoken = this.getNextToken();\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new FrameData();\r\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\r\n\r\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\r\n\t\t\t\tdata.components[i] = this.getNextNumber();\r\n\r\n\t\t\tthis._frameData[frameIndex] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex == this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = this.getNextNumber();\r\n\t\tquat.z = this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn quat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5AnimParser;\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass BaseFrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic position:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic orientation:Quaternion;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BoundsData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic min:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic max:Vector3D;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass FrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic index:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic components:Array<number>;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass HierarchyData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic name:string;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic parentIndex:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic flags:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic startIndex:number /*int*/;\r\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\n\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\n\r\n// todo: create animation system, parse skeleton\r\n\r\n/**\r\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5MeshParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\tpublic static JOINTS_TOKEN:string = \"joints\";\r\n\tpublic static MESH_TOKEN:string = \"mesh\";\r\n\r\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\r\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\r\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\r\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\r\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\r\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\r\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numMeshes:number /*int*/;\r\n\r\n\tprivate _mesh:Mesh;\r\n\tprivate _shaders:Array<string>;\r\n\r\n\tprivate _maxJointCount:number /*int*/;\r\n\tprivate _meshData:Array<MeshData>;\r\n\tprivate _bindPoses:Array<Matrix3D>;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate _skeleton:Skeleton;\r\n\tprivate _animationSet:SkeletonAnimationSet;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\r\n\t/**\r\n\t * Creates a new MD5MeshParser object.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\r\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tvar quat:Quaternion = new Quaternion();\r\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5mesh\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\r\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\r\n\t\t\t\t\tthis.parseJoints();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\r\n\t\t\t\t\tthis.parseMesh();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis.calculateMaxJointCount();\r\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\r\n\r\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\r\n\t\t\t\tthis._geometry = this._mesh.geometry;\r\n\r\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\r\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\r\n\r\n\t\t\t\t//_geometry.animation = _animation;\r\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\r\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\r\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate calculateMaxJointCount():void\r\n\t{\r\n\t\tthis._maxJointCount = 0;\r\n\r\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\r\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\r\n\t\t\tvar meshData:MeshData = this._meshData[i];\r\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\r\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\r\n\r\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\r\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\r\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\r\n\t\t\t\tif (totalJoints > this._maxJointCount)\r\n\t\t\t\t\tthis._maxJointCount = totalJoints;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\r\n\t{\r\n\t\tvar start:number /*int*/ = vertex.startWeight;\r\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\r\n\t\tvar count:number /*int*/ = 0;\r\n\t\tvar weight:number;\r\n\r\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\r\n\t\t\tweight = weights[i].bias;\r\n\t\t\tif (weight == 0)\r\n\t\t\t\t++count;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's joints.\r\n\t */\r\n\tprivate parseJoints():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar quat:Quaternion;\r\n\t\tvar i:number /*int*/ = 0;\r\n\t\tvar token:string = this.getNextToken();\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tthis._skeleton = new Skeleton();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.name = this.parseLiteralstring();\r\n\t\t\tjoint.parentIndex = this.getNextInt();\r\n\t\t\tpos = this.parseVector3D();\r\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\r\n\t\t\tquat = this.parseQuaternion();\r\n\r\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\r\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\r\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\r\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\r\n\t\t\tinv.invert();\r\n\t\t\tjoint.inverseBindPose = inv.rawData;\r\n\r\n\t\t\tthis._skeleton.joints[i++] = joint;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the mesh geometry.\r\n\t */\r\n\tprivate parseMesh():void\r\n\t{\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar ch:string;\r\n\t\tvar vertexData:Array<VertexData>;\r\n\t\tvar weights:Array<JointData>;\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tif (this._shaders == null)\r\n\t\t\tthis._shaders = new Array<string>();\r\n\r\n\t\twhile (ch != \"}\") {\r\n\t\t\tch = this.getNextToken();\r\n\t\t\tswitch (ch) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\r\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\r\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\r\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\r\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\r\n\t\t\t\t\tthis.parseVertex(vertexData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\r\n\t\t\t\t\tthis.parseTri(indices);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\r\n\t\t\t\t\tthis.parseJoint(weights);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._meshData == null)\r\n\t\t\tthis._meshData = new Array<MeshData>();\r\n\r\n\t\tvar i:number /*uint*/ = this._meshData.length;\r\n\t\tthis._meshData[i] = new MeshData();\r\n\t\tthis._meshData[i].vertexData = vertexData;\r\n\t\tthis._meshData[i].weightData = weights;\r\n\t\tthis._meshData[i].indices = indices;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the mesh data to a SkinnedSub instance.\r\n\t * @param vertexData The mesh's vertices.\r\n\t * @param weights The joint weights per vertex.\r\n\t * @param indices The indices for the faces.\r\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\r\n\t */\r\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\r\n\t{\r\n\t\tvar len:number /*int*/ = vertexData.length;\r\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\r\n\t\tvar vertex:VertexData;\r\n\t\tvar weight:JointData;\r\n\t\tvar bindPose:Matrix3D;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\r\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\r\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\r\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar l:number /*int*/ = 0;\r\n\t\tvar nonZeroWeights:number /*int*/;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\r\n\t\t\tvertex = vertexData[i];\r\n\t\t\tv1 = vertex.index*3;\r\n\t\t\tv2 = v1 + 1;\r\n\t\t\tv3 = v1 + 2;\r\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\r\n\r\n\t\t\tnonZeroWeights = 0;\r\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\r\n\t\t\t\tweight = weights[vertex.startWeight + j];\r\n\t\t\t\tif (weight.bias > 0) {\r\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\r\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\r\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\r\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\r\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\r\n\r\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\r\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\r\n\t\t\t\t\tjointWeights[l++] = weight.bias;\r\n\t\t\t\t\t++nonZeroWeights;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\r\n\t\t\t\tjointIndices[l] = 0;\r\n\t\t\t\tjointWeights[l++] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tv1 = vertex.index << 1;\r\n\t\t\tuvs[v1++] = vertex.s;\r\n\t\t\tuvs[v1] = vertex.t;\r\n\t\t}\r\n\r\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\r\n\t\tsubGeom.updateIndices(indices);\r\n\t\tsubGeom.updatePositions(vertices);\r\n\t\tsubGeom.updateUVs(uvs);\r\n\t\tsubGeom.updateJointIndices(jointIndices);\r\n\t\tsubGeom.updateJointWeights(jointWeights);\r\n\t\t// cause explicit updates\r\n\t\tsubGeom.vertexNormals;\r\n\t\tsubGeom.vertexTangents;\r\n\t\t// turn auto updates off because they may be animated and set explicitly\r\n\t\tsubGeom.autoDeriveTangents = false;\r\n\t\tsubGeom.autoDeriveNormals = false;\r\n\r\n\t\treturn subGeom;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve the next triplet of vertex indices that form a face.\r\n\t * @param indices The index list in which to store the read data.\r\n\t */\r\n\tprivate parseTri(indices:Array<number> /*uint*/):void\r\n\t{\r\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\r\n\t\tindices[index] = this.getNextInt();\r\n\t\tindices[index + 1] = this.getNextInt();\r\n\t\tindices[index + 2] = this.getNextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a new joint data set for a single joint.\r\n\t * @param weights the target list to contain the weight data.\r\n\t */\r\n\tprivate parseJoint(weights:Array<JointData>):void\r\n\t{\r\n\t\tvar weight:JointData = new JointData();\r\n\t\tweight.index = this.getNextInt();\r\n\t\tweight.joint = this.getNextInt();\r\n\t\tweight.bias = this.getNextNumber();\r\n\t\tweight.pos = this.parseVector3D();\r\n\t\tweights[weight.index] = weight;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the data for a single vertex.\r\n\t * @param vertexData The list to contain the vertex data.\r\n\t */\r\n\tprivate parseVertex(vertexData:Array<VertexData>):void\r\n\t{\r\n\t\tvar vertex:VertexData = new VertexData();\r\n\t\tvertex.index = this.getNextInt();\r\n\t\tthis.parseUV(vertex);\r\n\t\tvertex.startWeight = this.getNextInt();\r\n\t\tvertex.countWeight = this.getNextInt();\r\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\r\n\t\tvertexData[vertex.index] = vertex;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinate.\r\n\t * @param vertexData The vertexData to contain the UV coordinates.\r\n\t */\r\n\tprivate parseUV(vertexData:VertexData):void\r\n\t{\r\n\t\tvar ch:string = this.getNextToken();\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvertexData.s = this.getNextNumber();\r\n\t\tvertexData.t = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex >= this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = -this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = -this.getNextNumber();\r\n\t\tquat.z = -this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\tvar rotQuat:Quaternion = new Quaternion();\r\n\t\trotQuat.multiply(this._rotationQuat, quat);\r\n\t\treturn rotQuat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5MeshParser;\r\n\r\n\r\nclass VertexData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic s:number;\r\n\tpublic t:number;\r\n\tpublic startWeight:number /*int*/;\r\n\tpublic countWeight:number /*int*/;\r\n}\r\n\r\nclass JointData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic joint:number /*int*/;\r\n\tpublic bias:number;\r\n\tpublic pos:Vector3D;\r\n}\r\n\r\nclass MeshData\r\n{\r\n\tpublic vertexData:Array<VertexData>;\r\n\tpublic weightData:Array<JointData>;\r\n\tpublic indices:Array<number> /*uint*/;\r\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * Max3DSParser provides a parser for the 3ds data type.\r\n */\r\nclass Max3DSParser extends ParserBase\r\n{\r\n\tprivate _byteData:ByteArray;\r\n\r\n\tprivate _textures:Object;\r\n\tprivate _materials:Object;\r\n\tprivate _unfinalized_objects:Object;\r\n\r\n\tprivate _cur_obj_end:number;\r\n\tprivate _cur_obj:ObjectVO;\r\n\r\n\tprivate _cur_mat_end:number;\r\n\tprivate _cur_mat:MaterialVO;\r\n\tprivate _useSmoothingGroups:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>Max3DSParser</code> object.\r\n\t *\r\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\r\n\t */\r\n\tconstructor(useSmoothingGroups:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"3ds\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar ba:ByteArray;\r\n\r\n\t\tba = ParserUtils.toByteArray(data);\r\n\t\tif (ba) {\r\n\t\t\tba.position = 0;\r\n\t\t\tif (ba.readShort() == 0x4d4d)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\r\n\t\t\t\tvar tex:TextureVO;\r\n\r\n\t\t\t\ttex = this._textures[resourceDependency.id];\r\n\t\t\t\ttex.texture = <Texture2DBase> asset;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// TODO: Implement\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._byteData) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._byteData.position = 0;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\tthis._textures = {};\r\n\t\t\tthis._materials = {};\r\n\t\t\tthis._unfinalized_objects = {};\r\n\t\t}\r\n\r\n\t\t// TODO: With this construct, the loop will run no-op for as long\r\n\t\t// as there is time once file has finished reading. Consider a nice\r\n\t\t// way to stop loop when byte array is empty, without putting it in\r\n\t\t// the while-conditional, which will prevent finalizations from\r\n\t\t// happening after the last chunk.\r\n\t\twhile (this._pHasTime()) {\r\n\r\n\t\t\t// If we are currently working on an object, and the most recent chunk was\r\n\t\t\t// the last one in that object, finalize the current object.\r\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\r\n\t\t\t\tthis.finalizeCurrentMaterial();\r\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\r\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\r\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\r\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\r\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\r\n\t\t\t\tthis._cur_obj = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\r\n\t\t\t\tvar cid:number /*uint*/;\r\n\t\t\t\tvar len:number /*uint*/;\r\n\t\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\t\tswitch (cid) {\r\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\r\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\r\n\t\t\t\t\tcase 0xB000: // KEYF3DS\r\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\r\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\r\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\r\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\r\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\r\n\t\t\t\t\t\tthis._cur_mat_end = end;\r\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\r\n\t\t\t\t\t\tthis._cur_obj_end = end;\r\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\r\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\r\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\r\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\r\n\t\t\t\t\t\tthis._cur_obj.type = AssetType.MESH;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\r\n\t\t\t\t\t\tthis.parseVertexList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\r\n\t\t\t\t\t\tthis.parseFaceList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\r\n\t\t\t\t\t\tthis.parseUVList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4130: // Face materials\r\n\t\t\t\t\t\tthis.parseFaceMaterialList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4160: // Transform\r\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\r\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4150: // Smoothing groups\r\n\t\t\t\t\t\tthis.parseSmoothingGroups();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Skip this (unknown) chunk\r\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pause parsing if there were any dependencies found during this\r\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\r\n\t\t\t\t// retrieved at this time.)\r\n\t\t\t\tif (this.dependencies.length) {\r\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// More parsing is required if the entire byte array has not yet\r\n\t\t// been read, or if there is a currently non-finalized object in\r\n\t\t// the pipeline.\r\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\r\n\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t} else {\r\n\t\t\tvar name:string;\r\n\r\n\t\t\t// Finalize any remaining objects before ending.\r\n\t\t\tfor (name in this._unfinalized_objects) {\r\n\t\t\t\tvar obj:DisplayObjectContainer;\r\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\r\n\t\t\t\tif (obj) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate parseMaterial():MaterialVO\r\n\t{\r\n\t\tvar mat:MaterialVO;\r\n\r\n\t\tmat = new MaterialVO();\r\n\r\n\t\twhile (this._byteData.position < this._cur_mat_end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA000: // Material name\r\n\t\t\t\t\tmat.name = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA010: // Ambient color\r\n\t\t\t\t\tmat.ambientColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA020: // Diffuse color\r\n\t\t\t\t\tmat.diffuseColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA030: // Specular color\r\n\t\t\t\t\tmat.specularColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\r\n\t\t\t\t\tmat.twoSided = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA200: // Main (color) texture\r\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA204: // Specular map\r\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position = end;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\t}\r\n\r\n\tprivate parseTexture(end:number /*uint*/):TextureVO\r\n\t{\r\n\t\tvar tex:TextureVO;\r\n\r\n\t\ttex = new TextureVO();\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA300:\r\n\t\t\t\t\ttex.url = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Skip this unknown texture sub-chunk\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._textures[tex.url] = tex;\r\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\r\n\r\n\t\treturn tex;\r\n\t}\r\n\r\n\tprivate parseVertexList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.verts.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\tx = this._byteData.readFloat();\r\n\t\t\ty = this._byteData.readFloat();\r\n\t\t\tz = this._byteData.readFloat();\r\n\r\n\t\t\tthis._cur_obj.verts[i++] = x;\r\n\t\t\tthis._cur_obj.verts[i++] = z;\r\n\t\t\tthis._cur_obj.verts[i++] = y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.indices.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\r\n\r\n\t\t\ti0 = this._byteData.readUnsignedShort();\r\n\t\t\ti1 = this._byteData.readUnsignedShort();\r\n\t\t\ti2 = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis._cur_obj.indices[i++] = i0;\r\n\t\t\tthis._cur_obj.indices[i++] = i2;\r\n\t\t\tthis._cur_obj.indices[i++] = i1;\r\n\r\n\t\t\t// Skip \"face info\", irrelevant in Away3D\r\n\t\t\tthis._byteData.position += 2;\r\n\t\t}\r\n\r\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\r\n\t}\r\n\r\n\tprivate parseSmoothingGroups():void\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\r\n\t\tvar i:number /*uint*/ = 0;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseUVList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.uvs.length;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\r\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceMaterialList():void\r\n\t{\r\n\t\tvar mat:string;\r\n\t\tvar count:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar faces:Array<number> /*uint*/;\r\n\r\n\t\tmat = this.readNulTermstring();\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\r\n\t\tfaces = new Array<number>(count) /*uint*/;\r\n\t\ti = 0;\r\n\t\twhile (i < faces.length)\r\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\r\n\r\n\t\tthis._cur_obj.materials.push(mat);\r\n\t\tthis._cur_obj.materialFaces[mat] = faces;\r\n\t}\r\n\r\n\tprivate parseObjectAnimation(end:number):void\r\n\t{\r\n\t\tvar vo:ObjectVO;\r\n\t\tvar obj:DisplayObjectContainer;\r\n\t\tvar pivot:Vector3D;\r\n\t\tvar name:string;\r\n\t\tvar hier:number /*uint*/;\r\n\r\n\t\t// Pivot defaults to origin\r\n\t\tpivot = new Vector3D;\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xb010: // Name/hierarchy\r\n\t\t\t\t\tname = this.readNulTermstring();\r\n\t\t\t\t\tthis._byteData.position += 4;\r\n\t\t\t\t\thier = this._byteData.readShort();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xb013: // Pivot\r\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\r\n\t\t// and will be ignored in this version of the parser\r\n\t\t// TODO: Implement containers in 3DS parser.\r\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\r\n\t\t\tvo = this._unfinalized_objects[name];\r\n\t\t\tobj = this.constructObject(vo, pivot);\r\n\r\n\t\t\tif (obj) {\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tdelete this._unfinalized_objects[name];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\r\n\t{\r\n\t\tif (obj.type == AssetType.MESH) {\r\n\t\t\tvar i:number /*uint*/;\r\n\t\t\tvar sub:TriangleSubGeometry;\r\n\t\t\tvar geom:Geometry;\r\n\t\t\tvar mat:MaterialBase;\r\n\t\t\tvar mesh:Mesh;\r\n\t\t\tvar mtx:Matrix3D;\r\n\t\t\tvar vertices:Array<VertexVO>;\r\n\t\t\tvar faces:Array<FaceVO>;\r\n\r\n\t\t\tif (obj.materials.length > 1)\r\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\r\n\r\n\t\t\t// Ignore empty objects\r\n\t\t\tif (!obj.indices || obj.indices.length == 0)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\r\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\r\n\r\n\t\t\tthis.prepareData(vertices, faces, obj);\r\n\r\n\t\t\tif (this._useSmoothingGroups)\r\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\r\n\r\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\r\n\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\r\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\r\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\r\n\t\t\t}\r\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\r\n\r\n\t\t\tfor (i = 0; i < faces.length; i++) {\r\n\t\t\t\tobj.indices[i*3] = faces[i].a;\r\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\r\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\r\n\t\t\t}\r\n\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\r\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\r\n\t\t\t\t// will be nonsense and should be skipped.\r\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\r\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\r\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tgeom = new Geometry();\r\n\r\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\r\n\t\t\t// and add them to geometry.\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.updateIndices(obj.indices);\r\n\t\t\tsub.updatePositions(obj.verts);\r\n\t\t\tsub.updateUVs(obj.uvs);\r\n\r\n\t\t\tgeom.addSubGeometry(sub);\r\n\r\n\t\t\tif (obj.materials.length > 0) {\r\n\t\t\t\tvar mname:string;\r\n\t\t\t\tmname = obj.materials[0];\r\n\t\t\t\tmat = this._materials[mname].material;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply pivot translation to geometry if a pivot was\r\n\t\t\t// found while parsing the keyframe chunk earlier.\r\n\t\t\tif (pivot) {\r\n\t\t\t\tif (obj.transform) {\r\n\t\t\t\t\t// If a transform was found while parsing the\r\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\r\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\r\n\t\t\t\t\tdat[12] = 0;\r\n\t\t\t\t\tdat[13] = 0;\r\n\t\t\t\t\tdat[14] = 0;\r\n\t\t\t\t\tmtx = new Matrix3D(dat);\r\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpivot.scaleBy(-1);\r\n\r\n\t\t\t\tmtx = new Matrix3D();\r\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Apply transformation to geometry if a transformation\r\n\t\t\t// was found while parsing the object chunk earlier.\r\n\t\t\tif (obj.transform) {\r\n\t\t\t\tmtx = new Matrix3D(obj.transform);\r\n\t\t\t\tmtx.invert();\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\r\n\t\t\t// which will no longer be modified after this point.\r\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\r\n\r\n\t\t\t// Build mesh and return it\r\n\t\t\tmesh = new Mesh(geom, mat);\r\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\r\n\t\t// If reached, unknown\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\r\n\t{\r\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar len:number /*int*/ = obj.verts.length;\r\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\r\n\t\t\tvar v:VertexVO = new VertexVO;\r\n\t\t\tv.x = obj.verts[i++];\r\n\t\t\tv.y = obj.verts[i++];\r\n\t\t\tv.z = obj.verts[i++];\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\tv.u = obj.uvs[j++];\r\n\t\t\t\tv.v = obj.uvs[j++];\r\n\t\t\t}\r\n\t\t\tvertices[k++] = v;\r\n\t\t}\r\n\t\tlen = obj.indices.length;\r\n\t\tfor (i = 0, k = 0; i < len;) {\r\n\t\t\tvar f:FaceVO = new FaceVO();\r\n\t\t\tf.a = obj.indices[i++];\r\n\t\t\tf.b = obj.indices[i++];\r\n\t\t\tf.c = obj.indices[i++];\r\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\r\n\t\t\tfaces[k++] = f;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\r\n\t{\r\n\t\t// clone vertices according to following rule:\r\n\t\t// clone if vertex's in faces from groups 1+2 and 3\r\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\r\n\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar l:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar numVerts:number /*uint*/ = vertices.length;\r\n\t\tvar numFaces:number /*uint*/ = faces.length;\r\n\r\n\t\t// extract groups data for vertices\r\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++)\r\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tvar face:FaceVO = faces[i];\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\r\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\r\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\r\n\t\t\t\t\tif ((group & groups[k]) > 0) {\r\n\t\t\t\t\t\tgroup |= groups[k];\r\n\t\t\t\t\t\tgroups.splice(k, 1);\r\n\t\t\t\t\t\tk = groups.length - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// clone vertices\r\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++) {\r\n\t\t\tif ((len = vGroups[i].length) < 1)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\r\n\t\t\tvClones[i] = clones;\r\n\t\t\tclones[0] = i;\r\n\t\t\tvar v0:VertexVO = vertices[i];\r\n\t\t\tfor (j = 1; j < len; j++) {\r\n\t\t\t\tvar v1:VertexVO = new VertexVO;\r\n\t\t\t\tv1.x = v0.x;\r\n\t\t\t\tv1.y = v0.y;\r\n\t\t\t\tv1.z = v0.z;\r\n\t\t\t\tv1.u = v0.u;\r\n\t\t\t\tv1.v = v0.v;\r\n\t\t\t\tclones[j] = vertices.length;\r\n\t\t\t\tvertices.push(v1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tnumVerts = vertices.length;\r\n\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tface = faces[i];\r\n\t\t\tgroup = face.smoothGroup;\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\r\n\t\t\t\tgroups = vGroups[k];\r\n\t\t\t\tlen = groups.length;\r\n\t\t\t\tclones = vClones[k];\r\n\t\t\t\tfor (l = 0; l < len; l++) {\r\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\r\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\r\n\t\t\t\t\t\tif (group == 0) {\r\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\r\n\t\t\t\t\t\t\tgroups.splice(l, 1);\r\n\t\t\t\t\t\t\tclones.splice(l, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (j == 0)\r\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\r\n\t\t\t\t\t\t\tface.b = index; else\r\n\t\t\t\t\t\t\tface.c = index;\r\n\t\t\t\t\t\tl = len;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate finalizeCurrentMaterial():void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\r\n\t\tif (this._cur_mat.colorMap)\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\r\n\t\telse\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\r\n\r\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\r\n\t\tmat.specularColor = this._cur_mat.specularColor;\r\n\r\n\t\tif (this.materialMode >= 2)\r\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\r\n\r\n\t\tmat.bothSides = this._cur_mat.twoSided;\r\n\r\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\r\n\r\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\r\n\t\tthis._cur_mat.material = mat;\r\n\r\n\t\tthis._cur_mat = null;\r\n\t}\r\n\r\n\tprivate readNulTermstring():string\r\n\t{\r\n\t\tvar chr:number /*int*/;\r\n\t\tvar str:string = \"\";\r\n\r\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\r\n\t\t\tstr += String.fromCharCode(chr);\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\tprivate readTransform():Array<number>\r\n\t{\r\n\t\tvar data:Array<number>;\r\n\r\n\t\tdata = new Array<number>(16);\r\n\r\n\t\t// X axis\r\n\t\tdata[0] = this._byteData.readFloat(); // X\r\n\t\tdata[2] = this._byteData.readFloat(); // Z\r\n\t\tdata[1] = this._byteData.readFloat(); // Y\r\n\t\tdata[3] = 0;\r\n\r\n\t\t// Z axis\r\n\t\tdata[8] = this._byteData.readFloat(); // X\r\n\t\tdata[10] = this._byteData.readFloat(); // Z\r\n\t\tdata[9] = this._byteData.readFloat(); // Y\r\n\t\tdata[11] = 0;\r\n\r\n\t\t// Y Axis\r\n\t\tdata[4] = this._byteData.readFloat(); // X\r\n\t\tdata[6] = this._byteData.readFloat(); // Z\r\n\t\tdata[5] = this._byteData.readFloat(); // Y\r\n\t\tdata[7] = 0;\r\n\r\n\t\t// Translation\r\n\t\tdata[12] = this._byteData.readFloat(); // X\r\n\t\tdata[14] = this._byteData.readFloat(); // Z\r\n\t\tdata[13] = this._byteData.readFloat(); // Y\r\n\t\tdata[15] = 1;\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate readColor():number /*int*/\r\n\t{\r\n\t\tvar cid:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\r\n\r\n\t\tcid = this._byteData.readUnsignedShort();\r\n\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\tswitch (cid) {\r\n\t\t\tcase 0x0010: // Floats\r\n\t\t\t\tr = this._byteData.readFloat()*255;\r\n\t\t\t\tg = this._byteData.readFloat()*255;\r\n\t\t\t\tb = this._byteData.readFloat()*255;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x0011: // 24-bit color\r\n\t\t\t\tr = this._byteData.readUnsignedByte();\r\n\t\t\t\tg = this._byteData.readUnsignedByte();\r\n\t\t\t\tb = this._byteData.readUnsignedByte();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (r << 16) | (g << 8) | b;\r\n\t}\r\n}\r\n\r\nexport = Max3DSParser;\r\n\r\n/**\r\n *\r\n */\r\nclass FaceVO\r\n{\r\n\tpublic a:number /*int*/;\r\n\tpublic b:number /*int*/;\r\n\tpublic c:number /*int*/;\r\n\tpublic smoothGroup:number /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass MaterialVO\r\n{\r\n\tpublic name:string;\r\n\tpublic ambientColor:number /*int*/;\r\n\tpublic diffuseColor:number /*int*/;\r\n\tpublic specularColor:number /*int*/;\r\n\tpublic twoSided:boolean;\r\n\tpublic colorMap:TextureVO;\r\n\tpublic specularMap:TextureVO;\r\n\tpublic material:MaterialBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass ObjectVO\r\n{\r\n\tpublic name:string;\r\n\tpublic type:string;\r\n\tpublic pivotX:number;\r\n\tpublic pivotY:number;\r\n\tpublic pivotZ:number;\r\n\tpublic transform:Array<number>;\r\n\tpublic verts:Array<number>;\r\n\tpublic indices:Array<number> /*int*/;\r\n\tpublic uvs:Array<number>;\r\n\tpublic materialFaces:Object;\r\n\tpublic materials:Array<string>;\r\n\tpublic smoothingGroups:Array<number> /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass TextureVO\r\n{\r\n\tpublic url:string;\r\n\tpublic texture:Texture2DBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass VertexVO\r\n{\r\n\tpublic x:number;\r\n\tpublic y:number;\r\n\tpublic z:number;\r\n\tpublic u:number;\r\n\tpublic v:number;\r\n\tpublic normal:Vector3D;\r\n\tpublic tangent:Vector3D;\r\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\r\n\r\n/**\r\n * OBJParser provides a parser for the OBJ data type.\r\n */\r\nclass OBJParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _charIndex:number;\r\n\tprivate _oldIndex:number;\r\n\tprivate _stringLength:number;\r\n\tprivate _currentObject:ObjectGroup;\r\n\tprivate _currentGroup:Group;\r\n\tprivate _currentMaterialGroup:MaterialGroup;\r\n\tprivate _objects:Array<ObjectGroup>;\r\n\tprivate _materialIDs:string[];\r\n\tprivate _materialLoaded:Array<LoadedMaterial>;\r\n\tprivate _materialSpecularData:Array<SpecularData>;\r\n\tprivate _meshes:Array<Mesh>;\r\n\tprivate _lastMtlID:string;\r\n\tprivate _objectIndex:number;\r\n\tprivate _realIndices;\r\n\tprivate _vertexIndex:number;\r\n\tprivate _vertices:Array<Vertex>;\r\n\tprivate _vertexNormals:Array<Vertex>;\r\n\tprivate _uvs:Array<UV>;\r\n\tprivate _scale:number;\r\n\tprivate _mtlLib:boolean;\r\n\tprivate _mtlLibLoaded:boolean = true;\r\n\tprivate _activeMaterialID:string = \"\";\r\n\r\n\t/**\r\n\t * Creates a new OBJParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(scale:number = 1)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._scale = scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Scaling factor applied directly to vertices data\r\n\t * @param value The scaling factor.\r\n\t */\r\n\tpublic set scale(value:number)\r\n\t{\r\n\t\tthis._scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"obj\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar content:string = ParserUtils.toString(data);\r\n\t\tvar hasV:boolean = false;\r\n\t\tvar hasF:boolean = false;\r\n\r\n\t\tif (content) {\r\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\r\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\r\n\t\t}\r\n\r\n\t\treturn hasV && hasF;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == 'mtl') {\r\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\r\n\t\t\tthis.parseMtl(str);\r\n\r\n\t\t} else {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tif (resourceDependency.assets.length != 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\r\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\t\tlm.texture = <Texture2DBase> asset;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0) {\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == \"mtl\") {\r\n\t\t\tthis._mtlLib = false;\r\n\t\t\tthis._mtlLibLoaded = false;\r\n\t\t} else {\r\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\tthis._materialLoaded.push(lm);\r\n\t\t}\r\n\r\n\t\tif (this._meshes.length > 0)\r\n\t\t\tthis.applyMaterial(lm);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar line:string;\r\n\t\tvar creturn:string = String.fromCharCode(10);\r\n\t\tvar trunk;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\t// Merge linebreaks that are immediately preceeded by\r\n\t\t\t// the \"escape\" backward slash into single lines.\r\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\r\n\t\t}\r\n\r\n\t\tif (this._textData.indexOf(creturn) == -1)\r\n\t\t\tcreturn = String.fromCharCode(13);\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._startedParsing = true;\r\n\t\t\tthis._vertices = new Array<Vertex>();\r\n\t\t\tthis._vertexNormals = new Array<Vertex>();\r\n\t\t\tthis._materialIDs = new Array<string>();\r\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\r\n\t\t\tthis._meshes = new Array<Mesh>();\r\n\t\t\tthis._uvs = new Array<UV>();\r\n\t\t\tthis._stringLength = this._textData.length;\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\r\n\t\t\tthis._oldIndex = 0;\r\n\t\t\tthis._objects = new Array<ObjectGroup>();\r\n\t\t\tthis._objectIndex = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\r\n\r\n\t\t\tif (this._charIndex == -1)\r\n\t\t\t\tthis._charIndex = this._stringLength;\r\n\r\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\r\n\t\t\tline = line.split('\\r').join(\"\");\r\n\t\t\tline = line.replace(\"  \", \" \");\r\n\t\t\ttrunk = line.split(\" \");\r\n\t\t\tthis._oldIndex = this._charIndex + 1;\r\n\t\t\tthis.parseLine(trunk);\r\n\r\n\t\t\t// If whatever was parsed on this line resulted in the\r\n\t\t\t// parsing being paused to retrieve dependencies, break\r\n\t\t\t// here and do not continue parsing until un-paused.\r\n\t\t\tif (this.parsingPaused) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this._charIndex >= this._stringLength) {\r\n\r\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t\tthis.translate();\r\n\t\t\tthis.applyMaterials();\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single line in the OBJ file.\r\n\t */\r\n\tprivate parseLine(trunk)\r\n\t{\r\n\t\tswitch (trunk[0]) {\r\n\r\n\t\t\tcase \"mtllib\":\r\n\r\n\t\t\t\tthis._mtlLib = true;\r\n\t\t\t\tthis._mtlLibLoaded = false;\r\n\t\t\t\tthis.loadMtl(trunk[1]);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"g\":\r\n\r\n\t\t\t\tthis.createGroup(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"o\":\r\n\r\n\t\t\t\tthis.createObject(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"usemtl\":\r\n\r\n\t\t\t\tif (this._mtlLib) {\r\n\r\n\t\t\t\t\tif (!trunk[1])\r\n\t\t\t\t\t\ttrunk[1] = \"def000\";\r\n\r\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\r\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\r\n\r\n\t\t\t\t\tif (this._currentGroup)\r\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"v\":\r\n\r\n\t\t\t\tthis.parseVertex(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vt\":\r\n\r\n\t\t\t\tthis.parseUV(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vn\":\r\n\r\n\t\t\t\tthis.parseVertexNormal(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"f\":\r\n\r\n\t\t\t\tthis.parseFace(trunk);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the parsed data into an Away3D scenegraph structure\r\n\t */\r\n\tprivate translate()\r\n\t{\r\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\r\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\r\n\t\t\tvar numGroups:number = groups.length;\r\n\t\t\tvar materialGroups:Array<MaterialGroup>;\r\n\t\t\tvar numMaterialGroups:number;\r\n\t\t\tvar geometry:Geometry;\r\n\t\t\tvar mesh:Mesh;\r\n\r\n\t\t\tvar m:number;\r\n\t\t\tvar sm:number;\r\n\t\t\tvar bmMaterial:MethodMaterial;\r\n\r\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\r\n\t\t\t\tgeometry = new Geometry();\r\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\r\n\t\t\t\tnumMaterialGroups = materialGroups.length;\r\n\r\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\r\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\r\n\r\n\t\t\t\tif (geometry.subGeometries.length == 0)\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// Finalize and force type-based name\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\r\n\r\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\r\n\t\t\t\t//check for multipass\r\n\t\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\r\n\r\n\t\t\t\tif (this._objects[objIndex].name) {\r\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\r\n\r\n\t\t\t\t} else if (groups[g].name) {\r\n\r\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = groups[g].name;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No name stored. Use empty string which will force it\r\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\r\n\t\t\t\t\tmesh.name = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._meshes.push(mesh);\r\n\r\n\t\t\t\tif (groups[g].materialID != \"\")\r\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\r\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\r\n\r\n\t\t\t\tif (mesh.subMeshes.length > 1) {\r\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\r\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates an obj's material group to a subgeometry.\r\n\t * @param materialGroup The material group data to convert.\r\n\t * @param geometry The Geometry to contain the converted SubGeometry.\r\n\t */\r\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\r\n\t{\r\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\r\n\t\tvar face:FaceData;\r\n\t\tvar numFaces:number = faces.length;\r\n\t\tvar numVerts:number;\r\n\t\tvar sub:TriangleSubGeometry;\r\n\r\n\t\tvar vertices:Array<number> = new Array<number>();\r\n\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\tvar normals:Array<number> = new Array<number>();\r\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\r\n\r\n\t\tthis._realIndices = [];\r\n\t\tthis._vertexIndex = 0;\r\n\r\n\t\tvar j:number;\r\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\r\n\r\n\t\t\tface = faces[i];\r\n\t\t\tnumVerts = face.indexIds.length - 1;\r\n\r\n\t\t\tfor (j = 1; j < numVerts; ++j) {\r\n\r\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (vertices.length > 0) {\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\r\n\t\t\tsub.updateIndices(indices);\r\n\t\t\tsub.updatePositions(vertices);\r\n\t\t\tsub.updateVertexNormals(normals);\r\n\t\t\tsub.updateUVs(uvs);\r\n\r\n\t\t\tgeometry.addSubGeometry(sub);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\r\n\t{\r\n\t\tvar index:number;\r\n\t\tvar vertex:Vertex;\r\n\t\tvar vertexNormal:Vertex;\r\n\t\tvar uv:UV;\r\n\r\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\r\n\r\n\t\t\tindex = this._vertexIndex;\r\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\r\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\r\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\r\n\r\n\t\t\tif (face.normalIndices.length > 0) {\r\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\r\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n\t\t\t}\r\n\r\n\t\t\tif (face.uvIndices.length > 0) {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\r\n\t\t\t\t\tuvs.push(uv.u, uv.v);\r\n\r\n\t\t\t\t} catch (e) {\r\n\r\n\t\t\t\t\tswitch (vertexIndex) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tuvs.push(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tuvs.push(.5, 0);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tuvs.push(1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\r\n\t\t}\r\n\r\n\t\tindices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new object group.\r\n\t * @param trunk The data block containing the object tag and its parameters\r\n\t */\r\n\tprivate createObject(trunk)\r\n\t{\r\n\t\tthis._currentGroup = null;\r\n\t\tthis._currentMaterialGroup = null;\r\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentObject.name = trunk[1];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new group.\r\n\t * @param trunk The data block containing the group tag and its parameters\r\n\t */\r\n\tprivate createGroup(trunk)\r\n\t{\r\n\t\tif (!this._currentObject)\r\n\t\t\tthis.createObject(null);\r\n\t\tthis._currentGroup = new Group();\r\n\r\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentGroup.name = trunk[1];\r\n\t\tthis._currentObject.groups.push(this._currentGroup);\r\n\r\n\t\tthis.createMaterialGroup(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new material group.\r\n\t * @param trunk The data block containing the material tag and its parameters\r\n\t */\r\n\tprivate createMaterialGroup(trunk)\r\n\t{\r\n\t\tthis._currentMaterialGroup = new MaterialGroup();\r\n\t\tif (trunk)\r\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\r\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex coordinates.\r\n\t * @param trunk The data block containing the vertex tag and its parameters\r\n\t */\r\n\tprivate parseVertex(trunk)\r\n\t{\r\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\r\n\r\n\t\tvar v1:number, v2:number , v3:number;\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\r\n\t\t\tv1 = <number> nTrunk[0];\r\n\t\t\tv2 = <number> nTrunk[1];\r\n\t\t\tv3 = <number> -nTrunk[2];\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\r\n\t\t} else {\r\n\t\t\tv1 = <number> parseFloat(trunk[1]);\r\n\t\t\tv2 = <number> parseFloat(trunk[2]);\r\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\r\n\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinates.\r\n\t * @param trunk The data block containing the uv tag and its parameters\r\n\t */\r\n\tprivate parseUV(trunk)\r\n\t{\r\n\t\tif (trunk.length > 3) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex normal coordinates.\r\n\t * @param trunk The data block containing the vertex normal tag and its parameters\r\n\t */\r\n\tprivate parseVertexNormal(trunk)\r\n\t{\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next face's indices.\r\n\t * @param trunk The data block containing the face tag and its parameters\r\n\t */\r\n\tprivate parseFace(trunk)\r\n\t{\r\n\t\tvar len:number = trunk.length;\r\n\t\tvar face:FaceData = new FaceData();\r\n\r\n\t\tif (!this._currentGroup) {\r\n\t\t\tthis.createGroup(null);\r\n\t\t}\r\n\r\n\t\tvar indices;\r\n\t\tfor (var i:number = 1; i < len; ++i) {\r\n\r\n\t\t\tif (trunk[i] == \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tindices = trunk[i].split(\"/\");\r\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\r\n\r\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\r\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\r\n\r\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\r\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\r\n\r\n\t\t\tface.indexIds.push(trunk[i]);\r\n\t\t}\r\n\r\n\t\tthis._currentMaterialGroup.faces.push(face);\r\n\t}\r\n\r\n\t/**\r\n\t * This is a hack around negative face coords\r\n\t */\r\n\tprivate parseIndex(index:number, length:number):number\r\n\t{\r\n\t\tif (index < 0)\r\n\t\t\treturn index + length + 1; else\r\n\t\t\treturn index;\r\n\t}\r\n\r\n\tprivate parseMtl(data:string)\r\n\t{\r\n\t\tvar materialDefinitions = data.split('newmtl');\r\n\t\tvar lines;\r\n\t\tvar trunk;\r\n\t\tvar j:number;\r\n\r\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\r\n\t\tvar useSpecular:boolean;\r\n\t\tvar useColor:boolean;\r\n\t\tvar diffuseColor:number;\r\n\t\tvar color:number;\r\n\t\tvar specularColor:number;\r\n\t\tvar specular:number;\r\n\t\tvar alpha:number;\r\n\t\tvar mapkd:string;\r\n\r\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\r\n\r\n\r\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\r\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\r\n\r\n\t\t\tif (lines.length == 1)\r\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\r\n\r\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\r\n\t\t\tspecular = 0;\r\n\t\t\tuseSpecular = false;\r\n\t\t\tuseColor = false;\r\n\t\t\talpha = 1;\r\n\t\t\tmapkd = \"\";\r\n\r\n\t\t\tfor (j = 0; j < lines.length; ++j) {\r\n\r\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\r\n\r\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\r\n\t\t\t\t\ttrunk = lines[j].split(\" \");\r\n\r\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\r\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\r\n\r\n\t\t\t\t\tif (j == 0) {\r\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\r\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch (trunk[0]) {\r\n\r\n\t\t\t\t\t\t\tcase \"Ka\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\r\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ks\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ns\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\r\n\t\t\t\t\t\t\t\tif (specular == 0)\r\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Kd\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseColor = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"tr\":\r\n\t\t\t\t\t\t\tcase \"d\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"map_Kd\":\r\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\r\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (mapkd != \"\") {\r\n\r\n\t\t\t\tif (useSpecular) {\r\n\r\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\r\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\r\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\r\n\r\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\r\n\t\t\t\t\tspecularData.alpha = alpha;\r\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\r\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\r\n\r\n\t\t\t\t\tif (!this._materialSpecularData)\r\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\r\n\r\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\r\n\r\n\t\t\t} else if (useColor && !isNaN(color)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = this._lastMtlID;\r\n\r\n\t\t\t\tif (alpha == 0)\r\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\r\n\r\n\t\t\t\tvar cm:MethodMaterial;\r\n\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\r\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\t\t\t\t\tcolorMat.alpha = alpha;\r\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMat.specular = specular;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\r\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMultiMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlm.cm = cm;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0)\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._mtlLibLoaded = true;\r\n\t}\r\n\r\n\tprivate parseMapKdString(trunk):string\r\n\t{\r\n\t\tvar url:string = \"\";\r\n\t\tvar i:number;\r\n\t\tvar breakflag:boolean;\r\n\r\n\t\tfor (i = 1; i < trunk.length;) {\r\n\t\t\tswitch (trunk[i]) {\r\n\t\t\t\tcase \"-blendu\":\r\n\t\t\t\tcase \"-blendv\":\r\n\t\t\t\tcase \"-cc\":\r\n\t\t\t\tcase \"-clamp\":\r\n\t\t\t\tcase \"-texres\":\r\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-mm\":\r\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-o\":\r\n\t\t\t\tcase \"-s\":\r\n\t\t\t\tcase \"-t\":\r\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreakflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (breakflag)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//Reconstruct URL/filename\r\n\t\tfor (i; i < trunk.length; i++) {\r\n\t\t\turl += trunk[i];\r\n\t\t\turl += \" \";\r\n\t\t}\r\n\r\n\t\t//Remove the extraneous space and/or newline from the right side\r\n\t\turl = url.replace(/\\s+$/, \"\");\r\n\r\n\t\treturn url;\r\n\t}\r\n\r\n\tprivate loadMtl(mtlurl:string)\r\n\t{\r\n\t\t// Add raw-data dependency to queue and load dependencies now,\r\n\t\t// which will pause the parsing in the meantime.\r\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\r\n\t\tthis._pPauseAndRetrieveDependencies();//\r\n\t}\r\n\r\n\tprivate applyMaterial(lm:LoadedMaterial)\r\n\t{\r\n\t\tvar decomposeID;\r\n\t\tvar mesh:Mesh;\r\n\t\tvar tm:MethodMaterial;\r\n\t\tvar j:number;\r\n\t\tvar specularData:SpecularData;\r\n\r\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\r\n\t\t\tmesh = this._meshes[i];\r\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\r\n\r\n\t\t\tif (decomposeID[0] == lm.materialID) {\r\n\r\n\t\t\t\tif (lm.cm) {\r\n\t\t\t\t\tif (mesh.material)\r\n\t\t\t\t\t\tmesh.material = null;\r\n\t\t\t\t\tmesh.material = lm.cm;\r\n\r\n\t\t\t\t} else if (lm.texture) {\r\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\r\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.alpha = lm.alpha;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\r\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\r\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\r\n\t\t\t\tthis._meshes.splice(i, 1);\r\n\t\t\t\t--i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lm.cm || tm)\r\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\r\n\t}\r\n\r\n\tprivate applyMaterials()\r\n\t{\r\n\t\tif (this._materialLoaded.length == 0)\r\n\t\t\treturn;\r\n\r\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\r\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\r\n\t}\r\n}\r\n\r\nexport = OBJParser;\r\n\r\nclass ObjectGroup\r\n{\r\n\tpublic name:string;\r\n\tpublic groups:Group[] = new Array<Group>();\r\n}\r\n\r\nclass Group\r\n{\r\n\tpublic name:string;\r\n\tpublic materialID:string;\r\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\r\n}\r\n\r\nclass MaterialGroup\r\n{\r\n\tpublic url:string;\r\n\tpublic faces:FaceData[] = new Array<FaceData>();\r\n}\r\n\r\nclass SpecularData\r\n{\r\n\tpublic materialID:string;\r\n\tpublic basicSpecularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass LoadedMaterial\r\n{\r\n\tpublic materialID:string;\r\n\tpublic texture:Texture2DBase;\r\n\tpublic cm:MaterialBase;\r\n\tpublic specularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass FaceData\r\n{\r\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\r\n}\r\n\r\n/**\r\n* Texture coordinates value object.\r\n*/\r\nclass UV\r\n{\r\n\tprivate _u:number;\r\n\tprivate _v:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>UV</code> object.\r\n\t *\r\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\r\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\r\n\t */\r\n\tconstructor(u:number = 0, v:number = 0)\r\n\t{\r\n\t\tthis._u = u;\r\n\t\tthis._v = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the vertical coordinate of the texture value.\r\n\t */\r\n\tpublic get v():number\r\n\t{\r\n\t\treturn this._v;\r\n\t}\r\n\r\n\tpublic set v(value:number)\r\n\t{\r\n\t\tthis._v = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the horizontal coordinate of the texture value.\r\n\t */\r\n\tpublic get u():number\r\n\t{\r\n\t\treturn this._u;\r\n\t}\r\n\r\n\tpublic set u(value:number)\r\n\t{\r\n\t\tthis._u = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new UV value Object\r\n\t */\r\n\tpublic clone():UV\r\n\t{\r\n\t\treturn new UV(this._u, this._v);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the value object as a string for trace/debug purpose\r\n\t */\r\n\tpublic toString():string\r\n\t{\r\n\t\treturn this._u + \",\" + this._v;\r\n\t}\r\n}\r\n\r\nclass Vertex\r\n{\r\n\tprivate _x:number;\r\n\tprivate _y:number;\r\n\tprivate _z:number;\r\n\tprivate _index:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>Vertex</code> value object.\r\n\t *\r\n\t * @param    x            [optional]    The x value. Defaults to 0.\r\n\t * @param    y            [optional]    The y value. Defaults to 0.\r\n\t * @param    z            [optional]    The z value. Defaults to 0.\r\n\t * @param    index        [optional]    The index value. Defaults is NaN.\r\n\t */\r\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\r\n\t{\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._index = index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the index of value object\r\n\t * @param    ind        The index\r\n\t */\r\n\tpublic set index(ind:number)\r\n\t{\r\n\t\tthis._index = ind;\r\n\t}\r\n\r\n\tpublic get index():number\r\n\t{\r\n\t\treturn this._index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the x value of the value object\r\n\t * @param    value        The x value\r\n\t */\r\n\tpublic get x():number\r\n\t{\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value:number)\r\n\t{\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the y value of the value object\r\n\t * @param    value        The y value\r\n\t */\r\n\tpublic get y():number\r\n\t{\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value:number)\r\n\t{\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the z value of the value object\r\n\t * @param    value        The z value\r\n\t */\r\n\tpublic get z():number\r\n\t{\r\n\t\treturn this._z;\r\n\t}\r\n\r\n\tpublic set z(value:number)\r\n\t{\r\n\t\tthis._z = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new Vertex value Object\r\n\t */\r\n\tpublic clone():Vertex\r\n\t{\r\n\t\treturn new Vertex(this._x, this._y, this._z);\r\n\t}\r\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\r\n\r\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\r\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\r\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\r\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\r\n\r\n/**\r\n *\r\n */\r\nclass Parsers\r\n{\r\n\t/**\r\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\r\n\t * enable support for all bundled parsers to the file format auto-detection\r\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\r\n\t *\r\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\r\n\t *\r\n\t * Beware however that this requires all parser classes to be included in the\r\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\r\n\t * file formats are used, SWF file size can be saved by adding the parsers\r\n\t * individually using AssetLibrary.enableParser()\r\n\t *\r\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\r\n\t * the auto-detection mechanisms altogether, while at the same time allowing\r\n\t * any properties that are unique to that parser to be set for that load.\r\n\t *\r\n\t * The bundled parsers are:\r\n\t *\r\n\t * <ul>\r\n\t * <li>AC3D (.ac)</li>\r\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\r\n\t * <li>3DMax (.3ds)</li>\r\n\t * <li>DXF (.dxf)</li>\r\n\t * <li>Quake 2 MD2 models (.md2)</li>\r\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\r\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\r\n\t * <li>Wavefront OBJ (.obj)</li>\r\n\t * <li>Collada (.dae)</li>\r\n\t * <li>Images (.jpg, .png)</li>\r\n\t * </ul>\r\n\t *\r\n\t * @see away.library.AssetLibrary.enableParser\r\n\t */\r\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\r\n\r\n\t/**\r\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\r\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\r\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\r\n\t *\r\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\r\n\t *\r\n\t * @see away.parsers.Parsers.ALL_BUNDLED\r\n\t */\r\n\tpublic static enableAllBundled():void\r\n\t{\r\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\r\n\t}\r\n}\r\n\r\nexport = Parsers;"
  ],
  "sourceRoot": ""
}