{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "AssetType",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "ByteArray",
    "DisplayObjectContainer",
    "Geometry",
    "TriangleSubGeometry",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "Skybox",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "DefaultMaterialManager",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "CurveSubGeometry",
    "CurveMaterial",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildCommand",
    "UpdatePropertyCommand",
    "RemoveChildCommand",
    "ApplyAS2DepthsCommand",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseAudioBlock",
    "parseTimeLine",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "data_len",
    "url",
    "readUTFBytes",
    "parseProperties",
    "extras",
    "parseUserAttributes",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "k",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "readFloat",
    "ms_per_frame",
    "numFrames",
    "readUnsignedShort",
    "objectIDMap",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "labelType",
    "label",
    "numCommands",
    "commandString",
    "hasDepthChanges",
    "objectID",
    "resourceID",
    "commandType",
    "instanceID",
    "newChild",
    "numFills",
    "returnedArray",
    "getAssetByID",
    "GEOMETRY",
    "geom",
    "returnedArray2",
    "MATERIAL",
    "subMeshes",
    "material",
    "TIMELINE",
    "registerPotentialChild",
    "addConstructCommand",
    "instanceName",
    "global_ressource_id",
    "props",
    1,
    2,
    3,
    4,
    "UINT8",
    5,
    6,
    "UINT32",
    7,
    "matrix_2d",
    "get",
    "colortransform",
    "blendmode",
    "visibilty",
    "depth",
    "mask",
    "thisMatrix",
    "rawData",
    "blendmode_string",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_curve_geom",
    "sm_len",
    "sm_end",
    "w_indices",
    "weights",
    "subProps",
    "idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "x",
    "y",
    "z",
    "verts",
    "readNumber",
    "indices",
    "uvs",
    "normals",
    "idx_pos",
    "idx_curves",
    "idx_uvs",
    "positions",
    "curveData",
    "curve_sub_geom",
    "updateIndices",
    "updatePositions",
    "updateCurves",
    "updateUVs",
    "addSubGeometry",
    "triangle_sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateVertexNormals",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    "UINT16",
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "CONTAINER",
    "LIGHT",
    "MESH",
    "obj",
    "addChild",
    "addError",
    "pivot",
    "extra",
    "num_materials",
    "materials_parsed",
    "data_id",
    "returnedArrayGeometry",
    "geoID",
    "materials",
    "materialNames",
    "returnedArrayMaterial",
    "mat_id",
    "m",
    "mesh",
    "returnedArrayParent",
    "objC",
    "Math",
    "min",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "TEXTURE",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "LIGHT_PICKER",
    "lightPicker",
    "smooth",
    "mipmap",
    "bothSides",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "EFFECTS_METHOD",
    "addEffectMethod",
    "SHADOW_MAP_METHOD",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "getDefaultTexture",
    "curve_mat",
    "preserveAlpha",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "TEXTURE_PROJECTOR",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "SKELETON_POSE",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "ANIMATION_NODE",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "ANIMATION_SET",
    "thisAnimator",
    "SKELETON",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "sub_geom",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "assetType",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/base/BlendMode",
    "undefined",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/library/AssetType",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/CurveSubGeometry",
    "awayjs-display/lib/base/Geometry",
    "awayjs-display/lib/base/TriangleSubGeometry",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/materials/CurveMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/fl/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/fl/timeline/TimelineKeyFrame",
    "awayjs-player/lib/fl/timeline/commands/AddChildCommand",
    "awayjs-player/lib/fl/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/fl/timeline/commands/RemoveChildCommand",
    "awayjs-player/lib/fl/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-renderergl/lib/managers/DefaultMaterialManager",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "g",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\r\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BlendMode\");\r\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\r\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\r\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\r\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\r\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\r\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\r\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\r\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\r\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\r\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\r\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\r\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\r\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\r\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\r\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\r\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\r\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\r\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\r\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\r\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\r\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\r\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\r\n\r\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\r\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\r\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\r\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\r\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\r\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\r\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\r\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\r\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\r\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\r\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\r\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\r\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\r\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\r\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\r\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\r\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\r\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\r\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\r\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\r\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\r\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\r\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\r\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\r\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\r\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\r\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\r\n\r\nimport SubGeometryBase\t\t\t\t\t= require(\"awayjs-display/lib/base/SubGeometryBase\");\r\nimport CurveSubGeometry\t\t\t\t\t= require(\"awayjs-display/lib/base/CurveSubGeometry\");\r\nimport CurveMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/CurveMaterial\")\r\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\r\n\r\n\r\nimport TimelineSceneGraphFactory = require(\"awayjs-player/lib/fl/factories/TimelineSceneGraphFactory\");\r\nimport AS2SceneGraphFactory = require(\"awayjs-player/lib/fl/factories/AS2SceneGraphFactory\");\r\nimport MovieClip = require(\"awayjs-player/lib/fl/display/MovieClip\");\r\nimport TimelineKeyFrame = require(\"awayjs-player/lib/fl/timeline/TimelineKeyFrame\");\r\nimport AddChildCommand = require(\"awayjs-player/lib/fl/timeline/commands/AddChildCommand\");\r\nimport UpdatePropertyCommand = require(\"awayjs-player/lib/fl/timeline/commands/UpdatePropertyCommand\");\r\nimport RemoveChildCommand = require(\"awayjs-player/lib/fl/timeline/commands/RemoveChildCommand\");\r\nimport ApplyAS2DepthsCommand = require(\"awayjs-player/lib/fl/timeline/commands/ApplyAS2DepthsCommand\");\r\n\r\n/**\r\n * AWDParser provides a parser for the AWD data type.\r\n */\r\nclass AWDParser extends ParserBase\r\n{\r\n\t//set to \"true\" to have some console.logs in the Console\r\n\tprivate _debug:boolean = true;\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean = false;\r\n\tprivate _cur_block_id:number;\r\n\tprivate _blocks:Array<AWDBlock>;\r\n\tprivate _newBlockBytes:ByteArray;\r\n\tprivate _version:Array<number>;\r\n\tprivate _compression:number;\r\n\tprivate _accuracyOnBlocks:boolean;\r\n\tprivate _accuracyMatrix:boolean;\r\n\tprivate _accuracyGeo:boolean;\r\n\tprivate _accuracyProps:boolean;\r\n\tprivate _matrixNrType:number;\r\n\tprivate _geoNrType:number;\r\n\tprivate _propsNrType:number;\r\n\tprivate _streaming:boolean;\r\n\tprivate _texture_users:Object = {};\r\n\tprivate _parsed_header:boolean = false;\r\n\tprivate _body:ByteArray;\r\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\r\n\tprivate _cubeTextures:Array<any>;\r\n\tprivate _defaultBitmapMaterial:MethodMaterial;\r\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\r\n\r\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\r\n\tpublic static UNCOMPRESSED:number = 0;\r\n\tpublic static DEFLATE:number = 1;\r\n\tpublic static LZMA:number = 2;\r\n\tpublic static INT8:number = 1;\r\n\tpublic static INT16:number = 2;\r\n\tpublic static INT32:number = 3;\r\n\tpublic static UINT8:number = 4;\r\n\tpublic static UINT16:number = 5;\r\n\tpublic static UINT32:number = 6;\r\n\tpublic static FLOAT32:number = 7;\r\n\tpublic static FLOAT64:number = 8;\r\n\tpublic static BOOL:number = 21;\r\n\tpublic static COLOR:number = 22;\r\n\tpublic static BADDR:number = 23;\r\n\tpublic static AWDSTRING:number = 31;\r\n\tpublic static AWDBYTEARRAY:number = 32;\r\n\tpublic static VECTOR2x1:number = 41;\r\n\tpublic static VECTOR3x1:number = 42;\r\n\tpublic static VECTOR4x1:number = 43;\r\n\tpublic static MTX3x2:number = 44;\r\n\tpublic static MTX3x3:number = 45;\r\n\tpublic static MTX4x3:number = 46;\r\n\tpublic static MTX4x4:number = 47;\r\n\r\n\tprivate blendModeDic:Array<string>;\r\n\tprivate _depthSizeDic:Array<number>;\r\n\r\n\t/**\r\n\t * Creates a new AWDParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._blocks = new Array<AWDBlock>();\r\n\t\tthis._blocks[0] = new AWDBlock();\r\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\r\n\r\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.ADD);\r\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\r\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\r\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\r\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\r\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\r\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\r\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\r\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\r\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\r\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\r\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\r\n\t\tthis._depthSizeDic.push(256);\r\n\t\tthis._depthSizeDic.push(512);\r\n\t\tthis._depthSizeDic.push(2048);\r\n\t\tthis._depthSizeDic.push(1024);\r\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"awd\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// this will be called when Dependency has finished loading.\r\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\r\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\r\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\r\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\r\n\t\t\tvar asset:TextureProxyBase;\r\n\t\t\tvar thisBitmapTexture:Texture2DBase;\r\n\t\t\tvar block:AWDBlock;\r\n\r\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\r\n\t\t\t{\r\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\r\n\t\t\t\tif (asset) {\r\n\t\t\t\t\tvar mat:MethodMaterial;\r\n\t\t\t\t\tvar users:Array<string>;\r\n\r\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\r\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\r\n\t\t\t{\r\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\r\n\r\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\r\n\r\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\r\n\t\t\t\tthis._texture_users[ressourceID].push(1);\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\r\n\r\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\r\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\r\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\r\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\r\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\r\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\r\n\r\n\t\t\t\t\tasset = <TextureProxyBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\r\n\t\t\t\t\tblock = this._blocks[ressourceID];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\r\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve a dependency name\r\n\t *\r\n\t * @param resourceDependency The dependency to be resolved.\r\n\t */\r\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\r\n\t{\r\n\t\tvar oldName:string = asset.name;\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\r\n\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t}\r\n\r\n\t\tvar newName:string = asset.name;\r\n\r\n\t\tasset.name = oldName;\r\n\r\n\t\treturn newName;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\tif (!this._parsed_header) {\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Parse header and decompress body if needed\r\n\t\t\tthis.parseHeader();\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\r\n\t\t\t\t\tthis._body = this._byteData;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// Compressed AWD Formats not yet supported\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t case AWDParser.DEFLATE:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress();\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t case AWDParser.LZMA:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t //*/\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._parsed_header = true;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t}\r\n\r\n\t\tif (this._body) {\r\n\r\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\r\n\t\t\t{\r\n\t\t\t\tthis.parseNextBlock();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Return complete status\r\n\t\t\tif (this._body.getBytesAvailable() == 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t\treturn  ParserBase.PARSING_DONE;\r\n\t\t\t} else {\r\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t\t// Error - most likely _body not set because we do not support compression.\r\n\t\t\treturn  ParserBase.PARSING_DONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate dispose():void\r\n\t{\r\n\r\n\t\tfor (var c in this._blocks) {\r\n\r\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\r\n\t\t\tb.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseNextBlock():void\r\n\t{\r\n\t\tvar block:AWDBlock;\r\n\t\tvar assetData:IAsset;\r\n\t\tvar isParsed:boolean = false;\r\n\t\tvar ns:number;\r\n\t\tvar type:number;\r\n\t\tvar flags:number;\r\n\t\tvar len:number;\r\n\r\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\r\n\r\n\t\tns = this._body.readUnsignedByte();\r\n\t\ttype = this._body.readUnsignedByte();\r\n\t\tflags = this._body.readUnsignedByte();\r\n\t\tlen = this._body.readUnsignedInt();\r\n\r\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\r\n\r\n\t\tif (this._accuracyOnBlocks) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyGeo) {\r\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyMatrix) {\r\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyProps) {\r\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar blockEndAll:number = this._body.position + len;\r\n\r\n\t\tif (len > this._body.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\r\n\t\t\tthis._body.position += this._body.getBytesAvailable();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._newBlockBytes = new ByteArray();\r\n\r\n\r\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// Compressed AWD Formats not yet supported\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\r\n\t\t\t/*\r\n\t\t\t if (blockCompressionLZMA)\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress();\r\n\t\t\t }\r\n\t\t\t */\r\n\r\n\t\t}\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\r\n\t\t//----------------------------------------------------------------------------\r\n\r\n\t\tthis._newBlockBytes.position = 0;\r\n\t\tblock = new AWDBlock();\r\n\t\tblock.len = this._newBlockBytes.position + len;\r\n\t\tblock.id = this._cur_block_id;\r\n\r\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\r\n\t\t\t//block.len       = blockEndBlock;\r\n\t\t}\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\tthis._blocks[this._cur_block_id] = block;\r\n\r\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\r\n\t\t\t// probably should contain some info about the type of animation\r\n\t\t\tvar factory = new AS2SceneGraphFactory();\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 44:\r\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:// just because i used blockID 4 in first exporter earlier\r\n\t\t\t\tcase 133:\r\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 41:\r\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//  case 43:\r\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\r\n\t\t\t\t//      isParsed = true;\r\n\t\t\t\t//      break;\r\n\r\n\t\t\t\tcase 51:\r\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 91:\r\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 92:\r\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 111:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 112:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 113:\r\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 122:\r\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 253:\r\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t//*/\r\n\t\t}\r\n\t\t//*\r\n\t\tif (isParsed == false) {\r\n\t\t\tswitch (type) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 82:\r\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 101:\r\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 102:\r\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:\r\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 121:\r\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\r\n\t\t\t\t//break;\r\n\t\t\t\tcase 254:\r\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 255:\r\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//*/\r\n\r\n\t\tvar msgCnt:number = 0;\r\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tconsole.log(\"\\n\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._debug) {\r\n\r\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\r\n\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._body.position = blockEndAll;\r\n\t\tthis._newBlockBytes = null;\r\n\r\n\t}\r\n\r\n\r\n\t//--Parser Blocks---------------------------------------------------------------------------\r\n\r\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\t//var asset:Audio;todo create asset for audio\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\t\t\tconsole.log(\"Audio url = \"+url);\r\n\r\n\t\t} else {\r\n\t\t\t// todo: exporter does not export embed sounds yet\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t// todo parse sound from bytes\r\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t//this._blocks[blockID].data = asset;todo\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 4\r\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\tvar i:number;\r\n\t\tvar j:number;\r\n\t\tvar k:number;\r\n\t\tvar timeLineContainer = factory.createMovieClip();\r\n\t\tvar name = this.parseVarStr();\r\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\r\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar fps:number = this._newBlockBytes.readFloat();\r\n\t\tvar ms_per_frame = 1000 / fps;\r\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar objectIDMap : { [id:string]:number; } = {};\r\n\r\n\t\t// var previousTimeLine:TimeLineFrame;\r\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\r\n\r\n\t\tvar totalDuration = 0;\r\n\t\tfor (i = 0; i < numFrames; i++) {\r\n\r\n\t\t\tvar frame = new TimelineKeyFrame();\r\n\t\t\tvar traceString = \"frame = \" + i;\r\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\r\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt() * ms_per_frame;\r\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\r\n\t\t\ttotalDuration += frameDuration;\r\n\t\t\t//console.log(\"duration = \" + frameDuration);\r\n\r\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tfor (j = 0; j < numLabels; j++) {\r\n\t\t\t\tvar labelType = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tvar label = this.parseVarStr();\r\n\t\t\t\t// TODO: Handle labels differently\r\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\r\n\t\t\t\ttraceString += \"\\n     label = \" + label + \" - labelType = \" + labelType;\r\n\t\t\t}\r\n\r\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tvar commandString = \"\\n      Commands \" + numCommands;\r\n\t\t\tvar hasDepthChanges = false;\r\n\t\t\tfor (j = 0; j < numCommands; j++) {\r\n\t\t\t\tvar objectID:number;\r\n\t\t\t\tvar resourceID:number;\r\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t// 1 = Add object by local id (awd-block-id) + update properties\r\n\t\t\t\t// 2 = Add object by global id (string identifier) + update properties !Not used yet.!\r\n\t\t\t\t// 3 = UpdateObject - update a object that is already present\r\n\t\t\t\t// 4 = remove object\r\n\t\t\t\t// 5 = add / update sound\r\n\r\n\t\t\t\tswitch (commandType) {\r\n\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\tcase 3:\r\n\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tvar instanceID=0; // must be set in folling conditions:\r\n\t\t\t\t\t\tif (commandType==1) {\r\n\t\t\t\t\t\t\t// this commands looks for a object by awd-id and puts it into the timeline\r\n\t\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\t\t\t\tvar newChild;\r\n\r\n\t\t\t\t\t\t\tvar numFills = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t\tcommandString += \"\\n                number of fills = \" + numFills;\r\n\r\n\t\t\t\t\t\t\t// sound is added to timeline with dedicated Command, as it is no display-object (has no matrix etc)\r\n\t\t\t\t\t\t\t// check if a Geometry can be found at the resourceID (AWD-ID)\r\n\t\t\t\t\t\t\tvar returnedArray:any[] = this.getAssetByID(resourceID, [ AssetType.GEOMETRY ]);\r\n\t\t\t\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tvar geom = <Geometry>returnedArray[1];\r\n\t\t\t\t\t\t\t\tnewChild = new Mesh(geom);\r\n\t\t\t\t\t\t\t\t// geometry found. create new Command, add the props and the materials to it\r\n\t\t\t\t\t\t\t\tfor (k = 0; k < numFills; k++) {\r\n\t\t\t\t\t\t\t\t\tvar returnedArray2:any[] = this.getAssetByID(this._newBlockBytes.readUnsignedInt(), [ AssetType.MATERIAL ]);\r\n\t\t\t\t\t\t\t\t\tif (returnedArray2[0] && newChild.subMeshes.length > k)\r\n\t\t\t\t\t\t\t\t\t\tnewChild.subMeshes[k].material = returnedArray2[1];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t// no geometry found, so we check for TIMELINE.\r\n\t\t\t\t\t\t\t\t// there should be no fills in this case, but geometry check might have failed, and fill-ids still need to be parsed\r\n\t\t\t\t\t\t\t\tfor (k = 0; k < numFills; k++)\r\n\t\t\t\t\t\t\t\t\tthis._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\t\t\t\t\tvar returnedArray:any[] = this.getAssetByID(resourceID, [ AssetType.TIMELINE ]);\r\n\t\t\t\t\t\t\t\tif (returnedArray[0])\r\n\t\t\t\t\t\t\t\t\tnewChild = <MovieClip>returnedArray[1];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tinstanceID = timeLineContainer.registerPotentialChild(newChild);\r\n\t\t\t\t\t\t\tobjectIDMap[objectID] = instanceID;\r\n\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildCommand(instanceID));\r\n\r\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\r\n\t\t\t\t\t\t\tif (instanceName.length) {\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"name\", instanceName));\r\n\t\t\t\t\t\t\t\tcommandString += \"\\n                instanceName = \" + instanceName;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcommandString += \"\\n      - Add new Resource = \" + resourceID + \" as object_id = \" + objectID;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (commandType==2) {\r\n\t\t\t\t\t\t\t// this commands looks for a object by global string identifier and puts it into the timeline\r\n\t\t\t\t\t\t\t// this is not used yet, but might be useful to do things like text-localization\r\n\t\t\t\t\t\t\tvar global_ressource_id = this.parseVarStr();\r\n\t\t\t\t\t\t\t// todo (if needed)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinstanceID = objectIDMap[objectID];\r\n\t\t\t\t\t\t\tcommandString += \"\\n      - Update object_id = \" + objectID;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// read the command properties\r\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\r\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\r\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\r\n\t\t\t\t\t\t// 4: blendmode (uint8)\r\n\t\t\t\t\t\t// 5: visibilty (uint8)\r\n\t\t\t\t\t\t// 6: depth (uint32)\r\n\t\t\t\t\t\t// 7: mask (uint32)\r\n\r\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._propsNrType, 4:AWDParser.UINT8, 5:AWDParser.UINT8, 6:AWDParser.UINT32, 7:AWDParser.UINT32});\r\n\r\n\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\r\n\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\r\n\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\r\n\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\r\n\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\r\n\t\t\t\t\t\tvar depth:number = props.get(6, -1);\r\n\t\t\t\t\t\tvar mask:number = props.get(7, -1);\r\n\t\t\t\t\t\t// todo: handle filters\r\n\r\n\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\r\n\r\n\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d.length;\r\n\t\t\t\t\t\tif (matrix_2d.length==6) {\r\n\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\r\n\t\t\t\t\t\t\t// todo set rotation + scale from matrix 2x3 to matrix3d\r\n\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\r\n\t\t\t\t\t\t\tthisMatrix.rawData[0]=matrix_2d[0];\r\n\t\t\t\t\t\t\tthisMatrix.rawData[1]=matrix_2d[1];\r\n\t\t\t\t\t\t\tthisMatrix.rawData[4]=matrix_2d[2];\r\n\t\t\t\t\t\t\tthisMatrix.rawData[5]=matrix_2d[3];\r\n\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"_iMatrix3D\", thisMatrix));\r\n\r\n\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\r\n\t\t\t\t\t\tif (colortransform.length==20) {\r\n\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\r\n\t\t\t\t\t\t\tcommandString += \"\\n                colorMatrix = \" + colortransform;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// blendmode must be positive to be valid\r\n\t\t\t\t\t\tif (blendmode>=0) {\r\n\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\r\n\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\r\n\t\t\t\t\t\t\tcommandString += \"\\n                BlendMode = \" + blendmode_string;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// visibilty must be positive to be valid\r\n\t\t\t\t\t\tif (visibilty>=0) {\r\n\t\t\t\t\t\t\tif(visibilty==0)\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", false));\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", true));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// depth must be positive to be valid\r\n\t\t\t\t\t\tif (depth>=0) {\r\n\t\t\t\t\t\t\tcommandString += \"\\n                Depth = \" + depth;\r\n\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"__AS2Depth\", depth));\r\n\t\t\t\t\t\t\thasDepthChanges = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\r\n\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\r\n\t\t\t\t\t\tif (mask>=0) {\r\n\t\t\t\t\t\t\tcommandString += \"\\n                Mask-up to obj-id: \" + mask;\r\n\t\t\t\t\t\t\t// TODO: set depthClipChange on objectProps\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// todo: handle filters\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 4:\r\n\r\n\t\t\t\t\t\t// Remove Object Command\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tvar instanceID = objectIDMap[objectID];\r\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildCommand(instanceID));\r\n\t\t\t\t\t\tcommandString += \"\\n       - Remove object with ID: \" + objectID;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 5:\r\n\r\n\t\t\t\t\t\t// Add Sound Command\r\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\t// TODO: implement sound in timeline\r\n\t\t\t\t\t\tcommandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tcommandString += \"\\n       - Unknown Command Type = \" + commandType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDepthChanges) {\r\n\t\t\t\t// only want to do this once after all children's depth values are updated\r\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\r\n\t\t\t\thasDepthChanges = false;\r\n\t\t\t}\r\n\r\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tif (length_code > 0) {\r\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\r\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\r\n\t\t\t\t//frame.addToScript(frame_code);\r\n\t\t\t\ttraceString += \"\\nframe-code = \" + frame_code;\r\n\t\t\t}\r\n\t\t\ttraceString += commandString;\r\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\r\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\r\n\t\t\t//console.log(traceString);\r\n\t\t\ttimeLineContainer.addFrame(frame);\r\n\r\n\t\t}\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\r\n\t\tthis._blocks[blockID].data = timeLineContainer;\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t}\r\n\r\n\t//Block ID = 1\r\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\r\n\t{\r\n\r\n\t\tvar geom:Geometry = new Geometry();\r\n\r\n\t\t// Read name and sub count\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t// Read optional properties\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\tvar geoScaleU:number = props.get(1, 1);\r\n\t\tvar geoScaleV:number = props.get(2, 1);\r\n\r\n\t\t// Loop through sub meshes\r\n\t\tvar subs_parsed:number = 0;\r\n\t\twhile (subs_parsed < num_subs) {\r\n\t\t\tvar is_curve_geom:boolean=false;\r\n\t\t\tvar i:number;\r\n\t\t\tvar sm_len:number, sm_end:number;\r\n\t\t\tvar w_indices:Array<number>;\r\n\t\t\tvar weights:Array<number>;\r\n\r\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\r\n\r\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\t\t// Loop through data streams\r\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\tvar idx:number = 0;\r\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t// Type, field type, length\r\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\r\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\r\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 3) {\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 4) {\r\n\r\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 6) {\r\n\t\t\t\t\tw_indices = Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 7) {\r\n\r\n\t\t\t\t\tweights = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\tis_curve_geom=true;\r\n\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\tpositions[idx_pos++] =  this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\r\n\t\t\tif(is_curve_geom){\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tgeom.addSubGeometry(curve_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a CurveSubGeometry\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar triangle_sub_geom = new TriangleSubGeometry(true);\r\n\t\t\t\tif (weights)\r\n\t\t\t\t\ttriangle_sub_geom.jointsPerVertex = weights.length / (verts.length / 3);\r\n\t\t\t\tif (normals)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (uvs)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveUVs = false;\r\n\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (true) {\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveTangents = true;\r\n\t\t\t\t}\r\n\t\t\t\ttriangle_sub_geom.updateIndices(indices);\r\n\t\t\t\ttriangle_sub_geom.updatePositions(verts);\r\n\t\t\t\ttriangle_sub_geom.updateVertexNormals(normals);\r\n\t\t\t\ttriangle_sub_geom.updateUVs(uvs);\r\n\t\t\t\ttriangle_sub_geom.updateVertexTangents(null);\r\n\t\t\t\ttriangle_sub_geom.updateJointWeights(weights);\r\n\t\t\t\ttriangle_sub_geom.updateJointIndices(w_indices);\r\n\r\n\t\t\t\tvar scaleU:number = subProps.get(1, 1);\r\n\t\t\t\tvar scaleV:number = subProps.get(2, 1);\r\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\r\n\r\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\r\n\t\t\t\t\tsetSubUVs = true;\r\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\r\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (setSubUVs)\r\n\t\t\t\t\ttriangle_sub_geom.scaleUV(scaleU, scaleV);\r\n\t\t\t\tgeom.addSubGeometry(triangle_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleSubGeometry\");\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\r\n\t\t\t// when creating meshes (and their material assignments.)\r\n\r\n\t\t\tsubs_parsed++;\r\n\t\t}\r\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\r\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\r\n\t\tthis._blocks[blockID].data = geom;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//Block ID = 11\r\n\tprivate parsePrimitves(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar prefab:PrefabBase;\r\n\t\tvar primType:number;\r\n\t\tvar subs_parsed:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar bsm:Matrix3D;\r\n\r\n\t\t// Read name and sub count\r\n\t\tname = this.parseVarStr();\r\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\r\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\r\n\r\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\r\n\r\n\t\tswitch (primType) {\r\n\t\t\t// to do, not all properties are set on all primitives\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3:\r\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\r\n\t\t\t\tif (!props.get(701, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\r\n\t\t\t\tif (!props.get(702, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\r\n\t\t\t\tif (!props.get(703, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 5:\r\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 7:\r\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tprefab = new PrefabBase();\r\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\r\n\t\t\t//geom.subGeometries;\r\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tprefab.name = name;\r\n\t\tthis._pFinalizeAsset(prefab, name);\r\n\t\tthis._blocks[blockID].data = prefab;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif ((primType < 0) || (primType > 7)) {\r\n\t\t\t\tprimType = 0;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 22\r\n\tprivate parseContainer(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar par_id:number;\r\n\t\tvar mtx:Matrix3D;\r\n\t\tvar ctr:DisplayObjectContainer;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\r\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\r\n\t\tmtx = this.parseMatrix3D();\r\n\t\tname = this.parseVarStr();\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tctr = new DisplayObjectContainer();\r\n\t\tctr.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\r\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\r\n\t\t}\r\n\r\n\t\t// in AWD version 2.1 we read the Container properties\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t}\r\n\t\t// in other versions we do not read the Container properties\r\n\t\telse {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\r\n\t\tctr.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\r\n\t\tthis._blocks[blockID].data = ctr;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 23\r\n\tprivate parseMeshInstance(blockID:number):void\r\n\t{\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\t\tmesh.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(mesh);\r\n\t\t\tparentName = objC.name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\t\t}\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\r\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\r\n\t\t\tmesh.castsShadows = props.get(5, true);\r\n\t\t} else {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID 31\r\n\tprivate parseSkyboxInstance(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\r\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\r\n\r\n\t\tthis.parseProperties(null)\r\n\t\tasset.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(asset, name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\r\n\r\n\t}\r\n\r\n\t//Block ID = 41\r\n\tprivate parseLight(blockID:number):void\r\n\t{\r\n\t\tvar light:LightBase;\r\n\t\tvar newShadowMapper:ShadowMapperBase;\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\r\n\t\tvar shadowMapperType:number = props.get(9, 0);\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\r\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\r\n\r\n\t\tif (lightType == 1) {\r\n\t\t\tlight = new PointLight();\r\n\r\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\r\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 4) {\r\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.transform.matrix3D = mtx;\r\n\r\n\t\t}\r\n\r\n\t\tif (lightType == 2) {\r\n\r\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 1) {\r\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (shadowMapperType == 2)\r\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\r\n\t\t\t\t//if (shadowMapperType == 3)\r\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tlight.color = props.get(3, 0xffffff);\r\n\t\tlight.specular = props.get(4, 1.0);\r\n\t\tlight.diffuse = props.get(5, 1.0);\r\n\t\tlight.ambientColor = props.get(7, 0xffffff);\r\n\t\tlight.ambient = props.get(8, 0.0);\r\n\r\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\r\n\t\tif (newShadowMapper) {\r\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\r\n\t\t\t\tif (props.get(10, 1) != 1) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (props.get(10, 2) != 2) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.shadowMapper = newShadowMapper;\r\n\t\t\tlight.castsShadows = true;\r\n\t\t}\r\n\r\n\t\tif (par_id != 0) {\r\n\r\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\r\n\r\n\t\t\tif (returnedArrayParent[0]) {\r\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\r\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\r\n\r\n\t\tthis._blocks[blockID].data = light;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\r\n\r\n\t}\r\n\r\n\t//Block ID = 43\r\n\tprivate parseCamera(blockID:number):void\r\n\t{\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar projection:ProjectionBase;\r\n\r\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\r\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\r\n\r\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\r\n\r\n\t\tswitch (projectiontype) {\r\n\t\t\tcase 5001:\r\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5002:\r\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5003:\r\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar camera:Camera = new Camera(projection);\r\n\t\tcamera.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(camera);\r\n\r\n\t\t\tparentName = objC.name;\r\n\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\r\n\t\t}\r\n\r\n\t\tcamera.name = name;\r\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\tcamera.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(camera, name);\r\n\r\n\t\tthis._blocks[blockID].data = camera\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 51\r\n\tprivate parseLightPicker(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\r\n\t\tvar k:number = 0;\r\n\t\tvar lightID:number = 0;\r\n\r\n\t\tvar returnedArrayLight:Array<any>;\r\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\r\n\r\n\t\tfor (k = 0; k < numLights; k++) {\r\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [AssetType.LIGHT])\r\n\r\n\t\t\tif (returnedArrayLight[0]) {\r\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\r\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lightsArray.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\treturn; //return without any more parsing for this block\r\n\t\t}\r\n\r\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\r\n\t\tlightPick.name = name;\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\r\n\r\n\t\tthis._blocks[blockID].data = lightPick\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 81\r\n\tprivate parseMaterial(blockID:number):void\r\n\t{\r\n\t\t// TODO: not used\r\n\t\t////blockLength = block.len;\r\n\t\tvar name:string;\r\n\t\tvar type:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar attributes:Object;\r\n\t\tvar finalize:boolean;\r\n\t\tvar num_methods:number;\r\n\t\tvar methods_parsed:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tname = this.parseVarStr();\r\n\t\ttype = this._newBlockBytes.readUnsignedByte();\r\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t// Read material numerical properties\r\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\r\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\r\n\r\n\t\tmethods_parsed = 0;\r\n\t\twhile (methods_parsed < num_methods) {\r\n\t\t\tvar method_type:number;\r\n\r\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tmethods_parsed += 1;\r\n\t\t}\r\n\t\tvar debugString:string = \"\";\r\n\t\tattributes = this.parseUserAttributes();\r\n\t\tif (type === 1) { // Color material\r\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\tvar color:number;\r\n\t\t\tcolor = props.get(1, 0xffffff);\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t} else {\r\n\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t}\r\n\t\t} else if (type === 2) {\r\n\t\t\tvar tex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\r\n\r\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\r\n\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t} else {\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmat.extra = attributes;\r\n\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\tmat.repeat = props.get(13, false);\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\t\tthis._blocks[blockID].data = mat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 81 AWD2.1\r\n\tprivate parseMaterial_v1(blockID:number):void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar normalTexture:Texture2DBase;\r\n\t\tvar specTexture:Texture2DBase;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\r\n\t\tvar spezialType:number = props.get(4, 0);\r\n\t\tvar debugString:string = \"Parsed Material \";\r\n\r\n\t\tif (spezialType >= 2) {//this is no supported material\r\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type <= 2) {// Color material\r\n\t\t\tif (this.materialMode == 1)\r\n\t\t\t\tspezialType = 0;\r\n\t\t\telse if (this.materialMode == 2)\r\n\t\t\t\tspezialType = 1;\r\n\r\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\r\n\r\n\t\t\t\tif (type == 1) {// Color material\r\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\r\n\r\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\r\n\r\n\t\t\t\t\t} else { //\tSinglePassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (type == 2) {// texture material\r\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\r\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\r\n\r\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\r\n\r\n\t\t\t\t\tmat = new MethodMaterial(texture);\r\n\r\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t} else {//\tSinglePassMaterial\r\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0])\r\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\r\n\t\t\t\tif (diffuseTexture) {\r\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\r\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tnormalTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tspecTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [AssetType.LIGHT_PICKER])\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\r\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.smooth = props.get(5, true);\r\n\t\t\t\tmat.mipmap = props.get(6, true);\r\n\t\t\t\tmat.bothSides = props.get(7, false);\r\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\r\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\r\n\t\t\t\tmat.repeat = props.get(13, false);\r\n\r\n\t\t\t\tif (normalTexture)\r\n\t\t\t\t\tmat.normalMap = normalTexture;\r\n\r\n\t\t\t\tif (specTexture)\r\n\t\t\t\t\tmat.specularMap = specTexture;\r\n\r\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\t\t\tmat.ambient = props.get(15, 1.0);\r\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\r\n\t\t\t\tmat.specular = props.get(18, 1.0);\r\n\t\t\t\tmat.gloss = props.get(19, 50);\r\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\r\n\r\n\t\t\t\tvar methods_parsed:number = 0;\r\n\t\t\t\tvar targetID:number;\r\n\r\n\t\t\t\twhile (methods_parsed < num_methods) {\r\n\t\t\t\t\tvar method_type:number;\r\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t\tprops = this.parseProperties({\r\n\t\t\t\t\t\t1: AWDParser.BADDR,\r\n\t\t\t\t\t\t2: AWDParser.BADDR,\r\n\t\t\t\t\t\t3: AWDParser.BADDR,\r\n\t\t\t\t\t\t101: this._propsNrType,\r\n\t\t\t\t\t\t102: this._propsNrType,\r\n\t\t\t\t\t\t103: this._propsNrType,\r\n\t\t\t\t\t\t201: AWDParser.UINT32,\r\n\t\t\t\t\t\t202: AWDParser.UINT32,\r\n\t\t\t\t\t\t301: AWDParser.UINT16,\r\n\t\t\t\t\t\t302: AWDParser.UINT16,\r\n\t\t\t\t\t\t401: AWDParser.UINT8,\r\n\t\t\t\t\t\t402: AWDParser.UINT8,\r\n\t\t\t\t\t\t601: AWDParser.COLOR,\r\n\t\t\t\t\t\t602: AWDParser.COLOR,\r\n\t\t\t\t\t\t701: AWDParser.BOOL,\r\n\t\t\t\t\t\t702: AWDParser.BOOL,\r\n\t\t\t\t\t\t801: AWDParser.MTX4x4\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswitch (method_type) {\r\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.EFFECTS_METHOD]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\r\n\r\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\r\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\r\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\r\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\r\n\t\t\t\t\t\t\tif (!mat.normalMap)\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\r\n\r\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\r\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.parseUserAttributes();\r\n\t\t\t\t\tmethods_parsed += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// todo: we should not need this anymore (if using texture-atlas)\r\n\t\telse if ((type>=3)&&(type<=7)){\r\n\t\t\t// if this is a curve material, we create it, finalize it, assign it to block-cache and return and return.\r\n\t\t\tvar color:number = props.get(1, 0xcccccc);\r\n\t\t\tdebugString+=color;\r\n\r\n\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\tvar diffuseTex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\tdiffuseTexture = DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t}\r\n\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\t\t\tvar curve_mat:CurveMaterial = new CurveMaterial(diffuseTexture);\r\n\t\t\t//debugString+= \" alpha = \"+props.get(10, 1.0)+\" \";\r\n\t\t\tdebugString+= \" texture = \"+diffuseTex_addr+\" \";\r\n\t\t\tcurve_mat.bothSides = true;\r\n\t\t\tcurve_mat.preserveAlpha = true;\r\n\t\t\tcurve_mat.alphaBlending = true;\r\n\t\t\tcurve_mat.extra = this.parseUserAttributes();\r\n\t\t\tthis._pFinalizeAsset(<IAsset> curve_mat, name);\r\n\t\t\tthis._blocks[blockID].data = curve_mat;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(debugString);\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\t\tmat.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\r\n\t\tthis._blocks[blockID].data = mat;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 82\r\n\tprivate parseTexture(blockID:number):void\r\n\t{\r\n\r\n\t\tvar asset:Texture2DBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\r\n\t\t} else {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t//\r\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\r\n\t\t\t//\r\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\r\n\t\t\t// This gives the browser time to initialise image width / height.\r\n\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 83\r\n\tprivate parseCubeTexture(blockID:number):void\r\n\t{\r\n\t\t//blockLength = block.len;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:CubeTextureBase;\r\n\t\tvar i:number;\r\n\r\n\t\tthis._cubeTextures = new Array<any>();\r\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\t\t\tthis._cubeTextures.push(null);\r\n\r\n\t\t\t// External\r\n\t\t\tif (type == 0) {\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar url:string;\r\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar data:ByteArray;\r\n\t\t\t\tdata = new ByteArray();\r\n\r\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 91\r\n\tprivate parseSharedMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar asset:EffectMethodBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\t\tasset = this.parseSharedMethodList(blockID);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 92\r\n\tprivate parseShadowMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar type:number;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:ShadowMethodBase;\r\n\t\tvar shadowLightID:number;\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [AssetType.LIGHT]);\r\n\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\r\n\r\n\t\tif (!asset)\r\n\t\t\treturn;\r\n\r\n\t\tthis.parseUserAttributes(); // Ignore for now\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID = 253\r\n\tprivate parseCommand(blockID:number):void\r\n\t{\r\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar parentObject:DisplayObjectContainer;\r\n\t\tvar targetObject:DisplayObjectContainer;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\r\n\t\t}\r\n\r\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\r\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tswitch (typeCommand) {\r\n\t\t\tcase 1:\r\n\r\n\t\t\t\tvar targetID:number = props.get(1, 0);\r\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [AssetType.LIGHT, AssetType.TEXTURE_PROJECTOR]); //for no only light is requested!!!!\r\n\r\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = returnedArrayTarget[1];\r\n\r\n\t\t\t\tif (parentObject) {\r\n\t\t\t\t\tparentObject.addChild(targetObject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (targetObject) {\r\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\r\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t\ttargetObject.extra = this.parseUserAttributes();\r\n\r\n\t\t}\r\n\t\tthis._blocks[blockID].data = targetObject\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//blockID 255\r\n\tprivate parseMetaData(blockID:number):void\r\n\t{\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\r\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\r\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\r\n\t\t}\r\n\t}\r\n\r\n\t//blockID 254\r\n\tprivate parseNameSpace(blockID:number):void\r\n\t{\r\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar nameSpaceString:string = this.parseVarStr();\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\r\n\t}\r\n\r\n\t//--Parser UTILS---------------------------------------------------------------------------\r\n\r\n\t// this functions reads and creates a ShadowMethodMethod\r\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar shadowMethod:ShadowMethodBase;\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\r\n\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>\r\n\t\tswitch (methodType) {\r\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\r\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\r\n\t\t\t//\t\t\t\t\t}\r\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 1002: //ShadowNearMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\r\n\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\r\n\t\t\t\t\treturn shadowMethod;\r\n\t\t\t\t}\r\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1101: //ShadowFilteredMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1102: //ShadowDitheredMethod\r\n\r\n\r\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1103: //ShadowSoftMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1104: //ShadowHardMethod\r\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn shadowMethod;\r\n\t}\r\n\r\n\t//Block ID 101\r\n\tprivate parseSkeleton(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar skeleton:Skeleton = new Skeleton();\r\n\t\tthis.parseProperties(null); // Discard properties for now\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint:SkeletonJoint;\r\n\t\t\tvar ibp:Matrix3D;\r\n\t\t\t// Ignore joint id\r\n\t\t\tthis._newBlockBytes.readUnsignedShort();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\r\n\t\t\tjoint.name = this.parseVarStr();\r\n\r\n\t\t\tibp = this.parseMatrix3D();\r\n\t\t\tjoint.inverseBindPose = ibp.rawData;\r\n\t\t\t// Ignore joint props/attributes for now\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tskeleton.joints.push(joint);\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\r\n\t\t// Discard attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(skeleton, name);\r\n\t\tthis._blocks[blockID].data = skeleton;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//Block ID = 102\r\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar pose:SkeletonPose = new SkeletonPose();\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint_pose:JointPose;\r\n\t\t\tvar has_transform:number /*uint*/;\r\n\t\t\tjoint_pose = new JointPose();\r\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\r\n\t\t\tif (has_transform == 1) {\r\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\r\n\r\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\r\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\r\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\r\n\r\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\r\n\t\t\t}\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\t\t// Skip attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(pose, name);\r\n\t\tthis._blocks[blockID].data = pose;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//blockID 103\r\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar frame_dur:number;\r\n\t\tvar pose_addr:number /*uint*/;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar returnedArray:Array<any>;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [AssetType.SKELETON_POSE]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\r\n\t\t\telse\r\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif (clip.frames.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Ignore attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//Block ID = 111 /  Block ID = 112\r\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\r\n\t{\r\n\t\tvar num_frames:number /*uint*/ = 1;\r\n\t\tvar num_submeshes:number /*uint*/;\r\n\t\tvar frames_parsed:number /*uint*/;\r\n\t\tvar subMeshParsed:number /*uint*/;\r\n\t\tvar frame_dur:number;\r\n\t\tvar x:number;\r\n\t\tvar y:number;\r\n\t\tvar z:number;\r\n\t\tvar str_len:number;\r\n\t\tvar str_end:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar idx:number /*int*/ = 0;\r\n\t\tvar clip:VertexClipNode = new VertexClipNode();\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\t\tvar verts:Array<number>;\r\n\t\tvar num_Streams:number /*int*/ = 0;\r\n\t\tvar streamsParsed:number /*int*/ = 0;\r\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar thisGeo:Geometry;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [AssetType.GEOMETRY]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\r\n\t\tif (!poseOnly)\r\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\r\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\r\n\t\tstreamsParsed = 0;\r\n\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\r\n\t\t\tstreamsParsed++;\r\n\t\t}\r\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\r\n\r\n\t\tclip.looping = props.get(1, true);\r\n\t\tclip.stitchFinalFrame = props.get(2, false);\r\n\r\n\t\tframes_parsed = 0;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tsubMeshParsed = 0;\r\n\t\t\twhile (subMeshParsed < num_submeshes) {\r\n\t\t\t\tstreamsParsed = 0;\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\t\t\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\r\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\r\n\t\t\t\t\t\tverts = new Array<number>();\r\n\t\t\t\t\t\tidx = 0;\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\r\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\r\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\r\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\r\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\r\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\r\n\t\t\t\t\t\tsubMeshParsed++;\r\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\tstreamsParsed++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//BlockID 113\r\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar poseBlockAdress:number /*int*/\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\r\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\r\n\t\t\telse {\r\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\r\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\r\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\r\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\r\n\t\t\t}\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tif (vertexFrames.length > 0) {\r\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\r\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\r\n\r\n\t\t} else if (skeletonFrames.length > 0) {\r\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\r\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\r\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\r\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t//BlockID 122\r\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar targetMesh:Mesh;\r\n\t\tvar animSetBlockAdress:number /*int*/\r\n\t\tvar targetAnimationSet:AnimationSetBase;\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\r\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\r\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\r\n\r\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tvar returnedArray:Array<any>;\r\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\r\n\r\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\r\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [AssetType.MESH]);\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\r\n\t\t}\r\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AssetType.ANIMATION_SET]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\r\n\t\t\treturn\r\n\t\t}\r\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\r\n\t\tvar thisAnimator:AnimatorBase;\r\n\t\tif (type == 1) {\r\n\r\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [AssetType.SKELETON]);\r\n\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\r\n\r\n\t\t} else if (type == 2)\r\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\r\n\r\n\t\tthis._pFinalizeAsset(thisAnimator, name);\r\n\t\tthis._blocks[blockID].data = thisAnimator;\r\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\r\n\t\t\tif (type == 1)\r\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\r\n\t\t\tif (type == 2)\r\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\r\n\r\n\t\t}\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\r\n\t}\r\n\r\n\t// this functions reads and creates a EffectMethod\r\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar effectMethodReturn:EffectMethodBase;\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tswitch (methodType) {\r\n\t\t\t// Effect Methods\r\n\t\t\tcase 401: //ColorMatrix\r\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 402: //ColorTransform\r\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\r\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\r\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 403: //EnvMap\r\n\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\tconsole.log('ENV MAP', targetID);\r\n\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ AssetType.TEXTURE ], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\r\n\t\t\t\ttargetID = props.get(2, 0);\r\n\t\t\t\tif (targetID > 0) {\r\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\r\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\r\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 404: //LightMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE_PROJECTOR]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 406: //RimLightMethod\r\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\r\n\t\t\t\tbreak;\r\n\t\t\tcase 407: //AlphaMaskMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\r\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 410: //FresnelEnvMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 411: //FogMethod\r\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn effectMethodReturn;\r\n\r\n\t}\r\n\r\n\tprivate parseUserAttributes():Object\r\n\t{\r\n\t\tvar attributes:Object;\r\n\t\tvar list_len:number;\r\n\t\tvar attibuteCnt:number;\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tif (list_len > 0) {\r\n\r\n\t\t\tvar list_end:number;\r\n\r\n\t\t\tattributes = {};\r\n\r\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar ns_id:number;\r\n\t\t\t\tvar attr_key:string;\r\n\t\t\t\tvar attr_type:number;\r\n\t\t\t\tvar attr_len:number;\r\n\t\t\t\tvar attr_val:any;\r\n\r\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\r\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_key = this.parseVarStr();\r\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn attributes;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (attr_type) {\r\n\t\t\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.BOOL:\r\n\t\t\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT32:\r\n\t\t\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\r\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributes[attr_key] = attr_val;\r\n\t\t\t\tattibuteCnt += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\tprivate parseProperties(expected:Object):AWDProperties\r\n\t{\r\n\t\tvar list_end:number;\r\n\t\tvar list_len:number;\r\n\t\tvar propertyCnt:number = 0;\r\n\t\tvar props:AWDProperties = new AWDProperties();\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\tif (expected) {\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar len:number;\r\n\t\t\t\tvar key:number;\r\n\t\t\t\tvar type:number;\r\n\r\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn props;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\r\n\t\t\t\t\ttype = expected[key];\r\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpropertyCnt += 1;\r\n\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t}\r\n\r\n\t\treturn props;\r\n\r\n\t}\r\n\r\n\tprivate parseAttrValue(type:number, len:number):any\r\n\t{\r\n\t\tvar elem_len:number;\r\n\t\tvar read_func:Function;\r\n\r\n\t\tswitch (type) {\r\n\r\n\t\t\tcase AWDParser.BOOL:\r\n\t\t\tcase AWDParser.INT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT32:\r\n\t\t\tcase AWDParser.COLOR:\r\n\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\r\n\t\t\tcase AWDParser.VECTOR2x1:\r\n\t\t\tcase AWDParser.VECTOR3x1:\r\n\t\t\tcase AWDParser.VECTOR4x1:\r\n\t\t\tcase AWDParser.MTX3x2:\r\n\t\t\tcase AWDParser.MTX3x3:\r\n\t\t\tcase AWDParser.MTX4x3:\r\n\t\t\tcase AWDParser.MTX4x4:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif (elem_len < len) {\r\n\t\t\tvar list:Array<any> = [];\r\n\t\t\tvar num_read:number = 0;\r\n\t\t\tvar num_elems:number = len/elem_len;\r\n\r\n\t\t\twhile (num_read < num_elems) {\r\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\r\n\t\t\t\tnum_read++;\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t} else {\r\n\r\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\r\n\t\t\treturn val;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseHeader():void\r\n\t{\r\n\t\tvar flags:number;\r\n\t\tvar body_len:number;\r\n\r\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\r\n\r\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\r\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\r\n\r\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\r\n\r\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\r\n\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\t}\r\n\r\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\r\n\r\n\t\t// set storagePrecision types\r\n\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyGeo) {\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyMatrix) {\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyProps) {\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\r\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\t// Check file integrity\r\n\t\tbody_len = this._byteData.readUnsignedInt();\r\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\r\n\t\t}\r\n\r\n\t}\r\n\t// Helper - functions\r\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\r\n\t{\r\n\t\tif (this._blocks[meshID].data instanceof Mesh)\r\n\t\t\tmeshID = this._blocks[meshID].geoID;\r\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\r\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\r\n\t\tvar geoCnt:number /*int*/ = 0;\r\n\t\tvar ud:Array<number>;\r\n\t\tvar uStride:number /*uint*/;\r\n\t\tvar uOffs:number /*uint*/;\r\n\t\tvar numPoints:number /*uint*/;\r\n\t\tvar i:number /*int*/;\r\n\t\tvar newUvs:Array<number>;\r\n\t\tvar sub_geom:TriangleSubGeometry;\r\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\r\n\t\twhile (geoCnt < geometry.subGeometries.length) {\r\n\t\t\tnewUvs = new Array<number>();\r\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\r\n\t\t\tnumPoints = sub_geom.numVertices;\r\n\t\t\tud = sub_geom.uvs;\r\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\r\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\r\n\t\t\tfor (i = 0; i < numPoints; i++) {\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\r\n\t\t\t}\r\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\r\n\t\t\tgeoCnt++;\r\n\t\t}\r\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t}\r\n\r\n\tprivate parseVarStr():string\r\n\t{\r\n\r\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\r\n\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\t}\r\n\r\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\r\n\t{\r\n\t\tvar returnArray:Array<any> = new Array<any>();\r\n\t\tvar typeCnt:number = 0;\r\n\t\tif (assetID > 0) {\r\n\t\t\tif (this._blocks[assetID]) {\r\n\t\t\t\tif (this._blocks[assetID].data) {\r\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\r\n\r\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\r\n\r\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\r\n\t\t\t\t\t\t\t//if the right assetType was found\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"CubeTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"SingleTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (IAsset(_blocks[assetID].data).assetType == AssetType.MESH)) {\r\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (iasset.assetType == AssetType.MESH)) {\r\n\r\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\r\n\r\n\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\r\n\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttypeCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\r\n\t\treturnArray.push(false);\r\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\r\n\t\treturn returnArray;\r\n\t}\r\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\r\n\t{\r\n\t\tswitch (true) {\r\n\t\t\tcase (assetType == AssetType.TEXTURE):\r\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\r\n\t\t\t\t\treturn this.getDefaultCubeTexture();\r\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\r\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t\tbreak;\r\n\t\t\tcase (assetType == AssetType.MATERIAL):\r\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate getDefaultCubeTexture():IAsset\r\n\t{\r\n\t\tif (!this._defaultCubeTexture) {\r\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\r\n\r\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\r\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\r\n\t\t}\r\n\r\n\t\treturn <IAsset> this._defaultCubeTexture;\r\n\t}\r\n\r\n\tprivate readNumber(precision:boolean = false):number\r\n\t{\r\n\t\tif (precision)\r\n\t\t\treturn this._newBlockBytes.readDouble();\r\n\t\treturn this._newBlockBytes.readFloat();\r\n\r\n\t}\r\n\r\n\tprivate parseMatrix3D():Matrix3D\r\n\t{\r\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\r\n\t}\r\n\r\n\tprivate parseMatrix32RawData():Array<number>\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n\tprivate parseMatrix43RawData():Array<number>\r\n\t{\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\r\n\r\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[3] = 0.0;\r\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[7] = 0.0;\r\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[11] = 0.0;\r\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[15] = 1.0;\r\n\r\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\r\n\r\n\t\tif (isNaN(mtx_raw[0])) {\r\n\t\t\tmtx_raw[0] = 1;\r\n\t\t\tmtx_raw[1] = 0;\r\n\t\t\tmtx_raw[2] = 0;\r\n\t\t\tmtx_raw[4] = 0;\r\n\t\t\tmtx_raw[5] = 1;\r\n\t\t\tmtx_raw[6] = 0;\r\n\t\t\tmtx_raw[8] = 0;\r\n\t\t\tmtx_raw[9] = 0;\r\n\t\t\tmtx_raw[10] = 1;\r\n\t\t\tmtx_raw[12] = 0;\r\n\t\t\tmtx_raw[13] = 0;\r\n\t\t\tmtx_raw[14] = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n}\r\n\r\nexport = AWDParser;\r\n\r\nclass AWDBlock\r\n{\r\n\tpublic id:number;\r\n\tpublic name:string;\r\n\tpublic data:any;\r\n\tpublic len:any;\r\n\tpublic geoID:number;\r\n\tpublic extras:Object;\r\n\tpublic bytes:ByteArray;\r\n\tpublic errorMessages:Array<string>;\r\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\r\n\r\n\tconstructor()\r\n\t{\r\n\t}\r\n\r\n\tpublic dispose()\r\n\t{\r\n\r\n\t\tthis.id = null;\r\n\t\tthis.bytes = null;\r\n\t\tthis.errorMessages = null;\r\n\t\tthis.uvsForVertexAnimation = null;\r\n\r\n\t}\r\n\r\n\tpublic addError(errorMsg:string):void\r\n\t{\r\n\t\tif (!this.errorMessages)\r\n\t\t\tthis.errorMessages = new Array<string>();\r\n\r\n\t\tthis.errorMessages.push(errorMsg);\r\n\t}\r\n}\r\n\r\nclass AWDProperties\r\n{\r\n\tpublic set(key:number, value:any):void\r\n\t{\r\n\t\tthis[ key.toString() ] = value;\r\n\t}\r\n\r\n\tpublic get(key:number, fallback:any):any\r\n\t{\r\n\t\tif (this.hasOwnProperty(key.toString())) {\r\n\t\t\treturn this[key.toString()];\r\n\t\t} else {\r\n\t\t\treturn fallback;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BitFlags\r\n{\r\n\tpublic static FLAG1:number = 1;\r\n\tpublic static FLAG2:number = 2;\r\n\tpublic static FLAG3:number = 4;\r\n\tpublic static FLAG4:number = 8;\r\n\tpublic static FLAG5:number = 16;\r\n\tpublic static FLAG6:number = 32;\r\n\tpublic static FLAG7:number = 64;\r\n\tpublic static FLAG8:number = 128;\r\n\tpublic static FLAG9:number = 256;\r\n\tpublic static FLAG10:number = 512;\r\n\tpublic static FLAG11:number = 1024;\r\n\tpublic static FLAG12:number = 2048;\r\n\tpublic static FLAG13:number = 4096;\r\n\tpublic static FLAG14:number = 8192;\r\n\tpublic static FLAG15:number = 16384;\r\n\tpublic static FLAG16:number = 32768;\r\n\r\n\tpublic static test(flags:number, testFlag:number):boolean\r\n\t{\r\n\t\treturn (flags & testFlag) == testFlag;\r\n\t}\r\n}\r\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\n\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * MD2Parser provides a parser for the MD2 data type.\r\n */\r\nclass MD2Parser extends ParserBase\r\n{\r\n\tpublic static FPS:number /*int*/ = 6;\r\n\r\n\tprivate _clipNodes:Object = new Object();\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _parsedHeader:boolean;\r\n\tprivate _parsedUV:boolean;\r\n\tprivate _parsedFaces:boolean;\r\n\tprivate _parsedFrames:boolean;\r\n\r\n\tprivate _ident:number /*uint*/;\r\n\tprivate _version:number /*uint*/;\r\n\tprivate _skinWidth:number /*uint*/;\r\n\tprivate _skinHeight:number /*uint*/;\r\n\t//private _frameSize : number /*uint*/;\r\n\tprivate _numSkins:number /*uint*/;\r\n\tprivate _numVertices:number /*uint*/;\r\n\tprivate _numST:number /*uint*/;\r\n\tprivate _numTris:number /*uint*/;\r\n\t//private _numGlCmds : number /*uint*/;\r\n\tprivate _numFrames:number /*uint*/;\r\n\tprivate _offsetSkins:number /*uint*/;\r\n\tprivate _offsetST:number /*uint*/;\r\n\tprivate _offsetTris:number /*uint*/;\r\n\tprivate _offsetFrames:number /*uint*/;\r\n\t//private _offsetGlCmds : number /*uint*/;\r\n\tprivate _offsetEnd:number /*uint*/;\r\n\r\n\tprivate _uvIndices:Array<number>;\r\n\tprivate _indices:Array<number> /*uint*/;\r\n\tprivate _vertIndices:Array<number>;\r\n\r\n\t// the current subgeom being built\r\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\tprivate _firstSubGeom:TriangleSubGeometry;\r\n\tprivate _uvs:Array<number>;\r\n\tprivate _finalUV:Array<number>;\r\n\r\n\tprivate _materialNames:Array<string>;\r\n\tprivate _textureType:string;\r\n\tprivate _ignoreTexturePath:boolean;\r\n\tprivate _mesh:Mesh;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate materialFinal:boolean = false;\r\n\tprivate geoCreated:boolean = false;\r\n\r\n\t/**\r\n\t * Creates a new MD2Parser object.\r\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\r\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\r\n\t */\r\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\t\tthis._textureType = textureType;\r\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md2\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.assets.length != 1)\r\n\t\t\treturn;\r\n\r\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\r\n\r\n\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\tmaterial.name = this._mesh.material.name;\r\n\t\t\tthis._mesh.material = material;\r\n\t\t\tthis._pFinalizeAsset(material);\r\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t}\r\n\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// apply system default\r\n\t\tif (this.materialMode < 2) {\r\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t} else {\r\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t}\r\n\r\n\t\t//add to the content property\r\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\tthis.materialFinal = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\r\n\t\t\t// Reset bytearray read position (which may have been\r\n\t\t\t// moved forward by the supportsData() function.)\r\n\t\t\tthis._byteData.position = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\tif (!this._parsedHeader) {\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\r\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\r\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\r\n\t\t\t\tthis._geometry = new Geometry();\r\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\r\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\r\n\r\n\t\t\t\t// Parse header and decompress body\r\n\t\t\t\tthis.parseHeader();\r\n\t\t\t\tthis.parseMaterialNames();\r\n\t\t\t} else if (!this._parsedUV) {\r\n\t\t\t\tthis.parseUV();\r\n\t\t\t} else if (!this._parsedFaces) {\r\n\t\t\t\tthis.parseFaces();\r\n\t\t\t} else if (!this._parsedFrames) {\r\n\t\t\t\tthis.parseFrames();\r\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t} else if (!this.geoCreated) {\r\n\t\t\t\tthis.geoCreated = true;\r\n\t\t\t\t//create default subgeometry\r\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\r\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\r\n\t\t\t\tthis._mesh.name = \"\";\r\n\t\t\t\tif (this.materialFinal) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads in all that MD2 Header data that is declared as private variables.\r\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\r\n\t */\r\n\tprivate parseHeader()\r\n\t{\r\n\t\tthis._ident = this._byteData.readInt();\r\n\t\tthis._version = this._byteData.readInt();\r\n\t\tthis._skinWidth = this._byteData.readInt();\r\n\t\tthis._skinHeight = this._byteData.readInt();\r\n\t\t//skip this._frameSize\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numSkins = this._byteData.readInt();\r\n\t\tthis._numVertices = this._byteData.readInt();\r\n\t\tthis._numST = this._byteData.readInt();\r\n\t\tthis._numTris = this._byteData.readInt();\r\n\t\t//skip this._numGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numFrames = this._byteData.readInt();\r\n\t\tthis._offsetSkins = this._byteData.readInt();\r\n\t\tthis._offsetST = this._byteData.readInt();\r\n\t\tthis._offsetTris = this._byteData.readInt();\r\n\t\tthis._offsetFrames = this._byteData.readInt();\r\n\t\t//skip this._offsetGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._offsetEnd = this._byteData.readInt();\r\n\r\n\t\tthis._parsedHeader = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the file names for the materials.\r\n\t */\r\n\tprivate parseMaterialNames()\r\n\t{\r\n\t\tvar url:string;\r\n\t\tvar name:string;\r\n\t\tvar extIndex:number /*int*/;\r\n\t\tvar slashIndex:number /*int*/;\r\n\t\tthis._materialNames = new Array<string>();\r\n\t\tthis._byteData.position = this._offsetSkins;\r\n\r\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\r\n\t\t\tname = this._byteData.readUTFBytes(64);\r\n\t\t\tname = name.replace(regExp, \"\");\r\n\t\t\textIndex = name.lastIndexOf(\".\");\r\n\t\t\tif (this._ignoreTexturePath)\r\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\r\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\r\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\r\n\t\t\t\turl = name + \".\" + this._textureType;\r\n\t\t\t} else {\r\n\t\t\t\turl = name;\r\n\t\t\t}\r\n\r\n\t\t\tthis._materialNames[i] = name;\r\n\r\n\t\t\t// only support 1 skin TODO: really?\r\n\t\t\tif (this.dependencies.length == 0)\r\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\r\n\t\t}\r\n\r\n\t\tif (this._materialNames.length > 0)\r\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\r\n\t\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the uv data for the mesh.\r\n\t */\r\n\tprivate parseUV()\r\n\t{\r\n\t\tvar j:number /*uint*/ = 0;\r\n\r\n\t\tthis._uvs = new Array<number>(this._numST*2);\r\n\t\tthis._byteData.position = this._offsetST;\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\r\n\t\t}\r\n\r\n\t\tthis._parsedUV = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses unique indices for the faces.\r\n\t */\r\n\tprivate parseFaces()\r\n\t{\r\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\r\n\t\tthis._vertIndices = new Array<number>();\r\n\t\tthis._uvIndices = new Array<number>();\r\n\t\tthis._indices = new Array<number>() /*uint*/;\r\n\r\n\t\tthis._byteData.position = this._offsetTris;\r\n\r\n\t\tfor (i = 0; i < this._numTris; i++) {\r\n\t\t\t//collect vertex indices\r\n\t\t\ta = this._byteData.readUnsignedShort();\r\n\t\t\tb = this._byteData.readUnsignedShort();\r\n\t\t\tc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\t//collect uv indices\r\n\t\t\tta = this._byteData.readUnsignedShort();\r\n\t\t\ttb = this._byteData.readUnsignedShort();\r\n\t\t\ttc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis.addIndex(a, ta);\r\n\t\t\tthis.addIndex(b, tb);\r\n\t\t\tthis.addIndex(c, tc);\r\n\t\t}\r\n\r\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\r\n\t\tthis._finalUV = new Array<number>(len*2);\r\n\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\r\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\r\n\t\t}\r\n\r\n\t\tthis._parsedFaces = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\r\n\t * corresponding vertex and uv data in the correct location.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t */\r\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\r\n\t{\r\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\r\n\r\n\t\tif (index == -1) {\r\n\t\t\tthis._indices.push(this._vertIndices.length);\r\n\t\t\tthis._vertIndices.push(vertexIndex);\r\n\t\t\tthis._uvIndices.push(uvIndex);\r\n\t\t} else\r\n\t\t\tthis._indices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\r\n\t */\r\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\r\n\r\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\r\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses all the frame geometries.\r\n\t */\r\n\tprivate parseFrames()\r\n\t{\r\n\t\tvar sx:number, sy:number, sz:number;\r\n\t\tvar tx:number, ty:number, tz:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\r\n\t\tvar fvertices:Array<number>;\r\n\t\tvar tvertices:Array<number>;\r\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\r\n\t\t//var ch : number /*uint*/;\r\n\t\tvar name:string = \"\";\r\n\t\tvar prevClip:VertexClipNode = null;\r\n\r\n\t\tthis._byteData.position = this._offsetFrames;\r\n\r\n\t\tfor (i = 0; i < this._numFrames; i++) {\r\n\r\n\t\t\ttvertices = new Array<number>();\r\n\t\t\tfvertices = new Array<number>(vertLen*3);\r\n\r\n\t\t\tsx = this._byteData.readFloat();\r\n\t\t\tsy = this._byteData.readFloat();\r\n\t\t\tsz = this._byteData.readFloat();\r\n\r\n\t\t\ttx = this._byteData.readFloat();\r\n\t\t\tty = this._byteData.readFloat();\r\n\t\t\ttz = this._byteData.readFloat();\r\n\r\n\t\t\tname = this.readFrameName();\r\n\r\n\t\t\t// Note, the extra data.position++ in the for loop is there\r\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\r\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\r\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\r\n\r\n\t\t\tk = 0;\r\n\t\t\tfor (j = 0; j < vertLen; j++) {\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\r\n\t\t\t}\r\n\r\n\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\r\n\t\t\tif (this._firstSubGeom == null)\r\n\t\t\t\tthis._firstSubGeom = subGeom;\r\n\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tgeometry.addSubGeometry(subGeom);\r\n\r\n\t\t\tsubGeom.updateIndices(this._indices);\r\n\t\t\tsubGeom.updatePositions(fvertices);\r\n\t\t\tsubGeom.updateUVs(this._finalUV);\r\n\t\t\tsubGeom.vertexNormals;\r\n\t\t\tsubGeom.vertexTangents;\r\n\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\tsubGeom.autoDeriveTangents = false;\r\n\r\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\r\n\r\n\t\t\tif (!clip) {\r\n\t\t\t\t// If another sequence was parsed before this one, starting\r\n\t\t\t\t// a new state means the previous one is complete and can\r\n\t\t\t\t// hence be finalized.\r\n\t\t\t\tif (prevClip) {\r\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclip = new VertexClipNode();\r\n\t\t\t\tclip.name = name;\r\n\t\t\t\tclip.stitchFinalFrame = true;\r\n\r\n\t\t\t\tthis._clipNodes[name] = clip;\r\n\r\n\t\t\t\tprevClip = clip;\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\r\n\t\t}\r\n\r\n\t\t// Finalize the last state\r\n\t\tif (prevClip) {\r\n\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t}\r\n\r\n\t\t// Force this._pFinalizeAsset() to decide name\r\n\t\tthis._pFinalizeAsset(this._animationSet);\r\n\r\n\t\tthis._parsedFrames = true;\r\n\t}\r\n\r\n\tprivate readFrameName():string\r\n\t{\r\n\t\tvar name:string = \"\";\r\n\t\tvar k:number /*uint*/ = 0;\r\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\r\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\r\n\r\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\r\n\t\t\t\tname += String.fromCharCode(ch);\r\n\r\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\r\n\t\t\t\tk++;\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n}\r\n\r\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\n\r\n/**\r\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5AnimParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\r\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\r\n\r\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\r\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\r\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\r\n\tpublic static FRAME_TOKEN:string = \"frame\";\r\n\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _frameRate:number /*int*/;\r\n\tprivate _numFrames:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numAnimatedComponents:number /*int*/;\r\n\r\n\tprivate _hierarchy:Array<HierarchyData>;\r\n\tprivate _bounds:Array<BoundsData>;\r\n\tprivate _frameData:Array<FrameData>;\r\n\tprivate _baseFrameData:Array<BaseFrameData>;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\tprivate _clip:SkeletonClipNode;\r\n\r\n\t/**\r\n\t * Creates a new MD5AnimParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\t\tvar t1:Quaternion = new Quaternion();\r\n\t\tvar t2:Quaternion = new Quaternion();\r\n\r\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\r\n\r\n\t\tthis._rotationQuat.multiply(t2, t1);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tthis._rotationQuat.multiply(t2, t1);\r\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5anim\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"\":\r\n\t\t\t\t\t// can occur at the end of a file\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\r\n\t\t\t\t\tthis._numFrames = this.getNextInt();\r\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\r\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\r\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\r\n\t\t\t\t\tthis._frameRate = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\r\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\r\n\t\t\t\t\tthis.parseHierarchy();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\r\n\t\t\t\t\tthis.parseBounds();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseBaseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis._clip = new SkeletonClipNode();\r\n\t\t\t\tthis.translateClip();\r\n\t\t\t\tthis._pFinalizeAsset(this._clip);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts all key frame data to an SkinnedAnimationSequence.\r\n\t */\r\n\tprivate translateClip():void\r\n\t{\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\r\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a single key frame data to a SkeletonPose.\r\n\t * @param frameData The actual frame data.\r\n\t * @return A SkeletonPose containing the frame data's pose.\r\n\t */\r\n\tprivate translatePose(frameData:FrameData):SkeletonPose\r\n\t{\r\n\t\tvar hierarchy:HierarchyData;\r\n\t\tvar pose:JointPose;\r\n\t\tvar base:BaseFrameData;\r\n\t\tvar flags:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar translate:Vector3D = new Vector3D();\r\n\t\tvar orientation:Quaternion = new Quaternion();\r\n\t\tvar components:Array<number> = frameData.components;\r\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\r\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\r\n\t\t\tj = 0;\r\n\t\t\tpose = new JointPose();\r\n\t\t\thierarchy = this._hierarchy[i];\r\n\t\t\tbase = this._baseFrameData[i];\r\n\t\t\tflags = hierarchy.flags;\r\n\t\t\ttranslate.x = base.position.x;\r\n\t\t\ttranslate.y = base.position.y;\r\n\t\t\ttranslate.z = base.position.z;\r\n\t\t\torientation.x = base.orientation.x;\r\n\t\t\torientation.y = base.orientation.y;\r\n\t\t\torientation.z = base.orientation.z;\r\n\r\n\t\t\tif (flags & 1)\r\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 2)\r\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 4)\r\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 8)\r\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 16)\r\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 32)\r\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\r\n\r\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\r\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\r\n\r\n\t\t\tif (hierarchy.parentIndex < 0) {\r\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\r\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\r\n\t\t\t} else {\r\n\t\t\t\tpose.orientation.copyFrom(orientation);\r\n\t\t\t\tpose.translation.x = translate.x;\r\n\t\t\t\tpose.translation.y = translate.y;\r\n\t\t\t\tpose.translation.z = translate.z;\r\n\t\t\t}\r\n\t\t\tpose.orientation.y = -pose.orientation.y;\r\n\t\t\tpose.orientation.z = -pose.orientation.z;\r\n\t\t\tpose.translation.x = -pose.translation.x;\r\n\r\n\t\t\tjointPoses[i] = pose;\r\n\t\t}\r\n\r\n\t\treturn skelPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's hierarchy data.\r\n\t */\r\n\tprivate parseHierarchy():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:HierarchyData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new HierarchyData();\r\n\t\t\tdata.name = this.parseLiteralstring();\r\n\t\t\tdata.parentIndex = this.getNextInt();\r\n\t\t\tdata.flags = this.getNextInt();\r\n\t\t\tdata.startIndex = this.getNextInt();\r\n\t\t\tthis._hierarchy[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses frame bounds.\r\n\t */\r\n\tprivate parseBounds():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BoundsData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BoundsData();\r\n\t\t\tdata.min = this.parseVector3D();\r\n\t\t\tdata.max = this.parseVector3D();\r\n\t\t\tthis._bounds[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the base frame.\r\n\t */\r\n\tprivate parseBaseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BaseFrameData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BaseFrameData();\r\n\t\t\tdata.position = this.parseVector3D();\r\n\t\t\tdata.orientation = this.parseQuaternion();\r\n\t\t\tthis._baseFrameData[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single frame.\r\n\t */\r\n\tprivate parseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:FrameData;\r\n\t\tvar token:string;\r\n\t\tvar frameIndex:number /*int*/;\r\n\r\n\t\tframeIndex = this.getNextInt();\r\n\r\n\t\ttoken = this.getNextToken();\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new FrameData();\r\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\r\n\r\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\r\n\t\t\t\tdata.components[i] = this.getNextNumber();\r\n\r\n\t\t\tthis._frameData[frameIndex] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex == this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = this.getNextNumber();\r\n\t\tquat.z = this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn quat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5AnimParser;\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass BaseFrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic position:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic orientation:Quaternion;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BoundsData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic min:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic max:Vector3D;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass FrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic index:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic components:Array<number>;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass HierarchyData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic name:string;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic parentIndex:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic flags:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic startIndex:number /*int*/;\r\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\n\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\n\r\n// todo: create animation system, parse skeleton\r\n\r\n/**\r\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5MeshParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\tpublic static JOINTS_TOKEN:string = \"joints\";\r\n\tpublic static MESH_TOKEN:string = \"mesh\";\r\n\r\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\r\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\r\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\r\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\r\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\r\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\r\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numMeshes:number /*int*/;\r\n\r\n\tprivate _mesh:Mesh;\r\n\tprivate _shaders:Array<string>;\r\n\r\n\tprivate _maxJointCount:number /*int*/;\r\n\tprivate _meshData:Array<MeshData>;\r\n\tprivate _bindPoses:Array<Matrix3D>;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate _skeleton:Skeleton;\r\n\tprivate _animationSet:SkeletonAnimationSet;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\r\n\t/**\r\n\t * Creates a new MD5MeshParser object.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\r\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tvar quat:Quaternion = new Quaternion();\r\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5mesh\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\r\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\r\n\t\t\t\t\tthis.parseJoints();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\r\n\t\t\t\t\tthis.parseMesh();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis.calculateMaxJointCount();\r\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\r\n\r\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\r\n\t\t\t\tthis._geometry = this._mesh.geometry;\r\n\r\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\r\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\r\n\r\n\t\t\t\t//_geometry.animation = _animation;\r\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\r\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\r\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate calculateMaxJointCount():void\r\n\t{\r\n\t\tthis._maxJointCount = 0;\r\n\r\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\r\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\r\n\t\t\tvar meshData:MeshData = this._meshData[i];\r\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\r\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\r\n\r\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\r\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\r\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\r\n\t\t\t\tif (totalJoints > this._maxJointCount)\r\n\t\t\t\t\tthis._maxJointCount = totalJoints;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\r\n\t{\r\n\t\tvar start:number /*int*/ = vertex.startWeight;\r\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\r\n\t\tvar count:number /*int*/ = 0;\r\n\t\tvar weight:number;\r\n\r\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\r\n\t\t\tweight = weights[i].bias;\r\n\t\t\tif (weight == 0)\r\n\t\t\t\t++count;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's joints.\r\n\t */\r\n\tprivate parseJoints():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar quat:Quaternion;\r\n\t\tvar i:number /*int*/ = 0;\r\n\t\tvar token:string = this.getNextToken();\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tthis._skeleton = new Skeleton();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.name = this.parseLiteralstring();\r\n\t\t\tjoint.parentIndex = this.getNextInt();\r\n\t\t\tpos = this.parseVector3D();\r\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\r\n\t\t\tquat = this.parseQuaternion();\r\n\r\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\r\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\r\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\r\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\r\n\t\t\tinv.invert();\r\n\t\t\tjoint.inverseBindPose = inv.rawData;\r\n\r\n\t\t\tthis._skeleton.joints[i++] = joint;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the mesh geometry.\r\n\t */\r\n\tprivate parseMesh():void\r\n\t{\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar ch:string;\r\n\t\tvar vertexData:Array<VertexData>;\r\n\t\tvar weights:Array<JointData>;\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tif (this._shaders == null)\r\n\t\t\tthis._shaders = new Array<string>();\r\n\r\n\t\twhile (ch != \"}\") {\r\n\t\t\tch = this.getNextToken();\r\n\t\t\tswitch (ch) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\r\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\r\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\r\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\r\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\r\n\t\t\t\t\tthis.parseVertex(vertexData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\r\n\t\t\t\t\tthis.parseTri(indices);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\r\n\t\t\t\t\tthis.parseJoint(weights);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._meshData == null)\r\n\t\t\tthis._meshData = new Array<MeshData>();\r\n\r\n\t\tvar i:number /*uint*/ = this._meshData.length;\r\n\t\tthis._meshData[i] = new MeshData();\r\n\t\tthis._meshData[i].vertexData = vertexData;\r\n\t\tthis._meshData[i].weightData = weights;\r\n\t\tthis._meshData[i].indices = indices;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the mesh data to a SkinnedSub instance.\r\n\t * @param vertexData The mesh's vertices.\r\n\t * @param weights The joint weights per vertex.\r\n\t * @param indices The indices for the faces.\r\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\r\n\t */\r\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\r\n\t{\r\n\t\tvar len:number /*int*/ = vertexData.length;\r\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\r\n\t\tvar vertex:VertexData;\r\n\t\tvar weight:JointData;\r\n\t\tvar bindPose:Matrix3D;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\r\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\r\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\r\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar l:number /*int*/ = 0;\r\n\t\tvar nonZeroWeights:number /*int*/;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\r\n\t\t\tvertex = vertexData[i];\r\n\t\t\tv1 = vertex.index*3;\r\n\t\t\tv2 = v1 + 1;\r\n\t\t\tv3 = v1 + 2;\r\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\r\n\r\n\t\t\tnonZeroWeights = 0;\r\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\r\n\t\t\t\tweight = weights[vertex.startWeight + j];\r\n\t\t\t\tif (weight.bias > 0) {\r\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\r\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\r\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\r\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\r\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\r\n\r\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\r\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\r\n\t\t\t\t\tjointWeights[l++] = weight.bias;\r\n\t\t\t\t\t++nonZeroWeights;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\r\n\t\t\t\tjointIndices[l] = 0;\r\n\t\t\t\tjointWeights[l++] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tv1 = vertex.index << 1;\r\n\t\t\tuvs[v1++] = vertex.s;\r\n\t\t\tuvs[v1] = vertex.t;\r\n\t\t}\r\n\r\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\r\n\t\tsubGeom.updateIndices(indices);\r\n\t\tsubGeom.updatePositions(vertices);\r\n\t\tsubGeom.updateUVs(uvs);\r\n\t\tsubGeom.updateJointIndices(jointIndices);\r\n\t\tsubGeom.updateJointWeights(jointWeights);\r\n\t\t// cause explicit updates\r\n\t\tsubGeom.vertexNormals;\r\n\t\tsubGeom.vertexTangents;\r\n\t\t// turn auto updates off because they may be animated and set explicitly\r\n\t\tsubGeom.autoDeriveTangents = false;\r\n\t\tsubGeom.autoDeriveNormals = false;\r\n\r\n\t\treturn subGeom;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve the next triplet of vertex indices that form a face.\r\n\t * @param indices The index list in which to store the read data.\r\n\t */\r\n\tprivate parseTri(indices:Array<number> /*uint*/):void\r\n\t{\r\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\r\n\t\tindices[index] = this.getNextInt();\r\n\t\tindices[index + 1] = this.getNextInt();\r\n\t\tindices[index + 2] = this.getNextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a new joint data set for a single joint.\r\n\t * @param weights the target list to contain the weight data.\r\n\t */\r\n\tprivate parseJoint(weights:Array<JointData>):void\r\n\t{\r\n\t\tvar weight:JointData = new JointData();\r\n\t\tweight.index = this.getNextInt();\r\n\t\tweight.joint = this.getNextInt();\r\n\t\tweight.bias = this.getNextNumber();\r\n\t\tweight.pos = this.parseVector3D();\r\n\t\tweights[weight.index] = weight;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the data for a single vertex.\r\n\t * @param vertexData The list to contain the vertex data.\r\n\t */\r\n\tprivate parseVertex(vertexData:Array<VertexData>):void\r\n\t{\r\n\t\tvar vertex:VertexData = new VertexData();\r\n\t\tvertex.index = this.getNextInt();\r\n\t\tthis.parseUV(vertex);\r\n\t\tvertex.startWeight = this.getNextInt();\r\n\t\tvertex.countWeight = this.getNextInt();\r\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\r\n\t\tvertexData[vertex.index] = vertex;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinate.\r\n\t * @param vertexData The vertexData to contain the UV coordinates.\r\n\t */\r\n\tprivate parseUV(vertexData:VertexData):void\r\n\t{\r\n\t\tvar ch:string = this.getNextToken();\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvertexData.s = this.getNextNumber();\r\n\t\tvertexData.t = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex >= this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = -this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = -this.getNextNumber();\r\n\t\tquat.z = -this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\tvar rotQuat:Quaternion = new Quaternion();\r\n\t\trotQuat.multiply(this._rotationQuat, quat);\r\n\t\treturn rotQuat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5MeshParser;\r\n\r\n\r\nclass VertexData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic s:number;\r\n\tpublic t:number;\r\n\tpublic startWeight:number /*int*/;\r\n\tpublic countWeight:number /*int*/;\r\n}\r\n\r\nclass JointData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic joint:number /*int*/;\r\n\tpublic bias:number;\r\n\tpublic pos:Vector3D;\r\n}\r\n\r\nclass MeshData\r\n{\r\n\tpublic vertexData:Array<VertexData>;\r\n\tpublic weightData:Array<JointData>;\r\n\tpublic indices:Array<number> /*uint*/;\r\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * Max3DSParser provides a parser for the 3ds data type.\r\n */\r\nclass Max3DSParser extends ParserBase\r\n{\r\n\tprivate _byteData:ByteArray;\r\n\r\n\tprivate _textures:Object;\r\n\tprivate _materials:Object;\r\n\tprivate _unfinalized_objects:Object;\r\n\r\n\tprivate _cur_obj_end:number;\r\n\tprivate _cur_obj:ObjectVO;\r\n\r\n\tprivate _cur_mat_end:number;\r\n\tprivate _cur_mat:MaterialVO;\r\n\tprivate _useSmoothingGroups:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>Max3DSParser</code> object.\r\n\t *\r\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\r\n\t */\r\n\tconstructor(useSmoothingGroups:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"3ds\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar ba:ByteArray;\r\n\r\n\t\tba = ParserUtils.toByteArray(data);\r\n\t\tif (ba) {\r\n\t\t\tba.position = 0;\r\n\t\t\tif (ba.readShort() == 0x4d4d)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\r\n\t\t\t\tvar tex:TextureVO;\r\n\r\n\t\t\t\ttex = this._textures[resourceDependency.id];\r\n\t\t\t\ttex.texture = <Texture2DBase> asset;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// TODO: Implement\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._byteData) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._byteData.position = 0;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\tthis._textures = {};\r\n\t\t\tthis._materials = {};\r\n\t\t\tthis._unfinalized_objects = {};\r\n\t\t}\r\n\r\n\t\t// TODO: With this construct, the loop will run no-op for as long\r\n\t\t// as there is time once file has finished reading. Consider a nice\r\n\t\t// way to stop loop when byte array is empty, without putting it in\r\n\t\t// the while-conditional, which will prevent finalizations from\r\n\t\t// happening after the last chunk.\r\n\t\twhile (this._pHasTime()) {\r\n\r\n\t\t\t// If we are currently working on an object, and the most recent chunk was\r\n\t\t\t// the last one in that object, finalize the current object.\r\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\r\n\t\t\t\tthis.finalizeCurrentMaterial();\r\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\r\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\r\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\r\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\r\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\r\n\t\t\t\tthis._cur_obj = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\r\n\t\t\t\tvar cid:number /*uint*/;\r\n\t\t\t\tvar len:number /*uint*/;\r\n\t\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\t\tswitch (cid) {\r\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\r\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\r\n\t\t\t\t\tcase 0xB000: // KEYF3DS\r\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\r\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\r\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\r\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\r\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\r\n\t\t\t\t\t\tthis._cur_mat_end = end;\r\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\r\n\t\t\t\t\t\tthis._cur_obj_end = end;\r\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\r\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\r\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\r\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\r\n\t\t\t\t\t\tthis._cur_obj.type = AssetType.MESH;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\r\n\t\t\t\t\t\tthis.parseVertexList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\r\n\t\t\t\t\t\tthis.parseFaceList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\r\n\t\t\t\t\t\tthis.parseUVList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4130: // Face materials\r\n\t\t\t\t\t\tthis.parseFaceMaterialList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4160: // Transform\r\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\r\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4150: // Smoothing groups\r\n\t\t\t\t\t\tthis.parseSmoothingGroups();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Skip this (unknown) chunk\r\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pause parsing if there were any dependencies found during this\r\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\r\n\t\t\t\t// retrieved at this time.)\r\n\t\t\t\tif (this.dependencies.length) {\r\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// More parsing is required if the entire byte array has not yet\r\n\t\t// been read, or if there is a currently non-finalized object in\r\n\t\t// the pipeline.\r\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\r\n\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t} else {\r\n\t\t\tvar name:string;\r\n\r\n\t\t\t// Finalize any remaining objects before ending.\r\n\t\t\tfor (name in this._unfinalized_objects) {\r\n\t\t\t\tvar obj:DisplayObjectContainer;\r\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\r\n\t\t\t\tif (obj) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate parseMaterial():MaterialVO\r\n\t{\r\n\t\tvar mat:MaterialVO;\r\n\r\n\t\tmat = new MaterialVO();\r\n\r\n\t\twhile (this._byteData.position < this._cur_mat_end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA000: // Material name\r\n\t\t\t\t\tmat.name = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA010: // Ambient color\r\n\t\t\t\t\tmat.ambientColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA020: // Diffuse color\r\n\t\t\t\t\tmat.diffuseColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA030: // Specular color\r\n\t\t\t\t\tmat.specularColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\r\n\t\t\t\t\tmat.twoSided = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA200: // Main (color) texture\r\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA204: // Specular map\r\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position = end;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\t}\r\n\r\n\tprivate parseTexture(end:number /*uint*/):TextureVO\r\n\t{\r\n\t\tvar tex:TextureVO;\r\n\r\n\t\ttex = new TextureVO();\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA300:\r\n\t\t\t\t\ttex.url = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Skip this unknown texture sub-chunk\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._textures[tex.url] = tex;\r\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\r\n\r\n\t\treturn tex;\r\n\t}\r\n\r\n\tprivate parseVertexList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.verts.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\tx = this._byteData.readFloat();\r\n\t\t\ty = this._byteData.readFloat();\r\n\t\t\tz = this._byteData.readFloat();\r\n\r\n\t\t\tthis._cur_obj.verts[i++] = x;\r\n\t\t\tthis._cur_obj.verts[i++] = z;\r\n\t\t\tthis._cur_obj.verts[i++] = y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.indices.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\r\n\r\n\t\t\ti0 = this._byteData.readUnsignedShort();\r\n\t\t\ti1 = this._byteData.readUnsignedShort();\r\n\t\t\ti2 = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis._cur_obj.indices[i++] = i0;\r\n\t\t\tthis._cur_obj.indices[i++] = i2;\r\n\t\t\tthis._cur_obj.indices[i++] = i1;\r\n\r\n\t\t\t// Skip \"face info\", irrelevant in Away3D\r\n\t\t\tthis._byteData.position += 2;\r\n\t\t}\r\n\r\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\r\n\t}\r\n\r\n\tprivate parseSmoothingGroups():void\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\r\n\t\tvar i:number /*uint*/ = 0;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseUVList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.uvs.length;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\r\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceMaterialList():void\r\n\t{\r\n\t\tvar mat:string;\r\n\t\tvar count:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar faces:Array<number> /*uint*/;\r\n\r\n\t\tmat = this.readNulTermstring();\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\r\n\t\tfaces = new Array<number>(count) /*uint*/;\r\n\t\ti = 0;\r\n\t\twhile (i < faces.length)\r\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\r\n\r\n\t\tthis._cur_obj.materials.push(mat);\r\n\t\tthis._cur_obj.materialFaces[mat] = faces;\r\n\t}\r\n\r\n\tprivate parseObjectAnimation(end:number):void\r\n\t{\r\n\t\tvar vo:ObjectVO;\r\n\t\tvar obj:DisplayObjectContainer;\r\n\t\tvar pivot:Vector3D;\r\n\t\tvar name:string;\r\n\t\tvar hier:number /*uint*/;\r\n\r\n\t\t// Pivot defaults to origin\r\n\t\tpivot = new Vector3D;\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xb010: // Name/hierarchy\r\n\t\t\t\t\tname = this.readNulTermstring();\r\n\t\t\t\t\tthis._byteData.position += 4;\r\n\t\t\t\t\thier = this._byteData.readShort();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xb013: // Pivot\r\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\r\n\t\t// and will be ignored in this version of the parser\r\n\t\t// TODO: Implement containers in 3DS parser.\r\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\r\n\t\t\tvo = this._unfinalized_objects[name];\r\n\t\t\tobj = this.constructObject(vo, pivot);\r\n\r\n\t\t\tif (obj) {\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tdelete this._unfinalized_objects[name];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\r\n\t{\r\n\t\tif (obj.type == AssetType.MESH) {\r\n\t\t\tvar i:number /*uint*/;\r\n\t\t\tvar sub:TriangleSubGeometry;\r\n\t\t\tvar geom:Geometry;\r\n\t\t\tvar mat:MaterialBase;\r\n\t\t\tvar mesh:Mesh;\r\n\t\t\tvar mtx:Matrix3D;\r\n\t\t\tvar vertices:Array<VertexVO>;\r\n\t\t\tvar faces:Array<FaceVO>;\r\n\r\n\t\t\tif (obj.materials.length > 1)\r\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\r\n\r\n\t\t\t// Ignore empty objects\r\n\t\t\tif (!obj.indices || obj.indices.length == 0)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\r\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\r\n\r\n\t\t\tthis.prepareData(vertices, faces, obj);\r\n\r\n\t\t\tif (this._useSmoothingGroups)\r\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\r\n\r\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\r\n\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\r\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\r\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\r\n\t\t\t}\r\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\r\n\r\n\t\t\tfor (i = 0; i < faces.length; i++) {\r\n\t\t\t\tobj.indices[i*3] = faces[i].a;\r\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\r\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\r\n\t\t\t}\r\n\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\r\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\r\n\t\t\t\t// will be nonsense and should be skipped.\r\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\r\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\r\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tgeom = new Geometry();\r\n\r\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\r\n\t\t\t// and add them to geometry.\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.updateIndices(obj.indices);\r\n\t\t\tsub.updatePositions(obj.verts);\r\n\t\t\tsub.updateUVs(obj.uvs);\r\n\r\n\t\t\tgeom.addSubGeometry(sub);\r\n\r\n\t\t\tif (obj.materials.length > 0) {\r\n\t\t\t\tvar mname:string;\r\n\t\t\t\tmname = obj.materials[0];\r\n\t\t\t\tmat = this._materials[mname].material;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply pivot translation to geometry if a pivot was\r\n\t\t\t// found while parsing the keyframe chunk earlier.\r\n\t\t\tif (pivot) {\r\n\t\t\t\tif (obj.transform) {\r\n\t\t\t\t\t// If a transform was found while parsing the\r\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\r\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\r\n\t\t\t\t\tdat[12] = 0;\r\n\t\t\t\t\tdat[13] = 0;\r\n\t\t\t\t\tdat[14] = 0;\r\n\t\t\t\t\tmtx = new Matrix3D(dat);\r\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpivot.scaleBy(-1);\r\n\r\n\t\t\t\tmtx = new Matrix3D();\r\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Apply transformation to geometry if a transformation\r\n\t\t\t// was found while parsing the object chunk earlier.\r\n\t\t\tif (obj.transform) {\r\n\t\t\t\tmtx = new Matrix3D(obj.transform);\r\n\t\t\t\tmtx.invert();\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\r\n\t\t\t// which will no longer be modified after this point.\r\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\r\n\r\n\t\t\t// Build mesh and return it\r\n\t\t\tmesh = new Mesh(geom, mat);\r\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\r\n\t\t// If reached, unknown\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\r\n\t{\r\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar len:number /*int*/ = obj.verts.length;\r\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\r\n\t\t\tvar v:VertexVO = new VertexVO;\r\n\t\t\tv.x = obj.verts[i++];\r\n\t\t\tv.y = obj.verts[i++];\r\n\t\t\tv.z = obj.verts[i++];\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\tv.u = obj.uvs[j++];\r\n\t\t\t\tv.v = obj.uvs[j++];\r\n\t\t\t}\r\n\t\t\tvertices[k++] = v;\r\n\t\t}\r\n\t\tlen = obj.indices.length;\r\n\t\tfor (i = 0, k = 0; i < len;) {\r\n\t\t\tvar f:FaceVO = new FaceVO();\r\n\t\t\tf.a = obj.indices[i++];\r\n\t\t\tf.b = obj.indices[i++];\r\n\t\t\tf.c = obj.indices[i++];\r\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\r\n\t\t\tfaces[k++] = f;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\r\n\t{\r\n\t\t// clone vertices according to following rule:\r\n\t\t// clone if vertex's in faces from groups 1+2 and 3\r\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\r\n\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar l:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar numVerts:number /*uint*/ = vertices.length;\r\n\t\tvar numFaces:number /*uint*/ = faces.length;\r\n\r\n\t\t// extract groups data for vertices\r\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++)\r\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tvar face:FaceVO = faces[i];\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\r\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\r\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\r\n\t\t\t\t\tif ((group & groups[k]) > 0) {\r\n\t\t\t\t\t\tgroup |= groups[k];\r\n\t\t\t\t\t\tgroups.splice(k, 1);\r\n\t\t\t\t\t\tk = groups.length - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// clone vertices\r\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++) {\r\n\t\t\tif ((len = vGroups[i].length) < 1)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\r\n\t\t\tvClones[i] = clones;\r\n\t\t\tclones[0] = i;\r\n\t\t\tvar v0:VertexVO = vertices[i];\r\n\t\t\tfor (j = 1; j < len; j++) {\r\n\t\t\t\tvar v1:VertexVO = new VertexVO;\r\n\t\t\t\tv1.x = v0.x;\r\n\t\t\t\tv1.y = v0.y;\r\n\t\t\t\tv1.z = v0.z;\r\n\t\t\t\tv1.u = v0.u;\r\n\t\t\t\tv1.v = v0.v;\r\n\t\t\t\tclones[j] = vertices.length;\r\n\t\t\t\tvertices.push(v1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tnumVerts = vertices.length;\r\n\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tface = faces[i];\r\n\t\t\tgroup = face.smoothGroup;\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\r\n\t\t\t\tgroups = vGroups[k];\r\n\t\t\t\tlen = groups.length;\r\n\t\t\t\tclones = vClones[k];\r\n\t\t\t\tfor (l = 0; l < len; l++) {\r\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\r\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\r\n\t\t\t\t\t\tif (group == 0) {\r\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\r\n\t\t\t\t\t\t\tgroups.splice(l, 1);\r\n\t\t\t\t\t\t\tclones.splice(l, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (j == 0)\r\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\r\n\t\t\t\t\t\t\tface.b = index; else\r\n\t\t\t\t\t\t\tface.c = index;\r\n\t\t\t\t\t\tl = len;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate finalizeCurrentMaterial():void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\r\n\t\tif (this._cur_mat.colorMap)\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\r\n\t\telse\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\r\n\r\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\r\n\t\tmat.specularColor = this._cur_mat.specularColor;\r\n\r\n\t\tif (this.materialMode >= 2)\r\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\r\n\r\n\t\tmat.bothSides = this._cur_mat.twoSided;\r\n\r\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\r\n\r\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\r\n\t\tthis._cur_mat.material = mat;\r\n\r\n\t\tthis._cur_mat = null;\r\n\t}\r\n\r\n\tprivate readNulTermstring():string\r\n\t{\r\n\t\tvar chr:number /*int*/;\r\n\t\tvar str:string = \"\";\r\n\r\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\r\n\t\t\tstr += String.fromCharCode(chr);\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\tprivate readTransform():Array<number>\r\n\t{\r\n\t\tvar data:Array<number>;\r\n\r\n\t\tdata = new Array<number>(16);\r\n\r\n\t\t// X axis\r\n\t\tdata[0] = this._byteData.readFloat(); // X\r\n\t\tdata[2] = this._byteData.readFloat(); // Z\r\n\t\tdata[1] = this._byteData.readFloat(); // Y\r\n\t\tdata[3] = 0;\r\n\r\n\t\t// Z axis\r\n\t\tdata[8] = this._byteData.readFloat(); // X\r\n\t\tdata[10] = this._byteData.readFloat(); // Z\r\n\t\tdata[9] = this._byteData.readFloat(); // Y\r\n\t\tdata[11] = 0;\r\n\r\n\t\t// Y Axis\r\n\t\tdata[4] = this._byteData.readFloat(); // X\r\n\t\tdata[6] = this._byteData.readFloat(); // Z\r\n\t\tdata[5] = this._byteData.readFloat(); // Y\r\n\t\tdata[7] = 0;\r\n\r\n\t\t// Translation\r\n\t\tdata[12] = this._byteData.readFloat(); // X\r\n\t\tdata[14] = this._byteData.readFloat(); // Z\r\n\t\tdata[13] = this._byteData.readFloat(); // Y\r\n\t\tdata[15] = 1;\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate readColor():number /*int*/\r\n\t{\r\n\t\tvar cid:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\r\n\r\n\t\tcid = this._byteData.readUnsignedShort();\r\n\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\tswitch (cid) {\r\n\t\t\tcase 0x0010: // Floats\r\n\t\t\t\tr = this._byteData.readFloat()*255;\r\n\t\t\t\tg = this._byteData.readFloat()*255;\r\n\t\t\t\tb = this._byteData.readFloat()*255;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x0011: // 24-bit color\r\n\t\t\t\tr = this._byteData.readUnsignedByte();\r\n\t\t\t\tg = this._byteData.readUnsignedByte();\r\n\t\t\t\tb = this._byteData.readUnsignedByte();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (r << 16) | (g << 8) | b;\r\n\t}\r\n}\r\n\r\nexport = Max3DSParser;\r\n\r\n/**\r\n *\r\n */\r\nclass FaceVO\r\n{\r\n\tpublic a:number /*int*/;\r\n\tpublic b:number /*int*/;\r\n\tpublic c:number /*int*/;\r\n\tpublic smoothGroup:number /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass MaterialVO\r\n{\r\n\tpublic name:string;\r\n\tpublic ambientColor:number /*int*/;\r\n\tpublic diffuseColor:number /*int*/;\r\n\tpublic specularColor:number /*int*/;\r\n\tpublic twoSided:boolean;\r\n\tpublic colorMap:TextureVO;\r\n\tpublic specularMap:TextureVO;\r\n\tpublic material:MaterialBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass ObjectVO\r\n{\r\n\tpublic name:string;\r\n\tpublic type:string;\r\n\tpublic pivotX:number;\r\n\tpublic pivotY:number;\r\n\tpublic pivotZ:number;\r\n\tpublic transform:Array<number>;\r\n\tpublic verts:Array<number>;\r\n\tpublic indices:Array<number> /*int*/;\r\n\tpublic uvs:Array<number>;\r\n\tpublic materialFaces:Object;\r\n\tpublic materials:Array<string>;\r\n\tpublic smoothingGroups:Array<number> /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass TextureVO\r\n{\r\n\tpublic url:string;\r\n\tpublic texture:Texture2DBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass VertexVO\r\n{\r\n\tpublic x:number;\r\n\tpublic y:number;\r\n\tpublic z:number;\r\n\tpublic u:number;\r\n\tpublic v:number;\r\n\tpublic normal:Vector3D;\r\n\tpublic tangent:Vector3D;\r\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\r\n\r\n/**\r\n * OBJParser provides a parser for the OBJ data type.\r\n */\r\nclass OBJParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _charIndex:number;\r\n\tprivate _oldIndex:number;\r\n\tprivate _stringLength:number;\r\n\tprivate _currentObject:ObjectGroup;\r\n\tprivate _currentGroup:Group;\r\n\tprivate _currentMaterialGroup:MaterialGroup;\r\n\tprivate _objects:Array<ObjectGroup>;\r\n\tprivate _materialIDs:string[];\r\n\tprivate _materialLoaded:Array<LoadedMaterial>;\r\n\tprivate _materialSpecularData:Array<SpecularData>;\r\n\tprivate _meshes:Array<Mesh>;\r\n\tprivate _lastMtlID:string;\r\n\tprivate _objectIndex:number;\r\n\tprivate _realIndices;\r\n\tprivate _vertexIndex:number;\r\n\tprivate _vertices:Array<Vertex>;\r\n\tprivate _vertexNormals:Array<Vertex>;\r\n\tprivate _uvs:Array<UV>;\r\n\tprivate _scale:number;\r\n\tprivate _mtlLib:boolean;\r\n\tprivate _mtlLibLoaded:boolean = true;\r\n\tprivate _activeMaterialID:string = \"\";\r\n\r\n\t/**\r\n\t * Creates a new OBJParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(scale:number = 1)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._scale = scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Scaling factor applied directly to vertices data\r\n\t * @param value The scaling factor.\r\n\t */\r\n\tpublic set scale(value:number)\r\n\t{\r\n\t\tthis._scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"obj\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar content:string = ParserUtils.toString(data);\r\n\t\tvar hasV:boolean = false;\r\n\t\tvar hasF:boolean = false;\r\n\r\n\t\tif (content) {\r\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\r\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\r\n\t\t}\r\n\r\n\t\treturn hasV && hasF;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == 'mtl') {\r\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\r\n\t\t\tthis.parseMtl(str);\r\n\r\n\t\t} else {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tif (resourceDependency.assets.length != 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\r\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\t\tlm.texture = <Texture2DBase> asset;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0) {\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == \"mtl\") {\r\n\t\t\tthis._mtlLib = false;\r\n\t\t\tthis._mtlLibLoaded = false;\r\n\t\t} else {\r\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\tthis._materialLoaded.push(lm);\r\n\t\t}\r\n\r\n\t\tif (this._meshes.length > 0)\r\n\t\t\tthis.applyMaterial(lm);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar line:string;\r\n\t\tvar creturn:string = String.fromCharCode(10);\r\n\t\tvar trunk;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\t// Merge linebreaks that are immediately preceeded by\r\n\t\t\t// the \"escape\" backward slash into single lines.\r\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\r\n\t\t}\r\n\r\n\t\tif (this._textData.indexOf(creturn) == -1)\r\n\t\t\tcreturn = String.fromCharCode(13);\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._startedParsing = true;\r\n\t\t\tthis._vertices = new Array<Vertex>();\r\n\t\t\tthis._vertexNormals = new Array<Vertex>();\r\n\t\t\tthis._materialIDs = new Array<string>();\r\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\r\n\t\t\tthis._meshes = new Array<Mesh>();\r\n\t\t\tthis._uvs = new Array<UV>();\r\n\t\t\tthis._stringLength = this._textData.length;\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\r\n\t\t\tthis._oldIndex = 0;\r\n\t\t\tthis._objects = new Array<ObjectGroup>();\r\n\t\t\tthis._objectIndex = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\r\n\r\n\t\t\tif (this._charIndex == -1)\r\n\t\t\t\tthis._charIndex = this._stringLength;\r\n\r\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\r\n\t\t\tline = line.split('\\r').join(\"\");\r\n\t\t\tline = line.replace(\"  \", \" \");\r\n\t\t\ttrunk = line.split(\" \");\r\n\t\t\tthis._oldIndex = this._charIndex + 1;\r\n\t\t\tthis.parseLine(trunk);\r\n\r\n\t\t\t// If whatever was parsed on this line resulted in the\r\n\t\t\t// parsing being paused to retrieve dependencies, break\r\n\t\t\t// here and do not continue parsing until un-paused.\r\n\t\t\tif (this.parsingPaused) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this._charIndex >= this._stringLength) {\r\n\r\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t\tthis.translate();\r\n\t\t\tthis.applyMaterials();\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single line in the OBJ file.\r\n\t */\r\n\tprivate parseLine(trunk)\r\n\t{\r\n\t\tswitch (trunk[0]) {\r\n\r\n\t\t\tcase \"mtllib\":\r\n\r\n\t\t\t\tthis._mtlLib = true;\r\n\t\t\t\tthis._mtlLibLoaded = false;\r\n\t\t\t\tthis.loadMtl(trunk[1]);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"g\":\r\n\r\n\t\t\t\tthis.createGroup(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"o\":\r\n\r\n\t\t\t\tthis.createObject(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"usemtl\":\r\n\r\n\t\t\t\tif (this._mtlLib) {\r\n\r\n\t\t\t\t\tif (!trunk[1])\r\n\t\t\t\t\t\ttrunk[1] = \"def000\";\r\n\r\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\r\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\r\n\r\n\t\t\t\t\tif (this._currentGroup)\r\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"v\":\r\n\r\n\t\t\t\tthis.parseVertex(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vt\":\r\n\r\n\t\t\t\tthis.parseUV(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vn\":\r\n\r\n\t\t\t\tthis.parseVertexNormal(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"f\":\r\n\r\n\t\t\t\tthis.parseFace(trunk);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the parsed data into an Away3D scenegraph structure\r\n\t */\r\n\tprivate translate()\r\n\t{\r\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\r\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\r\n\t\t\tvar numGroups:number = groups.length;\r\n\t\t\tvar materialGroups:Array<MaterialGroup>;\r\n\t\t\tvar numMaterialGroups:number;\r\n\t\t\tvar geometry:Geometry;\r\n\t\t\tvar mesh:Mesh;\r\n\r\n\t\t\tvar m:number;\r\n\t\t\tvar sm:number;\r\n\t\t\tvar bmMaterial:MethodMaterial;\r\n\r\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\r\n\t\t\t\tgeometry = new Geometry();\r\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\r\n\t\t\t\tnumMaterialGroups = materialGroups.length;\r\n\r\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\r\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\r\n\r\n\t\t\t\tif (geometry.subGeometries.length == 0)\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// Finalize and force type-based name\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\r\n\r\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\r\n\t\t\t\t//check for multipass\r\n\t\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\r\n\r\n\t\t\t\tif (this._objects[objIndex].name) {\r\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\r\n\r\n\t\t\t\t} else if (groups[g].name) {\r\n\r\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = groups[g].name;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No name stored. Use empty string which will force it\r\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\r\n\t\t\t\t\tmesh.name = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._meshes.push(mesh);\r\n\r\n\t\t\t\tif (groups[g].materialID != \"\")\r\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\r\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\r\n\r\n\t\t\t\tif (mesh.subMeshes.length > 1) {\r\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\r\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates an obj's material group to a subgeometry.\r\n\t * @param materialGroup The material group data to convert.\r\n\t * @param geometry The Geometry to contain the converted SubGeometry.\r\n\t */\r\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\r\n\t{\r\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\r\n\t\tvar face:FaceData;\r\n\t\tvar numFaces:number = faces.length;\r\n\t\tvar numVerts:number;\r\n\t\tvar sub:TriangleSubGeometry;\r\n\r\n\t\tvar vertices:Array<number> = new Array<number>();\r\n\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\tvar normals:Array<number> = new Array<number>();\r\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\r\n\r\n\t\tthis._realIndices = [];\r\n\t\tthis._vertexIndex = 0;\r\n\r\n\t\tvar j:number;\r\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\r\n\r\n\t\t\tface = faces[i];\r\n\t\t\tnumVerts = face.indexIds.length - 1;\r\n\r\n\t\t\tfor (j = 1; j < numVerts; ++j) {\r\n\r\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (vertices.length > 0) {\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\r\n\t\t\tsub.updateIndices(indices);\r\n\t\t\tsub.updatePositions(vertices);\r\n\t\t\tsub.updateVertexNormals(normals);\r\n\t\t\tsub.updateUVs(uvs);\r\n\r\n\t\t\tgeometry.addSubGeometry(sub);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\r\n\t{\r\n\t\tvar index:number;\r\n\t\tvar vertex:Vertex;\r\n\t\tvar vertexNormal:Vertex;\r\n\t\tvar uv:UV;\r\n\r\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\r\n\r\n\t\t\tindex = this._vertexIndex;\r\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\r\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\r\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\r\n\r\n\t\t\tif (face.normalIndices.length > 0) {\r\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\r\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n\t\t\t}\r\n\r\n\t\t\tif (face.uvIndices.length > 0) {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\r\n\t\t\t\t\tuvs.push(uv.u, uv.v);\r\n\r\n\t\t\t\t} catch (e) {\r\n\r\n\t\t\t\t\tswitch (vertexIndex) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tuvs.push(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tuvs.push(.5, 0);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tuvs.push(1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\r\n\t\t}\r\n\r\n\t\tindices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new object group.\r\n\t * @param trunk The data block containing the object tag and its parameters\r\n\t */\r\n\tprivate createObject(trunk)\r\n\t{\r\n\t\tthis._currentGroup = null;\r\n\t\tthis._currentMaterialGroup = null;\r\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentObject.name = trunk[1];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new group.\r\n\t * @param trunk The data block containing the group tag and its parameters\r\n\t */\r\n\tprivate createGroup(trunk)\r\n\t{\r\n\t\tif (!this._currentObject)\r\n\t\t\tthis.createObject(null);\r\n\t\tthis._currentGroup = new Group();\r\n\r\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentGroup.name = trunk[1];\r\n\t\tthis._currentObject.groups.push(this._currentGroup);\r\n\r\n\t\tthis.createMaterialGroup(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new material group.\r\n\t * @param trunk The data block containing the material tag and its parameters\r\n\t */\r\n\tprivate createMaterialGroup(trunk)\r\n\t{\r\n\t\tthis._currentMaterialGroup = new MaterialGroup();\r\n\t\tif (trunk)\r\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\r\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex coordinates.\r\n\t * @param trunk The data block containing the vertex tag and its parameters\r\n\t */\r\n\tprivate parseVertex(trunk)\r\n\t{\r\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\r\n\r\n\t\tvar v1:number, v2:number , v3:number;\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\r\n\t\t\tv1 = <number> nTrunk[0];\r\n\t\t\tv2 = <number> nTrunk[1];\r\n\t\t\tv3 = <number> -nTrunk[2];\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\r\n\t\t} else {\r\n\t\t\tv1 = <number> parseFloat(trunk[1]);\r\n\t\t\tv2 = <number> parseFloat(trunk[2]);\r\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\r\n\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinates.\r\n\t * @param trunk The data block containing the uv tag and its parameters\r\n\t */\r\n\tprivate parseUV(trunk)\r\n\t{\r\n\t\tif (trunk.length > 3) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex normal coordinates.\r\n\t * @param trunk The data block containing the vertex normal tag and its parameters\r\n\t */\r\n\tprivate parseVertexNormal(trunk)\r\n\t{\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next face's indices.\r\n\t * @param trunk The data block containing the face tag and its parameters\r\n\t */\r\n\tprivate parseFace(trunk)\r\n\t{\r\n\t\tvar len:number = trunk.length;\r\n\t\tvar face:FaceData = new FaceData();\r\n\r\n\t\tif (!this._currentGroup) {\r\n\t\t\tthis.createGroup(null);\r\n\t\t}\r\n\r\n\t\tvar indices;\r\n\t\tfor (var i:number = 1; i < len; ++i) {\r\n\r\n\t\t\tif (trunk[i] == \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tindices = trunk[i].split(\"/\");\r\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\r\n\r\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\r\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\r\n\r\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\r\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\r\n\r\n\t\t\tface.indexIds.push(trunk[i]);\r\n\t\t}\r\n\r\n\t\tthis._currentMaterialGroup.faces.push(face);\r\n\t}\r\n\r\n\t/**\r\n\t * This is a hack around negative face coords\r\n\t */\r\n\tprivate parseIndex(index:number, length:number):number\r\n\t{\r\n\t\tif (index < 0)\r\n\t\t\treturn index + length + 1; else\r\n\t\t\treturn index;\r\n\t}\r\n\r\n\tprivate parseMtl(data:string)\r\n\t{\r\n\t\tvar materialDefinitions = data.split('newmtl');\r\n\t\tvar lines;\r\n\t\tvar trunk;\r\n\t\tvar j:number;\r\n\r\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\r\n\t\tvar useSpecular:boolean;\r\n\t\tvar useColor:boolean;\r\n\t\tvar diffuseColor:number;\r\n\t\tvar color:number;\r\n\t\tvar specularColor:number;\r\n\t\tvar specular:number;\r\n\t\tvar alpha:number;\r\n\t\tvar mapkd:string;\r\n\r\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\r\n\r\n\r\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\r\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\r\n\r\n\t\t\tif (lines.length == 1)\r\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\r\n\r\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\r\n\t\t\tspecular = 0;\r\n\t\t\tuseSpecular = false;\r\n\t\t\tuseColor = false;\r\n\t\t\talpha = 1;\r\n\t\t\tmapkd = \"\";\r\n\r\n\t\t\tfor (j = 0; j < lines.length; ++j) {\r\n\r\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\r\n\r\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\r\n\t\t\t\t\ttrunk = lines[j].split(\" \");\r\n\r\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\r\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\r\n\r\n\t\t\t\t\tif (j == 0) {\r\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\r\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch (trunk[0]) {\r\n\r\n\t\t\t\t\t\t\tcase \"Ka\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\r\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ks\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ns\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\r\n\t\t\t\t\t\t\t\tif (specular == 0)\r\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Kd\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseColor = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"tr\":\r\n\t\t\t\t\t\t\tcase \"d\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"map_Kd\":\r\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\r\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (mapkd != \"\") {\r\n\r\n\t\t\t\tif (useSpecular) {\r\n\r\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\r\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\r\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\r\n\r\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\r\n\t\t\t\t\tspecularData.alpha = alpha;\r\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\r\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\r\n\r\n\t\t\t\t\tif (!this._materialSpecularData)\r\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\r\n\r\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\r\n\r\n\t\t\t} else if (useColor && !isNaN(color)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = this._lastMtlID;\r\n\r\n\t\t\t\tif (alpha == 0)\r\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\r\n\r\n\t\t\t\tvar cm:MethodMaterial;\r\n\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\r\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\t\t\t\t\tcolorMat.alpha = alpha;\r\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMat.specular = specular;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\r\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMultiMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlm.cm = cm;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0)\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._mtlLibLoaded = true;\r\n\t}\r\n\r\n\tprivate parseMapKdString(trunk):string\r\n\t{\r\n\t\tvar url:string = \"\";\r\n\t\tvar i:number;\r\n\t\tvar breakflag:boolean;\r\n\r\n\t\tfor (i = 1; i < trunk.length;) {\r\n\t\t\tswitch (trunk[i]) {\r\n\t\t\t\tcase \"-blendu\":\r\n\t\t\t\tcase \"-blendv\":\r\n\t\t\t\tcase \"-cc\":\r\n\t\t\t\tcase \"-clamp\":\r\n\t\t\t\tcase \"-texres\":\r\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-mm\":\r\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-o\":\r\n\t\t\t\tcase \"-s\":\r\n\t\t\t\tcase \"-t\":\r\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreakflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (breakflag)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//Reconstruct URL/filename\r\n\t\tfor (i; i < trunk.length; i++) {\r\n\t\t\turl += trunk[i];\r\n\t\t\turl += \" \";\r\n\t\t}\r\n\r\n\t\t//Remove the extraneous space and/or newline from the right side\r\n\t\turl = url.replace(/\\s+$/, \"\");\r\n\r\n\t\treturn url;\r\n\t}\r\n\r\n\tprivate loadMtl(mtlurl:string)\r\n\t{\r\n\t\t// Add raw-data dependency to queue and load dependencies now,\r\n\t\t// which will pause the parsing in the meantime.\r\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\r\n\t\tthis._pPauseAndRetrieveDependencies();//\r\n\t}\r\n\r\n\tprivate applyMaterial(lm:LoadedMaterial)\r\n\t{\r\n\t\tvar decomposeID;\r\n\t\tvar mesh:Mesh;\r\n\t\tvar tm:MethodMaterial;\r\n\t\tvar j:number;\r\n\t\tvar specularData:SpecularData;\r\n\r\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\r\n\t\t\tmesh = this._meshes[i];\r\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\r\n\r\n\t\t\tif (decomposeID[0] == lm.materialID) {\r\n\r\n\t\t\t\tif (lm.cm) {\r\n\t\t\t\t\tif (mesh.material)\r\n\t\t\t\t\t\tmesh.material = null;\r\n\t\t\t\t\tmesh.material = lm.cm;\r\n\r\n\t\t\t\t} else if (lm.texture) {\r\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\r\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.alpha = lm.alpha;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\r\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\r\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\r\n\t\t\t\tthis._meshes.splice(i, 1);\r\n\t\t\t\t--i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lm.cm || tm)\r\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\r\n\t}\r\n\r\n\tprivate applyMaterials()\r\n\t{\r\n\t\tif (this._materialLoaded.length == 0)\r\n\t\t\treturn;\r\n\r\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\r\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\r\n\t}\r\n}\r\n\r\nexport = OBJParser;\r\n\r\nclass ObjectGroup\r\n{\r\n\tpublic name:string;\r\n\tpublic groups:Group[] = new Array<Group>();\r\n}\r\n\r\nclass Group\r\n{\r\n\tpublic name:string;\r\n\tpublic materialID:string;\r\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\r\n}\r\n\r\nclass MaterialGroup\r\n{\r\n\tpublic url:string;\r\n\tpublic faces:FaceData[] = new Array<FaceData>();\r\n}\r\n\r\nclass SpecularData\r\n{\r\n\tpublic materialID:string;\r\n\tpublic basicSpecularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass LoadedMaterial\r\n{\r\n\tpublic materialID:string;\r\n\tpublic texture:Texture2DBase;\r\n\tpublic cm:MaterialBase;\r\n\tpublic specularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass FaceData\r\n{\r\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\r\n}\r\n\r\n/**\r\n* Texture coordinates value object.\r\n*/\r\nclass UV\r\n{\r\n\tprivate _u:number;\r\n\tprivate _v:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>UV</code> object.\r\n\t *\r\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\r\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\r\n\t */\r\n\tconstructor(u:number = 0, v:number = 0)\r\n\t{\r\n\t\tthis._u = u;\r\n\t\tthis._v = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the vertical coordinate of the texture value.\r\n\t */\r\n\tpublic get v():number\r\n\t{\r\n\t\treturn this._v;\r\n\t}\r\n\r\n\tpublic set v(value:number)\r\n\t{\r\n\t\tthis._v = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the horizontal coordinate of the texture value.\r\n\t */\r\n\tpublic get u():number\r\n\t{\r\n\t\treturn this._u;\r\n\t}\r\n\r\n\tpublic set u(value:number)\r\n\t{\r\n\t\tthis._u = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new UV value Object\r\n\t */\r\n\tpublic clone():UV\r\n\t{\r\n\t\treturn new UV(this._u, this._v);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the value object as a string for trace/debug purpose\r\n\t */\r\n\tpublic toString():string\r\n\t{\r\n\t\treturn this._u + \",\" + this._v;\r\n\t}\r\n}\r\n\r\nclass Vertex\r\n{\r\n\tprivate _x:number;\r\n\tprivate _y:number;\r\n\tprivate _z:number;\r\n\tprivate _index:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>Vertex</code> value object.\r\n\t *\r\n\t * @param    x            [optional]    The x value. Defaults to 0.\r\n\t * @param    y            [optional]    The y value. Defaults to 0.\r\n\t * @param    z            [optional]    The z value. Defaults to 0.\r\n\t * @param    index        [optional]    The index value. Defaults is NaN.\r\n\t */\r\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\r\n\t{\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._index = index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the index of value object\r\n\t * @param    ind        The index\r\n\t */\r\n\tpublic set index(ind:number)\r\n\t{\r\n\t\tthis._index = ind;\r\n\t}\r\n\r\n\tpublic get index():number\r\n\t{\r\n\t\treturn this._index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the x value of the value object\r\n\t * @param    value        The x value\r\n\t */\r\n\tpublic get x():number\r\n\t{\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value:number)\r\n\t{\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the y value of the value object\r\n\t * @param    value        The y value\r\n\t */\r\n\tpublic get y():number\r\n\t{\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value:number)\r\n\t{\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the z value of the value object\r\n\t * @param    value        The z value\r\n\t */\r\n\tpublic get z():number\r\n\t{\r\n\t\treturn this._z;\r\n\t}\r\n\r\n\tpublic set z(value:number)\r\n\t{\r\n\t\tthis._z = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new Vertex value Object\r\n\t */\r\n\tpublic clone():Vertex\r\n\t{\r\n\t\treturn new Vertex(this._x, this._y, this._z);\r\n\t}\r\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\r\n\r\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\r\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\r\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\r\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\r\n\r\n/**\r\n *\r\n */\r\nclass Parsers\r\n{\r\n\t/**\r\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\r\n\t * enable support for all bundled parsers to the file format auto-detection\r\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\r\n\t *\r\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\r\n\t *\r\n\t * Beware however that this requires all parser classes to be included in the\r\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\r\n\t * file formats are used, SWF file size can be saved by adding the parsers\r\n\t * individually using AssetLibrary.enableParser()\r\n\t *\r\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\r\n\t * the auto-detection mechanisms altogether, while at the same time allowing\r\n\t * any properties that are unique to that parser to be set for that load.\r\n\t *\r\n\t * The bundled parsers are:\r\n\t *\r\n\t * <ul>\r\n\t * <li>AC3D (.ac)</li>\r\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\r\n\t * <li>3DMax (.3ds)</li>\r\n\t * <li>DXF (.dxf)</li>\r\n\t * <li>Quake 2 MD2 models (.md2)</li>\r\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\r\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\r\n\t * <li>Wavefront OBJ (.obj)</li>\r\n\t * <li>Collada (.dae)</li>\r\n\t * <li>Images (.jpg, .png)</li>\r\n\t * </ul>\r\n\t *\r\n\t * @see away.library.AssetLibrary.enableParser\r\n\t */\r\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\r\n\r\n\t/**\r\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\r\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\r\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\r\n\t *\r\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\r\n\t *\r\n\t * @see away.parsers.Parsers.ALL_BUNDLED\r\n\t */\r\n\tpublic static enableAllBundled():void\r\n\t{\r\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\r\n\t}\r\n}\r\n\r\nexport = Parsers;"
  ],
  "sourceRoot": ""
}