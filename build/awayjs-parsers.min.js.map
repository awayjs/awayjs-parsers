{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "../index.ts",
    "lib/lib/AWD3ParserUtils/AWD3Utils.ts",
    "lib/lib/AWD3ParserUtils/AWDBlock.ts",
    "lib/AWDParser.ts",
    "lib/FNTParser.ts",
    "lib/FontParser.ts",
    "lib/MD2Parser.ts",
    "lib/MD5AnimParser.ts",
    "lib/MD5MeshParser.ts",
    "lib/Max3DSParser.ts",
    "lib/OBJParser.ts",
    "lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    1,
    "module",
    "AWDParser_1",
    "AWDParser",
    "Max3DSParser_1",
    "Max3DSParser",
    "MD2Parser_1",
    "MD2Parser",
    "MD5AnimParser_1",
    "MD5AnimParser",
    "MD5MeshParser_1",
    "MD5MeshParser",
    "OBJParser_1",
    "OBJParser",
    "Parsers_1",
    "Parsers",
    "./lib/AWDParser",
    "./lib/MD2Parser",
    "./lib/MD5AnimParser",
    "./lib/MD5MeshParser",
    "./lib/Max3DSParser",
    "./lib/OBJParser",
    "./lib/Parsers",
    "awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils",
    "AWD3Utils",
    "BLOCKSTATE_FINALIZE",
    "BLOCKSTATE_INVALID",
    "BLOCKSTATE_LOAD_DEPENDENICES",
    "BLOCKSTATE_NO_ASSET",
    "COMPRESSIONMODE_LZMA",
    "UNCOMPRESSED",
    "DEFLATE",
    "LZMA",
    "INT8",
    "INT16",
    "INT32",
    "UINT8",
    "UINT16",
    "UINT32",
    "FLOAT32",
    "FLOAT64",
    "BOOL",
    "COLOR",
    "BADDR",
    "AWDSTRING",
    "AWDBYTEARRAY",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "MTX4x4",
    "awayjs-parsers/lib/AWD3ParserUtils/AWDBlock",
    "AWD3Utils_1",
    "AWDBlock",
    "this_id",
    "this_type",
    "this",
    "type",
    "id",
    "state",
    "dependencies_data",
    "Array",
    "dependencies_urls",
    "loaded_dependencies",
    "loaded_dependencies_cnt",
    "prototype",
    "dispose",
    "bytes",
    "errorMessages",
    "uvsForVertexAnimation",
    "addError",
    "errorMsg",
    "push",
    "../AWD3ParserUtils/AWD3Utils",
    "awayjs-parsers/lib/AWDParser",
    "__extends",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "Object",
    "create",
    "AttributesBuffer_1",
    "Float3Attributes_1",
    "Float2Attributes_1",
    "Byte4Attributes_1",
    "BitmapImageCube_1",
    "BlendMode_1",
    "Sampler2D_1",
    "ColorTransform_1",
    "Matrix3D_1",
    "Vector3D_1",
    "URLLoaderDataFormat_1",
    "URLRequest_1",
    "ParserBase_1",
    "ParserUtils_1",
    "PerspectiveProjection_1",
    "OrthographicProjection_1",
    "OrthographicOffCenterProjection_1",
    "ByteArray_1",
    "DisplayObjectContainer_1",
    "Graphics_1",
    "TriangleElements_1",
    "DirectionalLight_1",
    "PointLight_1",
    "Camera_1",
    "Sprite_1",
    "Billboard_1",
    "Skybox_1",
    "DefaultMaterialManager_1",
    "StaticLightPicker_1",
    "CubeMapShadowMapper_1",
    "DirectionalShadowMapper_1",
    "PrefabBase_1",
    "PrimitiveCapsulePrefab_1",
    "PrimitiveConePrefab_1",
    "PrimitiveCubePrefab_1",
    "PrimitiveCylinderPrefab_1",
    "PrimitivePlanePrefab_1",
    "PrimitiveSpherePrefab_1",
    "PrimitiveTorusPrefab_1",
    "SingleCubeTexture_1",
    "Single2DTexture_1",
    "VertexAnimationSet_1",
    "VertexAnimator_1",
    "SkeletonAnimationSet_1",
    "SkeletonAnimator_1",
    "JointPose_1",
    "Skeleton_1",
    "SkeletonPose_1",
    "SkeletonJoint_1",
    "SkeletonClipNode_1",
    "VertexClipNode_1",
    "MethodMaterialMode_1",
    "MethodMaterial_1",
    "AmbientEnvMapMethod_1",
    "DiffuseDepthMethod_1",
    "DiffuseCelMethod_1",
    "DiffuseGradientMethod_1",
    "DiffuseLightMapMethod_1",
    "DiffuseWrapMethod_1",
    "EffectAlphaMaskMethod_1",
    "EffectColorMatrixMethod_1",
    "EffectColorTransformMethod_1",
    "EffectEnvMapMethod_1",
    "EffectFogMethod_1",
    "EffectFresnelEnvMapMethod_1",
    "EffectLightMapMethod_1",
    "EffectRimLightMethod_1",
    "NormalSimpleWaterMethod_1",
    "ShadowDitheredMethod_1",
    "ShadowFilteredMethod_1",
    "SpecularFresnelMethod_1",
    "ShadowHardMethod_1",
    "SpecularAnisotropicMethod_1",
    "SpecularCelMethod_1",
    "SpecularPhongMethod_1",
    "ShadowNearMethod_1",
    "ShadowSoftMethod_1",
    "BasicMaterial_1",
    "AS2SceneGraphFactory_1",
    "Timeline_1",
    "AssetLibrary_1",
    "Font_1",
    "TesselatedFontTable_1",
    "TextFormat_1",
    "AWDBlock_1",
    "Rectangle_1",
    "Style_1",
    "Matrix_1",
    "MappingMode_1",
    "ElementsType_1",
    "_super",
    "view",
    "URLLoaderDataFormat",
    "ARRAY_BUFFER",
    "_debug",
    "_debugTimers",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_time_all",
    "_time_graphics",
    "_time_graphics_bytes",
    "_time_timeline",
    "_time_fonts",
    "_time_textfields",
    "_time_sounds",
    "_time_textures",
    "_time_materials",
    "_time_sprites",
    "_num_graphics",
    "_num_timeline",
    "_num_fonts",
    "_num_textfields",
    "_num_sounds",
    "_num_textures",
    "_num_materials",
    "_num_sprites",
    "shadowMethodListProperties",
    2,
    3,
    101,
    "PROPERTY_NUMBER",
    102,
    103,
    201,
    202,
    301,
    302,
    401,
    402,
    601,
    602,
    701,
    702,
    801,
    "spritePoseAnimationProperties",
    "sharedMethodListProperties",
    104,
    105,
    106,
    107,
    "_view",
    "_blocks",
    "data",
    "blendModeDic",
    "BlendMode",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "ParserUtils",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "this_block",
    "parseInt",
    "image_asset",
    "_pFinalizeAsset",
    "name",
    "console",
    "log",
    "audio_asset",
    "sub_id",
    "cube_image_asset",
    "BitmapImageCube",
    "width",
    "draw",
    "_isParsing",
    "updateTimers",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "asset",
    "oldName",
    "block",
    "resetAssetPath",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "_pDieWithError",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "ParserBase",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "DisplayObjectContainer",
    "c",
    "isParsed",
    "ns",
    "flags",
    "len",
    "start_timeing",
    "performance",
    "now",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "ByteArray",
    "readBytes",
    "blockEndBlock",
    "factory",
    "AS2SceneGraphFactory",
    "parseSpriteLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseMovieClip",
    "parseTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseSpritePoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseGraphics",
    "parseContainer",
    "parseSpriteInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "end_timing",
    "time_delta",
    "blockID",
    "parseVarStr",
    "new_font",
    "AssetLibrary",
    "getAsset",
    "newfont",
    "undefined",
    "Font",
    "font_style_cnt",
    "font_style_char_cnt",
    "font_style_name",
    "new_font_style",
    "font_style_char",
    "attr_count",
    "sm_len",
    "sm_end",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "get_font_table",
    "TesselatedFontTable",
    "assetType",
    "set_font_em_size",
    "set_whitespace_width",
    "ascent",
    "readFloat",
    "descent",
    "j",
    "char_width",
    "indices",
    "idx",
    "readUnsignedShort",
    "curveData",
    "vertexBuffer",
    "AttributesBuffer",
    "bufferView",
    "Uint8Array",
    "arraybytes",
    "setChar",
    "parseProperties",
    "parseUserAttributes",
    "font",
    "newTextFormat",
    "TextFormat",
    "font_name",
    "font_table",
    "font_style",
    "mat",
    "bothSides",
    "curves",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "format_props",
    "textFormatProperties",
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "tf_align_int",
    "align",
    "indent",
    "leftMargin",
    "rightMargin",
    "leading",
    "material",
    "newTextField",
    "createTextField",
    "text_field_type",
    "textFieldTypes",
    "displayAsPassword",
    "textWidth",
    "Math",
    "abs",
    "textHeight",
    "num_paragraphs",
    "complete_text",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "text_format",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "props",
    "textFieldProperties",
    "selectable",
    "border",
    "extra",
    "billboard",
    "Billboard",
    "data_id",
    "graphics",
    "geoID",
    "num_materials",
    "materials",
    "materialNames",
    "materials_parsed",
    "DefaultMaterialManager",
    "getDefaultMaterial",
    "useColorTransform",
    "sprite",
    "Sprite",
    "copyTo",
    "count",
    "getGraphicAt",
    "min",
    "sampler",
    "Sampler2D",
    "graphic",
    "style",
    "Style",
    "addSamplerAt",
    "getTextureAt",
    "tx",
    "ty",
    "animateUVs",
    "uvMatrix",
    "Matrix",
    "matrix",
    "parseMatrix32RawData",
    "newMatrix",
    "x",
    "y",
    "height",
    "imageRect",
    "Rectangle",
    "elements",
    "getCustomAtributes",
    "data_len",
    "url",
    "_pAddDependency",
    "URLRequest",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "cmd_asset",
    "new_timeline",
    "Timeline",
    "new_mc",
    "createMovieClip",
    "num_potential_childs",
    "registerPotentialChild",
    "num_all_display_instances",
    "num_potential_childs_multi_instanced",
    "num_instances",
    "num_potential_sounds",
    "str_cnt",
    "str_data_type",
    "str_counter",
    "keyframes_start_indices_data",
    "new_buffer",
    "Uint16Array",
    "Uint32Array",
    "keyframe_durations",
    "numKeyFrames",
    "frame_command_indices",
    "frame_recipe",
    "command_length_stream",
    "command_index_stream",
    "add_child_stream",
    "remove_child_stream",
    "update_child_stream",
    "update_child_props_indices_stream",
    "update_child_props_length_stream",
    "property_type_stream",
    "property_index_stream",
    "properties_stream_int",
    "lc",
    "float_array_data",
    "properties_stream_f32_mtx_scale_rot",
    "Float32Array",
    "properties_stream_f32_mtx_pos",
    "properties_stream_f32_mtx_all",
    "properties_stream_f32_ct",
    "_labels",
    "string_props_array",
    "properties_stream_strings",
    "frame_index",
    "one_str_len",
    "add_framescript",
    "init",
    "sceneID",
    "fps",
    "movieClipProperties",
    "timeline",
    "numFrames",
    "Graphics",
    "numElements",
    "graphicsProperties",
    "geoScaleU",
    "geoScaleV",
    "target_start_idx",
    "target_vert_cnt",
    "element_type",
    "ElementType",
    "STANDART_STREAMS",
    "target_element",
    "elements_parsed",
    "is_curve_elements",
    "w_indices",
    "weights",
    "elementsProps",
    "elementsProperties",
    "z",
    "verts",
    "readNumber",
    "uvs",
    "normals",
    "CONCENATED_STREAMS",
    "SHARED_BUFFER",
    "targetGraphic",
    "element_idx",
    "curve_elements",
    "TriangleElements",
    "setPositions",
    "Float2Attributes",
    "setCustomAttributes",
    "Float3Attributes",
    "Byte4Attributes",
    "setUVs",
    "addGraphic",
    "triangle_elements",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "setIndices",
    "setNormals",
    "setJointWeights",
    "setJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "offset",
    "prefab",
    "primType",
    "bsm",
    "primitiveProperties",
    "PrimitivePlanePrefab",
    "ElementsType",
    "TRIANGLE",
    "PrimitiveCubePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveCylinderPrefab",
    "topClosed",
    "bottomClosed",
    "yUp",
    "PrimitiveConePrefab",
    "PrimitiveCapsulePrefab",
    "PrimitiveTorusPrefab",
    "PrefabBase",
    "primitiveTypes",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "addChild",
    "containerProperties",
    "pivot",
    "Vector3D",
    "isPrefab",
    "isAsset",
    "getNewObject",
    "spriteInstanceProperties",
    "castsShadows",
    "Skybox",
    "tex",
    "SingleCubeTexture",
    "getDefaultImageCube",
    "texture",
    "light",
    "newShadowMapper",
    "lightType",
    "lightProperties",
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "PointLight",
    "radius",
    "fallOff",
    "CubeMapShadowMapper",
    "DirectionalLight",
    "DirectionalShadowMapper",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    "cameraProperties",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "camera",
    "Camera",
    "cameraPivotProperties",
    "numLights",
    "lightsArray",
    "lightsArrayNames",
    "k",
    "lightPick",
    "StaticLightPicker",
    "finalize",
    "num_methods",
    "methods_parsed",
    "returnedArray",
    "materialProperties",
    "method_type",
    "debugString",
    "materialMode",
    "MethodMaterial",
    "mode",
    "MethodMaterialMode",
    "MULTI_PASS",
    "Single2DTexture",
    "ambientMethod",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "diffuseImage",
    "normalImage",
    "specImage",
    "material_v1Properties",
    "spezialType",
    "lightPicker",
    "alphaPremultiplied",
    "blendMode",
    "diffuseTexture",
    "normalMethod",
    "specularMethod",
    "strength",
    "diffuseMethod",
    "gloss",
    "method_v1Properties",
    "effectMethod",
    "addEffectMethod",
    "shadowMapMethod",
    "shadowMethod",
    "cubeTexture",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseGradientMethod",
    "DiffuseWrapMethod",
    "DiffuseLightMapMethod",
    "DiffuseCelMethod",
    "smoothness",
    "SpecularAnisotropicMethod",
    "SpecularPhongMethod",
    "SpecularCelMethod",
    "SpecularFresnelMethod",
    "fresnelPower",
    "normalReflectance",
    "NormalSimpleWaterMethod",
    "mappingMode",
    "MappingMode",
    "LINEAR_GRADIENT",
    "RADIAL_GRADIENT",
    "basic_mat",
    "BasicMaterial",
    "byteArrayToImage",
    "parseSharedMethodList",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "numCommands",
    "typeCommand",
    "commandProperties",
    "targetProperties",
    "metaDataProperties",
    "nameSpaceString",
    "methodType",
    "targetID",
    "ShadowNearMethod",
    "ShadowFilteredMethod",
    "epsilon",
    "ShadowDitheredMethod",
    "range",
    "ShadowSoftMethod",
    "ShadowHardMethod",
    "num_joints",
    "skeleton",
    "Skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "SkeletonJoint",
    "parentIndex",
    "inverseBindPose",
    "rawData",
    "joints",
    "pose",
    "SkeletonPose",
    "joint_pose",
    "has_transform",
    "JointPose",
    "mtx_data",
    "parseMatrix43RawData",
    "Matrix3D",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_id",
    "clip",
    "SkeletonClipNode",
    "num_frames",
    "frames_parsed",
    "addFrame",
    "frames",
    "poseOnly",
    "subSpriteParsed",
    "VertexClipNode",
    "streamtypes",
    "geo_id",
    "getUVForVertexAnimation",
    "num_subsprites",
    "num_Streams",
    "streamsParsed",
    "looping",
    "stitchFinalFrame",
    "setTangents",
    "vertexAnimationSetProperties",
    "skeletonFrames",
    "vertexFrames",
    "clipNode",
    "newVertexAnimationSet",
    "VertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "SkeletonAnimationSet",
    "animatorSetProperties",
    "targetAnimationSet",
    "targetSpritees",
    "targetSpriteLength",
    "activeState",
    "autoplay",
    "thisAnimator",
    "SkeletonAnimator",
    "VertexAnimator",
    "animator",
    "effectMethodReturn",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "offCol",
    "colorTransform",
    "ColorTransform",
    "EffectEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "EffectAlphaMaskMethod",
    "EffectFresnelEnvMapMethod",
    "EffectFogMethod",
    "list_len",
    "list_end",
    "attributes",
    "attibuteCnt",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "readByte",
    "readInt",
    "readDouble",
    "expected",
    "AWDProperties",
    "key",
    "propertyCnt",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "accuracy",
    "GEO_NUMBER",
    "MATRIX_NUMBER",
    "list",
    "num_elems",
    "num_read",
    "_streaming",
    "body_len",
    "spriteID",
    "geoCnt",
    "numVertices",
    "precision",
    "mtx_raw",
    "isNaN",
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    110,
    111,
    303,
    703,
    704,
    11,
    12,
    21,
    22,
    23,
    13,
    15,
    16,
    17,
    18,
    19,
    20,
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "./AWD3ParserUtils/AWDBlock",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-core/lib/attributes/Byte4Attributes",
    "awayjs-core/lib/attributes/Float2Attributes",
    "awayjs-core/lib/attributes/Float3Attributes",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/image/BitmapImageCube",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-core/lib/image/Sampler2D",
    "awayjs-core/lib/library/AssetLibrary",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/Style",
    "awayjs-display/lib/base/Timeline",
    "awayjs-display/lib/display/Billboard",
    "awayjs-display/lib/display/Camera",
    "awayjs-display/lib/display/DirectionalLight",
    "awayjs-display/lib/display/DisplayObjectContainer",
    "awayjs-display/lib/display/PointLight",
    "awayjs-display/lib/display/Skybox",
    "awayjs-display/lib/display/Sprite",
    "awayjs-display/lib/graphics/ElementsType",
    "awayjs-display/lib/graphics/Graphics",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TesselatedFontTable",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/FNTParser",
    "XmlUtils_1",
    "BitmapFontTable_1",
    "FNTParser",
    "TEXT",
    "_parseState",
    "supports",
    "content",
    "indexOf",
    "_bitmapFontTable",
    "add_page",
    "FNTParserState",
    "PARSE_CHARS",
    "PARSE_COMPLETE",
    "nodes",
    "PARSE_XML",
    "_doc",
    "XmlUtils",
    "getChildrenWithTag",
    "strToXml",
    "_pGetTextData",
    "page_node",
    "all_pages",
    "_imagePath",
    "readAttributeValue",
    "char_node",
    "_chars",
    "PARSE_IMAGE",
    "info_node",
    "common_node",
    "_font",
    "bold",
    "italic",
    "BitmapFontTable",
    "_init_size",
    "element",
    "xoff",
    "yoff",
    "xadv",
    "page",
    "chnl",
    "awayjs-core/lib/utils/XmlUtils",
    "awayjs-display/lib/text/BitmapFontTable",
    "awayjs-parsers/lib/FontParser",
    "opentype",
    "FontParser",
    "useWebGL",
    "_useWebGL",
    "sortKeys",
    "dict",
    "keys",
    "sort",
    "window",
    "parse",
    "tablename",
    "table",
    "property",
    "fontname",
    "head",
    "tables",
    "properties",
    "translations",
    "langs",
    "lang",
    "_iFileName",
    "document",
    "createElement",
    "getElementsByTagName",
    "appendChild",
    "cssText",
    "awayjs-parsers/lib/MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "_animationSet",
    "materialFinal",
    "graphicsCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_sprite",
    "getDefaultImage2D",
    "_pHasTime",
    "_parsedHeader",
    "_graphics",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstElements",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion_1",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "Quaternion",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_elementsData",
    "translateElements",
    "positionData",
    "weightData",
    "_skeleton",
    "numElementsData",
    "elementsData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "start",
    "startWeight",
    "end",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "ElementsData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "positions",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "PositionData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "BitmapImage2D_1",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "BitmapImage2D",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "obj",
    "constructObject",
    "MaterialVO",
    "readColor",
    "diffuseColor",
    "specularColor",
    "twoSided",
    "colorMap",
    "specularMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "vertices",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "scaleBy",
    "applyTransformation",
    "concat",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "getDefaultTexture",
    "chr",
    "g",
    "awayjs-core/lib/image/BitmapImage2D",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod_1",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_sprites",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "split",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "m",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertex",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "val",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "SpecularBasicMethod",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "Loader_1",
    "FNTParser_1",
    "enableAllBundled",
    "Loader",
    "enableParsers",
    "ALL_BUNDLED",
    "./AWDParser",
    "./FNTParser",
    "./MD2Parser",
    "./Max3DSParser",
    "./OBJParser",
    "awayjs-core/lib/library/Loader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\nvar AWDParser_1 = require(\"./lib/AWDParser\");\r\nexports.AWDParser = AWDParser_1.AWDParser;\r\nvar Max3DSParser_1 = require(\"./lib/Max3DSParser\");\r\nexports.Max3DSParser = Max3DSParser_1.Max3DSParser;\r\nvar MD2Parser_1 = require(\"./lib/MD2Parser\");\r\nexports.MD2Parser = MD2Parser_1.MD2Parser;\r\nvar MD5AnimParser_1 = require(\"./lib/MD5AnimParser\");\r\nexports.MD5AnimParser = MD5AnimParser_1.MD5AnimParser;\r\nvar MD5MeshParser_1 = require(\"./lib/MD5MeshParser\");\r\nexports.MD5MeshParser = MD5MeshParser_1.MD5MeshParser;\r\nvar OBJParser_1 = require(\"./lib/OBJParser\");\r\nexports.OBJParser = OBJParser_1.OBJParser;\r\nvar Parsers_1 = require(\"./lib/Parsers\");\r\nexports.Parsers = Parsers_1.Parsers;\r\n},{\"./lib/AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"./lib/MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"./lib/MD5AnimParser\":\"awayjs-parsers/lib/MD5AnimParser\",\"./lib/MD5MeshParser\":\"awayjs-parsers/lib/MD5MeshParser\",\"./lib/Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"./lib/OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"./lib/Parsers\":\"awayjs-parsers/lib/Parsers\"}],\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\":[function(require,module,exports){\n\"use strict\";\r\nvar AWD3Utils = (function () {\r\n    function AWD3Utils() {\r\n    }\r\n    AWD3Utils.BLOCKSTATE_FINALIZE = 0;\r\n    AWD3Utils.BLOCKSTATE_INVALID = 1;\r\n    AWD3Utils.BLOCKSTATE_LOAD_DEPENDENICES = 2;\r\n    AWD3Utils.BLOCKSTATE_NO_ASSET = 3;\r\n    AWD3Utils.COMPRESSIONMODE_LZMA = \"lzma\";\r\n    AWD3Utils.UNCOMPRESSED = 0;\r\n    AWD3Utils.DEFLATE = 1;\r\n    AWD3Utils.LZMA = 2;\r\n    AWD3Utils.INT8 = 1;\r\n    AWD3Utils.INT16 = 2;\r\n    AWD3Utils.INT32 = 3;\r\n    AWD3Utils.UINT8 = 4;\r\n    AWD3Utils.UINT16 = 5;\r\n    AWD3Utils.UINT32 = 6;\r\n    AWD3Utils.FLOAT32 = 7;\r\n    AWD3Utils.FLOAT64 = 8;\r\n    AWD3Utils.BOOL = 21;\r\n    AWD3Utils.COLOR = 22;\r\n    AWD3Utils.BADDR = 23;\r\n    AWD3Utils.AWDSTRING = 31;\r\n    AWD3Utils.AWDBYTEARRAY = 32;\r\n    AWD3Utils.VECTOR2x1 = 41;\r\n    AWD3Utils.VECTOR3x1 = 42;\r\n    AWD3Utils.VECTOR4x1 = 43;\r\n    AWD3Utils.MTX3x2 = 44;\r\n    AWD3Utils.MTX3x3 = 45;\r\n    AWD3Utils.MTX4x3 = 46;\r\n    AWD3Utils.MTX4x4 = 47;\r\n    return AWD3Utils;\r\n}());\r\nexports.AWD3Utils = AWD3Utils;\r\n},{}],\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\":[function(require,module,exports){\n\"use strict\";\r\nvar AWD3Utils_1 = require(\"../AWD3ParserUtils/AWD3Utils\");\r\nvar AWDBlock = (function () {\r\n    function AWDBlock(this_id, this_type) {\r\n        this.type = this_type;\r\n        this.id = this_id;\r\n        this.state = AWD3Utils_1.AWD3Utils.BLOCKSTATE_FINALIZE;\r\n        this.dependencies_data = Array();\r\n        this.dependencies_urls = Array();\r\n        if (this_type == 83) {\r\n            this.loaded_dependencies = Array(6);\r\n        }\r\n        this.loaded_dependencies_cnt = 0;\r\n    }\r\n    AWDBlock.prototype.dispose = function () {\r\n        this.id = null;\r\n        this.bytes = null;\r\n        this.errorMessages = null;\r\n        this.uvsForVertexAnimation = null;\r\n    };\r\n    AWDBlock.prototype.addError = function (errorMsg) {\r\n        if (!this.errorMessages)\r\n            this.errorMessages = new Array();\r\n        this.errorMessages.push(errorMsg);\r\n    };\r\n    return AWDBlock;\r\n}());\r\nexports.AWDBlock = AWDBlock;\r\n},{\"../AWD3ParserUtils/AWD3Utils\":\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\"}],\"awayjs-parsers/lib/AWDParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar Float3Attributes_1 = require(\"awayjs-core/lib/attributes/Float3Attributes\");\r\nvar Float2Attributes_1 = require(\"awayjs-core/lib/attributes/Float2Attributes\");\r\nvar Byte4Attributes_1 = require(\"awayjs-core/lib/attributes/Byte4Attributes\");\r\nvar BitmapImageCube_1 = require(\"awayjs-core/lib/image/BitmapImageCube\");\r\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\r\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\r\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nvar PerspectiveProjection_1 = require(\"awayjs-core/lib/projections/PerspectiveProjection\");\r\nvar OrthographicProjection_1 = require(\"awayjs-core/lib/projections/OrthographicProjection\");\r\nvar OrthographicOffCenterProjection_1 = require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\r\nvar ByteArray_1 = require(\"awayjs-core/lib/utils/ByteArray\");\r\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\r\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar DirectionalLight_1 = require(\"awayjs-display/lib/display/DirectionalLight\");\r\nvar PointLight_1 = require(\"awayjs-display/lib/display/PointLight\");\r\nvar Camera_1 = require(\"awayjs-display/lib/display/Camera\");\r\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\r\nvar Billboard_1 = require(\"awayjs-display/lib/display/Billboard\");\r\nvar Skybox_1 = require(\"awayjs-display/lib/display/Skybox\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar StaticLightPicker_1 = require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\r\nvar CubeMapShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\r\nvar DirectionalShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\r\nvar PrefabBase_1 = require(\"awayjs-display/lib/prefabs/PrefabBase\");\r\nvar PrimitiveCapsulePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\r\nvar PrimitiveConePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\r\nvar PrimitiveCubePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\r\nvar PrimitiveCylinderPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\r\nvar PrimitivePlanePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\r\nvar PrimitiveSpherePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\r\nvar PrimitiveTorusPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\r\nvar SingleCubeTexture_1 = require(\"awayjs-display/lib/textures/SingleCubeTexture\");\r\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\r\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nvar VertexAnimator_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\r\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nvar SkeletonAnimator_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\r\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nvar AmbientEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\r\nvar DiffuseDepthMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\r\nvar DiffuseCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\r\nvar DiffuseGradientMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\r\nvar DiffuseLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\r\nvar DiffuseWrapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\r\nvar EffectAlphaMaskMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\r\nvar EffectColorMatrixMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\r\nvar EffectColorTransformMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\r\nvar EffectEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\r\nvar EffectFogMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\r\nvar EffectFresnelEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\r\nvar EffectLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\r\nvar EffectRimLightMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\r\nvar NormalSimpleWaterMethod_1 = require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\r\nvar ShadowDitheredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\r\nvar ShadowFilteredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\r\nvar SpecularFresnelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\r\nvar ShadowHardMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\r\nvar SpecularAnisotropicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\r\nvar SpecularCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\r\nvar SpecularPhongMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\r\nvar ShadowNearMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\r\nvar ShadowSoftMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\r\nvar BasicMaterial_1 = require(\"awayjs-display/lib/materials/BasicMaterial\");\r\nvar AS2SceneGraphFactory_1 = require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\r\nvar Timeline_1 = require(\"awayjs-display/lib/base/Timeline\");\r\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\r\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\r\nvar TesselatedFontTable_1 = require(\"awayjs-display/lib/text/TesselatedFontTable\");\r\nvar TextFormat_1 = require(\"awayjs-display/lib/text/TextFormat\");\r\nvar AWDBlock_1 = require(\"./AWD3ParserUtils/AWDBlock\");\r\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\r\nvar Style_1 = require(\"awayjs-display/lib/base/Style\");\r\nvar Matrix_1 = require(\"awayjs-core/lib/geom/Matrix\");\r\nvar MappingMode_1 = require(\"awayjs-display/lib/textures/MappingMode\");\r\nvar ElementsType_1 = require(\"awayjs-display/lib/graphics/ElementsType\");\r\n/**\r\n * AWDParser provides a parser for the AWD data type.\r\n */\r\nvar AWDParser = (function (_super) {\r\n    __extends(AWDParser, _super);\r\n    /**\r\n     * Creates a new AWD3Parserutils object.\r\n     * @param uri The url or id of the data or file to be parsed.\r\n     * @param extra The holder for extra contextual data that the parser might need.\r\n     */\r\n    function AWDParser(view) {\r\n        if (view === void 0) { view = null; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\r\n        //set to \"true\" to have some console.logs in the Console\r\n        this._debug = false;\r\n        this._debugTimers = true;\r\n        this._startedParsing = false;\r\n        this._texture_users = {};\r\n        this._parsed_header = false;\r\n        this._time_all = 0;\r\n        this._time_graphics = 0;\r\n        this._time_graphics_bytes = 0;\r\n        this._time_timeline = 0;\r\n        this._time_fonts = 0;\r\n        this._time_textfields = 0;\r\n        this._time_sounds = 0;\r\n        this._time_textures = 0;\r\n        this._time_materials = 0;\r\n        this._time_sprites = 0;\r\n        this._num_graphics = 0;\r\n        this._num_timeline = 0;\r\n        this._num_fonts = 0;\r\n        this._num_textfields = 0;\r\n        this._num_sounds = 0;\r\n        this._num_textures = 0;\r\n        this._num_materials = 0;\r\n        this._num_sprites = 0;\r\n        //--Parser UTILS---------------------------------------------------------------------------\r\n        this.shadowMethodListProperties = {\r\n            1: AWDParser.BADDR,\r\n            2: AWDParser.BADDR,\r\n            3: AWDParser.BADDR,\r\n            101: AWDParser.PROPERTY_NUMBER,\r\n            102: AWDParser.PROPERTY_NUMBER,\r\n            103: AWDParser.PROPERTY_NUMBER,\r\n            201: AWDParser.UINT32,\r\n            202: AWDParser.UINT32,\r\n            301: AWDParser.UINT16,\r\n            302: AWDParser.UINT16,\r\n            401: AWDParser.UINT8,\r\n            402: AWDParser.UINT8,\r\n            601: AWDParser.COLOR,\r\n            602: AWDParser.COLOR,\r\n            701: AWDParser.BOOL,\r\n            702: AWDParser.BOOL,\r\n            801: AWDParser.MTX4x4 };\r\n        this.spritePoseAnimationProperties = {\r\n            1: AWDParser.BOOL,\r\n            2: AWDParser.BOOL };\r\n        this.sharedMethodListProperties = {\r\n            1: AWDParser.BADDR,\r\n            2: AWDParser.BADDR,\r\n            3: AWDParser.BADDR,\r\n            101: AWDParser.PROPERTY_NUMBER,\r\n            102: AWDParser.PROPERTY_NUMBER,\r\n            103: AWDParser.PROPERTY_NUMBER,\r\n            104: AWDParser.PROPERTY_NUMBER,\r\n            105: AWDParser.PROPERTY_NUMBER,\r\n            106: AWDParser.PROPERTY_NUMBER,\r\n            107: AWDParser.PROPERTY_NUMBER,\r\n            201: AWDParser.UINT32,\r\n            202: AWDParser.UINT32,\r\n            301: AWDParser.UINT16,\r\n            302: AWDParser.UINT16,\r\n            401: AWDParser.UINT8,\r\n            402: AWDParser.UINT8,\r\n            601: AWDParser.COLOR,\r\n            602: AWDParser.COLOR,\r\n            701: AWDParser.BOOL,\r\n            702: AWDParser.BOOL };\r\n        this._view = view;\r\n        this._blocks = new Array();\r\n        this._blocks[0] = new AWDBlock_1.AWDBlock(0, 255);\r\n        this._blocks[0].data = null; // Zero address means null in AWD\r\n        this.blendModeDic = new Array(); // used to translate ints to blendMode-strings\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.NORMAL);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.ADD);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.ALPHA);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.DARKEN);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.DIFFERENCE);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.ERASE);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.HARDLIGHT);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.INVERT);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.LAYER);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.LIGHTEN);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.MULTIPLY);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.NORMAL);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.OVERLAY);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.SCREEN);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.SHADER);\r\n        this.blendModeDic.push(BlendMode_1.BlendMode.OVERLAY);\r\n        this._depthSizeDic = new Array(); // used to translate ints to depthSize-values\r\n        this._depthSizeDic.push(256);\r\n        this._depthSizeDic.push(512);\r\n        this._depthSizeDic.push(2048);\r\n        this._depthSizeDic.push(1024);\r\n        this._version = Array(); // will contain 2 int (major-version, minor-version) for awd-version-check\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    AWDParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        return extension == \"awd\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    AWDParser.supportsData = function (data) {\r\n        return (ParserUtils_1.ParserUtils.toString(data, 3) == 'AWD');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AWDParser.prototype._iResolveDependency = function (resourceDependency) {\r\n        // this will be called when Dependency has finished loading.\r\n        // the ressource dependecniy has a id that point to the awd_block waiting for it.\r\n        //console.log(\"AWDParser resolve dependencies\";\r\n        if (resourceDependency.assets.length == 1) {\r\n            var this_block = this._blocks[parseInt(resourceDependency.id)];\r\n            if (this_block.type == 82) {\r\n                var image_asset = resourceDependency.assets[0];\r\n                this_block.data = image_asset; // Store finished asset\r\n                // Finalize texture asset to dispatch texture event, which was\r\n                // previously suppressed while the dependency was loaded.\r\n                this._pFinalizeAsset(image_asset, this_block.name);\r\n                if (this._debug)\r\n                    console.log(\"Parsed Texture: Name = \" + this_block.name);\r\n            }\r\n            else if (this_block.type == 44) {\r\n                var audio_asset = resourceDependency.assets[0];\r\n                this_block.data = audio_asset; // Store finished asset\r\n                // Finalize texture asset to dispatch texture event, which was\r\n                // previously suppressed while the dependency was loaded.\r\n                //console.log(\"Parsing audio \" + this_block.name);\r\n                this._pFinalizeAsset(audio_asset, this_block.name);\r\n                if (this._debug)\r\n                    console.log(\"Parsed WaveAudio: Name = \" + this_block.name);\r\n            }\r\n            else if (this_block.type == 83) {\r\n                this_block.loaded_dependencies[resourceDependency.sub_id] = resourceDependency.assets[0];\r\n                this_block.loaded_dependencies_cnt++;\r\n                if (this._debug)\r\n                    console.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\r\n                if (this_block.loaded_dependencies_cnt == 6) {\r\n                    var cube_image_asset = new BitmapImageCube_1.BitmapImageCube(this_block.loaded_dependencies[0].width);\r\n                    for (var i = 0; i < 6; i++)\r\n                        cube_image_asset.draw(i, this_block.loaded_dependencies[i]);\r\n                    this_block.data = cube_image_asset; // Store finished asset\r\n                    this._pFinalizeAsset(cube_image_asset, this_block.name);\r\n                    if (this._debug)\r\n                        console.log(\"Parsed CubeTexture: Name = \" + this_block.name);\r\n                }\r\n            }\r\n            if (this._debugTimers && !this._isParsing)\r\n                this.updateTimers(this_block.type);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AWDParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\r\n        //not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\r\n        // this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\r\n    };\r\n    /**\r\n     * Resolve a dependency name\r\n     *\r\n     * @param resourceDependency The dependency to be resolved.\r\n     */\r\n    AWDParser.prototype._iResolveDependencyName = function (resourceDependency, asset) {\r\n        var oldName = asset.name;\r\n        if (asset) {\r\n            var block = this._blocks[parseInt(resourceDependency.id)];\r\n            // Reset name of texture to the one defined in the AWD file,\r\n            // as opposed to whatever the image parser came up with.\r\n            asset.resetAssetPath(block.name, null, true);\r\n        }\r\n        var newName = asset.name;\r\n        asset.name = oldName;\r\n        return newName;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AWDParser.prototype._pProceedParsing = function () {\r\n        if (!this._startedParsing) {\r\n            this._byteData = this._pGetByteData(); //getByteData();\r\n            this._startedParsing = true;\r\n        }\r\n        if (!this._parsed_header) {\r\n            //----------------------------------------------------------------------------\r\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n            //----------------------------------------------------------------------------\r\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n            //----------------------------------------------------------------------------\r\n            //----------------------------------------------------------------------------\r\n            // Parse header and decompress body if needed\r\n            this.parseHeader();\r\n            switch (this._compression) {\r\n                case AWDParser.DEFLATE:\r\n                case AWDParser.LZMA:\r\n                    this._pDieWithError('Compressed AWD formats not yet supported');\r\n                    break;\r\n                case AWDParser.UNCOMPRESSED:\r\n                    this._body = this._byteData;\r\n                    break;\r\n            }\r\n            this._parsed_header = true;\r\n        }\r\n        if (this._body) {\r\n            while (this._body.getBytesAvailable() > 0 && !this.parsingPaused)\r\n                this.parseNextBlock();\r\n            //----------------------------------------------------------------------------\r\n            // Return complete status\r\n            if (this._body.getBytesAvailable() == 0) {\r\n                this.dispose();\r\n                if (this._debugTimers)\r\n                    console.log(\"Parsing total: \" + (this._time_all | 0) + \"ms\", \" | graphics: \" + this._num_graphics + \", \" + (this._time_graphics | 0) + \"ms\", \" | graphics bytes: \" + this._num_graphics + \", \" + (this._time_graphics_bytes | 0) + \"ms\", \" | timelines: \" + this._num_timeline + \", \" + (this._time_timeline | 0) + \"ms\", \" | fonts: \" + this._num_fonts + \", \" + (this._time_fonts | 0) + \"ms\", \" | sounds: \" + this._num_sounds + \", \" + (this._time_sounds | 0) + \"ms\", \" | mats: \" + this._num_materials + \", \" + (this._time_materials | 0) + \"ms\", \" | textures: \" + this._num_textures + \", \" + (this._time_textures | 0) + \"ms\", \" | sprites: \" + this._num_sprites + \", \" + (this._time_sprites | 0) + \"ms\");\r\n                return ParserBase_1.ParserBase.PARSING_DONE;\r\n            }\r\n            else {\r\n                return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n            }\r\n        }\r\n        else {\r\n            switch (this._compression) {\r\n                case AWDParser.DEFLATE:\r\n                case AWDParser.LZMA:\r\n                    if (this._debug)\r\n                        console.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\r\n                    break;\r\n            }\r\n            // Error - most likely _body not set because we do not support compression.\r\n            return ParserBase_1.ParserBase.PARSING_DONE;\r\n        }\r\n    };\r\n    AWDParser.prototype._pStartParsing = function (frameLimit) {\r\n        //create a content object for Loaders\r\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\r\n        _super.prototype._pStartParsing.call(this, frameLimit);\r\n    };\r\n    AWDParser.prototype.dispose = function () {\r\n        for (var c in this._blocks) {\r\n            var b = this._blocks[c];\r\n            b.dispose();\r\n        }\r\n    };\r\n    AWDParser.prototype.parseNextBlock = function () {\r\n        var block;\r\n        var isParsed = false;\r\n        var ns;\r\n        var type;\r\n        var flags;\r\n        var len;\r\n        //*\r\n        if (this._debugTimers)\r\n            this.start_timeing = performance.now();\r\n        //*/\r\n        this._cur_block_id = this._body.readUnsignedInt();\r\n        ns = this._body.readUnsignedByte();\r\n        type = this._body.readUnsignedByte();\r\n        flags = this._body.readUnsignedByte();\r\n        len = this._body.readUnsignedInt();\r\n        var blockCompression = BitFlags.test(flags, BitFlags.FLAG4);\r\n        var blockCompressionLZMA = BitFlags.test(flags, BitFlags.FLAG5);\r\n        if (this._accuracyOnBlocks) {\r\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\r\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\r\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\r\n        }\r\n        var blockEndAll = this._body.position + len;\r\n        if (len > this._body.getBytesAvailable()) {\r\n            this._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\r\n            this._body.position += this._body.getBytesAvailable();\r\n            return;\r\n        }\r\n        //----------------------------------------------------------------------------\r\n        // Compressed AWD Formats not yet supported\r\n        if (blockCompression) {\r\n            this._pDieWithError('Compressed AWD formats not yet supported');\r\n            this._newBlockBytes = new ByteArray_1.ByteArray();\r\n            this._body.readBytes(this._newBlockBytes, 0, len);\r\n            this._newBlockBytes.position = 0;\r\n        }\r\n        else {\r\n            this._newBlockBytes = this._body;\r\n        }\r\n        //----------------------------------------------------------------------------\r\n        // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n        //----------------------------------------------------------------------------\r\n        //this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\r\n        //----------------------------------------------------------------------------\r\n        block = new AWDBlock_1.AWDBlock(this._cur_block_id, type);\r\n        block.len = len;\r\n        var blockEndBlock = this._newBlockBytes.position + len;\r\n        if (blockCompression) {\r\n            this._pDieWithError('Compressed AWD formats not yet supported');\r\n        }\r\n        if (this._debug)\r\n            console.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n        this._blocks[this._cur_block_id] = block;\r\n        if ((this._version[0] == 3) && (this._version[1] == 0)) {\r\n            // probably should contain some info about the type of animation\r\n            var factory = new AS2SceneGraphFactory_1.AS2SceneGraphFactory(this._view);\r\n            switch (type) {\r\n                case 24:\r\n                    this.parseSpriteLibraryBlock(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 25:\r\n                    this.parseBillBoardLibraryBlock(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 44:\r\n                    this.parseAudioBlock(this._cur_block_id, factory);\r\n                    isParsed = true;\r\n                    break;\r\n                case 133:\r\n                    this.parseMovieClip(this._cur_block_id, factory);\r\n                    isParsed = true;\r\n                    break;\r\n                case 134:\r\n                    this.parseTextField(this._cur_block_id, factory);\r\n                    isParsed = true;\r\n                    break;\r\n                case 135:\r\n                    this.parseTesselatedFont(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 136:\r\n                    this.parseTextFormat(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n            }\r\n        }\r\n        if ((this._version[0] > 2) || ((this._version[0] >= 2) && (this._version[1] >= 1))) {\r\n            switch (type) {\r\n                case 11:\r\n                    this.parsePrimitves(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 31:\r\n                    this.parseSkyboxInstance(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 41:\r\n                    this.parseLight(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 42:\r\n                    this.parseCamera(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                //  case 43:\r\n                //      parseTextureProjector(_cur_block_id);\r\n                //      isParsed = true;\r\n                //      break;\r\n                case 51:\r\n                    this.parseLightPicker(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 81:\r\n                    this.parseMaterial_v1(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 83:\r\n                    this.parseCubeTexture(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 91:\r\n                    this.parseSharedMethodBlock(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 92:\r\n                    this.parseShadowMethodBlock(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 111:\r\n                    this.parseSpritePoseAnimation(this._cur_block_id, true);\r\n                    isParsed = true;\r\n                    break;\r\n                case 112:\r\n                    this.parseSpritePoseAnimation(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 113:\r\n                    this.parseVertexAnimationSet(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 122:\r\n                    this.parseAnimatorSet(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n                case 253:\r\n                    this.parseCommand(this._cur_block_id);\r\n                    isParsed = true;\r\n                    break;\r\n            }\r\n        }\r\n        if (isParsed == false) {\r\n            switch (type) {\r\n                case 1:\r\n                    this.parseGraphics(this._cur_block_id);\r\n                    break;\r\n                case 22:\r\n                    this.parseContainer(this._cur_block_id);\r\n                    break;\r\n                case 23:\r\n                    this.parseSpriteInstance(this._cur_block_id);\r\n                    break;\r\n                case 81:\r\n                    this.parseMaterial(this._cur_block_id);\r\n                    break;\r\n                case 82:\r\n                    this.parseTexture(this._cur_block_id);\r\n                    break;\r\n                case 101:\r\n                    this.parseSkeleton(this._cur_block_id);\r\n                    break;\r\n                case 102:\r\n                    this.parseSkeletonPose(this._cur_block_id);\r\n                    break;\r\n                case 103:\r\n                    this.parseSkeletonAnimation(this._cur_block_id);\r\n                    break;\r\n                case 121:\r\n                //this.parseUVAnimation(this._cur_block_id);\r\n                //break;\r\n                case 254:\r\n                    this.parseNameSpace(this._cur_block_id);\r\n                    break;\r\n                case 255:\r\n                    this.parseMetaData(this._cur_block_id);\r\n                    break;\r\n                default:\r\n                    if (this._debug)\r\n                        console.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\r\n                    this._newBlockBytes.position += len;\r\n                    break;\r\n            }\r\n        }\r\n        if (this._debug) {\r\n            if (this._newBlockBytes.position != blockEndBlock)\r\n                console.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\r\n            if (block.errorMessages) {\r\n                var len = block.errorMessages.length;\r\n                for (var msgCnt = 0; msgCnt < len; msgCnt++)\r\n                    console.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n            }\r\n            console.log(\"\\n\");\r\n        }\r\n        if (this._debugTimers && !this.parsingPaused)\r\n            this.updateTimers(type);\r\n        this._body.position = blockEndAll;\r\n        this._newBlockBytes = null;\r\n    };\r\n    AWDParser.prototype.updateTimers = function (type) {\r\n        var end_timing = performance.now();\r\n        var time_delta = end_timing - this.start_timeing;\r\n        this._time_all += time_delta;\r\n        if (type == 1) {\r\n            this._time_graphics += time_delta;\r\n            this._num_graphics++;\r\n        }\r\n        else if (type == 133) {\r\n            this._time_timeline += time_delta;\r\n            this._num_timeline++;\r\n        }\r\n        else if (type == 135) {\r\n            this._time_fonts += time_delta;\r\n            this._num_fonts++;\r\n        }\r\n        else if (type == 134) {\r\n            this._time_textfields += time_delta;\r\n            this._num_textfields++;\r\n        }\r\n        else if (type == 44) {\r\n            this._time_sounds += time_delta;\r\n            this._num_sounds++;\r\n        }\r\n        else if (type == 82) {\r\n            this._time_textures += time_delta;\r\n            this._num_textures++;\r\n        }\r\n        else if (type == 81) {\r\n            this._time_materials += time_delta;\r\n            this._num_materials++;\r\n        }\r\n        else if (type == 24) {\r\n            this._time_sprites += time_delta;\r\n            this._num_sprites++;\r\n        }\r\n    };\r\n    //--Parser Blocks---------------------------------------------------------------------------\r\n    AWDParser.prototype.parseTesselatedFont = function (blockID) {\r\n        var name = this.parseVarStr();\r\n        this._blocks[blockID].name = name;\r\n        var new_font = AssetLibrary_1.AssetLibrary.getAsset(this._blocks[blockID].name);\r\n        var newfont = false;\r\n        if (new_font == undefined) {\r\n            new_font = new Font_1.Font();\r\n            newfont = true;\r\n        }\r\n        var font_style_cnt = this._newBlockBytes.readUnsignedInt();\r\n        var font_style_char_cnt;\r\n        var font_style_name;\r\n        var new_font_style;\r\n        var font_style_char;\r\n        var attr_count = 0;\r\n        var sm_len;\r\n        var sm_end;\r\n        var str_ftype, str_type, str_len, str_end;\r\n        for (var i = 0; i < font_style_cnt; ++i) {\r\n            font_style_name = this.parseVarStr();\r\n            // dirty hack for icycle\r\n            // we use bold chars for non-latin chars, but we use regular for � sign,\r\n            // so the dirty hack is to merge the regular and the bold style\r\n            if ((this._blocks[blockID].name == \"Tahoma\") && (font_style_name == \"RegularStyle\")) {\r\n                font_style_name = \"BoldStyle\";\r\n            }\r\n            new_font_style = new_font.get_font_table(font_style_name, TesselatedFontTable_1.TesselatedFontTable.assetType);\r\n            new_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\r\n            new_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\r\n            new_font_style.ascent = this._newBlockBytes.readFloat();\r\n            new_font_style.descent = this._newBlockBytes.readFloat();\r\n            //console.log(new_font_style.get_whitespace_width());\r\n            font_style_char_cnt = this._newBlockBytes.readUnsignedInt();\r\n            for (var j = 0; j < font_style_char_cnt; ++j) {\r\n                // todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\r\n                font_style_char = this._newBlockBytes.readUnsignedInt();\r\n                var char_width = this._newBlockBytes.readFloat();\r\n                sm_len = this._newBlockBytes.readUnsignedInt();\r\n                sm_end = this._newBlockBytes.position + sm_len;\r\n                // Loop through data streams\r\n                while (this._newBlockBytes.position < sm_end) {\r\n                    // Type, field type, length\r\n                    str_type = this._newBlockBytes.readUnsignedByte();\r\n                    str_ftype = this._newBlockBytes.readUnsignedByte();\r\n                    str_len = this._newBlockBytes.readUnsignedInt();\r\n                    str_end = this._newBlockBytes.position + str_len;\r\n                    if (str_type == 2) {\r\n                        var indices = new Array();\r\n                        for (var idx = 0; this._newBlockBytes.position < str_end; idx++)\r\n                            indices[idx] = this._newBlockBytes.readUnsignedShort();\r\n                    }\r\n                    else if (str_type == 11) {\r\n                        attr_count = 20;\r\n                        var curveData = new ByteArray_1.ByteArray(str_len);\r\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\r\n                    }\r\n                    else if (str_type == 12) {\r\n                        attr_count = 12;\r\n                        var curveData = new ByteArray_1.ByteArray(str_len);\r\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\r\n                    }\r\n                    else if (str_type == 10) {\r\n                        attr_count = 28;\r\n                        var curveData = new ByteArray_1.ByteArray(str_len);\r\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\r\n                    }\r\n                    else {\r\n                        this._newBlockBytes.position = str_end;\r\n                    }\r\n                }\r\n                if (curveData) {\r\n                    var vertexBuffer = new AttributesBuffer_1.AttributesBuffer(attr_count, str_len / attr_count);\r\n                    vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\r\n                    //console.log(\"allchars[cnt1++] = ['\"+font_style_char.toString()+\"',[\"+vertexBuffer.bufferView.toString()+\"]]\");\r\n                    new_font_style.setChar(font_style_char.toString(), char_width, vertexBuffer, null);\r\n                }\r\n            }\r\n        }\r\n        this.parseProperties(null);\r\n        this.parseUserAttributes();\r\n        if (newfont) {\r\n            this._pFinalizeAsset(new_font, name);\r\n        }\r\n        this._blocks[blockID].data = new_font;\r\n        if (this._debug)\r\n            console.log(\"Parsed a font: Name = '\" + name);\r\n    };\r\n    AWDParser.prototype.parseTextFormat = function (blockID) {\r\n        var name = this.parseVarStr();\r\n        this._blocks[blockID].name = name;\r\n        var font = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var font_style_name = this.parseVarStr();\r\n        var newTextFormat = new TextFormat_1.TextFormat();\r\n        newTextFormat.font_name = font.name;\r\n        // todo:  atm in awd this will always default to get a TesselatedFontTable. need to find a way to request the correct type here\r\n        var font_table = font.get_font_table(font_style_name);\r\n        if (font_table != null) {\r\n            newTextFormat.font_style = font_style_name;\r\n            newTextFormat.font_table = font_table;\r\n        }\r\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        mat.bothSides = true;\r\n        mat.curves = true;\r\n        var num_uv_values = this._newBlockBytes.readUnsignedByte();\r\n        var uv_values = [];\r\n        for (var uvcnt = 0; uvcnt < num_uv_values; uvcnt++)\r\n            uv_values[uvcnt] = this._newBlockBytes.readFloat();\r\n        newTextFormat.uv_values = uv_values;\r\n        var format_props = this.parseProperties(AWDParser.textFormatProperties);\r\n        newTextFormat.size = format_props.get(1, 12);\r\n        newTextFormat.letterSpacing = format_props.get(2, 0);\r\n        //newTextFormat.rotated = format_props.get(3,false);\r\n        newTextFormat.kerning = format_props.get(4, true);\r\n        //newTextFormat.baseline_shift = format_props.get(5,1);\r\n        var tf_align_int = format_props.get(6, 0);\r\n        if (tf_align_int == 1) {\r\n            newTextFormat.align = \"right\";\r\n        }\r\n        else if (tf_align_int == 2) {\r\n            newTextFormat.align = \"center\";\r\n        }\r\n        else if (tf_align_int == 3) {\r\n            newTextFormat.align = \"justify\";\r\n        }\r\n        newTextFormat.indent = format_props.get(7, 0);\r\n        newTextFormat.leftMargin = format_props.get(8, 0);\r\n        newTextFormat.rightMargin = format_props.get(9, 0);\r\n        newTextFormat.leading = format_props.get(10, 0);\r\n        newTextFormat.material = mat;\r\n        this.parseUserAttributes(); // textformat has no extra-properties\r\n        //newTextFormat.extra =\r\n        this._pFinalizeAsset(newTextFormat, name);\r\n        this._blocks[blockID].data = newTextFormat;\r\n        if (this._debug)\r\n            console.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \" + font.name);\r\n    };\r\n    AWDParser.prototype.parseTextField = function (blockID, factory) {\r\n        var name = this.parseVarStr();\r\n        this._blocks[blockID].name = name;\r\n        var newTextField = factory.createTextField();\r\n        var text_field_type = this._newBlockBytes.readUnsignedByte();\r\n        newTextField.type = AWDParser.textFieldTypes[text_field_type];\r\n        if (text_field_type == 3)\r\n            newTextField.displayAsPassword = true;\r\n        //\r\n        newTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\r\n        newTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\r\n        var num_paragraphs = this._newBlockBytes.readUnsignedInt();\r\n        var complete_text = \"\";\r\n        //console.log(\"num_paragraphs  '\" + num_paragraphs);\r\n        for (var paracnt = 0; paracnt < num_paragraphs; paracnt++) {\r\n            var num_textruns = this._newBlockBytes.readUnsignedInt();\r\n            //console.log(\"num_textruns  '\" + num_textruns);\r\n            for (var textrun_cnt = 0; textrun_cnt < num_textruns; textrun_cnt++) {\r\n                var text_format = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n                var txt_length = this._newBlockBytes.readUnsignedInt();\r\n                //console.log(\"txt_length  '\" + txt_length);\r\n                if (txt_length > 0) {\r\n                    var this_txt = this._newBlockBytes.readUTFBytes(txt_length);\r\n                    //newTextField.appendText(this_txt, text_format);\r\n                    complete_text += this_txt;\r\n                }\r\n            }\r\n        }\r\n        newTextField.textFormat = text_format;\r\n        newTextField.text = complete_text;\r\n        //newTextField.construct_graphics();\r\n        // todo: optional matrix etc can be put in properties.\r\n        var props = this.parseProperties(AWDParser.textFieldProperties);\r\n        newTextField.selectable = props.get(1, false);\r\n        newTextField.border = props.get(3, false);\r\n        //newTextField.renderHTML =  props.get(4, false);\r\n        //newTextField.scrollable =  props.get(5, false);\r\n        //newTextField.text_flow =  props.get(7, 0);\r\n        //newTextField.orientationMode =  props.get(8, 0);\r\n        //newTextField.line_mode =  props.get(9, 0);\r\n        newTextField.extra = this.parseUserAttributes();\r\n        //console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n        this._pFinalizeAsset(newTextField, name);\r\n        this._blocks[blockID].data = newTextField;\r\n        if (this._debug)\r\n            console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n    };\r\n    // Block ID = 25\r\n    AWDParser.prototype.parseBillBoardLibraryBlock = function (blockID) {\r\n        var name = this.parseVarStr();\r\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        mat.bothSides = true;\r\n        var billboard = new Billboard_1.Billboard(mat);\r\n        // todo: optional matrix etc can be put in properties.\r\n        this.parseProperties(null);\r\n        billboard.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(billboard, name);\r\n        this._blocks[blockID].data = billboard;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\r\n    };\r\n    // Block ID = 24\r\n    AWDParser.prototype.parseSpriteLibraryBlock = function (blockID) {\r\n        var name = this.parseVarStr();\r\n        var data_id = this._newBlockBytes.readUnsignedInt();\r\n        var graphics = this._blocks[data_id].data;\r\n        this._blocks[blockID].geoID = data_id;\r\n        var num_materials = this._newBlockBytes.readUnsignedShort();\r\n        var materials = new Array();\r\n        var materialNames = new Array();\r\n        var mat;\r\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\r\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial());\r\n            //mat.preserveAlpha = true;\r\n            //mat.alphaBlending = true;\r\n            mat.useColorTransform = true;\r\n            materials[materials_parsed] = mat;\r\n            materialNames[materials_parsed] = mat.name;\r\n        }\r\n        var start_timeing = performance.now();\r\n        var sprite = new Sprite_1.Sprite();\r\n        graphics.copyTo(sprite.graphics);\r\n        var end_timing = performance.now();\r\n        var time_delta = end_timing - start_timeing;\r\n        this._time_graphics_bytes += time_delta;\r\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\r\n            sprite.material = materials[0];\r\n        }\r\n        else if (materials.length > 1) {\r\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\r\n            // than materials, repeat the last material for all remaining sub-sprites.\r\n            for (var i = 0; i < sprite.graphics.count; i++)\r\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\r\n        }\r\n        var count = this._newBlockBytes.readUnsignedShort();\r\n        //if(count != sprite.graphics.count)\r\n        //\tthrow new Error(\"num elements does not match num subsprites\";\r\n        for (var i = 0; i < count; i++) {\r\n            var type = this._newBlockBytes.readUnsignedByte();\r\n            var sampler = new Sampler2D_1.Sampler2D();\r\n            var graphic = sprite.graphics.getGraphicAt(i);\r\n            if (graphic) {\r\n                graphic.style = new Style_1.Style();\r\n                graphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\r\n            }\r\n            if (type == 3) {\r\n                var tx = this._newBlockBytes.readFloat();\r\n                var ty = this._newBlockBytes.readFloat();\r\n                if (graphic) {\r\n                    graphic.material.animateUVs = true;\r\n                    graphic.style.uvMatrix = new Matrix_1.Matrix(0, 0, 0, 0, tx, ty);\r\n                }\r\n            }\r\n            else if (type == 4) {\r\n                var matrix = this.parseMatrix32RawData();\r\n                if (graphic) {\r\n                    graphic.material.animateUVs = true;\r\n                    graphic.style.uvMatrix = new Matrix_1.Matrix(matrix);\r\n                }\r\n            }\r\n            else if (type == 5) {\r\n                var newMatrix = new Matrix_1.Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\r\n                if (graphic) {\r\n                    graphic.material.animateUVs = true;\r\n                    graphic.style.uvMatrix = newMatrix;\r\n                }\r\n            }\r\n            else if (type == 6) {\r\n                var x = this._newBlockBytes.readFloat();\r\n                var y = this._newBlockBytes.readFloat();\r\n                var width = this._newBlockBytes.readFloat();\r\n                var height = this._newBlockBytes.readFloat();\r\n                var matrix = this.parseMatrix32RawData();\r\n                if (graphic) {\r\n                    sampler.imageRect = new Rectangle_1.Rectangle(x, y, width, height);\r\n                    graphic.material.imageRect = true;\r\n                    graphic.material.animateUVs = true;\r\n                    graphic.style.uvMatrix = new Matrix_1.Matrix(matrix);\r\n                }\r\n            }\r\n            if (graphic) {\r\n                //check if curves are needed\r\n                if (graphic.elements.getCustomAtributes(\"curves\"))\r\n                    graphic.material.curves = true;\r\n            }\r\n            // todo: finish optional properties (spreadmode + focalpoint)\r\n            this._newBlockBytes.readUnsignedInt();\r\n        }\r\n        this.parseProperties(null);\r\n        sprite.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(sprite, name);\r\n        this._blocks[blockID].data = sprite;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\r\n    };\r\n    AWDParser.prototype.parseAudioBlock = function (blockID, factory) {\r\n        //var asset:Audio;todo create asset for audio\r\n        this._blocks[blockID].name = this.parseVarStr();\r\n        var type = this._newBlockBytes.readUnsignedByte();\r\n        var data_len;\r\n        // External\r\n        if (type == 0) {\r\n            data_len = this._newBlockBytes.readUnsignedInt();\r\n            var url;\r\n            url = this._newBlockBytes.readUTFBytes(data_len);\r\n            // todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\r\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.URLRequest(url), false, null, true);\r\n        }\r\n        else {\r\n            // todo: exporter does not export embed sounds yet\r\n            data_len = this._newBlockBytes.readUnsignedInt();\r\n            var data = new ByteArray_1.ByteArray(data_len);\r\n            this._newBlockBytes.readBytes(data, 0, data_len);\r\n            // todo parse sound from bytes\r\n            // this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\r\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n        }\r\n        // Ignore for now\r\n        this.parseProperties(null);\r\n        this._blocks[blockID].extras = this.parseUserAttributes();\r\n        this._pPauseAndRetrieveDependencies();\r\n        //this._blocks[blockID].data = asset;todo\r\n        if (this._debug)\r\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\r\n    };\r\n    //Block ID = 4\r\n    AWDParser.prototype.parseMovieClip = function (blockID, factory) {\r\n        var i;\r\n        var j;\r\n        var cmd_asset;\r\n        var new_timeline = new Timeline_1.Timeline();\r\n        var new_mc = factory.createMovieClip(new_timeline);\r\n        var name = this.parseVarStr();\r\n        // register list of potential childs\r\n        // a potential child can be reused on a timeline (added / removed / added)\r\n        // However, for each potential child, we need to register the max-number of instances that a frame contains\r\n        // we parse 2 lists of potential-childs:\r\n        // -\tthe first list contains potential-childs that are only ever instanced once per frame.\r\n        // -\tthe second list contains potential-childs that are instanced multiple times on some frames.\r\n        // on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\r\n        // hence we need to be careful to register all objects in correct order.\r\n        var num_potential_childs = this._newBlockBytes.readUnsignedShort();\r\n        for (i = 0; i < num_potential_childs; i++) {\r\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n            if (cmd_asset != null) {\r\n                new_timeline.registerPotentialChild(cmd_asset);\r\n            }\r\n            else {\r\n                //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n                //new_mc.registerPotentialChild(cmd_asset);\r\n                console.log(\"ERROR when collecting objects for timeline\");\r\n            }\r\n        }\r\n        var num_all_display_instances = num_potential_childs;\r\n        var num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\r\n        for (i = 0; i < num_potential_childs_multi_instanced; i++) {\r\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n            var num_instances = this._newBlockBytes.readUnsignedShort();\r\n            num_all_display_instances += num_instances;\r\n            if (cmd_asset != null) {\r\n                for (j = 0; j < num_instances; j++)\r\n                    new_timeline.registerPotentialChild(cmd_asset);\r\n            }\r\n            else {\r\n                for (j = 0; j < num_instances; j++) {\r\n                    //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n                    //new_mc.registerPotentialChild(cmd_asset);\r\n                    console.log(\"ERROR when collecting objects for timeline\");\r\n                }\r\n            }\r\n        }\r\n        if (this._debug)\r\n            console.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\r\n        // register list of potential sounds - for now we always have 0 sounds\r\n        var num_potential_sounds = this._newBlockBytes.readUnsignedShort();\r\n        var str_cnt = this._newBlockBytes.readUnsignedByte();\r\n        var str_len = 0;\r\n        var str_data_type = 0;\r\n        var str_type = 0;\r\n        var str_counter = 0;\r\n        for (i = 0; i < str_cnt; i++) {\r\n            // the first 6 lists are not optional and always in same order\r\n            // hence we can get type by incremental counter instead of stored uint8\r\n            if (str_counter < 6)\r\n                str_type = str_counter;\r\n            else\r\n                str_type = this._newBlockBytes.readUnsignedByte();\r\n            // get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\r\n            str_data_type = this._newBlockBytes.readUnsignedByte();\r\n            // size of this stream in byte\r\n            str_len = this._newBlockBytes.readUnsignedInt();\r\n            if (str_len > 0) {\r\n                var keyframes_start_indices_data = new ByteArray_1.ByteArray(str_len);\r\n                this._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\r\n                var new_buffer;\r\n                //console.log(\"str_data_type = \"+str_type);\r\n                switch (str_data_type) {\r\n                    case 1:\r\n                        new_buffer = new Uint8Array(keyframes_start_indices_data.arraybytes);\r\n                        break;\r\n                    case 2:\r\n                        new_buffer = new Uint16Array(keyframes_start_indices_data.arraybytes);\r\n                        break;\r\n                    case 4:\r\n                        new_buffer = new Uint32Array(keyframes_start_indices_data.arraybytes);\r\n                        break;\r\n                }\r\n                switch (str_type) {\r\n                    case 0:\r\n                        new_timeline.keyframe_durations = new_buffer;\r\n                        new_timeline.numKeyFrames = str_len / str_data_type;\r\n                        break;\r\n                    case 1:\r\n                        new_timeline.frame_command_indices = new_buffer;\r\n                        break;\r\n                    case 2:\r\n                        new_timeline.frame_recipe = new_buffer;\r\n                        break;\r\n                    case 3:\r\n                        new_timeline.command_length_stream = new_buffer;\r\n                        break;\r\n                    case 4:\r\n                        new_timeline.command_index_stream = new_buffer;\r\n                        break;\r\n                    case 5:\r\n                        new_timeline.add_child_stream = new_buffer;\r\n                        break;\r\n                    case 6:\r\n                        new_timeline.remove_child_stream = new_buffer;\r\n                        break;\r\n                    case 7:\r\n                        new_timeline.update_child_stream = new_buffer;\r\n                        break;\r\n                    case 8:\r\n                        new_timeline.update_child_props_indices_stream = new_buffer;\r\n                        break;\r\n                    case 9:\r\n                        new_timeline.update_child_props_length_stream = new_buffer;\r\n                        break;\r\n                    case 10:\r\n                        new_timeline.property_type_stream = new_buffer;\r\n                        break;\r\n                    case 11:\r\n                        new_timeline.property_index_stream = new_buffer;\r\n                        break;\r\n                    case 12:\r\n                        new_timeline.properties_stream_int = new_buffer;\r\n                        break;\r\n                }\r\n            }\r\n            str_counter++;\r\n        }\r\n        var lc = 0;\r\n        var float_array_data;\r\n        str_cnt = this._newBlockBytes.readUnsignedByte();\r\n        for (i = 0; i < str_cnt; i++) {\r\n            str_type = this._newBlockBytes.readUnsignedByte();\r\n            str_len = this._newBlockBytes.readUnsignedInt();\r\n            switch (str_type) {\r\n                case 0:\r\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n                    new_timeline.properties_stream_f32_mtx_scale_rot = new Float32Array(float_array_data.arraybytes);\r\n                    break;\r\n                case 1:\r\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n                    new_timeline.properties_stream_f32_mtx_pos = new Float32Array(float_array_data.arraybytes);\r\n                    break;\r\n                case 2:\r\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n                    new_timeline.properties_stream_f32_mtx_all = new Float32Array(float_array_data.arraybytes);\r\n                    break;\r\n                case 3:\r\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n                    new_timeline.properties_stream_f32_ct = new Float32Array(float_array_data.arraybytes);\r\n                    break;\r\n                case 4:\r\n                    str_len = this._newBlockBytes.readUnsignedShort();\r\n                    //console.log(\"start reading labels \"+str_len);\r\n                    for (lc = 0; lc < str_len; lc++) {\r\n                        new_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    str_len = this._newBlockBytes.readUnsignedShort();\r\n                    var string_props_array = [];\r\n                    for (lc = 0; lc < str_len; lc++) {\r\n                        string_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\r\n                    }\r\n                    new_timeline.properties_stream_strings = string_props_array;\r\n                    break;\r\n                case 6:\r\n                    str_len = this._newBlockBytes.readUnsignedShort();\r\n                    for (lc = 0; lc < str_len; lc++) {\r\n                        var frame_index = this._newBlockBytes.readUnsignedShort();\r\n                        var one_str_len = this._newBlockBytes.readUnsignedInt();\r\n                        //this._newBlockBytes.readUTFBytes(one_str_len);\r\n                        new_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        new_timeline.init();\r\n        var sceneID = 0;\r\n        var fps = 25;\r\n        this.parseProperties(AWDParser.movieClipProperties);\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(new_mc, name);\r\n        this._blocks[blockID].data = new_mc;\r\n        if (this._debug)\r\n            console.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\r\n    };\r\n    //Block ID = 1\r\n    AWDParser.prototype.parseGraphics = function (blockID) {\r\n        var graphics = new Graphics_1.Graphics();\r\n        // Read name and sub count\r\n        var name = this.parseVarStr();\r\n        var numElements = this._newBlockBytes.readUnsignedShort();\r\n        // Read optional properties\r\n        var props = this.parseProperties(AWDParser.graphicsProperties);\r\n        var geoScaleU = props.get(1, 1);\r\n        var geoScaleV = props.get(2, 1);\r\n        var target_start_idx = 0;\r\n        var target_vert_cnt = 0;\r\n        var element_type = ElementType.STANDART_STREAMS;\r\n        var target_element = null;\r\n        // Loop through sub sprites\r\n        for (var elements_parsed = 0; elements_parsed < numElements; elements_parsed++) {\r\n            var is_curve_elements = false;\r\n            var attr_count = 0;\r\n            var sm_len, sm_end;\r\n            var w_indices;\r\n            var weights;\r\n            target_start_idx = 0;\r\n            target_vert_cnt = 0;\r\n            element_type = ElementType.STANDART_STREAMS;\r\n            target_element = null;\r\n            sm_len = this._newBlockBytes.readUnsignedInt();\r\n            sm_end = this._newBlockBytes.position + sm_len;\r\n            var elementsProps = this.parseProperties(AWDParser.elementsProperties);\r\n            // Loop through data streams\r\n            while (this._newBlockBytes.position < sm_end) {\r\n                var idx = 0;\r\n                var str_ftype, str_type, str_len, str_end;\r\n                // Type, field type, length\r\n                str_type = this._newBlockBytes.readUnsignedByte();\r\n                str_ftype = this._newBlockBytes.readUnsignedByte();\r\n                str_len = this._newBlockBytes.readUnsignedInt();\r\n                str_end = this._newBlockBytes.position + str_len;\r\n                var x, y, z;\r\n                if (str_type == 1) {\r\n                    var verts = new Array();\r\n                    while (this._newBlockBytes.position < str_end) {\r\n                        x = this.readNumber(this._accuracyGeo);\r\n                        y = this.readNumber(this._accuracyGeo);\r\n                        z = this.readNumber(this._accuracyGeo);\r\n                        verts[idx++] = x;\r\n                        verts[idx++] = y;\r\n                        verts[idx++] = z;\r\n                    }\r\n                }\r\n                else if (str_type == 2) {\r\n                    var indices = new Array();\r\n                    while (this._newBlockBytes.position < str_end)\r\n                        indices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n                }\r\n                else if (str_type == 3) {\r\n                    var uvs = new Array();\r\n                    while (this._newBlockBytes.position < str_end)\r\n                        uvs[idx++] = this.readNumber(this._accuracyGeo);\r\n                }\r\n                else if (str_type == 4) {\r\n                    var normals = new Array();\r\n                    while (this._newBlockBytes.position < str_end)\r\n                        normals[idx++] = this.readNumber(this._accuracyGeo);\r\n                }\r\n                else if (str_type == 6) {\r\n                    w_indices = Array();\r\n                    while (this._newBlockBytes.position < str_end)\r\n                        w_indices[idx++] = this._newBlockBytes.readUnsignedShort() * 3;\r\n                }\r\n                else if (str_type == 7) {\r\n                    weights = new Array();\r\n                    while (this._newBlockBytes.position < str_end)\r\n                        weights[idx++] = this.readNumber(this._accuracyGeo);\r\n                }\r\n                else if (str_type == 8) {\r\n                    this._newBlockBytes.position = str_end;\r\n                }\r\n                else if (str_type == 9) {\r\n                    this._newBlockBytes.position = str_end;\r\n                }\r\n                else if (str_type == 10) {\r\n                    element_type = ElementType.CONCENATED_STREAMS;\r\n                    attr_count = 28;\r\n                    var curveData = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\r\n                }\r\n                else if (str_type == 11) {\r\n                    element_type = ElementType.CONCENATED_STREAMS;\r\n                    attr_count = 20;\r\n                    var curveData = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\r\n                }\r\n                else if (str_type == 12) {\r\n                    element_type = ElementType.CONCENATED_STREAMS;\r\n                    attr_count = 12;\r\n                    var curveData = new ByteArray_1.ByteArray(str_len);\r\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\r\n                }\r\n                else if (str_type == 13) {\r\n                    element_type = ElementType.SHARED_BUFFER;\r\n                    var targetGraphic = (this._blocks[this._newBlockBytes.readUnsignedInt()].data);\r\n                    var element_idx = this._newBlockBytes.readUnsignedByte();\r\n                    target_element = targetGraphic.getGraphicAt(element_idx).elements;\r\n                    target_start_idx = this._newBlockBytes.readUnsignedInt();\r\n                    target_vert_cnt = this._newBlockBytes.readUnsignedInt();\r\n                }\r\n                else {\r\n                    console.log(\"skipping unknown subgeom stream\");\r\n                    this._newBlockBytes.position = str_end;\r\n                }\r\n            }\r\n            this.parseUserAttributes(); // Ignore sub-sprite attributes for now\r\n            if (element_type == ElementType.CONCENATED_STREAMS) {\r\n                //console.log(\"str_len/attr_count = \"+str_len/attr_count)\r\n                var vertexBuffer = new AttributesBuffer_1.AttributesBuffer(attr_count, str_len / attr_count);\r\n                vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\r\n                var curve_elements = new TriangleElements_1.TriangleElements(vertexBuffer);\r\n                curve_elements.setPositions(new Float2Attributes_1.Float2Attributes(vertexBuffer));\r\n                if (attr_count == 20) {\r\n                    curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.Float3Attributes(vertexBuffer));\r\n                }\r\n                else if (attr_count == 12) {\r\n                    curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.Byte4Attributes(vertexBuffer, false));\r\n                }\r\n                if (attr_count == 28)\r\n                    curve_elements.setUVs(new Float2Attributes_1.Float2Attributes(vertexBuffer));\r\n                graphics.addGraphic(curve_elements);\r\n                if (this._debug)\r\n                    console.log(\"Parsed a TriangleElements with curves\");\r\n            }\r\n            else if (element_type == ElementType.STANDART_STREAMS) {\r\n                var triangle_elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n                if (weights)\r\n                    triangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\r\n                if (normals)\r\n                    triangle_elements.autoDeriveNormals = false;\r\n                triangle_elements.autoDeriveTangents = true;\r\n                triangle_elements.setIndices(indices);\r\n                triangle_elements.setPositions(verts);\r\n                triangle_elements.setNormals(normals);\r\n                triangle_elements.setUVs(uvs);\r\n                triangle_elements.setJointWeights(weights);\r\n                triangle_elements.setJointIndices(w_indices);\r\n                var scaleU = elementsProps.get(1, 1);\r\n                var scaleV = elementsProps.get(2, 1);\r\n                var setSubUVs = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\r\n                if ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\r\n                    setSubUVs = true;\r\n                    scaleU = geoScaleU / scaleU;\r\n                    scaleV = geoScaleV / scaleV;\r\n                }\r\n                if (setSubUVs)\r\n                    triangle_elements.scaleUV(scaleU, scaleV);\r\n                graphics.addGraphic(triangle_elements);\r\n                if (this._debug)\r\n                    console.log(\"Parsed a TriangleElements\");\r\n            }\r\n            else if (element_type == ElementType.SHARED_BUFFER) {\r\n                var graphic = graphics.addGraphic(target_element);\r\n                graphic.offset = target_start_idx;\r\n                graphic.count = target_vert_cnt;\r\n                if (this._debug)\r\n                    console.log(\"Parsed a TriangleElements that shares buffer from target geom\");\r\n            }\r\n        }\r\n        if ((geoScaleU != 1) || (geoScaleV != 1))\r\n            graphics.scaleUV(geoScaleU, geoScaleV);\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(graphics, name);\r\n        this._blocks[blockID].data = graphics;\r\n        if (this._debug)\r\n            console.log(\"Parsed Graphics: Name = \" + name);\r\n    };\r\n    //Block ID = 11\r\n    AWDParser.prototype.parsePrimitves = function (blockID) {\r\n        var name;\r\n        var prefab;\r\n        var primType;\r\n        var elements_parsed;\r\n        var props;\r\n        var bsm;\r\n        // Read name and sub count\r\n        name = this.parseVarStr();\r\n        primType = this._newBlockBytes.readUnsignedByte();\r\n        props = this.parseProperties(AWDParser.primitiveProperties);\r\n        // to do, not all properties are set on all primitives\r\n        switch (primType) {\r\n            case 1:\r\n                prefab = new PrimitivePlanePrefab_1.PrimitivePlanePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\r\n                break;\r\n            case 2:\r\n                prefab = new PrimitiveCubePrefab_1.PrimitiveCubePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\r\n                break;\r\n            case 3:\r\n                prefab = new PrimitiveSpherePrefab_1.PrimitiveSpherePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\r\n                break;\r\n            case 4:\r\n                prefab = new PrimitiveCylinderPrefab_1.PrimitiveCylinderPrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\r\n                if (!props.get(701, true))\r\n                    prefab.topClosed = false;\r\n                if (!props.get(702, true))\r\n                    prefab.bottomClosed = false;\r\n                if (!props.get(703, true))\r\n                    prefab.yUp = false;\r\n                break;\r\n            case 5:\r\n                prefab = new PrimitiveConePrefab_1.PrimitiveConePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\r\n                break;\r\n            case 6:\r\n                prefab = new PrimitiveCapsulePrefab_1.PrimitiveCapsulePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\r\n                break;\r\n            case 7:\r\n                prefab = new PrimitiveTorusPrefab_1.PrimitiveTorusPrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\r\n                break;\r\n            default:\r\n                prefab = new PrefabBase_1.PrefabBase();\r\n                console.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\r\n                break;\r\n        }\r\n        if ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\r\n        }\r\n        this.parseUserAttributes();\r\n        prefab.name = name;\r\n        this._pFinalizeAsset(prefab, name);\r\n        this._blocks[blockID].data = prefab;\r\n        if (this._debug) {\r\n            if ((primType < 0) || (primType > 7))\r\n                primType = 0;\r\n            console.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\r\n        }\r\n    };\r\n    // Block ID = 22\r\n    AWDParser.prototype.parseContainer = function (blockID) {\r\n        var name;\r\n        var mtx;\r\n        var ctr;\r\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        mtx = this.parseMatrix3D();\r\n        name = this.parseVarStr();\r\n        var parentName = \"Root (TopLevel)\";\r\n        ctr = new DisplayObjectContainer_1.DisplayObjectContainer();\r\n        ctr.transform.matrix3D = mtx;\r\n        if (parent) {\r\n            parent.addChild(ctr);\r\n            parentName = parent.name;\r\n        }\r\n        else {\r\n            //add to the content property\r\n            this._pContent.addChild(ctr);\r\n        }\r\n        // in AWD version 2.1 we read the Container properties\r\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n            var props = this.parseProperties(AWDParser.containerProperties);\r\n            ctr.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n        }\r\n        else {\r\n            this.parseProperties(null);\r\n        }\r\n        // the extraProperties should only be set for AWD2.1-Files, but is read for both versions\r\n        ctr.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(ctr, name);\r\n        this._blocks[blockID].data = ctr;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\r\n    };\r\n    // Block ID = 23\r\n    AWDParser.prototype.parseSpriteInstance = function (blockID) {\r\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var mtx = this.parseMatrix3D();\r\n        var name = this.parseVarStr();\r\n        var data_id = this._newBlockBytes.readUnsignedInt();\r\n        var asset = this._blocks[data_id].data;\r\n        var graphics;\r\n        var prefab;\r\n        var isPrefab = false;\r\n        if (asset.isAsset(Graphics_1.Graphics)) {\r\n            graphics = asset;\r\n        }\r\n        else {\r\n            isPrefab = true;\r\n            prefab = asset;\r\n        }\r\n        this._blocks[blockID].geoID = data_id;\r\n        var num_materials = this._newBlockBytes.readUnsignedShort();\r\n        var materials = new Array();\r\n        var materialNames = new Array();\r\n        var mat;\r\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\r\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial());\r\n            materials[materials_parsed] = mat;\r\n            materialNames[materials_parsed] = mat.name;\r\n        }\r\n        var sprite;\r\n        if (isPrefab) {\r\n            sprite = prefab.getNewObject();\r\n        }\r\n        else {\r\n            sprite = new Sprite_1.Sprite();\r\n            graphics.copyTo(sprite.graphics);\r\n        }\r\n        sprite.transform.matrix3D = mtx;\r\n        var parentName = \"Root (TopLevel)\";\r\n        if (parent) {\r\n            parent.addChild(sprite);\r\n            parentName = parent.name;\r\n        }\r\n        else {\r\n            //add to the content property\r\n            this._pContent.addChild(sprite);\r\n        }\r\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\r\n            sprite.material = materials[0];\r\n        }\r\n        else if (materials.length > 1) {\r\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\r\n            // than materials, repeat the last material for all remaining sub-sprites.\r\n            for (var i = 0; i < sprite.graphics.count; i++)\r\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\r\n        }\r\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n            var props = this.parseProperties(AWDParser.spriteInstanceProperties);\r\n            sprite.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n            sprite.castsShadows = props.get(5, true);\r\n        }\r\n        else {\r\n            this.parseProperties(null);\r\n        }\r\n        sprite.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(sprite, name);\r\n        this._blocks[blockID].data = sprite;\r\n        if (this._debug) {\r\n            if (isPrefab)\r\n                console.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\r\n            else\r\n                console.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\r\n        }\r\n    };\r\n    //Block ID 31\r\n    AWDParser.prototype.parseSkyboxInstance = function (blockID) {\r\n        var name = this.parseVarStr();\r\n        var asset = new Skybox_1.Skybox();\r\n        var tex = new SingleCubeTexture_1.SingleCubeTexture(this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImageCube());\r\n        asset.texture = tex;\r\n        this.parseProperties(null);\r\n        asset.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(asset, name);\r\n        this._blocks[blockID].data = asset;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\r\n    };\r\n    //Block ID = 41\r\n    AWDParser.prototype.parseLight = function (blockID) {\r\n        var light;\r\n        var newShadowMapper;\r\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var mtx = this.parseMatrix3D();\r\n        var name = this.parseVarStr();\r\n        var lightType = this._newBlockBytes.readUnsignedByte();\r\n        var props = this.parseProperties(AWDParser.lightProperties);\r\n        var shadowMapperType = props.get(9, 0);\r\n        var lightTypes = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\r\n        var shadowMapperTypes = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\r\n        if (lightType == 1) {\r\n            light = new PointLight_1.PointLight();\r\n            light.radius = props.get(1, 90000);\r\n            light.fallOff = props.get(2, 100000);\r\n            if (shadowMapperType > 0) {\r\n                if (shadowMapperType == 4) {\r\n                    newShadowMapper = new CubeMapShadowMapper_1.CubeMapShadowMapper();\r\n                }\r\n            }\r\n            light.transform.matrix3D = mtx;\r\n        }\r\n        if (lightType == 2) {\r\n            light = new DirectionalLight_1.DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\r\n            if (shadowMapperType > 0) {\r\n                if (shadowMapperType == 1) {\r\n                    newShadowMapper = new DirectionalShadowMapper_1.DirectionalShadowMapper();\r\n                }\r\n            }\r\n        }\r\n        light.color = props.get(3, 0xffffff);\r\n        light.specular = props.get(4, 1.0);\r\n        light.diffuse = props.get(5, 1.0);\r\n        light.ambientColor = props.get(7, 0xffffff);\r\n        light.ambient = props.get(8, 0.0);\r\n        // if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\r\n        if (newShadowMapper) {\r\n            if (newShadowMapper instanceof CubeMapShadowMapper_1.CubeMapShadowMapper) {\r\n                if (props.get(10, 1) != 1)\r\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\r\n            }\r\n            else {\r\n                if (props.get(10, 2) != 2)\r\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\r\n            }\r\n            light.shadowMapper = newShadowMapper;\r\n            light.castsShadows = true;\r\n        }\r\n        var parentName = \"Root (TopLevel)\";\r\n        if (parent) {\r\n            parent.addChild(light);\r\n            parentName = parent.name;\r\n        }\r\n        else {\r\n            //add to the content property\r\n            this._pContent.addChild(light);\r\n        }\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(light, name);\r\n        this._blocks[blockID].data = light;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\r\n    };\r\n    //Block ID = 43\r\n    AWDParser.prototype.parseCamera = function (blockID) {\r\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var mtx = this.parseMatrix3D();\r\n        var name = this.parseVarStr();\r\n        var projection;\r\n        this._newBlockBytes.readUnsignedByte(); //set as active camera\r\n        this._newBlockBytes.readShort(); //lengthof lenses - not used yet\r\n        var projectiontype = this._newBlockBytes.readShort();\r\n        var props = this.parseProperties(AWDParser.cameraProperties);\r\n        switch (projectiontype) {\r\n            case 5001:\r\n                projection = new PerspectiveProjection_1.PerspectiveProjection(props.get(101, 60));\r\n                break;\r\n            case 5002:\r\n                projection = new OrthographicProjection_1.OrthographicProjection(props.get(101, 500));\r\n                break;\r\n            case 5003:\r\n                projection = new OrthographicOffCenterProjection_1.OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\r\n                break;\r\n            default:\r\n                console.log(\"unsupportedLenstype\");\r\n                return;\r\n        }\r\n        var camera = new Camera_1.Camera(projection);\r\n        camera.transform.matrix3D = mtx;\r\n        var parentName = \"Root (TopLevel)\";\r\n        if (parent) {\r\n            parent.addChild(camera);\r\n            parentName = parent.name;\r\n        }\r\n        else {\r\n            //add to the content property\r\n            this._pContent.addChild(camera);\r\n        }\r\n        camera.name = name;\r\n        props = this.parseProperties(AWDParser.cameraPivotProperties);\r\n        camera.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n        camera.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(camera, name);\r\n        this._blocks[blockID].data = camera;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\r\n    };\r\n    //Block ID = 51\r\n    AWDParser.prototype.parseLightPicker = function (blockID) {\r\n        var name = this.parseVarStr();\r\n        var numLights = this._newBlockBytes.readUnsignedShort();\r\n        var lightsArray = new Array();\r\n        var lightsArrayNames = new Array();\r\n        for (var k = 0; k < numLights; k++) {\r\n            var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n            lightsArray.push(light);\r\n            lightsArrayNames.push(light.name);\r\n        }\r\n        if (lightsArray.length == 0) {\r\n            this._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\r\n            this.parseUserAttributes();\r\n            return; //return without any more parsing for this block\r\n        }\r\n        var lightPick = new StaticLightPicker_1.StaticLightPicker(lightsArray);\r\n        lightPick.name = name;\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(lightPick, name);\r\n        this._blocks[blockID].data = lightPick;\r\n        if (this._debug)\r\n            console.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\r\n    };\r\n    //Block ID = 81\r\n    AWDParser.prototype.parseMaterial = function (blockID) {\r\n        // TODO: not used\r\n        ////blockLength = block.len;\r\n        var name;\r\n        var type;\r\n        var props;\r\n        var mat;\r\n        var finalize;\r\n        var num_methods;\r\n        var methods_parsed;\r\n        var returnedArray;\r\n        name = this.parseVarStr();\r\n        type = this._newBlockBytes.readUnsignedByte();\r\n        num_methods = this._newBlockBytes.readUnsignedByte();\r\n        // Read material numerical properties\r\n        props = this.parseProperties(AWDParser.materialProperties);\r\n        methods_parsed = 0;\r\n        while (methods_parsed < num_methods) {\r\n            var method_type;\r\n            method_type = this._newBlockBytes.readUnsignedShort();\r\n            this.parseProperties(null);\r\n            this.parseUserAttributes();\r\n            methods_parsed += 1;\r\n        }\r\n        var debugString = \"\";\r\n        if (type === 1) {\r\n            debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n            var color = props.get(1, 0xffffff);\r\n            if (this.materialMode < 2) {\r\n                mat = new MethodMaterial_1.MethodMaterial(color, props.get(10, 1.0));\r\n            }\r\n            else {\r\n                mat = new MethodMaterial_1.MethodMaterial(color);\r\n                mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n            }\r\n        }\r\n        else if (type === 2) {\r\n            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(2, 0)].data);\r\n            mat = new MethodMaterial_1.MethodMaterial();\r\n            mat.ambientMethod.texture = texture;\r\n            if (this.materialMode < 2) {\r\n                mat.alphaBlending = props.get(11, false);\r\n                mat.alpha = props.get(10, 1.0);\r\n                debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\r\n            }\r\n            else {\r\n                mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\r\n            }\r\n        }\r\n        mat.extra = this.parseUserAttributes();\r\n        mat.alphaThreshold = props.get(12, 0.0);\r\n        mat.style.sampler = new Sampler2D_1.Sampler2D(props.get(13, false));\r\n        this._pFinalizeAsset(mat, name);\r\n        this._blocks[blockID].data = mat;\r\n        if (this._debug)\r\n            console.log(debugString);\r\n    };\r\n    // Block ID = 81 AWD2.1\r\n    AWDParser.prototype.parseMaterial_v1 = function (blockID) {\r\n        var mat;\r\n        var diffuseImage;\r\n        var normalImage;\r\n        var specImage;\r\n        var name = this.parseVarStr();\r\n        var type = this._newBlockBytes.readUnsignedByte();\r\n        var num_methods = this._newBlockBytes.readUnsignedByte();\r\n        var props = this.parseProperties(AWDParser.material_v1Properties);\r\n        var spezialType = props.get(4, 0);\r\n        var debugString = \"Parsed Material \";\r\n        if (spezialType >= 2) {\r\n            this._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\r\n            return;\r\n        }\r\n        if (type <= 2) {\r\n            if (this.materialMode == 1)\r\n                spezialType = 0;\r\n            else if (this.materialMode == 2)\r\n                spezialType = 1;\r\n            if (spezialType < 2) {\r\n                if (type == 1) {\r\n                    var color = props.get(1, 0xcccccc); //TODO temporarily swapped so that diffuse color goes to ambient\r\n                    if (spezialType == 1) {\r\n                        mat = new MethodMaterial_1.MethodMaterial(color);\r\n                        mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                        debugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\r\n                    }\r\n                    else {\r\n                        mat = new MethodMaterial_1.MethodMaterial(color, props.get(10, 1.0));\r\n                        mat.alphaBlending = props.get(11, false);\r\n                        debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n                    }\r\n                }\r\n                else if (type == 2) {\r\n                    var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(2, 0)].data);\r\n                    mat = new MethodMaterial_1.MethodMaterial();\r\n                    mat.ambientMethod.texture = texture;\r\n                    if (spezialType == 1) {\r\n                        mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                        debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\r\n                    }\r\n                    else {\r\n                        mat.alpha = props.get(10, 1.0);\r\n                        mat.alphaBlending = props.get(11, false);\r\n                        debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\r\n                    }\r\n                }\r\n                diffuseImage = this._blocks[props.get(17, 0)].data;\r\n                normalImage = this._blocks[props.get(3, 0)].data;\r\n                specImage = this._blocks[props.get(21, 0)].data;\r\n                mat.lightPicker = this._blocks[props.get(22, 0)].data;\r\n                mat.style.sampler = new Sampler2D_1.Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true));\r\n                mat.bothSides = props.get(7, false);\r\n                mat.alphaPremultiplied = props.get(8, false);\r\n                mat.blendMode = this.blendModeDic[props.get(9, 0)];\r\n                if (diffuseImage) {\r\n                    mat.diffuseTexture = new Single2DTexture_1.Single2DTexture(diffuseImage);\r\n                    debugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\r\n                }\r\n                if (normalImage) {\r\n                    mat.normalMethod.texture = new Single2DTexture_1.Single2DTexture(normalImage);\r\n                    debugString += \" | NormalTexture-Name = \" + normalImage.name;\r\n                }\r\n                if (specImage) {\r\n                    mat.specularMethod.texture = new Single2DTexture_1.Single2DTexture(specImage);\r\n                    debugString += \" | SpecularTexture-Name = \" + specImage.name;\r\n                }\r\n                mat.alphaThreshold = props.get(12, 0.0);\r\n                mat.ambientMethod.strength = props.get(15, 1.0);\r\n                mat.diffuseMethod.color = props.get(16, 0xffffff);\r\n                mat.specularMethod.strength = props.get(18, 1.0);\r\n                mat.specularMethod.gloss = props.get(19, 50);\r\n                mat.specularMethod.color = props.get(20, 0xffffff);\r\n                for (var methods_parsed = 0; methods_parsed < num_methods; methods_parsed++) {\r\n                    var method_type;\r\n                    method_type = this._newBlockBytes.readUnsignedShort();\r\n                    props = this.parseProperties(AWDParser.method_v1Properties);\r\n                    switch (method_type) {\r\n                        case 999:\r\n                            var effectMethod = this._blocks[props.get(1, 0)].data;\r\n                            mat.addEffectMethod(effectMethod);\r\n                            debugString += \" | EffectMethod-Name = \" + effectMethod.name;\r\n                            break;\r\n                        case 998:\r\n                            var shadowMapMethod = this._blocks[props.get(1, 0)].data;\r\n                            mat.shadowMethod = shadowMapMethod;\r\n                            debugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\r\n                            break;\r\n                        case 1:\r\n                            var cubeTexture = new SingleCubeTexture_1.SingleCubeTexture(this._blocks[props.get(1, 0)].data);\r\n                            mat.ambientMethod = new AmbientEnvMapMethod_1.AmbientEnvMapMethod();\r\n                            mat.ambientMethod.texture = cubeTexture;\r\n                            debugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\r\n                            break;\r\n                        case 51:\r\n                            mat.diffuseMethod = new DiffuseDepthMethod_1.DiffuseDepthMethod();\r\n                            debugString += \" | DiffuseDepthMethod\";\r\n                            break;\r\n                        case 52:\r\n                            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(1, 0)].data);\r\n                            mat.diffuseMethod = new DiffuseGradientMethod_1.DiffuseGradientMethod(texture);\r\n                            debugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\r\n                            break;\r\n                        case 53:\r\n                            mat.diffuseMethod = new DiffuseWrapMethod_1.DiffuseWrapMethod(props.get(101, 5));\r\n                            debugString += \" | DiffuseWrapMethod\";\r\n                            break;\r\n                        case 54:\r\n                            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(1, 0)].data);\r\n                            mat.diffuseMethod = new DiffuseLightMapMethod_1.DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\r\n                            debugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\r\n                            break;\r\n                        case 55:\r\n                            mat.diffuseMethod = new DiffuseCelMethod_1.DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\r\n                            mat.diffuseMethod.smoothness = props.get(101, 0.1);\r\n                            debugString += \" | DiffuseCelMethod\";\r\n                            break;\r\n                        case 56:\r\n                            //\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\r\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\r\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\r\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\r\n                            //\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\r\n                            break;\r\n                        case 101:\r\n                            mat.specularMethod = new SpecularAnisotropicMethod_1.SpecularAnisotropicMethod();\r\n                            debugString += \" | SpecularAnisotropicMethod\";\r\n                            break;\r\n                        case 102:\r\n                            mat.specularMethod = new SpecularPhongMethod_1.SpecularPhongMethod();\r\n                            debugString += \" | SpecularPhongMethod\";\r\n                            break;\r\n                        case 103:\r\n                            mat.specularMethod = new SpecularCelMethod_1.SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\r\n                            mat.specularMethod.smoothness = props.get(102, 0.1);\r\n                            debugString += \" | SpecularCelMethod\";\r\n                            break;\r\n                        case 104:\r\n                            mat.specularMethod = new SpecularFresnelMethod_1.SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\r\n                            mat.specularMethod.fresnelPower = props.get(101, 5);\r\n                            mat.specularMethod.normalReflectance = props.get(102, 0.1);\r\n                            debugString += \" | SpecularFresnelMethod\";\r\n                            break;\r\n                        case 151:\r\n                            break;\r\n                        case 152:\r\n                            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(1, 0)].data);\r\n                            mat.normalMethod = new NormalSimpleWaterMethod_1.NormalSimpleWaterMethod(mat.normalMethod.texture || texture, texture);\r\n                            debugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\r\n                            break;\r\n                    }\r\n                    this.parseUserAttributes();\r\n                }\r\n            }\r\n        }\r\n        else if ((type >= 3) && (type <= 7)) {\r\n            // if this is a basic material, we create it, finalize it, assign it to block-cache and return.\r\n            var color = props.get(1, 0xcccccc);\r\n            debugString += color;\r\n            var diffuseTexture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(2, 0)].data);\r\n            if (type == 5) {\r\n                diffuseTexture.mappingMode = MappingMode_1.MappingMode.LINEAR_GRADIENT;\r\n            }\r\n            else if (type == 6) {\r\n                diffuseTexture.mappingMode = MappingMode_1.MappingMode.RADIAL_GRADIENT;\r\n            }\r\n            var basic_mat = new BasicMaterial_1.BasicMaterial();\r\n            basic_mat.texture = diffuseTexture;\r\n            basic_mat.bothSides = true;\r\n            basic_mat.alphaBlending = props.get(11, false);\r\n            //basic_mat.preserveAlpha = basic_mat.alphaBlending;\r\n            //basic_mat.alphaBlending = true;\r\n            basic_mat.extra = this.parseUserAttributes();\r\n            this._pFinalizeAsset(basic_mat, name);\r\n            this._blocks[blockID].data = basic_mat;\r\n            if (this._debug)\r\n                console.log(debugString);\r\n            return;\r\n        }\r\n        mat.extra = this.parseUserAttributes();\r\n        this._pFinalizeAsset(mat, name);\r\n        this._blocks[blockID].data = mat;\r\n        if (this._debug)\r\n            console.log(debugString);\r\n    };\r\n    //Block ID = 82\r\n    AWDParser.prototype.parseTexture = function (blockID) {\r\n        this._blocks[blockID].name = this.parseVarStr();\r\n        var type = this._newBlockBytes.readUnsignedByte();\r\n        this._texture_users[this._cur_block_id] = [];\r\n        // External\r\n        if (type == 0) {\r\n            var url = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\r\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.URLRequest(url), false, null, true);\r\n        }\r\n        else {\r\n            var data_len = this._newBlockBytes.readUnsignedInt();\r\n            var data = new ByteArray_1.ByteArray(data_len);\r\n            this._newBlockBytes.readBytes(data, 0, data_len);\r\n            //\r\n            // AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\r\n            //\r\n            // Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\r\n            // This gives the browser time to initialise image width / height.\r\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n        }\r\n        // Ignore for now\r\n        this.parseProperties(null);\r\n        this._blocks[blockID].extras = this.parseUserAttributes();\r\n        this._pPauseAndRetrieveDependencies();\r\n        if (this._debug)\r\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\r\n    };\r\n    //Block ID = 83\r\n    AWDParser.prototype.parseCubeTexture = function (blockID) {\r\n        //blockLength = block.len;\r\n        var data_len;\r\n        var i;\r\n        this._texture_users[this._cur_block_id] = [];\r\n        var type = this._newBlockBytes.readUnsignedByte();\r\n        this._blocks[blockID].name = this.parseVarStr();\r\n        for (i = 0; i < 6; i++) {\r\n            this._texture_users[this._cur_block_id] = [];\r\n            // External\r\n            if (type == 0) {\r\n                data_len = this._newBlockBytes.readUnsignedInt();\r\n                var url;\r\n                url = this._newBlockBytes.readUTFBytes(data_len);\r\n                this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.URLRequest(url), false, null, true, i);\r\n            }\r\n            else {\r\n                data_len = this._newBlockBytes.readUnsignedInt();\r\n                var data = new ByteArray_1.ByteArray(data_len);\r\n                this._newBlockBytes.readBytes(data, 0, data_len);\r\n                this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils_1.ParserUtils.byteArrayToImage(data), true, i);\r\n            }\r\n        }\r\n        // Ignore for now\r\n        this.parseProperties(null);\r\n        this._blocks[blockID].extras = this.parseUserAttributes();\r\n        this._pPauseAndRetrieveDependencies();\r\n        if (this._debug)\r\n            console.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\r\n    };\r\n    //Block ID = 91\r\n    AWDParser.prototype.parseSharedMethodBlock = function (blockID) {\r\n        var asset;\r\n        this._blocks[blockID].name = this.parseVarStr();\r\n        asset = this.parseSharedMethodList(blockID);\r\n        this.parseUserAttributes();\r\n        this._blocks[blockID].data = asset;\r\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\r\n        this._blocks[blockID].data = asset;\r\n        if (this._debug)\r\n            console.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\r\n    };\r\n    //Block ID = 92\r\n    AWDParser.prototype.parseShadowMethodBlock = function (blockID) {\r\n        this._blocks[blockID].name = this.parseVarStr();\r\n        var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var asset = this.parseShadowMethodList(light, blockID);\r\n        if (!asset)\r\n            return;\r\n        this.parseUserAttributes(); // Ignore for now\r\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\r\n        this._blocks[blockID].data = asset;\r\n        if (this._debug)\r\n            console.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\r\n    };\r\n    //Block ID = 253\r\n    AWDParser.prototype.parseCommand = function (blockID) {\r\n        var hasBlocks = (this._newBlockBytes.readUnsignedByte() == 1);\r\n        var parentObject = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var targetObject;\r\n        var mtx = this.parseMatrix3D();\r\n        var name = this.parseVarStr();\r\n        var numCommands = this._newBlockBytes.readShort();\r\n        var typeCommand = this._newBlockBytes.readShort();\r\n        var props = this.parseProperties(AWDParser.commandProperties);\r\n        switch (typeCommand) {\r\n            case 1:\r\n                targetObject = this._blocks[props.get(1, 0)].data;\r\n                targetObject.transform.matrix3D = mtx;\r\n                if (parentObject)\r\n                    parentObject.addChild(targetObject);\r\n                break;\r\n        }\r\n        if (targetObject) {\r\n            props = this.parseProperties(AWDParser.targetProperties);\r\n            targetObject.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n            targetObject.extra = this.parseUserAttributes();\r\n        }\r\n        this._blocks[blockID].data = targetObject;\r\n        if (this._debug)\r\n            console.log(\"Parsed a CommandBlock: Name = '\" + name);\r\n    };\r\n    //blockID 255\r\n    AWDParser.prototype.parseMetaData = function (blockID) {\r\n        var props = this.parseProperties(AWDParser.metaDataProperties);\r\n        if (this._debug) {\r\n            console.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\r\n            console.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\r\n            console.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\r\n            console.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\r\n            console.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\r\n        }\r\n    };\r\n    //blockID 254\r\n    AWDParser.prototype.parseNameSpace = function (blockID) {\r\n        var id = this._newBlockBytes.readUnsignedByte();\r\n        var nameSpaceString = this.parseVarStr();\r\n        if (this._debug)\r\n            console.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\r\n    };\r\n    // this functions reads and creates a ShadowMethodMethod\r\n    AWDParser.prototype.parseShadowMethodList = function (light, blockID) {\r\n        var methodType = this._newBlockBytes.readUnsignedShort();\r\n        var shadowMethod;\r\n        var props = this.parseProperties(this.shadowMethodListProperties);\r\n        var targetID;\r\n        var returnedArray;\r\n        switch (methodType) {\r\n            //\t\t\t\tcase 1001: //CascadeShadowMapMethod\r\n            //\t\t\t\t\ttargetID = props.get(1, 0);\r\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n            //\t\t\t\t\tif (!returnedArray[0]) {\r\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\r\n            //\t\t\t\t\t\treturn shadowMethod;\r\n            //\t\t\t\t\t}\r\n            //\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\r\n            //\t\t\t\t\tbreak;\r\n            case 1002:\r\n                shadowMethod = new ShadowNearMethod_1.ShadowNearMethod(this._blocks[props.get(1, 0)].data);\r\n                break;\r\n            case 1101:\r\n                shadowMethod = new ShadowFilteredMethod_1.ShadowFilteredMethod(light);\r\n                shadowMethod.alpha = props.get(101, 1);\r\n                shadowMethod.epsilon = props.get(102, 0.002);\r\n                break;\r\n            case 1102:\r\n                shadowMethod = new ShadowDitheredMethod_1.ShadowDitheredMethod(light, props.get(201, 5));\r\n                shadowMethod.alpha = props.get(101, 1);\r\n                shadowMethod.epsilon = props.get(102, 0.002);\r\n                shadowMethod.range = props.get(103, 1);\r\n                break;\r\n            case 1103:\r\n                shadowMethod = new ShadowSoftMethod_1.ShadowSoftMethod(light, props.get(201, 5));\r\n                shadowMethod.alpha = props.get(101, 1);\r\n                shadowMethod.epsilon = props.get(102, 0.002);\r\n                shadowMethod.range = props.get(103, 1);\r\n                break;\r\n            case 1104:\r\n                shadowMethod = new ShadowHardMethod_1.ShadowHardMethod(light);\r\n                shadowMethod.alpha = props.get(101, 1);\r\n                shadowMethod.epsilon = props.get(102, 0.002);\r\n                break;\r\n        }\r\n        this.parseUserAttributes();\r\n        return shadowMethod;\r\n    };\r\n    //Block ID 101\r\n    AWDParser.prototype.parseSkeleton = function (blockID /*uint*/) {\r\n        var name = this.parseVarStr();\r\n        var num_joints = this._newBlockBytes.readUnsignedShort();\r\n        var skeleton = new Skeleton_1.Skeleton();\r\n        this.parseProperties(null); // Discard properties for now\r\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\r\n            var joint;\r\n            var ibp;\r\n            // Ignore joint id\r\n            this._newBlockBytes.readUnsignedShort();\r\n            joint = new SkeletonJoint_1.SkeletonJoint();\r\n            joint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\r\n            joint.name = this.parseVarStr();\r\n            ibp = this.parseMatrix3D();\r\n            joint.inverseBindPose = ibp.rawData;\r\n            // Ignore joint props/attributes for now\r\n            this.parseProperties(null);\r\n            this.parseUserAttributes();\r\n            skeleton.joints.push(joint);\r\n        }\r\n        // Discard attributes for now\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(skeleton, name);\r\n        this._blocks[blockID].data = skeleton;\r\n        if (this._debug)\r\n            console.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\r\n    };\r\n    //Block ID = 102\r\n    AWDParser.prototype.parseSkeletonPose = function (blockID /*uint*/) {\r\n        var name = this.parseVarStr();\r\n        var num_joints = this._newBlockBytes.readUnsignedShort();\r\n        this.parseProperties(null); // Ignore properties for now\r\n        var pose = new SkeletonPose_1.SkeletonPose();\r\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\r\n            var joint_pose;\r\n            var has_transform;\r\n            joint_pose = new JointPose_1.JointPose();\r\n            has_transform = this._newBlockBytes.readUnsignedByte();\r\n            if (has_transform == 1) {\r\n                var mtx_data = this.parseMatrix43RawData();\r\n                var mtx = new Matrix3D_1.Matrix3D(mtx_data);\r\n                joint_pose.orientation.fromMatrix(mtx);\r\n                joint_pose.translation.copyFrom(mtx.position);\r\n                pose.jointPoses[joints_parsed] = joint_pose;\r\n            }\r\n        }\r\n        // Skip attributes for now\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(pose, name);\r\n        this._blocks[blockID].data = pose;\r\n        if (this._debug)\r\n            console.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\r\n    };\r\n    //blockID 103\r\n    AWDParser.prototype.parseSkeletonAnimation = function (blockID /*uint*/) {\r\n        var frame_dur;\r\n        var pose_id;\r\n        var name = this.parseVarStr();\r\n        var clip = new SkeletonClipNode_1.SkeletonClipNode();\r\n        var num_frames = this._newBlockBytes.readUnsignedShort();\r\n        this.parseProperties(null); // Ignore properties for now\r\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\r\n            pose_id = this._newBlockBytes.readUnsignedInt();\r\n            frame_dur = this._newBlockBytes.readUnsignedShort();\r\n            clip.addFrame(this._blocks[pose_id].data, frame_dur);\r\n        }\r\n        if (clip.frames.length == 0) {\r\n            this._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\r\n            return;\r\n        }\r\n        // Ignore attributes for now\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(clip, name);\r\n        this._blocks[blockID].data = clip;\r\n        if (this._debug)\r\n            console.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\r\n    };\r\n    //Block ID = 111 /  Block ID = 112\r\n    AWDParser.prototype.parseSpritePoseAnimation = function (blockID /*uint*/, poseOnly) {\r\n        if (poseOnly === void 0) { poseOnly = false; }\r\n        var subSpriteParsed;\r\n        var x;\r\n        var y;\r\n        var z;\r\n        var str_len;\r\n        var str_end;\r\n        var elements;\r\n        var idx = 0;\r\n        var clip = new VertexClipNode_1.VertexClipNode();\r\n        var indices;\r\n        var verts;\r\n        var streamtypes = new Array();\r\n        var props;\r\n        var name = this.parseVarStr();\r\n        var geo_id = this._newBlockBytes.readUnsignedInt();\r\n        var graphics = this._blocks[geo_id].data;\r\n        var uvs = this.getUVForVertexAnimation(geo_id);\r\n        var num_frames = (!poseOnly) ? this._newBlockBytes.readUnsignedShort() : 1;\r\n        var num_subsprites = this._newBlockBytes.readUnsignedShort();\r\n        var num_Streams = this._newBlockBytes.readUnsignedShort();\r\n        for (var streamsParsed = 0; streamsParsed < num_Streams; streamsParsed++)\r\n            streamtypes.push(this._newBlockBytes.readUnsignedShort());\r\n        props = this.parseProperties(this.spritePoseAnimationProperties);\r\n        clip.looping = props.get(1, true);\r\n        clip.stitchFinalFrame = props.get(2, false);\r\n        var frame_dur;\r\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\r\n            frame_dur = this._newBlockBytes.readUnsignedShort();\r\n            graphics = new Graphics_1.Graphics();\r\n            subSpriteParsed = 0;\r\n            while (subSpriteParsed < num_subsprites) {\r\n                streamsParsed = 0;\r\n                str_len = this._newBlockBytes.readUnsignedInt();\r\n                str_end = this._newBlockBytes.position + str_len;\r\n                while (streamsParsed < num_Streams) {\r\n                    if (streamtypes[streamsParsed] == 1) {\r\n                        indices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\r\n                        verts = new Array();\r\n                        idx = 0;\r\n                        while (this._newBlockBytes.position < str_end) {\r\n                            x = this.readNumber(this._accuracyGeo);\r\n                            y = this.readNumber(this._accuracyGeo);\r\n                            z = this.readNumber(this._accuracyGeo);\r\n                            verts[idx++] = x;\r\n                            verts[idx++] = y;\r\n                            verts[idx++] = z;\r\n                        }\r\n                        elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n                        elements.setIndices(indices);\r\n                        elements.setPositions(verts);\r\n                        elements.setUVs(uvs[subSpriteParsed]);\r\n                        elements.setNormals(null);\r\n                        elements.setTangents(null);\r\n                        elements.autoDeriveNormals = false;\r\n                        elements.autoDeriveTangents = false;\r\n                        subSpriteParsed++;\r\n                        graphics.addGraphic(elements);\r\n                    }\r\n                    else\r\n                        this._newBlockBytes.position = str_end;\r\n                    streamsParsed++;\r\n                }\r\n            }\r\n            clip.addFrame(graphics, frame_dur);\r\n        }\r\n        this.parseUserAttributes();\r\n        this._pFinalizeAsset(clip, name);\r\n        this._blocks[blockID].data = clip;\r\n        if (this._debug)\r\n            console.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\r\n    };\r\n    //BlockID 113\r\n    AWDParser.prototype.parseVertexAnimationSet = function (blockID /*uint*/) {\r\n        var name = this.parseVarStr();\r\n        var num_frames = this._newBlockBytes.readUnsignedShort();\r\n        var props = this.parseProperties(AWDParser.vertexAnimationSetProperties);\r\n        var skeletonFrames = new Array();\r\n        var vertexFrames = new Array();\r\n        var clipNode;\r\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\r\n            clipNode = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n            if (clipNode instanceof VertexClipNode_1.VertexClipNode)\r\n                vertexFrames.push(clipNode);\r\n            else if (clipNode instanceof SkeletonClipNode_1.SkeletonClipNode)\r\n                skeletonFrames.push(clipNode);\r\n        }\r\n        if ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\r\n            this._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\r\n            return;\r\n        }\r\n        this.parseUserAttributes();\r\n        if (vertexFrames.length > 0) {\r\n            var newVertexAnimationSet = new VertexAnimationSet_1.VertexAnimationSet();\r\n            for (var i = 0; i < vertexFrames.length; i++)\r\n                newVertexAnimationSet.addAnimation(vertexFrames[i]);\r\n            this._pFinalizeAsset(newVertexAnimationSet, name);\r\n            this._blocks[blockID].data = newVertexAnimationSet;\r\n            if (this._debug)\r\n                console.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\r\n        }\r\n        else if (skeletonFrames.length > 0) {\r\n            var newSkeletonAnimationSet = new SkeletonAnimationSet_1.SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\r\n            for (var i = 0; i < skeletonFrames.length; i++)\r\n                newSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\r\n            this._pFinalizeAsset(newSkeletonAnimationSet, name);\r\n            this._blocks[blockID].data = newSkeletonAnimationSet;\r\n            if (this._debug)\r\n                console.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\r\n        }\r\n    };\r\n    //BlockID 122\r\n    AWDParser.prototype.parseAnimatorSet = function (blockID /*uint*/) {\r\n        var name = this.parseVarStr();\r\n        var type = this._newBlockBytes.readUnsignedShort();\r\n        var props = this.parseProperties(AWDParser.animatorSetProperties);\r\n        var targetAnimationSet = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n        var targetSpritees = new Array();\r\n        var targetSpriteLength = this._newBlockBytes.readUnsignedShort();\r\n        for (var i = 0; i < targetSpriteLength; i++)\r\n            targetSpritees.push(this._blocks[this._newBlockBytes.readUnsignedInt()].data);\r\n        var activeState = this._newBlockBytes.readUnsignedShort();\r\n        var autoplay = (this._newBlockBytes.readUnsignedByte() == 1);\r\n        this.parseUserAttributes();\r\n        this.parseUserAttributes();\r\n        var thisAnimator;\r\n        if (type == 1)\r\n            thisAnimator = new SkeletonAnimator_1.SkeletonAnimator(targetAnimationSet, this._blocks[props.get(1, 0)].data);\r\n        else if (type == 2)\r\n            thisAnimator = new VertexAnimator_1.VertexAnimator(targetAnimationSet);\r\n        this._pFinalizeAsset(thisAnimator, name);\r\n        this._blocks[blockID].data = thisAnimator;\r\n        for (i = 0; i < targetSpritees.length; i++) {\r\n            if (type == 1)\r\n                targetSpritees[i].animator = thisAnimator;\r\n            else if (type == 2)\r\n                targetSpritees[i].animator = thisAnimator;\r\n        }\r\n        if (this._debug)\r\n            console.log(\"Parsed a Animator: Name = \" + name);\r\n    };\r\n    // this functions reads and creates a EffectMethod\r\n    AWDParser.prototype.parseSharedMethodList = function (blockID) {\r\n        var methodType = this._newBlockBytes.readUnsignedShort();\r\n        var effectMethodReturn;\r\n        var props = this.parseProperties(this.sharedMethodListProperties);\r\n        switch (methodType) {\r\n            // Effect Methods\r\n            case 401:\r\n                effectMethodReturn = new EffectColorMatrixMethod_1.EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\r\n                break;\r\n            case 402:\r\n                effectMethodReturn = new EffectColorTransformMethod_1.EffectColorTransformMethod();\r\n                var offCol = props.get(601, 0x00000000);\r\n                effectMethodReturn.colorTransform = new ColorTransform_1.ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\r\n                break;\r\n            case 403:\r\n                effectMethodReturn = new EffectEnvMapMethod_1.EffectEnvMapMethod(new SingleCubeTexture_1.SingleCubeTexture(this._blocks[props.get(1, 0)].data), props.get(101, 1));\r\n                var targetID = props.get(2, 0);\r\n                if (targetID > 0) {\r\n                }\r\n                break;\r\n            case 404:\r\n                effectMethodReturn = new EffectLightMapMethod_1.EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\r\n                break;\r\n            //\t\t\t\tcase 405: //ProjectiveTextureMethod\r\n            //\t\t\t\t\ttargetID = props.get(1, 0);\r\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\r\n            //\t\t\t\t\tif (!returnedArray[0])\r\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\r\n            //\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\r\n            //\t\t\t\t\tbreak;\r\n            case 406:\r\n                effectMethodReturn = new EffectRimLightMethod_1.EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\r\n                break;\r\n            case 407:\r\n                effectMethodReturn = new EffectAlphaMaskMethod_1.EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\r\n                break;\r\n            //\t\t\t\tcase 408: //RefractionEnvMapMethod\r\n            //\t\t\t\t\ttargetID = props.get(1, 0);\r\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n            //\t\t\t\t\tif (!returnedArray[0])\r\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\r\n            //\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\r\n            //\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\r\n            //\t\t\t\t\tbreak;\r\n            //\t\t\t\tcase 409: //OutlineMethod\r\n            //\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\r\n            //\t\t\t\t\tbreak;\r\n            case 410:\r\n                effectMethodReturn = new EffectFresnelEnvMapMethod_1.EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\r\n                break;\r\n            case 411:\r\n                effectMethodReturn = new EffectFogMethod_1.EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\r\n                break;\r\n        }\r\n        this.parseUserAttributes();\r\n        return effectMethodReturn;\r\n    };\r\n    AWDParser.prototype.parseUserAttributes = function () {\r\n        var list_len = this._newBlockBytes.readUnsignedInt();\r\n        if (list_len > 0) {\r\n            var list_end = this._newBlockBytes.position + list_len;\r\n            var attributes = {};\r\n            for (var attibuteCnt = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\r\n                var ns_id;\r\n                var attr_key;\r\n                var attr_type;\r\n                var attr_len;\r\n                var attr_val;\r\n                // TODO: Properly tend to namespaces in attributes\r\n                ns_id = this._newBlockBytes.readUnsignedByte();\r\n                attr_key = this.parseVarStr();\r\n                attr_type = this._newBlockBytes.readUnsignedByte();\r\n                attr_len = this._newBlockBytes.readUnsignedInt();\r\n                if ((this._newBlockBytes.position + attr_len) > list_end) {\r\n                    console.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\r\n                    this._newBlockBytes.position = list_end;\r\n                    return attributes;\r\n                }\r\n                switch (attr_type) {\r\n                    case AWDParser.AWDSTRING:\r\n                        attr_val = this._newBlockBytes.readUTFBytes(attr_len);\r\n                        break;\r\n                    case AWDParser.INT8:\r\n                        attr_val = this._newBlockBytes.readByte();\r\n                        break;\r\n                    case AWDParser.INT16:\r\n                        attr_val = this._newBlockBytes.readShort();\r\n                        break;\r\n                    case AWDParser.INT32:\r\n                        attr_val = this._newBlockBytes.readInt();\r\n                        break;\r\n                    case AWDParser.BOOL:\r\n                    case AWDParser.UINT8:\r\n                        attr_val = this._newBlockBytes.readUnsignedByte();\r\n                        break;\r\n                    case AWDParser.UINT16:\r\n                        attr_val = this._newBlockBytes.readUnsignedShort();\r\n                        break;\r\n                    case AWDParser.UINT32:\r\n                    case AWDParser.BADDR:\r\n                        attr_val = this._newBlockBytes.readUnsignedInt();\r\n                        break;\r\n                    case AWDParser.FLOAT32:\r\n                        attr_val = this._newBlockBytes.readFloat();\r\n                        break;\r\n                    case AWDParser.FLOAT64:\r\n                        attr_val = this._newBlockBytes.readDouble();\r\n                        break;\r\n                    default:\r\n                        attr_val = 'unimplemented attribute type ' + attr_type;\r\n                        this._newBlockBytes.position += attr_len;\r\n                        break;\r\n                }\r\n                attributes[attr_key] = attr_val;\r\n                if (this._debug)\r\n                    console.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\r\n            }\r\n        }\r\n        return attributes;\r\n    };\r\n    AWDParser.prototype.parseProperties = function (expected) {\r\n        var list_len = this._newBlockBytes.readUnsignedInt();\r\n        var props = new AWDProperties();\r\n        var list_end = this._newBlockBytes.position + list_len;\r\n        if (expected) {\r\n            var len;\r\n            var key;\r\n            var type;\r\n            for (var propertyCnt = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\r\n                key = this._newBlockBytes.readUnsignedShort();\r\n                len = this._newBlockBytes.readUnsignedInt();\r\n                if ((this._newBlockBytes.position + len) > list_end) {\r\n                    console.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\r\n                    this._newBlockBytes.position = list_end;\r\n                    return props;\r\n                }\r\n                if (expected[key]) {\r\n                    type = expected[key];\r\n                    props.set(key, this.parseAttrValue(type, len));\r\n                }\r\n                else {\r\n                    this._newBlockBytes.position += len;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._newBlockBytes.position = list_end;\r\n        }\r\n        return props;\r\n    };\r\n    AWDParser.prototype.parseAttrValue = function (type, len) {\r\n        var elem_len;\r\n        var read_func;\r\n        var accuracy;\r\n        switch (type) {\r\n            case AWDParser.BOOL:\r\n            case AWDParser.INT8:\r\n                elem_len = 1;\r\n                read_func = this._newBlockBytes.readByte;\r\n                break;\r\n            case AWDParser.INT16:\r\n                elem_len = 2;\r\n                read_func = this._newBlockBytes.readShort;\r\n                break;\r\n            case AWDParser.INT32:\r\n                elem_len = 4;\r\n                read_func = this._newBlockBytes.readInt;\r\n                break;\r\n            case AWDParser.UINT8:\r\n                elem_len = 1;\r\n                read_func = this._newBlockBytes.readUnsignedByte;\r\n                break;\r\n            case AWDParser.UINT16:\r\n                elem_len = 2;\r\n                read_func = this._newBlockBytes.readUnsignedShort;\r\n                break;\r\n            case AWDParser.UINT32:\r\n            case AWDParser.COLOR:\r\n            case AWDParser.BADDR:\r\n                elem_len = 4;\r\n                read_func = this._newBlockBytes.readUnsignedInt;\r\n                break;\r\n            case AWDParser.FLOAT32:\r\n                elem_len = 4;\r\n                read_func = this._newBlockBytes.readFloat;\r\n                break;\r\n            case AWDParser.FLOAT64:\r\n                elem_len = 8;\r\n                read_func = this._newBlockBytes.readDouble;\r\n                break;\r\n            case AWDParser.AWDSTRING:\r\n                return this._newBlockBytes.readUTFBytes(len);\r\n            case AWDParser.VECTOR2x1:\r\n            case AWDParser.VECTOR3x1:\r\n            case AWDParser.VECTOR4x1:\r\n            case AWDParser.MTX3x2:\r\n            case AWDParser.MTX3x3:\r\n            case AWDParser.MTX4x3:\r\n            case AWDParser.MTX4x4:\r\n                elem_len = 8;\r\n                read_func = this._newBlockBytes.readDouble;\r\n                break;\r\n            case AWDParser.GEO_NUMBER:\r\n                accuracy = this._accuracyGeo;\r\n            case AWDParser.MATRIX_NUMBER:\r\n                accuracy = this._accuracyMatrix;\r\n            case AWDParser.PROPERTY_NUMBER:\r\n                accuracy = this._accuracyProps;\r\n            default:\r\n                if (accuracy) {\r\n                    elem_len = 8;\r\n                    read_func = this._newBlockBytes.readDouble;\r\n                }\r\n                else {\r\n                    elem_len = 4;\r\n                    read_func = this._newBlockBytes.readFloat;\r\n                }\r\n        }\r\n        if (elem_len < len) {\r\n            var list = [];\r\n            var num_elems = len / elem_len;\r\n            for (var num_read = 0; num_read < num_elems; num_read++)\r\n                list[num_read] = read_func.call(this._newBlockBytes);\r\n            return list;\r\n        }\r\n        else {\r\n            return read_func.call(this._newBlockBytes);\r\n        }\r\n    };\r\n    AWDParser.prototype.parseHeader = function () {\r\n        this._byteData.position = 3; // Skip magic string and parse version\r\n        this._version[0] = this._byteData.readUnsignedByte();\r\n        this._version[1] = this._byteData.readUnsignedByte();\r\n        var flags = this._byteData.readUnsignedShort(); // Parse bit flags\r\n        this._streaming = BitFlags.test(flags, BitFlags.FLAG1);\r\n        // if we set _accuracyOnBlocks, the precision-values are read from each block-header.\r\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\r\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\r\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\r\n        }\r\n        this._compression = this._byteData.readUnsignedByte(); // compression\r\n        if (this._debug) {\r\n            console.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\r\n            console.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n        }\r\n        // Check file integrity\r\n        var body_len = this._byteData.readUnsignedInt();\r\n        if (!this._streaming && body_len != this._byteData.getBytesAvailable())\r\n            this._pDieWithError('AWD2 body length does not match header integrity field');\r\n    };\r\n    // Helper - functions\r\n    AWDParser.prototype.getUVForVertexAnimation = function (spriteID /*uint*/) {\r\n        if (this._blocks[spriteID].data instanceof Sprite_1.Sprite)\r\n            spriteID = this._blocks[spriteID].geoID;\r\n        if (this._blocks[spriteID].uvsForVertexAnimation)\r\n            return this._blocks[spriteID].uvsForVertexAnimation;\r\n        var graphics = this._blocks[spriteID].data;\r\n        var elements;\r\n        var uvsForVertexAnimation = this._blocks[spriteID].uvsForVertexAnimation = new Array();\r\n        var len = graphics.count;\r\n        for (var geoCnt = 0; geoCnt < len; geoCnt++) {\r\n            elements = graphics.getGraphicAt(geoCnt).elements;\r\n            uvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\r\n        }\r\n        return this._blocks[spriteID].uvsForVertexAnimation;\r\n    };\r\n    AWDParser.prototype.parseVarStr = function () {\r\n        return this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\r\n    };\r\n    AWDParser.prototype.readNumber = function (precision) {\r\n        if (precision === void 0) { precision = false; }\r\n        if (precision)\r\n            return this._newBlockBytes.readDouble();\r\n        return this._newBlockBytes.readFloat();\r\n    };\r\n    AWDParser.prototype.parseMatrix3D = function () {\r\n        return new Matrix3D_1.Matrix3D(this.parseMatrix43RawData());\r\n    };\r\n    AWDParser.prototype.parseMatrix32RawData = function () {\r\n        var mtx_raw = new Float32Array(6);\r\n        for (var i = 0; i < 6; i++)\r\n            mtx_raw[i] = this._newBlockBytes.readFloat();\r\n        return mtx_raw;\r\n    };\r\n    AWDParser.prototype.parseMatrix43RawData = function () {\r\n        var mtx_raw = new Float32Array(16);\r\n        mtx_raw[0] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[1] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[2] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[3] = 0.0;\r\n        mtx_raw[4] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[5] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[6] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[7] = 0.0;\r\n        mtx_raw[8] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[9] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[10] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[11] = 0.0;\r\n        mtx_raw[12] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[13] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[14] = this.readNumber(this._accuracyMatrix);\r\n        mtx_raw[15] = 1.0;\r\n        //TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\r\n        if (isNaN(mtx_raw[0])) {\r\n            mtx_raw[0] = 1;\r\n            mtx_raw[1] = 0;\r\n            mtx_raw[2] = 0;\r\n            mtx_raw[4] = 0;\r\n            mtx_raw[5] = 1;\r\n            mtx_raw[6] = 0;\r\n            mtx_raw[8] = 0;\r\n            mtx_raw[9] = 0;\r\n            mtx_raw[10] = 1;\r\n            mtx_raw[12] = 0;\r\n            mtx_raw[13] = 0;\r\n            mtx_raw[14] = 0;\r\n        }\r\n        return mtx_raw;\r\n    };\r\n    AWDParser.COMPRESSIONMODE_LZMA = \"lzma\";\r\n    AWDParser.UNCOMPRESSED = 0;\r\n    AWDParser.DEFLATE = 1;\r\n    AWDParser.LZMA = 2;\r\n    AWDParser.INT8 = 1;\r\n    AWDParser.INT16 = 2;\r\n    AWDParser.INT32 = 3;\r\n    AWDParser.UINT8 = 4;\r\n    AWDParser.UINT16 = 5;\r\n    AWDParser.UINT32 = 6;\r\n    AWDParser.FLOAT32 = 7;\r\n    AWDParser.FLOAT64 = 8;\r\n    AWDParser.BOOL = 21;\r\n    AWDParser.COLOR = 22;\r\n    AWDParser.BADDR = 23;\r\n    AWDParser.AWDSTRING = 31;\r\n    AWDParser.AWDBYTEARRAY = 32;\r\n    AWDParser.VECTOR2x1 = 41;\r\n    AWDParser.VECTOR3x1 = 42;\r\n    AWDParser.VECTOR4x1 = 43;\r\n    AWDParser.MTX3x2 = 44;\r\n    AWDParser.MTX3x3 = 45;\r\n    AWDParser.MTX4x3 = 46;\r\n    AWDParser.MTX4x4 = 47;\r\n    AWDParser.GEO_NUMBER = 48;\r\n    AWDParser.MATRIX_NUMBER = 49;\r\n    AWDParser.PROPERTY_NUMBER = 50;\r\n    AWDParser.textFormatProperties = {\r\n        1: AWDParser.UINT16,\r\n        2: AWDParser.FLOAT32,\r\n        3: AWDParser.UINT8,\r\n        4: AWDParser.UINT8,\r\n        5: AWDParser.UINT8,\r\n        6: AWDParser.UINT8,\r\n        7: AWDParser.FLOAT32,\r\n        8: AWDParser.FLOAT32,\r\n        9: AWDParser.FLOAT32,\r\n        10: AWDParser.FLOAT32 }; //line spacing\r\n    AWDParser.textFieldProperties = {\r\n        1: AWDParser.BOOL,\r\n        3: AWDParser.BOOL,\r\n        4: AWDParser.BOOL,\r\n        5: AWDParser.BOOL,\r\n        7: AWDParser.UINT8,\r\n        8: AWDParser.UINT8,\r\n        9: AWDParser.UINT8 };\r\n    AWDParser.textFieldTypes = [\"static\", \"dynamic\", \"input\", \"input\"];\r\n    AWDParser.movieClipProperties = {\r\n        1: AWDParser.FLOAT32,\r\n        2: AWDParser.UINT16,\r\n        3: AWDParser.UINT8 }; // scripting-language right now its always as2\r\n    AWDParser.graphicsProperties = {\r\n        1: AWDParser.GEO_NUMBER,\r\n        2: AWDParser.GEO_NUMBER };\r\n    AWDParser.elementsProperties = {\r\n        1: AWDParser.GEO_NUMBER,\r\n        2: AWDParser.GEO_NUMBER };\r\n    AWDParser.primitiveProperties = {\r\n        101: AWDParser.GEO_NUMBER,\r\n        102: AWDParser.GEO_NUMBER,\r\n        103: AWDParser.GEO_NUMBER,\r\n        110: AWDParser.GEO_NUMBER,\r\n        111: AWDParser.GEO_NUMBER,\r\n        301: AWDParser.UINT16,\r\n        302: AWDParser.UINT16,\r\n        303: AWDParser.UINT16,\r\n        701: AWDParser.BOOL,\r\n        702: AWDParser.BOOL,\r\n        703: AWDParser.BOOL,\r\n        704: AWDParser.BOOL };\r\n    AWDParser.primitiveTypes = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\r\n    AWDParser.containerProperties = {\r\n        1: AWDParser.MATRIX_NUMBER,\r\n        2: AWDParser.MATRIX_NUMBER,\r\n        3: AWDParser.MATRIX_NUMBER,\r\n        4: AWDParser.UINT8 };\r\n    AWDParser.spriteInstanceProperties = {\r\n        1: AWDParser.MATRIX_NUMBER,\r\n        2: AWDParser.MATRIX_NUMBER,\r\n        3: AWDParser.MATRIX_NUMBER,\r\n        4: AWDParser.UINT8,\r\n        5: AWDParser.BOOL };\r\n    AWDParser.lightProperties = {\r\n        1: AWDParser.PROPERTY_NUMBER,\r\n        2: AWDParser.PROPERTY_NUMBER,\r\n        3: AWDParser.COLOR,\r\n        4: AWDParser.PROPERTY_NUMBER,\r\n        5: AWDParser.PROPERTY_NUMBER,\r\n        6: AWDParser.BOOL,\r\n        7: AWDParser.COLOR,\r\n        8: AWDParser.PROPERTY_NUMBER,\r\n        9: AWDParser.UINT8,\r\n        10: AWDParser.UINT8,\r\n        11: AWDParser.PROPERTY_NUMBER,\r\n        12: AWDParser.UINT16,\r\n        21: AWDParser.MATRIX_NUMBER,\r\n        22: AWDParser.MATRIX_NUMBER,\r\n        23: AWDParser.MATRIX_NUMBER };\r\n    AWDParser.cameraProperties = {\r\n        101: AWDParser.PROPERTY_NUMBER,\r\n        102: AWDParser.PROPERTY_NUMBER,\r\n        103: AWDParser.PROPERTY_NUMBER,\r\n        104: AWDParser.PROPERTY_NUMBER };\r\n    AWDParser.cameraPivotProperties = {\r\n        1: AWDParser.MATRIX_NUMBER,\r\n        2: AWDParser.MATRIX_NUMBER,\r\n        3: AWDParser.MATRIX_NUMBER,\r\n        4: AWDParser.UINT8 };\r\n    // (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\r\n    AWDParser.materialProperties = {\r\n        1: AWDParser.INT32,\r\n        2: AWDParser.BADDR,\r\n        10: AWDParser.PROPERTY_NUMBER,\r\n        11: AWDParser.BOOL,\r\n        12: AWDParser.PROPERTY_NUMBER,\r\n        13: AWDParser.BOOL };\r\n    AWDParser.material_v1Properties = { 1: AWDParser.UINT32,\r\n        2: AWDParser.BADDR,\r\n        3: AWDParser.BADDR,\r\n        4: AWDParser.UINT8,\r\n        5: AWDParser.BOOL,\r\n        6: AWDParser.BOOL,\r\n        7: AWDParser.BOOL,\r\n        8: AWDParser.BOOL,\r\n        9: AWDParser.UINT8,\r\n        10: AWDParser.PROPERTY_NUMBER,\r\n        11: AWDParser.BOOL,\r\n        12: AWDParser.PROPERTY_NUMBER,\r\n        13: AWDParser.BOOL,\r\n        15: AWDParser.PROPERTY_NUMBER,\r\n        16: AWDParser.UINT32,\r\n        17: AWDParser.BADDR,\r\n        18: AWDParser.PROPERTY_NUMBER,\r\n        19: AWDParser.PROPERTY_NUMBER,\r\n        20: AWDParser.UINT32,\r\n        21: AWDParser.BADDR,\r\n        22: AWDParser.BADDR };\r\n    AWDParser.method_v1Properties = {\r\n        1: AWDParser.BADDR,\r\n        2: AWDParser.BADDR,\r\n        3: AWDParser.BADDR,\r\n        101: AWDParser.PROPERTY_NUMBER,\r\n        102: AWDParser.PROPERTY_NUMBER,\r\n        103: AWDParser.PROPERTY_NUMBER,\r\n        201: AWDParser.UINT32,\r\n        202: AWDParser.UINT32,\r\n        301: AWDParser.UINT16,\r\n        302: AWDParser.UINT16,\r\n        401: AWDParser.UINT8,\r\n        402: AWDParser.UINT8,\r\n        601: AWDParser.COLOR,\r\n        602: AWDParser.COLOR,\r\n        701: AWDParser.BOOL,\r\n        702: AWDParser.BOOL,\r\n        801: AWDParser.MTX4x4 };\r\n    AWDParser.commandProperties = {\r\n        1: AWDParser.BADDR };\r\n    AWDParser.targetProperties = {\r\n        1: AWDParser.MATRIX_NUMBER,\r\n        2: AWDParser.MATRIX_NUMBER,\r\n        3: AWDParser.MATRIX_NUMBER,\r\n        4: AWDParser.UINT8 };\r\n    AWDParser.metaDataProperties = {\r\n        1: AWDParser.UINT32,\r\n        2: AWDParser.AWDSTRING,\r\n        3: AWDParser.AWDSTRING,\r\n        4: AWDParser.AWDSTRING,\r\n        5: AWDParser.AWDSTRING };\r\n    AWDParser.vertexAnimationSetProperties = {\r\n        1: AWDParser.UINT16 };\r\n    AWDParser.animatorSetProperties = { 1: AWDParser.BADDR };\r\n    return AWDParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.AWDParser = AWDParser;\r\nvar ElementType = (function () {\r\n    function ElementType() {\r\n    }\r\n    ElementType.STANDART_STREAMS = 0;\r\n    ElementType.CONCENATED_STREAMS = 1;\r\n    ElementType.SHARED_BUFFER = 2;\r\n    return ElementType;\r\n}());\r\nvar AWDProperties = (function () {\r\n    function AWDProperties() {\r\n    }\r\n    AWDProperties.prototype.set = function (key, value) {\r\n        this[key] = value;\r\n    };\r\n    AWDProperties.prototype.get = function (key, fallback) {\r\n        return (this[key] || fallback);\r\n    };\r\n    return AWDProperties;\r\n}());\r\n/**\r\n *\r\n */\r\nvar BitFlags = (function () {\r\n    function BitFlags() {\r\n    }\r\n    BitFlags.test = function (flags, testFlag) {\r\n        return (flags & testFlag) == testFlag;\r\n    };\r\n    BitFlags.FLAG1 = 1;\r\n    BitFlags.FLAG2 = 2;\r\n    BitFlags.FLAG3 = 4;\r\n    BitFlags.FLAG4 = 8;\r\n    BitFlags.FLAG5 = 16;\r\n    BitFlags.FLAG6 = 32;\r\n    BitFlags.FLAG7 = 64;\r\n    BitFlags.FLAG8 = 128;\r\n    BitFlags.FLAG9 = 256;\r\n    BitFlags.FLAG10 = 512;\r\n    BitFlags.FLAG11 = 1024;\r\n    BitFlags.FLAG12 = 2048;\r\n    BitFlags.FLAG13 = 4096;\r\n    BitFlags.FLAG14 = 8192;\r\n    BitFlags.FLAG15 = 16384;\r\n    BitFlags.FLAG16 = 32768;\r\n    return BitFlags;\r\n}());\r\n},{\"./AWD3ParserUtils/AWDBlock\":\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/attributes/Byte4Attributes\":undefined,\"awayjs-core/lib/attributes/Float2Attributes\":undefined,\"awayjs-core/lib/attributes/Float3Attributes\":undefined,\"awayjs-core/lib/geom/ColorTransform\":undefined,\"awayjs-core/lib/geom/Matrix\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImageCube\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-core/lib/projections/OrthographicOffCenterProjection\":undefined,\"awayjs-core/lib/projections/OrthographicProjection\":undefined,\"awayjs-core/lib/projections/PerspectiveProjection\":undefined,\"awayjs-core/lib/utils/ByteArray\":undefined,\"awayjs-display/lib/base/Style\":undefined,\"awayjs-display/lib/base/Timeline\":undefined,\"awayjs-display/lib/display/Billboard\":undefined,\"awayjs-display/lib/display/Camera\":undefined,\"awayjs-display/lib/display/DirectionalLight\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/PointLight\":undefined,\"awayjs-display/lib/display/Skybox\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/ElementsType\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/materials/BasicMaterial\":undefined,\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\":undefined,\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\":undefined,\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\":undefined,\"awayjs-display/lib/prefabs/PrefabBase\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveConePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\":undefined,\"awayjs-display/lib/text/Font\":undefined,\"awayjs-display/lib/text/TesselatedFontTable\":undefined,\"awayjs-display/lib/text/TextFormat\":undefined,\"awayjs-display/lib/textures/MappingMode\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-display/lib/textures/SingleCubeTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFogMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\":undefined,\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\":undefined,\"awayjs-player/lib/factories/AS2SceneGraphFactory\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimator\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimator\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/FNTParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nvar XmlUtils_1 = require(\"awayjs-core/lib/utils/XmlUtils\");\r\nvar BitmapFontTable_1 = require(\"awayjs-display/lib/text/BitmapFontTable\");\r\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\r\n/**\r\n * TextureAtlasParser provides a \"parser\" for natively supported image types (jpg, png). While it simply loads bytes into\r\n * a loader object, it wraps it in a BitmapImage2DResource so resource management can happen consistently without\r\n * exception cases.\r\n */\r\nvar FNTParser = (function (_super) {\r\n    __extends(FNTParser, _super);\r\n    /**\r\n     * Creates a new TextureAtlasParser object.\r\n     * @param uri The url or id of the data or file to be parsed.\r\n     * @param extra The holder for extra contextual data that the parser might need.\r\n     */\r\n    function FNTParser() {\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\r\n        this._parseState = 0;\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    FNTParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        var supports = extension == \"fnt\";\r\n        if (supports) {\r\n            console.log(\"supportsType fnt = \" + extension);\r\n        }\r\n        return extension == \"fnt\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    FNTParser.supportsData = function (data) {\r\n        try {\r\n            var content = ParserUtils_1.ParserUtils.toString(data);\r\n            if (content.indexOf(\"font\") != -1 || content.indexOf(\"Font\") != -1) {\r\n                console.log(\"supportsData fnt\");\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    FNTParser.prototype._iResolveDependency = function (resourceDependency) {\r\n        if (resourceDependency.assets.length) {\r\n            this._bitmapFontTable.add_page(resourceDependency.assets[0]);\r\n            this._pFinalizeAsset(resourceDependency.assets[0]);\r\n            this._parseState = FNTParserState.PARSE_CHARS;\r\n        }\r\n        else {\r\n            this._parseState = FNTParserState.PARSE_COMPLETE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    FNTParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\r\n        this._parseState = FNTParserState.PARSE_COMPLETE;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    FNTParser.prototype._pProceedParsing = function () {\r\n        var nodes;\r\n        switch (this._parseState) {\r\n            case FNTParserState.PARSE_XML:\r\n                try {\r\n                    this._doc = XmlUtils_1.XmlUtils.getChildrenWithTag(XmlUtils_1.XmlUtils.strToXml(this._pGetTextData()), \"font\")[0];\r\n                    var page_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"pages\")[0];\r\n                    var all_pages = XmlUtils_1.XmlUtils.getChildrenWithTag(page_node, \"page\");\r\n                    var len = all_pages.length;\r\n                    // todo: correctly support multiple pages\r\n                    for (var i = 0; i < len; i++) {\r\n                        this._imagePath = XmlUtils_1.XmlUtils.readAttributeValue(all_pages[i], \"file\");\r\n                    }\r\n                    var char_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"chars\")[0];\r\n                    this._chars = XmlUtils_1.XmlUtils.getChildrenWithTag(char_node, \"char\");\r\n                    this._parseState = FNTParserState.PARSE_IMAGE;\r\n                    var info_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"info\")[0];\r\n                    var common_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"common\")[0];\r\n                    var font_name = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"face\");\r\n                    this._font = AssetLibrary_1.AssetLibrary.getAsset(font_name);\r\n                    if (this._font == undefined) {\r\n                        this._font = new Font_1.Font();\r\n                        this._font.name = font_name;\r\n                    }\r\n                    var bold = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"bold\");\r\n                    if (bold != \"0\")\r\n                        font_name += \"_bold\";\r\n                    var italic = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"italic\");\r\n                    if (italic != \"0\")\r\n                        font_name += \"_italic\";\r\n                    this._bitmapFontTable = this._font.get_font_table(font_name, BitmapFontTable_1.BitmapFontTable.assetType);\r\n                    var size = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"size\");\r\n                    this._bitmapFontTable._init_size = parseInt(size);\r\n                }\r\n                catch (Error) {\r\n                    return ParserBase_1.ParserBase.PARSING_DONE;\r\n                }\r\n                break;\r\n            case FNTParserState.PARSE_IMAGE:\r\n                if (this._imagePath) {\r\n                    this._pAddDependency(this._imagePath, new URLRequest_1.URLRequest(this._imagePath));\r\n                    this._pPauseAndRetrieveDependencies();\r\n                }\r\n                else {\r\n                    return ParserBase_1.ParserBase.PARSING_DONE;\r\n                }\r\n                break;\r\n            case FNTParserState.PARSE_CHARS:\r\n                var element;\r\n                var x, y, width, height, xoff, yoff, xadv, page, chnl;\r\n                var id;\r\n                var len = this._chars.length;\r\n                for (var i = 0; i < len; i++) {\r\n                    element = this._chars[i];\r\n                    x = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"x\"));\r\n                    y = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"y\"));\r\n                    width = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"width\"));\r\n                    height = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"height\"));\r\n                    xoff = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"xoffset\"));\r\n                    yoff = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"yoffset\"));\r\n                    xadv = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"xadvance\"));\r\n                    page = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"page\"));\r\n                    chnl = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"chnl\"));\r\n                    id = XmlUtils_1.XmlUtils.readAttributeValue(element, \"id\");\r\n                    this._bitmapFontTable.setChar(id, x, y, width, height, xoff, yoff, xadv, page, chnl);\r\n                }\r\n                this._pFinalizeAsset(this._font, this._font.name);\r\n                this._parseState = FNTParserState.PARSE_COMPLETE;\r\n                break;\r\n            case FNTParserState.PARSE_COMPLETE:\r\n                return ParserBase_1.ParserBase.PARSING_DONE;\r\n        }\r\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n    };\r\n    return FNTParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.FNTParser = FNTParser;\r\nvar FNTParserState = (function () {\r\n    function FNTParserState() {\r\n    }\r\n    FNTParserState.PARSE_XML = 0;\r\n    FNTParserState.PARSE_IMAGE = 1;\r\n    FNTParserState.PARSE_CHARS = 2;\r\n    FNTParserState.PARSE_COMPLETE = 3;\r\n    return FNTParserState;\r\n}());\r\n},{\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-core/lib/utils/XmlUtils\":undefined,\"awayjs-display/lib/text/BitmapFontTable\":undefined,\"awayjs-display/lib/text/Font\":undefined}],\"awayjs-parsers/lib/FontParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\r\nvar TesselatedFontTable_1 = require(\"awayjs-display/lib/text/TesselatedFontTable\");\r\nvar opentype;\r\n/**\r\n * FontParser should parse Fonts into TesselatedFontTable for usage with webGL, or just load the Font as css class for usage with canvas and no webGL\r\n */\r\nvar FontParser = (function (_super) {\r\n    __extends(FontParser, _super);\r\n    /**\r\n     * Creates a new TextureAtlasParser object.\r\n     * @param uri The url or id of the data or file to be parsed.\r\n     * @param extra The holder for extra contextual data that the parser might need.\r\n     */\r\n    function FontParser(useWebGL) {\r\n        if (useWebGL === void 0) { useWebGL = true; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\r\n        this._useWebGL = false;\r\n        this._useWebGL = useWebGL;\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    FontParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        var supports = ((extension == \"ttf\") || (extension == \"otf\"));\r\n        if (supports) {\r\n            console.log(\"FontParse encountered file with supported extension: = \" + extension);\r\n        }\r\n        return ((extension == \"ttf\") || (extension == \"otf\"));\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    FontParser.supportsData = function (data) {\r\n        console.log(\"ParserFont = \" + ParserUtils_1.ParserUtils.toString(data, 20));\r\n        try {\r\n            /*\r\n            var content:string = ParserUtils.toString(data);\r\n            if(content.indexOf(\"font\") != -1 || content.indexOf(\"Font\") != -1){\r\n                console.log(\"supportsData fnt\");\r\n                return true;\r\n\r\n            }\r\n            */\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    FontParser.prototype._iResolveDependency = function (resourceDependency) {\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    FontParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\r\n    };\r\n    FontParser.prototype.sortKeys = function (dict) {\r\n        var keys = [];\r\n        for (var key in dict) {\r\n            keys.push(key);\r\n        }\r\n        keys.sort();\r\n        return keys;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    FontParser.prototype._pProceedParsing = function () {\r\n        //console.log(\"proceed parsing = \"+this._iFileName);\r\n        opentype = window[\"opentype\"];\r\n        if (opentype) {\r\n            //console.log(\"parsing font = \"+this._iFileName+\" / bytelength = \"+this._pGetByteData().getBytesAvailable());\r\n            var font_name = \"\";\r\n            var font_style_name = \"\";\r\n            var font = opentype.parse(this.data);\r\n            var tablename, table, property, value, fontname;\r\n            var head = font.tables.head;\r\n            /*\r\n            */\r\n            for (tablename in font.tables) {\r\n                table = font.tables[tablename];\r\n                if (tablename == 'name') {\r\n                    var properties = this.sortKeys(table);\r\n                    for (var i = 0; i < properties.length; i++) {\r\n                        var property = properties[i];\r\n                        var translations = table[property];\r\n                        var langs = this.sortKeys(translations);\r\n                        for (var j = 0; j < langs.length; j++) {\r\n                            var lang = langs[j];\r\n                            if (property == \"fontFamily\") {\r\n                                font_name = translations[lang];\r\n                            }\r\n                            else if (property == \"fontSubfamily\") {\r\n                                font_style_name = translations[lang];\r\n                            }\r\n                            console.log(\"    \" + property + \": \" + lang + \" : \" + translations[lang]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (font_name == \"\") {\r\n                console.log(\"FontParser.ts '\" + this._iFileName + \"': Could not read fontname !!!\");\r\n            }\r\n            if (font_style_name == \"\") {\r\n                console.log(\"FontParser.ts '\" + this._iFileName + \"': Could not read font_style_name !!!\");\r\n            }\r\n            var new_font = AssetLibrary_1.AssetLibrary.getAsset(font_name);\r\n            var newfont = false;\r\n            if (new_font == undefined) {\r\n                new_font = new Font_1.Font();\r\n                newfont = true;\r\n            }\r\n            new_font.name = font_name;\r\n            var new_font_style = new_font.get_font_table(font_style_name, TesselatedFontTable_1.TesselatedFontTable.assetType, font);\r\n        }\r\n        if (document) {\r\n            var s = document.createElement('style');\r\n            s.type = \"text/css\";\r\n            document.getElementsByTagName('head')[0].appendChild(s);\r\n            s.style.cssText = \"@font-face {\\\r\n\t\t\t\t\tfont-family: ''\" + this._iFileName + \"';\\\r\n\t\t\t\t\tsrc: url('\" + this._iFileName + \"');\\\r\n\t\t\t\t\t};\";\r\n        }\r\n        this._pFinalizeAsset(new_font, new_font.name);\r\n        return ParserBase_1.ParserBase.PARSING_DONE;\r\n    };\r\n    return FontParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.FontParser = FontParser;\r\n},{\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/text/Font\":undefined,\"awayjs-display/lib/text/TesselatedFontTable\":undefined}],\"awayjs-parsers/lib/MD2Parser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\r\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n/**\r\n * MD2Parser provides a parser for the MD2 data type.\r\n */\r\nvar MD2Parser = (function (_super) {\r\n    __extends(MD2Parser, _super);\r\n    /**\r\n     * Creates a new MD2Parser object.\r\n     * @param textureType The extension of the texture (e.g. jpg/png/...)\r\n     * @param ignoreTexturePath If true, the path of the texture is ignored\r\n     */\r\n    function MD2Parser(textureType, ignoreTexturePath) {\r\n        if (textureType === void 0) { textureType = \"jpg\"; }\r\n        if (ignoreTexturePath === void 0) { ignoreTexturePath = true; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\r\n        this._clipNodes = new Object();\r\n        // the current elements being built\r\n        this._animationSet = new VertexAnimationSet_1.VertexAnimationSet();\r\n        this.materialFinal = false;\r\n        this.graphicsCreated = false;\r\n        this._textureType = textureType;\r\n        this._ignoreTexturePath = ignoreTexturePath;\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    MD2Parser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        return extension == \"md2\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    MD2Parser.supportsData = function (data) {\r\n        return (ParserUtils_1.ParserUtils.toString(data, 4) == 'IDP2');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    MD2Parser.prototype._iResolveDependency = function (resourceDependency) {\r\n        if (resourceDependency.assets.length != 1)\r\n            return;\r\n        var material = new MethodMaterial_1.MethodMaterial(resourceDependency.assets[0]);\r\n        if (this.materialMode >= 2)\r\n            material.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n        //add to the content property\r\n        this._pContent.addChild(this._sprite);\r\n        material.name = this._sprite.material.name;\r\n        this._sprite.material = material;\r\n        this._pFinalizeAsset(material);\r\n        this._pFinalizeAsset(this._sprite.graphics);\r\n        this._pFinalizeAsset(this._sprite);\r\n        this.materialFinal = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    MD2Parser.prototype._iResolveDependencyFailure = function (resourceDependency) {\r\n        // apply system default\r\n        if (this.materialMode < 2) {\r\n            this._sprite.material = DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial();\r\n        }\r\n        else {\r\n            this._sprite.material = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());\r\n            this._sprite.material.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n        }\r\n        //add to the content property\r\n        this._pContent.addChild(this._sprite);\r\n        this._pFinalizeAsset(this._sprite.graphics);\r\n        this._pFinalizeAsset(this._sprite);\r\n        this.materialFinal = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    MD2Parser.prototype._pProceedParsing = function () {\r\n        if (!this._startedParsing) {\r\n            this._byteData = this._pGetByteData();\r\n            this._startedParsing = true;\r\n            // Reset bytearray read position (which may have been\r\n            // moved forward by the supportsData() function.)\r\n            this._byteData.position = 0;\r\n        }\r\n        while (this._pHasTime()) {\r\n            if (!this._parsedHeader) {\r\n                //----------------------------------------------------------------------------\r\n                // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n                //----------------------------------------------------------------------------\r\n                //this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n                // TODO: Create a sprite only when encountered (if it makes sense\r\n                // for this file format) and return it using this._pFinalizeAsset()\r\n                this._sprite = new Sprite_1.Sprite();\r\n                this._graphics = this._sprite.graphics;\r\n                if (this.materialMode < 2) {\r\n                    this._sprite.material = DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial();\r\n                }\r\n                else {\r\n                    this._sprite.material = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());\r\n                    this._sprite.material.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                }\r\n                //_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\r\n                //_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\r\n                // Parse header and decompress body\r\n                this.parseHeader();\r\n                this.parseMaterialNames();\r\n            }\r\n            else if (!this._parsedUV) {\r\n                this.parseUV();\r\n            }\r\n            else if (!this._parsedFaces) {\r\n                this.parseFaces();\r\n            }\r\n            else if (!this._parsedFrames) {\r\n                this.parseFrames();\r\n            }\r\n            else if ((this.graphicsCreated) && (this.materialFinal)) {\r\n                return ParserBase_1.ParserBase.PARSING_DONE;\r\n            }\r\n            else if (!this.graphicsCreated) {\r\n                this.graphicsCreated = true;\r\n                //create default subgraphics\r\n                this._graphics.addGraphic(this._firstElements.clone());\r\n                // Force name to be chosen by this._pFinalizeAsset()\r\n                this._sprite.name = \"\";\r\n                if (this.materialFinal) {\r\n                    //add to the content property\r\n                    this._pContent.addChild(this._sprite);\r\n                    this._pFinalizeAsset(this._sprite.graphics);\r\n                    this._pFinalizeAsset(this._sprite);\r\n                }\r\n                this._pPauseAndRetrieveDependencies();\r\n            }\r\n        }\r\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n    };\r\n    MD2Parser.prototype._pStartParsing = function (frameLimit) {\r\n        //create a content object for Loaders\r\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\r\n        _super.prototype._pStartParsing.call(this, frameLimit);\r\n    };\r\n    /**\r\n     * Reads in all that MD2 Header data that is declared as private variables.\r\n     * I know its a lot, and it looks ugly, but only way to do it in Flash\r\n     */\r\n    MD2Parser.prototype.parseHeader = function () {\r\n        this._ident = this._byteData.readInt();\r\n        this._version = this._byteData.readInt();\r\n        this._skinWidth = this._byteData.readInt();\r\n        this._skinHeight = this._byteData.readInt();\r\n        //skip this._frameSize\r\n        this._byteData.readInt();\r\n        this._numSkins = this._byteData.readInt();\r\n        this._numVertices = this._byteData.readInt();\r\n        this._numST = this._byteData.readInt();\r\n        this._numTris = this._byteData.readInt();\r\n        //skip this._numGlCmds\r\n        this._byteData.readInt();\r\n        this._numFrames = this._byteData.readInt();\r\n        this._offsetSkins = this._byteData.readInt();\r\n        this._offsetST = this._byteData.readInt();\r\n        this._offsetTris = this._byteData.readInt();\r\n        this._offsetFrames = this._byteData.readInt();\r\n        //skip this._offsetGlCmds\r\n        this._byteData.readInt();\r\n        this._offsetEnd = this._byteData.readInt();\r\n        this._parsedHeader = true;\r\n    };\r\n    /**\r\n     * Parses the file names for the materials.\r\n     */\r\n    MD2Parser.prototype.parseMaterialNames = function () {\r\n        var url;\r\n        var name;\r\n        var extIndex;\r\n        var slashIndex;\r\n        this._materialNames = new Array();\r\n        this._byteData.position = this._offsetSkins;\r\n        var regExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\r\n        for (var i = 0; i < this._numSkins; ++i) {\r\n            name = this._byteData.readUTFBytes(64);\r\n            name = name.replace(regExp, \"\");\r\n            extIndex = name.lastIndexOf(\".\");\r\n            if (this._ignoreTexturePath)\r\n                slashIndex = name.lastIndexOf(\"/\");\r\n            if (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\r\n                name = name.substring(slashIndex + 1, extIndex);\r\n                url = name + \".\" + this._textureType;\r\n            }\r\n            else {\r\n                url = name;\r\n            }\r\n            this._materialNames[i] = name;\r\n            // only support 1 skin TODO: really?\r\n            if (this.dependencies.length == 0)\r\n                this._pAddDependency(name, new URLRequest_1.URLRequest(url));\r\n        }\r\n        if (this._materialNames.length > 0)\r\n            this._sprite.material.name = this._materialNames[0];\r\n        else\r\n            this.materialFinal = true;\r\n    };\r\n    /**\r\n     * Parses the uv data for the sprite.\r\n     */\r\n    MD2Parser.prototype.parseUV = function () {\r\n        var j = 0;\r\n        this._uvs = new Array(this._numST * 2);\r\n        this._byteData.position = this._offsetST;\r\n        for (var i = 0; i < this._numST; i++) {\r\n            this._uvs[j++] = this._byteData.readShort() / this._skinWidth;\r\n            this._uvs[j++] = this._byteData.readShort() / this._skinHeight;\r\n        }\r\n        this._parsedUV = true;\r\n    };\r\n    /**\r\n     * Parses unique indices for the faces.\r\n     */\r\n    MD2Parser.prototype.parseFaces = function () {\r\n        var a /*uint*/, b /*uint*/, c /*uint*/, ta /*uint*/, tb /*uint*/, tc;\r\n        var i;\r\n        this._vertIndices = new Array();\r\n        this._uvIndices = new Array();\r\n        this._indices = new Array() /*uint*/;\r\n        this._byteData.position = this._offsetTris;\r\n        for (i = 0; i < this._numTris; i++) {\r\n            //collect vertex indices\r\n            a = this._byteData.readUnsignedShort();\r\n            b = this._byteData.readUnsignedShort();\r\n            c = this._byteData.readUnsignedShort();\r\n            //collect uv indices\r\n            ta = this._byteData.readUnsignedShort();\r\n            tb = this._byteData.readUnsignedShort();\r\n            tc = this._byteData.readUnsignedShort();\r\n            this.addIndex(a, ta);\r\n            this.addIndex(b, tb);\r\n            this.addIndex(c, tc);\r\n        }\r\n        var len = this._uvIndices.length;\r\n        this._finalUV = new Array(len * 2);\r\n        for (i = 0; i < len; ++i) {\r\n            this._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\r\n            this._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\r\n        }\r\n        this._parsedFaces = true;\r\n    };\r\n    /**\r\n     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\r\n     * corresponding vertex and uv data in the correct location.\r\n     * @param vertexIndex The original index in the vertex list.\r\n     * @param uvIndex The original index in the uv list.\r\n     */\r\n    MD2Parser.prototype.addIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\r\n        var index = this.findIndex(vertexIndex, uvIndex);\r\n        if (index == -1) {\r\n            this._indices.push(this._vertIndices.length);\r\n            this._vertIndices.push(vertexIndex);\r\n            this._uvIndices.push(uvIndex);\r\n        }\r\n        else\r\n            this._indices.push(index);\r\n    };\r\n    /**\r\n     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\r\n     * @param vertexIndex The original index in the vertex list.\r\n     * @param uvIndex The original index in the uv list.\r\n     * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\r\n     */\r\n    MD2Parser.prototype.findIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\r\n        var len = this._vertIndices.length;\r\n        for (var i = 0; i < len; ++i) {\r\n            if (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\r\n                return i;\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Parses all the frame elements.\r\n     */\r\n    MD2Parser.prototype.parseFrames = function () {\r\n        var sx, sy, sz;\r\n        var tx, ty, tz;\r\n        var graphics;\r\n        var elements;\r\n        var vertLen = this._vertIndices.length;\r\n        var fvertices;\r\n        var tvertices;\r\n        var i /*uint*/, j /*int*/, k;\r\n        //var ch : number /*uint*/;\r\n        var name = \"\";\r\n        var prevClip = null;\r\n        this._byteData.position = this._offsetFrames;\r\n        for (i = 0; i < this._numFrames; i++) {\r\n            tvertices = new Array();\r\n            fvertices = new Array(vertLen * 3);\r\n            sx = this._byteData.readFloat();\r\n            sy = this._byteData.readFloat();\r\n            sz = this._byteData.readFloat();\r\n            tx = this._byteData.readFloat();\r\n            ty = this._byteData.readFloat();\r\n            tz = this._byteData.readFloat();\r\n            name = this.readFrameName();\r\n            // Note, the extra data.position++ in the for loop is there\r\n            // to skip over a byte that holds the \"vertex normal index\"\r\n            for (j = 0; j < this._numVertices; j++, this._byteData.position++)\r\n                tvertices.push(sx * this._byteData.readUnsignedByte() + tx, sy * this._byteData.readUnsignedByte() + ty, sz * this._byteData.readUnsignedByte() + tz);\r\n            k = 0;\r\n            for (j = 0; j < vertLen; j++) {\r\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3];\r\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 2];\r\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 1];\r\n            }\r\n            elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n            if (this._firstElements == null)\r\n                this._firstElements = elements;\r\n            graphics = new Graphics_1.Graphics();\r\n            graphics.addGraphic(elements);\r\n            elements.setIndices(this._indices);\r\n            elements.setPositions(fvertices);\r\n            elements.setUVs(this._finalUV);\r\n            // cause explicit updates\r\n            elements.setNormals(null);\r\n            elements.setTangents(null);\r\n            // turn auto updates off because they may be animated and set explicitly\r\n            elements.autoDeriveNormals = false;\r\n            elements.autoDeriveTangents = false;\r\n            var clip = this._clipNodes[name];\r\n            if (!clip) {\r\n                // If another sequence was parsed before this one, starting\r\n                // a new state means the previous one is complete and can\r\n                // hence be finalized.\r\n                if (prevClip) {\r\n                    this._pFinalizeAsset(prevClip);\r\n                    this._animationSet.addAnimation(prevClip);\r\n                }\r\n                clip = new VertexClipNode_1.VertexClipNode();\r\n                clip.name = name;\r\n                clip.stitchFinalFrame = true;\r\n                this._clipNodes[name] = clip;\r\n                prevClip = clip;\r\n            }\r\n            clip.addFrame(graphics, 1000 / MD2Parser.FPS);\r\n        }\r\n        // Finalize the last state\r\n        if (prevClip) {\r\n            this._pFinalizeAsset(prevClip);\r\n            this._animationSet.addAnimation(prevClip);\r\n        }\r\n        // Force this._pFinalizeAsset() to decide name\r\n        this._pFinalizeAsset(this._animationSet);\r\n        this._parsedFrames = true;\r\n    };\r\n    MD2Parser.prototype.readFrameName = function () {\r\n        var name = \"\";\r\n        var k = 0;\r\n        for (var j = 0; j < 16; j++) {\r\n            var ch = this._byteData.readUnsignedByte();\r\n            if (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\r\n                name += String.fromCharCode(ch);\r\n            if (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\r\n                k++;\r\n        }\r\n        return name;\r\n    };\r\n    MD2Parser.FPS = 6;\r\n    return MD2Parser;\r\n}(ParserBase_1.ParserBase));\r\nexports.MD2Parser = MD2Parser;\r\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/MD5AnimParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\n/**\r\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nvar MD5AnimParser = (function (_super) {\r\n    __extends(MD5AnimParser, _super);\r\n    /**\r\n     * Creates a new MD5AnimParser object.\r\n     * @param uri The url or id of the data or file to be parsed.\r\n     * @param extra The holder for extra contextual data that the parser might need.\r\n     */\r\n    function MD5AnimParser(additionalRotationAxis, additionalRotationRadians) {\r\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\r\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\r\n        this._parseIndex = 0;\r\n        this._line = 0;\r\n        this._charLineIndex = 0;\r\n        this._rotationQuat = new Quaternion_1.Quaternion();\r\n        var t1 = new Quaternion_1.Quaternion();\r\n        var t2 = new Quaternion_1.Quaternion();\r\n        t1.fromAxisAngle(Vector3D_1.Vector3D.X_AXIS, -Math.PI * .5);\r\n        t2.fromAxisAngle(Vector3D_1.Vector3D.Y_AXIS, -Math.PI * .5);\r\n        this._rotationQuat.multiply(t2, t1);\r\n        if (additionalRotationAxis) {\r\n            this._rotationQuat.multiply(t2, t1);\r\n            t1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n            this._rotationQuat.multiply(t1, this._rotationQuat);\r\n        }\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    MD5AnimParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        return extension == \"md5anim\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    MD5AnimParser.supportsData = function (data) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    MD5AnimParser.prototype._pProceedParsing = function () {\r\n        var token;\r\n        if (!this._startedParsing) {\r\n            this._textData = this._pGetTextData();\r\n            this._startedParsing = true;\r\n        }\r\n        while (this._pHasTime()) {\r\n            token = this.getNextToken();\r\n            switch (token) {\r\n                case MD5AnimParser.COMMENT_TOKEN:\r\n                    this.ignoreLine();\r\n                    break;\r\n                case \"\":\r\n                    // can occur at the end of a file\r\n                    break;\r\n                case MD5AnimParser.VERSION_TOKEN:\r\n                    this._version = this.getNextInt();\r\n                    if (this._version != 10)\r\n                        throw new Error(\"Unknown version number encountered!\");\r\n                    break;\r\n                case MD5AnimParser.COMMAND_LINE_TOKEN:\r\n                    this.parseCMD();\r\n                    break;\r\n                case MD5AnimParser.NUM_FRAMES_TOKEN:\r\n                    this._numFrames = this.getNextInt();\r\n                    this._bounds = new Array();\r\n                    this._frameData = new Array();\r\n                    break;\r\n                case MD5AnimParser.NUM_JOINTS_TOKEN:\r\n                    this._numJoints = this.getNextInt();\r\n                    this._hierarchy = new Array(this._numJoints);\r\n                    this._baseFrameData = new Array(this._numJoints);\r\n                    break;\r\n                case MD5AnimParser.FRAME_RATE_TOKEN:\r\n                    this._frameRate = this.getNextInt();\r\n                    break;\r\n                case MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\r\n                    this._numAnimatedComponents = this.getNextInt();\r\n                    break;\r\n                case MD5AnimParser.HIERARCHY_TOKEN:\r\n                    this.parseHierarchy();\r\n                    break;\r\n                case MD5AnimParser.BOUNDS_TOKEN:\r\n                    this.parseBounds();\r\n                    break;\r\n                case MD5AnimParser.BASE_FRAME_TOKEN:\r\n                    this.parseBaseFrame();\r\n                    break;\r\n                case MD5AnimParser.FRAME_TOKEN:\r\n                    this.parseFrame();\r\n                    break;\r\n                default:\r\n                    if (!this._reachedEOF)\r\n                        this.sendUnknownKeywordError();\r\n            }\r\n            if (this._reachedEOF) {\r\n                this._clip = new SkeletonClipNode_1.SkeletonClipNode();\r\n                this.translateClip();\r\n                this._pFinalizeAsset(this._clip);\r\n                return ParserBase_1.ParserBase.PARSING_DONE;\r\n            }\r\n        }\r\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n    };\r\n    /**\r\n     * Converts all key frame data to an SkinnedAnimationSequence.\r\n     */\r\n    MD5AnimParser.prototype.translateClip = function () {\r\n        for (var i = 0; i < this._numFrames; ++i)\r\n            this._clip.addFrame(this.translatePose(this._frameData[i]), 1000 / this._frameRate);\r\n    };\r\n    /**\r\n     * Converts a single key frame data to a SkeletonPose.\r\n     * @param frameData The actual frame data.\r\n     * @return A SkeletonPose containing the frame data's pose.\r\n     */\r\n    MD5AnimParser.prototype.translatePose = function (frameData) {\r\n        var hierarchy;\r\n        var pose;\r\n        var base;\r\n        var flags;\r\n        var j;\r\n        var translate = new Vector3D_1.Vector3D();\r\n        var orientation = new Quaternion_1.Quaternion();\r\n        var components = frameData.components;\r\n        var skelPose = new SkeletonPose_1.SkeletonPose();\r\n        var jointPoses = skelPose.jointPoses;\r\n        for (var i = 0; i < this._numJoints; ++i) {\r\n            j = 0;\r\n            pose = new JointPose_1.JointPose();\r\n            hierarchy = this._hierarchy[i];\r\n            base = this._baseFrameData[i];\r\n            flags = hierarchy.flags;\r\n            translate.x = base.position.x;\r\n            translate.y = base.position.y;\r\n            translate.z = base.position.z;\r\n            orientation.x = base.orientation.x;\r\n            orientation.y = base.orientation.y;\r\n            orientation.z = base.orientation.z;\r\n            if (flags & 1)\r\n                translate.x = components[hierarchy.startIndex + (j++)];\r\n            if (flags & 2)\r\n                translate.y = components[hierarchy.startIndex + (j++)];\r\n            if (flags & 4)\r\n                translate.z = components[hierarchy.startIndex + (j++)];\r\n            if (flags & 8)\r\n                orientation.x = components[hierarchy.startIndex + (j++)];\r\n            if (flags & 16)\r\n                orientation.y = components[hierarchy.startIndex + (j++)];\r\n            if (flags & 32)\r\n                orientation.z = components[hierarchy.startIndex + (j++)];\r\n            var w = 1 - orientation.x * orientation.x - orientation.y * orientation.y - orientation.z * orientation.z;\r\n            orientation.w = w < 0 ? 0 : -Math.sqrt(w);\r\n            if (hierarchy.parentIndex < 0) {\r\n                pose.orientation.multiply(this._rotationQuat, orientation);\r\n                pose.translation = this._rotationQuat.rotatePoint(translate);\r\n            }\r\n            else {\r\n                pose.orientation.copyFrom(orientation);\r\n                pose.translation.x = translate.x;\r\n                pose.translation.y = translate.y;\r\n                pose.translation.z = translate.z;\r\n            }\r\n            pose.orientation.y = -pose.orientation.y;\r\n            pose.orientation.z = -pose.orientation.z;\r\n            pose.translation.x = -pose.translation.x;\r\n            jointPoses[i] = pose;\r\n        }\r\n        return skelPose;\r\n    };\r\n    /**\r\n     * Parses the skeleton's hierarchy data.\r\n     */\r\n    MD5AnimParser.prototype.parseHierarchy = function () {\r\n        var ch;\r\n        var data;\r\n        var token = this.getNextToken();\r\n        var i = 0;\r\n        if (token != \"{\")\r\n            this.sendUnknownKeywordError();\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            data = new HierarchyData();\r\n            data.name = this.parseLiteralstring();\r\n            data.parentIndex = this.getNextInt();\r\n            data.flags = this.getNextInt();\r\n            data.startIndex = this.getNextInt();\r\n            this._hierarchy[i++] = data;\r\n            ch = this.getNextChar();\r\n            if (ch == \"/\") {\r\n                this.putBack();\r\n                ch = this.getNextToken();\r\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\r\n                    this.ignoreLine();\r\n                ch = this.getNextChar();\r\n            }\r\n            if (ch != \"}\")\r\n                this.putBack();\r\n        } while (ch != \"}\");\r\n    };\r\n    /**\r\n     * Parses frame bounds.\r\n     */\r\n    MD5AnimParser.prototype.parseBounds = function () {\r\n        var ch;\r\n        var data;\r\n        var token = this.getNextToken();\r\n        var i = 0;\r\n        if (token != \"{\")\r\n            this.sendUnknownKeywordError();\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            data = new BoundsData();\r\n            data.min = this.parseVector3D();\r\n            data.max = this.parseVector3D();\r\n            this._bounds[i++] = data;\r\n            ch = this.getNextChar();\r\n            if (ch == \"/\") {\r\n                this.putBack();\r\n                ch = this.getNextToken();\r\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\r\n                    this.ignoreLine();\r\n                ch = this.getNextChar();\r\n            }\r\n            if (ch != \"}\")\r\n                this.putBack();\r\n        } while (ch != \"}\");\r\n    };\r\n    /**\r\n     * Parses the base frame.\r\n     */\r\n    MD5AnimParser.prototype.parseBaseFrame = function () {\r\n        var ch;\r\n        var data;\r\n        var token = this.getNextToken();\r\n        var i = 0;\r\n        if (token != \"{\")\r\n            this.sendUnknownKeywordError();\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            data = new BaseFrameData();\r\n            data.position = this.parseVector3D();\r\n            data.orientation = this.parseQuaternion();\r\n            this._baseFrameData[i++] = data;\r\n            ch = this.getNextChar();\r\n            if (ch == \"/\") {\r\n                this.putBack();\r\n                ch = this.getNextToken();\r\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\r\n                    this.ignoreLine();\r\n                ch = this.getNextChar();\r\n            }\r\n            if (ch != \"}\")\r\n                this.putBack();\r\n        } while (ch != \"}\");\r\n    };\r\n    /**\r\n     * Parses a single frame.\r\n     */\r\n    MD5AnimParser.prototype.parseFrame = function () {\r\n        var ch;\r\n        var data;\r\n        var token;\r\n        var frameIndex;\r\n        frameIndex = this.getNextInt();\r\n        token = this.getNextToken();\r\n        if (token != \"{\")\r\n            this.sendUnknownKeywordError();\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            data = new FrameData();\r\n            data.components = new Array(this._numAnimatedComponents);\r\n            for (var i = 0; i < this._numAnimatedComponents; ++i)\r\n                data.components[i] = this.getNextNumber();\r\n            this._frameData[frameIndex] = data;\r\n            ch = this.getNextChar();\r\n            if (ch == \"/\") {\r\n                this.putBack();\r\n                ch = this.getNextToken();\r\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\r\n                    this.ignoreLine();\r\n                ch = this.getNextChar();\r\n            }\r\n            if (ch != \"}\")\r\n                this.putBack();\r\n        } while (ch != \"}\");\r\n    };\r\n    /**\r\n     * Puts back the last read character into the data stream.\r\n     */\r\n    MD5AnimParser.prototype.putBack = function () {\r\n        this._parseIndex--;\r\n        this._charLineIndex--;\r\n        this._reachedEOF = this._parseIndex >= this._textData.length;\r\n    };\r\n    /**\r\n     * Gets the next token in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.getNextToken = function () {\r\n        var ch;\r\n        var token = \"\";\r\n        while (!this._reachedEOF) {\r\n            ch = this.getNextChar();\r\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n                if (token != MD5AnimParser.COMMENT_TOKEN)\r\n                    this.skipWhiteSpace();\r\n                if (token != \"\")\r\n                    return token;\r\n            }\r\n            else\r\n                token += ch;\r\n            if (token == MD5AnimParser.COMMENT_TOKEN)\r\n                return token;\r\n        }\r\n        return token;\r\n    };\r\n    /**\r\n     * Skips all whitespace in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.skipWhiteSpace = function () {\r\n        var ch;\r\n        do\r\n            ch = this.getNextChar();\r\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n        this.putBack();\r\n    };\r\n    /**\r\n     * Skips to the next line.\r\n     */\r\n    MD5AnimParser.prototype.ignoreLine = function () {\r\n        var ch;\r\n        while (!this._reachedEOF && ch != \"\\n\")\r\n            ch = this.getNextChar();\r\n    };\r\n    /**\r\n     * Retrieves the next single character in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.getNextChar = function () {\r\n        var ch = this._textData.charAt(this._parseIndex++);\r\n        if (ch == \"\\n\") {\r\n            ++this._line;\r\n            this._charLineIndex = 0;\r\n        }\r\n        else if (ch != \"\\r\")\r\n            ++this._charLineIndex;\r\n        if (this._parseIndex == this._textData.length)\r\n            this._reachedEOF = true;\r\n        return ch;\r\n    };\r\n    /**\r\n     * Retrieves the next integer in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.getNextInt = function () {\r\n        var i = parseInt(this.getNextToken());\r\n        if (isNaN(i))\r\n            this.sendParseError(\"int type\");\r\n        return i;\r\n    };\r\n    /**\r\n     * Retrieves the next floating point number in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.getNextNumber = function () {\r\n        var f = parseFloat(this.getNextToken());\r\n        if (isNaN(f))\r\n            this.sendParseError(\"float type\");\r\n        return f;\r\n    };\r\n    /**\r\n     * Retrieves the next 3d vector in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.parseVector3D = function () {\r\n        var vec = new Vector3D_1.Vector3D();\r\n        var ch = this.getNextToken();\r\n        if (ch != \"(\")\r\n            this.sendParseError(\"(\");\r\n        vec.x = this.getNextNumber();\r\n        vec.y = this.getNextNumber();\r\n        vec.z = this.getNextNumber();\r\n        if (this.getNextToken() != \")\")\r\n            this.sendParseError(\")\");\r\n        return vec;\r\n    };\r\n    /**\r\n     * Retrieves the next quaternion in the data stream.\r\n     */\r\n    MD5AnimParser.prototype.parseQuaternion = function () {\r\n        var quat = new Quaternion_1.Quaternion();\r\n        var ch = this.getNextToken();\r\n        if (ch != \"(\")\r\n            this.sendParseError(\"(\");\r\n        quat.x = this.getNextNumber();\r\n        quat.y = this.getNextNumber();\r\n        quat.z = this.getNextNumber();\r\n        // quat supposed to be unit length\r\n        var t = 1 - (quat.x * quat.x) - (quat.y * quat.y) - (quat.z * quat.z);\r\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\r\n        if (this.getNextToken() != \")\")\r\n            this.sendParseError(\")\");\r\n        return quat;\r\n    };\r\n    /**\r\n     * Parses the command line data.\r\n     */\r\n    MD5AnimParser.prototype.parseCMD = function () {\r\n        // just ignore the command line property\r\n        this.parseLiteralstring();\r\n    };\r\n    /**\r\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n     * by double quotes.\r\n     */\r\n    MD5AnimParser.prototype.parseLiteralstring = function () {\r\n        this.skipWhiteSpace();\r\n        var ch = this.getNextChar();\r\n        var str = \"\";\r\n        if (ch != \"\\\"\")\r\n            this.sendParseError(\"\\\"\");\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            ch = this.getNextChar();\r\n            if (ch != \"\\\"\")\r\n                str += ch;\r\n        } while (ch != \"\\\"\");\r\n        return str;\r\n    };\r\n    /**\r\n     * Throws an end-of-file error when a premature end of file was encountered.\r\n     */\r\n    MD5AnimParser.prototype.sendEOFError = function () {\r\n        throw new Error(\"Unexpected end of file\");\r\n    };\r\n    /**\r\n     * Throws an error when an unexpected token was encountered.\r\n     * @param expected The token type that was actually expected.\r\n     */\r\n    MD5AnimParser.prototype.sendParseError = function (expected) {\r\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n    };\r\n    /**\r\n     * Throws an error when an unknown keyword was encountered.\r\n     */\r\n    MD5AnimParser.prototype.sendUnknownKeywordError = function () {\r\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n    };\r\n    MD5AnimParser.VERSION_TOKEN = \"MD5Version\";\r\n    MD5AnimParser.COMMAND_LINE_TOKEN = \"commandline\";\r\n    MD5AnimParser.NUM_FRAMES_TOKEN = \"numFrames\";\r\n    MD5AnimParser.NUM_JOINTS_TOKEN = \"numJoints\";\r\n    MD5AnimParser.FRAME_RATE_TOKEN = \"frameRate\";\r\n    MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN = \"numAnimatedComponents\";\r\n    MD5AnimParser.HIERARCHY_TOKEN = \"hierarchy\";\r\n    MD5AnimParser.BOUNDS_TOKEN = \"bounds\";\r\n    MD5AnimParser.BASE_FRAME_TOKEN = \"baseframe\";\r\n    MD5AnimParser.FRAME_TOKEN = \"frame\";\r\n    MD5AnimParser.COMMENT_TOKEN = \"//\";\r\n    return MD5AnimParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.MD5AnimParser = MD5AnimParser;\r\n/**\r\n *\r\n */\r\nvar BaseFrameData = (function () {\r\n    function BaseFrameData() {\r\n    }\r\n    return BaseFrameData;\r\n}());\r\nexports.BaseFrameData = BaseFrameData;\r\n/**\r\n *\r\n */\r\nvar BoundsData = (function () {\r\n    function BoundsData() {\r\n    }\r\n    return BoundsData;\r\n}());\r\nexports.BoundsData = BoundsData;\r\n/**\r\n *\r\n */\r\nvar FrameData = (function () {\r\n    function FrameData() {\r\n    }\r\n    return FrameData;\r\n}());\r\nexports.FrameData = FrameData;\r\n/**\r\n *\r\n */\r\nvar HierarchyData = (function () {\r\n    function HierarchyData() {\r\n    }\r\n    return HierarchyData;\r\n}());\r\nexports.HierarchyData = HierarchyData;\r\n},{\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined}],\"awayjs-parsers/lib/MD5MeshParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\r\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\r\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\n// todo: create animation system, parse skeleton\r\n/**\r\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nvar MD5MeshParser = (function (_super) {\r\n    __extends(MD5MeshParser, _super);\r\n    /**\r\n     * Creates a new MD5MeshParser object.\r\n     */\r\n    function MD5MeshParser(additionalRotationAxis, additionalRotationRadians) {\r\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\r\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\r\n        this._parseIndex = 0;\r\n        this._line = 0;\r\n        this._charLineIndex = 0;\r\n        this._rotationQuat = new Quaternion_1.Quaternion();\r\n        this._rotationQuat.fromAxisAngle(Vector3D_1.Vector3D.X_AXIS, -Math.PI * .5);\r\n        if (additionalRotationAxis) {\r\n            var quat = new Quaternion_1.Quaternion();\r\n            quat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n            this._rotationQuat.multiply(this._rotationQuat, quat);\r\n        }\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    MD5MeshParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        return extension == \"md5sprite\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    MD5MeshParser.supportsData = function (data) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    MD5MeshParser.prototype._pProceedParsing = function () {\r\n        var token;\r\n        if (!this._startedParsing) {\r\n            this._textData = this._pGetTextData();\r\n            this._startedParsing = true;\r\n        }\r\n        while (this._pHasTime()) {\r\n            token = this.getNextToken();\r\n            switch (token) {\r\n                case MD5MeshParser.COMMENT_TOKEN:\r\n                    this.ignoreLine();\r\n                    break;\r\n                case MD5MeshParser.VERSION_TOKEN:\r\n                    this._version = this.getNextInt();\r\n                    if (this._version != 10)\r\n                        throw new Error(\"Unknown version number encountered!\");\r\n                    break;\r\n                case MD5MeshParser.COMMAND_LINE_TOKEN:\r\n                    this.parseCMD();\r\n                    break;\r\n                case MD5MeshParser.NUM_JOINTS_TOKEN:\r\n                    this._numJoints = this.getNextInt();\r\n                    this._bindPoses = new Array(this._numJoints);\r\n                    break;\r\n                case MD5MeshParser.NUM_MESHES_TOKEN:\r\n                    this._numMeshes = this.getNextInt();\r\n                    break;\r\n                case MD5MeshParser.JOINTS_TOKEN:\r\n                    this.parseJoints();\r\n                    break;\r\n                case MD5MeshParser.MESH_TOKEN:\r\n                    this.parseMesh();\r\n                    break;\r\n                default:\r\n                    if (!this._reachedEOF)\r\n                        this.sendUnknownKeywordError();\r\n            }\r\n            if (this._reachedEOF) {\r\n                this.calculateMaxJointCount();\r\n                this._animationSet = new SkeletonAnimationSet_1.SkeletonAnimationSet(this._maxJointCount);\r\n                this._sprite = new Sprite_1.Sprite();\r\n                this._graphics = this._sprite.graphics;\r\n                for (var i = 0; i < this._elementsData.length; ++i)\r\n                    this._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\r\n                //_graphics.animation = _animation;\r\n                //\t\t\t\t\t_sprite.animationController = _animationController;\r\n                //add to the content property\r\n                this._pContent.addChild(this._sprite);\r\n                this._pFinalizeAsset(this._graphics);\r\n                this._pFinalizeAsset(this._sprite);\r\n                this._pFinalizeAsset(this._skeleton);\r\n                this._pFinalizeAsset(this._animationSet);\r\n                return ParserBase_1.ParserBase.PARSING_DONE;\r\n            }\r\n        }\r\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n    };\r\n    MD5MeshParser.prototype._pStartParsing = function (frameLimit) {\r\n        //create a content object for Loaders\r\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\r\n        _super.prototype._pStartParsing.call(this, frameLimit);\r\n    };\r\n    MD5MeshParser.prototype.calculateMaxJointCount = function () {\r\n        this._maxJointCount = 0;\r\n        var numElementsData = this._elementsData.length;\r\n        for (var i = 0; i < numElementsData; ++i) {\r\n            var elementsData = this._elementsData[i];\r\n            var positionData = elementsData.positionData;\r\n            var numVerts = positionData.length;\r\n            for (var j = 0; j < numVerts; ++j) {\r\n                var zeroWeights = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\r\n                var totalJoints = positionData[j].countWeight - zeroWeights;\r\n                if (totalJoints > this._maxJointCount)\r\n                    this._maxJointCount = totalJoints;\r\n            }\r\n        }\r\n    };\r\n    MD5MeshParser.prototype.countZeroWeightJoints = function (position, weights) {\r\n        var start = position.startWeight;\r\n        var end = position.startWeight + position.countWeight;\r\n        var count = 0;\r\n        var weight;\r\n        for (var i = start; i < end; ++i) {\r\n            weight = weights[i].bias;\r\n            if (weight == 0)\r\n                ++count;\r\n        }\r\n        return count;\r\n    };\r\n    /**\r\n     * Parses the skeleton's joints.\r\n     */\r\n    MD5MeshParser.prototype.parseJoints = function () {\r\n        var ch;\r\n        var joint;\r\n        var pos;\r\n        var quat;\r\n        var i = 0;\r\n        var token = this.getNextToken();\r\n        if (token != \"{\")\r\n            this.sendUnknownKeywordError();\r\n        this._skeleton = new Skeleton_1.Skeleton();\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            joint = new SkeletonJoint_1.SkeletonJoint();\r\n            joint.name = this.parseLiteralstring();\r\n            joint.parentIndex = this.getNextInt();\r\n            pos = this.parseVector3D();\r\n            pos = this._rotationQuat.rotatePoint(pos);\r\n            quat = this.parseQuaternion();\r\n            // todo: check if this is correct, or maybe we want to actually store it as quats?\r\n            this._bindPoses[i] = quat.toMatrix3D();\r\n            this._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\r\n            var inv = this._bindPoses[i].clone();\r\n            inv.invert();\r\n            joint.inverseBindPose = inv.rawData;\r\n            this._skeleton.joints[i++] = joint;\r\n            ch = this.getNextChar();\r\n            if (ch == \"/\") {\r\n                this.putBack();\r\n                ch = this.getNextToken();\r\n                if (ch == MD5MeshParser.COMMENT_TOKEN)\r\n                    this.ignoreLine();\r\n                ch = this.getNextChar();\r\n            }\r\n            if (ch != \"}\")\r\n                this.putBack();\r\n        } while (ch != \"}\");\r\n    };\r\n    /**\r\n     * Puts back the last read character into the data stream.\r\n     */\r\n    MD5MeshParser.prototype.putBack = function () {\r\n        this._parseIndex--;\r\n        this._charLineIndex--;\r\n        this._reachedEOF = this._parseIndex >= this._textData.length;\r\n    };\r\n    /**\r\n     * Parses the mesh graphics.\r\n     */\r\n    MD5MeshParser.prototype.parseMesh = function () {\r\n        var token = this.getNextToken();\r\n        var ch;\r\n        var positionData;\r\n        var weights;\r\n        var indices;\r\n        if (token != \"{\")\r\n            this.sendUnknownKeywordError();\r\n        if (this._shaders == null)\r\n            this._shaders = new Array();\r\n        while (ch != \"}\") {\r\n            ch = this.getNextToken();\r\n            switch (ch) {\r\n                case MD5MeshParser.COMMENT_TOKEN:\r\n                    this.ignoreLine();\r\n                    break;\r\n                case MD5MeshParser.MESH_SHADER_TOKEN:\r\n                    this._shaders.push(this.parseLiteralstring());\r\n                    break;\r\n                case MD5MeshParser.MESH_NUM_VERTS_TOKEN:\r\n                    positionData = new Array(this.getNextInt());\r\n                    break;\r\n                case MD5MeshParser.MESH_NUM_TRIS_TOKEN:\r\n                    indices = new Array(this.getNextInt() * 3) /*uint*/;\r\n                    break;\r\n                case MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\r\n                    weights = new Array(this.getNextInt());\r\n                    break;\r\n                case MD5MeshParser.MESH_VERT_TOKEN:\r\n                    this.parseVertex(positionData);\r\n                    break;\r\n                case MD5MeshParser.MESH_TRI_TOKEN:\r\n                    this.parseTri(indices);\r\n                    break;\r\n                case MD5MeshParser.MESH_WEIGHT_TOKEN:\r\n                    this.parseJoint(weights);\r\n                    break;\r\n            }\r\n        }\r\n        if (this._elementsData == null)\r\n            this._elementsData = new Array();\r\n        var i = this._elementsData.length;\r\n        this._elementsData[i] = new ElementsData();\r\n        this._elementsData[i].positionData = positionData;\r\n        this._elementsData[i].weightData = weights;\r\n        this._elementsData[i].indices = indices;\r\n    };\r\n    /**\r\n     * Converts the sprite data to a SkinnedSub instance.\r\n     * @param positionData The sprite's positions.\r\n     * @param weights The joint weights per position.\r\n     * @param indices The indices for the faces.\r\n     * @return A TriangleElements instance containing all elements data for the current sprite.\r\n     */\r\n    MD5MeshParser.prototype.translateElements = function (positionData, weights, indices /*uint*/) {\r\n        var len = positionData.length;\r\n        var v1 /*int*/, v2 /*int*/, v3;\r\n        var position;\r\n        var weight;\r\n        var bindPose;\r\n        var pos;\r\n        var elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n        var uvs = new Array(len * 2);\r\n        var positions = new Array(len * 3);\r\n        var jointIndices = new Array(len * this._maxJointCount);\r\n        var jointWeights = new Array(len * this._maxJointCount);\r\n        var l = 0;\r\n        var nonZeroWeights;\r\n        for (var i = 0; i < len; ++i) {\r\n            position = positionData[i];\r\n            v1 = position.index * 3;\r\n            v2 = v1 + 1;\r\n            v3 = v1 + 2;\r\n            positions[v1] = positions[v2] = positions[v3] = 0;\r\n            nonZeroWeights = 0;\r\n            for (var j = 0; j < position.countWeight; ++j) {\r\n                weight = weights[position.startWeight + j];\r\n                if (weight.bias > 0) {\r\n                    bindPose = this._bindPoses[weight.joint];\r\n                    pos = bindPose.transformVector(weight.pos);\r\n                    positions[v1] += pos.x * weight.bias;\r\n                    positions[v2] += pos.y * weight.bias;\r\n                    positions[v3] += pos.z * weight.bias;\r\n                    // indices need to be multiplied by 3 (amount of matrix registers)\r\n                    jointIndices[l] = weight.joint * 3;\r\n                    jointWeights[l++] = weight.bias;\r\n                    ++nonZeroWeights;\r\n                }\r\n            }\r\n            for (j = nonZeroWeights; j < this._maxJointCount; ++j) {\r\n                jointIndices[l] = 0;\r\n                jointWeights[l++] = 0;\r\n            }\r\n            v1 = position.index << 1;\r\n            uvs[v1++] = position.s;\r\n            uvs[v1] = position.t;\r\n        }\r\n        elements.jointsPerVertex = this._maxJointCount;\r\n        elements.setIndices(indices);\r\n        elements.setPositions(positions);\r\n        elements.setUVs(uvs);\r\n        elements.setJointIndices(jointIndices);\r\n        elements.setJointWeights(jointWeights);\r\n        // cause explicit updates\r\n        elements.setNormals(null);\r\n        elements.setTangents(null);\r\n        // turn auto updates off because they may be animated and set explicitly\r\n        elements.autoDeriveTangents = false;\r\n        elements.autoDeriveNormals = false;\r\n        return elements;\r\n    };\r\n    /**\r\n     * Retrieve the next triplet of position indices that form a face.\r\n     * @param indices The index list in which to store the read data.\r\n     */\r\n    MD5MeshParser.prototype.parseTri = function (indices /*uint*/) {\r\n        var index = this.getNextInt() * 3;\r\n        indices[index] = this.getNextInt();\r\n        indices[index + 1] = this.getNextInt();\r\n        indices[index + 2] = this.getNextInt();\r\n    };\r\n    /**\r\n     * Reads a new joint data set for a single joint.\r\n     * @param weights the target list to contain the weight data.\r\n     */\r\n    MD5MeshParser.prototype.parseJoint = function (weights) {\r\n        var weight = new JointData();\r\n        weight.index = this.getNextInt();\r\n        weight.joint = this.getNextInt();\r\n        weight.bias = this.getNextNumber();\r\n        weight.pos = this.parseVector3D();\r\n        weights[weight.index] = weight;\r\n    };\r\n    /**\r\n     * Reads the data for a single position.\r\n     * @param positionData The list to contain the position data.\r\n     */\r\n    MD5MeshParser.prototype.parseVertex = function (positionData) {\r\n        var position = new PositionData();\r\n        position.index = this.getNextInt();\r\n        this.parseUV(position);\r\n        position.startWeight = this.getNextInt();\r\n        position.countWeight = this.getNextInt();\r\n        //\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\r\n        positionData[position.index] = position;\r\n    };\r\n    /**\r\n     * Reads the next uv coordinate.\r\n     * @param positionData The positionData to contain the UV coordinates.\r\n     */\r\n    MD5MeshParser.prototype.parseUV = function (positionData) {\r\n        var ch = this.getNextToken();\r\n        if (ch != \"(\")\r\n            this.sendParseError(\"(\");\r\n        positionData.s = this.getNextNumber();\r\n        positionData.t = this.getNextNumber();\r\n        if (this.getNextToken() != \")\")\r\n            this.sendParseError(\")\");\r\n    };\r\n    /**\r\n     * Gets the next token in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.getNextToken = function () {\r\n        var ch;\r\n        var token = \"\";\r\n        while (!this._reachedEOF) {\r\n            ch = this.getNextChar();\r\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n                if (token != MD5MeshParser.COMMENT_TOKEN)\r\n                    this.skipWhiteSpace();\r\n                if (token != \"\")\r\n                    return token;\r\n            }\r\n            else\r\n                token += ch;\r\n            if (token == MD5MeshParser.COMMENT_TOKEN)\r\n                return token;\r\n        }\r\n        return token;\r\n    };\r\n    /**\r\n     * Skips all whitespace in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.skipWhiteSpace = function () {\r\n        var ch;\r\n        do\r\n            ch = this.getNextChar();\r\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n        this.putBack();\r\n    };\r\n    /**\r\n     * Skips to the next line.\r\n     */\r\n    MD5MeshParser.prototype.ignoreLine = function () {\r\n        var ch;\r\n        while (!this._reachedEOF && ch != \"\\n\")\r\n            ch = this.getNextChar();\r\n    };\r\n    /**\r\n     * Retrieves the next single character in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.getNextChar = function () {\r\n        var ch = this._textData.charAt(this._parseIndex++);\r\n        if (ch == \"\\n\") {\r\n            ++this._line;\r\n            this._charLineIndex = 0;\r\n        }\r\n        else if (ch != \"\\r\")\r\n            ++this._charLineIndex;\r\n        if (this._parseIndex >= this._textData.length)\r\n            this._reachedEOF = true;\r\n        return ch;\r\n    };\r\n    /**\r\n     * Retrieves the next integer in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.getNextInt = function () {\r\n        var i = parseInt(this.getNextToken());\r\n        if (isNaN(i))\r\n            this.sendParseError(\"int type\");\r\n        return i;\r\n    };\r\n    /**\r\n     * Retrieves the next floating point number in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.getNextNumber = function () {\r\n        var f = parseFloat(this.getNextToken());\r\n        if (isNaN(f))\r\n            this.sendParseError(\"float type\");\r\n        return f;\r\n    };\r\n    /**\r\n     * Retrieves the next 3d vector in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.parseVector3D = function () {\r\n        var vec = new Vector3D_1.Vector3D();\r\n        var ch = this.getNextToken();\r\n        if (ch != \"(\")\r\n            this.sendParseError(\"(\");\r\n        vec.x = -this.getNextNumber();\r\n        vec.y = this.getNextNumber();\r\n        vec.z = this.getNextNumber();\r\n        if (this.getNextToken() != \")\")\r\n            this.sendParseError(\")\");\r\n        return vec;\r\n    };\r\n    /**\r\n     * Retrieves the next quaternion in the data stream.\r\n     */\r\n    MD5MeshParser.prototype.parseQuaternion = function () {\r\n        var quat = new Quaternion_1.Quaternion();\r\n        var ch = this.getNextToken();\r\n        if (ch != \"(\")\r\n            this.sendParseError(\"(\");\r\n        quat.x = this.getNextNumber();\r\n        quat.y = -this.getNextNumber();\r\n        quat.z = -this.getNextNumber();\r\n        // quat supposed to be unit length\r\n        var t = 1 - quat.x * quat.x - quat.y * quat.y - quat.z * quat.z;\r\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\r\n        if (this.getNextToken() != \")\")\r\n            this.sendParseError(\")\");\r\n        var rotQuat = new Quaternion_1.Quaternion();\r\n        rotQuat.multiply(this._rotationQuat, quat);\r\n        return rotQuat;\r\n    };\r\n    /**\r\n     * Parses the command line data.\r\n     */\r\n    MD5MeshParser.prototype.parseCMD = function () {\r\n        // just ignore the command line property\r\n        this.parseLiteralstring();\r\n    };\r\n    /**\r\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n     * by double quotes.\r\n     */\r\n    MD5MeshParser.prototype.parseLiteralstring = function () {\r\n        this.skipWhiteSpace();\r\n        var ch = this.getNextChar();\r\n        var str = \"\";\r\n        if (ch != \"\\\"\")\r\n            this.sendParseError(\"\\\"\");\r\n        do {\r\n            if (this._reachedEOF)\r\n                this.sendEOFError();\r\n            ch = this.getNextChar();\r\n            if (ch != \"\\\"\")\r\n                str += ch;\r\n        } while (ch != \"\\\"\");\r\n        return str;\r\n    };\r\n    /**\r\n     * Throws an end-of-file error when a premature end of file was encountered.\r\n     */\r\n    MD5MeshParser.prototype.sendEOFError = function () {\r\n        throw new Error(\"Unexpected end of file\");\r\n    };\r\n    /**\r\n     * Throws an error when an unexpected token was encountered.\r\n     * @param expected The token type that was actually expected.\r\n     */\r\n    MD5MeshParser.prototype.sendParseError = function (expected) {\r\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n    };\r\n    /**\r\n     * Throws an error when an unknown keyword was encountered.\r\n     */\r\n    MD5MeshParser.prototype.sendUnknownKeywordError = function () {\r\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n    };\r\n    MD5MeshParser.VERSION_TOKEN = \"MD5Version\";\r\n    MD5MeshParser.COMMAND_LINE_TOKEN = \"commandline\";\r\n    MD5MeshParser.NUM_JOINTS_TOKEN = \"numJoints\";\r\n    MD5MeshParser.NUM_MESHES_TOKEN = \"numMeshes\";\r\n    MD5MeshParser.COMMENT_TOKEN = \"//\";\r\n    MD5MeshParser.JOINTS_TOKEN = \"joints\";\r\n    MD5MeshParser.MESH_TOKEN = \"mesh\";\r\n    MD5MeshParser.MESH_SHADER_TOKEN = \"shader\";\r\n    MD5MeshParser.MESH_NUM_VERTS_TOKEN = \"numverts\";\r\n    MD5MeshParser.MESH_VERT_TOKEN = \"vert\";\r\n    MD5MeshParser.MESH_NUM_TRIS_TOKEN = \"numtris\";\r\n    MD5MeshParser.MESH_TRI_TOKEN = \"tri\";\r\n    MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN = \"numweights\";\r\n    MD5MeshParser.MESH_WEIGHT_TOKEN = \"weight\";\r\n    return MD5MeshParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.MD5MeshParser = MD5MeshParser;\r\nvar PositionData = (function () {\r\n    function PositionData() {\r\n    }\r\n    return PositionData;\r\n}());\r\nexports.PositionData = PositionData;\r\nvar JointData = (function () {\r\n    function JointData() {\r\n    }\r\n    return JointData;\r\n}());\r\nexports.JointData = JointData;\r\nvar ElementsData = (function () {\r\n    function ElementsData() {\r\n    }\r\n    return ElementsData;\r\n}());\r\nexports.ElementsData = ElementsData;\r\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined}],\"awayjs-parsers/lib/Max3DSParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\r\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\r\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n/**\r\n * Max3DSParser provides a parser for the 3ds data type.\r\n */\r\nvar Max3DSParser = (function (_super) {\r\n    __extends(Max3DSParser, _super);\r\n    /**\r\n     * Creates a new <code>Max3DSParser</code> object.\r\n     *\r\n     * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\r\n     */\r\n    function Max3DSParser(useSmoothingGroups) {\r\n        if (useSmoothingGroups === void 0) { useSmoothingGroups = true; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\r\n        this._useSmoothingGroups = useSmoothingGroups;\r\n    }\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    Max3DSParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        return extension == \"3ds\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    Max3DSParser.supportsData = function (data) {\r\n        var ba;\r\n        ba = ParserUtils_1.ParserUtils.toByteArray(data);\r\n        if (ba) {\r\n            ba.position = 0;\r\n            if (ba.readShort() == 0x4d4d)\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Max3DSParser.prototype._iResolveDependency = function (resourceDependency) {\r\n        if (resourceDependency.assets.length == 1) {\r\n            var asset;\r\n            asset = resourceDependency.assets[0];\r\n            if (asset.isAsset(BitmapImage2D_1.BitmapImage2D)) {\r\n                var tex;\r\n                tex = this._textures[resourceDependency.id];\r\n                tex.texture = new Single2DTexture_1.Single2DTexture(asset);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Max3DSParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\r\n        // TODO: Implement\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Max3DSParser.prototype._pProceedParsing = function () {\r\n        if (!this._byteData) {\r\n            this._byteData = this._pGetByteData();\r\n            this._byteData.position = 0;\r\n            //----------------------------------------------------------------------------\r\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n            //----------------------------------------------------------------------------\r\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n            //----------------------------------------------------------------------------\r\n            this._textures = {};\r\n            this._materials = {};\r\n            this._unfinalized_objects = {};\r\n        }\r\n        // TODO: With this construct, the loop will run no-op for as long\r\n        // as there is time once file has finished reading. Consider a nice\r\n        // way to stop loop when byte array is empty, without putting it in\r\n        // the while-conditional, which will prevent finalizations from\r\n        // happening after the last chunk.\r\n        while (this._pHasTime()) {\r\n            // If we are currently working on an object, and the most recent chunk was\r\n            // the last one in that object, finalize the current object.\r\n            if (this._cur_mat && this._byteData.position >= this._cur_mat_end)\r\n                this.finalizeCurrentMaterial();\r\n            else if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\r\n                // Can't finalize at this point, because we have to wait until the full\r\n                // animation section has been parsed for any potential pivot definitions\r\n                this._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\r\n                this._cur_obj_end = Number.MAX_VALUE /*uint*/;\r\n                this._cur_obj = null;\r\n            }\r\n            if (this._byteData.getBytesAvailable() > 0) {\r\n                var cid;\r\n                var len;\r\n                var end;\r\n                cid = this._byteData.readUnsignedShort();\r\n                len = this._byteData.readUnsignedInt();\r\n                end = this._byteData.position + (len - 6);\r\n                switch (cid) {\r\n                    case 0x4D4D: // MAIN3DS\r\n                    case 0x3D3D: // EDIT3DS\r\n                    case 0xB000:\r\n                        // This types are \"container chunks\" and contain only\r\n                        // sub-chunks (no data on their own.) This means that\r\n                        // there is nothing more to parse at this point, and\r\n                        // instead we should progress to the next chunk, which\r\n                        // will be the first sub-chunk of this one.\r\n                        continue;\r\n                    case 0xAFFF:\r\n                        this._cur_mat_end = end;\r\n                        this._cur_mat = this.parseMaterial();\r\n                        break;\r\n                    case 0x4000:\r\n                        this._cur_obj_end = end;\r\n                        this._cur_obj = new ObjectVO();\r\n                        this._cur_obj.name = this.readNulTermstring();\r\n                        this._cur_obj.materials = new Array();\r\n                        this._cur_obj.materialFaces = {};\r\n                        break;\r\n                    case 0x4100:\r\n                        this._cur_obj.type = Sprite_1.Sprite.assetType;\r\n                        break;\r\n                    case 0x4110:\r\n                        this.parseVertexList();\r\n                        break;\r\n                    case 0x4120:\r\n                        this.parseFaceList();\r\n                        break;\r\n                    case 0x4140:\r\n                        this.parseUVList();\r\n                        break;\r\n                    case 0x4130:\r\n                        this.parseFaceMaterialList();\r\n                        break;\r\n                    case 0x4160:\r\n                        this._cur_obj.transform = this.readTransform();\r\n                        break;\r\n                    case 0xB002:\r\n                        this.parseObjectAnimation(end);\r\n                        break;\r\n                    case 0x4150:\r\n                        this.parseSmoothingGroups();\r\n                        break;\r\n                    default:\r\n                        // Skip this (unknown) chunk\r\n                        this._byteData.position += (len - 6);\r\n                        break;\r\n                }\r\n                // Pause parsing if there were any dependencies found during this\r\n                // iteration (i.e. if there are any dependencies that need to be\r\n                // retrieved at this time.)\r\n                if (this.dependencies.length) {\r\n                    this._pPauseAndRetrieveDependencies();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // More parsing is required if the entire byte array has not yet\r\n        // been read, or if there is a currently non-finalized object in\r\n        // the pipeline.\r\n        if (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\r\n            return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n        }\r\n        else {\r\n            var name;\r\n            // Finalize any remaining objects before ending.\r\n            for (name in this._unfinalized_objects) {\r\n                var obj;\r\n                obj = this.constructObject(this._unfinalized_objects[name]);\r\n                if (obj) {\r\n                    //add to the content property\r\n                    this._pContent.addChild(obj);\r\n                    this._pFinalizeAsset(obj, name);\r\n                }\r\n            }\r\n            return ParserBase_1.ParserBase.PARSING_DONE;\r\n        }\r\n    };\r\n    Max3DSParser.prototype._pStartParsing = function (frameLimit) {\r\n        //create a content object for Loaders\r\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\r\n        _super.prototype._pStartParsing.call(this, frameLimit);\r\n    };\r\n    Max3DSParser.prototype.parseMaterial = function () {\r\n        var mat;\r\n        mat = new MaterialVO();\r\n        while (this._byteData.position < this._cur_mat_end) {\r\n            var cid;\r\n            var len;\r\n            var end;\r\n            cid = this._byteData.readUnsignedShort();\r\n            len = this._byteData.readUnsignedInt();\r\n            end = this._byteData.position + (len - 6);\r\n            switch (cid) {\r\n                case 0xA000:\r\n                    mat.name = this.readNulTermstring();\r\n                    break;\r\n                case 0xA010:\r\n                    mat.ambientColor = this.readColor();\r\n                    break;\r\n                case 0xA020:\r\n                    mat.diffuseColor = this.readColor();\r\n                    break;\r\n                case 0xA030:\r\n                    mat.specularColor = this.readColor();\r\n                    break;\r\n                case 0xA081:\r\n                    mat.twoSided = true;\r\n                    break;\r\n                case 0xA200:\r\n                    mat.colorMap = this.parseTexture(end);\r\n                    break;\r\n                case 0xA204:\r\n                    mat.specularMap = this.parseTexture(end);\r\n                    break;\r\n                default:\r\n                    this._byteData.position = end;\r\n                    break;\r\n            }\r\n        }\r\n        return mat;\r\n    };\r\n    Max3DSParser.prototype.parseTexture = function (end /*uint*/) {\r\n        var tex;\r\n        tex = new TextureVO();\r\n        while (this._byteData.position < end) {\r\n            var cid;\r\n            var len;\r\n            cid = this._byteData.readUnsignedShort();\r\n            len = this._byteData.readUnsignedInt();\r\n            switch (cid) {\r\n                case 0xA300:\r\n                    tex.url = this.readNulTermstring();\r\n                    break;\r\n                default:\r\n                    // Skip this unknown texture sub-chunk\r\n                    this._byteData.position += (len - 6);\r\n                    break;\r\n            }\r\n        }\r\n        this._textures[tex.url] = tex;\r\n        this._pAddDependency(tex.url, new URLRequest_1.URLRequest(tex.url));\r\n        return tex;\r\n    };\r\n    Max3DSParser.prototype.parseVertexList = function () {\r\n        var i;\r\n        var len;\r\n        var count;\r\n        count = this._byteData.readUnsignedShort();\r\n        this._cur_obj.verts = new Array(count * 3);\r\n        i = 0;\r\n        len = this._cur_obj.verts.length;\r\n        while (i < len) {\r\n            var x, y, z;\r\n            x = this._byteData.readFloat();\r\n            y = this._byteData.readFloat();\r\n            z = this._byteData.readFloat();\r\n            this._cur_obj.verts[i++] = x;\r\n            this._cur_obj.verts[i++] = z;\r\n            this._cur_obj.verts[i++] = y;\r\n        }\r\n    };\r\n    Max3DSParser.prototype.parseFaceList = function () {\r\n        var i;\r\n        var len;\r\n        var count;\r\n        count = this._byteData.readUnsignedShort();\r\n        this._cur_obj.indices = new Array(count * 3) /*uint*/;\r\n        i = 0;\r\n        len = this._cur_obj.indices.length;\r\n        while (i < len) {\r\n            var i0 /*uint*/, i1 /*uint*/, i2;\r\n            i0 = this._byteData.readUnsignedShort();\r\n            i1 = this._byteData.readUnsignedShort();\r\n            i2 = this._byteData.readUnsignedShort();\r\n            this._cur_obj.indices[i++] = i0;\r\n            this._cur_obj.indices[i++] = i2;\r\n            this._cur_obj.indices[i++] = i1;\r\n            // Skip \"face info\", irrelevant in Away3D\r\n            this._byteData.position += 2;\r\n        }\r\n        this._cur_obj.smoothingGroups = new Array(count) /*uint*/;\r\n    };\r\n    Max3DSParser.prototype.parseSmoothingGroups = function () {\r\n        var len = this._cur_obj.indices.length / 3;\r\n        var i = 0;\r\n        while (i < len) {\r\n            this._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\r\n            i++;\r\n        }\r\n    };\r\n    Max3DSParser.prototype.parseUVList = function () {\r\n        var i;\r\n        var len;\r\n        var count;\r\n        count = this._byteData.readUnsignedShort();\r\n        this._cur_obj.uvs = new Array(count * 2);\r\n        i = 0;\r\n        len = this._cur_obj.uvs.length;\r\n        while (i < len) {\r\n            this._cur_obj.uvs[i++] = this._byteData.readFloat();\r\n            this._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\r\n        }\r\n    };\r\n    Max3DSParser.prototype.parseFaceMaterialList = function () {\r\n        var mat;\r\n        var count;\r\n        var i;\r\n        var faces;\r\n        mat = this.readNulTermstring();\r\n        count = this._byteData.readUnsignedShort();\r\n        faces = new Array(count) /*uint*/;\r\n        i = 0;\r\n        while (i < faces.length)\r\n            faces[i++] = this._byteData.readUnsignedShort();\r\n        this._cur_obj.materials.push(mat);\r\n        this._cur_obj.materialFaces[mat] = faces;\r\n    };\r\n    Max3DSParser.prototype.parseObjectAnimation = function (end) {\r\n        var vo;\r\n        var obj;\r\n        var pivot;\r\n        var name;\r\n        var hier;\r\n        // Pivot defaults to origin\r\n        pivot = new Vector3D_1.Vector3D;\r\n        while (this._byteData.position < end) {\r\n            var cid;\r\n            var len;\r\n            cid = this._byteData.readUnsignedShort();\r\n            len = this._byteData.readUnsignedInt();\r\n            switch (cid) {\r\n                case 0xb010:\r\n                    name = this.readNulTermstring();\r\n                    this._byteData.position += 4;\r\n                    hier = this._byteData.readShort();\r\n                    break;\r\n                case 0xb013:\r\n                    pivot.x = this._byteData.readFloat();\r\n                    pivot.z = this._byteData.readFloat();\r\n                    pivot.y = this._byteData.readFloat();\r\n                    break;\r\n                default:\r\n                    this._byteData.position += (len - 6);\r\n                    break;\r\n            }\r\n        }\r\n        // If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\r\n        // and will be ignored in this version of the parser\r\n        // TODO: Implement containers in 3DS parser.\r\n        if (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\r\n            vo = this._unfinalized_objects[name];\r\n            obj = this.constructObject(vo, pivot);\r\n            if (obj) {\r\n                //add to the content property\r\n                this._pContent.addChild(obj);\r\n                this._pFinalizeAsset(obj, vo.name);\r\n            }\r\n            delete this._unfinalized_objects[name];\r\n        }\r\n    };\r\n    Max3DSParser.prototype.constructObject = function (obj, pivot) {\r\n        if (pivot === void 0) { pivot = null; }\r\n        if (obj.type == Sprite_1.Sprite.assetType) {\r\n            var i;\r\n            var sub;\r\n            var graphics;\r\n            var mat;\r\n            var sprite;\r\n            var mtx;\r\n            var vertices;\r\n            var faces;\r\n            if (obj.materials.length > 1)\r\n                console.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\r\n            // Ignore empty objects\r\n            if (!obj.indices || obj.indices.length == 0)\r\n                return null;\r\n            vertices = new Array(obj.verts.length / 3);\r\n            faces = new Array(obj.indices.length / 3);\r\n            this.prepareData(vertices, faces, obj);\r\n            if (this._useSmoothingGroups)\r\n                this.applySmoothGroups(vertices, faces);\r\n            obj.verts = new Array(vertices.length * 3);\r\n            for (i = 0; i < vertices.length; i++) {\r\n                obj.verts[i * 3] = vertices[i].x;\r\n                obj.verts[i * 3 + 1] = vertices[i].y;\r\n                obj.verts[i * 3 + 2] = vertices[i].z;\r\n            }\r\n            obj.indices = new Array(faces.length * 3) /*uint*/;\r\n            for (i = 0; i < faces.length; i++) {\r\n                obj.indices[i * 3] = faces[i].a;\r\n                obj.indices[i * 3 + 1] = faces[i].b;\r\n                obj.indices[i * 3 + 2] = faces[i].c;\r\n            }\r\n            if (obj.uvs) {\r\n                // If the object had UVs to start with, use UVs generated by\r\n                // smoothing group splitting algorithm. Otherwise those UVs\r\n                // will be nonsense and should be skipped.\r\n                obj.uvs = new Array(vertices.length * 2);\r\n                for (i = 0; i < vertices.length; i++) {\r\n                    obj.uvs[i * 2] = vertices[i].u;\r\n                    obj.uvs[i * 2 + 1] = vertices[i].v;\r\n                }\r\n            }\r\n            if (obj.materials.length > 0) {\r\n                var mname;\r\n                mname = obj.materials[0];\r\n                mat = this._materials[mname].material;\r\n            }\r\n            // Build sprite and return it\r\n            sprite = new Sprite_1.Sprite(mat);\r\n            sprite.transform.matrix3D = new Matrix3D_1.Matrix3D(obj.transform);\r\n            graphics = sprite.graphics;\r\n            // Construct elements (potentially splitting buffers)\r\n            // and add them to graphics.\r\n            sub = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n            sub.setIndices(obj.indices);\r\n            sub.setPositions(obj.verts);\r\n            sub.setUVs(obj.uvs);\r\n            graphics.addGraphic(sub);\r\n            // Apply pivot translation to graphics if a pivot was\r\n            // found while parsing the keyframe chunk earlier.\r\n            if (pivot) {\r\n                if (obj.transform) {\r\n                    // If a transform was found while parsing the\r\n                    // object chunk, use it to find the local pivot vector\r\n                    mtx = new Matrix3D_1.Matrix3D(obj.transform);\r\n                    mtx.rawData[12] = 0;\r\n                    mtx.rawData[13] = 0;\r\n                    mtx.rawData[14] = 0;\r\n                    pivot = mtx.transformVector(pivot);\r\n                }\r\n                pivot.scaleBy(-1);\r\n                mtx = new Matrix3D_1.Matrix3D();\r\n                mtx.appendTranslation(pivot.x, pivot.y, pivot.z);\r\n                graphics.applyTransformation(mtx);\r\n            }\r\n            // Apply transformation to graphics if a transformation\r\n            // was found while parsing the object chunk earlier.\r\n            if (obj.transform) {\r\n                mtx = new Matrix3D_1.Matrix3D(obj.transform);\r\n                mtx.invert();\r\n                graphics.applyTransformation(mtx);\r\n            }\r\n            // Final transform applied to graphics. Finalize the graphics,\r\n            // which will no longer be modified after this point.\r\n            this._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\r\n            return sprite;\r\n        }\r\n        // If reached, unknown\r\n        return null;\r\n    };\r\n    Max3DSParser.prototype.prepareData = function (vertices, faces, obj) {\r\n        // convert raw ObjectVO's data to structured VertexVO and FaceVO\r\n        var i;\r\n        var j;\r\n        var k;\r\n        var len = obj.verts.length;\r\n        for (i = 0, j = 0, k = 0; i < len;) {\r\n            var v = new VertexVO;\r\n            v.x = obj.verts[i++];\r\n            v.y = obj.verts[i++];\r\n            v.z = obj.verts[i++];\r\n            if (obj.uvs) {\r\n                v.u = obj.uvs[j++];\r\n                v.v = obj.uvs[j++];\r\n            }\r\n            vertices[k++] = v;\r\n        }\r\n        len = obj.indices.length;\r\n        for (i = 0, k = 0; i < len;) {\r\n            var f = new FaceVO();\r\n            f.a = obj.indices[i++];\r\n            f.b = obj.indices[i++];\r\n            f.c = obj.indices[i++];\r\n            f.smoothGroup = obj.smoothingGroups[k] || 0;\r\n            faces[k++] = f;\r\n        }\r\n    };\r\n    Max3DSParser.prototype.applySmoothGroups = function (vertices, faces) {\r\n        // clone vertices according to following rule:\r\n        // clone if vertex's in faces from groups 1+2 and 3\r\n        // don't clone if vertex's in faces from groups 1+2, 3 and 1+3\r\n        var i;\r\n        var j;\r\n        var k;\r\n        var l;\r\n        var len;\r\n        var numVerts = vertices.length;\r\n        var numFaces = faces.length;\r\n        // extract groups data for vertices\r\n        var vGroups = new Array(numVerts);\r\n        for (i = 0; i < numVerts; i++)\r\n            vGroups[i] = new Array() /*uint*/;\r\n        for (i = 0; i < numFaces; i++) {\r\n            var face = faces[i];\r\n            for (j = 0; j < 3; j++) {\r\n                var groups = vGroups[(j == 0) ? face.a : ((j == 1) ? face.b : face.c)];\r\n                var group = face.smoothGroup;\r\n                for (k = groups.length - 1; k >= 0; k--) {\r\n                    if ((group & groups[k]) > 0) {\r\n                        group |= groups[k];\r\n                        groups.splice(k, 1);\r\n                        k = groups.length - 1;\r\n                    }\r\n                }\r\n                groups.push(group);\r\n            }\r\n        }\r\n        // clone vertices\r\n        var vClones = new Array(numVerts);\r\n        for (i = 0; i < numVerts; i++) {\r\n            if ((len = vGroups[i].length) < 1)\r\n                continue;\r\n            var clones = new Array(len);\r\n            vClones[i] = clones;\r\n            clones[0] = i;\r\n            var v0 = vertices[i];\r\n            for (j = 1; j < len; j++) {\r\n                var v1 = new VertexVO;\r\n                v1.x = v0.x;\r\n                v1.y = v0.y;\r\n                v1.z = v0.z;\r\n                v1.u = v0.u;\r\n                v1.v = v0.v;\r\n                clones[j] = vertices.length;\r\n                vertices.push(v1);\r\n            }\r\n        }\r\n        numVerts = vertices.length;\r\n        for (i = 0; i < numFaces; i++) {\r\n            face = faces[i];\r\n            group = face.smoothGroup;\r\n            for (j = 0; j < 3; j++) {\r\n                k = (j == 0) ? face.a : ((j == 1) ? face.b : face.c);\r\n                groups = vGroups[k];\r\n                len = groups.length;\r\n                clones = vClones[k];\r\n                for (l = 0; l < len; l++) {\r\n                    if (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\r\n                        var index = clones[l];\r\n                        if (group == 0) {\r\n                            // vertex is unique if no smoothGroup found\r\n                            groups.splice(l, 1);\r\n                            clones.splice(l, 1);\r\n                        }\r\n                        if (j == 0)\r\n                            face.a = index;\r\n                        else if (j == 1)\r\n                            face.b = index;\r\n                        else\r\n                            face.c = index;\r\n                        l = len;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Max3DSParser.prototype.finalizeCurrentMaterial = function () {\r\n        var mat;\r\n        mat = new MethodMaterial_1.MethodMaterial(this._cur_mat.ambientColor);\r\n        if (this._cur_mat.colorMap)\r\n            mat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultTexture();\r\n        mat.diffuseMethod.color = this._cur_mat.diffuseColor;\r\n        mat.specularMethod.color = this._cur_mat.specularColor;\r\n        if (this.materialMode >= 2)\r\n            mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n        mat.bothSides = this._cur_mat.twoSided;\r\n        this._pFinalizeAsset(mat, this._cur_mat.name);\r\n        this._materials[this._cur_mat.name] = this._cur_mat;\r\n        this._cur_mat.material = mat;\r\n        this._cur_mat = null;\r\n    };\r\n    Max3DSParser.prototype.readNulTermstring = function () {\r\n        var chr;\r\n        var str = \"\";\r\n        while ((chr = this._byteData.readUnsignedByte()) > 0)\r\n            str += String.fromCharCode(chr);\r\n        return str;\r\n    };\r\n    Max3DSParser.prototype.readTransform = function () {\r\n        var data = new Float32Array(16);\r\n        // X axis\r\n        data[0] = this._byteData.readFloat(); // X\r\n        data[2] = this._byteData.readFloat(); // Z\r\n        data[1] = this._byteData.readFloat(); // Y\r\n        data[3] = 0;\r\n        // Z axis\r\n        data[8] = this._byteData.readFloat(); // X\r\n        data[10] = this._byteData.readFloat(); // Z\r\n        data[9] = this._byteData.readFloat(); // Y\r\n        data[11] = 0;\r\n        // Y Axis\r\n        data[4] = this._byteData.readFloat(); // X\r\n        data[6] = this._byteData.readFloat(); // Z\r\n        data[5] = this._byteData.readFloat(); // Y\r\n        data[7] = 0;\r\n        // Translation\r\n        data[12] = this._byteData.readFloat(); // X\r\n        data[14] = this._byteData.readFloat(); // Z\r\n        data[13] = this._byteData.readFloat(); // Y\r\n        data[15] = 1;\r\n        return data;\r\n    };\r\n    Max3DSParser.prototype.readColor = function () {\r\n        var cid;\r\n        var len;\r\n        var r /*int*/, g /*int*/, b;\r\n        cid = this._byteData.readUnsignedShort();\r\n        len = this._byteData.readUnsignedInt();\r\n        switch (cid) {\r\n            case 0x0010:\r\n                r = this._byteData.readFloat() * 255;\r\n                g = this._byteData.readFloat() * 255;\r\n                b = this._byteData.readFloat() * 255;\r\n                break;\r\n            case 0x0011:\r\n                r = this._byteData.readUnsignedByte();\r\n                g = this._byteData.readUnsignedByte();\r\n                b = this._byteData.readUnsignedByte();\r\n                break;\r\n            default:\r\n                this._byteData.position += (len - 6);\r\n                break;\r\n        }\r\n        return (r << 16) | (g << 8) | b;\r\n    };\r\n    return Max3DSParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.Max3DSParser = Max3DSParser;\r\n/**\r\n *\r\n */\r\nvar FaceVO = (function () {\r\n    function FaceVO() {\r\n    }\r\n    return FaceVO;\r\n}());\r\nexports.FaceVO = FaceVO;\r\n/**\r\n *\r\n */\r\nvar MaterialVO = (function () {\r\n    function MaterialVO() {\r\n    }\r\n    return MaterialVO;\r\n}());\r\nexports.MaterialVO = MaterialVO;\r\n/**\r\n *\r\n */\r\nvar ObjectVO = (function () {\r\n    function ObjectVO() {\r\n    }\r\n    return ObjectVO;\r\n}());\r\nexports.ObjectVO = ObjectVO;\r\n/**\r\n *\r\n */\r\nvar TextureVO = (function () {\r\n    function TextureVO() {\r\n    }\r\n    return TextureVO;\r\n}());\r\nexports.TextureVO = TextureVO;\r\n/**\r\n *\r\n */\r\nvar VertexVO = (function () {\r\n    function VertexVO() {\r\n    }\r\n    return VertexVO;\r\n}());\r\nexports.VertexVO = VertexVO;\r\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined}],\"awayjs-parsers/lib/OBJParser\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\r\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\r\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\r\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\r\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\r\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nvar SpecularBasicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\r\n/**\r\n * OBJParser provides a parser for the OBJ data type.\r\n */\r\nvar OBJParser = (function (_super) {\r\n    __extends(OBJParser, _super);\r\n    /**\r\n     * Creates a new OBJParser object.\r\n     * @param uri The url or id of the data or file to be parsed.\r\n     * @param extra The holder for extra contextual data that the parser might need.\r\n     */\r\n    function OBJParser(scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\r\n        this._mtlLibLoaded = true;\r\n        this._activeMaterialID = \"\";\r\n        this._scale = scale;\r\n    }\r\n    Object.defineProperty(OBJParser.prototype, \"scale\", {\r\n        /**\r\n         * Scaling factor applied directly to vertices data\r\n         * @param value The scaling factor.\r\n         */\r\n        set: function (value) {\r\n            this._scale = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Indicates whether or not a given file extension is supported by the parser.\r\n     * @param extension The file extension of a potential file to be parsed.\r\n     * @return Whether or not the given file type is supported.\r\n     */\r\n    OBJParser.supportsType = function (extension) {\r\n        extension = extension.toLowerCase();\r\n        return extension == \"obj\";\r\n    };\r\n    /**\r\n     * Tests whether a data block can be parsed by the parser.\r\n     * @param data The data block to potentially be parsed.\r\n     * @return Whether or not the given data is supported.\r\n     */\r\n    OBJParser.supportsData = function (data) {\r\n        var content = ParserUtils_1.ParserUtils.toString(data);\r\n        var hasV = false;\r\n        var hasF = false;\r\n        if (content) {\r\n            hasV = content.indexOf(\"\\nv \") != -1;\r\n            hasF = content.indexOf(\"\\nf \") != -1;\r\n        }\r\n        return hasV && hasF;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    OBJParser.prototype._iResolveDependency = function (resourceDependency) {\r\n        if (resourceDependency.id == 'mtl') {\r\n            var str = ParserUtils_1.ParserUtils.toString(resourceDependency.data);\r\n            this.parseMtl(str);\r\n        }\r\n        else {\r\n            var asset;\r\n            if (resourceDependency.assets.length != 1) {\r\n                return;\r\n            }\r\n            asset = resourceDependency.assets[0];\r\n            if (asset.isAsset(BitmapImage2D_1.BitmapImage2D)) {\r\n                var lm = new LoadedMaterial();\r\n                lm.materialID = resourceDependency.id;\r\n                lm.texture = new Single2DTexture_1.Single2DTexture(asset);\r\n                this._materialLoaded.push(lm);\r\n                if (this._sprites.length > 0) {\r\n                    this.applyMaterial(lm);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    OBJParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\r\n        if (resourceDependency.id == \"mtl\") {\r\n            this._mtlLib = false;\r\n            this._mtlLibLoaded = false;\r\n        }\r\n        else {\r\n            var lm = new LoadedMaterial();\r\n            lm.materialID = resourceDependency.id;\r\n            this._materialLoaded.push(lm);\r\n        }\r\n        if (this._sprites.length > 0)\r\n            this.applyMaterial(lm);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    OBJParser.prototype._pProceedParsing = function () {\r\n        var line;\r\n        var creturn = String.fromCharCode(10);\r\n        var trunk;\r\n        if (!this._startedParsing) {\r\n            this._textData = this._pGetTextData();\r\n            // Merge linebreaks that are immediately preceeded by\r\n            // the \"escape\" backward slash into single lines.\r\n            this._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\r\n        }\r\n        if (this._textData.indexOf(creturn) == -1)\r\n            creturn = String.fromCharCode(13);\r\n        if (!this._startedParsing) {\r\n            this._startedParsing = true;\r\n            this._vertices = new Array();\r\n            this._vertexNormals = new Array();\r\n            this._materialIDs = new Array();\r\n            this._materialLoaded = new Array();\r\n            this._sprites = new Array();\r\n            this._uvs = new Array();\r\n            this._stringLength = this._textData.length;\r\n            this._charIndex = this._textData.indexOf(creturn, 0);\r\n            this._oldIndex = 0;\r\n            this._objects = new Array();\r\n            this._objectIndex = 0;\r\n        }\r\n        while (this._charIndex < this._stringLength && this._pHasTime()) {\r\n            this._charIndex = this._textData.indexOf(creturn, this._oldIndex);\r\n            if (this._charIndex == -1)\r\n                this._charIndex = this._stringLength;\r\n            line = this._textData.substring(this._oldIndex, this._charIndex);\r\n            line = line.split('\\r').join(\"\");\r\n            line = line.replace(\"  \", \" \");\r\n            trunk = line.split(\" \");\r\n            this._oldIndex = this._charIndex + 1;\r\n            this.parseLine(trunk);\r\n            // If whatever was parsed on this line resulted in the\r\n            // parsing being paused to retrieve dependencies, break\r\n            // here and do not continue parsing until un-paused.\r\n            if (this.parsingPaused) {\r\n                return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n            }\r\n        }\r\n        if (this._charIndex >= this._stringLength) {\r\n            if (this._mtlLib && !this._mtlLibLoaded) {\r\n                return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n            }\r\n            this.translate();\r\n            this.applyMaterials();\r\n            return ParserBase_1.ParserBase.PARSING_DONE;\r\n        }\r\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\r\n    };\r\n    OBJParser.prototype._pStartParsing = function (frameLimit) {\r\n        //create a content object for Loaders\r\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\r\n        _super.prototype._pStartParsing.call(this, frameLimit);\r\n    };\r\n    /**\r\n     * Parses a single line in the OBJ file.\r\n     */\r\n    OBJParser.prototype.parseLine = function (trunk) {\r\n        switch (trunk[0]) {\r\n            case \"mtllib\":\r\n                this._mtlLib = true;\r\n                this._mtlLibLoaded = false;\r\n                this.loadMtl(trunk[1]);\r\n                break;\r\n            case \"g\":\r\n                this.createGroup(trunk);\r\n                break;\r\n            case \"o\":\r\n                this.createObject(trunk);\r\n                break;\r\n            case \"usemtl\":\r\n                if (this._mtlLib) {\r\n                    if (!trunk[1])\r\n                        trunk[1] = \"def000\";\r\n                    this._materialIDs.push(trunk[1]);\r\n                    this._activeMaterialID = trunk[1];\r\n                    if (this._currentGroup)\r\n                        this._currentGroup.materialID = this._activeMaterialID;\r\n                }\r\n                break;\r\n            case \"v\":\r\n                this.parseVertex(trunk);\r\n                break;\r\n            case \"vt\":\r\n                this.parseUV(trunk);\r\n                break;\r\n            case \"vn\":\r\n                this.parseVertexNormal(trunk);\r\n                break;\r\n            case \"f\":\r\n                this.parseFace(trunk);\r\n        }\r\n    };\r\n    /**\r\n     * Converts the parsed data into an Away3D scenegraph structure\r\n     */\r\n    OBJParser.prototype.translate = function () {\r\n        for (var objIndex = 0; objIndex < this._objects.length; ++objIndex) {\r\n            var groups = this._objects[objIndex].groups;\r\n            var numGroups = groups.length;\r\n            var materialGroups;\r\n            var numMaterialGroups;\r\n            var graphics;\r\n            var sprite;\r\n            var m;\r\n            var sm;\r\n            var bmMaterial;\r\n            for (var g = 0; g < numGroups; ++g) {\r\n                bmMaterial = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());\r\n                //check for multipass\r\n                if (this.materialMode >= 2)\r\n                    bmMaterial.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                sprite = new Sprite_1.Sprite(bmMaterial);\r\n                graphics = sprite.graphics;\r\n                materialGroups = groups[g].materialGroups;\r\n                numMaterialGroups = materialGroups.length;\r\n                for (m = 0; m < numMaterialGroups; ++m)\r\n                    this.translateMaterialGroup(materialGroups[m], graphics);\r\n                if (graphics.count == 0)\r\n                    continue;\r\n                // Finalize and force type-based name\r\n                this._pFinalizeAsset(graphics); //, \"\");\r\n                if (this._objects[objIndex].name) {\r\n                    // this is a full independent object ('o' tag in OBJ file)\r\n                    sprite.name = this._objects[objIndex].name;\r\n                }\r\n                else if (groups[g].name) {\r\n                    // this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\r\n                    sprite.name = groups[g].name;\r\n                }\r\n                else {\r\n                    // No name stored. Use empty string which will force it\r\n                    // to be overridden by finalizeAsset() to type default.\r\n                    sprite.name = \"\";\r\n                }\r\n                this._sprites.push(sprite);\r\n                if (groups[g].materialID != \"\")\r\n                    bmMaterial.name = groups[g].materialID + \"~\" + sprite.name;\r\n                else\r\n                    bmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\r\n                if (sprite.graphics.count > 1) {\r\n                    for (sm = 1; sm < sprite.graphics.count; ++sm)\r\n                        sprite.graphics.getGraphicAt(sm).material = bmMaterial;\r\n                }\r\n                //add to the content property\r\n                this._pContent.addChild(sprite);\r\n                this._pFinalizeAsset(sprite);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Translates an obj's material group to a subgraphics.\r\n     * @param materialGroup The material group data to convert.\r\n     * @param graphics The Graphics to contain the converted Elements.\r\n     */\r\n    OBJParser.prototype.translateMaterialGroup = function (materialGroup, graphics) {\r\n        var faces = materialGroup.faces;\r\n        var face;\r\n        var numFaces = faces.length;\r\n        var numVerts;\r\n        var elements;\r\n        var vertices = new Array();\r\n        var uvs = new Array();\r\n        var normals = new Array();\r\n        var indices = new Array();\r\n        this._realIndices = [];\r\n        this._vertexIndex = 0;\r\n        var j;\r\n        for (var i = 0; i < numFaces; ++i) {\r\n            face = faces[i];\r\n            numVerts = face.indexIds.length - 1;\r\n            for (j = 1; j < numVerts; ++j) {\r\n                this.translateVertexData(face, j, vertices, uvs, indices, normals);\r\n                this.translateVertexData(face, 0, vertices, uvs, indices, normals);\r\n                this.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\r\n            }\r\n        }\r\n        if (vertices.length > 0) {\r\n            elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n            elements.autoDeriveNormals = normals.length ? false : true;\r\n            elements.setIndices(indices);\r\n            elements.setPositions(vertices);\r\n            elements.setNormals(normals);\r\n            elements.setUVs(uvs);\r\n            graphics.addGraphic(elements);\r\n        }\r\n    };\r\n    OBJParser.prototype.translateVertexData = function (face, vertexIndex, vertices, uvs, indices /*uint*/, normals) {\r\n        var index;\r\n        var vertex;\r\n        var vertexNormal;\r\n        var uv;\r\n        if (!this._realIndices[face.indexIds[vertexIndex]]) {\r\n            index = this._vertexIndex;\r\n            this._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\r\n            vertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\r\n            vertices.push(vertex.x * this._scale, vertex.y * this._scale, vertex.z * this._scale);\r\n            if (face.normalIndices.length > 0) {\r\n                vertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\r\n                normals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n            }\r\n            if (face.uvIndices.length > 0) {\r\n                try {\r\n                    uv = this._uvs[face.uvIndices[vertexIndex] - 1];\r\n                    uvs.push(uv.u, uv.v);\r\n                }\r\n                catch (e) {\r\n                    switch (vertexIndex) {\r\n                        case 0:\r\n                            uvs.push(0, 1);\r\n                            break;\r\n                        case 1:\r\n                            uvs.push(.5, 0);\r\n                            break;\r\n                        case 2:\r\n                            uvs.push(1, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            index = this._realIndices[face.indexIds[vertexIndex]] - 1;\r\n        }\r\n        indices.push(index);\r\n    };\r\n    /**\r\n     * Creates a new object group.\r\n     * @param trunk The data block containing the object tag and its parameters\r\n     */\r\n    OBJParser.prototype.createObject = function (trunk) {\r\n        this._currentGroup = null;\r\n        this._currentMaterialGroup = null;\r\n        this._objects.push(this._currentObject = new ObjectGroup());\r\n        if (trunk)\r\n            this._currentObject.name = trunk[1];\r\n    };\r\n    /**\r\n     * Creates a new group.\r\n     * @param trunk The data block containing the group tag and its parameters\r\n     */\r\n    OBJParser.prototype.createGroup = function (trunk) {\r\n        if (!this._currentObject)\r\n            this.createObject(null);\r\n        this._currentGroup = new Group();\r\n        this._currentGroup.materialID = this._activeMaterialID;\r\n        if (trunk)\r\n            this._currentGroup.name = trunk[1];\r\n        this._currentObject.groups.push(this._currentGroup);\r\n        this.createMaterialGroup(null);\r\n    };\r\n    /**\r\n     * Creates a new material group.\r\n     * @param trunk The data block containing the material tag and its parameters\r\n     */\r\n    OBJParser.prototype.createMaterialGroup = function (trunk) {\r\n        this._currentMaterialGroup = new MaterialGroup();\r\n        if (trunk)\r\n            this._currentMaterialGroup.url = trunk[1];\r\n        this._currentGroup.materialGroups.push(this._currentMaterialGroup);\r\n    };\r\n    /**\r\n     * Reads the next vertex coordinates.\r\n     * @param trunk The data block containing the vertex tag and its parameters\r\n     */\r\n    OBJParser.prototype.parseVertex = function (trunk) {\r\n        //for the very rare cases of other delimiters/charcodes seen in some obj files\r\n        var v1, v2, v3;\r\n        if (trunk.length > 4) {\r\n            var nTrunk = [];\r\n            var val;\r\n            for (var i = 1; i < trunk.length; ++i) {\r\n                val = parseFloat(trunk[i]);\r\n                if (!isNaN(val))\r\n                    nTrunk.push(val);\r\n            }\r\n            v1 = nTrunk[0];\r\n            v2 = nTrunk[1];\r\n            v3 = -nTrunk[2];\r\n            this._vertices.push(new Vertex(v1, v2, v3));\r\n        }\r\n        else {\r\n            v1 = parseFloat(trunk[1]);\r\n            v2 = parseFloat(trunk[2]);\r\n            v3 = -parseFloat(trunk[3]);\r\n            this._vertices.push(new Vertex(v1, v2, v3));\r\n        }\r\n    };\r\n    /**\r\n     * Reads the next uv coordinates.\r\n     * @param trunk The data block containing the uv tag and its parameters\r\n     */\r\n    OBJParser.prototype.parseUV = function (trunk) {\r\n        if (trunk.length > 3) {\r\n            var nTrunk = [];\r\n            var val;\r\n            for (var i = 1; i < trunk.length; ++i) {\r\n                val = parseFloat(trunk[i]);\r\n                if (!isNaN(val))\r\n                    nTrunk.push(val);\r\n            }\r\n            this._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\r\n        }\r\n        else {\r\n            this._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\r\n        }\r\n    };\r\n    /**\r\n     * Reads the next vertex normal coordinates.\r\n     * @param trunk The data block containing the vertex normal tag and its parameters\r\n     */\r\n    OBJParser.prototype.parseVertexNormal = function (trunk) {\r\n        if (trunk.length > 4) {\r\n            var nTrunk = [];\r\n            var val;\r\n            for (var i = 1; i < trunk.length; ++i) {\r\n                val = parseFloat(trunk[i]);\r\n                if (!isNaN(val))\r\n                    nTrunk.push(val);\r\n            }\r\n            this._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\r\n        }\r\n        else {\r\n            this._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\r\n        }\r\n    };\r\n    /**\r\n     * Reads the next face's indices.\r\n     * @param trunk The data block containing the face tag and its parameters\r\n     */\r\n    OBJParser.prototype.parseFace = function (trunk) {\r\n        var len = trunk.length;\r\n        var face = new FaceData();\r\n        if (!this._currentGroup) {\r\n            this.createGroup(null);\r\n        }\r\n        var indices;\r\n        for (var i = 1; i < len; ++i) {\r\n            if (trunk[i] == \"\") {\r\n                continue;\r\n            }\r\n            indices = trunk[i].split(\"/\");\r\n            face.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\r\n            if (indices[1] && String(indices[1]).length > 0)\r\n                face.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\r\n            if (indices[2] && String(indices[2]).length > 0)\r\n                face.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\r\n            face.indexIds.push(trunk[i]);\r\n        }\r\n        this._currentMaterialGroup.faces.push(face);\r\n    };\r\n    /**\r\n     * This is a hack around negative face coords\r\n     */\r\n    OBJParser.prototype.parseIndex = function (index, length) {\r\n        if (index < 0)\r\n            return index + length + 1;\r\n        else\r\n            return index;\r\n    };\r\n    OBJParser.prototype.parseMtl = function (data) {\r\n        var materialDefinitions = data.split('newmtl');\r\n        var lines;\r\n        var trunk;\r\n        var j;\r\n        var basicSpecularMethod;\r\n        var useSpecular;\r\n        var useColor;\r\n        var diffuseColor;\r\n        var color;\r\n        var specularColor;\r\n        var specular;\r\n        var alpha;\r\n        var mapkd;\r\n        for (var i = 0; i < materialDefinitions.length; ++i) {\r\n            lines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\r\n            //lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\r\n            if (lines.length == 1)\r\n                lines = materialDefinitions[i].split(String.fromCharCode(13));\r\n            diffuseColor = color = specularColor = 0xFFFFFF;\r\n            specular = 0;\r\n            useSpecular = false;\r\n            useColor = false;\r\n            alpha = 1;\r\n            mapkd = \"\";\r\n            for (j = 0; j < lines.length; ++j) {\r\n                lines[j] = lines[j].replace(/\\s+$/, \"\");\r\n                if (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\r\n                    trunk = lines[j].split(\" \");\r\n                    if (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\r\n                        trunk[0] = trunk[0].substring(1, trunk[0].length);\r\n                    if (j == 0) {\r\n                        this._lastMtlID = trunk.join(\"\");\r\n                        this._lastMtlID = (this._lastMtlID == \"\") ? \"def000\" : this._lastMtlID;\r\n                    }\r\n                    else {\r\n                        switch (trunk[0]) {\r\n                            case \"Ka\":\r\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\r\n                                    color = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\r\n                                break;\r\n                            case \"Ks\":\r\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n                                    specularColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\r\n                                    useSpecular = true;\r\n                                }\r\n                                break;\r\n                            case \"Ns\":\r\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\r\n                                    specular = Number(trunk[1]) * 0.001;\r\n                                if (specular == 0)\r\n                                    useSpecular = false;\r\n                                break;\r\n                            case \"Kd\":\r\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n                                    diffuseColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\r\n                                    useColor = true;\r\n                                }\r\n                                break;\r\n                            case \"tr\":\r\n                            case \"d\":\r\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\r\n                                    alpha = Number(trunk[1]);\r\n                                break;\r\n                            case \"map_Kd\":\r\n                                mapkd = this.parseMapKdString(trunk);\r\n                                mapkd = mapkd.replace(/\\\\/g, \"/\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (mapkd != \"\") {\r\n                if (useSpecular) {\r\n                    basicSpecularMethod = new SpecularBasicMethod_1.SpecularBasicMethod();\r\n                    basicSpecularMethod.color = specularColor;\r\n                    basicSpecularMethod.strength = specular;\r\n                    var specularData = new SpecularData();\r\n                    specularData.alpha = alpha;\r\n                    specularData.basicSpecularMethod = basicSpecularMethod;\r\n                    specularData.materialID = this._lastMtlID;\r\n                    if (!this._materialSpecularData)\r\n                        this._materialSpecularData = new Array();\r\n                    this._materialSpecularData.push(specularData);\r\n                }\r\n                this._pAddDependency(this._lastMtlID, new URLRequest_1.URLRequest(mapkd));\r\n            }\r\n            else if (useColor && !isNaN(color)) {\r\n                var lm = new LoadedMaterial();\r\n                lm.materialID = this._lastMtlID;\r\n                if (alpha == 0)\r\n                    console.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\r\n                var cm = new MethodMaterial_1.MethodMaterial(color);\r\n                if (this.materialMode < 2) {\r\n                    cm.alpha = alpha;\r\n                }\r\n                else {\r\n                    cm.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                }\r\n                cm.diffuseMethod.color = diffuseColor;\r\n                if (useSpecular) {\r\n                    cm.specularMethod.color = specularColor;\r\n                    cm.specularMethod.strength = specular;\r\n                }\r\n                lm.cm = cm;\r\n                this._materialLoaded.push(lm);\r\n                if (this._sprites.length > 0)\r\n                    this.applyMaterial(lm);\r\n            }\r\n        }\r\n        this._mtlLibLoaded = true;\r\n    };\r\n    OBJParser.prototype.parseMapKdString = function (trunk) {\r\n        var url = \"\";\r\n        var i;\r\n        var breakflag;\r\n        for (i = 1; i < trunk.length;) {\r\n            switch (trunk[i]) {\r\n                case \"-blendu\":\r\n                case \"-blendv\":\r\n                case \"-cc\":\r\n                case \"-clamp\":\r\n                case \"-texres\":\r\n                    i += 2; //Skip ahead 1 attribute\r\n                    break;\r\n                case \"-mm\":\r\n                    i += 3; //Skip ahead 2 attributes\r\n                    break;\r\n                case \"-o\":\r\n                case \"-s\":\r\n                case \"-t\":\r\n                    i += 4; //Skip ahead 3 attributes\r\n                    continue;\r\n                default:\r\n                    breakflag = true;\r\n                    break;\r\n            }\r\n            if (breakflag)\r\n                break;\r\n        }\r\n        //Reconstruct URL/filename\r\n        for (i; i < trunk.length; i++) {\r\n            url += trunk[i];\r\n            url += \" \";\r\n        }\r\n        //Remove the extraneous space and/or newline from the right side\r\n        url = url.replace(/\\s+$/, \"\");\r\n        return url;\r\n    };\r\n    OBJParser.prototype.loadMtl = function (mtlurl) {\r\n        // Add raw-data dependency to queue and load dependencies now,\r\n        // which will pause the parsing in the meantime.\r\n        this._pAddDependency('mtl', new URLRequest_1.URLRequest(mtlurl), true);\r\n        this._pPauseAndRetrieveDependencies(); //\r\n    };\r\n    OBJParser.prototype.applyMaterial = function (lm) {\r\n        var decomposeID;\r\n        var sprite;\r\n        var tm;\r\n        var j;\r\n        var specularData;\r\n        for (var i = 0; i < this._sprites.length; ++i) {\r\n            sprite = this._sprites[i];\r\n            decomposeID = sprite.material.name.split(\"~\");\r\n            if (decomposeID[0] == lm.materialID) {\r\n                if (lm.cm) {\r\n                    if (sprite.material)\r\n                        sprite.material = null;\r\n                    sprite.material = lm.cm;\r\n                }\r\n                else if (lm.texture) {\r\n                    tm = sprite.material;\r\n                    tm.ambientMethod.texture = lm.texture;\r\n                    tm.style.color = lm.color;\r\n                    tm.alpha = lm.alpha;\r\n                    tm.style.sampler = new Sampler2D_1.Sampler2D(true);\r\n                    if (this.materialMode < 2)\r\n                        tm.alpha = lm.alpha;\r\n                    else\r\n                        tm.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\r\n                    if (lm.specularMethod) {\r\n                        // By setting the specularMethod property to null before assigning\r\n                        // the actual method instance, we avoid having the properties of\r\n                        // the new method being overridden with the settings from the old\r\n                        // one, which is default behavior of the setter.\r\n                        tm.specularMethod = null;\r\n                        tm.specularMethod = lm.specularMethod;\r\n                    }\r\n                    else if (this._materialSpecularData) {\r\n                        for (j = 0; j < this._materialSpecularData.length; ++j) {\r\n                            specularData = this._materialSpecularData[j];\r\n                            if (specularData.materialID == lm.materialID) {\r\n                                tm.specularMethod = null; // Prevent property overwrite (see above)\r\n                                tm.specularMethod = specularData.basicSpecularMethod;\r\n                                tm.specularMethod.color = specularData.color;\r\n                                tm.specularMethod.strength = specularData.alpha;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                sprite.material.name = decomposeID[1] ? decomposeID[1] : decomposeID[0];\r\n                this._sprites.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n        if (lm.cm || tm)\r\n            this._pFinalizeAsset(lm.cm || tm);\r\n    };\r\n    OBJParser.prototype.applyMaterials = function () {\r\n        if (this._materialLoaded.length == 0)\r\n            return;\r\n        for (var i = 0; i < this._materialLoaded.length; ++i)\r\n            this.applyMaterial(this._materialLoaded[i]);\r\n    };\r\n    return OBJParser;\r\n}(ParserBase_1.ParserBase));\r\nexports.OBJParser = OBJParser;\r\nvar ObjectGroup = (function () {\r\n    function ObjectGroup() {\r\n        this.groups = new Array();\r\n    }\r\n    return ObjectGroup;\r\n}());\r\nexports.ObjectGroup = ObjectGroup;\r\nvar Group = (function () {\r\n    function Group() {\r\n        this.materialGroups = new Array();\r\n    }\r\n    return Group;\r\n}());\r\nexports.Group = Group;\r\nvar MaterialGroup = (function () {\r\n    function MaterialGroup() {\r\n        this.faces = new Array();\r\n    }\r\n    return MaterialGroup;\r\n}());\r\nexports.MaterialGroup = MaterialGroup;\r\nvar SpecularData = (function () {\r\n    function SpecularData() {\r\n        this.color = 0xFFFFFF;\r\n        this.alpha = 1;\r\n    }\r\n    return SpecularData;\r\n}());\r\nexports.SpecularData = SpecularData;\r\nvar LoadedMaterial = (function () {\r\n    function LoadedMaterial() {\r\n        this.color = 0xFFFFFF;\r\n        this.alpha = 1;\r\n    }\r\n    return LoadedMaterial;\r\n}());\r\nexports.LoadedMaterial = LoadedMaterial;\r\nvar FaceData = (function () {\r\n    function FaceData() {\r\n        this.vertexIndices = new Array();\r\n        this.uvIndices = new Array();\r\n        this.normalIndices = new Array();\r\n        this.indexIds = new Array(); // used for real index lookups\r\n    }\r\n    return FaceData;\r\n}());\r\nexports.FaceData = FaceData;\r\n/**\r\n* Texture coordinates value object.\r\n*/\r\nvar UV = (function () {\r\n    /**\r\n     * Creates a new <code>UV</code> object.\r\n     *\r\n     * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\r\n     * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\r\n     */\r\n    function UV(u, v) {\r\n        if (u === void 0) { u = 0; }\r\n        if (v === void 0) { v = 0; }\r\n        this._u = u;\r\n        this._v = v;\r\n    }\r\n    Object.defineProperty(UV.prototype, \"v\", {\r\n        /**\r\n         * Defines the vertical coordinate of the texture value.\r\n         */\r\n        get: function () {\r\n            return this._v;\r\n        },\r\n        set: function (value) {\r\n            this._v = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UV.prototype, \"u\", {\r\n        /**\r\n         * Defines the horizontal coordinate of the texture value.\r\n         */\r\n        get: function () {\r\n            return this._u;\r\n        },\r\n        set: function (value) {\r\n            this._u = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * returns a new UV value Object\r\n     */\r\n    UV.prototype.clone = function () {\r\n        return new UV(this._u, this._v);\r\n    };\r\n    /**\r\n     * returns the value object as a string for trace/debug purpose\r\n     */\r\n    UV.prototype.toString = function () {\r\n        return this._u + \",\" + this._v;\r\n    };\r\n    return UV;\r\n}());\r\nexports.UV = UV;\r\nvar Vertex = (function () {\r\n    /**\r\n     * Creates a new <code>Vertex</code> value object.\r\n     *\r\n     * @param    x            [optional]    The x value. Defaults to 0.\r\n     * @param    y            [optional]    The y value. Defaults to 0.\r\n     * @param    z            [optional]    The z value. Defaults to 0.\r\n     * @param    index        [optional]    The index value. Defaults is NaN.\r\n     */\r\n    function Vertex(x, y, z, index) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = 0; }\r\n        if (index === void 0) { index = 0; }\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._index = index;\r\n    }\r\n    Object.defineProperty(Vertex.prototype, \"index\", {\r\n        get: function () {\r\n            return this._index;\r\n        },\r\n        /**\r\n         * To define/store the index of value object\r\n         * @param    ind        The index\r\n         */\r\n        set: function (ind) {\r\n            this._index = ind;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Vertex.prototype, \"x\", {\r\n        /**\r\n         * To define/store the x value of the value object\r\n         * @param    value        The x value\r\n         */\r\n        get: function () {\r\n            return this._x;\r\n        },\r\n        set: function (value) {\r\n            this._x = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Vertex.prototype, \"y\", {\r\n        /**\r\n         * To define/store the y value of the value object\r\n         * @param    value        The y value\r\n         */\r\n        get: function () {\r\n            return this._y;\r\n        },\r\n        set: function (value) {\r\n            this._y = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Vertex.prototype, \"z\", {\r\n        /**\r\n         * To define/store the z value of the value object\r\n         * @param    value        The z value\r\n         */\r\n        get: function () {\r\n            return this._z;\r\n        },\r\n        set: function (value) {\r\n            this._z = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * returns a new Vertex value Object\r\n     */\r\n    Vertex.prototype.clone = function () {\r\n        return new Vertex(this._x, this._y, this._z);\r\n    };\r\n    return Vertex;\r\n}());\r\nexports.Vertex = Vertex;\r\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\":undefined}],\"awayjs-parsers/lib/Parsers\":[function(require,module,exports){\n\"use strict\";\r\nvar Loader_1 = require(\"awayjs-core/lib/library/Loader\");\r\nvar AWDParser_1 = require(\"./AWDParser\");\r\nvar Max3DSParser_1 = require(\"./Max3DSParser\");\r\nvar MD2Parser_1 = require(\"./MD2Parser\");\r\nvar OBJParser_1 = require(\"./OBJParser\");\r\nvar FNTParser_1 = require(\"./FNTParser\");\r\n/**\r\n *\r\n */\r\nvar Parsers = (function () {\r\n    function Parsers() {\r\n    }\r\n    /**\r\n     * Short-hand function to enable all bundled parsers for auto-detection. In practice,\r\n     * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\r\n     * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\r\n     *\r\n     * See notes about file size in the documentation for the ALL_BUNDLED constant.\r\n     *\r\n     * @see away.parsers.Parsers.ALL_BUNDLED\r\n     */\r\n    Parsers.enableAllBundled = function () {\r\n        Loader_1.Loader.enableParsers(Parsers.ALL_BUNDLED);\r\n    };\r\n    /**\r\n     * A list of all parsers that come bundled with Away3D. Use this to quickly\r\n     * enable support for all bundled parsers to the file format auto-detection\r\n     * feature, using any of the enableParsers() methods on loaders, e.g.:\r\n     *\r\n     * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\r\n     *\r\n     * Beware however that this requires all parser classes to be included in the\r\n     * SWF file, which will add 50-100 kb to the file. When only a limited set of\r\n     * file formats are used, SWF file size can be saved by adding the parsers\r\n     * individually using AssetLibrary.enableParser()\r\n     *\r\n     * A third way is to specify a parser for each loaded file, thereby bypassing\r\n     * the auto-detection mechanisms altogether, while at the same time allowing\r\n     * any properties that are unique to that parser to be set for that load.\r\n     *\r\n     * The bundled parsers are:\r\n     *\r\n     * <ul>\r\n     * <li>AC3D (.ac)</li>\r\n     * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\r\n     * <li>3DMax (.3ds)</li>\r\n     * <li>DXF (.dxf)</li>\r\n     * <li>Quake 2 MD2 models (.md2)</li>\r\n     * <li>Doom 3 MD5 animation clips (.md5anim)</li>\r\n     * <li>Doom 3 MD5 sprites (.md5sprite)</li>\r\n     * <li>Wavefront OBJ (.obj)</li>\r\n     * <li>Collada (.dae)</li>\r\n     * <li>Images (.jpg, .png)</li>\r\n     * </ul>\r\n     *\r\n     * @see away.library.AssetLibrary.enableParser\r\n     */\r\n    Parsers.ALL_BUNDLED = Array(AWDParser_1.AWDParser, Max3DSParser_1.Max3DSParser, MD2Parser_1.MD2Parser, OBJParser_1.OBJParser, FNTParser_1.FNTParser);\r\n    return Parsers;\r\n}());\r\nexports.Parsers = Parsers;\r\n},{\"./AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"./FNTParser\":\"awayjs-parsers/lib/FNTParser\",\"./MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"./Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"./OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"awayjs-core/lib/library/Loader\":undefined}]},{},[1])\n\n",
    "export {AWDParser}\t\t\t\t\t\tfrom \"./lib/AWDParser\";\r\nexport {Max3DSParser}\t\t\t\t\tfrom \"./lib/Max3DSParser\";\r\nexport {MD2Parser}\t\t\t\t\t\tfrom \"./lib/MD2Parser\";\r\nexport {MD5AnimParser}\t\t\t\t\tfrom \"./lib/MD5AnimParser\";\r\nexport {MD5MeshParser}\t\t\t\t\tfrom \"./lib/MD5MeshParser\";\r\nexport {OBJParser}\t\t\t\t\t\tfrom \"./lib/OBJParser\";\r\nexport {Parsers}\t\t\t\t\t\tfrom \"./lib/Parsers\";",
    "\r\nexport class AWD3Utils {\r\n\tpublic static BLOCKSTATE_FINALIZE:number = 0;\r\n\tpublic static BLOCKSTATE_INVALID:number = 1;\r\n\tpublic static BLOCKSTATE_LOAD_DEPENDENICES:number = 2;\r\n\tpublic static BLOCKSTATE_NO_ASSET:number = 3;\r\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\r\n\tpublic static UNCOMPRESSED:number = 0;\r\n\tpublic static DEFLATE:number = 1;\r\n\tpublic static LZMA:number = 2;\r\n\tpublic static INT8:number = 1;\r\n\tpublic static INT16:number = 2;\r\n\tpublic static INT32:number = 3;\r\n\tpublic static UINT8:number = 4;\r\n\tpublic static UINT16:number = 5;\r\n\tpublic static UINT32:number = 6;\r\n\tpublic static FLOAT32:number = 7;\r\n\tpublic static FLOAT64:number = 8;\r\n\tpublic static BOOL:number = 21;\r\n\tpublic static COLOR:number = 22;\r\n\tpublic static BADDR:number = 23;\r\n\tpublic static AWDSTRING:number = 31;\r\n\tpublic static AWDBYTEARRAY:number = 32;\r\n\tpublic static VECTOR2x1:number = 41;\r\n\tpublic static VECTOR3x1:number = 42;\r\n\tpublic static VECTOR4x1:number = 43;\r\n\tpublic static MTX3x2:number = 44;\r\n\tpublic static MTX3x3:number = 45;\r\n\tpublic static MTX4x3:number = 46;\r\n\tpublic static MTX4x4:number = 47;\r\n}",
    "import {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\r\n\r\nimport {AWD3Utils}\t\t\t\t\t\tfrom \"../AWD3ParserUtils/AWD3Utils\";\r\n\r\n\r\nexport class AWDBlock\r\n{\r\n\tpublic id:number;\r\n\tpublic name:string;\r\n\tpublic type:number;\r\n\tpublic data:any;\r\n\tpublic dependencies_data:Array<ByteArray>;\r\n\tpublic dependencies_urls:Array<string>;\r\n\tpublic loaded_dependencies:Array<any>;\r\n\tpublic loaded_dependencies_cnt:number;\r\n\tpublic len:number;\r\n\tpublic geoID:number;\r\n\tpublic state:number;\r\n\tpublic extras:Object;\r\n\tpublic bytes:ByteArray;\r\n\tpublic errorMessages:Array<string>;\r\n\tpublic uvsForVertexAnimation:Array<Float32Array>;\r\n\r\n\tconstructor(this_id:number, this_type:number)\r\n\t{\r\n\t\tthis.type=this_type;\r\n\t\tthis.id=this_id;\r\n\t\tthis.state = AWD3Utils.BLOCKSTATE_FINALIZE;\r\n\t\tthis.dependencies_data=Array<any>();\r\n\t\tthis.dependencies_urls=Array<string>();\r\n\t\tif(this_type==83){\r\n\t\t\tthis.loaded_dependencies=Array<any>(6);\r\n\t\t}\r\n\t\tthis.loaded_dependencies_cnt=0;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\r\n\t\tthis.id = null;\r\n\t\tthis.bytes = null;\r\n\t\tthis.errorMessages = null;\r\n\t\tthis.uvsForVertexAnimation = null;\r\n\r\n\t}\r\n\r\n\tpublic addError(errorMsg:string):void\r\n\t{\r\n\t\tif (!this.errorMessages)\r\n\t\t\tthis.errorMessages = new Array<string>();\r\n\r\n\t\tthis.errorMessages.push(errorMsg);\r\n\t}\r\n}",
    "import {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {Short3Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Short3Attributes\";\r\nimport {Float3Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Float3Attributes\";\r\nimport {Float2Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Float2Attributes\";\r\nimport {Byte4Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Byte4Attributes\";\r\n\r\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {BitmapImageCube}\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImageCube\";\r\nimport {BlendMode}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\r\nimport {Sampler2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\r\nimport {WaveAudio}\t\t\t\t\t\tfrom \"awayjs-core/lib/audio/WaveAudio\";\r\nimport {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {URLLoaderDataFormat}\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\r\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\nimport {ParserUtils}\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\r\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\r\nimport {ProjectionBase}\t\t\t\t\tfrom \"awayjs-core/lib/projections/ProjectionBase\";\r\nimport {PerspectiveProjection}\t\t\tfrom \"awayjs-core/lib/projections/PerspectiveProjection\";\r\nimport {OrthographicProjection}\t\t\tfrom \"awayjs-core/lib/projections/OrthographicProjection\";\r\nimport {OrthographicOffCenterProjection}from \"awayjs-core/lib/projections/OrthographicOffCenterProjection\";\r\nimport {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\r\nimport {Point}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\r\n\r\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\r\nimport {View}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/View\";\r\nimport {DisplayObject}\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\r\nimport {LightBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/LightBase\";\r\nimport {Graphics}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {DirectionalLight}\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\r\nimport {PointLight}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\nimport {TextField}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/TextField\";\r\nimport {Billboard}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\r\nimport {Skybox}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\r\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {MaterialBase}\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\r\nimport {LightPickerBase}\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/LightPickerBase\";\r\nimport {StaticLightPicker}\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/StaticLightPicker\";\r\nimport {CubeMapShadowMapper}\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\";\r\nimport {DirectionalShadowMapper}\t\tfrom \"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\";\r\nimport {ShadowMapperBase}\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\";\r\n\r\nimport {PrefabBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrefabBase\";\r\nimport {PrimitivePrefabBase}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePrefabBase\";\r\nimport {PrimitiveCapsulePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\";\r\nimport {PrimitiveConePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveConePrefab\";\r\nimport {PrimitiveCubePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCubePrefab\";\r\nimport {PrimitiveCylinderPrefab}\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\";\r\nimport {PrimitivePlanePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePlanePrefab\";\r\nimport {PrimitiveSpherePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\";\r\nimport {PrimitiveTorusPrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\";\r\nimport {SingleCubeTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\r\nimport {Single2DTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {AnimationSetBase}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimationSetBase\";\r\nimport {AnimatorBase}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimatorBase\";\r\nimport {VertexAnimationSet}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\r\nimport {VertexAnimator}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimator\";\r\nimport {SkeletonAnimationSet}\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\r\nimport {SkeletonAnimator}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimator\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\r\nimport {SkeletonPose}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\r\nimport {SkeletonJoint}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\r\nimport {SkeletonClipNode}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\r\nimport {VertexClipNode}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\r\nimport {AnimationClipNodeBase}\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\";\r\n\r\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\r\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\r\nimport {AmbientEnvMapMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\";\r\nimport {DiffuseDepthMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\";\r\nimport {DiffuseCelMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\";\r\nimport {DiffuseGradientMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\";\r\nimport {DiffuseLightMapMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\";\r\nimport {DiffuseWrapMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\";\r\nimport {EffectAlphaMaskMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\";\r\nimport {EffectColorMatrixMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\";\r\nimport {EffectColorTransformMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\";\r\nimport {EffectEnvMapMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\";\r\nimport {EffectFogMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFogMethod\";\r\nimport {EffectFresnelEnvMapMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\";\r\nimport {EffectLightMapMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\";\r\nimport {EffectMethodBase}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectMethodBase\";\r\nimport {EffectRimLightMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\";\r\nimport {NormalSimpleWaterMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\";\r\nimport {ShadowDitheredMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\";\r\nimport {ShadowFilteredMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\";\r\nimport {ShadowMapMethodBase}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\";\r\nimport {ShadowMethodBase}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMethodBase\";\r\nimport {SpecularFresnelMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\";\r\nimport {ShadowHardMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowHardMethod\";\r\nimport {SpecularAnisotropicMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\";\r\nimport {SpecularCelMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularCelMethod\";\r\nimport {SpecularPhongMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\";\r\nimport {ShadowNearMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowNearMethod\";\r\nimport {ShadowSoftMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\";\r\n\r\nimport {BasicMaterial}\t\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\r\n\r\nimport {ITimelineSceneGraphFactory} \tfrom \"awayjs-display/lib/factories/ITimelineSceneGraphFactory\";\r\nimport {AS2SceneGraphFactory} \t\t\tfrom \"awayjs-player/lib/factories/AS2SceneGraphFactory\";\r\nimport {MovieClip} \t\t\t\t\t\tfrom \"awayjs-display/lib/display/MovieClip\";\r\nimport {Timeline}\t\t\t \t\t\tfrom \"awayjs-display/lib/base/Timeline\";\r\n\r\n\r\nimport {AssetLibrary}\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\r\n\r\nimport {Font}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\r\nimport {TesselatedFontTable}\t\t\tfrom \"awayjs-display/lib/text/TesselatedFontTable\";\r\nimport {IFontTable}\t\t\t\t\t\tfrom \"awayjs-display/lib/text/IFontTable\";\r\nimport {TextFormat}\t\t\t\t\t\tfrom \"awayjs-display/lib/text/TextFormat\";\r\nimport {TextFieldType}\t\t\t\t\tfrom \"awayjs-display/lib/text/TextFieldType\";\r\n\r\nimport {AWDBlock}\t\t\t\t\t\tfrom \"./AWD3ParserUtils/AWDBlock\";\r\nimport {Rectangle} \t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\r\nimport {Style} \t\t\t\t\t\t\tfrom \"awayjs-display/lib/base/Style\";\r\nimport {Matrix} \t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\r\nimport {MappingMode} \t\t\t\t\tfrom \"awayjs-display/lib/textures/MappingMode\";\r\nimport {ElementsType}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsType\";\r\nimport {Graphic}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\r\n/**\r\n * AWDParser provides a parser for the AWD data type.\r\n */\r\nexport class AWDParser extends ParserBase\r\n{\r\n\tprivate _view:View;\r\n\r\n\t//set to \"true\" to have some console.logs in the Console\r\n\tprivate _debug:boolean = false;\r\n\tprivate _debugTimers:boolean = true;\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean = false;\r\n\tprivate _cur_block_id:number;\r\n\tprivate _blocks:Array<AWDBlock>;\r\n\tprivate _newBlockBytes:ByteArray;\r\n\tprivate _version:Array<number>;\r\n\tprivate _compression:number;\r\n\tprivate _accuracyOnBlocks:boolean;\r\n\tprivate _accuracyMatrix:boolean;\r\n\tprivate _accuracyGeo:boolean;\r\n\tprivate _accuracyProps:boolean;\r\n\tprivate _streaming:boolean;\r\n\tprivate _texture_users:Object = {};\r\n\tprivate _parsed_header:boolean = false;\r\n\tprivate _body:ByteArray;\r\n\r\n\r\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\r\n\tpublic static UNCOMPRESSED:number = 0;\r\n\tpublic static DEFLATE:number = 1;\r\n\tpublic static LZMA:number = 2;\r\n\tpublic static INT8:number = 1;\r\n\tpublic static INT16:number = 2;\r\n\tpublic static INT32:number = 3;\r\n\tpublic static UINT8:number = 4;\r\n\tpublic static UINT16:number = 5;\r\n\tpublic static UINT32:number = 6;\r\n\tpublic static FLOAT32:number = 7;\r\n\tpublic static FLOAT64:number = 8;\r\n\tpublic static BOOL:number = 21;\r\n\tpublic static COLOR:number = 22;\r\n\tpublic static BADDR:number = 23;\r\n\tpublic static AWDSTRING:number = 31;\r\n\tpublic static AWDBYTEARRAY:number = 32;\r\n\tpublic static VECTOR2x1:number = 41;\r\n\tpublic static VECTOR3x1:number = 42;\r\n\tpublic static VECTOR4x1:number = 43;\r\n\tpublic static MTX3x2:number = 44;\r\n\tpublic static MTX3x3:number = 45;\r\n\tpublic static MTX4x3:number = 46;\r\n\tpublic static MTX4x4:number = 47;\r\n\tpublic static GEO_NUMBER:number = 48;\r\n\tpublic static MATRIX_NUMBER:number = 49;\r\n\tpublic static PROPERTY_NUMBER:number = 50;\r\n\t\r\n\r\n\tprivate blendModeDic:Array<string>;\r\n\tprivate _depthSizeDic:Array<number>;\r\n\r\n\tprivate start_timeing:number;\r\n\tprivate _time_all:number=0;\r\n\tprivate _time_graphics:number=0;\r\n\tprivate _time_graphics_bytes:number=0;\r\n\tprivate _time_timeline:number=0;\r\n\tprivate _time_fonts:number=0;\r\n\tprivate _time_textfields:number=0;\r\n\tprivate _time_sounds:number=0;\r\n\tprivate _time_textures:number=0;\r\n\tprivate _time_materials:number=0;\r\n\tprivate _time_sprites:number=0;\r\n\tprivate _num_graphics:number=0;\r\n\tprivate _num_timeline:number=0;\r\n\tprivate _num_fonts:number=0;\r\n\tprivate _num_textfields:number=0;\r\n\tprivate _num_sounds:number=0;\r\n\tprivate _num_textures:number=0;\r\n\tprivate _num_materials:number=0;\r\n\tprivate _num_sprites:number=0;\r\n\r\n\r\n\t/**\r\n\t * Creates a new AWD3Parserutils object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(view:View = null)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._view = view;\r\n\t\tthis._blocks = new Array<AWDBlock>();\r\n\t\tthis._blocks[0] = new AWDBlock(0,255);\r\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\r\n\r\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.ADD);\r\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\r\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\r\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\r\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\r\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\r\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\r\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\r\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\r\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\r\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\r\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\r\n\t\tthis._depthSizeDic.push(256);\r\n\t\tthis._depthSizeDic.push(512);\r\n\t\tthis._depthSizeDic.push(2048);\r\n\t\tthis._depthSizeDic.push(1024);\r\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"awd\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// this will be called when Dependency has finished loading.\r\n\t\t// the ressource dependecniy has a id that point to the awd_block waiting for it.\r\n\t\t//console.log(\"AWDParser resolve dependencies\";\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar this_block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\r\n\t\t\tif(this_block.type==82){\r\n\t\t\t\tvar image_asset:BitmapImage2D = <BitmapImage2D> resourceDependency.assets[0];\r\n\t\t\t\tthis_block.data = image_asset; // Store finished asset\r\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> image_asset, this_block.name);\r\n\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed Texture: Name = \" + this_block.name);\r\n\t\t\t}\r\n\t\t\telse if(this_block.type==44){\r\n\t\t\t\tvar audio_asset:WaveAudio = <WaveAudio> resourceDependency.assets[0];\r\n\t\t\t\tthis_block.data = audio_asset; // Store finished asset\r\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t//console.log(\"Parsing audio \" + this_block.name);\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> audio_asset, this_block.name);\r\n\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed WaveAudio: Name = \" + this_block.name);\r\n\t\t\t}\r\n\t\t\telse if(this_block.type==83){\r\n\t\t\t\tthis_block.loaded_dependencies[resourceDependency.sub_id]= resourceDependency.assets[0];\r\n\t\t\t\tthis_block.loaded_dependencies_cnt++;\r\n\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\r\n\r\n\t\t\t\tif(this_block.loaded_dependencies_cnt==6){\r\n\t\t\t\t\tvar cube_image_asset = new BitmapImageCube(this_block.loaded_dependencies[0].width);\r\n\r\n\t\t\t\t\tfor (var i:number = 0; i < 6; i++)\r\n\t\t\t\t\t\tcube_image_asset.draw(i, this_block.loaded_dependencies[i]);\r\n\r\n\t\t\t\t\tthis_block.data = cube_image_asset; // Store finished asset\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> cube_image_asset, this_block.name);\r\n\r\n\t\t\t\t\tif (this._debug)\r\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + this_block.name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this._debugTimers && !this._isParsing)\r\n\t\t\t\tthis.updateTimers(this_block.type);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\r\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve a dependency name\r\n\t *\r\n\t * @param resourceDependency The dependency to be resolved.\r\n\t */\r\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\r\n\t{\r\n\t\tvar oldName:string = asset.name;\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\r\n\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t}\r\n\r\n\t\tvar newName:string = asset.name;\r\n\r\n\t\tasset.name = oldName;\r\n\r\n\t\treturn newName;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\tif (!this._parsed_header) {\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Parse header and decompress body if needed\r\n\t\t\tthis.parseHeader();\r\n\r\n\t\t\tswitch (this._compression) {\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\r\n\t\t\t\t\tthis._body = this._byteData;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// Compressed AWD Formats not yet supported\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t case AWD3Parserutils.DEFLATE:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress();\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t case AWD3Parserutils.LZMA:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t //*/\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._parsed_header = true;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t}\r\n\r\n\t\tif (this._body) {\r\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\r\n\t\t\t\tthis.parseNextBlock();\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Return complete status\r\n\t\t\tif (this._body.getBytesAvailable() == 0) {\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t\tif (this._debugTimers)\r\n\t\t\t\t\tconsole.log(\"Parsing total: \"+(this._time_all | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | graphics: \"+this._num_graphics+\", \"+(this._time_graphics | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | graphics bytes: \"+this._num_graphics+\", \"+(this._time_graphics_bytes | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | timelines: \"+this._num_timeline+\", \"+(this._time_timeline | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | fonts: \"+this._num_fonts+\", \"+(this._time_fonts | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | sounds: \"+this._num_sounds+\", \"+(this._time_sounds | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | mats: \"+this._num_materials+\", \"+(this._time_materials | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | textures: \"+this._num_textures+\", \"+(this._time_textures | 0)+\"ms\",\r\n\t\t\t\t\t\t\" | sprites: \"+this._num_sprites+\", \"+(this._time_sprites | 0)+\"ms\");\r\n\r\n\t\t\t\treturn  ParserBase.PARSING_DONE;\r\n\t\t\t} else {\r\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tswitch (this._compression) {\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\t\t\t\t\tif (this._debug)\r\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Error - most likely _body not set because we do not support compression.\r\n\t\t\treturn  ParserBase.PARSING_DONE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number):void\r\n\t{\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\t}\r\n\r\n\tprivate dispose():void\r\n\t{\r\n\t\tfor (var c in this._blocks) {\r\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[c];\r\n\t\t\tb.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseNextBlock():void\r\n\t{\r\n\t\tvar block:AWDBlock;\r\n\t\tvar isParsed:boolean = false;\r\n\t\tvar ns:number;\r\n\t\tvar type:number;\r\n\t\tvar flags:number;\r\n\t\tvar len:number;\r\n//*\r\n\t\tif (this._debugTimers)\r\n\t\t\tthis.start_timeing = performance.now();\r\n//*/\r\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\r\n\r\n\t\tns = this._body.readUnsignedByte();\r\n\t\ttype = this._body.readUnsignedByte();\r\n\t\tflags = this._body.readUnsignedByte();\r\n\t\tlen = this._body.readUnsignedInt();\r\n\r\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\r\n\r\n\t\tif (this._accuracyOnBlocks) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t}\r\n\r\n\t\tvar blockEndAll:number = this._body.position + len;\r\n\r\n\t\tif (len > this._body.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\r\n\t\t\tthis._body.position += this._body.getBytesAvailable();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// Compressed AWD Formats not yet supported\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\tthis._newBlockBytes = new ByteArray();\r\n\t\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\r\n\t\t\tthis._newBlockBytes.position = 0;\r\n\t\t\t/*\r\n\t\t\t if (blockCompressionLZMA)\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress(AWD3Parserutils.COMPRESSIONMODE_LZMA);\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress();\r\n\t\t\t }\r\n\t\t\t */\r\n\r\n\t\t} else {\r\n\t\t\tthis._newBlockBytes = this._body;\r\n\t\t}\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\r\n\t\t//----------------------------------------------------------------------------\r\n\r\n\t\tblock = new AWDBlock(this._cur_block_id, type);\r\n\t\tblock.len = len;\r\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\r\n\t\t\t//block.len       = blockEndBlock;\r\n\t\t}\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\r\n\t\tthis._blocks[this._cur_block_id] = block;\r\n\r\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\r\n\t\t\t// probably should contain some info about the type of animation\r\n\t\t\tvar factory = new AS2SceneGraphFactory(this._view);\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tthis.parseSpriteLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 44:\r\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 133:\r\n\t\t\t\t\tthis.parseMovieClip(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 134:\r\n\t\t\t\t\tthis.parseTextField(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 135:\r\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 136:\r\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 41:\r\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//  case 43:\r\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\r\n\t\t\t\t//      isParsed = true;\r\n\t\t\t\t//      break;\r\n\r\n\t\t\t\tcase 51:\r\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 91:\r\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 92:\r\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 111:\r\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id, true);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 112:\r\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 113:\r\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 122:\r\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 253:\r\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isParsed == false) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.parseGraphics(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tthis.parseSpriteInstance(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 82:\r\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 101:\r\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 102:\r\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:\r\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 121:\r\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\r\n\t\t\t\t//break;\r\n\t\t\t\tcase 254:\r\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 255:\r\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this._debug)\r\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\r\n\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif (this._newBlockBytes.position != blockEndBlock)\r\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\r\n\r\n\t\t\tif (block.errorMessages) {\r\n\t\t\t\tvar len:number = block.errorMessages.length;\r\n\t\t\t\tfor (var msgCnt:number = 0; msgCnt < len; msgCnt++)\r\n\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"\\n\");\r\n\t\t}\r\n\r\n\t\tif (this._debugTimers && !this.parsingPaused)\r\n\t\t\tthis.updateTimers(type);\r\n\r\n\t\tthis._body.position = blockEndAll;\r\n\t\tthis._newBlockBytes = null;\r\n\t}\r\n\r\n\tprivate updateTimers(type:number):void\r\n\t{\r\n\t\tvar end_timing = performance.now();\r\n\t\tvar time_delta = end_timing - this.start_timeing;\r\n\t\tthis._time_all += time_delta;\r\n\r\n\t\tif (type == 1) {\r\n\t\t\tthis._time_graphics += time_delta;\r\n\t\t\tthis._num_graphics++;\r\n\t\t} else if (type == 133) {\r\n\t\t\tthis._time_timeline += time_delta;\r\n\t\t\tthis._num_timeline++;\r\n\t\t} else if (type == 135) {\r\n\t\t\tthis._time_fonts += time_delta;\r\n\t\t\tthis._num_fonts++;\r\n\t\t} else if (type == 134) {\r\n\t\t\tthis._time_textfields += time_delta;\r\n\t\t\tthis._num_textfields++;\r\n\t\t} else if (type == 44) {\r\n\t\t\tthis._time_sounds += time_delta;\r\n\t\t\tthis._num_sounds++;\r\n\t\t} else if (type == 82) {\r\n\t\t\tthis._time_textures += time_delta;\r\n\t\t\tthis._num_textures++;\r\n\t\t} else if (type == 81) {\r\n\t\t\tthis._time_materials += time_delta;\r\n\t\t\tthis._num_materials++;\r\n\t\t} else if(type==24) {\r\n\t\t\tthis._time_sprites += time_delta;\r\n\t\t\tthis._num_sprites++;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//--Parser Blocks---------------------------------------------------------------------------\r\n\r\n\r\n\tprivate parseTesselatedFont(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\tvar new_font:Font=<Font>AssetLibrary.getAsset(this._blocks[blockID].name);\r\n\t\tvar newfont:Boolean = false;\r\n\t\tif(new_font==undefined){\r\n\t\t\tnew_font = new Font();\r\n\t\t\tnewfont=true;\r\n\t\t}\r\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar font_style_char_cnt:number;\r\n\t\tvar font_style_name:string;\r\n\t\tvar new_font_style:TesselatedFontTable;\r\n\t\tvar font_style_char:number;\r\n\t\tvar attr_count:number=0;\r\n\t\tvar sm_len:number;\r\n\t\tvar sm_end:number;\r\n\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\r\n\t\t\tfont_style_name = this.parseVarStr();\r\n\r\n\t\t\t// dirty hack for icycle\r\n\t\t\t// we use bold chars for non-latin chars, but we use regular for � sign,\r\n\t\t\t// so the dirty hack is to merge the regular and the bold style\r\n\t\t\tif((this._blocks[blockID].name==\"Tahoma\") && (font_style_name==\"RegularStyle\")){\r\n\t\t\t\tfont_style_name=\"BoldStyle\";\r\n\t\t\t}\r\n\r\n\t\t\tnew_font_style = <TesselatedFontTable>new_font.get_font_table(font_style_name, TesselatedFontTable.assetType);\r\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\r\n\t\t\tnew_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\r\n\t\t\tnew_font_style.ascent=this._newBlockBytes.readFloat();\r\n\t\t\tnew_font_style.descent=this._newBlockBytes.readFloat();\r\n\t\t\t//console.log(new_font_style.get_whitespace_width());\r\n\t\t\tfont_style_char_cnt = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tfor (var j:number = 0; j < font_style_char_cnt; ++j) {\r\n\t\t\t\t// todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\r\n\t\t\t\tfont_style_char = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar char_width=this._newBlockBytes.readFloat();\r\n\t\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tsm_end = this._newBlockBytes.position + sm_len;\r\n\r\n\t\t\t\t// Loop through data streams\r\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\t\t// Type, field type, length\r\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\t\tif (str_type == 2) {//face indices positions\r\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tfor(var idx:number = 0; this._newBlockBytes.position < str_end; idx++)\r\n\t\t\t\t\t\t\tindices[idx] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (position + curvedata)\r\n\t\t\t\t\t\tattr_count = 20;\r\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\r\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\r\n\t\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (position + curvedata)\r\n\t\t\t\t\t\tattr_count = 12;\r\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\r\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\r\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (position + curvedata + uv)\r\n\t\t\t\t\t\tattr_count = 28;\r\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\r\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(curveData) {\r\n\t\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len / attr_count);\r\n\t\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\r\n\t\t\t\t\t//console.log(\"allchars[cnt1++] = ['\"+font_style_char.toString()+\"',[\"+vertexBuffer.bufferView.toString()+\"]]\");\r\n\r\n\t\t\t\t\tnew_font_style.setChar(font_style_char.toString(), char_width, vertexBuffer, null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t\tif(newfont) {\r\n\t\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].data = new_font;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\r\n\t}\r\n\r\n\tprivate static textFormatProperties:Object = {\r\n\t\t1:AWDParser.UINT16,\t\t//fontsize\r\n\t\t2:AWDParser.FLOAT32,\t\t//letterspacing\r\n\t\t3:AWDParser.UINT8,\t\t//rotated\r\n\t\t4:AWDParser.UINT8,\t\t//auto-kerning\r\n\t\t5:AWDParser.UINT8,\t\t//baselineshift\r\n\t\t6:AWDParser.UINT8,\t\t//align\r\n\t\t7:AWDParser.FLOAT32,\t\t//intent\r\n\t\t8:AWDParser.FLOAT32,\t\t//left margin\r\n\t\t9:AWDParser.FLOAT32,\t\t//right margin\r\n\t\t10:AWDParser.FLOAT32};\t//line spacing\r\n\r\n\tprivate parseTextFormat(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\r\n\t\tvar font:Font = <Font> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tvar font_style_name:string = this.parseVarStr();\r\n\r\n\t\tvar newTextFormat:TextFormat = new TextFormat();\r\n\t\tnewTextFormat.font_name = font.name;\r\n\r\n\t\t// todo:  atm in awd this will always default to get a TesselatedFontTable. need to find a way to request the correct type here\r\n\t\tvar font_table:IFontTable = font.get_font_table(font_style_name);\r\n\t\tif (font_table!=null) {\r\n\t\t\tnewTextFormat.font_style = font_style_name;\r\n\t\t\tnewTextFormat.font_table = font_table;\r\n\t\t}\r\n\r\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tmat.bothSides = true;\r\n\t\tmat.curves = true;\r\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar uv_values:Array<number> = [];\r\n\t\tfor(var uvcnt:number = 0; uvcnt < num_uv_values; uvcnt++)\r\n\t\t\tuv_values[uvcnt] = this._newBlockBytes.readFloat();\r\n\r\n\t\tnewTextFormat.uv_values = uv_values;\r\n\t\tvar format_props:AWDProperties = this.parseProperties(AWDParser.textFormatProperties);\r\n\r\n\t\tnewTextFormat.size = format_props.get(1,12);\r\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\r\n\t\t//newTextFormat.rotated = format_props.get(3,false);\r\n\t\tnewTextFormat.kerning = format_props.get(4,true);\r\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\r\n\t\tvar tf_align_int:number = format_props.get(6,0);\r\n\t\tif(tf_align_int==1){\r\n\t\t\tnewTextFormat.align=\"right\";\r\n\t\t}\r\n\t\telse if(tf_align_int==2){\r\n\t\t\tnewTextFormat.align=\"center\";\r\n\t\t}\r\n\t\telse if(tf_align_int==3){\r\n\t\t\tnewTextFormat.align=\"justify\";\r\n\t\t}\r\n\t\tnewTextFormat.indent = format_props.get(7,0);\r\n\t\tnewTextFormat.leftMargin = format_props.get(8,0);\r\n\t\tnewTextFormat.rightMargin = format_props.get(9,0);\r\n\t\tnewTextFormat.leading = format_props.get(10,0);\r\n\t\tnewTextFormat.material = mat;\r\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\r\n\t\t//newTextFormat.extra =\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\r\n\t\tthis._blocks[blockID].data = newTextFormat;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\r\n\t}\r\n\r\n\tprivate static textFieldProperties:Object = {\r\n\t\t1:AWDParser.BOOL,\r\n\t\t3:AWDParser.BOOL,\r\n\t\t4:AWDParser.BOOL,\r\n\t\t5:AWDParser.BOOL,\r\n\t\t7:AWDParser.UINT8,\r\n\t\t8:AWDParser.UINT8,\r\n\t\t9:AWDParser.UINT8};\r\n\r\n\tprivate static textFieldTypes:Array<string> = [\"static\", \"dynamic\", \"input\", \"input\"];\r\n\r\n\r\n\tprivate parseTextField(blockID:number, factory:ITimelineSceneGraphFactory):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n        var newTextField = factory.createTextField();\r\n\t\tvar text_field_type:number=this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tnewTextField.type = AWDParser.textFieldTypes[text_field_type];\r\n\r\n\t\tif(text_field_type == 3)\r\n\t\t\tnewTextField.displayAsPassword = true;\r\n\r\n\t\t//\r\n\t\tnewTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\r\n\t\tnewTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\r\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar complete_text:string = \"\";\r\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\r\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\r\n\r\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\r\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\r\n\t\t\t\tvar text_format:TextFormat = <TextFormat> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\r\n\t\t\t\tif (txt_length > 0) {\r\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\r\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\r\n\t\t\t\t\tcomplete_text += this_txt;\r\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//newTextField.closeParagraph();\r\n\t\t}\r\n\t\tnewTextField.textFormat=text_format;\r\n\t\tnewTextField.text=complete_text;\r\n\t\t//newTextField.construct_graphics();\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.textFieldProperties);\r\n\t\tnewTextField.selectable = props.get(1, false);\r\n\t\tnewTextField.border =  props.get(3, false);\r\n\t\t//newTextField.renderHTML =  props.get(4, false);\r\n\t\t//newTextField.scrollable =  props.get(5, false);\r\n\t\t//newTextField.text_flow =  props.get(7, 0);\r\n\t\t//newTextField.orientationMode =  props.get(8, 0);\r\n\t\t//newTextField.line_mode =  props.get(9, 0);\r\n\t\tnewTextField.extra = this.parseUserAttributes();\r\n\r\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\r\n\t\tthis._blocks[blockID].data = newTextField;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t}\r\n\r\n\t// Block ID = 25\r\n\tprivate parseBillBoardLibraryBlock(blockID:number):void\r\n\t{\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tmat.bothSides=true;\r\n\t\tvar billboard:Billboard = new Billboard(mat);\r\n\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tbillboard.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\r\n\r\n\t\tthis._blocks[blockID].data = billboard;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\r\n\t}\r\n\t// Block ID = 24\r\n\tprivate parseSpriteLibraryBlock(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar graphics:Graphics = <Graphics> this._blocks[data_id].data;\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\r\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tvar mat:MethodMaterial;\r\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\r\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\r\n\t\t\t//mat.preserveAlpha = true;\r\n\t\t\t//mat.alphaBlending = true;\r\n\t\t\tmat.useColorTransform = true;\r\n\t\t\tmaterials[materials_parsed] = mat;\r\n\t\t\tmaterialNames[materials_parsed] = mat.name;\r\n\t\t}\r\n\r\n\t\tvar start_timeing = performance.now();\r\n\t\tvar sprite:Sprite = new Sprite();\r\n\t\tgraphics.copyTo(sprite.graphics);\r\n\t\tvar end_timing = performance.now();\r\n\t\tvar time_delta = end_timing - start_timeing;\r\n\t\tthis._time_graphics_bytes += time_delta;\r\n\r\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\r\n\t\t\tsprite.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\r\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\r\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\r\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\r\n\t\t}\r\n\r\n\t\tvar count:number = this._newBlockBytes.readUnsignedShort();\r\n\t\t//if(count != sprite.graphics.count)\r\n\t\t//\tthrow new Error(\"num elements does not match num subsprites\";\r\n\r\n\t\tfor (var i:number = 0; i < count; i++) {\r\n\t\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t\tvar sampler:Sampler2D = new Sampler2D();\r\n\t\t\tvar graphic:Graphic = sprite.graphics.getGraphicAt(i);\r\n\t\t\tif(graphic) {\r\n\t\t\t\tgraphic.style = new Style();\r\n\t\t\t\tgraphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\r\n\t\t\t}\r\n\t\t\tif (type == 3) {// solid color fill - need tx and ty\r\n\t\t\t\tvar tx:number=this._newBlockBytes.readFloat();\r\n\t\t\t\tvar ty:number=this._newBlockBytes.readFloat();\r\n\t\t\t\tif(graphic) {\r\n\t\t\t\t\tgraphic.material.animateUVs = true;\r\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(0, 0, 0, 0, tx, ty);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (type == 4) {// texture fill - need full matrix\r\n\t\t\t\tvar matrix:Float32Array = this.parseMatrix32RawData();\r\n\t\t\t\tif(graphic) {\r\n\t\t\t\t\tgraphic.material.animateUVs = true;\r\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (type == 5) {// linear gradient fill - need a, c , tx and ty\r\n\t\t\t\tvar newMatrix:Matrix = new Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\r\n\t\t\t\tif(graphic) {\r\n\t\t\t\t\tgraphic.material.animateUVs = true;\r\n\t\t\t\t\tgraphic.style.uvMatrix = newMatrix;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\telse if (type == 6) {// radial gradient fill - need image rectangle + full transform\r\n\t\t\t\t\tvar x:number = this._newBlockBytes.readFloat();\r\n\t\t\t\t\tvar y:number = this._newBlockBytes.readFloat();\r\n\t\t\t\t\tvar width:number = this._newBlockBytes.readFloat();\r\n\t\t\t\t\tvar height:number = this._newBlockBytes.readFloat();\r\n\t\t\t\t\tvar matrix:Float32Array = this.parseMatrix32RawData();\r\n\t\t\t\t\tif(graphic) {\r\n\t\t\t\t\t\tsampler.imageRect = new Rectangle(x, y, width, height);\r\n\t\t\t\t\t\tgraphic.material.imageRect = true;\r\n\t\t\t\t\t\tgraphic.material.animateUVs = true;\r\n\t\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tif(graphic) {\r\n\t\t\t\t//check if curves are needed\r\n\t\t\t\tif (graphic.elements.getCustomAtributes(\"curves\"))\r\n\t\t\t\t\tgraphic.material.curves = true;\r\n\t\t\t}\r\n\t\t\t// todo: finish optional properties (spreadmode + focalpoint)\r\n\t\t\tthis._newBlockBytes.readUnsignedInt();\r\n\t\t}\r\n\r\n\t\tthis.parseProperties(null);\r\n\t\tsprite.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\r\n\r\n\t\tthis._blocks[blockID].data = sprite;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\r\n\t}\r\n\r\n\tprivate parseAudioBlock(blockID:number, factory:ITimelineSceneGraphFactory):void\r\n\t{\r\n\t\t//var asset:Audio;todo create asset for audio\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\t\t} else {\r\n\t\t\t// todo: exporter does not export embed sounds yet\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t// todo parse sound from bytes\r\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t//this._blocks[blockID].data = asset;todo\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\r\n\t}\r\n\r\n\tprivate static movieClipProperties:Object = {\r\n\t\t1:AWDParser.FLOAT32,\t//fps\r\n\t\t2:AWDParser.UINT16,\t\t// sceneID if not present or 0, mc is no scene\r\n\t\t3:AWDParser.UINT8};\t\t// scripting-language right now its always as2\r\n\t//Block ID = 4\r\n\tprivate parseMovieClip(blockID:number, factory:ITimelineSceneGraphFactory):void\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar j:number;\r\n\t\tvar cmd_asset:DisplayObject;\r\n\t\tvar new_timeline:Timeline = new Timeline();\r\n\t\tvar new_mc = factory.createMovieClip(new_timeline);\r\n\t\tvar name = this.parseVarStr();\r\n\r\n\t\t// register list of potential childs\r\n\t\t// a potential child can be reused on a timeline (added / removed / added)\r\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\r\n\t\t// we parse 2 lists of potential-childs:\r\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\r\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\r\n\r\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\r\n\t\t// hence we need to be careful to register all objects in correct order.\r\n\r\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (i = 0; i < num_potential_childs; i++) {\r\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\r\n\t\t\t} else {\r\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\r\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar num_all_display_instances:number = num_potential_childs;\r\n\r\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\r\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\t\tvar num_instances:number = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tnum_all_display_instances += num_instances;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\tfor (j = 0; j < num_instances; j++)\r\n\t\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\r\n\t\t\t} else {\r\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\r\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n\t\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\r\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\r\n\r\n\t\t// register list of potential sounds - for now we always have 0 sounds\r\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\r\n\r\n\r\n\t\tvar str_cnt = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar str_len = 0;\r\n\t\tvar str_data_type = 0;\r\n\t\tvar str_type=0;\r\n\t\tvar str_counter=0;\r\n\t\tfor(i=0; i<str_cnt;i++){\r\n\t\t\t// the first 6 lists are not optional and always in same order\r\n\t\t\t// hence we can get type by incremental counter instead of stored uint8\r\n\t\t\tif(str_counter<6)\r\n\t\t\t\tstr_type=str_counter;\r\n\t\t\telse\r\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t// get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\r\n\t\t\tstr_data_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t// size of this stream in byte\r\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tif(str_len>0) {\r\n\t\t\t\tvar keyframes_start_indices_data:ByteArray = new ByteArray(str_len);\r\n\t\t\t\tthis._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\r\n\t\t\t\tvar new_buffer:ArrayBufferView;\r\n\t\t\t\t//console.log(\"str_data_type = \"+str_type);\r\n\t\t\t\tswitch (str_data_type) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tnew_buffer = new Uint8Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tnew_buffer = new Uint16Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tnew_buffer = new Uint32Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tswitch (str_type) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tnew_timeline.keyframe_durations = new_buffer;\r\n\t\t\t\t\t\tnew_timeline.numKeyFrames=str_len / str_data_type;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tnew_timeline.frame_command_indices = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tnew_timeline.frame_recipe = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tnew_timeline.command_length_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tnew_timeline.command_index_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 5:\r\n\t\t\t\t\t\tnew_timeline.add_child_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\tnew_timeline.remove_child_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\tnew_timeline.update_child_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 8:\r\n\t\t\t\t\t\tnew_timeline.update_child_props_indices_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 9:\r\n\t\t\t\t\t\tnew_timeline.update_child_props_length_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 10:\r\n\t\t\t\t\t\tnew_timeline.property_type_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 11:\r\n\t\t\t\t\t\tnew_timeline.property_index_stream = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 12:\r\n\t\t\t\t\t\tnew_timeline.properties_stream_int = new_buffer;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstr_counter++;\r\n\t\t}\r\n\t\tvar lc:number=0;\r\n\t\tvar float_array_data:ByteArray;\r\n\t\tstr_cnt = this._newBlockBytes.readUnsignedByte();\r\n\t\tfor(i=0; i<str_cnt;i++){\r\n\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tswitch(str_type) {\r\n\t\t\t\tcase 0://mtx_scale\r\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_scale_rot=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1://mtx_pos\r\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_pos=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2://mtx_all\r\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_all=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3://ct\r\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\r\n\t\t\t\t\tnew_timeline.properties_stream_f32_ct=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4://labels\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t//console.log(\"start reading labels \"+str_len);\r\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\r\n\t\t\t\t\t\tnew_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5://name_stream\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\tvar string_props_array:Array<string>=[];\r\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\r\n\t\t\t\t\t\tstring_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnew_timeline.properties_stream_strings = string_props_array;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6://script_stream\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\r\n\t\t\t\t\t\tvar frame_index=this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tvar one_str_len=this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\t//this._newBlockBytes.readUTFBytes(one_str_len);\r\n\t\t\t\t\t\tnew_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tnew_timeline.init();\r\n\r\n\t\tvar sceneID:number = 0;\r\n\t\tvar fps:number = 25;\r\n\t\tthis.parseProperties(AWDParser.movieClipProperties);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset>new_mc, name);\r\n\r\n\t\tthis._blocks[blockID].data = new_mc;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\r\n\t}\r\n\r\n\tprivate static graphicsProperties:Object = {\r\n\t\t1:AWDParser.GEO_NUMBER,\r\n\t\t2:AWDParser.GEO_NUMBER};\r\n\r\n\tprivate static elementsProperties:Object = {\r\n\t\t1:AWDParser.GEO_NUMBER,\r\n\t\t2:AWDParser.GEO_NUMBER};\r\n\r\n\t//Block ID = 1\r\n\tprivate parseGraphics(blockID:number):void\r\n\t{\r\n\t\tvar graphics:Graphics = new Graphics();\r\n\r\n\t\t// Read name and sub count\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar numElements:number = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t// Read optional properties\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.graphicsProperties);\r\n\t\tvar geoScaleU:number = props.get(1, 1);\r\n\t\tvar geoScaleV:number = props.get(2, 1);\r\n\t\tvar target_start_idx:number=0;\r\n\t\tvar target_vert_cnt:number=0;\r\n\t\tvar element_type:number = ElementType.STANDART_STREAMS;\r\n\t\tvar target_element:ElementsBase = null;\r\n\t\t// Loop through sub sprites\r\n\t\tfor (var elements_parsed:number = 0;  elements_parsed < numElements; elements_parsed++) {\r\n\t\t\tvar is_curve_elements:boolean=false;\r\n\t\t\tvar attr_count:number=0;\r\n\t\t\tvar sm_len:number, sm_end:number;\r\n\t\t\tvar w_indices:Array<number>;\r\n\t\t\tvar weights:Array<number>;\r\n\t\t\ttarget_start_idx=0;\r\n\t\t\ttarget_vert_cnt=0;\r\n\t\t\telement_type = ElementType.STANDART_STREAMS;\r\n\t\t\ttarget_element = null;\r\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\r\n\t\t\tvar elementsProps:AWDProperties = this.parseProperties(AWDParser.elementsProperties);\r\n\t\t\t// Loop through data streams\r\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\tvar idx:number = 0;\r\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t// Type, field type, length\r\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\r\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\r\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\r\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t} else if (str_type == 3) {\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\r\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t} else if (str_type == 4) {\r\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\r\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t} else if (str_type == 6) {\r\n\t\t\t\t\tw_indices = Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\r\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\r\n\t\t\t\t} else if (str_type == 7) {\r\n\t\t\t\t\tweights = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\r\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (2d pos + uv + curvedata)\r\n\t\t\t\t\telement_type=ElementType.CONCENATED_STREAMS;\r\n\t\t\t\t\tattr_count = 28;\r\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\r\n\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\r\n\t\t\t\t\telement_type=ElementType.CONCENATED_STREAMS;\r\n\t\t\t\t\tattr_count = 20;\r\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\r\n\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\r\n\t\t\t\t\telement_type=ElementType.CONCENATED_STREAMS;\r\n\t\t\t\t\tattr_count = 12;\r\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\r\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\r\n\t\t\t\t} else if (str_type == 13) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)else {\r\n\t\t\t\t\telement_type=ElementType.SHARED_BUFFER;\r\n\t\t\t\t\tvar targetGraphic:Graphics=<Graphics>(this._blocks[this._newBlockBytes.readUnsignedInt()].data);\r\n\t\t\t\t\tvar element_idx:number=this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\ttarget_element = targetGraphic.getGraphicAt(element_idx).elements;\r\n\t\t\t\t\ttarget_start_idx = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\ttarget_vert_cnt = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.log(\"skipping unknown subgeom stream\");\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseUserAttributes(); // Ignore sub-sprite attributes for now\r\n\r\n\t\t\tif(element_type==ElementType.CONCENATED_STREAMS){\r\n\t\t\t\t//console.log(\"str_len/attr_count = \"+str_len/attr_count)\r\n\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len/attr_count);\r\n\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\r\n\r\n\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\r\n\r\n\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\r\n\t\t\t\tif(attr_count==20){\r\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\r\n\t\t\t\t}\r\n\t\t\t\telse if(attr_count==12){\r\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(attr_count==28)\r\n\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\r\n\r\n\t\t\t\tgraphics.addGraphic(curve_elements);\r\n\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements with curves\");\r\n\r\n\t\t\t}\r\n\t\t\telse if(element_type==ElementType.STANDART_STREAMS){\r\n\t\t\t\tvar triangle_elements = new TriangleElements(new AttributesBuffer());\r\n\r\n\t\t\t\tif (weights)\r\n\t\t\t\t\ttriangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\r\n\r\n\t\t\t\tif (normals)\r\n\t\t\t\t\ttriangle_elements.autoDeriveNormals = false;\r\n\r\n\t\t\t\ttriangle_elements.autoDeriveTangents = true;\r\n\r\n\t\t\t\ttriangle_elements.setIndices(indices);\r\n\t\t\t\ttriangle_elements.setPositions(verts);\r\n\t\t\t\ttriangle_elements.setNormals(normals);\r\n\t\t\t\ttriangle_elements.setUVs(uvs);\r\n\t\t\t\ttriangle_elements.setJointWeights(weights);\r\n\t\t\t\ttriangle_elements.setJointIndices(w_indices);\r\n\r\n\t\t\t\tvar scaleU:number = elementsProps.get(1, 1);\r\n\t\t\t\tvar scaleV:number = elementsProps.get(2, 1);\r\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\r\n\r\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\r\n\t\t\t\t\tsetSubUVs = true;\r\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\r\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (setSubUVs)\r\n\t\t\t\t\ttriangle_elements.scaleUV(scaleU, scaleV);\r\n\r\n\t\t\t\tgraphics.addGraphic(triangle_elements);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements\");\r\n\t\t\t}\r\n\t\t\telse if(element_type==ElementType.SHARED_BUFFER){\r\n\r\n\t\t\t\tvar graphic:Graphic = graphics.addGraphic(target_element);\r\n\t\t\t\tgraphic.offset = target_start_idx;\r\n\t\t\t\tgraphic.count = target_vert_cnt;\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements that shares buffer from target geom\");\r\n\t\t\t}\r\n\r\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\r\n\t\t\t// when creating sprites (and their material assignments.)\r\n\t\t}\r\n\r\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\r\n\t\t\tgraphics.scaleUV(geoScaleU, geoScaleV);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> graphics, name);\r\n\t\tthis._blocks[blockID].data = graphics;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed Graphics: Name = \" + name);\r\n\t}\r\n\r\n\tprivate static primitiveProperties:Object = {\r\n\t\t101:AWDParser.GEO_NUMBER,\r\n\t\t102:AWDParser.GEO_NUMBER,\r\n\t\t103:AWDParser.GEO_NUMBER,\r\n\t\t110:AWDParser.GEO_NUMBER,\r\n\t\t111:AWDParser.GEO_NUMBER,\r\n\t\t301:AWDParser.UINT16,\r\n\t\t302:AWDParser.UINT16,\r\n\t\t303:AWDParser.UINT16,\r\n\t\t701:AWDParser.BOOL,\r\n\t\t702:AWDParser.BOOL,\r\n\t\t703:AWDParser.BOOL,\r\n\t\t704:AWDParser.BOOL};\r\n\r\n\tprivate static primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\r\n\r\n\t//Block ID = 11\r\n\tprivate parsePrimitves(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar prefab:PrefabBase;\r\n\t\tvar primType:number;\r\n\t\tvar elements_parsed:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar bsm:Matrix3D;\r\n\r\n\t\t// Read name and sub count\r\n\t\tname = this.parseVarStr();\r\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\r\n\t\tprops = this.parseProperties(AWDParser.primitiveProperties);\r\n\r\n\t\t// to do, not all properties are set on all primitives\r\n\t\tswitch (primType) {\r\n\t\t\tcase 1:\r\n\t\t\t\tprefab = new PrimitivePlanePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tprefab = new PrimitiveCubePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3:\r\n\t\t\t\tprefab = new PrimitiveSpherePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\r\n\t\t\t\tif (!props.get(701, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\r\n\t\t\t\tif (!props.get(702, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\r\n\t\t\t\tif (!props.get(703, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 5:\r\n\t\t\t\tprefab = new PrimitiveConePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 7:\r\n\t\t\t\tprefab = new PrimitiveTorusPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tprefab = new PrefabBase();\r\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\r\n\t\t\t//graphics.elements;\r\n\t\t\t//graphics.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tprefab.name = name;\r\n\t\tthis._pFinalizeAsset(prefab, name);\r\n\t\tthis._blocks[blockID].data = prefab;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif ((primType < 0) || (primType > 7))\r\n\t\t\t\tprimType = 0;\r\n\r\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static containerProperties:Object = {\r\n\t\t1:AWDParser.MATRIX_NUMBER,\r\n\t\t2:AWDParser.MATRIX_NUMBER,\r\n\t\t3:AWDParser.MATRIX_NUMBER,\r\n\t\t4:AWDParser.UINT8};\r\n\r\n\t// Block ID = 22\r\n\tprivate parseContainer(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar mtx:Matrix3D;\r\n\t\tvar ctr:DisplayObjectContainer;\r\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\r\n\t\tmtx = this.parseMatrix3D();\r\n\t\tname = this.parseVarStr();\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tctr = new DisplayObjectContainer();\r\n\t\tctr.transform.matrix3D = mtx;\r\n\r\n\t\tif (parent) {\r\n\t\t\tparent.addChild(ctr);\r\n\t\t\tparentName = parent.name;\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\r\n\t\t}\r\n\r\n\t\t// in AWD version 2.1 we read the Container properties\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.containerProperties);\r\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t} else {// in other versions we do not read the Container properties\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\r\n\t\tctr.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\r\n\t\tthis._blocks[blockID].data = ctr;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\r\n\t}\r\n\r\n\tprivate static spriteInstanceProperties:Object = {\r\n\t\t1:AWDParser.MATRIX_NUMBER,\r\n\t\t2:AWDParser.MATRIX_NUMBER,\r\n\t\t3:AWDParser.MATRIX_NUMBER,\r\n\t\t4:AWDParser.UINT8,\r\n\t\t5:AWDParser.BOOL};\r\n\r\n\t// Block ID = 23\r\n\tprivate parseSpriteInstance(blockID:number):void\r\n\t{\r\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar asset:IAsset = <IAsset> this._blocks[data_id].data;\r\n\t\tvar graphics:Graphics;\r\n\t\tvar prefab:PrefabBase;\r\n\t\tvar isPrefab:boolean=false;\r\n\t\tif (asset.isAsset(Graphics)) {\r\n\t\t\tgraphics = <Graphics> asset;\r\n\t\t} else {\r\n\t\t\tisPrefab = true;\r\n\t\t\tprefab = <PrefabBase> asset;\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tvar mat:MethodMaterial;\r\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\r\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\r\n\t\t\tmaterials[materials_parsed] = mat;\r\n\t\t\tmaterialNames[materials_parsed] = mat.name;\r\n\t\t}\r\n\r\n\t\tvar sprite:Sprite;\r\n\r\n\t\tif (isPrefab) {\r\n\t\t\tsprite = <Sprite> prefab.getNewObject()\r\n\t\t} else {\r\n\t\t\tsprite = new Sprite();\r\n\t\t\tgraphics.copyTo(sprite.graphics);\r\n\t\t}\r\n\r\n\t\tsprite.transform.matrix3D = mtx;\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tif (parent) {\r\n\t\t\tparent.addChild(sprite);\r\n\t\t\tparentName = parent.name;\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\r\n\t\t}\r\n\r\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\r\n\t\t\tsprite.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\r\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\r\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\r\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\r\n\t\t}\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.spriteInstanceProperties);\r\n\t\t\tsprite.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t\tsprite.castsShadows = props.get(5, true);\r\n\t\t} else {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\tsprite.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\r\n\t\tthis._blocks[blockID].data = sprite;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif (isPrefab)\r\n\t\t\t\tconsole.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\r\n\t\t\telse\r\n\t\t\t\tconsole.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID 31\r\n\tprivate parseSkyboxInstance(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar asset:Skybox = new Skybox();\r\n\t\tvar tex:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultImageCube());\r\n\t\tasset.texture = tex;\r\n\r\n\t\tthis.parseProperties(null);\r\n\t\tasset.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(asset, name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\r\n\t}\r\n\r\n\tprivate static lightProperties:Object = {\r\n\t\t1:AWDParser.PROPERTY_NUMBER,\r\n\t\t2:AWDParser.PROPERTY_NUMBER,\r\n\t\t3:AWDParser.COLOR,\r\n\t\t4:AWDParser.PROPERTY_NUMBER,\r\n\t\t5:AWDParser.PROPERTY_NUMBER,\r\n\t\t6:AWDParser.BOOL,\r\n\t\t7:AWDParser.COLOR,\r\n\t\t8:AWDParser.PROPERTY_NUMBER,\r\n\t\t9:AWDParser.UINT8,\r\n\t\t10:AWDParser.UINT8,\r\n\t\t11:AWDParser.PROPERTY_NUMBER,\r\n\t\t12:AWDParser.UINT16,\r\n\t\t21:AWDParser.MATRIX_NUMBER,\r\n\t\t22:AWDParser.MATRIX_NUMBER,\r\n\t\t23:AWDParser.MATRIX_NUMBER};\r\n\r\n\t//Block ID = 41\r\n\tprivate parseLight(blockID:number):void\r\n\t{\r\n\t\tvar light:LightBase;\r\n\t\tvar newShadowMapper:ShadowMapperBase;\r\n\r\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.lightProperties);\r\n\t\tvar shadowMapperType:number = props.get(9, 0);\r\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\r\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\r\n\r\n\t\tif (lightType == 1) {\r\n\t\t\tlight = new PointLight();\r\n\r\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\r\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 4) {\r\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.transform.matrix3D = mtx;\r\n\t\t}\r\n\r\n\t\tif (lightType == 2) {\r\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 1) {\r\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (shadowMapperType == 2)\r\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\r\n\t\t\t\t//if (shadowMapperType == 3)\r\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlight.color = props.get(3, 0xffffff);\r\n\t\tlight.specular = props.get(4, 1.0);\r\n\t\tlight.diffuse = props.get(5, 1.0);\r\n\t\tlight.ambientColor = props.get(7, 0xffffff);\r\n\t\tlight.ambient = props.get(8, 0.0);\r\n\r\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\r\n\t\tif (newShadowMapper) {\r\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\r\n\t\t\t\tif (props.get(10, 1) != 1)\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\r\n\t\t\t} else {\r\n\t\t\t\tif (props.get(10, 2) != 2)\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\r\n\t\t\t}\r\n\r\n\t\t\tlight.shadowMapper = newShadowMapper;\r\n\t\t\tlight.castsShadows = true;\r\n\t\t}\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tif (parent) {\r\n\t\t\tparent.addChild(light);\r\n\t\t\tparentName = parent.name;\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\r\n\r\n\t\tthis._blocks[blockID].data = light;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\r\n\t}\r\n\r\n\tprivate static cameraProperties:Object = {\r\n\t\t101:AWDParser.PROPERTY_NUMBER,\r\n\t\t102:AWDParser.PROPERTY_NUMBER,\r\n\t\t103:AWDParser.PROPERTY_NUMBER,\r\n\t\t104:AWDParser.PROPERTY_NUMBER};\r\n\r\n\tprivate static cameraPivotProperties:Object = {\r\n\t\t1:AWDParser.MATRIX_NUMBER,\r\n\t\t2:AWDParser.MATRIX_NUMBER,\r\n\t\t3:AWDParser.MATRIX_NUMBER,\r\n\t\t4:AWDParser.UINT8};\r\n\r\n\t//Block ID = 43\r\n\tprivate parseCamera(blockID:number):void\r\n\t{\r\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar projection:ProjectionBase;\r\n\r\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\r\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\r\n\r\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.cameraProperties);\r\n\r\n\t\tswitch (projectiontype) {\r\n\t\t\tcase 5001:\r\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5002:\r\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5003:\r\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar camera:Camera = new Camera(projection);\r\n\t\tcamera.transform.matrix3D = mtx;\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tif (parent) {\r\n\t\t\tparent.addChild(camera);\r\n\t\t\tparentName = parent.name;\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\r\n\t\t}\r\n\r\n\t\tcamera.name = name;\r\n\t\tprops = this.parseProperties(AWDParser.cameraPivotProperties);\r\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\tcamera.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(camera, name);\r\n\r\n\t\tthis._blocks[blockID].data = camera;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\r\n\t}\r\n\r\n\t//Block ID = 51\r\n\tprivate parseLightPicker(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\r\n\r\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\r\n\r\n\t\tfor (var k:number = 0; k < numLights; k++) {\r\n\t\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\t\tlightsArray.push(light);\r\n\t\t\tlightsArrayNames.push(light.name);\r\n\t\t}\r\n\r\n\t\tif (lightsArray.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\treturn; //return without any more parsing for this block\r\n\t\t}\r\n\r\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\r\n\t\tlightPick.name = name;\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\r\n\r\n\t\tthis._blocks[blockID].data = lightPick;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\r\n\t}\r\n\r\n\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\r\n\tprivate static materialProperties:Object = {\r\n\t\t1:AWDParser.INT32,\r\n\t\t2:AWDParser.BADDR,\r\n\t\t10:AWDParser.PROPERTY_NUMBER,\r\n\t\t11:AWDParser.BOOL,\r\n\t\t12:AWDParser.PROPERTY_NUMBER,\r\n\t\t13:AWDParser.BOOL};\r\n\r\n\t//Block ID = 81\r\n\tprivate parseMaterial(blockID:number):void\r\n\t{\r\n\t\t// TODO: not used\r\n\t\t////blockLength = block.len;\r\n\t\tvar name:string;\r\n\t\tvar type:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar finalize:boolean;\r\n\t\tvar num_methods:number;\r\n\t\tvar methods_parsed:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tname = this.parseVarStr();\r\n\t\ttype = this._newBlockBytes.readUnsignedByte();\r\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t// Read material numerical properties\r\n\t\tprops = this.parseProperties(AWDParser.materialProperties);\r\n\r\n\t\tmethods_parsed = 0;\r\n\t\twhile (methods_parsed < num_methods) {\r\n\t\t\tvar method_type:number;\r\n\r\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tmethods_parsed += 1;\r\n\t\t}\r\n\r\n\t\tvar debugString:string = \"\";\r\n\t\tif (type === 1) { // Color material\r\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\tvar color:number = props.get(1, 0xffffff);\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t} else {\r\n\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t}\r\n\t\t} else if (type === 2) {\r\n\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\r\n\r\n\t\t\tmat = new MethodMaterial();\r\n\t\t\tmat.ambientMethod.texture = texture;\r\n\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\r\n\t\t\t} else {\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmat.extra = this.parseUserAttributes();\r\n\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\tmat.style.sampler = new Sampler2D(props.get(13, false));\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\r\n\t\tthis._blocks[blockID].data = mat;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(debugString);\r\n\t}\r\n\t\r\n\tprivate static material_v1Properties:Object = {1:AWDParser.UINT32,\r\n\t\t2:AWDParser.BADDR,\r\n\t\t3:AWDParser.BADDR,\r\n\t\t4:AWDParser.UINT8,\r\n\t\t5:AWDParser.BOOL,\r\n\t\t6:AWDParser.BOOL,\r\n\t\t7:AWDParser.BOOL,\r\n\t\t8:AWDParser.BOOL,\r\n\t\t9:AWDParser.UINT8,\r\n\t\t10:AWDParser.PROPERTY_NUMBER,\r\n\t\t11:AWDParser.BOOL,\r\n\t\t12:AWDParser.PROPERTY_NUMBER,\r\n\t\t13:AWDParser.BOOL,\r\n\t\t15:AWDParser.PROPERTY_NUMBER,\r\n\t\t16:AWDParser.UINT32,\r\n\t\t17:AWDParser.BADDR,\r\n\t\t18:AWDParser.PROPERTY_NUMBER,\r\n\t\t19:AWDParser.PROPERTY_NUMBER,\r\n\t\t20:AWDParser.UINT32,\r\n\t\t21:AWDParser.BADDR,\r\n\t\t22:AWDParser.BADDR};\r\n\r\n\tprivate static method_v1Properties:Object = {\r\n\t\t1:AWDParser.BADDR,\r\n\t\t2:AWDParser.BADDR,\r\n\t\t3:AWDParser.BADDR,\r\n\t\t101:AWDParser.PROPERTY_NUMBER,\r\n\t\t102:AWDParser.PROPERTY_NUMBER,\r\n\t\t103:AWDParser.PROPERTY_NUMBER,\r\n\t\t201:AWDParser.UINT32,\r\n\t\t202:AWDParser.UINT32,\r\n\t\t301:AWDParser.UINT16,\r\n\t\t302:AWDParser.UINT16,\r\n\t\t401:AWDParser.UINT8,\r\n\t\t402:AWDParser.UINT8,\r\n\t\t601:AWDParser.COLOR,\r\n\t\t602:AWDParser.COLOR,\r\n\t\t701:AWDParser.BOOL,\r\n\t\t702:AWDParser.BOOL,\r\n\t\t801:AWDParser.MTX4x4};\r\n\r\n\t// Block ID = 81 AWD2.1\r\n\tprivate parseMaterial_v1(blockID:number):void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar diffuseImage:BitmapImage2D;\r\n\t\tvar normalImage:BitmapImage2D;\r\n\t\tvar specImage:BitmapImage2D;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.material_v1Properties);\r\n\t\tvar spezialType:number = props.get(4, 0);\r\n\t\tvar debugString:string = \"Parsed Material \";\r\n\r\n\t\tif (spezialType >= 2) {//this is no supported material\r\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type <= 2) {// Color material\r\n\t\t\tif (this.materialMode == 1)\r\n\t\t\t\tspezialType = 0;\r\n\t\t\telse if (this.materialMode == 2)\r\n\t\t\t\tspezialType = 1;\r\n\r\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\r\n\r\n\t\t\t\tif (type == 1) {// Color material\r\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\r\n\r\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\r\n\r\n\t\t\t\t\t} else { //\tSinglePassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (type == 2) {// texture material\r\n\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\r\n\r\n\t\t\t\t\tmat = new MethodMaterial();\r\n\t\t\t\t\tmat.ambientMethod.texture = texture;\r\n\r\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\r\n\t\t\t\t\t} else {//\tSinglePassMaterial\r\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdiffuseImage = <BitmapImage2D> this._blocks[props.get(17, 0)].data;\r\n\t\t\t\tnormalImage = <BitmapImage2D> this._blocks[props.get(3, 0)].data;\r\n\t\t\t\tspecImage = <BitmapImage2D> this._blocks[props.get(21, 0)].data;\r\n\t\t\t\tmat.lightPicker = <LightPickerBase> this._blocks[props.get(22, 0)].data;\r\n\t\t\t\tmat.style.sampler = new Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true));\r\n\t\t\t\tmat.bothSides = props.get(7, false);\r\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\r\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\r\n\r\n\t\t\t\tif (diffuseImage) {\r\n\t\t\t\t\tmat.diffuseTexture = new Single2DTexture(diffuseImage);\r\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (normalImage) {\r\n\t\t\t\t\tmat.normalMethod.texture = new Single2DTexture(normalImage);\r\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalImage.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (specImage) {\r\n\t\t\t\t\tmat.specularMethod.texture = new Single2DTexture(specImage);\r\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specImage.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\t\t\tmat.ambientMethod.strength = props.get(15, 1.0);\r\n\t\t\t\tmat.diffuseMethod.color = props.get(16, 0xffffff);\r\n\t\t\t\tmat.specularMethod.strength = props.get(18, 1.0);\r\n\t\t\t\tmat.specularMethod.gloss = props.get(19, 50);\r\n\t\t\t\tmat.specularMethod.color = props.get(20, 0xffffff);\r\n\r\n\t\t\t\tfor (var methods_parsed:number = 0; methods_parsed < num_methods; methods_parsed++) {\r\n\t\t\t\t\tvar method_type:number;\r\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t\tprops = this.parseProperties(AWDParser.method_v1Properties);\r\n\r\n\t\t\t\t\tswitch (method_type) {\r\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\r\n\t\t\t\t\t\t\tvar effectMethod:EffectMethodBase = <EffectMethodBase> this._blocks[props.get(1, 0)].data;\r\n\t\t\t\t\t\t\tmat.addEffectMethod(effectMethod);\r\n\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + effectMethod.name;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\r\n\t\t\t\t\t\t\tvar shadowMapMethod:ShadowMapMethodBase = <ShadowMapMethodBase> this._blocks[props.get(1, 0)].data;\r\n\t\t\t\t\t\t\tmat.shadowMethod = shadowMapMethod;\r\n\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\r\n\t\t\t\t\t\t\tvar cubeTexture:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data);\r\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod();\r\n\t\t\t\t\t\t\tmat.ambientMethod.texture = cubeTexture;\r\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\r\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(texture);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\r\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\r\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\r\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\r\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(<Single2DTexture> mat.normalMethod.texture || texture, texture);\r\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.parseUserAttributes();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// todo: we should not need this anymore (if using texture-atlas)\r\n\t\telse if ((type>=3)&&(type<=7)){\r\n\t\t\t// if this is a basic material, we create it, finalize it, assign it to block-cache and return.\r\n\t\t\tvar color:number = props.get(1, 0xcccccc);\r\n\t\t\tdebugString+=color;\r\n\t\t\tvar diffuseTexture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\r\n\t\t\tif(type==5){\r\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.LINEAR_GRADIENT;\r\n\t\t\t}\r\n\t\t\telse if(type==6){\r\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.RADIAL_GRADIENT;\r\n\t\t\t}\r\n\t\t\tvar basic_mat:BasicMaterial = new BasicMaterial();\r\n\t\t\tbasic_mat.texture = diffuseTexture;\r\n\t\t\tbasic_mat.bothSides = true;\r\n\t\t\tbasic_mat.alphaBlending = props.get(11, false);\r\n\t\t\t//basic_mat.preserveAlpha = basic_mat.alphaBlending;\r\n\t\t\t//basic_mat.alphaBlending = true;\r\n\t\t\tbasic_mat.extra = this.parseUserAttributes();\r\n\t\t\tthis._pFinalizeAsset(<IAsset> basic_mat, name);\r\n\t\t\tthis._blocks[blockID].data = basic_mat;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(debugString);\r\n\t\t\treturn;\r\n\t\t\r\n\t\t}\r\n\t\tmat.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\r\n\t\tthis._blocks[blockID].data = mat;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(debugString);\r\n\t}\r\n\r\n\t//Block ID = 82\r\n\tprivate parseTexture(blockID:number):void\r\n\t{\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tthis._texture_users[this._cur_block_id] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tvar url:string = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\r\n\t\t} else {\r\n\t\t\tvar data_len:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t//\r\n\t\t\t// AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\r\n\t\t\t//\r\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\r\n\t\t\t// This gives the browser time to initialise image width / height.\r\n\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\r\n\t}\r\n\r\n\t//Block ID = 83\r\n\tprivate parseCubeTexture(blockID:number):void\r\n\t{\r\n\t\t//blockLength = block.len;\r\n\t\tvar data_len:number;\r\n\t\tvar i:number;\r\n\r\n\t\tthis._texture_users[ this._cur_block_id ] = [];\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tthis._texture_users[this._cur_block_id] = [];\r\n\r\n\t\t\t// External\r\n\t\t\tif (type == 0) {\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar url:string;\r\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true, i);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar data:ByteArray = new ByteArray(data_len);\r\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true, i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\r\n\t}\r\n\r\n\t//Block ID = 91\r\n\tprivate parseSharedMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar asset:EffectMethodBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\t\tasset = this.parseSharedMethodList(blockID);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\r\n\t}\r\n\r\n\t//Block ID = 92\r\n\tprivate parseShadowMethodBlock(blockID:number):void\r\n\t{\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tvar asset:ShadowMethodBase = this.parseShadowMethodList(light, blockID);\r\n\r\n\t\tif (!asset)\r\n\t\t\treturn;\r\n\r\n\t\tthis.parseUserAttributes(); // Ignore for now\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\r\n\t}\r\n\r\n\tprivate static commandProperties:Object = {\r\n\t\t1:AWDParser.BADDR};\r\n\r\n\tprivate static targetProperties:Object = {\r\n\t\t1:AWDParser.MATRIX_NUMBER,\r\n\t\t2:AWDParser.MATRIX_NUMBER,\r\n\t\t3:AWDParser.MATRIX_NUMBER,\r\n\t\t4:AWDParser.UINT8};\r\n\t\r\n\t//Block ID = 253\r\n\tprivate parseCommand(blockID:number):void\r\n\t{\r\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tvar parentObject:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\tvar targetObject:DisplayObjectContainer;\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\r\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.commandProperties);\r\n\r\n\t\tswitch (typeCommand) {\r\n\t\t\tcase 1:\r\n\t\t\t\ttargetObject = this._blocks[props.get(1, 0)].data;\r\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\r\n\r\n\t\t\t\tif (parentObject)\r\n\t\t\t\t\tparentObject.addChild(targetObject);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (targetObject) {\r\n\t\t\tprops = this.parseProperties(AWDParser.targetProperties);\r\n\r\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t\ttargetObject.extra = this.parseUserAttributes();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].data = targetObject;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\r\n\t}\r\n\t\r\n\tprivate static metaDataProperties:Object = {\r\n\t\t1:AWDParser.UINT32,\r\n\t\t2:AWDParser.AWDSTRING,\r\n\t\t3:AWDParser.AWDSTRING,\r\n\t\t4:AWDParser.AWDSTRING,\r\n\t\t5:AWDParser.AWDSTRING};\r\n\r\n\t//blockID 255\r\n\tprivate parseMetaData(blockID:number):void\r\n\t{\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.metaDataProperties);\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\r\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\r\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\r\n\t\t}\r\n\t}\r\n\r\n\t//blockID 254\r\n\tprivate parseNameSpace(blockID:number):void\r\n\t{\r\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar nameSpaceString:string = this.parseVarStr();\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\r\n\t}\r\n\r\n\t//--Parser UTILS---------------------------------------------------------------------------\r\n\r\n\tprivate shadowMethodListProperties:Object = {\r\n\t\t1:AWDParser.BADDR,\r\n\t\t2:AWDParser.BADDR,\r\n\t\t3:AWDParser.BADDR,\r\n\t\t101:AWDParser.PROPERTY_NUMBER,\r\n\t\t102:AWDParser.PROPERTY_NUMBER,\r\n\t\t103:AWDParser.PROPERTY_NUMBER,\r\n\t\t201:AWDParser.UINT32,\r\n\t\t202:AWDParser.UINT32,\r\n\t\t301:AWDParser.UINT16,\r\n\t\t302:AWDParser.UINT16,\r\n\t\t401:AWDParser.UINT8,\r\n\t\t402:AWDParser.UINT8,\r\n\t\t601:AWDParser.COLOR,\r\n\t\t602:AWDParser.COLOR,\r\n\t\t701:AWDParser.BOOL,\r\n\t\t702:AWDParser.BOOL,\r\n\t\t801:AWDParser.MTX4x4}\r\n\t\r\n\t// this functions reads and creates a ShadowMethodMethod\r\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar shadowMethod:ShadowMethodBase;\r\n\t\tvar props:AWDProperties = this.parseProperties(this.shadowMethodListProperties);\r\n\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>\r\n\t\tswitch (methodType) {\r\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\r\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\r\n\t\t\t//\t\t\t\t\t}\r\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 1002: //ShadowNearMethod\r\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> this._blocks[props.get(1, 0)].data);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1101: //ShadowFilteredMethod\r\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1102: //ShadowDitheredMethod\r\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1103: //ShadowSoftMethod\r\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1104: //ShadowHardMethod\r\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn shadowMethod;\r\n\t}\r\n\r\n\t//Block ID 101\r\n\tprivate parseSkeleton(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar skeleton:Skeleton = new Skeleton();\r\n\t\tthis.parseProperties(null); // Discard properties for now\r\n\r\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\r\n\t\t\tvar joint:SkeletonJoint;\r\n\t\t\tvar ibp:Matrix3D;\r\n\t\t\t// Ignore joint id\r\n\t\t\tthis._newBlockBytes.readUnsignedShort();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\r\n\t\t\tjoint.name = this.parseVarStr();\r\n\r\n\t\t\tibp = this.parseMatrix3D();\r\n\t\t\tjoint.inverseBindPose = ibp.rawData;\r\n\t\t\t// Ignore joint props/attributes for now\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tskeleton.joints.push(joint);\r\n\t\t}\r\n\r\n\t\t// Discard attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(skeleton, name);\r\n\r\n\t\tthis._blocks[blockID].data = skeleton;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//Block ID = 102\r\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar pose:SkeletonPose = new SkeletonPose();\r\n\r\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\r\n\t\t\tvar joint_pose:JointPose;\r\n\t\t\tvar has_transform:number /*uint*/;\r\n\t\t\tjoint_pose = new JointPose();\r\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\r\n\t\t\tif (has_transform == 1) {\r\n\t\t\t\tvar mtx_data:Float32Array = this.parseMatrix43RawData();\r\n\r\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\r\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\r\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\r\n\r\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Skip attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(pose, name);\r\n\r\n\t\tthis._blocks[blockID].data = pose;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//blockID 103\r\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar frame_dur:number;\r\n\t\tvar pose_id:number;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\r\n\t\t\tpose_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_id].data, frame_dur);\r\n\t\t}\r\n\t\tif (clip.frames.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Ignore attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\t\tthis._blocks[blockID].data = clip;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\t\r\n\tprivate spritePoseAnimationProperties:Object = {\r\n\t\t1:AWDParser.BOOL,\r\n\t\t2:AWDParser.BOOL};\r\n\r\n\t//Block ID = 111 /  Block ID = 112\r\n\tprivate parseSpritePoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\r\n\t{\r\n\t\tvar subSpriteParsed:number /*uint*/;\r\n\t\tvar x:number;\r\n\t\tvar y:number;\r\n\t\tvar z:number;\r\n\t\tvar str_len:number;\r\n\t\tvar str_end:number;\r\n\t\tvar elements:TriangleElements;\r\n\t\tvar idx:number /*int*/ = 0;\r\n\t\tvar clip:VertexClipNode = new VertexClipNode();\r\n\t\tvar indices:Short3Attributes;\r\n\t\tvar verts:Array<number>;\r\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar geo_id:number /*int*/ = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar graphics:Graphics = <Graphics> this._blocks[geo_id].data;\r\n\r\n\t\tvar uvs:Array<Float32Array> = this.getUVForVertexAnimation(geo_id);\r\n\r\n\t\tvar num_frames:number = (!poseOnly)? this._newBlockBytes.readUnsignedShort() : 1;\r\n\r\n\t\tvar num_subsprites:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar num_Streams:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (var streamsParsed:number = 0; streamsParsed < num_Streams; streamsParsed++)\r\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\r\n\r\n\t\tprops = this.parseProperties(this.spritePoseAnimationProperties);\r\n\r\n\t\tclip.looping = props.get(1, true);\r\n\t\tclip.stitchFinalFrame = props.get(2, false);\r\n\r\n\t\tvar frame_dur:number;\r\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tgraphics = new Graphics();\r\n\t\t\tsubSpriteParsed = 0;\r\n\t\t\twhile (subSpriteParsed < num_subsprites) {\r\n\t\t\t\tstreamsParsed = 0;\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\t\t\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\r\n\t\t\t\t\t\tindices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\r\n\t\t\t\t\t\tverts = new Array<number>();\r\n\t\t\t\t\t\tidx = 0;\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telements = new TriangleElements(new AttributesBuffer());\r\n\t\t\t\t\t\telements.setIndices(indices);\r\n\t\t\t\t\t\telements.setPositions(verts);\r\n\t\t\t\t\t\telements.setUVs(uvs[subSpriteParsed]);\r\n\t\t\t\t\t\telements.setNormals(null);\r\n\t\t\t\t\t\telements.setTangents(null);\r\n\t\t\t\t\t\telements.autoDeriveNormals = false;\r\n\t\t\t\t\t\telements.autoDeriveTangents = false;\r\n\t\t\t\t\t\tsubSpriteParsed++;\r\n\t\t\t\t\t\tgraphics.addGraphic(elements);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\tstreamsParsed++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addFrame(graphics, frame_dur);\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\r\n\t\tthis._blocks[blockID].data = clip;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\tprivate static vertexAnimationSetProperties:Object = {\r\n\t\t1:AWDParser.UINT16};\r\n\t\r\n\t//BlockID 113\r\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.vertexAnimationSetProperties);\r\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\r\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\r\n\t\tvar clipNode:AnimationClipNodeBase;\r\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\r\n\t\t\tclipNode = <AnimationClipNodeBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\t\t\tif (clipNode instanceof VertexClipNode)\r\n\t\t\t\tvertexFrames.push(<VertexClipNode> clipNode);\r\n\t\t\telse if (clipNode instanceof SkeletonClipNode)\r\n\t\t\t\tskeletonFrames.push(<SkeletonClipNode> clipNode);\r\n\t\t}\r\n\r\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tif (vertexFrames.length > 0) {\r\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\r\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\r\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\r\n\r\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\r\n\r\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\r\n\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\r\n\r\n\t\t} else if (skeletonFrames.length > 0) {\r\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\r\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\r\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\r\n\r\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\r\n\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static animatorSetProperties:Object = {1:AWDParser.BADDR};\r\n\t\r\n\t//BlockID 122\r\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.animatorSetProperties);\r\n\t\tvar targetAnimationSet:AnimationSetBase = <AnimationSetBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\r\n\r\n\t\tvar targetSpritees:Array<Sprite> = new Array<Sprite>();\r\n\t\tvar targetSpriteLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (var i:number /*int*/ = 0; i < targetSpriteLength; i++)\r\n\t\t\ttargetSpritees.push(<Sprite> this._blocks[this._newBlockBytes.readUnsignedInt()].data);\r\n\r\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tvar thisAnimator:AnimatorBase;\r\n\t\tif (type == 1)\r\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> this._blocks[props.get(1, 0)].data);\r\n\t\telse if (type == 2)\r\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\r\n\r\n\t\tthis._pFinalizeAsset(thisAnimator, name);\r\n\t\tthis._blocks[blockID].data = thisAnimator;\r\n\r\n\t\tfor (i = 0; i < targetSpritees.length; i++) {\r\n\t\t\tif (type == 1)\r\n\t\t\t\ttargetSpritees[i].animator = (<SkeletonAnimator> thisAnimator);\r\n\t\t\telse if (type == 2)\r\n\t\t\t\ttargetSpritees[i].animator = (<VertexAnimator> thisAnimator);\r\n\t\t}\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\r\n\t}\r\n\r\n\tprivate sharedMethodListProperties:Object = {\r\n\t\t1:AWDParser.BADDR,\r\n\t\t2:AWDParser.BADDR,\r\n\t\t3:AWDParser.BADDR,\r\n\t\t101:AWDParser.PROPERTY_NUMBER,\r\n\t\t102:AWDParser.PROPERTY_NUMBER,\r\n\t\t103:AWDParser.PROPERTY_NUMBER,\r\n\t\t104:AWDParser.PROPERTY_NUMBER,\r\n\t\t105:AWDParser.PROPERTY_NUMBER,\r\n\t\t106:AWDParser.PROPERTY_NUMBER,\r\n\t\t107:AWDParser.PROPERTY_NUMBER,\r\n\t\t201:AWDParser.UINT32,\r\n\t\t202:AWDParser.UINT32,\r\n\t\t301:AWDParser.UINT16,\r\n\t\t302:AWDParser.UINT16,\r\n\t\t401:AWDParser.UINT8,\r\n\t\t402:AWDParser.UINT8,\r\n\t\t601:AWDParser.COLOR,\r\n\t\t602:AWDParser.COLOR,\r\n\t\t701:AWDParser.BOOL,\r\n\t\t702:AWDParser.BOOL};\r\n\r\n\t// this functions reads and creates a EffectMethod\r\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\r\n\t{\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar effectMethodReturn:EffectMethodBase;\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties(this.sharedMethodListProperties);\r\n\r\n\t\tswitch (methodType) {\r\n\t\t\t// Effect Methods\r\n\t\t\tcase 401: //ColorMatrix\r\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 402: //ColorTransform\r\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\r\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\r\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 403: //EnvMap\r\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data), <number> props.get(101, 1));\r\n\t\t\t\tvar targetID:number = props.get(2, 0);\r\n\t\t\t\tif (targetID > 0) {\r\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\r\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <TextureBase> this._blocks[targetID].data;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 404: //LightMapMethod\r\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 406: //RimLightMethod\r\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\r\n\t\t\t\tbreak;\r\n\t\t\tcase 407: //AlphaMaskMethod\r\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\r\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 410: //FresnelEnvMapMethod\r\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 411: //FogMethod\r\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn effectMethodReturn;\r\n\r\n\t}\r\n\r\n\tprivate parseUserAttributes():Object\r\n\t{\r\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tif (list_len > 0) {\r\n\t\t\tvar list_end:number = this._newBlockBytes.position + list_len;\r\n\t\t\tvar attributes:Object = {};\r\n\r\n\t\t\tfor (var attibuteCnt:number = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\r\n\t\t\t\tvar ns_id:number;\r\n\t\t\t\tvar attr_key:string;\r\n\t\t\t\tvar attr_type:number;\r\n\t\t\t\tvar attr_len:number;\r\n\t\t\t\tvar attr_val:any;\r\n\r\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\r\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_key = this.parseVarStr();\r\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn attributes;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (attr_type) {\r\n\t\t\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.BOOL:\r\n\t\t\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT32:\r\n\t\t\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\r\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributes[attr_key] = attr_val;\r\n\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\tprivate parseProperties(expected:Object):AWDProperties\r\n\t{\r\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar props:AWDProperties = new AWDProperties();\r\n\t\tvar list_end:number = this._newBlockBytes.position + list_len;\r\n\r\n\t\tif (expected) {\r\n\t\t\tvar len:number;\r\n\t\t\tvar key:number;\r\n\t\t\tvar type:number;\r\n\r\n\t\t\tfor (var propertyCnt:number = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\r\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn props;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expected[key]) {\r\n\t\t\t\t\ttype = expected[key];\r\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t}\r\n\r\n\t\treturn props;\r\n\t}\r\n\r\n\tprivate parseAttrValue(type:number, len:number):any\r\n\t{\r\n\t\tvar elem_len:number;\r\n\t\tvar read_func:Function;\r\n\t\tvar accuracy:boolean;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase AWDParser.BOOL:\r\n\t\t\tcase AWDParser.INT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT32:\r\n\t\t\tcase AWDParser.COLOR:\r\n\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\r\n\t\t\tcase AWDParser.VECTOR2x1:\r\n\t\t\tcase AWDParser.VECTOR3x1:\r\n\t\t\tcase AWDParser.VECTOR4x1:\r\n\t\t\tcase AWDParser.MTX3x2:\r\n\t\t\tcase AWDParser.MTX3x3:\r\n\t\t\tcase AWDParser.MTX4x3:\r\n\t\t\tcase AWDParser.MTX4x4:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\t\t\tcase AWDParser.GEO_NUMBER:\r\n\t\t\t\taccuracy = this._accuracyGeo;\r\n\t\t\tcase AWDParser.MATRIX_NUMBER:\r\n\t\t\t\taccuracy = this._accuracyMatrix;\r\n\t\t\tcase AWDParser.PROPERTY_NUMBER:\r\n\t\t\t\taccuracy = this._accuracyProps;\r\n\t\t\tdefault:\r\n\t\t\t\tif (accuracy) {\r\n\t\t\t\t\telem_len = 8;\r\n\t\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\t} else {\r\n\t\t\t\t\telem_len = 4;\r\n\t\t\t\t\tread_func = this._newBlockBytes.readFloat;\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (elem_len < len) {\r\n\t\t\tvar list:Array<any> = [];\r\n\t\t\tvar num_elems:number = len/elem_len;\r\n\r\n\t\t\tfor (var num_read:number = 0; num_read < num_elems; num_read++)\r\n\t\t\t\tlist[num_read] = read_func.call(this._newBlockBytes);\r\n\r\n\t\t\treturn list;\r\n\t\t} else {\r\n\t\t\treturn read_func.call(this._newBlockBytes);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseHeader():void\r\n\t{\r\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\r\n\r\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\r\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\r\n\r\n\t\tvar flags:number = this._byteData.readUnsignedShort(); // Parse bit flags\r\n\r\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\r\n\r\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\t}\r\n\r\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\r\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\t// Check file integrity\r\n\t\tvar body_len:number = this._byteData.readUnsignedInt();\r\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable())\r\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\r\n\r\n\t}\r\n\t// Helper - functions\r\n\tprivate getUVForVertexAnimation(spriteID:number /*uint*/):Array<Float32Array>\r\n\t{\r\n\t\tif (this._blocks[spriteID].data instanceof Sprite)\r\n\t\t\tspriteID = this._blocks[spriteID].geoID;\r\n\r\n\t\tif (this._blocks[spriteID].uvsForVertexAnimation)\r\n\t\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\r\n\r\n\t\tvar graphics:Graphics = (<Graphics> this._blocks[spriteID].data);\r\n\t\tvar elements:TriangleElements;\r\n\t\tvar uvsForVertexAnimation:Array<ArrayBufferView> = this._blocks[spriteID].uvsForVertexAnimation = new Array<Float32Array>();\r\n\r\n\t\tvar len:number = graphics.count;\r\n\t\tfor (var geoCnt:number= 0; geoCnt < len; geoCnt++) {\r\n\t\t\telements = <TriangleElements> graphics.getGraphicAt(geoCnt).elements;\r\n\t\t\tuvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\r\n\t\t}\r\n\r\n\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\r\n\t}\r\n\r\n\tprivate parseVarStr():string\r\n\t{\r\n\t\treturn this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\r\n\t}\r\n\r\n\tprivate readNumber(precision:boolean = false):number\r\n\t{\r\n\t\tif (precision)\r\n\t\t\treturn this._newBlockBytes.readDouble();\r\n\r\n\t\treturn this._newBlockBytes.readFloat();\r\n\t}\r\n\r\n\tprivate parseMatrix3D():Matrix3D\r\n\t{\r\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\r\n\t}\r\n\r\n\tprivate parseMatrix32RawData():Float32Array\r\n\t{\r\n\t\tvar mtx_raw:Float32Array = new Float32Array(6);\r\n\r\n\t\tfor (var i:number = 0; i < 6; i++)\r\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n\tprivate parseMatrix43RawData():Float32Array\r\n\t{\r\n\t\tvar mtx_raw:Float32Array = new Float32Array(16);\r\n\r\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[3] = 0.0;\r\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[7] = 0.0;\r\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[11] = 0.0;\r\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[15] = 1.0;\r\n\r\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\r\n\r\n\t\tif (isNaN(mtx_raw[0])) {\r\n\t\t\tmtx_raw[0] = 1;\r\n\t\t\tmtx_raw[1] = 0;\r\n\t\t\tmtx_raw[2] = 0;\r\n\t\t\tmtx_raw[4] = 0;\r\n\t\t\tmtx_raw[5] = 1;\r\n\t\t\tmtx_raw[6] = 0;\r\n\t\t\tmtx_raw[8] = 0;\r\n\t\t\tmtx_raw[9] = 0;\r\n\t\t\tmtx_raw[10] = 1;\r\n\t\t\tmtx_raw[12] = 0;\r\n\t\t\tmtx_raw[13] = 0;\r\n\t\t\tmtx_raw[14] = 0;\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n}\r\n\r\nclass ElementType {\r\n\tpublic static STANDART_STREAMS:number = 0;\r\n\tpublic static CONCENATED_STREAMS:number = 1;\r\n\tpublic static SHARED_BUFFER:number = 2;\r\n}\r\n\r\nclass AWDProperties\r\n{\r\n\tpublic set(key:number, value:any):void\r\n\t{\r\n\t\tthis[key] = value;\r\n\t}\r\n\r\n\tpublic get(key:number, fallback:any):any\r\n\t{\r\n\t\treturn (this[key] || fallback);\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BitFlags\r\n{\r\n\tpublic static FLAG1:number = 1;\r\n\tpublic static FLAG2:number = 2;\r\n\tpublic static FLAG3:number = 4;\r\n\tpublic static FLAG4:number = 8;\r\n\tpublic static FLAG5:number = 16;\r\n\tpublic static FLAG6:number = 32;\r\n\tpublic static FLAG7:number = 64;\r\n\tpublic static FLAG8:number = 128;\r\n\tpublic static FLAG9:number = 256;\r\n\tpublic static FLAG10:number = 512;\r\n\tpublic static FLAG11:number = 1024;\r\n\tpublic static FLAG12:number = 2048;\r\n\tpublic static FLAG13:number = 4096;\r\n\tpublic static FLAG14:number = 8192;\r\n\tpublic static FLAG15:number = 16384;\r\n\tpublic static FLAG16:number = 32768;\r\n\r\n\tpublic static test(flags:number, testFlag:number):boolean\r\n\t{\r\n\t\treturn (flags & testFlag) == testFlag;\r\n\t}\r\n}\r\n",
    "import {BitmapImage2D}\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {IAsset}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {AssetLibrary}\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\r\nimport {URLLoaderDataFormat}\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {URLRequest}\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\r\nimport {ParserBase}\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\nimport {ParserUtils}\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\r\nimport {ResourceDependency}\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\r\nimport {XmlUtils}\t\t\t\tfrom \"awayjs-core/lib/utils/XmlUtils\";\r\nimport {BitmapFontTable}\t\tfrom \"awayjs-display/lib/text/BitmapFontTable\";\r\nimport {Font}\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\r\n\r\n/**\r\n * TextureAtlasParser provides a \"parser\" for natively supported image types (jpg, png). While it simply loads bytes into\r\n * a loader object, it wraps it in a BitmapImage2DResource so resource management can happen consistently without\r\n * exception cases.\r\n */\r\nexport class FNTParser extends ParserBase\r\n{\r\n\tprivate _doc:Node;\r\n\tprivate _imagePath:string;\r\n\tprivate _bitmapFontTable:BitmapFontTable;\r\n\tprivate _font:Font;\r\n\tprivate _chars:NodeList;\r\n\tprivate _parseState:number = 0;\r\n\r\n\t/**\r\n\t * Creates a new TextureAtlasParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\tvar supports:boolean=extension == \"fnt\";\r\n\t\tif(supports){\r\n\t\t\tconsole.log(\"supportsType fnt = \"+extension);\r\n\t\t}\r\n\t\treturn extension == \"fnt\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\ttry {\r\n\t\t\tvar content:string = ParserUtils.toString(data);\r\n\t\t\tif(content.indexOf(\"font\") != -1 || content.indexOf(\"Font\") != -1){\r\n\t\t\t\tconsole.log(\"supportsData fnt\");\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t} catch (e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif(resourceDependency.assets.length) {\r\n\t\t\tthis._bitmapFontTable.add_page(<BitmapImage2D> resourceDependency.assets[0]);\r\n\t\t\tthis._pFinalizeAsset(<BitmapImage2D> resourceDependency.assets[0]);\r\n\t\t\tthis._parseState = FNTParserState.PARSE_CHARS;\r\n\t\t} else {\r\n\t\t\tthis._parseState = FNTParserState.PARSE_COMPLETE;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tthis._parseState = FNTParserState.PARSE_COMPLETE;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar nodes:NodeList;\r\n\r\n\t\tswitch(this._parseState) {\r\n\t\t\tcase FNTParserState.PARSE_XML:\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis._doc = XmlUtils.getChildrenWithTag(XmlUtils.strToXml(this._pGetTextData()), \"font\")[0];\r\n\t\t\t\t\tvar page_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"pages\")[0];\r\n\t\t\t\t\tvar all_pages:NodeList = XmlUtils.getChildrenWithTag(page_node, \"page\");\r\n\t\t\t\t\tvar len:number = all_pages.length;\r\n\t\t\t\t\t// todo: correctly support multiple pages\r\n\t\t\t\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\t\t\t\tthis._imagePath = XmlUtils.readAttributeValue(all_pages[i], \"file\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar char_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"chars\")[0];\r\n\t\t\t\t\tthis._chars = XmlUtils.getChildrenWithTag(char_node, \"char\");\r\n\t\t\t\t\tthis._parseState = FNTParserState.PARSE_IMAGE;\r\n\t\t\t\t\tvar info_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"info\")[0];\r\n\t\t\t\t\tvar common_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"common\")[0];\r\n\r\n\t\t\t\t\tvar font_name:string = XmlUtils.readAttributeValue(info_node, \"face\");\r\n\t\t\t\t\tthis._font = <Font>AssetLibrary.getAsset(font_name);\r\n\t\t\t\t\tif(this._font==undefined){\r\n\t\t\t\t\t\tthis._font = new Font();\r\n\t\t\t\t\t\tthis._font.name=font_name;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar bold:string = XmlUtils.readAttributeValue(info_node, \"bold\");\r\n\t\t\t\t\tif(bold!=\"0\") font_name+=\"_bold\";\r\n\t\t\t\t\tvar italic:string = XmlUtils.readAttributeValue(info_node, \"italic\");\r\n\t\t\t\t\tif(italic!=\"0\") font_name+=\"_italic\";\r\n\t\t\t\t\tthis._bitmapFontTable = <BitmapFontTable> this._font.get_font_table(font_name, BitmapFontTable.assetType);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar size:string = XmlUtils.readAttributeValue(info_node, \"size\");\r\n\t\t\t\t\tthis._bitmapFontTable._init_size=parseInt(size);\r\n\r\n\t\t\t\t} catch(Error) {\r\n\t\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FNTParserState.PARSE_IMAGE:\r\n\t\t\t\tif (this._imagePath){\r\n\t\t\t\t\tthis._pAddDependency(this._imagePath, new URLRequest(this._imagePath));\r\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FNTParserState.PARSE_CHARS:\r\n\t\t\t\tvar element:Node;\r\n\t\t\t\tvar x, y, width, height, xoff, yoff, xadv, page, chnl:number;\r\n\t\t\t\tvar id:string;\r\n\t\t\t\tvar len:number = this._chars.length;\r\n\t\t\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\t\t\telement = this._chars[i];\r\n\t\t\t\t\tx = parseInt(XmlUtils.readAttributeValue(element, \"x\"));\r\n\t\t\t\t\ty = parseInt(XmlUtils.readAttributeValue(element, \"y\"));\r\n\t\t\t\t\twidth = parseInt(XmlUtils.readAttributeValue(element, \"width\"));\r\n\t\t\t\t\theight = parseInt(XmlUtils.readAttributeValue(element, \"height\"));\r\n\t\t\t\t\txoff = parseInt(XmlUtils.readAttributeValue(element, \"xoffset\"));\r\n\t\t\t\t\tyoff = parseInt(XmlUtils.readAttributeValue(element, \"yoffset\"));\r\n\t\t\t\t\txadv = parseInt(XmlUtils.readAttributeValue(element, \"xadvance\"));\r\n\t\t\t\t\tpage = parseInt(XmlUtils.readAttributeValue(element, \"page\"));\r\n\t\t\t\t\tchnl = parseInt(XmlUtils.readAttributeValue(element, \"chnl\"));\r\n\t\t\t\t\tid = XmlUtils.readAttributeValue(element, \"id\");\r\n\t\t\t\t\tthis._bitmapFontTable.setChar(id, x, y, width, height, xoff, yoff, xadv, page, chnl);\r\n\t\t\t\t}\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset>this._font, this._font.name);\r\n\t\t\t\tthis._parseState = FNTParserState.PARSE_COMPLETE;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FNTParserState.PARSE_COMPLETE:\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n}\r\n\r\n\r\nclass FNTParserState {\r\n\tpublic static PARSE_XML:number = 0;\r\n\tpublic static PARSE_IMAGE:number = 1;\r\n\tpublic static PARSE_CHARS:number = 2;\r\n\tpublic static PARSE_COMPLETE:number = 3;\r\n}",
    "import {BitmapImage2D}\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {IAsset}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {AssetLibrary}\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\r\nimport {URLLoaderDataFormat}\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {URLRequest}\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\r\nimport {ParserBase}\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\nimport {ParserUtils}\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\r\nimport {ResourceDependency}\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\r\nimport {XmlUtils}\t\t\t\tfrom \"awayjs-core/lib/utils/XmlUtils\";\r\nimport {BitmapFontTable}\t\tfrom \"awayjs-display/lib/text/BitmapFontTable\";\r\nimport {Font}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\r\nimport {TesselatedFontTable}\t\t\tfrom \"awayjs-display/lib/text/TesselatedFontTable\";\r\nimport {IFontTable}\t\t\t\t\t\tfrom \"awayjs-display/lib/text/IFontTable\";\r\n\r\nvar opentype;\r\n/**\r\n * FontParser should parse Fonts into TesselatedFontTable for usage with webGL, or just load the Font as css class for usage with canvas and no webGL\r\n */\r\nexport class FontParser extends ParserBase\r\n{\r\n\tprivate _useWebGL:boolean=false;\r\n\t/**\r\n\t * Creates a new TextureAtlasParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(useWebGL:boolean=true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\t\tthis._useWebGL=useWebGL;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\tvar supports:boolean = ((extension == \"ttf\")||(extension == \"otf\"));\r\n\t\tif(supports){\r\n\t\t\tconsole.log(\"FontParse encountered file with supported extension: = \" + extension);\r\n\t\t}\r\n\t\treturn ((extension == \"ttf\")||(extension == \"otf\"));\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\r\n\t\tconsole.log(\"ParserFont = \"+ParserUtils.toString(data, 20));\r\n\t\ttry {\r\n\t\t\t/*\r\n\t\t\tvar content:string = ParserUtils.toString(data);\r\n\t\t\tif(content.indexOf(\"font\") != -1 || content.indexOf(\"Font\") != -1){\r\n\t\t\t\tconsole.log(\"supportsData fnt\");\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\t\t\t*/\r\n\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t}\r\n\r\n\r\n\tprivate sortKeys(dict) {\r\n\t\tvar keys = [];\r\n\t\tfor (var key in dict) {\r\n\t\t\tkeys.push(key);\r\n\t\t}\r\n\t\tkeys.sort();\r\n\t\treturn keys;\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\t//console.log(\"proceed parsing = \"+this._iFileName);\r\n\r\n\t\topentype=window[\"opentype\"];\r\n\t\tif(opentype){\r\n\t\t\t//console.log(\"parsing font = \"+this._iFileName+\" / bytelength = \"+this._pGetByteData().getBytesAvailable());\r\n\t\t\tvar font_name:string=\"\";\r\n\t\t\tvar font_style_name:string=\"\";\r\n\t\t\tvar font = opentype.parse(this.data);\r\n\t\t\tvar tablename, table, property, value, fontname;\r\n\t\t\tvar head = font.tables.head;\r\n\t\t\t/*\r\n\t\t\t*/\r\n\t\t\tfor (tablename in font.tables) {\r\n\t\t\t\ttable = font.tables[tablename];\r\n\t\t\t\tif (tablename == 'name') {\r\n\t\t\t\t\tvar properties = this.sortKeys(table);\r\n\t\t\t\t\tfor (var i = 0; i < properties.length; i++) {\r\n\t\t\t\t\t\tvar property = properties[i];\r\n\t\t\t\t\t\tvar translations = table[property];\r\n\t\t\t\t\t\tvar langs = this.sortKeys(translations);\r\n\t\t\t\t\t\tfor (var j = 0; j < langs.length; j++) {\r\n\t\t\t\t\t\t\tvar lang = langs[j];\r\n\t\t\t\t\t\t\tif(property==\"fontFamily\"){\r\n\t\t\t\t\t\t\t\tfont_name=translations[lang];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(property==\"fontSubfamily\"){\r\n\t\t\t\t\t\t\t\tfont_style_name=translations[lang];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconsole.log(\"    \"+property+\": \"+lang+\" : \"+translations[lang]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(font_name==\"\"){\r\n\t\t\t\tconsole.log(\"FontParser.ts '\"+this._iFileName+\"': Could not read fontname !!!\")\r\n\t\t\t}\r\n\t\t\tif(font_style_name==\"\"){\r\n\t\t\t\tconsole.log(\"FontParser.ts '\"+this._iFileName+\"': Could not read font_style_name !!!\")\r\n\t\t\t}\r\n\r\n\t\t\tvar new_font:Font=<Font>AssetLibrary.getAsset(font_name);\r\n\t\t\tvar newfont:Boolean = false;\r\n\t\t\tif(new_font==undefined){\r\n\t\t\t\tnew_font = new Font();\r\n\t\t\t\tnewfont=true;\r\n\t\t\t}\r\n\t\t\tnew_font.name=font_name;\r\n\t\t\tvar new_font_style:TesselatedFontTable = <TesselatedFontTable>new_font.get_font_table(font_style_name, TesselatedFontTable.assetType, font);\r\n\t\t\t/*\r\n\t\t\tfor(var i=0; i<font.numGlyphs; i++){\r\n\t\t\t\tconsole.log(\"glyph: \"+i);\r\n\t\t\t\tvar glyph = font.glyphs.get(i);\r\n\t\t\t\tconsole.log(\"       glyph: \"+glyph);\r\n\t\t\t\tconsole.log(\"       glyph.name: \"+glyph.name);\r\n\t\t\t\tconsole.log(\"       glyph.unicode: \"+glyph.unicode);\r\n\t\t\t\tconsole.log(\"       glyph.unicodes: \"+glyph.unicodes.length);\r\n\t\t\t\tconsole.log(\"       glyph.advanceWidth: \"+glyph.advanceWidth);\r\n\t\t\t\tvar path = glyph.getPath();\r\n\t\t\t\tconsole.log(\"       path \"+path.commands.length);\r\n\t\t\t\tvar contours  = glyph.getContours ();\r\n\t\t\t\tconsole.log(\"       contours: \"+contours.length);\r\n\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\t\tif(document){\r\n\t\t\tvar s = document.createElement('style');\r\n\t\t\ts.type = \"text/css\";\r\n\t\t\tdocument.getElementsByTagName('head')[0].appendChild(s);\r\n\t\t\ts.style.cssText = \"@font-face {\\\r\n\t\t\t\t\tfont-family: ''\"+this._iFileName+\"';\\\r\n\t\t\t\t\tsrc: url('\"+this._iFileName+\"');\\\r\n\t\t\t\t\t};\";\r\n\t\t}\r\n\t\tthis._pFinalizeAsset(<IAsset>new_font, new_font.name);\r\n\t\treturn ParserBase.PARSING_DONE;\r\n\t}\r\n}\r\n",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\r\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\nimport {ParserUtils}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\r\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\r\nimport {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\r\n\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\r\nimport {DisplayObject}\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {Single2DTexture}\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\r\n\r\nimport {VertexClipNode}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\r\nimport {VertexAnimationSet}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\r\n\r\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\r\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\r\n\r\n/**\r\n * MD2Parser provides a parser for the MD2 data type.\r\n */\r\nexport class MD2Parser extends ParserBase\r\n{\r\n\tpublic static FPS:number /*int*/ = 6;\r\n\r\n\tprivate _clipNodes:Object = new Object();\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _parsedHeader:boolean;\r\n\tprivate _parsedUV:boolean;\r\n\tprivate _parsedFaces:boolean;\r\n\tprivate _parsedFrames:boolean;\r\n\r\n\tprivate _ident:number /*uint*/;\r\n\tprivate _version:number /*uint*/;\r\n\tprivate _skinWidth:number /*uint*/;\r\n\tprivate _skinHeight:number /*uint*/;\r\n\t//private _frameSize : number /*uint*/;\r\n\tprivate _numSkins:number /*uint*/;\r\n\tprivate _numVertices:number /*uint*/;\r\n\tprivate _numST:number /*uint*/;\r\n\tprivate _numTris:number /*uint*/;\r\n\t//private _numGlCmds : number /*uint*/;\r\n\tprivate _numFrames:number /*uint*/;\r\n\tprivate _offsetSkins:number /*uint*/;\r\n\tprivate _offsetST:number /*uint*/;\r\n\tprivate _offsetTris:number /*uint*/;\r\n\tprivate _offsetFrames:number /*uint*/;\r\n\t//private _offsetGlCmds : number /*uint*/;\r\n\tprivate _offsetEnd:number /*uint*/;\r\n\r\n\tprivate _uvIndices:Array<number>;\r\n\tprivate _indices:Array<number> /*uint*/;\r\n\tprivate _vertIndices:Array<number>;\r\n\r\n\t// the current elements being built\r\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\tprivate _firstElements:TriangleElements;\r\n\tprivate _uvs:Array<number>;\r\n\tprivate _finalUV:Array<number>;\r\n\r\n\tprivate _materialNames:Array<string>;\r\n\tprivate _textureType:string;\r\n\tprivate _ignoreTexturePath:boolean;\r\n\tprivate _sprite:Sprite;\r\n\tprivate _graphics:Graphics;\r\n\r\n\tprivate materialFinal:boolean = false;\r\n\tprivate graphicsCreated:boolean = false;\r\n\r\n\t/**\r\n\t * Creates a new MD2Parser object.\r\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\r\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\r\n\t */\r\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\t\tthis._textureType = textureType;\r\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md2\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.assets.length != 1)\r\n\t\t\treturn;\r\n\r\n\t\tvar material:MethodMaterial = new MethodMaterial(<BitmapImage2D> resourceDependency.assets[0]);\r\n\r\n\t\tif (this.materialMode >= 2)\r\n\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t//add to the content property\r\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\r\n\r\n\t\tmaterial.name = this._sprite.material.name;\r\n\t\tthis._sprite.material = material;\r\n\t\tthis._pFinalizeAsset(material);\r\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\r\n\t\tthis._pFinalizeAsset(this._sprite);\r\n\r\n\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// apply system default\r\n\t\tif (this.materialMode < 2) {\r\n\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t} else {\r\n\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\r\n\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t}\r\n\r\n\t\t//add to the content property\r\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\r\n\r\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\r\n\t\tthis._pFinalizeAsset(this._sprite);\r\n\t\tthis.materialFinal = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\r\n\t\t\t// Reset bytearray read position (which may have been\r\n\t\t\t// moved forward by the supportsData() function.)\r\n\t\t\tthis._byteData.position = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\tif (!this._parsedHeader) {\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\r\n\t\t\t\t// TODO: Create a sprite only when encountered (if it makes sense\r\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\r\n\t\t\t\tthis._sprite = new Sprite();\r\n\t\t\t\tthis._graphics = this._sprite.graphics;\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\r\n\t\t\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\r\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\r\n\r\n\t\t\t\t// Parse header and decompress body\r\n\t\t\t\tthis.parseHeader();\r\n\t\t\t\tthis.parseMaterialNames();\r\n\t\t\t} else if (!this._parsedUV) {\r\n\t\t\t\tthis.parseUV();\r\n\t\t\t} else if (!this._parsedFaces) {\r\n\t\t\t\tthis.parseFaces();\r\n\t\t\t} else if (!this._parsedFrames) {\r\n\t\t\t\tthis.parseFrames();\r\n\t\t\t} else if ((this.graphicsCreated) && (this.materialFinal)) {\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t} else if (!this.graphicsCreated) {\r\n\t\t\t\tthis.graphicsCreated = true;\r\n\t\t\t\t//create default subgraphics\r\n\t\t\t\tthis._graphics.addGraphic(this._firstElements.clone());\r\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\r\n\t\t\t\tthis._sprite.name = \"\";\r\n\t\t\t\tif (this.materialFinal) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite.graphics);\r\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number):void\r\n\t{\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads in all that MD2 Header data that is declared as private variables.\r\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\r\n\t */\r\n\tprivate parseHeader():void\r\n\t{\r\n\t\tthis._ident = this._byteData.readInt();\r\n\t\tthis._version = this._byteData.readInt();\r\n\t\tthis._skinWidth = this._byteData.readInt();\r\n\t\tthis._skinHeight = this._byteData.readInt();\r\n\t\t//skip this._frameSize\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numSkins = this._byteData.readInt();\r\n\t\tthis._numVertices = this._byteData.readInt();\r\n\t\tthis._numST = this._byteData.readInt();\r\n\t\tthis._numTris = this._byteData.readInt();\r\n\t\t//skip this._numGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numFrames = this._byteData.readInt();\r\n\t\tthis._offsetSkins = this._byteData.readInt();\r\n\t\tthis._offsetST = this._byteData.readInt();\r\n\t\tthis._offsetTris = this._byteData.readInt();\r\n\t\tthis._offsetFrames = this._byteData.readInt();\r\n\t\t//skip this._offsetGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._offsetEnd = this._byteData.readInt();\r\n\r\n\t\tthis._parsedHeader = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the file names for the materials.\r\n\t */\r\n\tprivate parseMaterialNames():void\r\n\t{\r\n\t\tvar url:string;\r\n\t\tvar name:string;\r\n\t\tvar extIndex:number /*int*/;\r\n\t\tvar slashIndex:number /*int*/;\r\n\t\tthis._materialNames = new Array<string>();\r\n\t\tthis._byteData.position = this._offsetSkins;\r\n\r\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\r\n\t\t\tname = this._byteData.readUTFBytes(64);\r\n\t\t\tname = name.replace(regExp, \"\");\r\n\t\t\textIndex = name.lastIndexOf(\".\");\r\n\t\t\tif (this._ignoreTexturePath)\r\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\r\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\r\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\r\n\t\t\t\turl = name + \".\" + this._textureType;\r\n\t\t\t} else {\r\n\t\t\t\turl = name;\r\n\t\t\t}\r\n\r\n\t\t\tthis._materialNames[i] = name;\r\n\r\n\t\t\t// only support 1 skin TODO: really?\r\n\t\t\tif (this.dependencies.length == 0)\r\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\r\n\t\t}\r\n\r\n\t\tif (this._materialNames.length > 0)\r\n\t\t\tthis._sprite.material.name = this._materialNames[0];\r\n\t\telse\r\n\t\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the uv data for the sprite.\r\n\t */\r\n\tprivate parseUV():void\r\n\t{\r\n\t\tvar j:number /*uint*/ = 0;\r\n\r\n\t\tthis._uvs = new Array<number>(this._numST*2);\r\n\t\tthis._byteData.position = this._offsetST;\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\r\n\t\t}\r\n\r\n\t\tthis._parsedUV = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses unique indices for the faces.\r\n\t */\r\n\tprivate parseFaces():void\r\n\t{\r\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\r\n\t\tthis._vertIndices = new Array<number>();\r\n\t\tthis._uvIndices = new Array<number>();\r\n\t\tthis._indices = new Array<number>() /*uint*/;\r\n\r\n\t\tthis._byteData.position = this._offsetTris;\r\n\r\n\t\tfor (i = 0; i < this._numTris; i++) {\r\n\t\t\t//collect vertex indices\r\n\t\t\ta = this._byteData.readUnsignedShort();\r\n\t\t\tb = this._byteData.readUnsignedShort();\r\n\t\t\tc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\t//collect uv indices\r\n\t\t\tta = this._byteData.readUnsignedShort();\r\n\t\t\ttb = this._byteData.readUnsignedShort();\r\n\t\t\ttc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis.addIndex(a, ta);\r\n\t\t\tthis.addIndex(b, tb);\r\n\t\t\tthis.addIndex(c, tc);\r\n\t\t}\r\n\r\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\r\n\t\tthis._finalUV = new Array<number>(len*2);\r\n\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\r\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\r\n\t\t}\r\n\r\n\t\tthis._parsedFaces = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\r\n\t * corresponding vertex and uv data in the correct location.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t */\r\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):void\r\n\t{\r\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\r\n\r\n\t\tif (index == -1) {\r\n\t\t\tthis._indices.push(this._vertIndices.length);\r\n\t\t\tthis._vertIndices.push(vertexIndex);\r\n\t\t\tthis._uvIndices.push(uvIndex);\r\n\t\t} else\r\n\t\t\tthis._indices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\r\n\t */\r\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\r\n\r\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\r\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses all the frame elements.\r\n\t */\r\n\tprivate parseFrames():void\r\n\t{\r\n\t\tvar sx:number, sy:number, sz:number;\r\n\t\tvar tx:number, ty:number, tz:number;\r\n\t\tvar graphics:Graphics;\r\n\t\tvar elements:TriangleElements;\r\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\r\n\t\tvar fvertices:Array<number>;\r\n\t\tvar tvertices:Array<number>;\r\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\r\n\t\t//var ch : number /*uint*/;\r\n\t\tvar name:string = \"\";\r\n\t\tvar prevClip:VertexClipNode = null;\r\n\r\n\t\tthis._byteData.position = this._offsetFrames;\r\n\r\n\t\tfor (i = 0; i < this._numFrames; i++) {\r\n\r\n\t\t\ttvertices = new Array<number>();\r\n\t\t\tfvertices = new Array<number>(vertLen*3);\r\n\r\n\t\t\tsx = this._byteData.readFloat();\r\n\t\t\tsy = this._byteData.readFloat();\r\n\t\t\tsz = this._byteData.readFloat();\r\n\r\n\t\t\ttx = this._byteData.readFloat();\r\n\t\t\tty = this._byteData.readFloat();\r\n\t\t\ttz = this._byteData.readFloat();\r\n\r\n\t\t\tname = this.readFrameName();\r\n\r\n\t\t\t// Note, the extra data.position++ in the for loop is there\r\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\r\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\r\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\r\n\r\n\t\t\tk = 0;\r\n\t\t\tfor (j = 0; j < vertLen; j++) {\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\r\n\t\t\t}\r\n\r\n\t\t\telements = new TriangleElements(new AttributesBuffer());\r\n\r\n\t\t\tif (this._firstElements == null)\r\n\t\t\t\tthis._firstElements = elements;\r\n\r\n\t\t\tgraphics = new Graphics();\r\n\t\t\tgraphics.addGraphic(elements);\r\n\r\n\t\t\telements.setIndices(this._indices);\r\n\t\t\telements.setPositions(fvertices);\r\n\t\t\telements.setUVs(this._finalUV);\r\n\t\t\t// cause explicit updates\r\n\t\t\telements.setNormals(null);\r\n\t\t\telements.setTangents(null);\r\n\t\t\t// turn auto updates off because they may be animated and set explicitly\r\n\t\t\telements.autoDeriveNormals = false;\r\n\t\t\telements.autoDeriveTangents = false;\r\n\r\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\r\n\r\n\t\t\tif (!clip) {\r\n\t\t\t\t// If another sequence was parsed before this one, starting\r\n\t\t\t\t// a new state means the previous one is complete and can\r\n\t\t\t\t// hence be finalized.\r\n\t\t\t\tif (prevClip) {\r\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclip = new VertexClipNode();\r\n\t\t\t\tclip.name = name;\r\n\t\t\t\tclip.stitchFinalFrame = true;\r\n\r\n\t\t\t\tthis._clipNodes[name] = clip;\r\n\r\n\t\t\t\tprevClip = clip;\r\n\t\t\t}\r\n\t\t\tclip.addFrame(graphics, 1000/MD2Parser.FPS);\r\n\t\t}\r\n\r\n\t\t// Finalize the last state\r\n\t\tif (prevClip) {\r\n\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t}\r\n\r\n\t\t// Force this._pFinalizeAsset() to decide name\r\n\t\tthis._pFinalizeAsset(this._animationSet);\r\n\r\n\t\tthis._parsedFrames = true;\r\n\t}\r\n\r\n\tprivate readFrameName():string\r\n\t{\r\n\t\tvar name:string = \"\";\r\n\t\tvar k:number /*uint*/ = 0;\r\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\r\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\r\n\r\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\r\n\t\t\t\tname += String.fromCharCode(ch);\r\n\r\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\r\n\t\t\t\tk++;\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\n\r\nimport {JointPose}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\r\nimport {SkeletonClipNode}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\r\n\r\n/**\r\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nexport class MD5AnimParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\r\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\r\n\r\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\r\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\r\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\r\n\tpublic static FRAME_TOKEN:string = \"frame\";\r\n\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _frameRate:number /*int*/;\r\n\tprivate _numFrames:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numAnimatedComponents:number /*int*/;\r\n\r\n\tprivate _hierarchy:Array<HierarchyData>;\r\n\tprivate _bounds:Array<BoundsData>;\r\n\tprivate _frameData:Array<FrameData>;\r\n\tprivate _baseFrameData:Array<BaseFrameData>;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\tprivate _clip:SkeletonClipNode;\r\n\r\n\t/**\r\n\t * Creates a new MD5AnimParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\t\tvar t1:Quaternion = new Quaternion();\r\n\t\tvar t2:Quaternion = new Quaternion();\r\n\r\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\r\n\r\n\t\tthis._rotationQuat.multiply(t2, t1);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tthis._rotationQuat.multiply(t2, t1);\r\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5anim\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"\":\r\n\t\t\t\t\t// can occur at the end of a file\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\r\n\t\t\t\t\tthis._numFrames = this.getNextInt();\r\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\r\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\r\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\r\n\t\t\t\t\tthis._frameRate = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\r\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\r\n\t\t\t\t\tthis.parseHierarchy();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\r\n\t\t\t\t\tthis.parseBounds();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseBaseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis._clip = new SkeletonClipNode();\r\n\t\t\t\tthis.translateClip();\r\n\t\t\t\tthis._pFinalizeAsset(this._clip);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts all key frame data to an SkinnedAnimationSequence.\r\n\t */\r\n\tprivate translateClip():void\r\n\t{\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\r\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a single key frame data to a SkeletonPose.\r\n\t * @param frameData The actual frame data.\r\n\t * @return A SkeletonPose containing the frame data's pose.\r\n\t */\r\n\tprivate translatePose(frameData:FrameData):SkeletonPose\r\n\t{\r\n\t\tvar hierarchy:HierarchyData;\r\n\t\tvar pose:JointPose;\r\n\t\tvar base:BaseFrameData;\r\n\t\tvar flags:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar translate:Vector3D = new Vector3D();\r\n\t\tvar orientation:Quaternion = new Quaternion();\r\n\t\tvar components:Array<number> = frameData.components;\r\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\r\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\r\n\t\t\tj = 0;\r\n\t\t\tpose = new JointPose();\r\n\t\t\thierarchy = this._hierarchy[i];\r\n\t\t\tbase = this._baseFrameData[i];\r\n\t\t\tflags = hierarchy.flags;\r\n\t\t\ttranslate.x = base.position.x;\r\n\t\t\ttranslate.y = base.position.y;\r\n\t\t\ttranslate.z = base.position.z;\r\n\t\t\torientation.x = base.orientation.x;\r\n\t\t\torientation.y = base.orientation.y;\r\n\t\t\torientation.z = base.orientation.z;\r\n\r\n\t\t\tif (flags & 1)\r\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 2)\r\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 4)\r\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 8)\r\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 16)\r\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 32)\r\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\r\n\r\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\r\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\r\n\r\n\t\t\tif (hierarchy.parentIndex < 0) {\r\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\r\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\r\n\t\t\t} else {\r\n\t\t\t\tpose.orientation.copyFrom(orientation);\r\n\t\t\t\tpose.translation.x = translate.x;\r\n\t\t\t\tpose.translation.y = translate.y;\r\n\t\t\t\tpose.translation.z = translate.z;\r\n\t\t\t}\r\n\t\t\tpose.orientation.y = -pose.orientation.y;\r\n\t\t\tpose.orientation.z = -pose.orientation.z;\r\n\t\t\tpose.translation.x = -pose.translation.x;\r\n\r\n\t\t\tjointPoses[i] = pose;\r\n\t\t}\r\n\r\n\t\treturn skelPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's hierarchy data.\r\n\t */\r\n\tprivate parseHierarchy():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:HierarchyData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new HierarchyData();\r\n\t\t\tdata.name = this.parseLiteralstring();\r\n\t\t\tdata.parentIndex = this.getNextInt();\r\n\t\t\tdata.flags = this.getNextInt();\r\n\t\t\tdata.startIndex = this.getNextInt();\r\n\t\t\tthis._hierarchy[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses frame bounds.\r\n\t */\r\n\tprivate parseBounds():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BoundsData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BoundsData();\r\n\t\t\tdata.min = this.parseVector3D();\r\n\t\t\tdata.max = this.parseVector3D();\r\n\t\t\tthis._bounds[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the base frame.\r\n\t */\r\n\tprivate parseBaseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BaseFrameData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BaseFrameData();\r\n\t\t\tdata.position = this.parseVector3D();\r\n\t\t\tdata.orientation = this.parseQuaternion();\r\n\t\t\tthis._baseFrameData[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single frame.\r\n\t */\r\n\tprivate parseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:FrameData;\r\n\t\tvar token:string;\r\n\t\tvar frameIndex:number /*int*/;\r\n\r\n\t\tframeIndex = this.getNextInt();\r\n\r\n\t\ttoken = this.getNextToken();\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new FrameData();\r\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\r\n\r\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\r\n\t\t\t\tdata.components[i] = this.getNextNumber();\r\n\r\n\t\t\tthis._frameData[frameIndex] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex == this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = this.getNextNumber();\r\n\t\tquat.z = this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn quat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport class BaseFrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic position:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic orientation:Quaternion;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class BoundsData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic min:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic max:Vector3D;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class FrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic index:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic components:Array<number>;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class HierarchyData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic name:string;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic parentIndex:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic flags:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic startIndex:number /*int*/;\r\n}",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\n\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\n\r\nimport {SkeletonAnimationSet}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\r\nimport {SkeletonJoint}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\r\n\r\n// todo: create animation system, parse skeleton\r\n\r\n/**\r\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nexport class MD5MeshParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\tpublic static JOINTS_TOKEN:string = \"joints\";\r\n\tpublic static MESH_TOKEN:string = \"mesh\";\r\n\r\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\r\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\r\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\r\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\r\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\r\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\r\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numMeshes:number /*int*/;\r\n\r\n\tprivate _sprite:Sprite;\r\n\tprivate _shaders:Array<string>;\r\n\r\n\tprivate _maxJointCount:number /*int*/;\r\n\tprivate _elementsData:Array<ElementsData>;\r\n\tprivate _bindPoses:Array<Matrix3D>;\r\n\tprivate _graphics:Graphics;\r\n\r\n\tprivate _skeleton:Skeleton;\r\n\tprivate _animationSet:SkeletonAnimationSet;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\r\n\t/**\r\n\t * Creates a new MD5MeshParser object.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\r\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tvar quat:Quaternion = new Quaternion();\r\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5sprite\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\r\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\r\n\t\t\t\t\tthis.parseJoints();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\r\n\t\t\t\t\tthis.parseMesh();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis.calculateMaxJointCount();\r\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\r\n\r\n\t\t\t\tthis._sprite = new Sprite();\r\n\t\t\t\tthis._graphics = this._sprite.graphics;\r\n\r\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._elementsData.length; ++i)\r\n\t\t\t\t\tthis._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\r\n\r\n\t\t\t\t//_graphics.animation = _animation;\r\n\t\t\t\t//\t\t\t\t\t_sprite.animationController = _animationController;\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(this._graphics);\r\n\t\t\t\tthis._pFinalizeAsset(this._sprite);\r\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\r\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number):void\r\n\t{\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\t}\r\n\r\n\tprivate calculateMaxJointCount():void\r\n\t{\r\n\t\tthis._maxJointCount = 0;\r\n\r\n\t\tvar numElementsData:number /*int*/ = this._elementsData.length;\r\n\t\tfor (var i:number /*int*/ = 0; i < numElementsData; ++i) {\r\n\t\t\tvar elementsData:ElementsData = this._elementsData[i];\r\n\t\t\tvar positionData:Array<PositionData> = elementsData.positionData;\r\n\t\t\tvar numVerts:number /*int*/ = positionData.length;\r\n\r\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\r\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\r\n\t\t\t\tvar totalJoints:number /*int*/ = positionData[j].countWeight - zeroWeights;\r\n\t\t\t\tif (totalJoints > this._maxJointCount)\r\n\t\t\t\t\tthis._maxJointCount = totalJoints;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate countZeroWeightJoints(position:PositionData, weights:Array<JointData>):number /*int*/\r\n\t{\r\n\t\tvar start:number /*int*/ = position.startWeight;\r\n\t\tvar end:number /*int*/ = position.startWeight + position.countWeight;\r\n\t\tvar count:number /*int*/ = 0;\r\n\t\tvar weight:number;\r\n\r\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\r\n\t\t\tweight = weights[i].bias;\r\n\t\t\tif (weight == 0)\r\n\t\t\t\t++count;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's joints.\r\n\t */\r\n\tprivate parseJoints():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar quat:Quaternion;\r\n\t\tvar i:number /*int*/ = 0;\r\n\t\tvar token:string = this.getNextToken();\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tthis._skeleton = new Skeleton();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.name = this.parseLiteralstring();\r\n\t\t\tjoint.parentIndex = this.getNextInt();\r\n\t\t\tpos = this.parseVector3D();\r\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\r\n\t\t\tquat = this.parseQuaternion();\r\n\r\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\r\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\r\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\r\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\r\n\t\t\tinv.invert();\r\n\t\t\tjoint.inverseBindPose = inv.rawData;\r\n\r\n\t\t\tthis._skeleton.joints[i++] = joint;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the mesh graphics.\r\n\t */\r\n\tprivate parseMesh():void\r\n\t{\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar ch:string;\r\n\t\tvar positionData:Array<PositionData>;\r\n\t\tvar weights:Array<JointData>;\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tif (this._shaders == null)\r\n\t\t\tthis._shaders = new Array<string>();\r\n\r\n\t\twhile (ch != \"}\") {\r\n\t\t\tch = this.getNextToken();\r\n\t\t\tswitch (ch) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\r\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\r\n\t\t\t\t\tpositionData = new Array<PositionData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\r\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\r\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\r\n\t\t\t\t\tthis.parseVertex(positionData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\r\n\t\t\t\t\tthis.parseTri(indices);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\r\n\t\t\t\t\tthis.parseJoint(weights);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._elementsData == null)\r\n\t\t\tthis._elementsData = new Array<ElementsData>();\r\n\r\n\t\tvar i:number /*uint*/ = this._elementsData.length;\r\n\t\tthis._elementsData[i] = new ElementsData();\r\n\t\tthis._elementsData[i].positionData = positionData;\r\n\t\tthis._elementsData[i].weightData = weights;\r\n\t\tthis._elementsData[i].indices = indices;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the sprite data to a SkinnedSub instance.\r\n\t * @param positionData The sprite's positions.\r\n\t * @param weights The joint weights per position.\r\n\t * @param indices The indices for the faces.\r\n\t * @return A TriangleElements instance containing all elements data for the current sprite.\r\n\t */\r\n\tprivate translateElements(positionData:Array<PositionData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleElements\r\n\t{\r\n\t\tvar len:number /*int*/ = positionData.length;\r\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\r\n\t\tvar position:PositionData;\r\n\t\tvar weight:JointData;\r\n\t\tvar bindPose:Matrix3D;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\r\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\r\n\t\tvar positions:Array<number> = new Array<number>(len*3);\r\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar l:number /*int*/ = 0;\r\n\t\tvar nonZeroWeights:number /*int*/;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\r\n\t\t\tposition = positionData[i];\r\n\t\t\tv1 = position.index*3;\r\n\t\t\tv2 = v1 + 1;\r\n\t\t\tv3 = v1 + 2;\r\n\t\t\tpositions[v1] = positions[v2] = positions[v3] = 0;\r\n\r\n\t\t\tnonZeroWeights = 0;\r\n\t\t\tfor (var j:number /*int*/ = 0; j < position.countWeight; ++j) {\r\n\t\t\t\tweight = weights[position.startWeight + j];\r\n\t\t\t\tif (weight.bias > 0) {\r\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\r\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\r\n\t\t\t\t\tpositions[v1] += pos.x*weight.bias;\r\n\t\t\t\t\tpositions[v2] += pos.y*weight.bias;\r\n\t\t\t\t\tpositions[v3] += pos.z*weight.bias;\r\n\r\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\r\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\r\n\t\t\t\t\tjointWeights[l++] = weight.bias;\r\n\t\t\t\t\t++nonZeroWeights;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\r\n\t\t\t\tjointIndices[l] = 0;\r\n\t\t\t\tjointWeights[l++] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tv1 = position.index << 1;\r\n\t\t\tuvs[v1++] = position.s;\r\n\t\t\tuvs[v1] = position.t;\r\n\t\t}\r\n\r\n\t\telements.jointsPerVertex = this._maxJointCount;\r\n\t\telements.setIndices(indices);\r\n\t\telements.setPositions(positions);\r\n\t\telements.setUVs(uvs);\r\n\t\telements.setJointIndices(jointIndices);\r\n\t\telements.setJointWeights(jointWeights);\r\n\t\t// cause explicit updates\r\n\t\telements.setNormals(null);\r\n\t\telements.setTangents(null);\r\n\t\t// turn auto updates off because they may be animated and set explicitly\r\n\t\telements.autoDeriveTangents = false;\r\n\t\telements.autoDeriveNormals = false;\r\n\r\n\t\treturn elements;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve the next triplet of position indices that form a face.\r\n\t * @param indices The index list in which to store the read data.\r\n\t */\r\n\tprivate parseTri(indices:Array<number> /*uint*/):void\r\n\t{\r\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\r\n\t\tindices[index] = this.getNextInt();\r\n\t\tindices[index + 1] = this.getNextInt();\r\n\t\tindices[index + 2] = this.getNextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a new joint data set for a single joint.\r\n\t * @param weights the target list to contain the weight data.\r\n\t */\r\n\tprivate parseJoint(weights:Array<JointData>):void\r\n\t{\r\n\t\tvar weight:JointData = new JointData();\r\n\t\tweight.index = this.getNextInt();\r\n\t\tweight.joint = this.getNextInt();\r\n\t\tweight.bias = this.getNextNumber();\r\n\t\tweight.pos = this.parseVector3D();\r\n\t\tweights[weight.index] = weight;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the data for a single position.\r\n\t * @param positionData The list to contain the position data.\r\n\t */\r\n\tprivate parseVertex(positionData:Array<PositionData>):void\r\n\t{\r\n\t\tvar position:PositionData = new PositionData();\r\n\t\tposition.index = this.getNextInt();\r\n\t\tthis.parseUV(position);\r\n\t\tposition.startWeight = this.getNextInt();\r\n\t\tposition.countWeight = this.getNextInt();\r\n\t\t//\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\r\n\t\tpositionData[position.index] = position;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinate.\r\n\t * @param positionData The positionData to contain the UV coordinates.\r\n\t */\r\n\tprivate parseUV(positionData:PositionData):void\r\n\t{\r\n\t\tvar ch:string = this.getNextToken();\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tpositionData.s = this.getNextNumber();\r\n\t\tpositionData.t = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex >= this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = -this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = -this.getNextNumber();\r\n\t\tquat.z = -this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\tvar rotQuat:Quaternion = new Quaternion();\r\n\t\trotQuat.multiply(this._rotationQuat, quat);\r\n\t\treturn rotQuat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\n\r\nexport class PositionData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic s:number;\r\n\tpublic t:number;\r\n\tpublic startWeight:number /*int*/;\r\n\tpublic countWeight:number /*int*/;\r\n}\r\n\r\nexport class JointData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic joint:number /*int*/;\r\n\tpublic bias:number;\r\n\tpublic pos:Vector3D;\r\n}\r\n\r\nexport class ElementsData\r\n{\r\n\tpublic positionData:Array<PositionData>;\r\n\tpublic weightData:Array<JointData>;\r\n\tpublic indices:Array<number> /*uint*/;\r\n}",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\r\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\nimport {ParserUtils}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\r\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\r\nimport {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\r\n\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {MaterialBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\r\nimport {Single2DTexture}\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\r\n\r\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\r\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\r\n\r\n/**\r\n * Max3DSParser provides a parser for the 3ds data type.\r\n */\r\nexport class Max3DSParser extends ParserBase\r\n{\r\n\tprivate _byteData:ByteArray;\r\n\r\n\tprivate _textures:Object;\r\n\tprivate _materials:Object;\r\n\tprivate _unfinalized_objects:Object;\r\n\r\n\tprivate _cur_obj_end:number;\r\n\tprivate _cur_obj:ObjectVO;\r\n\r\n\tprivate _cur_mat_end:number;\r\n\tprivate _cur_mat:MaterialVO;\r\n\tprivate _useSmoothingGroups:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>Max3DSParser</code> object.\r\n\t *\r\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\r\n\t */\r\n\tconstructor(useSmoothingGroups:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"3ds\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar ba:ByteArray;\r\n\r\n\t\tba = ParserUtils.toByteArray(data);\r\n\t\tif (ba) {\r\n\t\t\tba.position = 0;\r\n\t\t\tif (ba.readShort() == 0x4d4d)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\r\n\t\t\t\tvar tex:TextureVO;\r\n\r\n\t\t\t\ttex = this._textures[resourceDependency.id];\r\n\t\t\t\ttex.texture = new Single2DTexture(<BitmapImage2D> asset);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// TODO: Implement\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._byteData) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._byteData.position = 0;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\tthis._textures = {};\r\n\t\t\tthis._materials = {};\r\n\t\t\tthis._unfinalized_objects = {};\r\n\t\t}\r\n\r\n\t\t// TODO: With this construct, the loop will run no-op for as long\r\n\t\t// as there is time once file has finished reading. Consider a nice\r\n\t\t// way to stop loop when byte array is empty, without putting it in\r\n\t\t// the while-conditional, which will prevent finalizations from\r\n\t\t// happening after the last chunk.\r\n\t\twhile (this._pHasTime()) {\r\n\r\n\t\t\t// If we are currently working on an object, and the most recent chunk was\r\n\t\t\t// the last one in that object, finalize the current object.\r\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\r\n\t\t\t\tthis.finalizeCurrentMaterial();\r\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\r\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\r\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\r\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\r\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\r\n\t\t\t\tthis._cur_obj = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\r\n\t\t\t\tvar cid:number /*uint*/;\r\n\t\t\t\tvar len:number /*uint*/;\r\n\t\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\t\tswitch (cid) {\r\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\r\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\r\n\t\t\t\t\tcase 0xB000: // KEYF3DS\r\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\r\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\r\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\r\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\r\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\r\n\t\t\t\t\t\tthis._cur_mat_end = end;\r\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\r\n\t\t\t\t\t\tthis._cur_obj_end = end;\r\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\r\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\r\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\r\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\r\n\t\t\t\t\t\tthis._cur_obj.type = Sprite.assetType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\r\n\t\t\t\t\t\tthis.parseVertexList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\r\n\t\t\t\t\t\tthis.parseFaceList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\r\n\t\t\t\t\t\tthis.parseUVList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4130: // Face materials\r\n\t\t\t\t\t\tthis.parseFaceMaterialList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4160: // Transform\r\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\r\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4150: // Smoothing groups\r\n\t\t\t\t\t\tthis.parseSmoothingGroups();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Skip this (unknown) chunk\r\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pause parsing if there were any dependencies found during this\r\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\r\n\t\t\t\t// retrieved at this time.)\r\n\t\t\t\tif (this.dependencies.length) {\r\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// More parsing is required if the entire byte array has not yet\r\n\t\t// been read, or if there is a currently non-finalized object in\r\n\t\t// the pipeline.\r\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\r\n\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t} else {\r\n\t\t\tvar name:string;\r\n\r\n\t\t\t// Finalize any remaining objects before ending.\r\n\t\t\tfor (name in this._unfinalized_objects) {\r\n\t\t\t\tvar obj:DisplayObjectContainer;\r\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\r\n\t\t\t\tif (obj) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number):void\r\n\t{\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\t}\r\n\r\n\tprivate parseMaterial():MaterialVO\r\n\t{\r\n\t\tvar mat:MaterialVO;\r\n\r\n\t\tmat = new MaterialVO();\r\n\r\n\t\twhile (this._byteData.position < this._cur_mat_end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA000: // Material name\r\n\t\t\t\t\tmat.name = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA010: // Ambient color\r\n\t\t\t\t\tmat.ambientColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA020: // Diffuse color\r\n\t\t\t\t\tmat.diffuseColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA030: // Specular color\r\n\t\t\t\t\tmat.specularColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\r\n\t\t\t\t\tmat.twoSided = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA200: // Main (color) texture\r\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA204: // Specular map\r\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position = end;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\t}\r\n\r\n\tprivate parseTexture(end:number /*uint*/):TextureVO\r\n\t{\r\n\t\tvar tex:TextureVO;\r\n\r\n\t\ttex = new TextureVO();\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA300:\r\n\t\t\t\t\ttex.url = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Skip this unknown texture sub-chunk\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._textures[tex.url] = tex;\r\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\r\n\r\n\t\treturn tex;\r\n\t}\r\n\r\n\tprivate parseVertexList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.verts.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\tx = this._byteData.readFloat();\r\n\t\t\ty = this._byteData.readFloat();\r\n\t\t\tz = this._byteData.readFloat();\r\n\r\n\t\t\tthis._cur_obj.verts[i++] = x;\r\n\t\t\tthis._cur_obj.verts[i++] = z;\r\n\t\t\tthis._cur_obj.verts[i++] = y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.indices.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\r\n\r\n\t\t\ti0 = this._byteData.readUnsignedShort();\r\n\t\t\ti1 = this._byteData.readUnsignedShort();\r\n\t\t\ti2 = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis._cur_obj.indices[i++] = i0;\r\n\t\t\tthis._cur_obj.indices[i++] = i2;\r\n\t\t\tthis._cur_obj.indices[i++] = i1;\r\n\r\n\t\t\t// Skip \"face info\", irrelevant in Away3D\r\n\t\t\tthis._byteData.position += 2;\r\n\t\t}\r\n\r\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\r\n\t}\r\n\r\n\tprivate parseSmoothingGroups():void\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\r\n\t\tvar i:number /*uint*/ = 0;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseUVList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.uvs.length;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\r\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceMaterialList():void\r\n\t{\r\n\t\tvar mat:string;\r\n\t\tvar count:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar faces:Array<number> /*uint*/;\r\n\r\n\t\tmat = this.readNulTermstring();\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\r\n\t\tfaces = new Array<number>(count) /*uint*/;\r\n\t\ti = 0;\r\n\t\twhile (i < faces.length)\r\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\r\n\r\n\t\tthis._cur_obj.materials.push(mat);\r\n\t\tthis._cur_obj.materialFaces[mat] = faces;\r\n\t}\r\n\r\n\tprivate parseObjectAnimation(end:number):void\r\n\t{\r\n\t\tvar vo:ObjectVO;\r\n\t\tvar obj:DisplayObjectContainer;\r\n\t\tvar pivot:Vector3D;\r\n\t\tvar name:string;\r\n\t\tvar hier:number /*uint*/;\r\n\r\n\t\t// Pivot defaults to origin\r\n\t\tpivot = new Vector3D;\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xb010: // Name/hierarchy\r\n\t\t\t\t\tname = this.readNulTermstring();\r\n\t\t\t\t\tthis._byteData.position += 4;\r\n\t\t\t\t\thier = this._byteData.readShort();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xb013: // Pivot\r\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\r\n\t\t// and will be ignored in this version of the parser\r\n\t\t// TODO: Implement containers in 3DS parser.\r\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\r\n\t\t\tvo = this._unfinalized_objects[name];\r\n\t\t\tobj = this.constructObject(vo, pivot);\r\n\r\n\t\t\tif (obj) {\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tdelete this._unfinalized_objects[name];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\r\n\t{\r\n\t\tif (obj.type == Sprite.assetType) {\r\n\t\t\tvar i:number /*uint*/;\r\n\t\t\tvar sub:TriangleElements;\r\n\t\t\tvar graphics:Graphics;\r\n\t\t\tvar mat:MaterialBase;\r\n\t\t\tvar sprite:Sprite;\r\n\t\t\tvar mtx:Matrix3D;\r\n\t\t\tvar vertices:Array<VertexVO>;\r\n\t\t\tvar faces:Array<FaceVO>;\r\n\r\n\t\t\tif (obj.materials.length > 1)\r\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\r\n\r\n\t\t\t// Ignore empty objects\r\n\t\t\tif (!obj.indices || obj.indices.length == 0)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\r\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\r\n\r\n\t\t\tthis.prepareData(vertices, faces, obj);\r\n\r\n\t\t\tif (this._useSmoothingGroups)\r\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\r\n\r\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\r\n\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\r\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\r\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\r\n\t\t\t}\r\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\r\n\r\n\t\t\tfor (i = 0; i < faces.length; i++) {\r\n\t\t\t\tobj.indices[i*3] = faces[i].a;\r\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\r\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\r\n\t\t\t}\r\n\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\r\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\r\n\t\t\t\t// will be nonsense and should be skipped.\r\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\r\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\r\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (obj.materials.length > 0) {\r\n\t\t\t\tvar mname:string;\r\n\t\t\t\tmname = obj.materials[0];\r\n\t\t\t\tmat = this._materials[mname].material;\r\n\t\t\t}\r\n\r\n\t\t\t// Build sprite and return it\r\n\t\t\tsprite = new Sprite(mat);\r\n\t\t\tsprite.transform.matrix3D = new Matrix3D(obj.transform);\r\n\r\n\t\t\tgraphics = sprite.graphics;\r\n\r\n\t\t\t// Construct elements (potentially splitting buffers)\r\n\t\t\t// and add them to graphics.\r\n\t\t\tsub = new TriangleElements(new AttributesBuffer());\r\n\t\t\tsub.setIndices(obj.indices);\r\n\t\t\tsub.setPositions(obj.verts);\r\n\t\t\tsub.setUVs(obj.uvs);\r\n\r\n\t\t\tgraphics.addGraphic(sub);\r\n\r\n\t\t\t// Apply pivot translation to graphics if a pivot was\r\n\t\t\t// found while parsing the keyframe chunk earlier.\r\n\t\t\tif (pivot) {\r\n\t\t\t\tif (obj.transform) {\r\n\t\t\t\t\t// If a transform was found while parsing the\r\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\r\n\t\t\t\t\tmtx = new Matrix3D(obj.transform);\r\n\t\t\t\t\tmtx.rawData[12] = 0;\r\n\t\t\t\t\tmtx.rawData[13] = 0;\r\n\t\t\t\t\tmtx.rawData[14] = 0;\r\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpivot.scaleBy(-1);\r\n\r\n\t\t\t\tmtx = new Matrix3D();\r\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\r\n\t\t\t\tgraphics.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Apply transformation to graphics if a transformation\r\n\t\t\t// was found while parsing the object chunk earlier.\r\n\t\t\tif (obj.transform) {\r\n\t\t\t\tmtx = new Matrix3D(obj.transform);\r\n\t\t\t\tmtx.invert();\r\n\t\t\t\tgraphics.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Final transform applied to graphics. Finalize the graphics,\r\n\t\t\t// which will no longer be modified after this point.\r\n\t\t\tthis._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\r\n\r\n\t\t\treturn sprite;\r\n\t\t}\r\n\r\n\t\t// If reached, unknown\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\r\n\t{\r\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar len:number /*int*/ = obj.verts.length;\r\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\r\n\t\t\tvar v:VertexVO = new VertexVO;\r\n\t\t\tv.x = obj.verts[i++];\r\n\t\t\tv.y = obj.verts[i++];\r\n\t\t\tv.z = obj.verts[i++];\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\tv.u = obj.uvs[j++];\r\n\t\t\t\tv.v = obj.uvs[j++];\r\n\t\t\t}\r\n\t\t\tvertices[k++] = v;\r\n\t\t}\r\n\t\tlen = obj.indices.length;\r\n\t\tfor (i = 0, k = 0; i < len;) {\r\n\t\t\tvar f:FaceVO = new FaceVO();\r\n\t\t\tf.a = obj.indices[i++];\r\n\t\t\tf.b = obj.indices[i++];\r\n\t\t\tf.c = obj.indices[i++];\r\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\r\n\t\t\tfaces[k++] = f;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\r\n\t{\r\n\t\t// clone vertices according to following rule:\r\n\t\t// clone if vertex's in faces from groups 1+2 and 3\r\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\r\n\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar l:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar numVerts:number /*uint*/ = vertices.length;\r\n\t\tvar numFaces:number /*uint*/ = faces.length;\r\n\r\n\t\t// extract groups data for vertices\r\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++)\r\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tvar face:FaceVO = faces[i];\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\r\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\r\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\r\n\t\t\t\t\tif ((group & groups[k]) > 0) {\r\n\t\t\t\t\t\tgroup |= groups[k];\r\n\t\t\t\t\t\tgroups.splice(k, 1);\r\n\t\t\t\t\t\tk = groups.length - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// clone vertices\r\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++) {\r\n\t\t\tif ((len = vGroups[i].length) < 1)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\r\n\t\t\tvClones[i] = clones;\r\n\t\t\tclones[0] = i;\r\n\t\t\tvar v0:VertexVO = vertices[i];\r\n\t\t\tfor (j = 1; j < len; j++) {\r\n\t\t\t\tvar v1:VertexVO = new VertexVO;\r\n\t\t\t\tv1.x = v0.x;\r\n\t\t\t\tv1.y = v0.y;\r\n\t\t\t\tv1.z = v0.z;\r\n\t\t\t\tv1.u = v0.u;\r\n\t\t\t\tv1.v = v0.v;\r\n\t\t\t\tclones[j] = vertices.length;\r\n\t\t\t\tvertices.push(v1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tnumVerts = vertices.length;\r\n\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tface = faces[i];\r\n\t\t\tgroup = face.smoothGroup;\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\r\n\t\t\t\tgroups = vGroups[k];\r\n\t\t\t\tlen = groups.length;\r\n\t\t\t\tclones = vClones[k];\r\n\t\t\t\tfor (l = 0; l < len; l++) {\r\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\r\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\r\n\t\t\t\t\t\tif (group == 0) {\r\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\r\n\t\t\t\t\t\t\tgroups.splice(l, 1);\r\n\t\t\t\t\t\t\tclones.splice(l, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (j == 0)\r\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\r\n\t\t\t\t\t\t\tface.b = index; else\r\n\t\t\t\t\t\t\tface.c = index;\r\n\t\t\t\t\t\tl = len;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate finalizeCurrentMaterial():void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\r\n\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\r\n\r\n\t\tif (this._cur_mat.colorMap)\r\n\t\t\tmat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture();\r\n\r\n\t\tmat.diffuseMethod.color = this._cur_mat.diffuseColor;\r\n\t\tmat.specularMethod.color = this._cur_mat.specularColor;\r\n\r\n\t\tif (this.materialMode >= 2)\r\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\tmat.bothSides = this._cur_mat.twoSided;\r\n\r\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\r\n\r\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\r\n\t\tthis._cur_mat.material = mat;\r\n\r\n\t\tthis._cur_mat = null;\r\n\t}\r\n\r\n\tprivate readNulTermstring():string\r\n\t{\r\n\t\tvar chr:number /*int*/;\r\n\t\tvar str:string = \"\";\r\n\r\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\r\n\t\t\tstr += String.fromCharCode(chr);\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\tprivate readTransform():Float32Array\r\n\t{\r\n\t\tvar data:Float32Array = new Float32Array(16);\r\n\r\n\t\t// X axis\r\n\t\tdata[0] = this._byteData.readFloat(); // X\r\n\t\tdata[2] = this._byteData.readFloat(); // Z\r\n\t\tdata[1] = this._byteData.readFloat(); // Y\r\n\t\tdata[3] = 0;\r\n\r\n\t\t// Z axis\r\n\t\tdata[8] = this._byteData.readFloat(); // X\r\n\t\tdata[10] = this._byteData.readFloat(); // Z\r\n\t\tdata[9] = this._byteData.readFloat(); // Y\r\n\t\tdata[11] = 0;\r\n\r\n\t\t// Y Axis\r\n\t\tdata[4] = this._byteData.readFloat(); // X\r\n\t\tdata[6] = this._byteData.readFloat(); // Z\r\n\t\tdata[5] = this._byteData.readFloat(); // Y\r\n\t\tdata[7] = 0;\r\n\r\n\t\t// Translation\r\n\t\tdata[12] = this._byteData.readFloat(); // X\r\n\t\tdata[14] = this._byteData.readFloat(); // Z\r\n\t\tdata[13] = this._byteData.readFloat(); // Y\r\n\t\tdata[15] = 1;\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate readColor():number /*int*/\r\n\t{\r\n\t\tvar cid:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\r\n\r\n\t\tcid = this._byteData.readUnsignedShort();\r\n\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\tswitch (cid) {\r\n\t\t\tcase 0x0010: // Floats\r\n\t\t\t\tr = this._byteData.readFloat()*255;\r\n\t\t\t\tg = this._byteData.readFloat()*255;\r\n\t\t\t\tb = this._byteData.readFloat()*255;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x0011: // 24-bit color\r\n\t\t\t\tr = this._byteData.readUnsignedByte();\r\n\t\t\t\tg = this._byteData.readUnsignedByte();\r\n\t\t\t\tb = this._byteData.readUnsignedByte();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (r << 16) | (g << 8) | b;\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class FaceVO\r\n{\r\n\tpublic a:number /*int*/;\r\n\tpublic b:number /*int*/;\r\n\tpublic c:number /*int*/;\r\n\tpublic smoothGroup:number /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class MaterialVO\r\n{\r\n\tpublic name:string;\r\n\tpublic ambientColor:number /*int*/;\r\n\tpublic diffuseColor:number /*int*/;\r\n\tpublic specularColor:number /*int*/;\r\n\tpublic twoSided:boolean;\r\n\tpublic colorMap:TextureVO;\r\n\tpublic specularMap:TextureVO;\r\n\tpublic material:MaterialBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class ObjectVO\r\n{\r\n\tpublic name:string;\r\n\tpublic type:string;\r\n\tpublic pivotX:number;\r\n\tpublic pivotY:number;\r\n\tpublic pivotZ:number;\r\n\tpublic transform:Float32Array;\r\n\tpublic verts:Array<number>;\r\n\tpublic indices:Array<number> /*int*/;\r\n\tpublic uvs:Array<number>;\r\n\tpublic materialFaces:Object;\r\n\tpublic materials:Array<string>;\r\n\tpublic smoothingGroups:Array<number> /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class TextureVO\r\n{\r\n\tpublic url:string;\r\n\tpublic texture:Single2DTexture;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class VertexVO\r\n{\r\n\tpublic x:number;\r\n\tpublic y:number;\r\n\tpublic z:number;\r\n\tpublic u:number;\r\n\tpublic v:number;\r\n\tpublic normal:Vector3D;\r\n\tpublic tangent:Vector3D;\r\n}",
    "import {Sampler2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\r\nimport {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\r\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\r\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\r\nimport {ParserUtils}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\r\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\r\n\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {MaterialBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\r\nimport {Single2DTexture}\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\r\n\r\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\r\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\r\nimport {SpecularBasicMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\";\r\n\r\n/**\r\n * OBJParser provides a parser for the OBJ data type.\r\n */\r\nexport class OBJParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _charIndex:number;\r\n\tprivate _oldIndex:number;\r\n\tprivate _stringLength:number;\r\n\tprivate _currentObject:ObjectGroup;\r\n\tprivate _currentGroup:Group;\r\n\tprivate _currentMaterialGroup:MaterialGroup;\r\n\tprivate _objects:Array<ObjectGroup>;\r\n\tprivate _materialIDs:string[];\r\n\tprivate _materialLoaded:Array<LoadedMaterial>;\r\n\tprivate _materialSpecularData:Array<SpecularData>;\r\n\tprivate _sprites:Array<Sprite>;\r\n\tprivate _lastMtlID:string;\r\n\tprivate _objectIndex:number;\r\n\tprivate _realIndices;\r\n\tprivate _vertexIndex:number;\r\n\tprivate _vertices:Array<Vertex>;\r\n\tprivate _vertexNormals:Array<Vertex>;\r\n\tprivate _uvs:Array<UV>;\r\n\tprivate _scale:number;\r\n\tprivate _mtlLib:boolean;\r\n\tprivate _mtlLibLoaded:boolean = true;\r\n\tprivate _activeMaterialID:string = \"\";\r\n\r\n\t/**\r\n\t * Creates a new OBJParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(scale:number = 1)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._scale = scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Scaling factor applied directly to vertices data\r\n\t * @param value The scaling factor.\r\n\t */\r\n\tpublic set scale(value:number)\r\n\t{\r\n\t\tthis._scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"obj\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar content:string = ParserUtils.toString(data);\r\n\t\tvar hasV:boolean = false;\r\n\t\tvar hasF:boolean = false;\r\n\r\n\t\tif (content) {\r\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\r\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\r\n\t\t}\r\n\r\n\t\treturn hasV && hasF;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.id == 'mtl') {\r\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\r\n\t\t\tthis.parseMtl(str);\r\n\r\n\t\t} else {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tif (resourceDependency.assets.length != 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\r\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\t\tlm.texture = new Single2DTexture(<BitmapImage2D> asset);\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._sprites.length > 0) {\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.id == \"mtl\") {\r\n\t\t\tthis._mtlLib = false;\r\n\t\t\tthis._mtlLibLoaded = false;\r\n\t\t} else {\r\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\tthis._materialLoaded.push(lm);\r\n\t\t}\r\n\r\n\t\tif (this._sprites.length > 0)\r\n\t\t\tthis.applyMaterial(lm);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar line:string;\r\n\t\tvar creturn:string = String.fromCharCode(10);\r\n\t\tvar trunk;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\t// Merge linebreaks that are immediately preceeded by\r\n\t\t\t// the \"escape\" backward slash into single lines.\r\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\r\n\t\t}\r\n\r\n\t\tif (this._textData.indexOf(creturn) == -1)\r\n\t\t\tcreturn = String.fromCharCode(13);\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._startedParsing = true;\r\n\t\t\tthis._vertices = new Array<Vertex>();\r\n\t\t\tthis._vertexNormals = new Array<Vertex>();\r\n\t\t\tthis._materialIDs = new Array<string>();\r\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\r\n\t\t\tthis._sprites = new Array<Sprite>();\r\n\t\t\tthis._uvs = new Array<UV>();\r\n\t\t\tthis._stringLength = this._textData.length;\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\r\n\t\t\tthis._oldIndex = 0;\r\n\t\t\tthis._objects = new Array<ObjectGroup>();\r\n\t\t\tthis._objectIndex = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\r\n\r\n\t\t\tif (this._charIndex == -1)\r\n\t\t\t\tthis._charIndex = this._stringLength;\r\n\r\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\r\n\t\t\tline = line.split('\\r').join(\"\");\r\n\t\t\tline = line.replace(\"  \", \" \");\r\n\t\t\ttrunk = line.split(\" \");\r\n\t\t\tthis._oldIndex = this._charIndex + 1;\r\n\t\t\tthis.parseLine(trunk);\r\n\r\n\t\t\t// If whatever was parsed on this line resulted in the\r\n\t\t\t// parsing being paused to retrieve dependencies, break\r\n\t\t\t// here and do not continue parsing until un-paused.\r\n\t\t\tif (this.parsingPaused) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this._charIndex >= this._stringLength) {\r\n\r\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t\tthis.translate();\r\n\t\t\tthis.applyMaterials();\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number):void\r\n\t{\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single line in the OBJ file.\r\n\t */\r\n\tprivate parseLine(trunk):void\r\n\t{\r\n\t\tswitch (trunk[0]) {\r\n\r\n\t\t\tcase \"mtllib\":\r\n\r\n\t\t\t\tthis._mtlLib = true;\r\n\t\t\t\tthis._mtlLibLoaded = false;\r\n\t\t\t\tthis.loadMtl(trunk[1]);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"g\":\r\n\r\n\t\t\t\tthis.createGroup(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"o\":\r\n\r\n\t\t\t\tthis.createObject(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"usemtl\":\r\n\r\n\t\t\t\tif (this._mtlLib) {\r\n\r\n\t\t\t\t\tif (!trunk[1])\r\n\t\t\t\t\t\ttrunk[1] = \"def000\";\r\n\r\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\r\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\r\n\r\n\t\t\t\t\tif (this._currentGroup)\r\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"v\":\r\n\r\n\t\t\t\tthis.parseVertex(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vt\":\r\n\r\n\t\t\t\tthis.parseUV(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vn\":\r\n\r\n\t\t\t\tthis.parseVertexNormal(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"f\":\r\n\r\n\t\t\t\tthis.parseFace(trunk);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the parsed data into an Away3D scenegraph structure\r\n\t */\r\n\tprivate translate():void\r\n\t{\r\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\r\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\r\n\t\t\tvar numGroups:number = groups.length;\r\n\t\t\tvar materialGroups:Array<MaterialGroup>;\r\n\t\t\tvar numMaterialGroups:number;\r\n\t\t\tvar graphics:Graphics;\r\n\t\t\tvar sprite:Sprite;\r\n\r\n\t\t\tvar m:number;\r\n\t\t\tvar sm:number;\r\n\t\t\tvar bmMaterial:MethodMaterial;\r\n\r\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\r\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\r\n\r\n\t\t\t\t//check for multipass\r\n\t\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\tsprite = new Sprite(bmMaterial);\r\n\t\t\t\tgraphics = sprite.graphics;\r\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\r\n\t\t\t\tnumMaterialGroups = materialGroups.length;\r\n\r\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\r\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], graphics);\r\n\r\n\t\t\t\tif (graphics.count == 0)\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// Finalize and force type-based name\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> graphics);//, \"\");\r\n\r\n\t\t\t\tif (this._objects[objIndex].name) {\r\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\r\n\t\t\t\t\tsprite.name = this._objects[objIndex].name;\r\n\r\n\t\t\t\t} else if (groups[g].name) {\r\n\r\n\t\t\t\t\t// this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\r\n\t\t\t\t\tsprite.name = groups[g].name;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No name stored. Use empty string which will force it\r\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\r\n\t\t\t\t\tsprite.name = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._sprites.push(sprite);\r\n\r\n\t\t\t\tif (groups[g].materialID != \"\")\r\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + sprite.name; else\r\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\r\n\r\n\t\t\t\tif (sprite.graphics.count > 1) {\r\n\t\t\t\t\tfor (sm = 1; sm < sprite.graphics.count; ++sm)\r\n\t\t\t\t\t\tsprite.graphics.getGraphicAt(sm).material = bmMaterial;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates an obj's material group to a subgraphics.\r\n\t * @param materialGroup The material group data to convert.\r\n\t * @param graphics The Graphics to contain the converted Elements.\r\n\t */\r\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, graphics:Graphics):void\r\n\t{\r\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\r\n\t\tvar face:FaceData;\r\n\t\tvar numFaces:number = faces.length;\r\n\t\tvar numVerts:number;\r\n\t\tvar elements:TriangleElements;\r\n\r\n\t\tvar vertices:Array<number> = new Array<number>();\r\n\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\tvar normals:Array<number> = new Array<number>();\r\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\r\n\r\n\t\tthis._realIndices = [];\r\n\t\tthis._vertexIndex = 0;\r\n\r\n\t\tvar j:number;\r\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\r\n\r\n\t\t\tface = faces[i];\r\n\t\t\tnumVerts = face.indexIds.length - 1;\r\n\r\n\t\t\tfor (j = 1; j < numVerts; ++j) {\r\n\r\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (vertices.length > 0) {\r\n\t\t\telements = new TriangleElements(new AttributesBuffer());\r\n\t\t\telements.autoDeriveNormals = normals.length? false : true;\r\n\t\t\telements.setIndices(indices);\r\n\t\t\telements.setPositions(vertices);\r\n\t\t\telements.setNormals(normals);\r\n\t\t\telements.setUVs(uvs);\r\n\r\n\t\t\tgraphics.addGraphic(elements);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>):void\r\n\t{\r\n\t\tvar index:number;\r\n\t\tvar vertex:Vertex;\r\n\t\tvar vertexNormal:Vertex;\r\n\t\tvar uv:UV;\r\n\r\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\r\n\r\n\t\t\tindex = this._vertexIndex;\r\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\r\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\r\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\r\n\r\n\t\t\tif (face.normalIndices.length > 0) {\r\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\r\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n\t\t\t}\r\n\r\n\t\t\tif (face.uvIndices.length > 0) {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\r\n\t\t\t\t\tuvs.push(uv.u, uv.v);\r\n\r\n\t\t\t\t} catch (e) {\r\n\r\n\t\t\t\t\tswitch (vertexIndex) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tuvs.push(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tuvs.push(.5, 0);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tuvs.push(1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\r\n\t\t}\r\n\r\n\t\tindices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new object group.\r\n\t * @param trunk The data block containing the object tag and its parameters\r\n\t */\r\n\tprivate createObject(trunk):void\r\n\t{\r\n\t\tthis._currentGroup = null;\r\n\t\tthis._currentMaterialGroup = null;\r\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentObject.name = trunk[1];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new group.\r\n\t * @param trunk The data block containing the group tag and its parameters\r\n\t */\r\n\tprivate createGroup(trunk):void\r\n\t{\r\n\t\tif (!this._currentObject)\r\n\t\t\tthis.createObject(null);\r\n\t\tthis._currentGroup = new Group();\r\n\r\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentGroup.name = trunk[1];\r\n\t\tthis._currentObject.groups.push(this._currentGroup);\r\n\r\n\t\tthis.createMaterialGroup(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new material group.\r\n\t * @param trunk The data block containing the material tag and its parameters\r\n\t */\r\n\tprivate createMaterialGroup(trunk):void\r\n\t{\r\n\t\tthis._currentMaterialGroup = new MaterialGroup();\r\n\t\tif (trunk)\r\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\r\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex coordinates.\r\n\t * @param trunk The data block containing the vertex tag and its parameters\r\n\t */\r\n\tprivate parseVertex(trunk):void\r\n\t{\r\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\r\n\r\n\t\tvar v1:number, v2:number , v3:number;\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\r\n\t\t\tv1 = <number> nTrunk[0];\r\n\t\t\tv2 = <number> nTrunk[1];\r\n\t\t\tv3 = <number> -nTrunk[2];\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\r\n\t\t} else {\r\n\t\t\tv1 = <number> parseFloat(trunk[1]);\r\n\t\t\tv2 = <number> parseFloat(trunk[2]);\r\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\r\n\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinates.\r\n\t * @param trunk The data block containing the uv tag and its parameters\r\n\t */\r\n\tprivate parseUV(trunk):void\r\n\t{\r\n\t\tif (trunk.length > 3) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex normal coordinates.\r\n\t * @param trunk The data block containing the vertex normal tag and its parameters\r\n\t */\r\n\tprivate parseVertexNormal(trunk):void\r\n\t{\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next face's indices.\r\n\t * @param trunk The data block containing the face tag and its parameters\r\n\t */\r\n\tprivate parseFace(trunk):void\r\n\t{\r\n\t\tvar len:number = trunk.length;\r\n\t\tvar face:FaceData = new FaceData();\r\n\r\n\t\tif (!this._currentGroup) {\r\n\t\t\tthis.createGroup(null);\r\n\t\t}\r\n\r\n\t\tvar indices;\r\n\t\tfor (var i:number = 1; i < len; ++i) {\r\n\r\n\t\t\tif (trunk[i] == \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tindices = trunk[i].split(\"/\");\r\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\r\n\r\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\r\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\r\n\r\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\r\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\r\n\r\n\t\t\tface.indexIds.push(trunk[i]);\r\n\t\t}\r\n\r\n\t\tthis._currentMaterialGroup.faces.push(face);\r\n\t}\r\n\r\n\t/**\r\n\t * This is a hack around negative face coords\r\n\t */\r\n\tprivate parseIndex(index:number, length:number):number\r\n\t{\r\n\t\tif (index < 0)\r\n\t\t\treturn index + length + 1; else\r\n\t\t\treturn index;\r\n\t}\r\n\r\n\tprivate parseMtl(data:string):void\r\n\t{\r\n\t\tvar materialDefinitions = data.split('newmtl');\r\n\t\tvar lines;\r\n\t\tvar trunk;\r\n\t\tvar j:number;\r\n\r\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\r\n\t\tvar useSpecular:boolean;\r\n\t\tvar useColor:boolean;\r\n\t\tvar diffuseColor:number;\r\n\t\tvar color:number;\r\n\t\tvar specularColor:number;\r\n\t\tvar specular:number;\r\n\t\tvar alpha:number;\r\n\t\tvar mapkd:string;\r\n\r\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\r\n\r\n\r\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\r\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\r\n\r\n\t\t\tif (lines.length == 1)\r\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\r\n\r\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\r\n\t\t\tspecular = 0;\r\n\t\t\tuseSpecular = false;\r\n\t\t\tuseColor = false;\r\n\t\t\talpha = 1;\r\n\t\t\tmapkd = \"\";\r\n\r\n\t\t\tfor (j = 0; j < lines.length; ++j) {\r\n\r\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\r\n\r\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\r\n\t\t\t\t\ttrunk = lines[j].split(\" \");\r\n\r\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\r\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\r\n\r\n\t\t\t\t\tif (j == 0) {\r\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\r\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch (trunk[0]) {\r\n\r\n\t\t\t\t\t\t\tcase \"Ka\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\r\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ks\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ns\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\r\n\t\t\t\t\t\t\t\tif (specular == 0)\r\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Kd\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseColor = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"tr\":\r\n\t\t\t\t\t\t\tcase \"d\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"map_Kd\":\r\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\r\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (mapkd != \"\") {\r\n\r\n\t\t\t\tif (useSpecular) {\r\n\r\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\r\n\t\t\t\t\tbasicSpecularMethod.color = specularColor;\r\n\t\t\t\t\tbasicSpecularMethod.strength = specular;\r\n\r\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\r\n\t\t\t\t\tspecularData.alpha = alpha;\r\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\r\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\r\n\r\n\t\t\t\t\tif (!this._materialSpecularData)\r\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\r\n\r\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\r\n\r\n\t\t\t} else if (useColor && !isNaN(color)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = this._lastMtlID;\r\n\r\n\t\t\t\tif (alpha == 0)\r\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\r\n\r\n\t\t\t\tvar cm:MethodMaterial = new MethodMaterial(color);\r\n\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tcm.alpha = alpha;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcm.diffuseMethod.color = diffuseColor;\r\n\r\n\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\tcm.specularMethod.color = specularColor;\r\n\t\t\t\t\tcm.specularMethod.strength = specular;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlm.cm = cm;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._sprites.length > 0)\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._mtlLibLoaded = true;\r\n\t}\r\n\r\n\tprivate parseMapKdString(trunk):string\r\n\t{\r\n\t\tvar url:string = \"\";\r\n\t\tvar i:number;\r\n\t\tvar breakflag:boolean;\r\n\r\n\t\tfor (i = 1; i < trunk.length;) {\r\n\t\t\tswitch (trunk[i]) {\r\n\t\t\t\tcase \"-blendu\":\r\n\t\t\t\tcase \"-blendv\":\r\n\t\t\t\tcase \"-cc\":\r\n\t\t\t\tcase \"-clamp\":\r\n\t\t\t\tcase \"-texres\":\r\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-mm\":\r\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-o\":\r\n\t\t\t\tcase \"-s\":\r\n\t\t\t\tcase \"-t\":\r\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreakflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (breakflag)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//Reconstruct URL/filename\r\n\t\tfor (i; i < trunk.length; i++) {\r\n\t\t\turl += trunk[i];\r\n\t\t\turl += \" \";\r\n\t\t}\r\n\r\n\t\t//Remove the extraneous space and/or newline from the right side\r\n\t\turl = url.replace(/\\s+$/, \"\");\r\n\r\n\t\treturn url;\r\n\t}\r\n\r\n\tprivate loadMtl(mtlurl:string):void\r\n\t{\r\n\t\t// Add raw-data dependency to queue and load dependencies now,\r\n\t\t// which will pause the parsing in the meantime.\r\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\r\n\t\tthis._pPauseAndRetrieveDependencies();//\r\n\t}\r\n\r\n\tprivate applyMaterial(lm:LoadedMaterial):void\r\n\t{\r\n\t\tvar decomposeID;\r\n\t\tvar sprite:Sprite;\r\n\t\tvar tm:MethodMaterial;\r\n\t\tvar j:number;\r\n\t\tvar specularData:SpecularData;\r\n\r\n\t\tfor (var i:number = 0; i < this._sprites.length; ++i) {\r\n\t\t\tsprite = this._sprites[i];\r\n\t\t\tdecomposeID = sprite.material.name.split(\"~\");\r\n\r\n\t\t\tif (decomposeID[0] == lm.materialID) {\r\n\r\n\t\t\t\tif (lm.cm) {\r\n\t\t\t\t\tif (sprite.material)\r\n\t\t\t\t\t\tsprite.material = null;\r\n\t\t\t\t\tsprite.material = lm.cm;\r\n\r\n\t\t\t\t} else if (lm.texture) {\r\n\t\t\t\t\ttm = <MethodMaterial > sprite.material;\r\n\r\n\t\t\t\t\ttm.ambientMethod.texture = lm.texture;\r\n\t\t\t\t\ttm.style.color = lm.color;\r\n\t\t\t\t\ttm.alpha = lm.alpha;\r\n\t\t\t\t\ttm.style.sampler = new Sampler2D(true);\r\n\r\n\t\t\t\t\tif (this.materialMode < 2) // if materialMode is 0 or 1, we create a SinglePass\r\n\t\t\t\t\t\ttm.alpha = lm.alpha;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\tif (lm.specularMethod) {\r\n\r\n\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\r\n\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\r\n\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\ttm.specularMethod.color = specularData.color;\r\n\t\t\t\t\t\t\t\ttm.specularMethod.strength = specularData.alpha;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsprite.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\r\n\t\t\t\tthis._sprites.splice(i, 1);\r\n\t\t\t\t--i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lm.cm || tm)\r\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\r\n\t}\r\n\r\n\tprivate applyMaterials():void\r\n\t{\r\n\t\tif (this._materialLoaded.length == 0)\r\n\t\t\treturn;\r\n\r\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\r\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\r\n\t}\r\n}\r\n\r\nexport class ObjectGroup\r\n{\r\n\tpublic name:string;\r\n\tpublic groups:Group[] = new Array<Group>();\r\n}\r\n\r\nexport class Group\r\n{\r\n\tpublic name:string;\r\n\tpublic materialID:string;\r\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\r\n}\r\n\r\nexport class MaterialGroup\r\n{\r\n\tpublic url:string;\r\n\tpublic faces:FaceData[] = new Array<FaceData>();\r\n}\r\n\r\nexport class SpecularData\r\n{\r\n\tpublic materialID:string;\r\n\tpublic basicSpecularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nexport class LoadedMaterial\r\n{\r\n\tpublic materialID:string;\r\n\tpublic texture:Single2DTexture;\r\n\tpublic cm:MaterialBase;\r\n\tpublic specularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nexport class FaceData\r\n{\r\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\r\n}\r\n\r\n/**\r\n* Texture coordinates value object.\r\n*/\r\nexport class UV\r\n{\r\n\tprivate _u:number;\r\n\tprivate _v:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>UV</code> object.\r\n\t *\r\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\r\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\r\n\t */\r\n\tconstructor(u:number = 0, v:number = 0)\r\n\t{\r\n\t\tthis._u = u;\r\n\t\tthis._v = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the vertical coordinate of the texture value.\r\n\t */\r\n\tpublic get v():number\r\n\t{\r\n\t\treturn this._v;\r\n\t}\r\n\r\n\tpublic set v(value:number)\r\n\t{\r\n\t\tthis._v = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the horizontal coordinate of the texture value.\r\n\t */\r\n\tpublic get u():number\r\n\t{\r\n\t\treturn this._u;\r\n\t}\r\n\r\n\tpublic set u(value:number)\r\n\t{\r\n\t\tthis._u = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new UV value Object\r\n\t */\r\n\tpublic clone():UV\r\n\t{\r\n\t\treturn new UV(this._u, this._v);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the value object as a string for trace/debug purpose\r\n\t */\r\n\tpublic toString():string\r\n\t{\r\n\t\treturn this._u + \",\" + this._v;\r\n\t}\r\n}\r\n\r\nexport class Vertex\r\n{\r\n\tprivate _x:number;\r\n\tprivate _y:number;\r\n\tprivate _z:number;\r\n\tprivate _index:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>Vertex</code> value object.\r\n\t *\r\n\t * @param    x            [optional]    The x value. Defaults to 0.\r\n\t * @param    y            [optional]    The y value. Defaults to 0.\r\n\t * @param    z            [optional]    The z value. Defaults to 0.\r\n\t * @param    index        [optional]    The index value. Defaults is NaN.\r\n\t */\r\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\r\n\t{\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._index = index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the index of value object\r\n\t * @param    ind        The index\r\n\t */\r\n\tpublic set index(ind:number)\r\n\t{\r\n\t\tthis._index = ind;\r\n\t}\r\n\r\n\tpublic get index():number\r\n\t{\r\n\t\treturn this._index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the x value of the value object\r\n\t * @param    value        The x value\r\n\t */\r\n\tpublic get x():number\r\n\t{\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value:number)\r\n\t{\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the y value of the value object\r\n\t * @param    value        The y value\r\n\t */\r\n\tpublic get y():number\r\n\t{\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value:number)\r\n\t{\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the z value of the value object\r\n\t * @param    value        The z value\r\n\t */\r\n\tpublic get z():number\r\n\t{\r\n\t\treturn this._z;\r\n\t}\r\n\r\n\tpublic set z(value:number)\r\n\t{\r\n\t\tthis._z = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new Vertex value Object\r\n\t */\r\n\tpublic clone():Vertex\r\n\t{\r\n\t\treturn new Vertex(this._x, this._y, this._z);\r\n\t}\r\n}",
    "import {Loader}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/Loader\";\r\n\r\nimport {AWDParser}\t\t\t\t\t\tfrom \"./AWDParser\";\r\nimport {Max3DSParser}\t\t\t\t\t\tfrom \"./Max3DSParser\";\r\nimport {MD2Parser}\t\t\t\t\t\tfrom \"./MD2Parser\";\r\nimport {OBJParser}\t\t\t\t\t\tfrom \"./OBJParser\";\r\nimport {FNTParser}\t\t\t\t\t\tfrom \"./FNTParser\";\r\n\r\n/**\r\n *\r\n */\r\nexport class Parsers\r\n{\r\n\t/**\r\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\r\n\t * enable support for all bundled parsers to the file format auto-detection\r\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\r\n\t *\r\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\r\n\t *\r\n\t * Beware however that this requires all parser classes to be included in the\r\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\r\n\t * file formats are used, SWF file size can be saved by adding the parsers\r\n\t * individually using AssetLibrary.enableParser()\r\n\t *\r\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\r\n\t * the auto-detection mechanisms altogether, while at the same time allowing\r\n\t * any properties that are unique to that parser to be set for that load.\r\n\t *\r\n\t * The bundled parsers are:\r\n\t *\r\n\t * <ul>\r\n\t * <li>AC3D (.ac)</li>\r\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\r\n\t * <li>3DMax (.3ds)</li>\r\n\t * <li>DXF (.dxf)</li>\r\n\t * <li>Quake 2 MD2 models (.md2)</li>\r\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\r\n\t * <li>Doom 3 MD5 sprites (.md5sprite)</li>\r\n\t * <li>Wavefront OBJ (.obj)</li>\r\n\t * <li>Collada (.dae)</li>\r\n\t * <li>Images (.jpg, .png)</li>\r\n\t * </ul>\r\n\t *\r\n\t * @see away.library.AssetLibrary.enableParser\r\n\t */\r\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser, FNTParser);\r\n\r\n\t/**\r\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\r\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\r\n\t * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\r\n\t *\r\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\r\n\t *\r\n\t * @see away.parsers.Parsers.ALL_BUNDLED\r\n\t */\r\n\tpublic static enableAllBundled():void\r\n\t{\r\n\t\tLoader.enableParsers(Parsers.ALL_BUNDLED);\r\n\t}\r\n}"
  ],
  "sourceRoot": ""
}