{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "../index.ts",
    "lib/lib/AWD3ParserUtils/AWD3Utils.ts",
    "lib/lib/AWD3ParserUtils/AWDBlock.ts",
    "lib/AWDParser.ts",
    "lib/FNTParser.ts",
    "lib/MD2Parser.ts",
    "lib/MD5AnimParser.ts",
    "lib/MD5MeshParser.ts",
    "lib/Max3DSParser.ts",
    "lib/OBJParser.ts",
    "lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    1,
    "module",
    "AWDParser_1",
    "AWDParser",
    "Max3DSParser_1",
    "Max3DSParser",
    "MD2Parser_1",
    "MD2Parser",
    "MD5AnimParser_1",
    "MD5AnimParser",
    "MD5MeshParser_1",
    "MD5MeshParser",
    "OBJParser_1",
    "OBJParser",
    "Parsers_1",
    "Parsers",
    "./lib/AWDParser",
    "./lib/MD2Parser",
    "./lib/MD5AnimParser",
    "./lib/MD5MeshParser",
    "./lib/Max3DSParser",
    "./lib/OBJParser",
    "./lib/Parsers",
    "awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils",
    "AWD3Utils",
    "BLOCKSTATE_FINALIZE",
    "BLOCKSTATE_INVALID",
    "BLOCKSTATE_LOAD_DEPENDENICES",
    "BLOCKSTATE_NO_ASSET",
    "COMPRESSIONMODE_LZMA",
    "UNCOMPRESSED",
    "DEFLATE",
    "LZMA",
    "INT8",
    "INT16",
    "INT32",
    "UINT8",
    "UINT16",
    "UINT32",
    "FLOAT32",
    "FLOAT64",
    "BOOL",
    "COLOR",
    "BADDR",
    "AWDSTRING",
    "AWDBYTEARRAY",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "MTX4x4",
    "awayjs-parsers/lib/AWD3ParserUtils/AWDBlock",
    "AWD3Utils_1",
    "AWDBlock",
    "this_id",
    "this_type",
    "this",
    "type",
    "id",
    "state",
    "dependencies_data",
    "Array",
    "dependencies_urls",
    "loaded_dependencies",
    "loaded_dependencies_cnt",
    "prototype",
    "dispose",
    "bytes",
    "errorMessages",
    "uvsForVertexAnimation",
    "addError",
    "errorMsg",
    "push",
    "../AWD3ParserUtils/AWD3Utils",
    "awayjs-parsers/lib/AWDParser",
    "__extends",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "Object",
    "create",
    "AttributesBuffer_1",
    "Float3Attributes_1",
    "Float2Attributes_1",
    "Byte4Attributes_1",
    "BitmapImageCube_1",
    "BlendMode_1",
    "Sampler2D_1",
    "ColorTransform_1",
    "Matrix3D_1",
    "Vector3D_1",
    "URLLoaderDataFormat_1",
    "URLRequest_1",
    "ParserBase_1",
    "ParserUtils_1",
    "PerspectiveProjection_1",
    "OrthographicProjection_1",
    "OrthographicOffCenterProjection_1",
    "ByteArray_1",
    "DisplayObjectContainer_1",
    "Graphics_1",
    "TriangleElements_1",
    "DirectionalLight_1",
    "PointLight_1",
    "Camera_1",
    "Sprite_1",
    "Billboard_1",
    "Skybox_1",
    "DefaultMaterialManager_1",
    "StaticLightPicker_1",
    "CubeMapShadowMapper_1",
    "DirectionalShadowMapper_1",
    "PrefabBase_1",
    "PrimitiveCapsulePrefab_1",
    "PrimitiveConePrefab_1",
    "PrimitiveCubePrefab_1",
    "PrimitiveCylinderPrefab_1",
    "PrimitivePlanePrefab_1",
    "PrimitiveSpherePrefab_1",
    "PrimitiveTorusPrefab_1",
    "SingleCubeTexture_1",
    "Single2DTexture_1",
    "VertexAnimationSet_1",
    "VertexAnimator_1",
    "SkeletonAnimationSet_1",
    "SkeletonAnimator_1",
    "JointPose_1",
    "Skeleton_1",
    "SkeletonPose_1",
    "SkeletonJoint_1",
    "SkeletonClipNode_1",
    "VertexClipNode_1",
    "MethodMaterialMode_1",
    "MethodMaterial_1",
    "AmbientEnvMapMethod_1",
    "DiffuseDepthMethod_1",
    "DiffuseCelMethod_1",
    "DiffuseGradientMethod_1",
    "DiffuseLightMapMethod_1",
    "DiffuseWrapMethod_1",
    "EffectAlphaMaskMethod_1",
    "EffectColorMatrixMethod_1",
    "EffectColorTransformMethod_1",
    "EffectEnvMapMethod_1",
    "EffectFogMethod_1",
    "EffectFresnelEnvMapMethod_1",
    "EffectLightMapMethod_1",
    "EffectRimLightMethod_1",
    "NormalSimpleWaterMethod_1",
    "ShadowDitheredMethod_1",
    "ShadowFilteredMethod_1",
    "SpecularFresnelMethod_1",
    "ShadowHardMethod_1",
    "SpecularAnisotropicMethod_1",
    "SpecularCelMethod_1",
    "SpecularPhongMethod_1",
    "ShadowNearMethod_1",
    "ShadowSoftMethod_1",
    "BasicMaterial_1",
    "AS2SceneGraphFactory_1",
    "Timeline_1",
    "AssetLibrary_1",
    "Font_1",
    "TesselatedFontTable_1",
    "TextFormat_1",
    "AWDBlock_1",
    "Rectangle_1",
    "Style_1",
    "Matrix_1",
    "MappingMode_1",
    "ElementsType_1",
    "_super",
    "view",
    "URLLoaderDataFormat",
    "ARRAY_BUFFER",
    "_debug",
    "_debugTimers",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_time_all",
    "_time_graphics",
    "_time_graphics_bytes",
    "_time_timeline",
    "_time_fonts",
    "_time_textfields",
    "_time_sounds",
    "_time_textures",
    "_time_materials",
    "_time_sprites",
    "_num_graphics",
    "_num_timeline",
    "_num_fonts",
    "_num_textfields",
    "_num_sounds",
    "_num_textures",
    "_num_materials",
    "_num_sprites",
    "shadowMethodListProperties",
    2,
    3,
    101,
    "PROPERTY_NUMBER",
    102,
    103,
    201,
    202,
    301,
    302,
    401,
    402,
    601,
    602,
    701,
    702,
    801,
    "spritePoseAnimationProperties",
    "sharedMethodListProperties",
    104,
    105,
    106,
    107,
    "_view",
    "_blocks",
    "data",
    "blendModeDic",
    "BlendMode",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "ParserUtils",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "this_block",
    "parseInt",
    "image_asset",
    "_pFinalizeAsset",
    "name",
    "console",
    "log",
    "audio_asset",
    "sub_id",
    "cube_image_asset",
    "BitmapImageCube",
    "width",
    "draw",
    "_isParsing",
    "updateTimers",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "asset",
    "oldName",
    "block",
    "resetAssetPath",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "_pDieWithError",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "ParserBase",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "DisplayObjectContainer",
    "c",
    "isParsed",
    "ns",
    "flags",
    "len",
    "start_timeing",
    "performance",
    "now",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "ByteArray",
    "readBytes",
    "blockEndBlock",
    "factory",
    "AS2SceneGraphFactory",
    "parseSpriteLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseMovieClip",
    "parseTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseSpritePoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseGraphics",
    "parseContainer",
    "parseSpriteInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "end_timing",
    "time_delta",
    "blockID",
    "parseVarStr",
    "new_font",
    "AssetLibrary",
    "getAsset",
    "newfont",
    "undefined",
    "Font",
    "font_style_cnt",
    "font_style_char_cnt",
    "font_style_name",
    "new_font_style",
    "font_style_char",
    "attr_count",
    "sm_len",
    "sm_end",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "get_font_table",
    "TesselatedFontTable",
    "assetType",
    "set_font_em_size",
    "set_whitespace_width",
    "ascent",
    "readFloat",
    "descent",
    "j",
    "char_width",
    "indices",
    "idx",
    "readUnsignedShort",
    "curveData",
    "vertexBuffer",
    "AttributesBuffer",
    "bufferView",
    "Uint8Array",
    "arraybytes",
    "curve_elements",
    "TriangleElements",
    "setPositions",
    "Float2Attributes",
    "setCustomAttributes",
    "Float3Attributes",
    "Byte4Attributes",
    "setUVs",
    "setChar",
    "parseProperties",
    "parseUserAttributes",
    "font",
    "newTextFormat",
    "TextFormat",
    "font_name",
    "font_table",
    "font_style",
    "mat",
    "bothSides",
    "curves",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "format_props",
    "textFormatProperties",
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "tf_align_int",
    "align",
    "indent",
    "leftMargin",
    "rightMargin",
    "leading",
    "material",
    "newTextField",
    "createTextField",
    "text_field_type",
    "textFieldTypes",
    "displayAsPassword",
    "textWidth",
    "Math",
    "abs",
    "textHeight",
    "num_paragraphs",
    "complete_text",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "text_format",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "props",
    "textFieldProperties",
    "selectable",
    "border",
    "extra",
    "billboard",
    "Billboard",
    "data_id",
    "graphics",
    "geoID",
    "num_materials",
    "materials",
    "materialNames",
    "materials_parsed",
    "DefaultMaterialManager",
    "getDefaultMaterial",
    "useColorTransform",
    "sprite",
    "Sprite",
    "copyTo",
    "count",
    "getGraphicAt",
    "min",
    "sampler",
    "Sampler2D",
    "graphic",
    "style",
    "Style",
    "addSamplerAt",
    "getTextureAt",
    "tx",
    "ty",
    "animateUVs",
    "uvMatrix",
    "Matrix",
    "matrix",
    "parseMatrix32RawData",
    "newMatrix",
    "x",
    "y",
    "height",
    "imageRect",
    "Rectangle",
    "elements",
    "getCustomAtributes",
    "data_len",
    "url",
    "_pAddDependency",
    "URLRequest",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "cmd_asset",
    "new_timeline",
    "Timeline",
    "new_mc",
    "createMovieClip",
    "num_potential_childs",
    "registerPotentialChild",
    "num_all_display_instances",
    "num_potential_childs_multi_instanced",
    "num_instances",
    "num_potential_sounds",
    "str_cnt",
    "str_data_type",
    "str_counter",
    "keyframes_start_indices_data",
    "new_buffer",
    "Uint16Array",
    "Uint32Array",
    "keyframe_durations",
    "numKeyFrames",
    "frame_command_indices",
    "frame_recipe",
    "command_length_stream",
    "command_index_stream",
    "add_child_stream",
    "remove_child_stream",
    "update_child_stream",
    "update_child_props_indices_stream",
    "update_child_props_length_stream",
    "property_type_stream",
    "property_index_stream",
    "properties_stream_int",
    "lc",
    "float_array_data",
    "properties_stream_f32_mtx_scale_rot",
    "Float32Array",
    "properties_stream_f32_mtx_pos",
    "properties_stream_f32_mtx_all",
    "properties_stream_f32_ct",
    "_labels",
    "string_props_array",
    "properties_stream_strings",
    "frame_index",
    "one_str_len",
    "add_framescript",
    "init",
    "sceneID",
    "fps",
    "movieClipProperties",
    "timeline",
    "numFrames",
    "Graphics",
    "numElements",
    "graphicsProperties",
    "geoScaleU",
    "geoScaleV",
    "target_start_idx",
    "target_vert_cnt",
    "element_type",
    "ElementType",
    "STANDART_STREAMS",
    "target_element",
    "elements_parsed",
    "is_curve_elements",
    "w_indices",
    "weights",
    "elementsProps",
    "elementsProperties",
    "z",
    "verts",
    "readNumber",
    "uvs",
    "normals",
    "CONCENATED_STREAMS",
    "SHARED_BUFFER",
    "targetGraphic",
    "element_idx",
    "addGraphic",
    "triangle_elements",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "setIndices",
    "setNormals",
    "setJointWeights",
    "setJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "offset",
    "prefab",
    "primType",
    "bsm",
    "primitiveProperties",
    "PrimitivePlanePrefab",
    "ElementsType",
    "TRIANGLE",
    "PrimitiveCubePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveCylinderPrefab",
    "topClosed",
    "bottomClosed",
    "yUp",
    "PrimitiveConePrefab",
    "PrimitiveCapsulePrefab",
    "PrimitiveTorusPrefab",
    "PrefabBase",
    "primitiveTypes",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "addChild",
    "containerProperties",
    "pivot",
    "Vector3D",
    "isPrefab",
    "isAsset",
    "getNewObject",
    "spriteInstanceProperties",
    "castsShadows",
    "Skybox",
    "tex",
    "SingleCubeTexture",
    "getDefaultImageCube",
    "texture",
    "light",
    "newShadowMapper",
    "lightType",
    "lightProperties",
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "PointLight",
    "radius",
    "fallOff",
    "CubeMapShadowMapper",
    "DirectionalLight",
    "DirectionalShadowMapper",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    "cameraProperties",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "camera",
    "Camera",
    "cameraPivotProperties",
    "numLights",
    "lightsArray",
    "lightsArrayNames",
    "k",
    "lightPick",
    "StaticLightPicker",
    "finalize",
    "num_methods",
    "methods_parsed",
    "returnedArray",
    "materialProperties",
    "method_type",
    "debugString",
    "materialMode",
    "MethodMaterial",
    "mode",
    "MethodMaterialMode",
    "MULTI_PASS",
    "Single2DTexture",
    "ambientMethod",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "diffuseImage",
    "normalImage",
    "specImage",
    "material_v1Properties",
    "spezialType",
    "lightPicker",
    "alphaPremultiplied",
    "blendMode",
    "diffuseTexture",
    "normalMethod",
    "specularMethod",
    "strength",
    "diffuseMethod",
    "gloss",
    "method_v1Properties",
    "effectMethod",
    "addEffectMethod",
    "shadowMapMethod",
    "shadowMethod",
    "cubeTexture",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseGradientMethod",
    "DiffuseWrapMethod",
    "DiffuseLightMapMethod",
    "DiffuseCelMethod",
    "smoothness",
    "SpecularAnisotropicMethod",
    "SpecularPhongMethod",
    "SpecularCelMethod",
    "SpecularFresnelMethod",
    "fresnelPower",
    "normalReflectance",
    "NormalSimpleWaterMethod",
    "mappingMode",
    "MappingMode",
    "LINEAR_GRADIENT",
    "RADIAL_GRADIENT",
    "basic_mat",
    "BasicMaterial",
    "byteArrayToImage",
    "parseSharedMethodList",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "numCommands",
    "typeCommand",
    "commandProperties",
    "targetProperties",
    "metaDataProperties",
    "nameSpaceString",
    "methodType",
    "targetID",
    "ShadowNearMethod",
    "ShadowFilteredMethod",
    "epsilon",
    "ShadowDitheredMethod",
    "range",
    "ShadowSoftMethod",
    "ShadowHardMethod",
    "num_joints",
    "skeleton",
    "Skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "SkeletonJoint",
    "parentIndex",
    "inverseBindPose",
    "rawData",
    "joints",
    "pose",
    "SkeletonPose",
    "joint_pose",
    "has_transform",
    "JointPose",
    "mtx_data",
    "parseMatrix43RawData",
    "Matrix3D",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_id",
    "clip",
    "SkeletonClipNode",
    "num_frames",
    "frames_parsed",
    "addFrame",
    "frames",
    "poseOnly",
    "subSpriteParsed",
    "VertexClipNode",
    "streamtypes",
    "geo_id",
    "getUVForVertexAnimation",
    "num_subsprites",
    "num_Streams",
    "streamsParsed",
    "looping",
    "stitchFinalFrame",
    "setTangents",
    "vertexAnimationSetProperties",
    "skeletonFrames",
    "vertexFrames",
    "clipNode",
    "newVertexAnimationSet",
    "VertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "SkeletonAnimationSet",
    "animatorSetProperties",
    "targetAnimationSet",
    "targetSpritees",
    "targetSpriteLength",
    "activeState",
    "autoplay",
    "thisAnimator",
    "SkeletonAnimator",
    "VertexAnimator",
    "animator",
    "effectMethodReturn",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "offCol",
    "colorTransform",
    "ColorTransform",
    "EffectEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "EffectAlphaMaskMethod",
    "EffectFresnelEnvMapMethod",
    "EffectFogMethod",
    "list_len",
    "list_end",
    "attributes",
    "attibuteCnt",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "readByte",
    "readInt",
    "readDouble",
    "expected",
    "AWDProperties",
    "key",
    "propertyCnt",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "accuracy",
    "GEO_NUMBER",
    "MATRIX_NUMBER",
    "list",
    "num_elems",
    "num_read",
    "_streaming",
    "body_len",
    "spriteID",
    "geoCnt",
    "numVertices",
    "precision",
    "mtx_raw",
    "isNaN",
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    110,
    111,
    303,
    703,
    704,
    11,
    12,
    21,
    22,
    23,
    13,
    15,
    16,
    17,
    18,
    19,
    20,
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "./AWD3ParserUtils/AWDBlock",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-core/lib/attributes/Byte4Attributes",
    "awayjs-core/lib/attributes/Float2Attributes",
    "awayjs-core/lib/attributes/Float3Attributes",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/image/BitmapImageCube",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-core/lib/image/Sampler2D",
    "awayjs-core/lib/library/AssetLibrary",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/Style",
    "awayjs-display/lib/base/Timeline",
    "awayjs-display/lib/display/Billboard",
    "awayjs-display/lib/display/Camera",
    "awayjs-display/lib/display/DirectionalLight",
    "awayjs-display/lib/display/DisplayObjectContainer",
    "awayjs-display/lib/display/PointLight",
    "awayjs-display/lib/display/Skybox",
    "awayjs-display/lib/display/Sprite",
    "awayjs-display/lib/graphics/ElementsType",
    "awayjs-display/lib/graphics/Graphics",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TesselatedFontTable",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/FNTParser",
    "XmlUtils_1",
    "BitmapFontTable_1",
    "FNTParser",
    "TEXT",
    "_parseState",
    "supports",
    "content",
    "indexOf",
    "_bitmapFontTable",
    "add_page",
    "FNTParserState",
    "PARSE_CHARS",
    "PARSE_COMPLETE",
    "nodes",
    "PARSE_XML",
    "_doc",
    "XmlUtils",
    "getChildrenWithTag",
    "strToXml",
    "_pGetTextData",
    "page_node",
    "all_pages",
    "_imagePath",
    "readAttributeValue",
    "char_node",
    "_chars",
    "PARSE_IMAGE",
    "info_node",
    "common_node",
    "_font",
    "bold",
    "italic",
    "BitmapFontTable",
    "_init_size",
    "element",
    "xoff",
    "yoff",
    "xadv",
    "page",
    "chnl",
    "awayjs-core/lib/utils/XmlUtils",
    "awayjs-display/lib/text/BitmapFontTable",
    "awayjs-parsers/lib/MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "_animationSet",
    "materialFinal",
    "graphicsCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_sprite",
    "getDefaultImage2D",
    "_pHasTime",
    "_parsedHeader",
    "_graphics",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstElements",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion_1",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "Quaternion",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_elementsData",
    "translateElements",
    "positionData",
    "weightData",
    "_skeleton",
    "numElementsData",
    "elementsData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "start",
    "startWeight",
    "end",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "ElementsData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "positions",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "PositionData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "BitmapImage2D_1",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "BitmapImage2D",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "obj",
    "constructObject",
    "MaterialVO",
    "readColor",
    "diffuseColor",
    "specularColor",
    "twoSided",
    "colorMap",
    "specularMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "vertices",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "scaleBy",
    "applyTransformation",
    "concat",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "getDefaultTexture",
    "chr",
    "g",
    "awayjs-core/lib/image/BitmapImage2D",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod_1",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_sprites",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "split",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "m",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertex",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "val",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "SpecularBasicMethod",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "Loader_1",
    "FNTParser_1",
    "enableAllBundled",
    "Loader",
    "enableParsers",
    "ALL_BUNDLED",
    "./AWDParser",
    "./FNTParser",
    "./MD2Parser",
    "./Max3DSParser",
    "./OBJParser",
    "awayjs-core/lib/library/Loader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\nvar AWDParser_1 = require(\"./lib/AWDParser\");\nexports.AWDParser = AWDParser_1.AWDParser;\nvar Max3DSParser_1 = require(\"./lib/Max3DSParser\");\nexports.Max3DSParser = Max3DSParser_1.Max3DSParser;\nvar MD2Parser_1 = require(\"./lib/MD2Parser\");\nexports.MD2Parser = MD2Parser_1.MD2Parser;\nvar MD5AnimParser_1 = require(\"./lib/MD5AnimParser\");\nexports.MD5AnimParser = MD5AnimParser_1.MD5AnimParser;\nvar MD5MeshParser_1 = require(\"./lib/MD5MeshParser\");\nexports.MD5MeshParser = MD5MeshParser_1.MD5MeshParser;\nvar OBJParser_1 = require(\"./lib/OBJParser\");\nexports.OBJParser = OBJParser_1.OBJParser;\nvar Parsers_1 = require(\"./lib/Parsers\");\nexports.Parsers = Parsers_1.Parsers;\n\n},{\"./lib/AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"./lib/MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"./lib/MD5AnimParser\":\"awayjs-parsers/lib/MD5AnimParser\",\"./lib/MD5MeshParser\":\"awayjs-parsers/lib/MD5MeshParser\",\"./lib/Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"./lib/OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"./lib/Parsers\":\"awayjs-parsers/lib/Parsers\"}],\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\":[function(require,module,exports){\n\"use strict\";\nvar AWD3Utils = (function () {\n    function AWD3Utils() {\n    }\n    AWD3Utils.BLOCKSTATE_FINALIZE = 0;\n    AWD3Utils.BLOCKSTATE_INVALID = 1;\n    AWD3Utils.BLOCKSTATE_LOAD_DEPENDENICES = 2;\n    AWD3Utils.BLOCKSTATE_NO_ASSET = 3;\n    AWD3Utils.COMPRESSIONMODE_LZMA = \"lzma\";\n    AWD3Utils.UNCOMPRESSED = 0;\n    AWD3Utils.DEFLATE = 1;\n    AWD3Utils.LZMA = 2;\n    AWD3Utils.INT8 = 1;\n    AWD3Utils.INT16 = 2;\n    AWD3Utils.INT32 = 3;\n    AWD3Utils.UINT8 = 4;\n    AWD3Utils.UINT16 = 5;\n    AWD3Utils.UINT32 = 6;\n    AWD3Utils.FLOAT32 = 7;\n    AWD3Utils.FLOAT64 = 8;\n    AWD3Utils.BOOL = 21;\n    AWD3Utils.COLOR = 22;\n    AWD3Utils.BADDR = 23;\n    AWD3Utils.AWDSTRING = 31;\n    AWD3Utils.AWDBYTEARRAY = 32;\n    AWD3Utils.VECTOR2x1 = 41;\n    AWD3Utils.VECTOR3x1 = 42;\n    AWD3Utils.VECTOR4x1 = 43;\n    AWD3Utils.MTX3x2 = 44;\n    AWD3Utils.MTX3x3 = 45;\n    AWD3Utils.MTX4x3 = 46;\n    AWD3Utils.MTX4x4 = 47;\n    return AWD3Utils;\n}());\nexports.AWD3Utils = AWD3Utils;\n\n},{}],\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\":[function(require,module,exports){\n\"use strict\";\nvar AWD3Utils_1 = require(\"../AWD3ParserUtils/AWD3Utils\");\nvar AWDBlock = (function () {\n    function AWDBlock(this_id, this_type) {\n        this.type = this_type;\n        this.id = this_id;\n        this.state = AWD3Utils_1.AWD3Utils.BLOCKSTATE_FINALIZE;\n        this.dependencies_data = Array();\n        this.dependencies_urls = Array();\n        if (this_type == 83) {\n            this.loaded_dependencies = Array(6);\n        }\n        this.loaded_dependencies_cnt = 0;\n    }\n    AWDBlock.prototype.dispose = function () {\n        this.id = null;\n        this.bytes = null;\n        this.errorMessages = null;\n        this.uvsForVertexAnimation = null;\n    };\n    AWDBlock.prototype.addError = function (errorMsg) {\n        if (!this.errorMessages)\n            this.errorMessages = new Array();\n        this.errorMessages.push(errorMsg);\n    };\n    return AWDBlock;\n}());\nexports.AWDBlock = AWDBlock;\n\n},{\"../AWD3ParserUtils/AWD3Utils\":\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\"}],\"awayjs-parsers/lib/AWDParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Float3Attributes_1 = require(\"awayjs-core/lib/attributes/Float3Attributes\");\nvar Float2Attributes_1 = require(\"awayjs-core/lib/attributes/Float2Attributes\");\nvar Byte4Attributes_1 = require(\"awayjs-core/lib/attributes/Byte4Attributes\");\nvar BitmapImageCube_1 = require(\"awayjs-core/lib/image/BitmapImageCube\");\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar PerspectiveProjection_1 = require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nvar OrthographicProjection_1 = require(\"awayjs-core/lib/projections/OrthographicProjection\");\nvar OrthographicOffCenterProjection_1 = require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nvar ByteArray_1 = require(\"awayjs-core/lib/utils/ByteArray\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DirectionalLight_1 = require(\"awayjs-display/lib/display/DirectionalLight\");\nvar PointLight_1 = require(\"awayjs-display/lib/display/PointLight\");\nvar Camera_1 = require(\"awayjs-display/lib/display/Camera\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar Billboard_1 = require(\"awayjs-display/lib/display/Billboard\");\nvar Skybox_1 = require(\"awayjs-display/lib/display/Skybox\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar StaticLightPicker_1 = require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nvar CubeMapShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nvar DirectionalShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nvar PrefabBase_1 = require(\"awayjs-display/lib/prefabs/PrefabBase\");\nvar PrimitiveCapsulePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nvar PrimitiveConePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nvar PrimitiveCubePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nvar PrimitiveCylinderPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nvar PrimitivePlanePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nvar PrimitiveSpherePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nvar PrimitiveTorusPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\nvar SingleCubeTexture_1 = require(\"awayjs-display/lib/textures/SingleCubeTexture\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nvar VertexAnimator_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nvar SkeletonAnimator_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar AmbientEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nvar DiffuseDepthMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nvar DiffuseCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nvar DiffuseGradientMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nvar DiffuseLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nvar DiffuseWrapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nvar EffectAlphaMaskMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nvar EffectColorMatrixMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nvar EffectColorTransformMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nvar EffectEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nvar EffectFogMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nvar EffectFresnelEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nvar EffectLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nvar EffectRimLightMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nvar NormalSimpleWaterMethod_1 = require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nvar ShadowDitheredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nvar ShadowFilteredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nvar SpecularFresnelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nvar ShadowHardMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nvar SpecularAnisotropicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nvar SpecularCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nvar SpecularPhongMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nvar ShadowNearMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nvar ShadowSoftMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\nvar BasicMaterial_1 = require(\"awayjs-display/lib/materials/BasicMaterial\");\nvar AS2SceneGraphFactory_1 = require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\nvar Timeline_1 = require(\"awayjs-display/lib/base/Timeline\");\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\nvar TesselatedFontTable_1 = require(\"awayjs-display/lib/text/TesselatedFontTable\");\nvar TextFormat_1 = require(\"awayjs-display/lib/text/TextFormat\");\nvar AWDBlock_1 = require(\"./AWD3ParserUtils/AWDBlock\");\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\nvar Style_1 = require(\"awayjs-display/lib/base/Style\");\nvar Matrix_1 = require(\"awayjs-core/lib/geom/Matrix\");\nvar MappingMode_1 = require(\"awayjs-display/lib/textures/MappingMode\");\nvar ElementsType_1 = require(\"awayjs-display/lib/graphics/ElementsType\");\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nvar AWDParser = (function (_super) {\n    __extends(AWDParser, _super);\n    /**\n     * Creates a new AWD3Parserutils object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function AWDParser(view) {\n        if (view === void 0) { view = null; }\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\n        //set to \"true\" to have some console.logs in the Console\n        this._debug = false;\n        this._debugTimers = true;\n        this._startedParsing = false;\n        this._texture_users = {};\n        this._parsed_header = false;\n        this._time_all = 0;\n        this._time_graphics = 0;\n        this._time_graphics_bytes = 0;\n        this._time_timeline = 0;\n        this._time_fonts = 0;\n        this._time_textfields = 0;\n        this._time_sounds = 0;\n        this._time_textures = 0;\n        this._time_materials = 0;\n        this._time_sprites = 0;\n        this._num_graphics = 0;\n        this._num_timeline = 0;\n        this._num_fonts = 0;\n        this._num_textfields = 0;\n        this._num_sounds = 0;\n        this._num_textures = 0;\n        this._num_materials = 0;\n        this._num_sprites = 0;\n        //--Parser UTILS---------------------------------------------------------------------------\n        this.shadowMethodListProperties = {\n            1: AWDParser.BADDR,\n            2: AWDParser.BADDR,\n            3: AWDParser.BADDR,\n            101: AWDParser.PROPERTY_NUMBER,\n            102: AWDParser.PROPERTY_NUMBER,\n            103: AWDParser.PROPERTY_NUMBER,\n            201: AWDParser.UINT32,\n            202: AWDParser.UINT32,\n            301: AWDParser.UINT16,\n            302: AWDParser.UINT16,\n            401: AWDParser.UINT8,\n            402: AWDParser.UINT8,\n            601: AWDParser.COLOR,\n            602: AWDParser.COLOR,\n            701: AWDParser.BOOL,\n            702: AWDParser.BOOL,\n            801: AWDParser.MTX4x4 };\n        this.spritePoseAnimationProperties = {\n            1: AWDParser.BOOL,\n            2: AWDParser.BOOL };\n        this.sharedMethodListProperties = {\n            1: AWDParser.BADDR,\n            2: AWDParser.BADDR,\n            3: AWDParser.BADDR,\n            101: AWDParser.PROPERTY_NUMBER,\n            102: AWDParser.PROPERTY_NUMBER,\n            103: AWDParser.PROPERTY_NUMBER,\n            104: AWDParser.PROPERTY_NUMBER,\n            105: AWDParser.PROPERTY_NUMBER,\n            106: AWDParser.PROPERTY_NUMBER,\n            107: AWDParser.PROPERTY_NUMBER,\n            201: AWDParser.UINT32,\n            202: AWDParser.UINT32,\n            301: AWDParser.UINT16,\n            302: AWDParser.UINT16,\n            401: AWDParser.UINT8,\n            402: AWDParser.UINT8,\n            601: AWDParser.COLOR,\n            602: AWDParser.COLOR,\n            701: AWDParser.BOOL,\n            702: AWDParser.BOOL };\n        this._view = view;\n        this._blocks = new Array();\n        this._blocks[0] = new AWDBlock_1.AWDBlock(0, 255);\n        this._blocks[0].data = null; // Zero address means null in AWD\n        this.blendModeDic = new Array(); // used to translate ints to blendMode-strings\n        this.blendModeDic.push(BlendMode_1.BlendMode.NORMAL);\n        this.blendModeDic.push(BlendMode_1.BlendMode.ADD);\n        this.blendModeDic.push(BlendMode_1.BlendMode.ALPHA);\n        this.blendModeDic.push(BlendMode_1.BlendMode.DARKEN);\n        this.blendModeDic.push(BlendMode_1.BlendMode.DIFFERENCE);\n        this.blendModeDic.push(BlendMode_1.BlendMode.ERASE);\n        this.blendModeDic.push(BlendMode_1.BlendMode.HARDLIGHT);\n        this.blendModeDic.push(BlendMode_1.BlendMode.INVERT);\n        this.blendModeDic.push(BlendMode_1.BlendMode.LAYER);\n        this.blendModeDic.push(BlendMode_1.BlendMode.LIGHTEN);\n        this.blendModeDic.push(BlendMode_1.BlendMode.MULTIPLY);\n        this.blendModeDic.push(BlendMode_1.BlendMode.NORMAL);\n        this.blendModeDic.push(BlendMode_1.BlendMode.OVERLAY);\n        this.blendModeDic.push(BlendMode_1.BlendMode.SCREEN);\n        this.blendModeDic.push(BlendMode_1.BlendMode.SHADER);\n        this.blendModeDic.push(BlendMode_1.BlendMode.OVERLAY);\n        this._depthSizeDic = new Array(); // used to translate ints to depthSize-values\n        this._depthSizeDic.push(256);\n        this._depthSizeDic.push(512);\n        this._depthSizeDic.push(2048);\n        this._depthSizeDic.push(1024);\n        this._version = Array(); // will contain 2 int (major-version, minor-version) for awd-version-check\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    AWDParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"awd\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    AWDParser.supportsData = function (data) {\n        return (ParserUtils_1.ParserUtils.toString(data, 3) == 'AWD');\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._iResolveDependency = function (resourceDependency) {\n        // this will be called when Dependency has finished loading.\n        // the ressource dependecniy has a id that point to the awd_block waiting for it.\n        //console.log(\"AWDParser resolve dependencies\";\n        if (resourceDependency.assets.length == 1) {\n            var this_block = this._blocks[parseInt(resourceDependency.id)];\n            if (this_block.type == 82) {\n                var image_asset = resourceDependency.assets[0];\n                this_block.data = image_asset; // Store finished asset\n                // Finalize texture asset to dispatch texture event, which was\n                // previously suppressed while the dependency was loaded.\n                this._pFinalizeAsset(image_asset, this_block.name);\n                if (this._debug)\n                    console.log(\"Parsed Texture: Name = \" + this_block.name);\n            }\n            else if (this_block.type == 44) {\n                var audio_asset = resourceDependency.assets[0];\n                this_block.data = audio_asset; // Store finished asset\n                // Finalize texture asset to dispatch texture event, which was\n                // previously suppressed while the dependency was loaded.\n                //console.log(\"Parsing audio \" + this_block.name);\n                this._pFinalizeAsset(audio_asset, this_block.name);\n                if (this._debug)\n                    console.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n            }\n            else if (this_block.type == 83) {\n                this_block.loaded_dependencies[resourceDependency.sub_id] = resourceDependency.assets[0];\n                this_block.loaded_dependencies_cnt++;\n                if (this._debug)\n                    console.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n                if (this_block.loaded_dependencies_cnt == 6) {\n                    var cube_image_asset = new BitmapImageCube_1.BitmapImageCube(this_block.loaded_dependencies[0].width);\n                    for (var i = 0; i < 6; i++)\n                        cube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n                    this_block.data = cube_image_asset; // Store finished asset\n                    this._pFinalizeAsset(cube_image_asset, this_block.name);\n                    if (this._debug)\n                        console.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n                }\n            }\n            if (this._debugTimers && !this._isParsing)\n                this.updateTimers(this_block.type);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        //not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n        // this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n    };\n    /**\n     * Resolve a dependency name\n     *\n     * @param resourceDependency The dependency to be resolved.\n     */\n    AWDParser.prototype._iResolveDependencyName = function (resourceDependency, asset) {\n        var oldName = asset.name;\n        if (asset) {\n            var block = this._blocks[parseInt(resourceDependency.id)];\n            // Reset name of texture to the one defined in the AWD file,\n            // as opposed to whatever the image parser came up with.\n            asset.resetAssetPath(block.name, null, true);\n        }\n        var newName = asset.name;\n        asset.name = oldName;\n        return newName;\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._pProceedParsing = function () {\n        if (!this._startedParsing) {\n            this._byteData = this._pGetByteData(); //getByteData();\n            this._startedParsing = true;\n        }\n        if (!this._parsed_header) {\n            //----------------------------------------------------------------------------\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n            //----------------------------------------------------------------------------\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;\n            //----------------------------------------------------------------------------\n            //----------------------------------------------------------------------------\n            // Parse header and decompress body if needed\n            this.parseHeader();\n            switch (this._compression) {\n                case AWDParser.DEFLATE:\n                case AWDParser.LZMA:\n                    this._pDieWithError('Compressed AWD formats not yet supported');\n                    break;\n                case AWDParser.UNCOMPRESSED:\n                    this._body = this._byteData;\n                    break;\n            }\n            this._parsed_header = true;\n        }\n        if (this._body) {\n            while (this._body.getBytesAvailable() > 0 && !this.parsingPaused)\n                this.parseNextBlock();\n            //----------------------------------------------------------------------------\n            // Return complete status\n            if (this._body.getBytesAvailable() == 0) {\n                this.dispose();\n                if (this._debugTimers)\n                    console.log(\"Parsing total: \" + (this._time_all | 0) + \"ms\", \" | graphics: \" + this._num_graphics + \", \" + (this._time_graphics | 0) + \"ms\", \" | graphics bytes: \" + this._num_graphics + \", \" + (this._time_graphics_bytes | 0) + \"ms\", \" | timelines: \" + this._num_timeline + \", \" + (this._time_timeline | 0) + \"ms\", \" | fonts: \" + this._num_fonts + \", \" + (this._time_fonts | 0) + \"ms\", \" | sounds: \" + this._num_sounds + \", \" + (this._time_sounds | 0) + \"ms\", \" | mats: \" + this._num_materials + \", \" + (this._time_materials | 0) + \"ms\", \" | textures: \" + this._num_textures + \", \" + (this._time_textures | 0) + \"ms\", \" | sprites: \" + this._num_sprites + \", \" + (this._time_sprites | 0) + \"ms\");\n                return ParserBase_1.ParserBase.PARSING_DONE;\n            }\n            else {\n                return ParserBase_1.ParserBase.MORE_TO_PARSE;\n            }\n        }\n        else {\n            switch (this._compression) {\n                case AWDParser.DEFLATE:\n                case AWDParser.LZMA:\n                    if (this._debug)\n                        console.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n                    break;\n            }\n            // Error - most likely _body not set because we do not support compression.\n            return ParserBase_1.ParserBase.PARSING_DONE;\n        }\n    };\n    AWDParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    AWDParser.prototype.dispose = function () {\n        for (var c in this._blocks) {\n            var b = this._blocks[c];\n            b.dispose();\n        }\n    };\n    AWDParser.prototype.parseNextBlock = function () {\n        var block;\n        var isParsed = false;\n        var ns;\n        var type;\n        var flags;\n        var len;\n        //*\n        if (this._debugTimers)\n            this.start_timeing = performance.now();\n        //*/\n        this._cur_block_id = this._body.readUnsignedInt();\n        ns = this._body.readUnsignedByte();\n        type = this._body.readUnsignedByte();\n        flags = this._body.readUnsignedByte();\n        len = this._body.readUnsignedInt();\n        var blockCompression = BitFlags.test(flags, BitFlags.FLAG4);\n        var blockCompressionLZMA = BitFlags.test(flags, BitFlags.FLAG5);\n        if (this._accuracyOnBlocks) {\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n        }\n        var blockEndAll = this._body.position + len;\n        if (len > this._body.getBytesAvailable()) {\n            this._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n            this._body.position += this._body.getBytesAvailable();\n            return;\n        }\n        //----------------------------------------------------------------------------\n        // Compressed AWD Formats not yet supported\n        if (blockCompression) {\n            this._pDieWithError('Compressed AWD formats not yet supported');\n            this._newBlockBytes = new ByteArray_1.ByteArray();\n            this._body.readBytes(this._newBlockBytes, 0, len);\n            this._newBlockBytes.position = 0;\n        }\n        else {\n            this._newBlockBytes = this._body;\n        }\n        //----------------------------------------------------------------------------\n        // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n        //----------------------------------------------------------------------------\n        //this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n        //----------------------------------------------------------------------------\n        block = new AWDBlock_1.AWDBlock(this._cur_block_id, type);\n        block.len = len;\n        var blockEndBlock = this._newBlockBytes.position + len;\n        if (blockCompression) {\n            this._pDieWithError('Compressed AWD formats not yet supported');\n        }\n        if (this._debug)\n            console.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n        this._blocks[this._cur_block_id] = block;\n        if ((this._version[0] == 3) && (this._version[1] == 0)) {\n            // probably should contain some info about the type of animation\n            var factory = new AS2SceneGraphFactory_1.AS2SceneGraphFactory(this._view);\n            switch (type) {\n                case 24:\n                    this.parseSpriteLibraryBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 25:\n                    this.parseBillBoardLibraryBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 4444:\n                    this.parseAudioBlock(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 133:\n                    this.parseMovieClip(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 134:\n                    this.parseTextField(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 135:\n                    this.parseTesselatedFont(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 136:\n                    this.parseTextFormat(this._cur_block_id);\n                    isParsed = true;\n                    break;\n            }\n        }\n        if ((this._version[0] > 2) || ((this._version[0] >= 2) && (this._version[1] >= 1))) {\n            switch (type) {\n                case 11:\n                    this.parsePrimitves(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 31:\n                    this.parseSkyboxInstance(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 41:\n                    this.parseLight(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 42:\n                    this.parseCamera(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                //  case 43:\n                //      parseTextureProjector(_cur_block_id);\n                //      isParsed = true;\n                //      break;\n                case 51:\n                    this.parseLightPicker(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 81:\n                    this.parseMaterial_v1(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 83:\n                    this.parseCubeTexture(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 91:\n                    this.parseSharedMethodBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 92:\n                    this.parseShadowMethodBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 111:\n                    this.parseSpritePoseAnimation(this._cur_block_id, true);\n                    isParsed = true;\n                    break;\n                case 112:\n                    this.parseSpritePoseAnimation(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 113:\n                    this.parseVertexAnimationSet(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 122:\n                    this.parseAnimatorSet(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 253:\n                    this.parseCommand(this._cur_block_id);\n                    isParsed = true;\n                    break;\n            }\n        }\n        if (isParsed == false) {\n            switch (type) {\n                case 1:\n                    this.parseGraphics(this._cur_block_id);\n                    break;\n                case 22:\n                    this.parseContainer(this._cur_block_id);\n                    break;\n                case 23:\n                    this.parseSpriteInstance(this._cur_block_id);\n                    break;\n                case 81:\n                    this.parseMaterial(this._cur_block_id);\n                    break;\n                case 82:\n                    this.parseTexture(this._cur_block_id);\n                    break;\n                case 101:\n                    this.parseSkeleton(this._cur_block_id);\n                    break;\n                case 102:\n                    this.parseSkeletonPose(this._cur_block_id);\n                    break;\n                case 103:\n                    this.parseSkeletonAnimation(this._cur_block_id);\n                    break;\n                case 121:\n                //this.parseUVAnimation(this._cur_block_id);\n                //break;\n                case 254:\n                    this.parseNameSpace(this._cur_block_id);\n                    break;\n                case 255:\n                    this.parseMetaData(this._cur_block_id);\n                    break;\n                default:\n                    if (this._debug)\n                        console.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n                    this._newBlockBytes.position += len;\n                    break;\n            }\n        }\n        if (this._debug) {\n            if (this._newBlockBytes.position != blockEndBlock)\n                console.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n            if (block.errorMessages) {\n                var len = block.errorMessages.length;\n                for (var msgCnt = 0; msgCnt < len; msgCnt++)\n                    console.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n            }\n            console.log(\"\\n\");\n        }\n        if (this._debugTimers && !this.parsingPaused)\n            this.updateTimers(type);\n        this._body.position = blockEndAll;\n        this._newBlockBytes = null;\n    };\n    AWDParser.prototype.updateTimers = function (type) {\n        var end_timing = performance.now();\n        var time_delta = end_timing - this.start_timeing;\n        this._time_all += time_delta;\n        if (type == 1) {\n            this._time_graphics += time_delta;\n            this._num_graphics++;\n        }\n        else if (type == 133) {\n            this._time_timeline += time_delta;\n            this._num_timeline++;\n        }\n        else if (type == 135) {\n            this._time_fonts += time_delta;\n            this._num_fonts++;\n        }\n        else if (type == 134) {\n            this._time_textfields += time_delta;\n            this._num_textfields++;\n        }\n        else if (type == 44) {\n            this._time_sounds += time_delta;\n            this._num_sounds++;\n        }\n        else if (type == 82) {\n            this._time_textures += time_delta;\n            this._num_textures++;\n        }\n        else if (type == 81) {\n            this._time_materials += time_delta;\n            this._num_materials++;\n        }\n        else if (type == 24) {\n            this._time_sprites += time_delta;\n            this._num_sprites++;\n        }\n    };\n    //--Parser Blocks---------------------------------------------------------------------------\n    AWDParser.prototype.parseTesselatedFont = function (blockID) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var new_font = AssetLibrary_1.AssetLibrary.getAsset(this._blocks[blockID].name);\n        var newfont = false;\n        if (new_font == undefined) {\n            new_font = new Font_1.Font();\n            newfont = true;\n        }\n        var font_style_cnt = this._newBlockBytes.readUnsignedInt();\n        var font_style_char_cnt;\n        var font_style_name;\n        var new_font_style;\n        var font_style_char;\n        var attr_count = 0;\n        var sm_len;\n        var sm_end;\n        var str_ftype, str_type, str_len, str_end;\n        for (var i = 0; i < font_style_cnt; ++i) {\n            font_style_name = this.parseVarStr();\n            // dirty hack for icycle\n            // we use bold chars for non-latin chars, but we use regular for � sign,\n            // so the dirty hack is to merge the regular and the bold style\n            if ((this._blocks[blockID].name == \"Tahoma\") && (font_style_name == \"RegularStyle\")) {\n                font_style_name = \"BoldStyle\";\n            }\n            new_font_style = new_font.get_font_table(font_style_name, TesselatedFontTable_1.TesselatedFontTable.assetType);\n            new_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n            new_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n            new_font_style.ascent = this._newBlockBytes.readFloat();\n            new_font_style.descent = this._newBlockBytes.readFloat();\n            //console.log(new_font_style.get_whitespace_width());\n            font_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n            for (var j = 0; j < font_style_char_cnt; ++j) {\n                // todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n                font_style_char = this._newBlockBytes.readUnsignedInt();\n                var char_width = this._newBlockBytes.readFloat();\n                sm_len = this._newBlockBytes.readUnsignedInt();\n                sm_end = this._newBlockBytes.position + sm_len;\n                // Loop through data streams\n                while (this._newBlockBytes.position < sm_end) {\n                    // Type, field type, length\n                    str_type = this._newBlockBytes.readUnsignedByte();\n                    str_ftype = this._newBlockBytes.readUnsignedByte();\n                    str_len = this._newBlockBytes.readUnsignedInt();\n                    str_end = this._newBlockBytes.position + str_len;\n                    if (str_type == 2) {\n                        var indices = new Array();\n                        for (var idx = 0; this._newBlockBytes.position < str_end; idx++)\n                            indices[idx] = this._newBlockBytes.readUnsignedShort();\n                    }\n                    else if (str_type == 11) {\n                        attr_count = 20;\n                        var curveData = new ByteArray_1.ByteArray(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else if (str_type == 12) {\n                        attr_count = 12;\n                        var curveData = new ByteArray_1.ByteArray(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else if (str_type == 10) {\n                        attr_count = 28;\n                        var curveData = new ByteArray_1.ByteArray(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else {\n                        this._newBlockBytes.position = str_end;\n                    }\n                }\n                if (curveData) {\n                    var vertexBuffer = new AttributesBuffer_1.AttributesBuffer(attr_count, str_len / attr_count);\n                    vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\n                    var curve_elements = new TriangleElements_1.TriangleElements(vertexBuffer);\n                    curve_elements.setPositions(new Float2Attributes_1.Float2Attributes(vertexBuffer));\n                    if (attr_count == 20)\n                        curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.Float3Attributes(vertexBuffer));\n                    else if (attr_count == 12)\n                        curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.Byte4Attributes(vertexBuffer, false));\n                    //add UVs if they exist in the data\n                    if (attr_count == 28)\n                        curve_elements.setUVs(new Float2Attributes_1.Float2Attributes(vertexBuffer));\n                    new_font_style.setChar(font_style_char.toString(), curve_elements, char_width);\n                }\n            }\n        }\n        this.parseProperties(null);\n        this.parseUserAttributes();\n        if (newfont) {\n            this._pFinalizeAsset(new_font, name);\n        }\n        this._blocks[blockID].data = new_font;\n        if (this._debug)\n            console.log(\"Parsed a font: Name = '\" + name);\n    };\n    AWDParser.prototype.parseTextFormat = function (blockID) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var font = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var font_style_name = this.parseVarStr();\n        var newTextFormat = new TextFormat_1.TextFormat();\n        newTextFormat.font_name = font.name;\n        // todo:  atm in awd this will always default to get a TesselatedFontTable. need to find a way to request the correct type here\n        var font_table = font.get_font_table(font_style_name);\n        if (font_table != null) {\n            newTextFormat.font_style = font_style_name;\n            newTextFormat.font_table = font_table;\n        }\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mat.bothSides = true;\n        mat.curves = true;\n        var num_uv_values = this._newBlockBytes.readUnsignedByte();\n        var uv_values = [];\n        for (var uvcnt = 0; uvcnt < num_uv_values; uvcnt++)\n            uv_values[uvcnt] = this._newBlockBytes.readFloat();\n        newTextFormat.uv_values = uv_values;\n        var format_props = this.parseProperties(AWDParser.textFormatProperties);\n        newTextFormat.size = format_props.get(1, 12);\n        newTextFormat.letterSpacing = format_props.get(2, 0);\n        //newTextFormat.rotated = format_props.get(3,false);\n        newTextFormat.kerning = format_props.get(4, true);\n        //newTextFormat.baseline_shift = format_props.get(5,1);\n        var tf_align_int = format_props.get(6, 0);\n        if (tf_align_int == 1) {\n            newTextFormat.align = \"right\";\n        }\n        else if (tf_align_int == 2) {\n            newTextFormat.align = \"center\";\n        }\n        newTextFormat.indent = format_props.get(7, 0);\n        newTextFormat.leftMargin = format_props.get(8, 0);\n        newTextFormat.rightMargin = format_props.get(9, 0);\n        newTextFormat.leading = format_props.get(10, 0);\n        newTextFormat.material = mat;\n        this.parseUserAttributes(); // textformat has no extra-properties\n        //newTextFormat.extra =\n        this._pFinalizeAsset(newTextFormat, name);\n        this._blocks[blockID].data = newTextFormat;\n        if (this._debug)\n            console.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \" + font.name);\n    };\n    AWDParser.prototype.parseTextField = function (blockID, factory) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n        var text_field_type = this._newBlockBytes.readUnsignedByte();\n        newTextField.type = AWDParser.textFieldTypes[text_field_type];\n        if (text_field_type == 3)\n            newTextField.displayAsPassword = true;\n        //\n        newTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n        newTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n        var num_paragraphs = this._newBlockBytes.readUnsignedInt();\n        var complete_text = \"\";\n        //console.log(\"num_paragraphs  '\" + num_paragraphs);\n        for (var paracnt = 0; paracnt < num_paragraphs; paracnt++) {\n            var num_textruns = this._newBlockBytes.readUnsignedInt();\n            //console.log(\"num_textruns  '\" + num_textruns);\n            for (var textrun_cnt = 0; textrun_cnt < num_textruns; textrun_cnt++) {\n                var text_format = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n                var txt_length = this._newBlockBytes.readUnsignedInt();\n                //console.log(\"txt_length  '\" + txt_length);\n                if (txt_length > 0) {\n                    var this_txt = this._newBlockBytes.readUTFBytes(txt_length);\n                    //newTextField.appendText(this_txt, text_format);\n                    complete_text += this_txt;\n                }\n            }\n        }\n        newTextField.textFormat = text_format;\n        newTextField.text = complete_text;\n        //newTextField.construct_graphics();\n        // todo: optional matrix etc can be put in properties.\n        var props = this.parseProperties(AWDParser.textFieldProperties);\n        newTextField.selectable = props.get(1, false);\n        newTextField.border = props.get(3, false);\n        //newTextField.renderHTML =  props.get(4, false);\n        //newTextField.scrollable =  props.get(5, false);\n        //newTextField.text_flow =  props.get(7, 0);\n        //newTextField.orientationMode =  props.get(8, 0);\n        //newTextField.line_mode =  props.get(9, 0);\n        newTextField.extra = this.parseUserAttributes();\n        //console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n        this._pFinalizeAsset(newTextField, name);\n        this._blocks[blockID].data = newTextField;\n        if (this._debug)\n            console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n    };\n    // Block ID = 25\n    AWDParser.prototype.parseBillBoardLibraryBlock = function (blockID) {\n        var name = this.parseVarStr();\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mat.bothSides = true;\n        var billboard = new Billboard_1.Billboard(mat);\n        // todo: optional matrix etc can be put in properties.\n        this.parseProperties(null);\n        billboard.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(billboard, name);\n        this._blocks[blockID].data = billboard;\n        if (this._debug)\n            console.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n    };\n    // Block ID = 24\n    AWDParser.prototype.parseSpriteLibraryBlock = function (blockID) {\n        var name = this.parseVarStr();\n        var data_id = this._newBlockBytes.readUnsignedInt();\n        var graphics = this._blocks[data_id].data;\n        this._blocks[blockID].geoID = data_id;\n        var num_materials = this._newBlockBytes.readUnsignedShort();\n        var materials = new Array();\n        var materialNames = new Array();\n        var mat;\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial());\n            //mat.preserveAlpha = true;\n            //mat.alphaBlending = true;\n            mat.useColorTransform = true;\n            materials[materials_parsed] = mat;\n            materialNames[materials_parsed] = mat.name;\n        }\n        var start_timeing = performance.now();\n        var sprite = new Sprite_1.Sprite();\n        graphics.copyTo(sprite.graphics);\n        var end_timing = performance.now();\n        var time_delta = end_timing - start_timeing;\n        this._time_graphics_bytes += time_delta;\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\n            sprite.material = materials[0];\n        }\n        else if (materials.length > 1) {\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n            // than materials, repeat the last material for all remaining sub-sprites.\n            for (var i = 0; i < sprite.graphics.count; i++)\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n        }\n        var count = this._newBlockBytes.readUnsignedShort();\n        //if(count != sprite.graphics.count)\n        //\tthrow new Error(\"num elements does not match num subsprites\";\n        for (var i = 0; i < count; i++) {\n            var type = this._newBlockBytes.readUnsignedByte();\n            var sampler = new Sampler2D_1.Sampler2D();\n            var graphic = sprite.graphics.getGraphicAt(i);\n            if (graphic) {\n                graphic.style = new Style_1.Style();\n                graphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n            }\n            if (type == 3) {\n                var tx = this._newBlockBytes.readFloat();\n                var ty = this._newBlockBytes.readFloat();\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.Matrix(0, 0, 0, 0, tx, ty);\n                }\n            }\n            else if (type == 4) {\n                var matrix = this.parseMatrix32RawData();\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.Matrix(matrix);\n                }\n            }\n            else if (type == 5) {\n                var newMatrix = new Matrix_1.Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = newMatrix;\n                }\n            }\n            else if (type == 6) {\n                var x = this._newBlockBytes.readFloat();\n                var y = this._newBlockBytes.readFloat();\n                var width = this._newBlockBytes.readFloat();\n                var height = this._newBlockBytes.readFloat();\n                var matrix = this.parseMatrix32RawData();\n                if (graphic) {\n                    sampler.imageRect = new Rectangle_1.Rectangle(x, y, width, height);\n                    graphic.material.imageRect = true;\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.Matrix(matrix);\n                }\n            }\n            if (graphic) {\n                //check if curves are needed\n                if (graphic.elements.getCustomAtributes(\"curves\"))\n                    graphic.material.curves = true;\n            }\n            // todo: finish optional properties (spreadmode + focalpoint)\n            this._newBlockBytes.readUnsignedInt();\n        }\n        this.parseProperties(null);\n        sprite.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(sprite, name);\n        this._blocks[blockID].data = sprite;\n        if (this._debug)\n            console.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n    };\n    AWDParser.prototype.parseAudioBlock = function (blockID, factory) {\n        //var asset:Audio;todo create asset for audio\n        this._blocks[blockID].name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        var data_len;\n        // External\n        if (type == 0) {\n            data_len = this._newBlockBytes.readUnsignedInt();\n            var url;\n            url = this._newBlockBytes.readUTFBytes(data_len);\n            // todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.URLRequest(url), false, null, true);\n        }\n        else {\n            // todo: exporter does not export embed sounds yet\n            data_len = this._newBlockBytes.readUnsignedInt();\n            var data = new ByteArray_1.ByteArray(data_len);\n            this._newBlockBytes.readBytes(data, 0, data_len);\n            // todo parse sound from bytes\n            // this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        //this._blocks[blockID].data = asset;todo\n        if (this._debug)\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n    };\n    //Block ID = 4\n    AWDParser.prototype.parseMovieClip = function (blockID, factory) {\n        var i;\n        var j;\n        var cmd_asset;\n        var new_timeline = new Timeline_1.Timeline();\n        var new_mc = factory.createMovieClip(new_timeline);\n        var name = this.parseVarStr();\n        // register list of potential childs\n        // a potential child can be reused on a timeline (added / removed / added)\n        // However, for each potential child, we need to register the max-number of instances that a frame contains\n        // we parse 2 lists of potential-childs:\n        // -\tthe first list contains potential-childs that are only ever instanced once per frame.\n        // -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n        // on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n        // hence we need to be careful to register all objects in correct order.\n        var num_potential_childs = this._newBlockBytes.readUnsignedShort();\n        for (i = 0; i < num_potential_childs; i++) {\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            if (cmd_asset != null) {\n                new_timeline.registerPotentialChild(cmd_asset);\n            }\n            else {\n                //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n                //new_mc.registerPotentialChild(cmd_asset);\n                console.log(\"ERROR when collecting objects for timeline\");\n            }\n        }\n        var num_all_display_instances = num_potential_childs;\n        var num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n        for (i = 0; i < num_potential_childs_multi_instanced; i++) {\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            var num_instances = this._newBlockBytes.readUnsignedShort();\n            num_all_display_instances += num_instances;\n            if (cmd_asset != null) {\n                for (j = 0; j < num_instances; j++)\n                    new_timeline.registerPotentialChild(cmd_asset);\n            }\n            else {\n                for (j = 0; j < num_instances; j++) {\n                    //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n                    //new_mc.registerPotentialChild(cmd_asset);\n                    console.log(\"ERROR when collecting objects for timeline\");\n                }\n            }\n        }\n        if (this._debug)\n            console.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n        // register list of potential sounds - for now we always have 0 sounds\n        var num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n        var str_cnt = this._newBlockBytes.readUnsignedByte();\n        var str_len = 0;\n        var str_data_type = 0;\n        var str_type = 0;\n        var str_counter = 0;\n        for (i = 0; i < str_cnt; i++) {\n            // the first 6 lists are not optional and always in same order\n            // hence we can get type by incremental counter instead of stored uint8\n            if (str_counter < 6)\n                str_type = str_counter;\n            else\n                str_type = this._newBlockBytes.readUnsignedByte();\n            // get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n            str_data_type = this._newBlockBytes.readUnsignedByte();\n            // size of this stream in byte\n            str_len = this._newBlockBytes.readUnsignedInt();\n            if (str_len > 0) {\n                var keyframes_start_indices_data = new ByteArray_1.ByteArray(str_len);\n                this._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n                var new_buffer;\n                //console.log(\"str_data_type = \"+str_type);\n                switch (str_data_type) {\n                    case 1:\n                        new_buffer = new Uint8Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                    case 2:\n                        new_buffer = new Uint16Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                    case 4:\n                        new_buffer = new Uint32Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                }\n                switch (str_type) {\n                    case 0:\n                        new_timeline.keyframe_durations = new_buffer;\n                        new_timeline.numKeyFrames = str_len / str_data_type;\n                        break;\n                    case 1:\n                        new_timeline.frame_command_indices = new_buffer;\n                        break;\n                    case 2:\n                        new_timeline.frame_recipe = new_buffer;\n                        break;\n                    case 3:\n                        new_timeline.command_length_stream = new_buffer;\n                        break;\n                    case 4:\n                        new_timeline.command_index_stream = new_buffer;\n                        break;\n                    case 5:\n                        new_timeline.add_child_stream = new_buffer;\n                        break;\n                    case 6:\n                        new_timeline.remove_child_stream = new_buffer;\n                        break;\n                    case 7:\n                        new_timeline.update_child_stream = new_buffer;\n                        break;\n                    case 8:\n                        new_timeline.update_child_props_indices_stream = new_buffer;\n                        break;\n                    case 9:\n                        new_timeline.update_child_props_length_stream = new_buffer;\n                        break;\n                    case 10:\n                        new_timeline.property_type_stream = new_buffer;\n                        break;\n                    case 11:\n                        new_timeline.property_index_stream = new_buffer;\n                        break;\n                    case 12:\n                        new_timeline.properties_stream_int = new_buffer;\n                        break;\n                }\n            }\n            str_counter++;\n        }\n        var lc = 0;\n        var float_array_data;\n        str_cnt = this._newBlockBytes.readUnsignedByte();\n        for (i = 0; i < str_cnt; i++) {\n            str_type = this._newBlockBytes.readUnsignedByte();\n            str_len = this._newBlockBytes.readUnsignedInt();\n            switch (str_type) {\n                case 0:\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_scale_rot = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 1:\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_pos = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 2:\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_all = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 3:\n                    float_array_data = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_ct = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 4:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    //console.log(\"start reading labels \"+str_len);\n                    for (lc = 0; lc < str_len; lc++) {\n                        new_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n                    }\n                    break;\n                case 5:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    var string_props_array = [];\n                    for (lc = 0; lc < str_len; lc++) {\n                        string_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n                    }\n                    new_timeline.properties_stream_strings = string_props_array;\n                    break;\n                case 6:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    for (lc = 0; lc < str_len; lc++) {\n                        var frame_index = this._newBlockBytes.readUnsignedShort();\n                        var one_str_len = this._newBlockBytes.readUnsignedInt();\n                        //this._newBlockBytes.readUTFBytes(one_str_len);\n                        new_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n                    }\n                    break;\n            }\n        }\n        new_timeline.init();\n        var sceneID = 0;\n        var fps = 25;\n        this.parseProperties(AWDParser.movieClipProperties);\n        this.parseUserAttributes();\n        this._pFinalizeAsset(new_mc, name);\n        this._blocks[blockID].data = new_mc;\n        if (this._debug)\n            console.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\n    };\n    //Block ID = 1\n    AWDParser.prototype.parseGraphics = function (blockID) {\n        var graphics = new Graphics_1.Graphics();\n        // Read name and sub count\n        var name = this.parseVarStr();\n        var numElements = this._newBlockBytes.readUnsignedShort();\n        // Read optional properties\n        var props = this.parseProperties(AWDParser.graphicsProperties);\n        var geoScaleU = props.get(1, 1);\n        var geoScaleV = props.get(2, 1);\n        var target_start_idx = 0;\n        var target_vert_cnt = 0;\n        var element_type = ElementType.STANDART_STREAMS;\n        var target_element = null;\n        // Loop through sub sprites\n        for (var elements_parsed = 0; elements_parsed < numElements; elements_parsed++) {\n            var is_curve_elements = false;\n            var attr_count = 0;\n            var sm_len, sm_end;\n            var w_indices;\n            var weights;\n            target_start_idx = 0;\n            target_vert_cnt = 0;\n            element_type = ElementType.STANDART_STREAMS;\n            target_element = null;\n            sm_len = this._newBlockBytes.readUnsignedInt();\n            sm_end = this._newBlockBytes.position + sm_len;\n            var elementsProps = this.parseProperties(AWDParser.elementsProperties);\n            // Loop through data streams\n            while (this._newBlockBytes.position < sm_end) {\n                var idx = 0;\n                var str_ftype, str_type, str_len, str_end;\n                // Type, field type, length\n                str_type = this._newBlockBytes.readUnsignedByte();\n                str_ftype = this._newBlockBytes.readUnsignedByte();\n                str_len = this._newBlockBytes.readUnsignedInt();\n                str_end = this._newBlockBytes.position + str_len;\n                var x, y, z;\n                if (str_type == 1) {\n                    var verts = new Array();\n                    while (this._newBlockBytes.position < str_end) {\n                        x = this.readNumber(this._accuracyGeo);\n                        y = this.readNumber(this._accuracyGeo);\n                        z = this.readNumber(this._accuracyGeo);\n                        verts[idx++] = x;\n                        verts[idx++] = y;\n                        verts[idx++] = z;\n                    }\n                }\n                else if (str_type == 2) {\n                    var indices = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        indices[idx++] = this._newBlockBytes.readUnsignedShort();\n                }\n                else if (str_type == 3) {\n                    var uvs = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        uvs[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 4) {\n                    var normals = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        normals[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 6) {\n                    w_indices = Array();\n                    while (this._newBlockBytes.position < str_end)\n                        w_indices[idx++] = this._newBlockBytes.readUnsignedShort() * 3;\n                }\n                else if (str_type == 7) {\n                    weights = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        weights[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 8) {\n                    this._newBlockBytes.position = str_end;\n                }\n                else if (str_type == 9) {\n                    this._newBlockBytes.position = str_end;\n                }\n                else if (str_type == 10) {\n                    element_type = ElementType.CONCENATED_STREAMS;\n                    attr_count = 28;\n                    var curveData = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 11) {\n                    element_type = ElementType.CONCENATED_STREAMS;\n                    attr_count = 20;\n                    var curveData = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 12) {\n                    element_type = ElementType.CONCENATED_STREAMS;\n                    attr_count = 12;\n                    var curveData = new ByteArray_1.ByteArray(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 13) {\n                    element_type = ElementType.SHARED_BUFFER;\n                    var targetGraphic = (this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n                    var element_idx = this._newBlockBytes.readUnsignedByte();\n                    target_element = targetGraphic.getGraphicAt(element_idx).elements;\n                    target_start_idx = this._newBlockBytes.readUnsignedInt();\n                    target_vert_cnt = this._newBlockBytes.readUnsignedInt();\n                }\n                else {\n                    console.log(\"skipping unknown subgeom stream\");\n                    this._newBlockBytes.position = str_end;\n                }\n            }\n            this.parseUserAttributes(); // Ignore sub-sprite attributes for now\n            if (element_type == ElementType.CONCENATED_STREAMS) {\n                //console.log(\"str_len/attr_count = \"+str_len/attr_count)\n                var vertexBuffer = new AttributesBuffer_1.AttributesBuffer(attr_count, str_len / attr_count);\n                vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\n                var curve_elements = new TriangleElements_1.TriangleElements(vertexBuffer);\n                curve_elements.setPositions(new Float2Attributes_1.Float2Attributes(vertexBuffer));\n                if (attr_count == 20) {\n                    curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.Float3Attributes(vertexBuffer));\n                }\n                else if (attr_count == 12) {\n                    curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.Byte4Attributes(vertexBuffer, false));\n                }\n                if (attr_count == 28)\n                    curve_elements.setUVs(new Float2Attributes_1.Float2Attributes(vertexBuffer));\n                graphics.addGraphic(curve_elements);\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements with curves\");\n            }\n            else if (element_type == ElementType.STANDART_STREAMS) {\n                var triangle_elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n                if (weights)\n                    triangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n                if (normals)\n                    triangle_elements.autoDeriveNormals = false;\n                triangle_elements.autoDeriveTangents = true;\n                triangle_elements.setIndices(indices);\n                triangle_elements.setPositions(verts);\n                triangle_elements.setNormals(normals);\n                triangle_elements.setUVs(uvs);\n                triangle_elements.setJointWeights(weights);\n                triangle_elements.setJointIndices(w_indices);\n                var scaleU = elementsProps.get(1, 1);\n                var scaleV = elementsProps.get(2, 1);\n                var setSubUVs = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n                if ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n                    setSubUVs = true;\n                    scaleU = geoScaleU / scaleU;\n                    scaleV = geoScaleV / scaleV;\n                }\n                if (setSubUVs)\n                    triangle_elements.scaleUV(scaleU, scaleV);\n                graphics.addGraphic(triangle_elements);\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements\");\n            }\n            else if (element_type == ElementType.SHARED_BUFFER) {\n                var graphic = graphics.addGraphic(target_element);\n                graphic.offset = target_start_idx;\n                graphic.count = target_vert_cnt;\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements that shares buffer from target geom\");\n            }\n        }\n        if ((geoScaleU != 1) || (geoScaleV != 1))\n            graphics.scaleUV(geoScaleU, geoScaleV);\n        this.parseUserAttributes();\n        this._pFinalizeAsset(graphics, name);\n        this._blocks[blockID].data = graphics;\n        if (this._debug)\n            console.log(\"Parsed Graphics: Name = \" + name);\n    };\n    //Block ID = 11\n    AWDParser.prototype.parsePrimitves = function (blockID) {\n        var name;\n        var prefab;\n        var primType;\n        var elements_parsed;\n        var props;\n        var bsm;\n        // Read name and sub count\n        name = this.parseVarStr();\n        primType = this._newBlockBytes.readUnsignedByte();\n        props = this.parseProperties(AWDParser.primitiveProperties);\n        // to do, not all properties are set on all primitives\n        switch (primType) {\n            case 1:\n                prefab = new PrimitivePlanePrefab_1.PrimitivePlanePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n                break;\n            case 2:\n                prefab = new PrimitiveCubePrefab_1.PrimitiveCubePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n                break;\n            case 3:\n                prefab = new PrimitiveSpherePrefab_1.PrimitiveSpherePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n                break;\n            case 4:\n                prefab = new PrimitiveCylinderPrefab_1.PrimitiveCylinderPrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n                if (!props.get(701, true))\n                    prefab.topClosed = false;\n                if (!props.get(702, true))\n                    prefab.bottomClosed = false;\n                if (!props.get(703, true))\n                    prefab.yUp = false;\n                break;\n            case 5:\n                prefab = new PrimitiveConePrefab_1.PrimitiveConePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n                break;\n            case 6:\n                prefab = new PrimitiveCapsulePrefab_1.PrimitiveCapsulePrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n                break;\n            case 7:\n                prefab = new PrimitiveTorusPrefab_1.PrimitiveTorusPrefab(null, ElementsType_1.ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n                break;\n            default:\n                prefab = new PrefabBase_1.PrefabBase();\n                console.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n                break;\n        }\n        if ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n        }\n        this.parseUserAttributes();\n        prefab.name = name;\n        this._pFinalizeAsset(prefab, name);\n        this._blocks[blockID].data = prefab;\n        if (this._debug) {\n            if ((primType < 0) || (primType > 7))\n                primType = 0;\n            console.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n        }\n    };\n    // Block ID = 22\n    AWDParser.prototype.parseContainer = function (blockID) {\n        var name;\n        var mtx;\n        var ctr;\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mtx = this.parseMatrix3D();\n        name = this.parseVarStr();\n        var parentName = \"Root (TopLevel)\";\n        ctr = new DisplayObjectContainer_1.DisplayObjectContainer();\n        ctr.transform.matrix3D = mtx;\n        if (parent) {\n            parent.addChild(ctr);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(ctr);\n        }\n        // in AWD version 2.1 we read the Container properties\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            var props = this.parseProperties(AWDParser.containerProperties);\n            ctr.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n        }\n        else {\n            this.parseProperties(null);\n        }\n        // the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n        ctr.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(ctr, name);\n        this._blocks[blockID].data = ctr;\n        if (this._debug)\n            console.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n    };\n    // Block ID = 23\n    AWDParser.prototype.parseSpriteInstance = function (blockID) {\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var data_id = this._newBlockBytes.readUnsignedInt();\n        var asset = this._blocks[data_id].data;\n        var graphics;\n        var prefab;\n        var isPrefab = false;\n        if (asset.isAsset(Graphics_1.Graphics)) {\n            graphics = asset;\n        }\n        else {\n            isPrefab = true;\n            prefab = asset;\n        }\n        this._blocks[blockID].geoID = data_id;\n        var num_materials = this._newBlockBytes.readUnsignedShort();\n        var materials = new Array();\n        var materialNames = new Array();\n        var mat;\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial());\n            materials[materials_parsed] = mat;\n            materialNames[materials_parsed] = mat.name;\n        }\n        var sprite;\n        if (isPrefab) {\n            sprite = prefab.getNewObject();\n        }\n        else {\n            sprite = new Sprite_1.Sprite();\n            graphics.copyTo(sprite.graphics);\n        }\n        sprite.transform.matrix3D = mtx;\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(sprite);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(sprite);\n        }\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\n            sprite.material = materials[0];\n        }\n        else if (materials.length > 1) {\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n            // than materials, repeat the last material for all remaining sub-sprites.\n            for (var i = 0; i < sprite.graphics.count; i++)\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n        }\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            var props = this.parseProperties(AWDParser.spriteInstanceProperties);\n            sprite.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n            sprite.castsShadows = props.get(5, true);\n        }\n        else {\n            this.parseProperties(null);\n        }\n        sprite.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(sprite, name);\n        this._blocks[blockID].data = sprite;\n        if (this._debug) {\n            if (isPrefab)\n                console.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n            else\n                console.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n        }\n    };\n    //Block ID 31\n    AWDParser.prototype.parseSkyboxInstance = function (blockID) {\n        var name = this.parseVarStr();\n        var asset = new Skybox_1.Skybox();\n        var tex = new SingleCubeTexture_1.SingleCubeTexture(this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImageCube());\n        asset.texture = tex;\n        this.parseProperties(null);\n        asset.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(asset, name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n    };\n    //Block ID = 41\n    AWDParser.prototype.parseLight = function (blockID) {\n        var light;\n        var newShadowMapper;\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var lightType = this._newBlockBytes.readUnsignedByte();\n        var props = this.parseProperties(AWDParser.lightProperties);\n        var shadowMapperType = props.get(9, 0);\n        var lightTypes = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n        var shadowMapperTypes = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n        if (lightType == 1) {\n            light = new PointLight_1.PointLight();\n            light.radius = props.get(1, 90000);\n            light.fallOff = props.get(2, 100000);\n            if (shadowMapperType > 0) {\n                if (shadowMapperType == 4) {\n                    newShadowMapper = new CubeMapShadowMapper_1.CubeMapShadowMapper();\n                }\n            }\n            light.transform.matrix3D = mtx;\n        }\n        if (lightType == 2) {\n            light = new DirectionalLight_1.DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n            if (shadowMapperType > 0) {\n                if (shadowMapperType == 1) {\n                    newShadowMapper = new DirectionalShadowMapper_1.DirectionalShadowMapper();\n                }\n            }\n        }\n        light.color = props.get(3, 0xffffff);\n        light.specular = props.get(4, 1.0);\n        light.diffuse = props.get(5, 1.0);\n        light.ambientColor = props.get(7, 0xffffff);\n        light.ambient = props.get(8, 0.0);\n        // if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n        if (newShadowMapper) {\n            if (newShadowMapper instanceof CubeMapShadowMapper_1.CubeMapShadowMapper) {\n                if (props.get(10, 1) != 1)\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n            }\n            else {\n                if (props.get(10, 2) != 2)\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n            }\n            light.shadowMapper = newShadowMapper;\n            light.castsShadows = true;\n        }\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(light);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(light);\n        }\n        this.parseUserAttributes();\n        this._pFinalizeAsset(light, name);\n        this._blocks[blockID].data = light;\n        if (this._debug)\n            console.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n    };\n    //Block ID = 43\n    AWDParser.prototype.parseCamera = function (blockID) {\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var projection;\n        this._newBlockBytes.readUnsignedByte(); //set as active camera\n        this._newBlockBytes.readShort(); //lengthof lenses - not used yet\n        var projectiontype = this._newBlockBytes.readShort();\n        var props = this.parseProperties(AWDParser.cameraProperties);\n        switch (projectiontype) {\n            case 5001:\n                projection = new PerspectiveProjection_1.PerspectiveProjection(props.get(101, 60));\n                break;\n            case 5002:\n                projection = new OrthographicProjection_1.OrthographicProjection(props.get(101, 500));\n                break;\n            case 5003:\n                projection = new OrthographicOffCenterProjection_1.OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n                break;\n            default:\n                console.log(\"unsupportedLenstype\");\n                return;\n        }\n        var camera = new Camera_1.Camera(projection);\n        camera.transform.matrix3D = mtx;\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(camera);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(camera);\n        }\n        camera.name = name;\n        props = this.parseProperties(AWDParser.cameraPivotProperties);\n        camera.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n        camera.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(camera, name);\n        this._blocks[blockID].data = camera;\n        if (this._debug)\n            console.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n    };\n    //Block ID = 51\n    AWDParser.prototype.parseLightPicker = function (blockID) {\n        var name = this.parseVarStr();\n        var numLights = this._newBlockBytes.readUnsignedShort();\n        var lightsArray = new Array();\n        var lightsArrayNames = new Array();\n        for (var k = 0; k < numLights; k++) {\n            var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            lightsArray.push(light);\n            lightsArrayNames.push(light.name);\n        }\n        if (lightsArray.length == 0) {\n            this._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n            this.parseUserAttributes();\n            return; //return without any more parsing for this block\n        }\n        var lightPick = new StaticLightPicker_1.StaticLightPicker(lightsArray);\n        lightPick.name = name;\n        this.parseUserAttributes();\n        this._pFinalizeAsset(lightPick, name);\n        this._blocks[blockID].data = lightPick;\n        if (this._debug)\n            console.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n    };\n    //Block ID = 81\n    AWDParser.prototype.parseMaterial = function (blockID) {\n        // TODO: not used\n        ////blockLength = block.len;\n        var name;\n        var type;\n        var props;\n        var mat;\n        var finalize;\n        var num_methods;\n        var methods_parsed;\n        var returnedArray;\n        name = this.parseVarStr();\n        type = this._newBlockBytes.readUnsignedByte();\n        num_methods = this._newBlockBytes.readUnsignedByte();\n        // Read material numerical properties\n        props = this.parseProperties(AWDParser.materialProperties);\n        methods_parsed = 0;\n        while (methods_parsed < num_methods) {\n            var method_type;\n            method_type = this._newBlockBytes.readUnsignedShort();\n            this.parseProperties(null);\n            this.parseUserAttributes();\n            methods_parsed += 1;\n        }\n        var debugString = \"\";\n        if (type === 1) {\n            debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n            var color = props.get(1, 0xffffff);\n            if (this.materialMode < 2) {\n                mat = new MethodMaterial_1.MethodMaterial(color, props.get(10, 1.0));\n            }\n            else {\n                mat = new MethodMaterial_1.MethodMaterial(color);\n                mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n            }\n        }\n        else if (type === 2) {\n            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(2, 0)].data);\n            mat = new MethodMaterial_1.MethodMaterial();\n            mat.ambientMethod.texture = texture;\n            if (this.materialMode < 2) {\n                mat.alphaBlending = props.get(11, false);\n                mat.alpha = props.get(10, 1.0);\n                debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n            }\n            else {\n                mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n            }\n        }\n        mat.extra = this.parseUserAttributes();\n        mat.alphaThreshold = props.get(12, 0.0);\n        mat.style.sampler = new Sampler2D_1.Sampler2D(props.get(13, false));\n        this._pFinalizeAsset(mat, name);\n        this._blocks[blockID].data = mat;\n        if (this._debug)\n            console.log(debugString);\n    };\n    // Block ID = 81 AWD2.1\n    AWDParser.prototype.parseMaterial_v1 = function (blockID) {\n        var mat;\n        var diffuseImage;\n        var normalImage;\n        var specImage;\n        var name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        var num_methods = this._newBlockBytes.readUnsignedByte();\n        var props = this.parseProperties(AWDParser.material_v1Properties);\n        var spezialType = props.get(4, 0);\n        var debugString = \"Parsed Material \";\n        if (spezialType >= 2) {\n            this._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n            return;\n        }\n        if (type <= 2) {\n            if (this.materialMode == 1)\n                spezialType = 0;\n            else if (this.materialMode == 2)\n                spezialType = 1;\n            if (spezialType < 2) {\n                if (type == 1) {\n                    var color = props.get(1, 0xcccccc); //TODO temporarily swapped so that diffuse color goes to ambient\n                    if (spezialType == 1) {\n                        mat = new MethodMaterial_1.MethodMaterial(color);\n                        mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                        debugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n                    }\n                    else {\n                        mat = new MethodMaterial_1.MethodMaterial(color, props.get(10, 1.0));\n                        mat.alphaBlending = props.get(11, false);\n                        debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n                    }\n                }\n                else if (type == 2) {\n                    var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(2, 0)].data);\n                    mat = new MethodMaterial_1.MethodMaterial();\n                    mat.ambientMethod.texture = texture;\n                    if (spezialType == 1) {\n                        mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                        debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n                    }\n                    else {\n                        mat.alpha = props.get(10, 1.0);\n                        mat.alphaBlending = props.get(11, false);\n                        debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n                    }\n                }\n                diffuseImage = this._blocks[props.get(17, 0)].data;\n                normalImage = this._blocks[props.get(3, 0)].data;\n                specImage = this._blocks[props.get(21, 0)].data;\n                mat.lightPicker = this._blocks[props.get(22, 0)].data;\n                mat.style.sampler = new Sampler2D_1.Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true));\n                mat.bothSides = props.get(7, false);\n                mat.alphaPremultiplied = props.get(8, false);\n                mat.blendMode = this.blendModeDic[props.get(9, 0)];\n                if (diffuseImage) {\n                    mat.diffuseTexture = new Single2DTexture_1.Single2DTexture(diffuseImage);\n                    debugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n                }\n                if (normalImage) {\n                    mat.normalMethod.texture = new Single2DTexture_1.Single2DTexture(normalImage);\n                    debugString += \" | NormalTexture-Name = \" + normalImage.name;\n                }\n                if (specImage) {\n                    mat.specularMethod.texture = new Single2DTexture_1.Single2DTexture(specImage);\n                    debugString += \" | SpecularTexture-Name = \" + specImage.name;\n                }\n                mat.alphaThreshold = props.get(12, 0.0);\n                mat.ambientMethod.strength = props.get(15, 1.0);\n                mat.diffuseMethod.color = props.get(16, 0xffffff);\n                mat.specularMethod.strength = props.get(18, 1.0);\n                mat.specularMethod.gloss = props.get(19, 50);\n                mat.specularMethod.color = props.get(20, 0xffffff);\n                for (var methods_parsed = 0; methods_parsed < num_methods; methods_parsed++) {\n                    var method_type;\n                    method_type = this._newBlockBytes.readUnsignedShort();\n                    props = this.parseProperties(AWDParser.method_v1Properties);\n                    switch (method_type) {\n                        case 999:\n                            var effectMethod = this._blocks[props.get(1, 0)].data;\n                            mat.addEffectMethod(effectMethod);\n                            debugString += \" | EffectMethod-Name = \" + effectMethod.name;\n                            break;\n                        case 998:\n                            var shadowMapMethod = this._blocks[props.get(1, 0)].data;\n                            mat.shadowMethod = shadowMapMethod;\n                            debugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n                            break;\n                        case 1:\n                            var cubeTexture = new SingleCubeTexture_1.SingleCubeTexture(this._blocks[props.get(1, 0)].data);\n                            mat.ambientMethod = new AmbientEnvMapMethod_1.AmbientEnvMapMethod();\n                            mat.ambientMethod.texture = cubeTexture;\n                            debugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n                            break;\n                        case 51:\n                            mat.diffuseMethod = new DiffuseDepthMethod_1.DiffuseDepthMethod();\n                            debugString += \" | DiffuseDepthMethod\";\n                            break;\n                        case 52:\n                            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(1, 0)].data);\n                            mat.diffuseMethod = new DiffuseGradientMethod_1.DiffuseGradientMethod(texture);\n                            debugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n                            break;\n                        case 53:\n                            mat.diffuseMethod = new DiffuseWrapMethod_1.DiffuseWrapMethod(props.get(101, 5));\n                            debugString += \" | DiffuseWrapMethod\";\n                            break;\n                        case 54:\n                            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(1, 0)].data);\n                            mat.diffuseMethod = new DiffuseLightMapMethod_1.DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n                            debugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n                            break;\n                        case 55:\n                            mat.diffuseMethod = new DiffuseCelMethod_1.DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n                            mat.diffuseMethod.smoothness = props.get(101, 0.1);\n                            debugString += \" | DiffuseCelMethod\";\n                            break;\n                        case 56:\n                            //\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n                            //\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n                            break;\n                        case 101:\n                            mat.specularMethod = new SpecularAnisotropicMethod_1.SpecularAnisotropicMethod();\n                            debugString += \" | SpecularAnisotropicMethod\";\n                            break;\n                        case 102:\n                            mat.specularMethod = new SpecularPhongMethod_1.SpecularPhongMethod();\n                            debugString += \" | SpecularPhongMethod\";\n                            break;\n                        case 103:\n                            mat.specularMethod = new SpecularCelMethod_1.SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n                            mat.specularMethod.smoothness = props.get(102, 0.1);\n                            debugString += \" | SpecularCelMethod\";\n                            break;\n                        case 104:\n                            mat.specularMethod = new SpecularFresnelMethod_1.SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n                            mat.specularMethod.fresnelPower = props.get(101, 5);\n                            mat.specularMethod.normalReflectance = props.get(102, 0.1);\n                            debugString += \" | SpecularFresnelMethod\";\n                            break;\n                        case 151:\n                            break;\n                        case 152:\n                            var texture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(1, 0)].data);\n                            mat.normalMethod = new NormalSimpleWaterMethod_1.NormalSimpleWaterMethod(mat.normalMethod.texture || texture, texture);\n                            debugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n                            break;\n                    }\n                    this.parseUserAttributes();\n                }\n            }\n        }\n        else if ((type >= 3) && (type <= 7)) {\n            // if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n            var color = props.get(1, 0xcccccc);\n            debugString += color;\n            var diffuseTexture = new Single2DTexture_1.Single2DTexture(this._blocks[props.get(2, 0)].data);\n            if (type == 5) {\n                diffuseTexture.mappingMode = MappingMode_1.MappingMode.LINEAR_GRADIENT;\n            }\n            else if (type == 6) {\n                diffuseTexture.mappingMode = MappingMode_1.MappingMode.RADIAL_GRADIENT;\n            }\n            var basic_mat = new BasicMaterial_1.BasicMaterial();\n            basic_mat.texture = diffuseTexture;\n            basic_mat.bothSides = true;\n            //basic_mat.preserveAlpha = true;\n            //basic_mat.alphaBlending = true;\n            basic_mat.extra = this.parseUserAttributes();\n            this._pFinalizeAsset(basic_mat, name);\n            this._blocks[blockID].data = basic_mat;\n            if (this._debug)\n                console.log(debugString);\n            return;\n        }\n        mat.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(mat, name);\n        this._blocks[blockID].data = mat;\n        if (this._debug)\n            console.log(debugString);\n    };\n    //Block ID = 82\n    AWDParser.prototype.parseTexture = function (blockID) {\n        this._blocks[blockID].name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        this._texture_users[this._cur_block_id] = [];\n        // External\n        if (type == 0) {\n            var url = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.URLRequest(url), false, null, true);\n        }\n        else {\n            var data_len = this._newBlockBytes.readUnsignedInt();\n            var data = new ByteArray_1.ByteArray(data_len);\n            this._newBlockBytes.readBytes(data, 0, data_len);\n            //\n            // AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n            //\n            // Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n            // This gives the browser time to initialise image width / height.\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        if (this._debug)\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n    };\n    //Block ID = 83\n    AWDParser.prototype.parseCubeTexture = function (blockID) {\n        //blockLength = block.len;\n        var data_len;\n        var i;\n        this._texture_users[this._cur_block_id] = [];\n        var type = this._newBlockBytes.readUnsignedByte();\n        this._blocks[blockID].name = this.parseVarStr();\n        for (i = 0; i < 6; i++) {\n            this._texture_users[this._cur_block_id] = [];\n            // External\n            if (type == 0) {\n                data_len = this._newBlockBytes.readUnsignedInt();\n                var url;\n                url = this._newBlockBytes.readUTFBytes(data_len);\n                this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.URLRequest(url), false, null, true, i);\n            }\n            else {\n                data_len = this._newBlockBytes.readUnsignedInt();\n                var data = new ByteArray_1.ByteArray(data_len);\n                this._newBlockBytes.readBytes(data, 0, data_len);\n                this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils_1.ParserUtils.byteArrayToImage(data), true, i);\n            }\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        if (this._debug)\n            console.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n    };\n    //Block ID = 91\n    AWDParser.prototype.parseSharedMethodBlock = function (blockID) {\n        var asset;\n        this._blocks[blockID].name = this.parseVarStr();\n        asset = this.parseSharedMethodList(blockID);\n        this.parseUserAttributes();\n        this._blocks[blockID].data = asset;\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n    };\n    //Block ID = 92\n    AWDParser.prototype.parseShadowMethodBlock = function (blockID) {\n        this._blocks[blockID].name = this.parseVarStr();\n        var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var asset = this.parseShadowMethodList(light, blockID);\n        if (!asset)\n            return;\n        this.parseUserAttributes(); // Ignore for now\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n    };\n    //Block ID = 253\n    AWDParser.prototype.parseCommand = function (blockID) {\n        var hasBlocks = (this._newBlockBytes.readUnsignedByte() == 1);\n        var parentObject = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var targetObject;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var numCommands = this._newBlockBytes.readShort();\n        var typeCommand = this._newBlockBytes.readShort();\n        var props = this.parseProperties(AWDParser.commandProperties);\n        switch (typeCommand) {\n            case 1:\n                targetObject = this._blocks[props.get(1, 0)].data;\n                targetObject.transform.matrix3D = mtx;\n                if (parentObject)\n                    parentObject.addChild(targetObject);\n                break;\n        }\n        if (targetObject) {\n            props = this.parseProperties(AWDParser.targetProperties);\n            targetObject.pivot = new Vector3D_1.Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n            targetObject.extra = this.parseUserAttributes();\n        }\n        this._blocks[blockID].data = targetObject;\n        if (this._debug)\n            console.log(\"Parsed a CommandBlock: Name = '\" + name);\n    };\n    //blockID 255\n    AWDParser.prototype.parseMetaData = function (blockID) {\n        var props = this.parseProperties(AWDParser.metaDataProperties);\n        if (this._debug) {\n            console.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n            console.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n            console.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n            console.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n            console.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n        }\n    };\n    //blockID 254\n    AWDParser.prototype.parseNameSpace = function (blockID) {\n        var id = this._newBlockBytes.readUnsignedByte();\n        var nameSpaceString = this.parseVarStr();\n        if (this._debug)\n            console.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n    };\n    // this functions reads and creates a ShadowMethodMethod\n    AWDParser.prototype.parseShadowMethodList = function (light, blockID) {\n        var methodType = this._newBlockBytes.readUnsignedShort();\n        var shadowMethod;\n        var props = this.parseProperties(this.shadowMethodListProperties);\n        var targetID;\n        var returnedArray;\n        switch (methodType) {\n            //\t\t\t\tcase 1001: //CascadeShadowMapMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n            //\t\t\t\t\tif (!returnedArray[0]) {\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n            //\t\t\t\t\t\treturn shadowMethod;\n            //\t\t\t\t\t}\n            //\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n            //\t\t\t\t\tbreak;\n            case 1002:\n                shadowMethod = new ShadowNearMethod_1.ShadowNearMethod(this._blocks[props.get(1, 0)].data);\n                break;\n            case 1101:\n                shadowMethod = new ShadowFilteredMethod_1.ShadowFilteredMethod(light);\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                break;\n            case 1102:\n                shadowMethod = new ShadowDitheredMethod_1.ShadowDitheredMethod(light, props.get(201, 5));\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                shadowMethod.range = props.get(103, 1);\n                break;\n            case 1103:\n                shadowMethod = new ShadowSoftMethod_1.ShadowSoftMethod(light, props.get(201, 5));\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                shadowMethod.range = props.get(103, 1);\n                break;\n            case 1104:\n                shadowMethod = new ShadowHardMethod_1.ShadowHardMethod(light);\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                break;\n        }\n        this.parseUserAttributes();\n        return shadowMethod;\n    };\n    //Block ID 101\n    AWDParser.prototype.parseSkeleton = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_joints = this._newBlockBytes.readUnsignedShort();\n        var skeleton = new Skeleton_1.Skeleton();\n        this.parseProperties(null); // Discard properties for now\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\n            var joint;\n            var ibp;\n            // Ignore joint id\n            this._newBlockBytes.readUnsignedShort();\n            joint = new SkeletonJoint_1.SkeletonJoint();\n            joint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n            joint.name = this.parseVarStr();\n            ibp = this.parseMatrix3D();\n            joint.inverseBindPose = ibp.rawData;\n            // Ignore joint props/attributes for now\n            this.parseProperties(null);\n            this.parseUserAttributes();\n            skeleton.joints.push(joint);\n        }\n        // Discard attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(skeleton, name);\n        this._blocks[blockID].data = skeleton;\n        if (this._debug)\n            console.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n    };\n    //Block ID = 102\n    AWDParser.prototype.parseSkeletonPose = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_joints = this._newBlockBytes.readUnsignedShort();\n        this.parseProperties(null); // Ignore properties for now\n        var pose = new SkeletonPose_1.SkeletonPose();\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\n            var joint_pose;\n            var has_transform;\n            joint_pose = new JointPose_1.JointPose();\n            has_transform = this._newBlockBytes.readUnsignedByte();\n            if (has_transform == 1) {\n                var mtx_data = this.parseMatrix43RawData();\n                var mtx = new Matrix3D_1.Matrix3D(mtx_data);\n                joint_pose.orientation.fromMatrix(mtx);\n                joint_pose.translation.copyFrom(mtx.position);\n                pose.jointPoses[joints_parsed] = joint_pose;\n            }\n        }\n        // Skip attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(pose, name);\n        this._blocks[blockID].data = pose;\n        if (this._debug)\n            console.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n    };\n    //blockID 103\n    AWDParser.prototype.parseSkeletonAnimation = function (blockID /*uint*/) {\n        var frame_dur;\n        var pose_id;\n        var name = this.parseVarStr();\n        var clip = new SkeletonClipNode_1.SkeletonClipNode();\n        var num_frames = this._newBlockBytes.readUnsignedShort();\n        this.parseProperties(null); // Ignore properties for now\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            pose_id = this._newBlockBytes.readUnsignedInt();\n            frame_dur = this._newBlockBytes.readUnsignedShort();\n            clip.addFrame(this._blocks[pose_id].data, frame_dur);\n        }\n        if (clip.frames.length == 0) {\n            this._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n            return;\n        }\n        // Ignore attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(clip, name);\n        this._blocks[blockID].data = clip;\n        if (this._debug)\n            console.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n    };\n    //Block ID = 111 /  Block ID = 112\n    AWDParser.prototype.parseSpritePoseAnimation = function (blockID /*uint*/, poseOnly) {\n        if (poseOnly === void 0) { poseOnly = false; }\n        var subSpriteParsed;\n        var x;\n        var y;\n        var z;\n        var str_len;\n        var str_end;\n        var elements;\n        var idx = 0;\n        var clip = new VertexClipNode_1.VertexClipNode();\n        var indices;\n        var verts;\n        var streamtypes = new Array();\n        var props;\n        var name = this.parseVarStr();\n        var geo_id = this._newBlockBytes.readUnsignedInt();\n        var graphics = this._blocks[geo_id].data;\n        var uvs = this.getUVForVertexAnimation(geo_id);\n        var num_frames = (!poseOnly) ? this._newBlockBytes.readUnsignedShort() : 1;\n        var num_subsprites = this._newBlockBytes.readUnsignedShort();\n        var num_Streams = this._newBlockBytes.readUnsignedShort();\n        for (var streamsParsed = 0; streamsParsed < num_Streams; streamsParsed++)\n            streamtypes.push(this._newBlockBytes.readUnsignedShort());\n        props = this.parseProperties(this.spritePoseAnimationProperties);\n        clip.looping = props.get(1, true);\n        clip.stitchFinalFrame = props.get(2, false);\n        var frame_dur;\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            frame_dur = this._newBlockBytes.readUnsignedShort();\n            graphics = new Graphics_1.Graphics();\n            subSpriteParsed = 0;\n            while (subSpriteParsed < num_subsprites) {\n                streamsParsed = 0;\n                str_len = this._newBlockBytes.readUnsignedInt();\n                str_end = this._newBlockBytes.position + str_len;\n                while (streamsParsed < num_Streams) {\n                    if (streamtypes[streamsParsed] == 1) {\n                        indices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\n                        verts = new Array();\n                        idx = 0;\n                        while (this._newBlockBytes.position < str_end) {\n                            x = this.readNumber(this._accuracyGeo);\n                            y = this.readNumber(this._accuracyGeo);\n                            z = this.readNumber(this._accuracyGeo);\n                            verts[idx++] = x;\n                            verts[idx++] = y;\n                            verts[idx++] = z;\n                        }\n                        elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n                        elements.setIndices(indices);\n                        elements.setPositions(verts);\n                        elements.setUVs(uvs[subSpriteParsed]);\n                        elements.setNormals(null);\n                        elements.setTangents(null);\n                        elements.autoDeriveNormals = false;\n                        elements.autoDeriveTangents = false;\n                        subSpriteParsed++;\n                        graphics.addGraphic(elements);\n                    }\n                    else\n                        this._newBlockBytes.position = str_end;\n                    streamsParsed++;\n                }\n            }\n            clip.addFrame(graphics, frame_dur);\n        }\n        this.parseUserAttributes();\n        this._pFinalizeAsset(clip, name);\n        this._blocks[blockID].data = clip;\n        if (this._debug)\n            console.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n    };\n    //BlockID 113\n    AWDParser.prototype.parseVertexAnimationSet = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_frames = this._newBlockBytes.readUnsignedShort();\n        var props = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n        var skeletonFrames = new Array();\n        var vertexFrames = new Array();\n        var clipNode;\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            clipNode = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            if (clipNode instanceof VertexClipNode_1.VertexClipNode)\n                vertexFrames.push(clipNode);\n            else if (clipNode instanceof SkeletonClipNode_1.SkeletonClipNode)\n                skeletonFrames.push(clipNode);\n        }\n        if ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n            this._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n            return;\n        }\n        this.parseUserAttributes();\n        if (vertexFrames.length > 0) {\n            var newVertexAnimationSet = new VertexAnimationSet_1.VertexAnimationSet();\n            for (var i = 0; i < vertexFrames.length; i++)\n                newVertexAnimationSet.addAnimation(vertexFrames[i]);\n            this._pFinalizeAsset(newVertexAnimationSet, name);\n            this._blocks[blockID].data = newVertexAnimationSet;\n            if (this._debug)\n                console.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n        }\n        else if (skeletonFrames.length > 0) {\n            var newSkeletonAnimationSet = new SkeletonAnimationSet_1.SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n            for (var i = 0; i < skeletonFrames.length; i++)\n                newSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n            this._pFinalizeAsset(newSkeletonAnimationSet, name);\n            this._blocks[blockID].data = newSkeletonAnimationSet;\n            if (this._debug)\n                console.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n        }\n    };\n    //BlockID 122\n    AWDParser.prototype.parseAnimatorSet = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedShort();\n        var props = this.parseProperties(AWDParser.animatorSetProperties);\n        var targetAnimationSet = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var targetSpritees = new Array();\n        var targetSpriteLength = this._newBlockBytes.readUnsignedShort();\n        for (var i = 0; i < targetSpriteLength; i++)\n            targetSpritees.push(this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n        var activeState = this._newBlockBytes.readUnsignedShort();\n        var autoplay = (this._newBlockBytes.readUnsignedByte() == 1);\n        this.parseUserAttributes();\n        this.parseUserAttributes();\n        var thisAnimator;\n        if (type == 1)\n            thisAnimator = new SkeletonAnimator_1.SkeletonAnimator(targetAnimationSet, this._blocks[props.get(1, 0)].data);\n        else if (type == 2)\n            thisAnimator = new VertexAnimator_1.VertexAnimator(targetAnimationSet);\n        this._pFinalizeAsset(thisAnimator, name);\n        this._blocks[blockID].data = thisAnimator;\n        for (i = 0; i < targetSpritees.length; i++) {\n            if (type == 1)\n                targetSpritees[i].animator = thisAnimator;\n            else if (type == 2)\n                targetSpritees[i].animator = thisAnimator;\n        }\n        if (this._debug)\n            console.log(\"Parsed a Animator: Name = \" + name);\n    };\n    // this functions reads and creates a EffectMethod\n    AWDParser.prototype.parseSharedMethodList = function (blockID) {\n        var methodType = this._newBlockBytes.readUnsignedShort();\n        var effectMethodReturn;\n        var props = this.parseProperties(this.sharedMethodListProperties);\n        switch (methodType) {\n            // Effect Methods\n            case 401:\n                effectMethodReturn = new EffectColorMatrixMethod_1.EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n                break;\n            case 402:\n                effectMethodReturn = new EffectColorTransformMethod_1.EffectColorTransformMethod();\n                var offCol = props.get(601, 0x00000000);\n                effectMethodReturn.colorTransform = new ColorTransform_1.ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n                break;\n            case 403:\n                effectMethodReturn = new EffectEnvMapMethod_1.EffectEnvMapMethod(new SingleCubeTexture_1.SingleCubeTexture(this._blocks[props.get(1, 0)].data), props.get(101, 1));\n                var targetID = props.get(2, 0);\n                if (targetID > 0) {\n                }\n                break;\n            case 404:\n                effectMethodReturn = new EffectLightMapMethod_1.EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n                break;\n            //\t\t\t\tcase 405: //ProjectiveTextureMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n            //\t\t\t\t\tif (!returnedArray[0])\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n            //\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n            //\t\t\t\t\tbreak;\n            case 406:\n                effectMethodReturn = new EffectRimLightMethod_1.EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n                break;\n            case 407:\n                effectMethodReturn = new EffectAlphaMaskMethod_1.EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\n                break;\n            //\t\t\t\tcase 408: //RefractionEnvMapMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n            //\t\t\t\t\tif (!returnedArray[0])\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n            //\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n            //\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n            //\t\t\t\t\tbreak;\n            //\t\t\t\tcase 409: //OutlineMethod\n            //\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n            //\t\t\t\t\tbreak;\n            case 410:\n                effectMethodReturn = new EffectFresnelEnvMapMethod_1.EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n                break;\n            case 411:\n                effectMethodReturn = new EffectFogMethod_1.EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n                break;\n        }\n        this.parseUserAttributes();\n        return effectMethodReturn;\n    };\n    AWDParser.prototype.parseUserAttributes = function () {\n        var list_len = this._newBlockBytes.readUnsignedInt();\n        if (list_len > 0) {\n            var list_end = this._newBlockBytes.position + list_len;\n            var attributes = {};\n            for (var attibuteCnt = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n                var ns_id;\n                var attr_key;\n                var attr_type;\n                var attr_len;\n                var attr_val;\n                // TODO: Properly tend to namespaces in attributes\n                ns_id = this._newBlockBytes.readUnsignedByte();\n                attr_key = this.parseVarStr();\n                attr_type = this._newBlockBytes.readUnsignedByte();\n                attr_len = this._newBlockBytes.readUnsignedInt();\n                if ((this._newBlockBytes.position + attr_len) > list_end) {\n                    console.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n                    this._newBlockBytes.position = list_end;\n                    return attributes;\n                }\n                switch (attr_type) {\n                    case AWDParser.AWDSTRING:\n                        attr_val = this._newBlockBytes.readUTFBytes(attr_len);\n                        break;\n                    case AWDParser.INT8:\n                        attr_val = this._newBlockBytes.readByte();\n                        break;\n                    case AWDParser.INT16:\n                        attr_val = this._newBlockBytes.readShort();\n                        break;\n                    case AWDParser.INT32:\n                        attr_val = this._newBlockBytes.readInt();\n                        break;\n                    case AWDParser.BOOL:\n                    case AWDParser.UINT8:\n                        attr_val = this._newBlockBytes.readUnsignedByte();\n                        break;\n                    case AWDParser.UINT16:\n                        attr_val = this._newBlockBytes.readUnsignedShort();\n                        break;\n                    case AWDParser.UINT32:\n                    case AWDParser.BADDR:\n                        attr_val = this._newBlockBytes.readUnsignedInt();\n                        break;\n                    case AWDParser.FLOAT32:\n                        attr_val = this._newBlockBytes.readFloat();\n                        break;\n                    case AWDParser.FLOAT64:\n                        attr_val = this._newBlockBytes.readDouble();\n                        break;\n                    default:\n                        attr_val = 'unimplemented attribute type ' + attr_type;\n                        this._newBlockBytes.position += attr_len;\n                        break;\n                }\n                attributes[attr_key] = attr_val;\n                if (this._debug)\n                    console.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n            }\n        }\n        return attributes;\n    };\n    AWDParser.prototype.parseProperties = function (expected) {\n        var list_len = this._newBlockBytes.readUnsignedInt();\n        var props = new AWDProperties();\n        var list_end = this._newBlockBytes.position + list_len;\n        if (expected) {\n            var len;\n            var key;\n            var type;\n            for (var propertyCnt = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n                key = this._newBlockBytes.readUnsignedShort();\n                len = this._newBlockBytes.readUnsignedInt();\n                if ((this._newBlockBytes.position + len) > list_end) {\n                    console.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n                    this._newBlockBytes.position = list_end;\n                    return props;\n                }\n                if (expected[key]) {\n                    type = expected[key];\n                    props.set(key, this.parseAttrValue(type, len));\n                }\n                else {\n                    this._newBlockBytes.position += len;\n                }\n            }\n        }\n        else {\n            this._newBlockBytes.position = list_end;\n        }\n        return props;\n    };\n    AWDParser.prototype.parseAttrValue = function (type, len) {\n        var elem_len;\n        var read_func;\n        var accuracy;\n        switch (type) {\n            case AWDParser.BOOL:\n            case AWDParser.INT8:\n                elem_len = 1;\n                read_func = this._newBlockBytes.readByte;\n                break;\n            case AWDParser.INT16:\n                elem_len = 2;\n                read_func = this._newBlockBytes.readShort;\n                break;\n            case AWDParser.INT32:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readInt;\n                break;\n            case AWDParser.UINT8:\n                elem_len = 1;\n                read_func = this._newBlockBytes.readUnsignedByte;\n                break;\n            case AWDParser.UINT16:\n                elem_len = 2;\n                read_func = this._newBlockBytes.readUnsignedShort;\n                break;\n            case AWDParser.UINT32:\n            case AWDParser.COLOR:\n            case AWDParser.BADDR:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readUnsignedInt;\n                break;\n            case AWDParser.FLOAT32:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readFloat;\n                break;\n            case AWDParser.FLOAT64:\n                elem_len = 8;\n                read_func = this._newBlockBytes.readDouble;\n                break;\n            case AWDParser.AWDSTRING:\n                return this._newBlockBytes.readUTFBytes(len);\n            case AWDParser.VECTOR2x1:\n            case AWDParser.VECTOR3x1:\n            case AWDParser.VECTOR4x1:\n            case AWDParser.MTX3x2:\n            case AWDParser.MTX3x3:\n            case AWDParser.MTX4x3:\n            case AWDParser.MTX4x4:\n                elem_len = 8;\n                read_func = this._newBlockBytes.readDouble;\n                break;\n            case AWDParser.GEO_NUMBER:\n                accuracy = this._accuracyGeo;\n            case AWDParser.MATRIX_NUMBER:\n                accuracy = this._accuracyMatrix;\n            case AWDParser.PROPERTY_NUMBER:\n                accuracy = this._accuracyProps;\n            default:\n                if (accuracy) {\n                    elem_len = 8;\n                    read_func = this._newBlockBytes.readDouble;\n                }\n                else {\n                    elem_len = 4;\n                    read_func = this._newBlockBytes.readFloat;\n                }\n        }\n        if (elem_len < len) {\n            var list = [];\n            var num_elems = len / elem_len;\n            for (var num_read = 0; num_read < num_elems; num_read++)\n                list[num_read] = read_func.call(this._newBlockBytes);\n            return list;\n        }\n        else {\n            return read_func.call(this._newBlockBytes);\n        }\n    };\n    AWDParser.prototype.parseHeader = function () {\n        this._byteData.position = 3; // Skip magic string and parse version\n        this._version[0] = this._byteData.readUnsignedByte();\n        this._version[1] = this._byteData.readUnsignedByte();\n        var flags = this._byteData.readUnsignedShort(); // Parse bit flags\n        this._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n        // if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n        }\n        this._compression = this._byteData.readUnsignedByte(); // compression\n        if (this._debug) {\n            console.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n            console.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n        }\n        // Check file integrity\n        var body_len = this._byteData.readUnsignedInt();\n        if (!this._streaming && body_len != this._byteData.getBytesAvailable())\n            this._pDieWithError('AWD2 body length does not match header integrity field');\n    };\n    // Helper - functions\n    AWDParser.prototype.getUVForVertexAnimation = function (spriteID /*uint*/) {\n        if (this._blocks[spriteID].data instanceof Sprite_1.Sprite)\n            spriteID = this._blocks[spriteID].geoID;\n        if (this._blocks[spriteID].uvsForVertexAnimation)\n            return this._blocks[spriteID].uvsForVertexAnimation;\n        var graphics = this._blocks[spriteID].data;\n        var elements;\n        var uvsForVertexAnimation = this._blocks[spriteID].uvsForVertexAnimation = new Array();\n        var len = graphics.count;\n        for (var geoCnt = 0; geoCnt < len; geoCnt++) {\n            elements = graphics.getGraphicAt(geoCnt).elements;\n            uvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n        }\n        return this._blocks[spriteID].uvsForVertexAnimation;\n    };\n    AWDParser.prototype.parseVarStr = function () {\n        return this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n    };\n    AWDParser.prototype.readNumber = function (precision) {\n        if (precision === void 0) { precision = false; }\n        if (precision)\n            return this._newBlockBytes.readDouble();\n        return this._newBlockBytes.readFloat();\n    };\n    AWDParser.prototype.parseMatrix3D = function () {\n        return new Matrix3D_1.Matrix3D(this.parseMatrix43RawData());\n    };\n    AWDParser.prototype.parseMatrix32RawData = function () {\n        var mtx_raw = new Float32Array(6);\n        for (var i = 0; i < 6; i++)\n            mtx_raw[i] = this._newBlockBytes.readFloat();\n        return mtx_raw;\n    };\n    AWDParser.prototype.parseMatrix43RawData = function () {\n        var mtx_raw = new Float32Array(16);\n        mtx_raw[0] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[1] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[2] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[3] = 0.0;\n        mtx_raw[4] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[5] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[6] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[7] = 0.0;\n        mtx_raw[8] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[9] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[10] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[11] = 0.0;\n        mtx_raw[12] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[13] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[14] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[15] = 1.0;\n        //TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n        if (isNaN(mtx_raw[0])) {\n            mtx_raw[0] = 1;\n            mtx_raw[1] = 0;\n            mtx_raw[2] = 0;\n            mtx_raw[4] = 0;\n            mtx_raw[5] = 1;\n            mtx_raw[6] = 0;\n            mtx_raw[8] = 0;\n            mtx_raw[9] = 0;\n            mtx_raw[10] = 1;\n            mtx_raw[12] = 0;\n            mtx_raw[13] = 0;\n            mtx_raw[14] = 0;\n        }\n        return mtx_raw;\n    };\n    AWDParser.COMPRESSIONMODE_LZMA = \"lzma\";\n    AWDParser.UNCOMPRESSED = 0;\n    AWDParser.DEFLATE = 1;\n    AWDParser.LZMA = 2;\n    AWDParser.INT8 = 1;\n    AWDParser.INT16 = 2;\n    AWDParser.INT32 = 3;\n    AWDParser.UINT8 = 4;\n    AWDParser.UINT16 = 5;\n    AWDParser.UINT32 = 6;\n    AWDParser.FLOAT32 = 7;\n    AWDParser.FLOAT64 = 8;\n    AWDParser.BOOL = 21;\n    AWDParser.COLOR = 22;\n    AWDParser.BADDR = 23;\n    AWDParser.AWDSTRING = 31;\n    AWDParser.AWDBYTEARRAY = 32;\n    AWDParser.VECTOR2x1 = 41;\n    AWDParser.VECTOR3x1 = 42;\n    AWDParser.VECTOR4x1 = 43;\n    AWDParser.MTX3x2 = 44;\n    AWDParser.MTX3x3 = 45;\n    AWDParser.MTX4x3 = 46;\n    AWDParser.MTX4x4 = 47;\n    AWDParser.GEO_NUMBER = 48;\n    AWDParser.MATRIX_NUMBER = 49;\n    AWDParser.PROPERTY_NUMBER = 50;\n    AWDParser.textFormatProperties = {\n        1: AWDParser.UINT16,\n        2: AWDParser.FLOAT32,\n        3: AWDParser.UINT8,\n        4: AWDParser.UINT8,\n        5: AWDParser.UINT8,\n        6: AWDParser.UINT8,\n        7: AWDParser.FLOAT32,\n        8: AWDParser.FLOAT32,\n        9: AWDParser.FLOAT32,\n        10: AWDParser.FLOAT32 }; //line spacing\n    AWDParser.textFieldProperties = {\n        1: AWDParser.BOOL,\n        3: AWDParser.BOOL,\n        4: AWDParser.BOOL,\n        5: AWDParser.BOOL,\n        7: AWDParser.UINT8,\n        8: AWDParser.UINT8,\n        9: AWDParser.UINT8 };\n    AWDParser.textFieldTypes = [\"static\", \"dynamic\", \"input\", \"input\"];\n    AWDParser.movieClipProperties = {\n        1: AWDParser.FLOAT32,\n        2: AWDParser.UINT16,\n        3: AWDParser.UINT8 }; // scripting-language right now its always as2\n    AWDParser.graphicsProperties = {\n        1: AWDParser.GEO_NUMBER,\n        2: AWDParser.GEO_NUMBER };\n    AWDParser.elementsProperties = {\n        1: AWDParser.GEO_NUMBER,\n        2: AWDParser.GEO_NUMBER };\n    AWDParser.primitiveProperties = {\n        101: AWDParser.GEO_NUMBER,\n        102: AWDParser.GEO_NUMBER,\n        103: AWDParser.GEO_NUMBER,\n        110: AWDParser.GEO_NUMBER,\n        111: AWDParser.GEO_NUMBER,\n        301: AWDParser.UINT16,\n        302: AWDParser.UINT16,\n        303: AWDParser.UINT16,\n        701: AWDParser.BOOL,\n        702: AWDParser.BOOL,\n        703: AWDParser.BOOL,\n        704: AWDParser.BOOL };\n    AWDParser.primitiveTypes = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n    AWDParser.containerProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    AWDParser.spriteInstanceProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8,\n        5: AWDParser.BOOL };\n    AWDParser.lightProperties = {\n        1: AWDParser.PROPERTY_NUMBER,\n        2: AWDParser.PROPERTY_NUMBER,\n        3: AWDParser.COLOR,\n        4: AWDParser.PROPERTY_NUMBER,\n        5: AWDParser.PROPERTY_NUMBER,\n        6: AWDParser.BOOL,\n        7: AWDParser.COLOR,\n        8: AWDParser.PROPERTY_NUMBER,\n        9: AWDParser.UINT8,\n        10: AWDParser.UINT8,\n        11: AWDParser.PROPERTY_NUMBER,\n        12: AWDParser.UINT16,\n        21: AWDParser.MATRIX_NUMBER,\n        22: AWDParser.MATRIX_NUMBER,\n        23: AWDParser.MATRIX_NUMBER };\n    AWDParser.cameraProperties = {\n        101: AWDParser.PROPERTY_NUMBER,\n        102: AWDParser.PROPERTY_NUMBER,\n        103: AWDParser.PROPERTY_NUMBER,\n        104: AWDParser.PROPERTY_NUMBER };\n    AWDParser.cameraPivotProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    // (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n    AWDParser.materialProperties = {\n        1: AWDParser.INT32,\n        2: AWDParser.BADDR,\n        10: AWDParser.PROPERTY_NUMBER,\n        11: AWDParser.BOOL,\n        12: AWDParser.PROPERTY_NUMBER,\n        13: AWDParser.BOOL };\n    AWDParser.material_v1Properties = { 1: AWDParser.UINT32,\n        2: AWDParser.BADDR,\n        3: AWDParser.BADDR,\n        4: AWDParser.UINT8,\n        5: AWDParser.BOOL,\n        6: AWDParser.BOOL,\n        7: AWDParser.BOOL,\n        8: AWDParser.BOOL,\n        9: AWDParser.UINT8,\n        10: AWDParser.PROPERTY_NUMBER,\n        11: AWDParser.BOOL,\n        12: AWDParser.PROPERTY_NUMBER,\n        13: AWDParser.BOOL,\n        15: AWDParser.PROPERTY_NUMBER,\n        16: AWDParser.UINT32,\n        17: AWDParser.BADDR,\n        18: AWDParser.PROPERTY_NUMBER,\n        19: AWDParser.PROPERTY_NUMBER,\n        20: AWDParser.UINT32,\n        21: AWDParser.BADDR,\n        22: AWDParser.BADDR };\n    AWDParser.method_v1Properties = {\n        1: AWDParser.BADDR,\n        2: AWDParser.BADDR,\n        3: AWDParser.BADDR,\n        101: AWDParser.PROPERTY_NUMBER,\n        102: AWDParser.PROPERTY_NUMBER,\n        103: AWDParser.PROPERTY_NUMBER,\n        201: AWDParser.UINT32,\n        202: AWDParser.UINT32,\n        301: AWDParser.UINT16,\n        302: AWDParser.UINT16,\n        401: AWDParser.UINT8,\n        402: AWDParser.UINT8,\n        601: AWDParser.COLOR,\n        602: AWDParser.COLOR,\n        701: AWDParser.BOOL,\n        702: AWDParser.BOOL,\n        801: AWDParser.MTX4x4 };\n    AWDParser.commandProperties = {\n        1: AWDParser.BADDR };\n    AWDParser.targetProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    AWDParser.metaDataProperties = {\n        1: AWDParser.UINT32,\n        2: AWDParser.AWDSTRING,\n        3: AWDParser.AWDSTRING,\n        4: AWDParser.AWDSTRING,\n        5: AWDParser.AWDSTRING };\n    AWDParser.vertexAnimationSetProperties = {\n        1: AWDParser.UINT16 };\n    AWDParser.animatorSetProperties = { 1: AWDParser.BADDR };\n    return AWDParser;\n}(ParserBase_1.ParserBase));\nexports.AWDParser = AWDParser;\nvar ElementType = (function () {\n    function ElementType() {\n    }\n    ElementType.STANDART_STREAMS = 0;\n    ElementType.CONCENATED_STREAMS = 1;\n    ElementType.SHARED_BUFFER = 2;\n    return ElementType;\n}());\nvar AWDProperties = (function () {\n    function AWDProperties() {\n    }\n    AWDProperties.prototype.set = function (key, value) {\n        this[key] = value;\n    };\n    AWDProperties.prototype.get = function (key, fallback) {\n        return (this[key] || fallback);\n    };\n    return AWDProperties;\n}());\n/**\n *\n */\nvar BitFlags = (function () {\n    function BitFlags() {\n    }\n    BitFlags.test = function (flags, testFlag) {\n        return (flags & testFlag) == testFlag;\n    };\n    BitFlags.FLAG1 = 1;\n    BitFlags.FLAG2 = 2;\n    BitFlags.FLAG3 = 4;\n    BitFlags.FLAG4 = 8;\n    BitFlags.FLAG5 = 16;\n    BitFlags.FLAG6 = 32;\n    BitFlags.FLAG7 = 64;\n    BitFlags.FLAG8 = 128;\n    BitFlags.FLAG9 = 256;\n    BitFlags.FLAG10 = 512;\n    BitFlags.FLAG11 = 1024;\n    BitFlags.FLAG12 = 2048;\n    BitFlags.FLAG13 = 4096;\n    BitFlags.FLAG14 = 8192;\n    BitFlags.FLAG15 = 16384;\n    BitFlags.FLAG16 = 32768;\n    return BitFlags;\n}());\n\n},{\"./AWD3ParserUtils/AWDBlock\":\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/attributes/Byte4Attributes\":undefined,\"awayjs-core/lib/attributes/Float2Attributes\":undefined,\"awayjs-core/lib/attributes/Float3Attributes\":undefined,\"awayjs-core/lib/geom/ColorTransform\":undefined,\"awayjs-core/lib/geom/Matrix\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImageCube\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-core/lib/projections/OrthographicOffCenterProjection\":undefined,\"awayjs-core/lib/projections/OrthographicProjection\":undefined,\"awayjs-core/lib/projections/PerspectiveProjection\":undefined,\"awayjs-core/lib/utils/ByteArray\":undefined,\"awayjs-display/lib/base/Style\":undefined,\"awayjs-display/lib/base/Timeline\":undefined,\"awayjs-display/lib/display/Billboard\":undefined,\"awayjs-display/lib/display/Camera\":undefined,\"awayjs-display/lib/display/DirectionalLight\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/PointLight\":undefined,\"awayjs-display/lib/display/Skybox\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/ElementsType\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/materials/BasicMaterial\":undefined,\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\":undefined,\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\":undefined,\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\":undefined,\"awayjs-display/lib/prefabs/PrefabBase\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveConePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\":undefined,\"awayjs-display/lib/text/Font\":undefined,\"awayjs-display/lib/text/TesselatedFontTable\":undefined,\"awayjs-display/lib/text/TextFormat\":undefined,\"awayjs-display/lib/textures/MappingMode\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-display/lib/textures/SingleCubeTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFogMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\":undefined,\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\":undefined,\"awayjs-player/lib/factories/AS2SceneGraphFactory\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimator\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimator\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/FNTParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar XmlUtils_1 = require(\"awayjs-core/lib/utils/XmlUtils\");\nvar BitmapFontTable_1 = require(\"awayjs-display/lib/text/BitmapFontTable\");\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\n/**\n * TextureAtlasParser provides a \"parser\" for natively supported image types (jpg, png). While it simply loads bytes into\n * a loader object, it wraps it in a BitmapImage2DResource so resource management can happen consistently without\n * exception cases.\n */\nvar FNTParser = (function (_super) {\n    __extends(FNTParser, _super);\n    /**\n     * Creates a new TextureAtlasParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function FNTParser() {\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\n        this._parseState = 0;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    FNTParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        var supports = extension == \"fnt\";\n        if (supports) {\n            console.log(\"supportsType fnt = \" + extension);\n        }\n        return extension == \"fnt\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    FNTParser.supportsData = function (data) {\n        try {\n            var content = ParserUtils_1.ParserUtils.toString(data);\n            if (content.indexOf(\"font\") != -1 || content.indexOf(\"Font\") != -1) {\n                console.log(\"supportsData fnt\");\n                return true;\n            }\n            return false;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    FNTParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length) {\n            this._bitmapFontTable.add_page(resourceDependency.assets[0]);\n            this._pFinalizeAsset(resourceDependency.assets[0]);\n            this._parseState = FNTParserState.PARSE_CHARS;\n        }\n        else {\n            this._parseState = FNTParserState.PARSE_COMPLETE;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    FNTParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        this._parseState = FNTParserState.PARSE_COMPLETE;\n    };\n    /**\n     * @inheritDoc\n     */\n    FNTParser.prototype._pProceedParsing = function () {\n        var nodes;\n        switch (this._parseState) {\n            case FNTParserState.PARSE_XML:\n                try {\n                    this._doc = XmlUtils_1.XmlUtils.getChildrenWithTag(XmlUtils_1.XmlUtils.strToXml(this._pGetTextData()), \"font\")[0];\n                    var page_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"pages\")[0];\n                    var all_pages = XmlUtils_1.XmlUtils.getChildrenWithTag(page_node, \"page\");\n                    var len = all_pages.length;\n                    // todo: correctly support multiple pages\n                    for (var i = 0; i < len; i++) {\n                        this._imagePath = XmlUtils_1.XmlUtils.readAttributeValue(all_pages[i], \"file\");\n                    }\n                    var char_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"chars\")[0];\n                    this._chars = XmlUtils_1.XmlUtils.getChildrenWithTag(char_node, \"char\");\n                    this._parseState = FNTParserState.PARSE_IMAGE;\n                    var info_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"info\")[0];\n                    var common_node = XmlUtils_1.XmlUtils.getChildrenWithTag(this._doc, \"common\")[0];\n                    var font_name = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"face\");\n                    this._font = AssetLibrary_1.AssetLibrary.getAsset(font_name);\n                    if (this._font == undefined) {\n                        this._font = new Font_1.Font();\n                        this._font.name = font_name;\n                    }\n                    var bold = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"bold\");\n                    if (bold != \"0\")\n                        font_name += \"_bold\";\n                    var italic = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"italic\");\n                    if (italic != \"0\")\n                        font_name += \"_italic\";\n                    this._bitmapFontTable = this._font.get_font_table(font_name, BitmapFontTable_1.BitmapFontTable.assetType);\n                    var size = XmlUtils_1.XmlUtils.readAttributeValue(info_node, \"size\");\n                    this._bitmapFontTable._init_size = parseInt(size);\n                }\n                catch (Error) {\n                    return ParserBase_1.ParserBase.PARSING_DONE;\n                }\n                break;\n            case FNTParserState.PARSE_IMAGE:\n                if (this._imagePath) {\n                    this._pAddDependency(this._imagePath, new URLRequest_1.URLRequest(this._imagePath));\n                    this._pPauseAndRetrieveDependencies();\n                }\n                else {\n                    return ParserBase_1.ParserBase.PARSING_DONE;\n                }\n                break;\n            case FNTParserState.PARSE_CHARS:\n                var element;\n                var x, y, width, height, xoff, yoff, xadv, page, chnl;\n                var id;\n                var len = this._chars.length;\n                for (var i = 0; i < len; i++) {\n                    element = this._chars[i];\n                    x = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"x\"));\n                    y = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"y\"));\n                    width = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"width\"));\n                    height = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"height\"));\n                    xoff = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"xoffset\"));\n                    yoff = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"yoffset\"));\n                    xadv = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"xadvance\"));\n                    page = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"page\"));\n                    chnl = parseInt(XmlUtils_1.XmlUtils.readAttributeValue(element, \"chnl\"));\n                    id = XmlUtils_1.XmlUtils.readAttributeValue(element, \"id\");\n                    this._bitmapFontTable.setChar(id, x, y, width, height, xoff, yoff, xadv, page, chnl);\n                }\n                this._pFinalizeAsset(this._font, this._font.name);\n                this._parseState = FNTParserState.PARSE_COMPLETE;\n                break;\n            case FNTParserState.PARSE_COMPLETE:\n                return ParserBase_1.ParserBase.PARSING_DONE;\n        }\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\n    };\n    return FNTParser;\n}(ParserBase_1.ParserBase));\nexports.FNTParser = FNTParser;\nvar FNTParserState = (function () {\n    function FNTParserState() {\n    }\n    FNTParserState.PARSE_XML = 0;\n    FNTParserState.PARSE_IMAGE = 1;\n    FNTParserState.PARSE_CHARS = 2;\n    FNTParserState.PARSE_COMPLETE = 3;\n    return FNTParserState;\n}());\n\n},{\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-core/lib/utils/XmlUtils\":undefined,\"awayjs-display/lib/text/BitmapFontTable\":undefined,\"awayjs-display/lib/text/Font\":undefined}],\"awayjs-parsers/lib/MD2Parser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nvar MD2Parser = (function (_super) {\n    __extends(MD2Parser, _super);\n    /**\n     * Creates a new MD2Parser object.\n     * @param textureType The extension of the texture (e.g. jpg/png/...)\n     * @param ignoreTexturePath If true, the path of the texture is ignored\n     */\n    function MD2Parser(textureType, ignoreTexturePath) {\n        if (textureType === void 0) { textureType = \"jpg\"; }\n        if (ignoreTexturePath === void 0) { ignoreTexturePath = true; }\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\n        this._clipNodes = new Object();\n        // the current elements being built\n        this._animationSet = new VertexAnimationSet_1.VertexAnimationSet();\n        this.materialFinal = false;\n        this.graphicsCreated = false;\n        this._textureType = textureType;\n        this._ignoreTexturePath = ignoreTexturePath;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD2Parser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md2\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD2Parser.supportsData = function (data) {\n        return (ParserUtils_1.ParserUtils.toString(data, 4) == 'IDP2');\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length != 1)\n            return;\n        var material = new MethodMaterial_1.MethodMaterial(resourceDependency.assets[0]);\n        if (this.materialMode >= 2)\n            material.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n        //add to the content property\n        this._pContent.addChild(this._sprite);\n        material.name = this._sprite.material.name;\n        this._sprite.material = material;\n        this._pFinalizeAsset(material);\n        this._pFinalizeAsset(this._sprite.graphics);\n        this._pFinalizeAsset(this._sprite);\n        this.materialFinal = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        // apply system default\n        if (this.materialMode < 2) {\n            this._sprite.material = DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial();\n        }\n        else {\n            this._sprite.material = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());\n            this._sprite.material.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n        }\n        //add to the content property\n        this._pContent.addChild(this._sprite);\n        this._pFinalizeAsset(this._sprite.graphics);\n        this._pFinalizeAsset(this._sprite);\n        this.materialFinal = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._pProceedParsing = function () {\n        if (!this._startedParsing) {\n            this._byteData = this._pGetByteData();\n            this._startedParsing = true;\n            // Reset bytearray read position (which may have been\n            // moved forward by the supportsData() function.)\n            this._byteData.position = 0;\n        }\n        while (this._pHasTime()) {\n            if (!this._parsedHeader) {\n                //----------------------------------------------------------------------------\n                // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n                //----------------------------------------------------------------------------\n                //this._byteData.endian = Endian.LITTLE_ENDIAN;\n                // TODO: Create a sprite only when encountered (if it makes sense\n                // for this file format) and return it using this._pFinalizeAsset()\n                this._sprite = new Sprite_1.Sprite();\n                this._graphics = this._sprite.graphics;\n                if (this.materialMode < 2) {\n                    this._sprite.material = DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial();\n                }\n                else {\n                    this._sprite.material = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());\n                    this._sprite.material.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                }\n                //_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n                //_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\n                // Parse header and decompress body\n                this.parseHeader();\n                this.parseMaterialNames();\n            }\n            else if (!this._parsedUV) {\n                this.parseUV();\n            }\n            else if (!this._parsedFaces) {\n                this.parseFaces();\n            }\n            else if (!this._parsedFrames) {\n                this.parseFrames();\n            }\n            else if ((this.graphicsCreated) && (this.materialFinal)) {\n                return ParserBase_1.ParserBase.PARSING_DONE;\n            }\n            else if (!this.graphicsCreated) {\n                this.graphicsCreated = true;\n                //create default subgraphics\n                this._graphics.addGraphic(this._firstElements.clone());\n                // Force name to be chosen by this._pFinalizeAsset()\n                this._sprite.name = \"\";\n                if (this.materialFinal) {\n                    //add to the content property\n                    this._pContent.addChild(this._sprite);\n                    this._pFinalizeAsset(this._sprite.graphics);\n                    this._pFinalizeAsset(this._sprite);\n                }\n                this._pPauseAndRetrieveDependencies();\n            }\n        }\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\n    };\n    MD2Parser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    /**\n     * Reads in all that MD2 Header data that is declared as private variables.\n     * I know its a lot, and it looks ugly, but only way to do it in Flash\n     */\n    MD2Parser.prototype.parseHeader = function () {\n        this._ident = this._byteData.readInt();\n        this._version = this._byteData.readInt();\n        this._skinWidth = this._byteData.readInt();\n        this._skinHeight = this._byteData.readInt();\n        //skip this._frameSize\n        this._byteData.readInt();\n        this._numSkins = this._byteData.readInt();\n        this._numVertices = this._byteData.readInt();\n        this._numST = this._byteData.readInt();\n        this._numTris = this._byteData.readInt();\n        //skip this._numGlCmds\n        this._byteData.readInt();\n        this._numFrames = this._byteData.readInt();\n        this._offsetSkins = this._byteData.readInt();\n        this._offsetST = this._byteData.readInt();\n        this._offsetTris = this._byteData.readInt();\n        this._offsetFrames = this._byteData.readInt();\n        //skip this._offsetGlCmds\n        this._byteData.readInt();\n        this._offsetEnd = this._byteData.readInt();\n        this._parsedHeader = true;\n    };\n    /**\n     * Parses the file names for the materials.\n     */\n    MD2Parser.prototype.parseMaterialNames = function () {\n        var url;\n        var name;\n        var extIndex;\n        var slashIndex;\n        this._materialNames = new Array();\n        this._byteData.position = this._offsetSkins;\n        var regExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n        for (var i = 0; i < this._numSkins; ++i) {\n            name = this._byteData.readUTFBytes(64);\n            name = name.replace(regExp, \"\");\n            extIndex = name.lastIndexOf(\".\");\n            if (this._ignoreTexturePath)\n                slashIndex = name.lastIndexOf(\"/\");\n            if (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n                name = name.substring(slashIndex + 1, extIndex);\n                url = name + \".\" + this._textureType;\n            }\n            else {\n                url = name;\n            }\n            this._materialNames[i] = name;\n            // only support 1 skin TODO: really?\n            if (this.dependencies.length == 0)\n                this._pAddDependency(name, new URLRequest_1.URLRequest(url));\n        }\n        if (this._materialNames.length > 0)\n            this._sprite.material.name = this._materialNames[0];\n        else\n            this.materialFinal = true;\n    };\n    /**\n     * Parses the uv data for the sprite.\n     */\n    MD2Parser.prototype.parseUV = function () {\n        var j = 0;\n        this._uvs = new Array(this._numST * 2);\n        this._byteData.position = this._offsetST;\n        for (var i = 0; i < this._numST; i++) {\n            this._uvs[j++] = this._byteData.readShort() / this._skinWidth;\n            this._uvs[j++] = this._byteData.readShort() / this._skinHeight;\n        }\n        this._parsedUV = true;\n    };\n    /**\n     * Parses unique indices for the faces.\n     */\n    MD2Parser.prototype.parseFaces = function () {\n        var a /*uint*/, b /*uint*/, c /*uint*/, ta /*uint*/, tb /*uint*/, tc;\n        var i;\n        this._vertIndices = new Array();\n        this._uvIndices = new Array();\n        this._indices = new Array() /*uint*/;\n        this._byteData.position = this._offsetTris;\n        for (i = 0; i < this._numTris; i++) {\n            //collect vertex indices\n            a = this._byteData.readUnsignedShort();\n            b = this._byteData.readUnsignedShort();\n            c = this._byteData.readUnsignedShort();\n            //collect uv indices\n            ta = this._byteData.readUnsignedShort();\n            tb = this._byteData.readUnsignedShort();\n            tc = this._byteData.readUnsignedShort();\n            this.addIndex(a, ta);\n            this.addIndex(b, tb);\n            this.addIndex(c, tc);\n        }\n        var len = this._uvIndices.length;\n        this._finalUV = new Array(len * 2);\n        for (i = 0; i < len; ++i) {\n            this._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n            this._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n        }\n        this._parsedFaces = true;\n    };\n    /**\n     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n     * corresponding vertex and uv data in the correct location.\n     * @param vertexIndex The original index in the vertex list.\n     * @param uvIndex The original index in the uv list.\n     */\n    MD2Parser.prototype.addIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\n        var index = this.findIndex(vertexIndex, uvIndex);\n        if (index == -1) {\n            this._indices.push(this._vertIndices.length);\n            this._vertIndices.push(vertexIndex);\n            this._uvIndices.push(uvIndex);\n        }\n        else\n            this._indices.push(index);\n    };\n    /**\n     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n     * @param vertexIndex The original index in the vertex list.\n     * @param uvIndex The original index in the uv list.\n     * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n     */\n    MD2Parser.prototype.findIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\n        var len = this._vertIndices.length;\n        for (var i = 0; i < len; ++i) {\n            if (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Parses all the frame elements.\n     */\n    MD2Parser.prototype.parseFrames = function () {\n        var sx, sy, sz;\n        var tx, ty, tz;\n        var graphics;\n        var elements;\n        var vertLen = this._vertIndices.length;\n        var fvertices;\n        var tvertices;\n        var i /*uint*/, j /*int*/, k;\n        //var ch : number /*uint*/;\n        var name = \"\";\n        var prevClip = null;\n        this._byteData.position = this._offsetFrames;\n        for (i = 0; i < this._numFrames; i++) {\n            tvertices = new Array();\n            fvertices = new Array(vertLen * 3);\n            sx = this._byteData.readFloat();\n            sy = this._byteData.readFloat();\n            sz = this._byteData.readFloat();\n            tx = this._byteData.readFloat();\n            ty = this._byteData.readFloat();\n            tz = this._byteData.readFloat();\n            name = this.readFrameName();\n            // Note, the extra data.position++ in the for loop is there\n            // to skip over a byte that holds the \"vertex normal index\"\n            for (j = 0; j < this._numVertices; j++, this._byteData.position++)\n                tvertices.push(sx * this._byteData.readUnsignedByte() + tx, sy * this._byteData.readUnsignedByte() + ty, sz * this._byteData.readUnsignedByte() + tz);\n            k = 0;\n            for (j = 0; j < vertLen; j++) {\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3];\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 2];\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 1];\n            }\n            elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n            if (this._firstElements == null)\n                this._firstElements = elements;\n            graphics = new Graphics_1.Graphics();\n            graphics.addGraphic(elements);\n            elements.setIndices(this._indices);\n            elements.setPositions(fvertices);\n            elements.setUVs(this._finalUV);\n            // cause explicit updates\n            elements.setNormals(null);\n            elements.setTangents(null);\n            // turn auto updates off because they may be animated and set explicitly\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            var clip = this._clipNodes[name];\n            if (!clip) {\n                // If another sequence was parsed before this one, starting\n                // a new state means the previous one is complete and can\n                // hence be finalized.\n                if (prevClip) {\n                    this._pFinalizeAsset(prevClip);\n                    this._animationSet.addAnimation(prevClip);\n                }\n                clip = new VertexClipNode_1.VertexClipNode();\n                clip.name = name;\n                clip.stitchFinalFrame = true;\n                this._clipNodes[name] = clip;\n                prevClip = clip;\n            }\n            clip.addFrame(graphics, 1000 / MD2Parser.FPS);\n        }\n        // Finalize the last state\n        if (prevClip) {\n            this._pFinalizeAsset(prevClip);\n            this._animationSet.addAnimation(prevClip);\n        }\n        // Force this._pFinalizeAsset() to decide name\n        this._pFinalizeAsset(this._animationSet);\n        this._parsedFrames = true;\n    };\n    MD2Parser.prototype.readFrameName = function () {\n        var name = \"\";\n        var k = 0;\n        for (var j = 0; j < 16; j++) {\n            var ch = this._byteData.readUnsignedByte();\n            if (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n                name += String.fromCharCode(ch);\n            if (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n                k++;\n        }\n        return name;\n    };\n    MD2Parser.FPS = 6;\n    return MD2Parser;\n}(ParserBase_1.ParserBase));\nexports.MD2Parser = MD2Parser;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/MD5AnimParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nvar MD5AnimParser = (function (_super) {\n    __extends(MD5AnimParser, _super);\n    /**\n     * Creates a new MD5AnimParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function MD5AnimParser(additionalRotationAxis, additionalRotationRadians) {\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\n        this._parseIndex = 0;\n        this._line = 0;\n        this._charLineIndex = 0;\n        this._rotationQuat = new Quaternion_1.Quaternion();\n        var t1 = new Quaternion_1.Quaternion();\n        var t2 = new Quaternion_1.Quaternion();\n        t1.fromAxisAngle(Vector3D_1.Vector3D.X_AXIS, -Math.PI * .5);\n        t2.fromAxisAngle(Vector3D_1.Vector3D.Y_AXIS, -Math.PI * .5);\n        this._rotationQuat.multiply(t2, t1);\n        if (additionalRotationAxis) {\n            this._rotationQuat.multiply(t2, t1);\n            t1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n            this._rotationQuat.multiply(t1, this._rotationQuat);\n        }\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD5AnimParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md5anim\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD5AnimParser.supportsData = function (data) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD5AnimParser.prototype._pProceedParsing = function () {\n        var token;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            this._startedParsing = true;\n        }\n        while (this._pHasTime()) {\n            token = this.getNextToken();\n            switch (token) {\n                case MD5AnimParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case \"\":\n                    // can occur at the end of a file\n                    break;\n                case MD5AnimParser.VERSION_TOKEN:\n                    this._version = this.getNextInt();\n                    if (this._version != 10)\n                        throw new Error(\"Unknown version number encountered!\");\n                    break;\n                case MD5AnimParser.COMMAND_LINE_TOKEN:\n                    this.parseCMD();\n                    break;\n                case MD5AnimParser.NUM_FRAMES_TOKEN:\n                    this._numFrames = this.getNextInt();\n                    this._bounds = new Array();\n                    this._frameData = new Array();\n                    break;\n                case MD5AnimParser.NUM_JOINTS_TOKEN:\n                    this._numJoints = this.getNextInt();\n                    this._hierarchy = new Array(this._numJoints);\n                    this._baseFrameData = new Array(this._numJoints);\n                    break;\n                case MD5AnimParser.FRAME_RATE_TOKEN:\n                    this._frameRate = this.getNextInt();\n                    break;\n                case MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n                    this._numAnimatedComponents = this.getNextInt();\n                    break;\n                case MD5AnimParser.HIERARCHY_TOKEN:\n                    this.parseHierarchy();\n                    break;\n                case MD5AnimParser.BOUNDS_TOKEN:\n                    this.parseBounds();\n                    break;\n                case MD5AnimParser.BASE_FRAME_TOKEN:\n                    this.parseBaseFrame();\n                    break;\n                case MD5AnimParser.FRAME_TOKEN:\n                    this.parseFrame();\n                    break;\n                default:\n                    if (!this._reachedEOF)\n                        this.sendUnknownKeywordError();\n            }\n            if (this._reachedEOF) {\n                this._clip = new SkeletonClipNode_1.SkeletonClipNode();\n                this.translateClip();\n                this._pFinalizeAsset(this._clip);\n                return ParserBase_1.ParserBase.PARSING_DONE;\n            }\n        }\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\n    };\n    /**\n     * Converts all key frame data to an SkinnedAnimationSequence.\n     */\n    MD5AnimParser.prototype.translateClip = function () {\n        for (var i = 0; i < this._numFrames; ++i)\n            this._clip.addFrame(this.translatePose(this._frameData[i]), 1000 / this._frameRate);\n    };\n    /**\n     * Converts a single key frame data to a SkeletonPose.\n     * @param frameData The actual frame data.\n     * @return A SkeletonPose containing the frame data's pose.\n     */\n    MD5AnimParser.prototype.translatePose = function (frameData) {\n        var hierarchy;\n        var pose;\n        var base;\n        var flags;\n        var j;\n        var translate = new Vector3D_1.Vector3D();\n        var orientation = new Quaternion_1.Quaternion();\n        var components = frameData.components;\n        var skelPose = new SkeletonPose_1.SkeletonPose();\n        var jointPoses = skelPose.jointPoses;\n        for (var i = 0; i < this._numJoints; ++i) {\n            j = 0;\n            pose = new JointPose_1.JointPose();\n            hierarchy = this._hierarchy[i];\n            base = this._baseFrameData[i];\n            flags = hierarchy.flags;\n            translate.x = base.position.x;\n            translate.y = base.position.y;\n            translate.z = base.position.z;\n            orientation.x = base.orientation.x;\n            orientation.y = base.orientation.y;\n            orientation.z = base.orientation.z;\n            if (flags & 1)\n                translate.x = components[hierarchy.startIndex + (j++)];\n            if (flags & 2)\n                translate.y = components[hierarchy.startIndex + (j++)];\n            if (flags & 4)\n                translate.z = components[hierarchy.startIndex + (j++)];\n            if (flags & 8)\n                orientation.x = components[hierarchy.startIndex + (j++)];\n            if (flags & 16)\n                orientation.y = components[hierarchy.startIndex + (j++)];\n            if (flags & 32)\n                orientation.z = components[hierarchy.startIndex + (j++)];\n            var w = 1 - orientation.x * orientation.x - orientation.y * orientation.y - orientation.z * orientation.z;\n            orientation.w = w < 0 ? 0 : -Math.sqrt(w);\n            if (hierarchy.parentIndex < 0) {\n                pose.orientation.multiply(this._rotationQuat, orientation);\n                pose.translation = this._rotationQuat.rotatePoint(translate);\n            }\n            else {\n                pose.orientation.copyFrom(orientation);\n                pose.translation.x = translate.x;\n                pose.translation.y = translate.y;\n                pose.translation.z = translate.z;\n            }\n            pose.orientation.y = -pose.orientation.y;\n            pose.orientation.z = -pose.orientation.z;\n            pose.translation.x = -pose.translation.x;\n            jointPoses[i] = pose;\n        }\n        return skelPose;\n    };\n    /**\n     * Parses the skeleton's hierarchy data.\n     */\n    MD5AnimParser.prototype.parseHierarchy = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new HierarchyData();\n            data.name = this.parseLiteralstring();\n            data.parentIndex = this.getNextInt();\n            data.flags = this.getNextInt();\n            data.startIndex = this.getNextInt();\n            this._hierarchy[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses frame bounds.\n     */\n    MD5AnimParser.prototype.parseBounds = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new BoundsData();\n            data.min = this.parseVector3D();\n            data.max = this.parseVector3D();\n            this._bounds[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses the base frame.\n     */\n    MD5AnimParser.prototype.parseBaseFrame = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new BaseFrameData();\n            data.position = this.parseVector3D();\n            data.orientation = this.parseQuaternion();\n            this._baseFrameData[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses a single frame.\n     */\n    MD5AnimParser.prototype.parseFrame = function () {\n        var ch;\n        var data;\n        var token;\n        var frameIndex;\n        frameIndex = this.getNextInt();\n        token = this.getNextToken();\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new FrameData();\n            data.components = new Array(this._numAnimatedComponents);\n            for (var i = 0; i < this._numAnimatedComponents; ++i)\n                data.components[i] = this.getNextNumber();\n            this._frameData[frameIndex] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Puts back the last read character into the data stream.\n     */\n    MD5AnimParser.prototype.putBack = function () {\n        this._parseIndex--;\n        this._charLineIndex--;\n        this._reachedEOF = this._parseIndex >= this._textData.length;\n    };\n    /**\n     * Gets the next token in the data stream.\n     */\n    MD5AnimParser.prototype.getNextToken = function () {\n        var ch;\n        var token = \"\";\n        while (!this._reachedEOF) {\n            ch = this.getNextChar();\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n                if (token != MD5AnimParser.COMMENT_TOKEN)\n                    this.skipWhiteSpace();\n                if (token != \"\")\n                    return token;\n            }\n            else\n                token += ch;\n            if (token == MD5AnimParser.COMMENT_TOKEN)\n                return token;\n        }\n        return token;\n    };\n    /**\n     * Skips all whitespace in the data stream.\n     */\n    MD5AnimParser.prototype.skipWhiteSpace = function () {\n        var ch;\n        do\n            ch = this.getNextChar();\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n        this.putBack();\n    };\n    /**\n     * Skips to the next line.\n     */\n    MD5AnimParser.prototype.ignoreLine = function () {\n        var ch;\n        while (!this._reachedEOF && ch != \"\\n\")\n            ch = this.getNextChar();\n    };\n    /**\n     * Retrieves the next single character in the data stream.\n     */\n    MD5AnimParser.prototype.getNextChar = function () {\n        var ch = this._textData.charAt(this._parseIndex++);\n        if (ch == \"\\n\") {\n            ++this._line;\n            this._charLineIndex = 0;\n        }\n        else if (ch != \"\\r\")\n            ++this._charLineIndex;\n        if (this._parseIndex == this._textData.length)\n            this._reachedEOF = true;\n        return ch;\n    };\n    /**\n     * Retrieves the next integer in the data stream.\n     */\n    MD5AnimParser.prototype.getNextInt = function () {\n        var i = parseInt(this.getNextToken());\n        if (isNaN(i))\n            this.sendParseError(\"int type\");\n        return i;\n    };\n    /**\n     * Retrieves the next floating point number in the data stream.\n     */\n    MD5AnimParser.prototype.getNextNumber = function () {\n        var f = parseFloat(this.getNextToken());\n        if (isNaN(f))\n            this.sendParseError(\"float type\");\n        return f;\n    };\n    /**\n     * Retrieves the next 3d vector in the data stream.\n     */\n    MD5AnimParser.prototype.parseVector3D = function () {\n        var vec = new Vector3D_1.Vector3D();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        vec.x = this.getNextNumber();\n        vec.y = this.getNextNumber();\n        vec.z = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return vec;\n    };\n    /**\n     * Retrieves the next quaternion in the data stream.\n     */\n    MD5AnimParser.prototype.parseQuaternion = function () {\n        var quat = new Quaternion_1.Quaternion();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        quat.x = this.getNextNumber();\n        quat.y = this.getNextNumber();\n        quat.z = this.getNextNumber();\n        // quat supposed to be unit length\n        var t = 1 - (quat.x * quat.x) - (quat.y * quat.y) - (quat.z * quat.z);\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return quat;\n    };\n    /**\n     * Parses the command line data.\n     */\n    MD5AnimParser.prototype.parseCMD = function () {\n        // just ignore the command line property\n        this.parseLiteralstring();\n    };\n    /**\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n     * by double quotes.\n     */\n    MD5AnimParser.prototype.parseLiteralstring = function () {\n        this.skipWhiteSpace();\n        var ch = this.getNextChar();\n        var str = \"\";\n        if (ch != \"\\\"\")\n            this.sendParseError(\"\\\"\");\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            ch = this.getNextChar();\n            if (ch != \"\\\"\")\n                str += ch;\n        } while (ch != \"\\\"\");\n        return str;\n    };\n    /**\n     * Throws an end-of-file error when a premature end of file was encountered.\n     */\n    MD5AnimParser.prototype.sendEOFError = function () {\n        throw new Error(\"Unexpected end of file\");\n    };\n    /**\n     * Throws an error when an unexpected token was encountered.\n     * @param expected The token type that was actually expected.\n     */\n    MD5AnimParser.prototype.sendParseError = function (expected) {\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n    };\n    /**\n     * Throws an error when an unknown keyword was encountered.\n     */\n    MD5AnimParser.prototype.sendUnknownKeywordError = function () {\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n    };\n    MD5AnimParser.VERSION_TOKEN = \"MD5Version\";\n    MD5AnimParser.COMMAND_LINE_TOKEN = \"commandline\";\n    MD5AnimParser.NUM_FRAMES_TOKEN = \"numFrames\";\n    MD5AnimParser.NUM_JOINTS_TOKEN = \"numJoints\";\n    MD5AnimParser.FRAME_RATE_TOKEN = \"frameRate\";\n    MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN = \"numAnimatedComponents\";\n    MD5AnimParser.HIERARCHY_TOKEN = \"hierarchy\";\n    MD5AnimParser.BOUNDS_TOKEN = \"bounds\";\n    MD5AnimParser.BASE_FRAME_TOKEN = \"baseframe\";\n    MD5AnimParser.FRAME_TOKEN = \"frame\";\n    MD5AnimParser.COMMENT_TOKEN = \"//\";\n    return MD5AnimParser;\n}(ParserBase_1.ParserBase));\nexports.MD5AnimParser = MD5AnimParser;\n/**\n *\n */\nvar BaseFrameData = (function () {\n    function BaseFrameData() {\n    }\n    return BaseFrameData;\n}());\nexports.BaseFrameData = BaseFrameData;\n/**\n *\n */\nvar BoundsData = (function () {\n    function BoundsData() {\n    }\n    return BoundsData;\n}());\nexports.BoundsData = BoundsData;\n/**\n *\n */\nvar FrameData = (function () {\n    function FrameData() {\n    }\n    return FrameData;\n}());\nexports.FrameData = FrameData;\n/**\n *\n */\nvar HierarchyData = (function () {\n    function HierarchyData() {\n    }\n    return HierarchyData;\n}());\nexports.HierarchyData = HierarchyData;\n\n},{\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined}],\"awayjs-parsers/lib/MD5MeshParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n// todo: create animation system, parse skeleton\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nvar MD5MeshParser = (function (_super) {\n    __extends(MD5MeshParser, _super);\n    /**\n     * Creates a new MD5MeshParser object.\n     */\n    function MD5MeshParser(additionalRotationAxis, additionalRotationRadians) {\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\n        this._parseIndex = 0;\n        this._line = 0;\n        this._charLineIndex = 0;\n        this._rotationQuat = new Quaternion_1.Quaternion();\n        this._rotationQuat.fromAxisAngle(Vector3D_1.Vector3D.X_AXIS, -Math.PI * .5);\n        if (additionalRotationAxis) {\n            var quat = new Quaternion_1.Quaternion();\n            quat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n            this._rotationQuat.multiply(this._rotationQuat, quat);\n        }\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD5MeshParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md5sprite\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD5MeshParser.supportsData = function (data) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD5MeshParser.prototype._pProceedParsing = function () {\n        var token;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            this._startedParsing = true;\n        }\n        while (this._pHasTime()) {\n            token = this.getNextToken();\n            switch (token) {\n                case MD5MeshParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case MD5MeshParser.VERSION_TOKEN:\n                    this._version = this.getNextInt();\n                    if (this._version != 10)\n                        throw new Error(\"Unknown version number encountered!\");\n                    break;\n                case MD5MeshParser.COMMAND_LINE_TOKEN:\n                    this.parseCMD();\n                    break;\n                case MD5MeshParser.NUM_JOINTS_TOKEN:\n                    this._numJoints = this.getNextInt();\n                    this._bindPoses = new Array(this._numJoints);\n                    break;\n                case MD5MeshParser.NUM_MESHES_TOKEN:\n                    this._numMeshes = this.getNextInt();\n                    break;\n                case MD5MeshParser.JOINTS_TOKEN:\n                    this.parseJoints();\n                    break;\n                case MD5MeshParser.MESH_TOKEN:\n                    this.parseMesh();\n                    break;\n                default:\n                    if (!this._reachedEOF)\n                        this.sendUnknownKeywordError();\n            }\n            if (this._reachedEOF) {\n                this.calculateMaxJointCount();\n                this._animationSet = new SkeletonAnimationSet_1.SkeletonAnimationSet(this._maxJointCount);\n                this._sprite = new Sprite_1.Sprite();\n                this._graphics = this._sprite.graphics;\n                for (var i = 0; i < this._elementsData.length; ++i)\n                    this._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\n                //_graphics.animation = _animation;\n                //\t\t\t\t\t_sprite.animationController = _animationController;\n                //add to the content property\n                this._pContent.addChild(this._sprite);\n                this._pFinalizeAsset(this._graphics);\n                this._pFinalizeAsset(this._sprite);\n                this._pFinalizeAsset(this._skeleton);\n                this._pFinalizeAsset(this._animationSet);\n                return ParserBase_1.ParserBase.PARSING_DONE;\n            }\n        }\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\n    };\n    MD5MeshParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    MD5MeshParser.prototype.calculateMaxJointCount = function () {\n        this._maxJointCount = 0;\n        var numElementsData = this._elementsData.length;\n        for (var i = 0; i < numElementsData; ++i) {\n            var elementsData = this._elementsData[i];\n            var positionData = elementsData.positionData;\n            var numVerts = positionData.length;\n            for (var j = 0; j < numVerts; ++j) {\n                var zeroWeights = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\n                var totalJoints = positionData[j].countWeight - zeroWeights;\n                if (totalJoints > this._maxJointCount)\n                    this._maxJointCount = totalJoints;\n            }\n        }\n    };\n    MD5MeshParser.prototype.countZeroWeightJoints = function (position, weights) {\n        var start = position.startWeight;\n        var end = position.startWeight + position.countWeight;\n        var count = 0;\n        var weight;\n        for (var i = start; i < end; ++i) {\n            weight = weights[i].bias;\n            if (weight == 0)\n                ++count;\n        }\n        return count;\n    };\n    /**\n     * Parses the skeleton's joints.\n     */\n    MD5MeshParser.prototype.parseJoints = function () {\n        var ch;\n        var joint;\n        var pos;\n        var quat;\n        var i = 0;\n        var token = this.getNextToken();\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        this._skeleton = new Skeleton_1.Skeleton();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            joint = new SkeletonJoint_1.SkeletonJoint();\n            joint.name = this.parseLiteralstring();\n            joint.parentIndex = this.getNextInt();\n            pos = this.parseVector3D();\n            pos = this._rotationQuat.rotatePoint(pos);\n            quat = this.parseQuaternion();\n            // todo: check if this is correct, or maybe we want to actually store it as quats?\n            this._bindPoses[i] = quat.toMatrix3D();\n            this._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n            var inv = this._bindPoses[i].clone();\n            inv.invert();\n            joint.inverseBindPose = inv.rawData;\n            this._skeleton.joints[i++] = joint;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5MeshParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Puts back the last read character into the data stream.\n     */\n    MD5MeshParser.prototype.putBack = function () {\n        this._parseIndex--;\n        this._charLineIndex--;\n        this._reachedEOF = this._parseIndex >= this._textData.length;\n    };\n    /**\n     * Parses the mesh graphics.\n     */\n    MD5MeshParser.prototype.parseMesh = function () {\n        var token = this.getNextToken();\n        var ch;\n        var positionData;\n        var weights;\n        var indices;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        if (this._shaders == null)\n            this._shaders = new Array();\n        while (ch != \"}\") {\n            ch = this.getNextToken();\n            switch (ch) {\n                case MD5MeshParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case MD5MeshParser.MESH_SHADER_TOKEN:\n                    this._shaders.push(this.parseLiteralstring());\n                    break;\n                case MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n                    positionData = new Array(this.getNextInt());\n                    break;\n                case MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n                    indices = new Array(this.getNextInt() * 3) /*uint*/;\n                    break;\n                case MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n                    weights = new Array(this.getNextInt());\n                    break;\n                case MD5MeshParser.MESH_VERT_TOKEN:\n                    this.parseVertex(positionData);\n                    break;\n                case MD5MeshParser.MESH_TRI_TOKEN:\n                    this.parseTri(indices);\n                    break;\n                case MD5MeshParser.MESH_WEIGHT_TOKEN:\n                    this.parseJoint(weights);\n                    break;\n            }\n        }\n        if (this._elementsData == null)\n            this._elementsData = new Array();\n        var i = this._elementsData.length;\n        this._elementsData[i] = new ElementsData();\n        this._elementsData[i].positionData = positionData;\n        this._elementsData[i].weightData = weights;\n        this._elementsData[i].indices = indices;\n    };\n    /**\n     * Converts the sprite data to a SkinnedSub instance.\n     * @param positionData The sprite's positions.\n     * @param weights The joint weights per position.\n     * @param indices The indices for the faces.\n     * @return A TriangleElements instance containing all elements data for the current sprite.\n     */\n    MD5MeshParser.prototype.translateElements = function (positionData, weights, indices /*uint*/) {\n        var len = positionData.length;\n        var v1 /*int*/, v2 /*int*/, v3;\n        var position;\n        var weight;\n        var bindPose;\n        var pos;\n        var elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n        var uvs = new Array(len * 2);\n        var positions = new Array(len * 3);\n        var jointIndices = new Array(len * this._maxJointCount);\n        var jointWeights = new Array(len * this._maxJointCount);\n        var l = 0;\n        var nonZeroWeights;\n        for (var i = 0; i < len; ++i) {\n            position = positionData[i];\n            v1 = position.index * 3;\n            v2 = v1 + 1;\n            v3 = v1 + 2;\n            positions[v1] = positions[v2] = positions[v3] = 0;\n            nonZeroWeights = 0;\n            for (var j = 0; j < position.countWeight; ++j) {\n                weight = weights[position.startWeight + j];\n                if (weight.bias > 0) {\n                    bindPose = this._bindPoses[weight.joint];\n                    pos = bindPose.transformVector(weight.pos);\n                    positions[v1] += pos.x * weight.bias;\n                    positions[v2] += pos.y * weight.bias;\n                    positions[v3] += pos.z * weight.bias;\n                    // indices need to be multiplied by 3 (amount of matrix registers)\n                    jointIndices[l] = weight.joint * 3;\n                    jointWeights[l++] = weight.bias;\n                    ++nonZeroWeights;\n                }\n            }\n            for (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n                jointIndices[l] = 0;\n                jointWeights[l++] = 0;\n            }\n            v1 = position.index << 1;\n            uvs[v1++] = position.s;\n            uvs[v1] = position.t;\n        }\n        elements.jointsPerVertex = this._maxJointCount;\n        elements.setIndices(indices);\n        elements.setPositions(positions);\n        elements.setUVs(uvs);\n        elements.setJointIndices(jointIndices);\n        elements.setJointWeights(jointWeights);\n        // cause explicit updates\n        elements.setNormals(null);\n        elements.setTangents(null);\n        // turn auto updates off because they may be animated and set explicitly\n        elements.autoDeriveTangents = false;\n        elements.autoDeriveNormals = false;\n        return elements;\n    };\n    /**\n     * Retrieve the next triplet of position indices that form a face.\n     * @param indices The index list in which to store the read data.\n     */\n    MD5MeshParser.prototype.parseTri = function (indices /*uint*/) {\n        var index = this.getNextInt() * 3;\n        indices[index] = this.getNextInt();\n        indices[index + 1] = this.getNextInt();\n        indices[index + 2] = this.getNextInt();\n    };\n    /**\n     * Reads a new joint data set for a single joint.\n     * @param weights the target list to contain the weight data.\n     */\n    MD5MeshParser.prototype.parseJoint = function (weights) {\n        var weight = new JointData();\n        weight.index = this.getNextInt();\n        weight.joint = this.getNextInt();\n        weight.bias = this.getNextNumber();\n        weight.pos = this.parseVector3D();\n        weights[weight.index] = weight;\n    };\n    /**\n     * Reads the data for a single position.\n     * @param positionData The list to contain the position data.\n     */\n    MD5MeshParser.prototype.parseVertex = function (positionData) {\n        var position = new PositionData();\n        position.index = this.getNextInt();\n        this.parseUV(position);\n        position.startWeight = this.getNextInt();\n        position.countWeight = this.getNextInt();\n        //\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\n        positionData[position.index] = position;\n    };\n    /**\n     * Reads the next uv coordinate.\n     * @param positionData The positionData to contain the UV coordinates.\n     */\n    MD5MeshParser.prototype.parseUV = function (positionData) {\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        positionData.s = this.getNextNumber();\n        positionData.t = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n    };\n    /**\n     * Gets the next token in the data stream.\n     */\n    MD5MeshParser.prototype.getNextToken = function () {\n        var ch;\n        var token = \"\";\n        while (!this._reachedEOF) {\n            ch = this.getNextChar();\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n                if (token != MD5MeshParser.COMMENT_TOKEN)\n                    this.skipWhiteSpace();\n                if (token != \"\")\n                    return token;\n            }\n            else\n                token += ch;\n            if (token == MD5MeshParser.COMMENT_TOKEN)\n                return token;\n        }\n        return token;\n    };\n    /**\n     * Skips all whitespace in the data stream.\n     */\n    MD5MeshParser.prototype.skipWhiteSpace = function () {\n        var ch;\n        do\n            ch = this.getNextChar();\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n        this.putBack();\n    };\n    /**\n     * Skips to the next line.\n     */\n    MD5MeshParser.prototype.ignoreLine = function () {\n        var ch;\n        while (!this._reachedEOF && ch != \"\\n\")\n            ch = this.getNextChar();\n    };\n    /**\n     * Retrieves the next single character in the data stream.\n     */\n    MD5MeshParser.prototype.getNextChar = function () {\n        var ch = this._textData.charAt(this._parseIndex++);\n        if (ch == \"\\n\") {\n            ++this._line;\n            this._charLineIndex = 0;\n        }\n        else if (ch != \"\\r\")\n            ++this._charLineIndex;\n        if (this._parseIndex >= this._textData.length)\n            this._reachedEOF = true;\n        return ch;\n    };\n    /**\n     * Retrieves the next integer in the data stream.\n     */\n    MD5MeshParser.prototype.getNextInt = function () {\n        var i = parseInt(this.getNextToken());\n        if (isNaN(i))\n            this.sendParseError(\"int type\");\n        return i;\n    };\n    /**\n     * Retrieves the next floating point number in the data stream.\n     */\n    MD5MeshParser.prototype.getNextNumber = function () {\n        var f = parseFloat(this.getNextToken());\n        if (isNaN(f))\n            this.sendParseError(\"float type\");\n        return f;\n    };\n    /**\n     * Retrieves the next 3d vector in the data stream.\n     */\n    MD5MeshParser.prototype.parseVector3D = function () {\n        var vec = new Vector3D_1.Vector3D();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        vec.x = -this.getNextNumber();\n        vec.y = this.getNextNumber();\n        vec.z = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return vec;\n    };\n    /**\n     * Retrieves the next quaternion in the data stream.\n     */\n    MD5MeshParser.prototype.parseQuaternion = function () {\n        var quat = new Quaternion_1.Quaternion();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        quat.x = this.getNextNumber();\n        quat.y = -this.getNextNumber();\n        quat.z = -this.getNextNumber();\n        // quat supposed to be unit length\n        var t = 1 - quat.x * quat.x - quat.y * quat.y - quat.z * quat.z;\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        var rotQuat = new Quaternion_1.Quaternion();\n        rotQuat.multiply(this._rotationQuat, quat);\n        return rotQuat;\n    };\n    /**\n     * Parses the command line data.\n     */\n    MD5MeshParser.prototype.parseCMD = function () {\n        // just ignore the command line property\n        this.parseLiteralstring();\n    };\n    /**\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n     * by double quotes.\n     */\n    MD5MeshParser.prototype.parseLiteralstring = function () {\n        this.skipWhiteSpace();\n        var ch = this.getNextChar();\n        var str = \"\";\n        if (ch != \"\\\"\")\n            this.sendParseError(\"\\\"\");\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            ch = this.getNextChar();\n            if (ch != \"\\\"\")\n                str += ch;\n        } while (ch != \"\\\"\");\n        return str;\n    };\n    /**\n     * Throws an end-of-file error when a premature end of file was encountered.\n     */\n    MD5MeshParser.prototype.sendEOFError = function () {\n        throw new Error(\"Unexpected end of file\");\n    };\n    /**\n     * Throws an error when an unexpected token was encountered.\n     * @param expected The token type that was actually expected.\n     */\n    MD5MeshParser.prototype.sendParseError = function (expected) {\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n    };\n    /**\n     * Throws an error when an unknown keyword was encountered.\n     */\n    MD5MeshParser.prototype.sendUnknownKeywordError = function () {\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n    };\n    MD5MeshParser.VERSION_TOKEN = \"MD5Version\";\n    MD5MeshParser.COMMAND_LINE_TOKEN = \"commandline\";\n    MD5MeshParser.NUM_JOINTS_TOKEN = \"numJoints\";\n    MD5MeshParser.NUM_MESHES_TOKEN = \"numMeshes\";\n    MD5MeshParser.COMMENT_TOKEN = \"//\";\n    MD5MeshParser.JOINTS_TOKEN = \"joints\";\n    MD5MeshParser.MESH_TOKEN = \"mesh\";\n    MD5MeshParser.MESH_SHADER_TOKEN = \"shader\";\n    MD5MeshParser.MESH_NUM_VERTS_TOKEN = \"numverts\";\n    MD5MeshParser.MESH_VERT_TOKEN = \"vert\";\n    MD5MeshParser.MESH_NUM_TRIS_TOKEN = \"numtris\";\n    MD5MeshParser.MESH_TRI_TOKEN = \"tri\";\n    MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN = \"numweights\";\n    MD5MeshParser.MESH_WEIGHT_TOKEN = \"weight\";\n    return MD5MeshParser;\n}(ParserBase_1.ParserBase));\nexports.MD5MeshParser = MD5MeshParser;\nvar PositionData = (function () {\n    function PositionData() {\n    }\n    return PositionData;\n}());\nexports.PositionData = PositionData;\nvar JointData = (function () {\n    function JointData() {\n    }\n    return JointData;\n}());\nexports.JointData = JointData;\nvar ElementsData = (function () {\n    function ElementsData() {\n    }\n    return ElementsData;\n}());\nexports.ElementsData = ElementsData;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined}],\"awayjs-parsers/lib/Max3DSParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nvar Max3DSParser = (function (_super) {\n    __extends(Max3DSParser, _super);\n    /**\n     * Creates a new <code>Max3DSParser</code> object.\n     *\n     * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n     */\n    function Max3DSParser(useSmoothingGroups) {\n        if (useSmoothingGroups === void 0) { useSmoothingGroups = true; }\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.ARRAY_BUFFER);\n        this._useSmoothingGroups = useSmoothingGroups;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    Max3DSParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"3ds\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    Max3DSParser.supportsData = function (data) {\n        var ba;\n        ba = ParserUtils_1.ParserUtils.toByteArray(data);\n        if (ba) {\n            ba.position = 0;\n            if (ba.readShort() == 0x4d4d)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length == 1) {\n            var asset;\n            asset = resourceDependency.assets[0];\n            if (asset.isAsset(BitmapImage2D_1.BitmapImage2D)) {\n                var tex;\n                tex = this._textures[resourceDependency.id];\n                tex.texture = new Single2DTexture_1.Single2DTexture(asset);\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        // TODO: Implement\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._pProceedParsing = function () {\n        if (!this._byteData) {\n            this._byteData = this._pGetByteData();\n            this._byteData.position = 0;\n            //----------------------------------------------------------------------------\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n            //----------------------------------------------------------------------------\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n            //----------------------------------------------------------------------------\n            this._textures = {};\n            this._materials = {};\n            this._unfinalized_objects = {};\n        }\n        // TODO: With this construct, the loop will run no-op for as long\n        // as there is time once file has finished reading. Consider a nice\n        // way to stop loop when byte array is empty, without putting it in\n        // the while-conditional, which will prevent finalizations from\n        // happening after the last chunk.\n        while (this._pHasTime()) {\n            // If we are currently working on an object, and the most recent chunk was\n            // the last one in that object, finalize the current object.\n            if (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n                this.finalizeCurrentMaterial();\n            else if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n                // Can't finalize at this point, because we have to wait until the full\n                // animation section has been parsed for any potential pivot definitions\n                this._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n                this._cur_obj_end = Number.MAX_VALUE /*uint*/;\n                this._cur_obj = null;\n            }\n            if (this._byteData.getBytesAvailable() > 0) {\n                var cid;\n                var len;\n                var end;\n                cid = this._byteData.readUnsignedShort();\n                len = this._byteData.readUnsignedInt();\n                end = this._byteData.position + (len - 6);\n                switch (cid) {\n                    case 0x4D4D: // MAIN3DS\n                    case 0x3D3D: // EDIT3DS\n                    case 0xB000:\n                        // This types are \"container chunks\" and contain only\n                        // sub-chunks (no data on their own.) This means that\n                        // there is nothing more to parse at this point, and\n                        // instead we should progress to the next chunk, which\n                        // will be the first sub-chunk of this one.\n                        continue;\n                    case 0xAFFF:\n                        this._cur_mat_end = end;\n                        this._cur_mat = this.parseMaterial();\n                        break;\n                    case 0x4000:\n                        this._cur_obj_end = end;\n                        this._cur_obj = new ObjectVO();\n                        this._cur_obj.name = this.readNulTermstring();\n                        this._cur_obj.materials = new Array();\n                        this._cur_obj.materialFaces = {};\n                        break;\n                    case 0x4100:\n                        this._cur_obj.type = Sprite_1.Sprite.assetType;\n                        break;\n                    case 0x4110:\n                        this.parseVertexList();\n                        break;\n                    case 0x4120:\n                        this.parseFaceList();\n                        break;\n                    case 0x4140:\n                        this.parseUVList();\n                        break;\n                    case 0x4130:\n                        this.parseFaceMaterialList();\n                        break;\n                    case 0x4160:\n                        this._cur_obj.transform = this.readTransform();\n                        break;\n                    case 0xB002:\n                        this.parseObjectAnimation(end);\n                        break;\n                    case 0x4150:\n                        this.parseSmoothingGroups();\n                        break;\n                    default:\n                        // Skip this (unknown) chunk\n                        this._byteData.position += (len - 6);\n                        break;\n                }\n                // Pause parsing if there were any dependencies found during this\n                // iteration (i.e. if there are any dependencies that need to be\n                // retrieved at this time.)\n                if (this.dependencies.length) {\n                    this._pPauseAndRetrieveDependencies();\n                    break;\n                }\n            }\n        }\n        // More parsing is required if the entire byte array has not yet\n        // been read, or if there is a currently non-finalized object in\n        // the pipeline.\n        if (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n            return ParserBase_1.ParserBase.MORE_TO_PARSE;\n        }\n        else {\n            var name;\n            // Finalize any remaining objects before ending.\n            for (name in this._unfinalized_objects) {\n                var obj;\n                obj = this.constructObject(this._unfinalized_objects[name]);\n                if (obj) {\n                    //add to the content property\n                    this._pContent.addChild(obj);\n                    this._pFinalizeAsset(obj, name);\n                }\n            }\n            return ParserBase_1.ParserBase.PARSING_DONE;\n        }\n    };\n    Max3DSParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    Max3DSParser.prototype.parseMaterial = function () {\n        var mat;\n        mat = new MaterialVO();\n        while (this._byteData.position < this._cur_mat_end) {\n            var cid;\n            var len;\n            var end;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            end = this._byteData.position + (len - 6);\n            switch (cid) {\n                case 0xA000:\n                    mat.name = this.readNulTermstring();\n                    break;\n                case 0xA010:\n                    mat.ambientColor = this.readColor();\n                    break;\n                case 0xA020:\n                    mat.diffuseColor = this.readColor();\n                    break;\n                case 0xA030:\n                    mat.specularColor = this.readColor();\n                    break;\n                case 0xA081:\n                    mat.twoSided = true;\n                    break;\n                case 0xA200:\n                    mat.colorMap = this.parseTexture(end);\n                    break;\n                case 0xA204:\n                    mat.specularMap = this.parseTexture(end);\n                    break;\n                default:\n                    this._byteData.position = end;\n                    break;\n            }\n        }\n        return mat;\n    };\n    Max3DSParser.prototype.parseTexture = function (end /*uint*/) {\n        var tex;\n        tex = new TextureVO();\n        while (this._byteData.position < end) {\n            var cid;\n            var len;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            switch (cid) {\n                case 0xA300:\n                    tex.url = this.readNulTermstring();\n                    break;\n                default:\n                    // Skip this unknown texture sub-chunk\n                    this._byteData.position += (len - 6);\n                    break;\n            }\n        }\n        this._textures[tex.url] = tex;\n        this._pAddDependency(tex.url, new URLRequest_1.URLRequest(tex.url));\n        return tex;\n    };\n    Max3DSParser.prototype.parseVertexList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.verts = new Array(count * 3);\n        i = 0;\n        len = this._cur_obj.verts.length;\n        while (i < len) {\n            var x, y, z;\n            x = this._byteData.readFloat();\n            y = this._byteData.readFloat();\n            z = this._byteData.readFloat();\n            this._cur_obj.verts[i++] = x;\n            this._cur_obj.verts[i++] = z;\n            this._cur_obj.verts[i++] = y;\n        }\n    };\n    Max3DSParser.prototype.parseFaceList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.indices = new Array(count * 3) /*uint*/;\n        i = 0;\n        len = this._cur_obj.indices.length;\n        while (i < len) {\n            var i0 /*uint*/, i1 /*uint*/, i2;\n            i0 = this._byteData.readUnsignedShort();\n            i1 = this._byteData.readUnsignedShort();\n            i2 = this._byteData.readUnsignedShort();\n            this._cur_obj.indices[i++] = i0;\n            this._cur_obj.indices[i++] = i2;\n            this._cur_obj.indices[i++] = i1;\n            // Skip \"face info\", irrelevant in Away3D\n            this._byteData.position += 2;\n        }\n        this._cur_obj.smoothingGroups = new Array(count) /*uint*/;\n    };\n    Max3DSParser.prototype.parseSmoothingGroups = function () {\n        var len = this._cur_obj.indices.length / 3;\n        var i = 0;\n        while (i < len) {\n            this._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n            i++;\n        }\n    };\n    Max3DSParser.prototype.parseUVList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.uvs = new Array(count * 2);\n        i = 0;\n        len = this._cur_obj.uvs.length;\n        while (i < len) {\n            this._cur_obj.uvs[i++] = this._byteData.readFloat();\n            this._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n        }\n    };\n    Max3DSParser.prototype.parseFaceMaterialList = function () {\n        var mat;\n        var count;\n        var i;\n        var faces;\n        mat = this.readNulTermstring();\n        count = this._byteData.readUnsignedShort();\n        faces = new Array(count) /*uint*/;\n        i = 0;\n        while (i < faces.length)\n            faces[i++] = this._byteData.readUnsignedShort();\n        this._cur_obj.materials.push(mat);\n        this._cur_obj.materialFaces[mat] = faces;\n    };\n    Max3DSParser.prototype.parseObjectAnimation = function (end) {\n        var vo;\n        var obj;\n        var pivot;\n        var name;\n        var hier;\n        // Pivot defaults to origin\n        pivot = new Vector3D_1.Vector3D;\n        while (this._byteData.position < end) {\n            var cid;\n            var len;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            switch (cid) {\n                case 0xb010:\n                    name = this.readNulTermstring();\n                    this._byteData.position += 4;\n                    hier = this._byteData.readShort();\n                    break;\n                case 0xb013:\n                    pivot.x = this._byteData.readFloat();\n                    pivot.z = this._byteData.readFloat();\n                    pivot.y = this._byteData.readFloat();\n                    break;\n                default:\n                    this._byteData.position += (len - 6);\n                    break;\n            }\n        }\n        // If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n        // and will be ignored in this version of the parser\n        // TODO: Implement containers in 3DS parser.\n        if (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n            vo = this._unfinalized_objects[name];\n            obj = this.constructObject(vo, pivot);\n            if (obj) {\n                //add to the content property\n                this._pContent.addChild(obj);\n                this._pFinalizeAsset(obj, vo.name);\n            }\n            delete this._unfinalized_objects[name];\n        }\n    };\n    Max3DSParser.prototype.constructObject = function (obj, pivot) {\n        if (pivot === void 0) { pivot = null; }\n        if (obj.type == Sprite_1.Sprite.assetType) {\n            var i;\n            var sub;\n            var graphics;\n            var mat;\n            var sprite;\n            var mtx;\n            var vertices;\n            var faces;\n            if (obj.materials.length > 1)\n                console.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\n            // Ignore empty objects\n            if (!obj.indices || obj.indices.length == 0)\n                return null;\n            vertices = new Array(obj.verts.length / 3);\n            faces = new Array(obj.indices.length / 3);\n            this.prepareData(vertices, faces, obj);\n            if (this._useSmoothingGroups)\n                this.applySmoothGroups(vertices, faces);\n            obj.verts = new Array(vertices.length * 3);\n            for (i = 0; i < vertices.length; i++) {\n                obj.verts[i * 3] = vertices[i].x;\n                obj.verts[i * 3 + 1] = vertices[i].y;\n                obj.verts[i * 3 + 2] = vertices[i].z;\n            }\n            obj.indices = new Array(faces.length * 3) /*uint*/;\n            for (i = 0; i < faces.length; i++) {\n                obj.indices[i * 3] = faces[i].a;\n                obj.indices[i * 3 + 1] = faces[i].b;\n                obj.indices[i * 3 + 2] = faces[i].c;\n            }\n            if (obj.uvs) {\n                // If the object had UVs to start with, use UVs generated by\n                // smoothing group splitting algorithm. Otherwise those UVs\n                // will be nonsense and should be skipped.\n                obj.uvs = new Array(vertices.length * 2);\n                for (i = 0; i < vertices.length; i++) {\n                    obj.uvs[i * 2] = vertices[i].u;\n                    obj.uvs[i * 2 + 1] = vertices[i].v;\n                }\n            }\n            if (obj.materials.length > 0) {\n                var mname;\n                mname = obj.materials[0];\n                mat = this._materials[mname].material;\n            }\n            // Build sprite and return it\n            sprite = new Sprite_1.Sprite(mat);\n            sprite.transform.matrix3D = new Matrix3D_1.Matrix3D(obj.transform);\n            graphics = sprite.graphics;\n            // Construct elements (potentially splitting buffers)\n            // and add them to graphics.\n            sub = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n            sub.setIndices(obj.indices);\n            sub.setPositions(obj.verts);\n            sub.setUVs(obj.uvs);\n            graphics.addGraphic(sub);\n            // Apply pivot translation to graphics if a pivot was\n            // found while parsing the keyframe chunk earlier.\n            if (pivot) {\n                if (obj.transform) {\n                    // If a transform was found while parsing the\n                    // object chunk, use it to find the local pivot vector\n                    mtx = new Matrix3D_1.Matrix3D(obj.transform);\n                    mtx.rawData[12] = 0;\n                    mtx.rawData[13] = 0;\n                    mtx.rawData[14] = 0;\n                    pivot = mtx.transformVector(pivot);\n                }\n                pivot.scaleBy(-1);\n                mtx = new Matrix3D_1.Matrix3D();\n                mtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n                graphics.applyTransformation(mtx);\n            }\n            // Apply transformation to graphics if a transformation\n            // was found while parsing the object chunk earlier.\n            if (obj.transform) {\n                mtx = new Matrix3D_1.Matrix3D(obj.transform);\n                mtx.invert();\n                graphics.applyTransformation(mtx);\n            }\n            // Final transform applied to graphics. Finalize the graphics,\n            // which will no longer be modified after this point.\n            this._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n            return sprite;\n        }\n        // If reached, unknown\n        return null;\n    };\n    Max3DSParser.prototype.prepareData = function (vertices, faces, obj) {\n        // convert raw ObjectVO's data to structured VertexVO and FaceVO\n        var i;\n        var j;\n        var k;\n        var len = obj.verts.length;\n        for (i = 0, j = 0, k = 0; i < len;) {\n            var v = new VertexVO;\n            v.x = obj.verts[i++];\n            v.y = obj.verts[i++];\n            v.z = obj.verts[i++];\n            if (obj.uvs) {\n                v.u = obj.uvs[j++];\n                v.v = obj.uvs[j++];\n            }\n            vertices[k++] = v;\n        }\n        len = obj.indices.length;\n        for (i = 0, k = 0; i < len;) {\n            var f = new FaceVO();\n            f.a = obj.indices[i++];\n            f.b = obj.indices[i++];\n            f.c = obj.indices[i++];\n            f.smoothGroup = obj.smoothingGroups[k] || 0;\n            faces[k++] = f;\n        }\n    };\n    Max3DSParser.prototype.applySmoothGroups = function (vertices, faces) {\n        // clone vertices according to following rule:\n        // clone if vertex's in faces from groups 1+2 and 3\n        // don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n        var i;\n        var j;\n        var k;\n        var l;\n        var len;\n        var numVerts = vertices.length;\n        var numFaces = faces.length;\n        // extract groups data for vertices\n        var vGroups = new Array(numVerts);\n        for (i = 0; i < numVerts; i++)\n            vGroups[i] = new Array() /*uint*/;\n        for (i = 0; i < numFaces; i++) {\n            var face = faces[i];\n            for (j = 0; j < 3; j++) {\n                var groups = vGroups[(j == 0) ? face.a : ((j == 1) ? face.b : face.c)];\n                var group = face.smoothGroup;\n                for (k = groups.length - 1; k >= 0; k--) {\n                    if ((group & groups[k]) > 0) {\n                        group |= groups[k];\n                        groups.splice(k, 1);\n                        k = groups.length - 1;\n                    }\n                }\n                groups.push(group);\n            }\n        }\n        // clone vertices\n        var vClones = new Array(numVerts);\n        for (i = 0; i < numVerts; i++) {\n            if ((len = vGroups[i].length) < 1)\n                continue;\n            var clones = new Array(len);\n            vClones[i] = clones;\n            clones[0] = i;\n            var v0 = vertices[i];\n            for (j = 1; j < len; j++) {\n                var v1 = new VertexVO;\n                v1.x = v0.x;\n                v1.y = v0.y;\n                v1.z = v0.z;\n                v1.u = v0.u;\n                v1.v = v0.v;\n                clones[j] = vertices.length;\n                vertices.push(v1);\n            }\n        }\n        numVerts = vertices.length;\n        for (i = 0; i < numFaces; i++) {\n            face = faces[i];\n            group = face.smoothGroup;\n            for (j = 0; j < 3; j++) {\n                k = (j == 0) ? face.a : ((j == 1) ? face.b : face.c);\n                groups = vGroups[k];\n                len = groups.length;\n                clones = vClones[k];\n                for (l = 0; l < len; l++) {\n                    if (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n                        var index = clones[l];\n                        if (group == 0) {\n                            // vertex is unique if no smoothGroup found\n                            groups.splice(l, 1);\n                            clones.splice(l, 1);\n                        }\n                        if (j == 0)\n                            face.a = index;\n                        else if (j == 1)\n                            face.b = index;\n                        else\n                            face.c = index;\n                        l = len;\n                    }\n                }\n            }\n        }\n    };\n    Max3DSParser.prototype.finalizeCurrentMaterial = function () {\n        var mat;\n        mat = new MethodMaterial_1.MethodMaterial(this._cur_mat.ambientColor);\n        if (this._cur_mat.colorMap)\n            mat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultTexture();\n        mat.diffuseMethod.color = this._cur_mat.diffuseColor;\n        mat.specularMethod.color = this._cur_mat.specularColor;\n        if (this.materialMode >= 2)\n            mat.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n        mat.bothSides = this._cur_mat.twoSided;\n        this._pFinalizeAsset(mat, this._cur_mat.name);\n        this._materials[this._cur_mat.name] = this._cur_mat;\n        this._cur_mat.material = mat;\n        this._cur_mat = null;\n    };\n    Max3DSParser.prototype.readNulTermstring = function () {\n        var chr;\n        var str = \"\";\n        while ((chr = this._byteData.readUnsignedByte()) > 0)\n            str += String.fromCharCode(chr);\n        return str;\n    };\n    Max3DSParser.prototype.readTransform = function () {\n        var data = new Float32Array(16);\n        // X axis\n        data[0] = this._byteData.readFloat(); // X\n        data[2] = this._byteData.readFloat(); // Z\n        data[1] = this._byteData.readFloat(); // Y\n        data[3] = 0;\n        // Z axis\n        data[8] = this._byteData.readFloat(); // X\n        data[10] = this._byteData.readFloat(); // Z\n        data[9] = this._byteData.readFloat(); // Y\n        data[11] = 0;\n        // Y Axis\n        data[4] = this._byteData.readFloat(); // X\n        data[6] = this._byteData.readFloat(); // Z\n        data[5] = this._byteData.readFloat(); // Y\n        data[7] = 0;\n        // Translation\n        data[12] = this._byteData.readFloat(); // X\n        data[14] = this._byteData.readFloat(); // Z\n        data[13] = this._byteData.readFloat(); // Y\n        data[15] = 1;\n        return data;\n    };\n    Max3DSParser.prototype.readColor = function () {\n        var cid;\n        var len;\n        var r /*int*/, g /*int*/, b;\n        cid = this._byteData.readUnsignedShort();\n        len = this._byteData.readUnsignedInt();\n        switch (cid) {\n            case 0x0010:\n                r = this._byteData.readFloat() * 255;\n                g = this._byteData.readFloat() * 255;\n                b = this._byteData.readFloat() * 255;\n                break;\n            case 0x0011:\n                r = this._byteData.readUnsignedByte();\n                g = this._byteData.readUnsignedByte();\n                b = this._byteData.readUnsignedByte();\n                break;\n            default:\n                this._byteData.position += (len - 6);\n                break;\n        }\n        return (r << 16) | (g << 8) | b;\n    };\n    return Max3DSParser;\n}(ParserBase_1.ParserBase));\nexports.Max3DSParser = Max3DSParser;\n/**\n *\n */\nvar FaceVO = (function () {\n    function FaceVO() {\n    }\n    return FaceVO;\n}());\nexports.FaceVO = FaceVO;\n/**\n *\n */\nvar MaterialVO = (function () {\n    function MaterialVO() {\n    }\n    return MaterialVO;\n}());\nexports.MaterialVO = MaterialVO;\n/**\n *\n */\nvar ObjectVO = (function () {\n    function ObjectVO() {\n    }\n    return ObjectVO;\n}());\nexports.ObjectVO = ObjectVO;\n/**\n *\n */\nvar TextureVO = (function () {\n    function TextureVO() {\n    }\n    return TextureVO;\n}());\nexports.TextureVO = TextureVO;\n/**\n *\n */\nvar VertexVO = (function () {\n    function VertexVO() {\n    }\n    return VertexVO;\n}());\nexports.VertexVO = VertexVO;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined}],\"awayjs-parsers/lib/OBJParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nvar SpecularBasicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nvar OBJParser = (function (_super) {\n    __extends(OBJParser, _super);\n    /**\n     * Creates a new OBJParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function OBJParser(scale) {\n        if (scale === void 0) { scale = 1; }\n        _super.call(this, URLLoaderDataFormat_1.URLLoaderDataFormat.TEXT);\n        this._mtlLibLoaded = true;\n        this._activeMaterialID = \"\";\n        this._scale = scale;\n    }\n    Object.defineProperty(OBJParser.prototype, \"scale\", {\n        /**\n         * Scaling factor applied directly to vertices data\n         * @param value The scaling factor.\n         */\n        set: function (value) {\n            this._scale = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    OBJParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"obj\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    OBJParser.supportsData = function (data) {\n        var content = ParserUtils_1.ParserUtils.toString(data);\n        var hasV = false;\n        var hasF = false;\n        if (content) {\n            hasV = content.indexOf(\"\\nv \") != -1;\n            hasF = content.indexOf(\"\\nf \") != -1;\n        }\n        return hasV && hasF;\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.id == 'mtl') {\n            var str = ParserUtils_1.ParserUtils.toString(resourceDependency.data);\n            this.parseMtl(str);\n        }\n        else {\n            var asset;\n            if (resourceDependency.assets.length != 1) {\n                return;\n            }\n            asset = resourceDependency.assets[0];\n            if (asset.isAsset(BitmapImage2D_1.BitmapImage2D)) {\n                var lm = new LoadedMaterial();\n                lm.materialID = resourceDependency.id;\n                lm.texture = new Single2DTexture_1.Single2DTexture(asset);\n                this._materialLoaded.push(lm);\n                if (this._sprites.length > 0) {\n                    this.applyMaterial(lm);\n                }\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        if (resourceDependency.id == \"mtl\") {\n            this._mtlLib = false;\n            this._mtlLibLoaded = false;\n        }\n        else {\n            var lm = new LoadedMaterial();\n            lm.materialID = resourceDependency.id;\n            this._materialLoaded.push(lm);\n        }\n        if (this._sprites.length > 0)\n            this.applyMaterial(lm);\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._pProceedParsing = function () {\n        var line;\n        var creturn = String.fromCharCode(10);\n        var trunk;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            // Merge linebreaks that are immediately preceeded by\n            // the \"escape\" backward slash into single lines.\n            this._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n        }\n        if (this._textData.indexOf(creturn) == -1)\n            creturn = String.fromCharCode(13);\n        if (!this._startedParsing) {\n            this._startedParsing = true;\n            this._vertices = new Array();\n            this._vertexNormals = new Array();\n            this._materialIDs = new Array();\n            this._materialLoaded = new Array();\n            this._sprites = new Array();\n            this._uvs = new Array();\n            this._stringLength = this._textData.length;\n            this._charIndex = this._textData.indexOf(creturn, 0);\n            this._oldIndex = 0;\n            this._objects = new Array();\n            this._objectIndex = 0;\n        }\n        while (this._charIndex < this._stringLength && this._pHasTime()) {\n            this._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n            if (this._charIndex == -1)\n                this._charIndex = this._stringLength;\n            line = this._textData.substring(this._oldIndex, this._charIndex);\n            line = line.split('\\r').join(\"\");\n            line = line.replace(\"  \", \" \");\n            trunk = line.split(\" \");\n            this._oldIndex = this._charIndex + 1;\n            this.parseLine(trunk);\n            // If whatever was parsed on this line resulted in the\n            // parsing being paused to retrieve dependencies, break\n            // here and do not continue parsing until un-paused.\n            if (this.parsingPaused) {\n                return ParserBase_1.ParserBase.MORE_TO_PARSE;\n            }\n        }\n        if (this._charIndex >= this._stringLength) {\n            if (this._mtlLib && !this._mtlLibLoaded) {\n                return ParserBase_1.ParserBase.MORE_TO_PARSE;\n            }\n            this.translate();\n            this.applyMaterials();\n            return ParserBase_1.ParserBase.PARSING_DONE;\n        }\n        return ParserBase_1.ParserBase.MORE_TO_PARSE;\n    };\n    OBJParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.DisplayObjectContainer();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    /**\n     * Parses a single line in the OBJ file.\n     */\n    OBJParser.prototype.parseLine = function (trunk) {\n        switch (trunk[0]) {\n            case \"mtllib\":\n                this._mtlLib = true;\n                this._mtlLibLoaded = false;\n                this.loadMtl(trunk[1]);\n                break;\n            case \"g\":\n                this.createGroup(trunk);\n                break;\n            case \"o\":\n                this.createObject(trunk);\n                break;\n            case \"usemtl\":\n                if (this._mtlLib) {\n                    if (!trunk[1])\n                        trunk[1] = \"def000\";\n                    this._materialIDs.push(trunk[1]);\n                    this._activeMaterialID = trunk[1];\n                    if (this._currentGroup)\n                        this._currentGroup.materialID = this._activeMaterialID;\n                }\n                break;\n            case \"v\":\n                this.parseVertex(trunk);\n                break;\n            case \"vt\":\n                this.parseUV(trunk);\n                break;\n            case \"vn\":\n                this.parseVertexNormal(trunk);\n                break;\n            case \"f\":\n                this.parseFace(trunk);\n        }\n    };\n    /**\n     * Converts the parsed data into an Away3D scenegraph structure\n     */\n    OBJParser.prototype.translate = function () {\n        for (var objIndex = 0; objIndex < this._objects.length; ++objIndex) {\n            var groups = this._objects[objIndex].groups;\n            var numGroups = groups.length;\n            var materialGroups;\n            var numMaterialGroups;\n            var graphics;\n            var sprite;\n            var m;\n            var sm;\n            var bmMaterial;\n            for (var g = 0; g < numGroups; ++g) {\n                bmMaterial = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());\n                //check for multipass\n                if (this.materialMode >= 2)\n                    bmMaterial.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                sprite = new Sprite_1.Sprite(bmMaterial);\n                graphics = sprite.graphics;\n                materialGroups = groups[g].materialGroups;\n                numMaterialGroups = materialGroups.length;\n                for (m = 0; m < numMaterialGroups; ++m)\n                    this.translateMaterialGroup(materialGroups[m], graphics);\n                if (graphics.count == 0)\n                    continue;\n                // Finalize and force type-based name\n                this._pFinalizeAsset(graphics); //, \"\");\n                if (this._objects[objIndex].name) {\n                    // this is a full independent object ('o' tag in OBJ file)\n                    sprite.name = this._objects[objIndex].name;\n                }\n                else if (groups[g].name) {\n                    // this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\n                    sprite.name = groups[g].name;\n                }\n                else {\n                    // No name stored. Use empty string which will force it\n                    // to be overridden by finalizeAsset() to type default.\n                    sprite.name = \"\";\n                }\n                this._sprites.push(sprite);\n                if (groups[g].materialID != \"\")\n                    bmMaterial.name = groups[g].materialID + \"~\" + sprite.name;\n                else\n                    bmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\n                if (sprite.graphics.count > 1) {\n                    for (sm = 1; sm < sprite.graphics.count; ++sm)\n                        sprite.graphics.getGraphicAt(sm).material = bmMaterial;\n                }\n                //add to the content property\n                this._pContent.addChild(sprite);\n                this._pFinalizeAsset(sprite);\n            }\n        }\n    };\n    /**\n     * Translates an obj's material group to a subgraphics.\n     * @param materialGroup The material group data to convert.\n     * @param graphics The Graphics to contain the converted Elements.\n     */\n    OBJParser.prototype.translateMaterialGroup = function (materialGroup, graphics) {\n        var faces = materialGroup.faces;\n        var face;\n        var numFaces = faces.length;\n        var numVerts;\n        var elements;\n        var vertices = new Array();\n        var uvs = new Array();\n        var normals = new Array();\n        var indices = new Array();\n        this._realIndices = [];\n        this._vertexIndex = 0;\n        var j;\n        for (var i = 0; i < numFaces; ++i) {\n            face = faces[i];\n            numVerts = face.indexIds.length - 1;\n            for (j = 1; j < numVerts; ++j) {\n                this.translateVertexData(face, j, vertices, uvs, indices, normals);\n                this.translateVertexData(face, 0, vertices, uvs, indices, normals);\n                this.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n            }\n        }\n        if (vertices.length > 0) {\n            elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n            elements.autoDeriveNormals = normals.length ? false : true;\n            elements.setIndices(indices);\n            elements.setPositions(vertices);\n            elements.setNormals(normals);\n            elements.setUVs(uvs);\n            graphics.addGraphic(elements);\n        }\n    };\n    OBJParser.prototype.translateVertexData = function (face, vertexIndex, vertices, uvs, indices /*uint*/, normals) {\n        var index;\n        var vertex;\n        var vertexNormal;\n        var uv;\n        if (!this._realIndices[face.indexIds[vertexIndex]]) {\n            index = this._vertexIndex;\n            this._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n            vertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n            vertices.push(vertex.x * this._scale, vertex.y * this._scale, vertex.z * this._scale);\n            if (face.normalIndices.length > 0) {\n                vertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n                normals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n            }\n            if (face.uvIndices.length > 0) {\n                try {\n                    uv = this._uvs[face.uvIndices[vertexIndex] - 1];\n                    uvs.push(uv.u, uv.v);\n                }\n                catch (e) {\n                    switch (vertexIndex) {\n                        case 0:\n                            uvs.push(0, 1);\n                            break;\n                        case 1:\n                            uvs.push(.5, 0);\n                            break;\n                        case 2:\n                            uvs.push(1, 1);\n                    }\n                }\n            }\n        }\n        else {\n            index = this._realIndices[face.indexIds[vertexIndex]] - 1;\n        }\n        indices.push(index);\n    };\n    /**\n     * Creates a new object group.\n     * @param trunk The data block containing the object tag and its parameters\n     */\n    OBJParser.prototype.createObject = function (trunk) {\n        this._currentGroup = null;\n        this._currentMaterialGroup = null;\n        this._objects.push(this._currentObject = new ObjectGroup());\n        if (trunk)\n            this._currentObject.name = trunk[1];\n    };\n    /**\n     * Creates a new group.\n     * @param trunk The data block containing the group tag and its parameters\n     */\n    OBJParser.prototype.createGroup = function (trunk) {\n        if (!this._currentObject)\n            this.createObject(null);\n        this._currentGroup = new Group();\n        this._currentGroup.materialID = this._activeMaterialID;\n        if (trunk)\n            this._currentGroup.name = trunk[1];\n        this._currentObject.groups.push(this._currentGroup);\n        this.createMaterialGroup(null);\n    };\n    /**\n     * Creates a new material group.\n     * @param trunk The data block containing the material tag and its parameters\n     */\n    OBJParser.prototype.createMaterialGroup = function (trunk) {\n        this._currentMaterialGroup = new MaterialGroup();\n        if (trunk)\n            this._currentMaterialGroup.url = trunk[1];\n        this._currentGroup.materialGroups.push(this._currentMaterialGroup);\n    };\n    /**\n     * Reads the next vertex coordinates.\n     * @param trunk The data block containing the vertex tag and its parameters\n     */\n    OBJParser.prototype.parseVertex = function (trunk) {\n        //for the very rare cases of other delimiters/charcodes seen in some obj files\n        var v1, v2, v3;\n        if (trunk.length > 4) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            v1 = nTrunk[0];\n            v2 = nTrunk[1];\n            v3 = -nTrunk[2];\n            this._vertices.push(new Vertex(v1, v2, v3));\n        }\n        else {\n            v1 = parseFloat(trunk[1]);\n            v2 = parseFloat(trunk[2]);\n            v3 = -parseFloat(trunk[3]);\n            this._vertices.push(new Vertex(v1, v2, v3));\n        }\n    };\n    /**\n     * Reads the next uv coordinates.\n     * @param trunk The data block containing the uv tag and its parameters\n     */\n    OBJParser.prototype.parseUV = function (trunk) {\n        if (trunk.length > 3) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            this._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n        }\n        else {\n            this._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n        }\n    };\n    /**\n     * Reads the next vertex normal coordinates.\n     * @param trunk The data block containing the vertex normal tag and its parameters\n     */\n    OBJParser.prototype.parseVertexNormal = function (trunk) {\n        if (trunk.length > 4) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            this._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n        }\n        else {\n            this._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n        }\n    };\n    /**\n     * Reads the next face's indices.\n     * @param trunk The data block containing the face tag and its parameters\n     */\n    OBJParser.prototype.parseFace = function (trunk) {\n        var len = trunk.length;\n        var face = new FaceData();\n        if (!this._currentGroup) {\n            this.createGroup(null);\n        }\n        var indices;\n        for (var i = 1; i < len; ++i) {\n            if (trunk[i] == \"\") {\n                continue;\n            }\n            indices = trunk[i].split(\"/\");\n            face.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n            if (indices[1] && String(indices[1]).length > 0)\n                face.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n            if (indices[2] && String(indices[2]).length > 0)\n                face.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n            face.indexIds.push(trunk[i]);\n        }\n        this._currentMaterialGroup.faces.push(face);\n    };\n    /**\n     * This is a hack around negative face coords\n     */\n    OBJParser.prototype.parseIndex = function (index, length) {\n        if (index < 0)\n            return index + length + 1;\n        else\n            return index;\n    };\n    OBJParser.prototype.parseMtl = function (data) {\n        var materialDefinitions = data.split('newmtl');\n        var lines;\n        var trunk;\n        var j;\n        var basicSpecularMethod;\n        var useSpecular;\n        var useColor;\n        var diffuseColor;\n        var color;\n        var specularColor;\n        var specular;\n        var alpha;\n        var mapkd;\n        for (var i = 0; i < materialDefinitions.length; ++i) {\n            lines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n            //lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n            if (lines.length == 1)\n                lines = materialDefinitions[i].split(String.fromCharCode(13));\n            diffuseColor = color = specularColor = 0xFFFFFF;\n            specular = 0;\n            useSpecular = false;\n            useColor = false;\n            alpha = 1;\n            mapkd = \"\";\n            for (j = 0; j < lines.length; ++j) {\n                lines[j] = lines[j].replace(/\\s+$/, \"\");\n                if (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n                    trunk = lines[j].split(\" \");\n                    if (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n                        trunk[0] = trunk[0].substring(1, trunk[0].length);\n                    if (j == 0) {\n                        this._lastMtlID = trunk.join(\"\");\n                        this._lastMtlID = (this._lastMtlID == \"\") ? \"def000\" : this._lastMtlID;\n                    }\n                    else {\n                        switch (trunk[0]) {\n                            case \"Ka\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n                                    color = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                break;\n                            case \"Ks\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n                                    specularColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                    useSpecular = true;\n                                }\n                                break;\n                            case \"Ns\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\n                                    specular = Number(trunk[1]) * 0.001;\n                                if (specular == 0)\n                                    useSpecular = false;\n                                break;\n                            case \"Kd\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n                                    diffuseColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                    useColor = true;\n                                }\n                                break;\n                            case \"tr\":\n                            case \"d\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\n                                    alpha = Number(trunk[1]);\n                                break;\n                            case \"map_Kd\":\n                                mapkd = this.parseMapKdString(trunk);\n                                mapkd = mapkd.replace(/\\\\/g, \"/\");\n                        }\n                    }\n                }\n            }\n            if (mapkd != \"\") {\n                if (useSpecular) {\n                    basicSpecularMethod = new SpecularBasicMethod_1.SpecularBasicMethod();\n                    basicSpecularMethod.color = specularColor;\n                    basicSpecularMethod.strength = specular;\n                    var specularData = new SpecularData();\n                    specularData.alpha = alpha;\n                    specularData.basicSpecularMethod = basicSpecularMethod;\n                    specularData.materialID = this._lastMtlID;\n                    if (!this._materialSpecularData)\n                        this._materialSpecularData = new Array();\n                    this._materialSpecularData.push(specularData);\n                }\n                this._pAddDependency(this._lastMtlID, new URLRequest_1.URLRequest(mapkd));\n            }\n            else if (useColor && !isNaN(color)) {\n                var lm = new LoadedMaterial();\n                lm.materialID = this._lastMtlID;\n                if (alpha == 0)\n                    console.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\n                var cm = new MethodMaterial_1.MethodMaterial(color);\n                if (this.materialMode < 2) {\n                    cm.alpha = alpha;\n                }\n                else {\n                    cm.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                }\n                cm.diffuseMethod.color = diffuseColor;\n                if (useSpecular) {\n                    cm.specularMethod.color = specularColor;\n                    cm.specularMethod.strength = specular;\n                }\n                lm.cm = cm;\n                this._materialLoaded.push(lm);\n                if (this._sprites.length > 0)\n                    this.applyMaterial(lm);\n            }\n        }\n        this._mtlLibLoaded = true;\n    };\n    OBJParser.prototype.parseMapKdString = function (trunk) {\n        var url = \"\";\n        var i;\n        var breakflag;\n        for (i = 1; i < trunk.length;) {\n            switch (trunk[i]) {\n                case \"-blendu\":\n                case \"-blendv\":\n                case \"-cc\":\n                case \"-clamp\":\n                case \"-texres\":\n                    i += 2; //Skip ahead 1 attribute\n                    break;\n                case \"-mm\":\n                    i += 3; //Skip ahead 2 attributes\n                    break;\n                case \"-o\":\n                case \"-s\":\n                case \"-t\":\n                    i += 4; //Skip ahead 3 attributes\n                    continue;\n                default:\n                    breakflag = true;\n                    break;\n            }\n            if (breakflag)\n                break;\n        }\n        //Reconstruct URL/filename\n        for (i; i < trunk.length; i++) {\n            url += trunk[i];\n            url += \" \";\n        }\n        //Remove the extraneous space and/or newline from the right side\n        url = url.replace(/\\s+$/, \"\");\n        return url;\n    };\n    OBJParser.prototype.loadMtl = function (mtlurl) {\n        // Add raw-data dependency to queue and load dependencies now,\n        // which will pause the parsing in the meantime.\n        this._pAddDependency('mtl', new URLRequest_1.URLRequest(mtlurl), true);\n        this._pPauseAndRetrieveDependencies(); //\n    };\n    OBJParser.prototype.applyMaterial = function (lm) {\n        var decomposeID;\n        var sprite;\n        var tm;\n        var j;\n        var specularData;\n        for (var i = 0; i < this._sprites.length; ++i) {\n            sprite = this._sprites[i];\n            decomposeID = sprite.material.name.split(\"~\");\n            if (decomposeID[0] == lm.materialID) {\n                if (lm.cm) {\n                    if (sprite.material)\n                        sprite.material = null;\n                    sprite.material = lm.cm;\n                }\n                else if (lm.texture) {\n                    tm = sprite.material;\n                    tm.ambientMethod.texture = lm.texture;\n                    tm.style.color = lm.color;\n                    tm.alpha = lm.alpha;\n                    tm.style.sampler = new Sampler2D_1.Sampler2D(true);\n                    if (this.materialMode < 2)\n                        tm.alpha = lm.alpha;\n                    else\n                        tm.mode = MethodMaterialMode_1.MethodMaterialMode.MULTI_PASS;\n                    if (lm.specularMethod) {\n                        // By setting the specularMethod property to null before assigning\n                        // the actual method instance, we avoid having the properties of\n                        // the new method being overridden with the settings from the old\n                        // one, which is default behavior of the setter.\n                        tm.specularMethod = null;\n                        tm.specularMethod = lm.specularMethod;\n                    }\n                    else if (this._materialSpecularData) {\n                        for (j = 0; j < this._materialSpecularData.length; ++j) {\n                            specularData = this._materialSpecularData[j];\n                            if (specularData.materialID == lm.materialID) {\n                                tm.specularMethod = null; // Prevent property overwrite (see above)\n                                tm.specularMethod = specularData.basicSpecularMethod;\n                                tm.specularMethod.color = specularData.color;\n                                tm.specularMethod.strength = specularData.alpha;\n                                break;\n                            }\n                        }\n                    }\n                }\n                sprite.material.name = decomposeID[1] ? decomposeID[1] : decomposeID[0];\n                this._sprites.splice(i, 1);\n                --i;\n            }\n        }\n        if (lm.cm || tm)\n            this._pFinalizeAsset(lm.cm || tm);\n    };\n    OBJParser.prototype.applyMaterials = function () {\n        if (this._materialLoaded.length == 0)\n            return;\n        for (var i = 0; i < this._materialLoaded.length; ++i)\n            this.applyMaterial(this._materialLoaded[i]);\n    };\n    return OBJParser;\n}(ParserBase_1.ParserBase));\nexports.OBJParser = OBJParser;\nvar ObjectGroup = (function () {\n    function ObjectGroup() {\n        this.groups = new Array();\n    }\n    return ObjectGroup;\n}());\nexports.ObjectGroup = ObjectGroup;\nvar Group = (function () {\n    function Group() {\n        this.materialGroups = new Array();\n    }\n    return Group;\n}());\nexports.Group = Group;\nvar MaterialGroup = (function () {\n    function MaterialGroup() {\n        this.faces = new Array();\n    }\n    return MaterialGroup;\n}());\nexports.MaterialGroup = MaterialGroup;\nvar SpecularData = (function () {\n    function SpecularData() {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n    }\n    return SpecularData;\n}());\nexports.SpecularData = SpecularData;\nvar LoadedMaterial = (function () {\n    function LoadedMaterial() {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n    }\n    return LoadedMaterial;\n}());\nexports.LoadedMaterial = LoadedMaterial;\nvar FaceData = (function () {\n    function FaceData() {\n        this.vertexIndices = new Array();\n        this.uvIndices = new Array();\n        this.normalIndices = new Array();\n        this.indexIds = new Array(); // used for real index lookups\n    }\n    return FaceData;\n}());\nexports.FaceData = FaceData;\n/**\n* Texture coordinates value object.\n*/\nvar UV = (function () {\n    /**\n     * Creates a new <code>UV</code> object.\n     *\n     * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n     * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n     */\n    function UV(u, v) {\n        if (u === void 0) { u = 0; }\n        if (v === void 0) { v = 0; }\n        this._u = u;\n        this._v = v;\n    }\n    Object.defineProperty(UV.prototype, \"v\", {\n        /**\n         * Defines the vertical coordinate of the texture value.\n         */\n        get: function () {\n            return this._v;\n        },\n        set: function (value) {\n            this._v = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UV.prototype, \"u\", {\n        /**\n         * Defines the horizontal coordinate of the texture value.\n         */\n        get: function () {\n            return this._u;\n        },\n        set: function (value) {\n            this._u = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * returns a new UV value Object\n     */\n    UV.prototype.clone = function () {\n        return new UV(this._u, this._v);\n    };\n    /**\n     * returns the value object as a string for trace/debug purpose\n     */\n    UV.prototype.toString = function () {\n        return this._u + \",\" + this._v;\n    };\n    return UV;\n}());\nexports.UV = UV;\nvar Vertex = (function () {\n    /**\n     * Creates a new <code>Vertex</code> value object.\n     *\n     * @param    x            [optional]    The x value. Defaults to 0.\n     * @param    y            [optional]    The y value. Defaults to 0.\n     * @param    z            [optional]    The z value. Defaults to 0.\n     * @param    index        [optional]    The index value. Defaults is NaN.\n     */\n    function Vertex(x, y, z, index) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        if (index === void 0) { index = 0; }\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._index = index;\n    }\n    Object.defineProperty(Vertex.prototype, \"index\", {\n        get: function () {\n            return this._index;\n        },\n        /**\n         * To define/store the index of value object\n         * @param    ind        The index\n         */\n        set: function (ind) {\n            this._index = ind;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"x\", {\n        /**\n         * To define/store the x value of the value object\n         * @param    value        The x value\n         */\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"y\", {\n        /**\n         * To define/store the y value of the value object\n         * @param    value        The y value\n         */\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"z\", {\n        /**\n         * To define/store the z value of the value object\n         * @param    value        The z value\n         */\n        get: function () {\n            return this._z;\n        },\n        set: function (value) {\n            this._z = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * returns a new Vertex value Object\n     */\n    Vertex.prototype.clone = function () {\n        return new Vertex(this._x, this._y, this._z);\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\":undefined}],\"awayjs-parsers/lib/Parsers\":[function(require,module,exports){\n\"use strict\";\nvar Loader_1 = require(\"awayjs-core/lib/library/Loader\");\nvar AWDParser_1 = require(\"./AWDParser\");\nvar Max3DSParser_1 = require(\"./Max3DSParser\");\nvar MD2Parser_1 = require(\"./MD2Parser\");\nvar OBJParser_1 = require(\"./OBJParser\");\nvar FNTParser_1 = require(\"./FNTParser\");\n/**\n *\n */\nvar Parsers = (function () {\n    function Parsers() {\n    }\n    /**\n     * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n     * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n     * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n     *\n     * See notes about file size in the documentation for the ALL_BUNDLED constant.\n     *\n     * @see away.parsers.Parsers.ALL_BUNDLED\n     */\n    Parsers.enableAllBundled = function () {\n        Loader_1.Loader.enableParsers(Parsers.ALL_BUNDLED);\n    };\n    /**\n     * A list of all parsers that come bundled with Away3D. Use this to quickly\n     * enable support for all bundled parsers to the file format auto-detection\n     * feature, using any of the enableParsers() methods on loaders, e.g.:\n     *\n     * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n     *\n     * Beware however that this requires all parser classes to be included in the\n     * SWF file, which will add 50-100 kb to the file. When only a limited set of\n     * file formats are used, SWF file size can be saved by adding the parsers\n     * individually using AssetLibrary.enableParser()\n     *\n     * A third way is to specify a parser for each loaded file, thereby bypassing\n     * the auto-detection mechanisms altogether, while at the same time allowing\n     * any properties that are unique to that parser to be set for that load.\n     *\n     * The bundled parsers are:\n     *\n     * <ul>\n     * <li>AC3D (.ac)</li>\n     * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n     * <li>3DMax (.3ds)</li>\n     * <li>DXF (.dxf)</li>\n     * <li>Quake 2 MD2 models (.md2)</li>\n     * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n     * <li>Doom 3 MD5 sprites (.md5sprite)</li>\n     * <li>Wavefront OBJ (.obj)</li>\n     * <li>Collada (.dae)</li>\n     * <li>Images (.jpg, .png)</li>\n     * </ul>\n     *\n     * @see away.library.AssetLibrary.enableParser\n     */\n    Parsers.ALL_BUNDLED = Array(AWDParser_1.AWDParser, Max3DSParser_1.Max3DSParser, MD2Parser_1.MD2Parser, OBJParser_1.OBJParser, FNTParser_1.FNTParser);\n    return Parsers;\n}());\nexports.Parsers = Parsers;\n\n},{\"./AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"./FNTParser\":\"awayjs-parsers/lib/FNTParser\",\"./MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"./Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"./OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"awayjs-core/lib/library/Loader\":undefined}]},{},[1])\n\n",
    "export {AWDParser}\t\t\t\t\t\tfrom \"./lib/AWDParser\";\nexport {Max3DSParser}\t\t\t\t\tfrom \"./lib/Max3DSParser\";\nexport {MD2Parser}\t\t\t\t\t\tfrom \"./lib/MD2Parser\";\nexport {MD5AnimParser}\t\t\t\t\tfrom \"./lib/MD5AnimParser\";\nexport {MD5MeshParser}\t\t\t\t\tfrom \"./lib/MD5MeshParser\";\nexport {OBJParser}\t\t\t\t\t\tfrom \"./lib/OBJParser\";\nexport {Parsers}\t\t\t\t\t\tfrom \"./lib/Parsers\";",
    "\nexport class AWD3Utils {\n\tpublic static BLOCKSTATE_FINALIZE:number = 0;\n\tpublic static BLOCKSTATE_INVALID:number = 1;\n\tpublic static BLOCKSTATE_LOAD_DEPENDENICES:number = 2;\n\tpublic static BLOCKSTATE_NO_ASSET:number = 3;\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n}",
    "import {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport {AWD3Utils}\t\t\t\t\t\tfrom \"../AWD3ParserUtils/AWD3Utils\";\n\n\nexport class AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic type:number;\n\tpublic data:any;\n\tpublic dependencies_data:Array<ByteArray>;\n\tpublic dependencies_urls:Array<string>;\n\tpublic loaded_dependencies:Array<any>;\n\tpublic loaded_dependencies_cnt:number;\n\tpublic len:number;\n\tpublic geoID:number;\n\tpublic state:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Float32Array>;\n\n\tconstructor(this_id:number, this_type:number)\n\t{\n\t\tthis.type=this_type;\n\t\tthis.id=this_id;\n\t\tthis.state = AWD3Utils.BLOCKSTATE_FINALIZE;\n\t\tthis.dependencies_data=Array<any>();\n\t\tthis.dependencies_urls=Array<string>();\n\t\tif(this_type==83){\n\t\t\tthis.loaded_dependencies=Array<any>(6);\n\t\t}\n\t\tthis.loaded_dependencies_cnt=0;\n\t}\n\n\tpublic dispose():void\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}",
    "import {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {Short3Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Short3Attributes\";\nimport {Float3Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Float3Attributes\";\nimport {Float2Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Float2Attributes\";\nimport {Byte4Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Byte4Attributes\";\n\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {BitmapImageCube}\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImageCube\";\nimport {BlendMode}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\nimport {Sampler2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\nimport {WaveAudio}\t\t\t\t\t\tfrom \"awayjs-core/lib/audio/WaveAudio\";\nimport {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {URLLoaderDataFormat}\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport {ParserUtils}\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport {ProjectionBase}\t\t\t\t\tfrom \"awayjs-core/lib/projections/ProjectionBase\";\nimport {PerspectiveProjection}\t\t\tfrom \"awayjs-core/lib/projections/PerspectiveProjection\";\nimport {OrthographicProjection}\t\t\tfrom \"awayjs-core/lib/projections/OrthographicProjection\";\nimport {OrthographicOffCenterProjection}from \"awayjs-core/lib/projections/OrthographicOffCenterProjection\";\nimport {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\nimport {Point}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\n\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport {View}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/View\";\nimport {DisplayObject}\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport {LightBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/LightBase\";\nimport {Graphics}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {DirectionalLight}\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\nimport {PointLight}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport {TextField}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/TextField\";\nimport {Billboard}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\nimport {Skybox}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {MaterialBase}\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport {LightPickerBase}\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/LightPickerBase\";\nimport {StaticLightPicker}\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/StaticLightPicker\";\nimport {CubeMapShadowMapper}\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\";\nimport {DirectionalShadowMapper}\t\tfrom \"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\";\nimport {ShadowMapperBase}\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\";\n\nimport {PrefabBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrefabBase\";\nimport {PrimitivePrefabBase}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePrefabBase\";\nimport {PrimitiveCapsulePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\";\nimport {PrimitiveConePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveConePrefab\";\nimport {PrimitiveCubePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCubePrefab\";\nimport {PrimitiveCylinderPrefab}\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\";\nimport {PrimitivePlanePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePlanePrefab\";\nimport {PrimitiveSpherePrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\";\nimport {PrimitiveTorusPrefab}\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\";\nimport {SingleCubeTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\nimport {Single2DTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {AnimationSetBase}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimationSetBase\";\nimport {AnimatorBase}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimatorBase\";\nimport {VertexAnimationSet}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\nimport {VertexAnimator}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimator\";\nimport {SkeletonAnimationSet}\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\nimport {SkeletonAnimator}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimator\";\nimport {JointPose}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\nimport {SkeletonPose}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\nimport {SkeletonJoint}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\nimport {SkeletonClipNode}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\nimport {VertexClipNode}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\nimport {AnimationClipNodeBase}\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\";\n\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport {AmbientEnvMapMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\";\nimport {DiffuseDepthMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\";\nimport {DiffuseCelMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\";\nimport {DiffuseGradientMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\";\nimport {DiffuseLightMapMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\";\nimport {DiffuseWrapMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\";\nimport {EffectAlphaMaskMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\";\nimport {EffectColorMatrixMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\";\nimport {EffectColorTransformMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\";\nimport {EffectEnvMapMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\";\nimport {EffectFogMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFogMethod\";\nimport {EffectFresnelEnvMapMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\";\nimport {EffectLightMapMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\";\nimport {EffectMethodBase}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectMethodBase\";\nimport {EffectRimLightMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\";\nimport {NormalSimpleWaterMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\";\nimport {ShadowDitheredMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\";\nimport {ShadowFilteredMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\";\nimport {ShadowMapMethodBase}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\";\nimport {ShadowMethodBase}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMethodBase\";\nimport {SpecularFresnelMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\";\nimport {ShadowHardMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowHardMethod\";\nimport {SpecularAnisotropicMethod}\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\";\nimport {SpecularCelMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularCelMethod\";\nimport {SpecularPhongMethod}\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\";\nimport {ShadowNearMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowNearMethod\";\nimport {ShadowSoftMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\";\n\nimport {BasicMaterial}\t\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\n\nimport {ITimelineSceneGraphFactory} \tfrom \"awayjs-display/lib/factories/ITimelineSceneGraphFactory\";\nimport {AS2SceneGraphFactory} \t\t\tfrom \"awayjs-player/lib/factories/AS2SceneGraphFactory\";\nimport {MovieClip} \t\t\t\t\t\tfrom \"awayjs-display/lib/display/MovieClip\";\nimport {Timeline}\t\t\t \t\t\tfrom \"awayjs-display/lib/base/Timeline\";\n\n\nimport {AssetLibrary}\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\n\nimport {Font}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\nimport {TesselatedFontTable}\t\t\tfrom \"awayjs-display/lib/text/TesselatedFontTable\";\nimport {IFontTable}\t\t\t\t\t\tfrom \"awayjs-display/lib/text/IFontTable\";\nimport {TextFormat}\t\t\t\t\t\tfrom \"awayjs-display/lib/text/TextFormat\";\nimport {TextFieldType}\t\t\t\t\tfrom \"awayjs-display/lib/text/TextFieldType\";\n\nimport {AWDBlock}\t\t\t\t\t\tfrom \"./AWD3ParserUtils/AWDBlock\";\nimport {Rectangle} \t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\nimport {Style} \t\t\t\t\t\t\tfrom \"awayjs-display/lib/base/Style\";\nimport {Matrix} \t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport {MappingMode} \t\t\t\t\tfrom \"awayjs-display/lib/textures/MappingMode\";\nimport {ElementsType}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsType\";\nimport {Graphic}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nexport class AWDParser extends ParserBase\n{\n\tprivate _view:View;\n\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = false;\n\tprivate _debugTimers:boolean = true;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\tpublic static GEO_NUMBER:number = 48;\n\tpublic static MATRIX_NUMBER:number = 49;\n\tpublic static PROPERTY_NUMBER:number = 50;\n\t\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\tprivate start_timeing:number;\n\tprivate _time_all:number=0;\n\tprivate _time_graphics:number=0;\n\tprivate _time_graphics_bytes:number=0;\n\tprivate _time_timeline:number=0;\n\tprivate _time_fonts:number=0;\n\tprivate _time_textfields:number=0;\n\tprivate _time_sounds:number=0;\n\tprivate _time_textures:number=0;\n\tprivate _time_materials:number=0;\n\tprivate _time_sprites:number=0;\n\tprivate _num_graphics:number=0;\n\tprivate _num_timeline:number=0;\n\tprivate _num_fonts:number=0;\n\tprivate _num_textfields:number=0;\n\tprivate _num_sounds:number=0;\n\tprivate _num_textures:number=0;\n\tprivate _num_materials:number=0;\n\tprivate _num_sprites:number=0;\n\n\n\t/**\n\t * Creates a new AWD3Parserutils object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(view:View = null)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._view = view;\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock(0,255);\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the ressource dependecniy has a id that point to the awd_block waiting for it.\n\t\t//console.log(\"AWDParser resolve dependencies\";\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar this_block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\tif(this_block.type==82){\n\t\t\t\tvar image_asset:BitmapImage2D = <BitmapImage2D> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = image_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\tthis._pFinalizeAsset(<IAsset> image_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed Texture: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==44){\n\t\t\t\tvar audio_asset:WaveAudio = <WaveAudio> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = audio_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t//console.log(\"Parsing audio \" + this_block.name);\n\t\t\t\tthis._pFinalizeAsset(<IAsset> audio_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==83){\n\t\t\t\tthis_block.loaded_dependencies[resourceDependency.sub_id]= resourceDependency.assets[0];\n\t\t\t\tthis_block.loaded_dependencies_cnt++;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n\n\t\t\t\tif(this_block.loaded_dependencies_cnt==6){\n\t\t\t\t\tvar cube_image_asset = new BitmapImageCube(this_block.loaded_dependencies[0].width);\n\n\t\t\t\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\t\t\t\tcube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n\n\t\t\t\t\tthis_block.data = cube_image_asset; // Store finished asset\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> cube_image_asset, this_block.name);\n\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._debugTimers && !this._isParsing)\n\t\t\t\tthis.updateTimers(this_block.type);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWD3Parserutils.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWD3Parserutils.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\n\t\t\t\tif (this._debugTimers)\n\t\t\t\t\tconsole.log(\"Parsing total: \"+(this._time_all | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics: \"+this._num_graphics+\", \"+(this._time_graphics | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics bytes: \"+this._num_graphics+\", \"+(this._time_graphics_bytes | 0)+\"ms\",\n\t\t\t\t\t\t\" | timelines: \"+this._num_timeline+\", \"+(this._time_timeline | 0)+\"ms\",\n\t\t\t\t\t\t\" | fonts: \"+this._num_fonts+\", \"+(this._time_fonts | 0)+\"ms\",\n\t\t\t\t\t\t\" | sounds: \"+this._num_sounds+\", \"+(this._time_sounds | 0)+\"ms\",\n\t\t\t\t\t\t\" | mats: \"+this._num_materials+\", \"+(this._time_materials | 0)+\"ms\",\n\t\t\t\t\t\t\" | textures: \"+this._num_textures+\", \"+(this._time_textures | 0)+\"ms\",\n\t\t\t\t\t\t\" | sprites: \"+this._num_sprites+\", \"+(this._time_sprites | 0)+\"ms\");\n\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number):void\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate dispose():void\n\t{\n\t\tfor (var c in this._blocks) {\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[c];\n\t\t\tb.dispose();\n\t\t}\n\t}\n\n\tprivate parseNextBlock():void\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n//*\n\t\tif (this._debugTimers)\n\t\t\tthis.start_timeing = performance.now();\n//*/\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\tthis._newBlockBytes = new ByteArray();\n\t\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\t\t\tthis._newBlockBytes.position = 0;\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWD3Parserutils.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t} else {\n\t\t\tthis._newBlockBytes = this._body;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tblock = new AWDBlock(this._cur_block_id, type);\n\t\tblock.len = len;\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory(this._view);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 24:\n\t\t\t\t\tthis.parseSpriteLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 25:\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4444:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseMovieClip(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 134:\n\t\t\t\t\tthis.parseTextField(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 135:\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 136:\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseGraphics(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseSpriteInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tif (this._newBlockBytes.position != blockEndBlock)\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\tif (block.errorMessages) {\n\t\t\t\tvar len:number = block.errorMessages.length;\n\t\t\t\tfor (var msgCnt:number = 0; msgCnt < len; msgCnt++)\n\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t}\n\n\t\t\tconsole.log(\"\\n\");\n\t\t}\n\n\t\tif (this._debugTimers && !this.parsingPaused)\n\t\t\tthis.updateTimers(type);\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\t}\n\n\tprivate updateTimers(type:number):void\n\t{\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - this.start_timeing;\n\t\tthis._time_all += time_delta;\n\n\t\tif (type == 1) {\n\t\t\tthis._time_graphics += time_delta;\n\t\t\tthis._num_graphics++;\n\t\t} else if (type == 133) {\n\t\t\tthis._time_timeline += time_delta;\n\t\t\tthis._num_timeline++;\n\t\t} else if (type == 135) {\n\t\t\tthis._time_fonts += time_delta;\n\t\t\tthis._num_fonts++;\n\t\t} else if (type == 134) {\n\t\t\tthis._time_textfields += time_delta;\n\t\t\tthis._num_textfields++;\n\t\t} else if (type == 44) {\n\t\t\tthis._time_sounds += time_delta;\n\t\t\tthis._num_sounds++;\n\t\t} else if (type == 82) {\n\t\t\tthis._time_textures += time_delta;\n\t\t\tthis._num_textures++;\n\t\t} else if (type == 81) {\n\t\t\tthis._time_materials += time_delta;\n\t\t\tthis._num_materials++;\n\t\t} else if(type==24) {\n\t\t\tthis._time_sprites += time_delta;\n\t\t\tthis._num_sprites++;\n\t\t}\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\n\tprivate parseTesselatedFont(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\tvar new_font:Font=<Font>AssetLibrary.getAsset(this._blocks[blockID].name);\n\t\tvar newfont:Boolean = false;\n\t\tif(new_font==undefined){\n\t\t\tnew_font = new Font();\n\t\t\tnewfont=true;\n\t\t}\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar font_style_char_cnt:number;\n\t\tvar font_style_name:string;\n\t\tvar new_font_style:TesselatedFontTable;\n\t\tvar font_style_char:number;\n\t\tvar attr_count:number=0;\n\t\tvar sm_len:number;\n\t\tvar sm_end:number;\n\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\n\t\t\tfont_style_name = this.parseVarStr();\n\n\t\t\t// dirty hack for icycle\n\t\t\t// we use bold chars for non-latin chars, but we use regular for � sign,\n\t\t\t// so the dirty hack is to merge the regular and the bold style\n\t\t\tif((this._blocks[blockID].name==\"Tahoma\") && (font_style_name==\"RegularStyle\")){\n\t\t\t\tfont_style_name=\"BoldStyle\";\n\t\t\t}\n\n\t\t\tnew_font_style = <TesselatedFontTable>new_font.get_font_table(font_style_name, TesselatedFontTable.assetType);\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.ascent=this._newBlockBytes.readFloat();\n\t\t\tnew_font_style.descent=this._newBlockBytes.readFloat();\n\t\t\t//console.log(new_font_style.get_whitespace_width());\n\t\t\tfont_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n\t\t\tfor (var j:number = 0; j < font_style_char_cnt; ++j) {\n\t\t\t\t// todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n\t\t\t\tfont_style_char = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar char_width=this._newBlockBytes.readFloat();\n\t\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\t\t// Loop through data streams\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\t\t// Type, field type, length\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\t\tif (str_type == 2) {//face indices positions\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\t\tfor(var idx:number = 0; this._newBlockBytes.position < str_end; idx++)\n\t\t\t\t\t\t\tindices[idx] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 20;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 12;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (position + curvedata + uv)\n\t\t\t\t\t\tattr_count = 28;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(curveData) {\n\t\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len / attr_count);\n\t\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\t\tif (attr_count == 20)\n\t\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\t\t\t\t\telse if(attr_count == 12)\n\t\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\n\n\t\t\t\t\t//add UVs if they exist in the data\n\t\t\t\t\tif (attr_count == 28)\n\t\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\t\tnew_font_style.setChar(font_style_char.toString(), curve_elements, char_width);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tif(newfont) {\n\t\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\n\t\t}\n\n\t\tthis._blocks[blockID].data = new_font;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\n\t}\n\n\tprivate static textFormatProperties:Object = {\n\t\t1:AWDParser.UINT16,\t\t//fontsize\n\t\t2:AWDParser.FLOAT32,\t\t//letterspacing\n\t\t3:AWDParser.UINT8,\t\t//rotated\n\t\t4:AWDParser.UINT8,\t\t//auto-kerning\n\t\t5:AWDParser.UINT8,\t\t//baselineshift\n\t\t6:AWDParser.UINT8,\t\t//align\n\t\t7:AWDParser.FLOAT32,\t\t//intent\n\t\t8:AWDParser.FLOAT32,\t\t//left margin\n\t\t9:AWDParser.FLOAT32,\t\t//right margin\n\t\t10:AWDParser.FLOAT32};\t//line spacing\n\n\tprivate parseTextFormat(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\n\t\tvar font:Font = <Font> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar font_style_name:string = this.parseVarStr();\n\n\t\tvar newTextFormat:TextFormat = new TextFormat();\n\t\tnewTextFormat.font_name = font.name;\n\n\t\t// todo:  atm in awd this will always default to get a TesselatedFontTable. need to find a way to request the correct type here\n\t\tvar font_table:IFontTable = font.get_font_table(font_style_name);\n\t\tif (font_table!=null) {\n\t\t\tnewTextFormat.font_style = font_style_name;\n\t\t\tnewTextFormat.font_table = font_table;\n\t\t}\n\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides = true;\n\t\tmat.curves = true;\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar uv_values:Array<number> = [];\n\t\tfor(var uvcnt:number = 0; uvcnt < num_uv_values; uvcnt++)\n\t\t\tuv_values[uvcnt] = this._newBlockBytes.readFloat();\n\n\t\tnewTextFormat.uv_values = uv_values;\n\t\tvar format_props:AWDProperties = this.parseProperties(AWDParser.textFormatProperties);\n\n\t\tnewTextFormat.size = format_props.get(1,12);\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\n\t\t//newTextFormat.rotated = format_props.get(3,false);\n\t\tnewTextFormat.kerning = format_props.get(4,true);\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\n\t\tvar tf_align_int:number = format_props.get(6,0);\n\t\tif(tf_align_int==1){\n\t\t\tnewTextFormat.align=\"right\";\n\t\t}\n\t\telse if(tf_align_int==2){\n\t\t\tnewTextFormat.align=\"center\";\n\t\t}\n\t\tnewTextFormat.indent = format_props.get(7,0);\n\t\tnewTextFormat.leftMargin = format_props.get(8,0);\n\t\tnewTextFormat.rightMargin = format_props.get(9,0);\n\t\tnewTextFormat.leading = format_props.get(10,0);\n\t\tnewTextFormat.material = mat;\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\n\t\t//newTextFormat.extra =\n\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\n\t\tthis._blocks[blockID].data = newTextFormat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\n\t}\n\n\tprivate static textFieldProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t3:AWDParser.BOOL,\n\t\t4:AWDParser.BOOL,\n\t\t5:AWDParser.BOOL,\n\t\t7:AWDParser.UINT8,\n\t\t8:AWDParser.UINT8,\n\t\t9:AWDParser.UINT8};\n\n\tprivate static textFieldTypes:Array<string> = [\"static\", \"dynamic\", \"input\", \"input\"];\n\n\n\tprivate parseTextField(blockID:number, factory:ITimelineSceneGraphFactory):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n\t\tvar text_field_type:number=this._newBlockBytes.readUnsignedByte();\n\n\t\tnewTextField.type = AWDParser.textFieldTypes[text_field_type];\n\n\t\tif(text_field_type == 3)\n\t\t\tnewTextField.displayAsPassword = true;\n\n\t\t//\n\t\tnewTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n\t\tnewTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar complete_text:string = \"\";\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\n\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\n\t\t\t\tvar text_format:TextFormat = <TextFormat> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\n\t\t\t\tif (txt_length > 0) {\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\n\t\t\t\t\tcomplete_text += this_txt;\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//newTextField.closeParagraph();\n\t\t}\n\t\tnewTextField.textFormat=text_format;\n\t\tnewTextField.text=complete_text;\n\t\t//newTextField.construct_graphics();\n\t\t// todo: optional matrix etc can be put in properties.\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.textFieldProperties);\n\t\tnewTextField.selectable = props.get(1, false);\n\t\tnewTextField.border =  props.get(3, false);\n\t\t//newTextField.renderHTML =  props.get(4, false);\n\t\t//newTextField.scrollable =  props.get(5, false);\n\t\t//newTextField.text_flow =  props.get(7, 0);\n\t\t//newTextField.orientationMode =  props.get(8, 0);\n\t\t//newTextField.line_mode =  props.get(9, 0);\n\t\tnewTextField.extra = this.parseUserAttributes();\n\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\n\t\tthis._blocks[blockID].data = newTextField;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t}\n\n\t// Block ID = 25\n\tprivate parseBillBoardLibraryBlock(blockID:number):void\n\t{\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides=true;\n\t\tvar billboard:Billboard = new Billboard(mat);\n\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tbillboard.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\n\n\t\tthis._blocks[blockID].data = billboard;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n\t}\n\t// Block ID = 24\n\tprivate parseSpriteLibraryBlock(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[data_id].data;\n\t\tthis._blocks[blockID].geoID = data_id;\n\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\t//mat.preserveAlpha = true;\n\t\t\t//mat.alphaBlending = true;\n\t\t\tmat.useColorTransform = true;\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar start_timeing = performance.now();\n\t\tvar sprite:Sprite = new Sprite();\n\t\tgraphics.copyTo(sprite.graphics);\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - start_timeing;\n\t\tthis._time_graphics_bytes += time_delta;\n\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\n\t\t\tsprite.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\n\t\tvar count:number = this._newBlockBytes.readUnsignedShort();\n\t\t//if(count != sprite.graphics.count)\n\t\t//\tthrow new Error(\"num elements does not match num subsprites\";\n\n\t\tfor (var i:number = 0; i < count; i++) {\n\t\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\t\tvar sampler:Sampler2D = new Sampler2D();\n\t\t\tvar graphic:Graphic = sprite.graphics.getGraphicAt(i);\n\t\t\tif(graphic) {\n\t\t\t\tgraphic.style = new Style();\n\t\t\t\tgraphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n\t\t\t}\n\t\t\tif (type == 3) {// solid color fill - need tx and ty\n\t\t\t\tvar tx:number=this._newBlockBytes.readFloat();\n\t\t\t\tvar ty:number=this._newBlockBytes.readFloat();\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(0, 0, 0, 0, tx, ty);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type == 4) {// texture fill - need full matrix\n\t\t\t\tvar matrix:Float32Array = this.parseMatrix32RawData();\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type == 5) {// linear gradient fill - need a, c , tx and ty\n\t\t\t\tvar newMatrix:Matrix = new Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = newMatrix;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\telse if (type == 6) {// radial gradient fill - need image rectangle + full transform\n\t\t\t\t\tvar x:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar y:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar width:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar height:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar matrix:Float32Array = this.parseMatrix32RawData();\n\t\t\t\t\tif(graphic) {\n\t\t\t\t\t\tsampler.imageRect = new Rectangle(x, y, width, height);\n\t\t\t\t\t\tgraphic.material.imageRect = true;\n\t\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(graphic) {\n\t\t\t\t//check if curves are needed\n\t\t\t\tif (graphic.elements.getCustomAtributes(\"curves\"))\n\t\t\t\t\tgraphic.material.curves = true;\n\t\t\t}\n\t\t\t// todo: finish optional properties (spreadmode + focalpoint)\n\t\t\tthis._newBlockBytes.readUnsignedInt();\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tsprite.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\n\n\t\tthis._blocks[blockID].data = sprite;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t}\n\n\tprivate parseAudioBlock(blockID:number, factory:ITimelineSceneGraphFactory):void\n\t{\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n\t}\n\n\tprivate static movieClipProperties:Object = {\n\t\t1:AWDParser.FLOAT32,\t//fps\n\t\t2:AWDParser.UINT16,\t\t// sceneID if not present or 0, mc is no scene\n\t\t3:AWDParser.UINT8};\t\t// scripting-language right now its always as2\n\t//Block ID = 4\n\tprivate parseMovieClip(blockID:number, factory:ITimelineSceneGraphFactory):void\n\t{\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar cmd_asset:DisplayObject;\n\t\tvar new_timeline:Timeline = new Timeline();\n\t\tvar new_mc = factory.createMovieClip(new_timeline);\n\t\tvar name = this.parseVarStr();\n\n\t\t// register list of potential childs\n\t\t// a potential child can be reused on a timeline (added / removed / added)\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\n\t\t// we parse 2 lists of potential-childs:\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n\t\t// hence we need to be careful to register all objects in correct order.\n\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t}\n\t\t}\n\n\t\tvar num_all_display_instances:number = num_potential_childs;\n\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tvar num_instances:number = this._newBlockBytes.readUnsignedShort();\n\t\t\tnum_all_display_instances += num_instances;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tfor (j = 0; j < num_instances; j++)\n\t\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n\n\t\t// register list of potential sounds - for now we always have 0 sounds\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n\n\n\t\tvar str_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tvar str_len = 0;\n\t\tvar str_data_type = 0;\n\t\tvar str_type=0;\n\t\tvar str_counter=0;\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\t// the first 6 lists are not optional and always in same order\n\t\t\t// hence we can get type by incremental counter instead of stored uint8\n\t\t\tif(str_counter<6)\n\t\t\t\tstr_type=str_counter;\n\t\t\telse\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n\t\t\tstr_data_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// size of this stream in byte\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tif(str_len>0) {\n\t\t\t\tvar keyframes_start_indices_data:ByteArray = new ByteArray(str_len);\n\t\t\t\tthis._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n\t\t\t\tvar new_buffer:ArrayBufferView;\n\t\t\t\t//console.log(\"str_data_type = \"+str_type);\n\t\t\t\tswitch (str_data_type) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_buffer = new Uint8Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_buffer = new Uint16Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_buffer = new Uint32Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tswitch (str_type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tnew_timeline.keyframe_durations = new_buffer;\n\t\t\t\t\t\tnew_timeline.numKeyFrames=str_len / str_data_type;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_timeline.frame_command_indices = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_timeline.frame_recipe = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tnew_timeline.command_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_timeline.command_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tnew_timeline.add_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tnew_timeline.remove_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tnew_timeline.update_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tnew_timeline.update_child_props_indices_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tnew_timeline.update_child_props_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tnew_timeline.property_type_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tnew_timeline.property_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tnew_timeline.properties_stream_int = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr_counter++;\n\t\t}\n\t\tvar lc:number=0;\n\t\tvar float_array_data:ByteArray;\n\t\tstr_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tswitch(str_type) {\n\t\t\t\tcase 0://mtx_scale\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_scale_rot=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1://mtx_pos\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_pos=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2://mtx_all\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_all=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3://ct\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_ct=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4://labels\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t//console.log(\"start reading labels \"+str_len);\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tnew_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5://name_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tvar string_props_array:Array<string>=[];\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tstring_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n\t\t\t\t\t}\n\t\t\t\t\tnew_timeline.properties_stream_strings = string_props_array;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6://script_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tvar frame_index=this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tvar one_str_len=this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t//this._newBlockBytes.readUTFBytes(one_str_len);\n\t\t\t\t\t\tnew_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnew_timeline.init();\n\n\t\tvar sceneID:number = 0;\n\t\tvar fps:number = 25;\n\t\tthis.parseProperties(AWDParser.movieClipProperties);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset>new_mc, name);\n\n\t\tthis._blocks[blockID].data = new_mc;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\n\t}\n\n\tprivate static graphicsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\tprivate static elementsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\t//Block ID = 1\n\tprivate parseGraphics(blockID:number):void\n\t{\n\t\tvar graphics:Graphics = new Graphics();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numElements:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.graphicsProperties);\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\t\tvar target_start_idx:number=0;\n\t\tvar target_vert_cnt:number=0;\n\t\tvar element_type:number = ElementType.STANDART_STREAMS;\n\t\tvar target_element:ElementsBase = null;\n\t\t// Loop through sub sprites\n\t\tfor (var elements_parsed:number = 0;  elements_parsed < numElements; elements_parsed++) {\n\t\t\tvar is_curve_elements:boolean=false;\n\t\t\tvar attr_count:number=0;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\t\t\ttarget_start_idx=0;\n\t\t\ttarget_vert_cnt=0;\n\t\t\telement_type = ElementType.STANDART_STREAMS;\n\t\t\ttarget_element = null;\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\t\t\tvar elementsProps:AWDProperties = this.parseProperties(AWDParser.elementsProperties);\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 4) {\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t} else if (str_type == 7) {\n\t\t\t\t\tweights = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (2d pos + uv + curvedata)\n\t\t\t\t\telement_type=ElementType.CONCENATED_STREAMS;\n\t\t\t\t\tattr_count = 28;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\telement_type=ElementType.CONCENATED_STREAMS;\n\t\t\t\t\tattr_count = 20;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\telement_type=ElementType.CONCENATED_STREAMS;\n\t\t\t\t\tattr_count = 12;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 13) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)else {\n\t\t\t\t\telement_type=ElementType.SHARED_BUFFER;\n\t\t\t\t\tvar targetGraphic:Graphics=<Graphics>(this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n\t\t\t\t\tvar element_idx:number=this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\ttarget_element = targetGraphic.getGraphicAt(element_idx).elements;\n\t\t\t\t\ttarget_start_idx = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\ttarget_vert_cnt = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log(\"skipping unknown subgeom stream\");\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-sprite attributes for now\n\n\t\t\tif(element_type==ElementType.CONCENATED_STREAMS){\n\t\t\t\t//console.log(\"str_len/attr_count = \"+str_len/attr_count)\n\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len/attr_count);\n\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\tif(attr_count==20){\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\t\t\t\t}\n\t\t\t\telse if(attr_count==12){\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\n\t\t\t\t}\n\n\t\t\t\tif(attr_count==28)\n\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\tgraphics.addGraphic(curve_elements);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements with curves\");\n\n\t\t\t}\n\t\t\telse if(element_type==ElementType.STANDART_STREAMS){\n\t\t\t\tvar triangle_elements = new TriangleElements(new AttributesBuffer());\n\n\t\t\t\tif (weights)\n\t\t\t\t\ttriangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n\n\t\t\t\tif (normals)\n\t\t\t\t\ttriangle_elements.autoDeriveNormals = false;\n\n\t\t\t\ttriangle_elements.autoDeriveTangents = true;\n\n\t\t\t\ttriangle_elements.setIndices(indices);\n\t\t\t\ttriangle_elements.setPositions(verts);\n\t\t\t\ttriangle_elements.setNormals(normals);\n\t\t\t\ttriangle_elements.setUVs(uvs);\n\t\t\t\ttriangle_elements.setJointWeights(weights);\n\t\t\t\ttriangle_elements.setJointIndices(w_indices);\n\n\t\t\t\tvar scaleU:number = elementsProps.get(1, 1);\n\t\t\t\tvar scaleV:number = elementsProps.get(2, 1);\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\t\tsetSubUVs = true;\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\n\t\t\t\t}\n\n\t\t\t\tif (setSubUVs)\n\t\t\t\t\ttriangle_elements.scaleUV(scaleU, scaleV);\n\n\t\t\t\tgraphics.addGraphic(triangle_elements);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements\");\n\t\t\t}\n\t\t\telse if(element_type==ElementType.SHARED_BUFFER){\n\n\t\t\t\tvar graphic:Graphic = graphics.addGraphic(target_element);\n\t\t\t\tgraphic.offset = target_start_idx;\n\t\t\t\tgraphic.count = target_vert_cnt;\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements that shares buffer from target geom\");\n\t\t\t}\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating sprites (and their material assignments.)\n\t\t}\n\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgraphics.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> graphics, name);\n\t\tthis._blocks[blockID].data = graphics;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed Graphics: Name = \" + name);\n\t}\n\n\tprivate static primitiveProperties:Object = {\n\t\t101:AWDParser.GEO_NUMBER,\n\t\t102:AWDParser.GEO_NUMBER,\n\t\t103:AWDParser.GEO_NUMBER,\n\t\t110:AWDParser.GEO_NUMBER,\n\t\t111:AWDParser.GEO_NUMBER,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t303:AWDParser.UINT16,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t703:AWDParser.BOOL,\n\t\t704:AWDParser.BOOL};\n\n\tprivate static primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar elements_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties(AWDParser.primitiveProperties);\n\n\t\t// to do, not all properties are set on all primitives\n\t\tswitch (primType) {\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//graphics.elements;\n\t\t\t//graphics.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7))\n\t\t\t\tprimType = 0;\n\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n\t\t}\n\t}\n\n\tprivate static containerProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tif (parent) {\n\t\t\tparent.addChild(ctr);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.containerProperties);\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t} else {// in other versions we do not read the Container properties\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t}\n\n\tprivate static spriteInstanceProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL};\n\n\t// Block ID = 23\n\tprivate parseSpriteInstance(blockID:number):void\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar asset:IAsset = <IAsset> this._blocks[data_id].data;\n\t\tvar graphics:Graphics;\n\t\tvar prefab:PrefabBase;\n\t\tvar isPrefab:boolean=false;\n\t\tif (asset.isAsset(Graphics)) {\n\t\t\tgraphics = <Graphics> asset;\n\t\t} else {\n\t\t\tisPrefab = true;\n\t\t\tprefab = <PrefabBase> asset;\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar sprite:Sprite;\n\n\t\tif (isPrefab) {\n\t\t\tsprite = <Sprite> prefab.getNewObject()\n\t\t} else {\n\t\t\tsprite = new Sprite();\n\t\t\tgraphics.copyTo(sprite.graphics);\n\t\t}\n\n\t\tsprite.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(sprite);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\n\t\t}\n\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\n\t\t\tsprite.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.spriteInstanceProperties);\n\t\t\tsprite.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\tsprite.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tsprite.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\n\t\tthis._blocks[blockID].data = sprite;\n\n\t\tif (this._debug) {\n\t\t\tif (isPrefab)\n\t\t\t\tconsole.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t\telse\n\t\t\t\tconsole.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar asset:Skybox = new Skybox();\n\t\tvar tex:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultImageCube());\n\t\tasset.texture = tex;\n\n\t\tthis.parseProperties(null);\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n\t}\n\n\tprivate static lightProperties:Object = {\n\t\t1:AWDParser.PROPERTY_NUMBER,\n\t\t2:AWDParser.PROPERTY_NUMBER,\n\t\t3:AWDParser.COLOR,\n\t\t4:AWDParser.PROPERTY_NUMBER,\n\t\t5:AWDParser.PROPERTY_NUMBER,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.COLOR,\n\t\t8:AWDParser.PROPERTY_NUMBER,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.UINT8,\n\t\t11:AWDParser.PROPERTY_NUMBER,\n\t\t12:AWDParser.UINT16,\n\t\t21:AWDParser.MATRIX_NUMBER,\n\t\t22:AWDParser.MATRIX_NUMBER,\n\t\t23:AWDParser.MATRIX_NUMBER};\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number):void\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.lightProperties);\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\t\t}\n\n\t\tif (lightType == 2) {\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\t\t}\n\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(light);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\t}\n\n\tprivate static cameraProperties:Object = {\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER};\n\n\tprivate static cameraPivotProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number):void\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.cameraProperties);\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(camera);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties(AWDParser.cameraPivotProperties);\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (var k:number = 0; k < numLights; k++) {\n\t\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tlightsArray.push(light);\n\t\t\tlightsArrayNames.push(light.name);\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n\t}\n\n\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\tprivate static materialProperties:Object = {\n\t\t1:AWDParser.INT32,\n\t\t2:AWDParser.BADDR,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL};\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number):void\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\tprops = this.parseProperties(AWDParser.materialProperties);\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\n\t\tvar debugString:string = \"\";\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\tmat = new MethodMaterial();\n\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = this.parseUserAttributes();\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.style.sampler = new Sampler2D(props.get(13, false));\n\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\t\n\tprivate static material_v1Properties:Object = {1:AWDParser.UINT32,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.BOOL,\n\t\t8:AWDParser.BOOL,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL,\n\t\t15:AWDParser.PROPERTY_NUMBER,\n\t\t16:AWDParser.UINT32,\n\t\t17:AWDParser.BADDR,\n\t\t18:AWDParser.PROPERTY_NUMBER,\n\t\t19:AWDParser.PROPERTY_NUMBER,\n\t\t20:AWDParser.UINT32,\n\t\t21:AWDParser.BADDR,\n\t\t22:AWDParser.BADDR};\n\n\tprivate static method_v1Properties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4};\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number):void\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar diffuseImage:BitmapImage2D;\n\t\tvar normalImage:BitmapImage2D;\n\t\tvar specImage:BitmapImage2D;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.material_v1Properties);\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\t\t\tmat = new MethodMaterial();\n\t\t\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdiffuseImage = <BitmapImage2D> this._blocks[props.get(17, 0)].data;\n\t\t\t\tnormalImage = <BitmapImage2D> this._blocks[props.get(3, 0)].data;\n\t\t\t\tspecImage = <BitmapImage2D> this._blocks[props.get(21, 0)].data;\n\t\t\t\tmat.lightPicker = <LightPickerBase> this._blocks[props.get(22, 0)].data;\n\t\t\t\tmat.style.sampler = new Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true));\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\n\t\t\t\tif (diffuseImage) {\n\t\t\t\t\tmat.diffuseTexture = new Single2DTexture(diffuseImage);\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (normalImage) {\n\t\t\t\t\tmat.normalMethod.texture = new Single2DTexture(normalImage);\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (specImage) {\n\t\t\t\t\tmat.specularMethod.texture = new Single2DTexture(specImage);\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specImage.name;\n\t\t\t\t}\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambientMethod.strength = props.get(15, 1.0);\n\t\t\t\tmat.diffuseMethod.color = props.get(16, 0xffffff);\n\t\t\t\tmat.specularMethod.strength = props.get(18, 1.0);\n\t\t\t\tmat.specularMethod.gloss = props.get(19, 50);\n\t\t\t\tmat.specularMethod.color = props.get(20, 0xffffff);\n\n\t\t\t\tfor (var methods_parsed:number = 0; methods_parsed < num_methods; methods_parsed++) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties(AWDParser.method_v1Properties);\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\t\t\t\t\t\t\tvar effectMethod:EffectMethodBase = <EffectMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.addEffectMethod(effectMethod);\n\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + effectMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\t\t\t\t\t\t\tvar shadowMapMethod:ShadowMapMethodBase = <ShadowMapMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.shadowMethod = shadowMapMethod;\n\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\tvar cubeTexture:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod();\n\t\t\t\t\t\t\tmat.ambientMethod.texture = cubeTexture;\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(texture);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(<Single2DTexture> mat.normalMethod.texture || texture, texture);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: we should not need this anymore (if using texture-atlas)\n\t\telse if ((type>=3)&&(type<=7)){\n\t\t\t// if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n\t\t\tvar color:number = props.get(1, 0xcccccc);\n\t\t\tdebugString+=color;\n\t\t\tvar diffuseTexture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\t\t\tif(type==5){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.LINEAR_GRADIENT;\n\t\t\t}\n\t\t\telse if(type==6){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.RADIAL_GRADIENT;\n\t\t\t}\n\t\t\tvar basic_mat:BasicMaterial = new BasicMaterial();\n\t\t\tbasic_mat.texture = diffuseTexture;\n\t\t\tbasic_mat.bothSides = true;\n\t\t\t//basic_mat.preserveAlpha = true;\n\t\t\t//basic_mat.alphaBlending = true;\n\t\t\tbasic_mat.extra = this.parseUserAttributes();\n\t\t\tthis._pFinalizeAsset(<IAsset> basic_mat, name);\n\t\t\tthis._blocks[blockID].data = basic_mat;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(debugString);\n\t\t\treturn;\n\t\t\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number):void\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tvar url:string = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tvar data_len:number = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number):void\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar i:number;\n\n\t\tthis._texture_users[ this._cur_block_id ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true, i);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true, i);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number):void\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number):void\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar asset:ShadowMethodBase = this.parseShadowMethodList(light, blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n\t}\n\n\tprivate static commandProperties:Object = {\n\t\t1:AWDParser.BADDR};\n\n\tprivate static targetProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\t\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number):void\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar parentObject:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar targetObject:DisplayObjectContainer;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.commandProperties);\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\t\t\t\ttargetObject = this._blocks[props.get(1, 0)].data;\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tif (parentObject)\n\t\t\t\t\tparentObject.addChild(targetObject);\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties(AWDParser.targetProperties);\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\t\t}\n\n\t\tthis._blocks[blockID].data = targetObject;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t}\n\t\n\tprivate static metaDataProperties:Object = {\n\t\t1:AWDParser.UINT32,\n\t\t2:AWDParser.AWDSTRING,\n\t\t3:AWDParser.AWDSTRING,\n\t\t4:AWDParser.AWDSTRING,\n\t\t5:AWDParser.AWDSTRING};\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number):void\n\t{\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.metaDataProperties);\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number):void\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\tprivate shadowMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4}\n\t\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties(this.shadowMethodListProperties);\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> this._blocks[props.get(1, 0)].data);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\n\t\tthis._blocks[blockID].data = skeleton;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Float32Array = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t}\n\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\n\t\tthis._blocks[blockID].data = pose;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_id:number;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tpose_id = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_id].data, frame_dur);\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\t\n\tprivate spritePoseAnimationProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t2:AWDParser.BOOL};\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseSpritePoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\n\t{\n\t\tvar subSpriteParsed:number /*uint*/;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar elements:TriangleElements;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Short3Attributes;\n\t\tvar verts:Array<number>;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geo_id:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[geo_id].data;\n\n\t\tvar uvs:Array<Float32Array> = this.getUVForVertexAnimation(geo_id);\n\n\t\tvar num_frames:number = (!poseOnly)? this._newBlockBytes.readUnsignedShort() : 1;\n\n\t\tvar num_subsprites:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar num_Streams:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var streamsParsed:number = 0; streamsParsed < num_Streams; streamsParsed++)\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\n\t\tprops = this.parseProperties(this.spritePoseAnimationProperties);\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tvar frame_dur:number;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgraphics = new Graphics();\n\t\t\tsubSpriteParsed = 0;\n\t\t\twhile (subSpriteParsed < num_subsprites) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\t\t\t\telements.setIndices(indices);\n\t\t\t\t\t\telements.setPositions(verts);\n\t\t\t\t\t\telements.setUVs(uvs[subSpriteParsed]);\n\t\t\t\t\t\telements.setNormals(null);\n\t\t\t\t\t\telements.setTangents(null);\n\t\t\t\t\t\telements.autoDeriveNormals = false;\n\t\t\t\t\t\telements.autoDeriveTangents = false;\n\t\t\t\t\t\tsubSpriteParsed++;\n\t\t\t\t\t\tgraphics.addGraphic(elements);\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(graphics, frame_dur);\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\tprivate static vertexAnimationSetProperties:Object = {\n\t\t1:AWDParser.UINT16};\n\t\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\tvar clipNode:AnimationClipNodeBase;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tclipNode = <AnimationClipNodeBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (clipNode instanceof VertexClipNode)\n\t\t\t\tvertexFrames.push(<VertexClipNode> clipNode);\n\t\t\telse if (clipNode instanceof SkeletonClipNode)\n\t\t\t\tskeletonFrames.push(<SkeletonClipNode> clipNode);\n\t\t}\n\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n\t\t}\n\t}\n\n\tprivate static animatorSetProperties:Object = {1:AWDParser.BADDR};\n\t\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.animatorSetProperties);\n\t\tvar targetAnimationSet:AnimationSetBase = <AnimationSetBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tvar targetSpritees:Array<Sprite> = new Array<Sprite>();\n\t\tvar targetSpriteLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var i:number /*int*/ = 0; i < targetSpriteLength; i++)\n\t\t\ttargetSpritees.push(<Sprite> this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1)\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> this._blocks[props.get(1, 0)].data);\n\t\telse if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\n\t\tfor (i = 0; i < targetSpritees.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetSpritees[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\telse if (type == 2)\n\t\t\t\ttargetSpritees[i].animator = (<VertexAnimator> thisAnimator);\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\tprivate sharedMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER,\n\t\t105:AWDParser.PROPERTY_NUMBER,\n\t\t106:AWDParser.PROPERTY_NUMBER,\n\t\t107:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL};\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties(this.sharedMethodListProperties);\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data), <number> props.get(101, 1));\n\t\t\t\tvar targetID:number = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <TextureBase> this._blocks[targetID].data;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\t\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\t\t\tvar attributes:Object = {};\n\n\t\t\tfor (var attibuteCnt:number = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar props:AWDProperties = new AWDProperties();\n\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\t\t\tvar len:number;\n\t\t\tvar key:number;\n\t\t\tvar type:number;\n\n\t\t\tfor (var propertyCnt:number = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected[key]) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\t\tvar accuracy:boolean;\n\n\t\tswitch (type) {\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\t\t\tcase AWDParser.GEO_NUMBER:\n\t\t\t\taccuracy = this._accuracyGeo;\n\t\t\tcase AWDParser.MATRIX_NUMBER:\n\t\t\t\taccuracy = this._accuracyMatrix;\n\t\t\tcase AWDParser.PROPERTY_NUMBER:\n\t\t\t\taccuracy = this._accuracyProps;\n\t\t\tdefault:\n\t\t\t\tif (accuracy) {\n\t\t\t\t\telem_len = 8;\n\t\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\t} else {\n\t\t\t\t\telem_len = 4;\n\t\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\t}\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\tfor (var num_read:number = 0; num_read < num_elems; num_read++)\n\t\t\t\tlist[num_read] = read_func.call(this._newBlockBytes);\n\n\t\t\treturn list;\n\t\t} else {\n\t\t\treturn read_func.call(this._newBlockBytes);\n\t\t}\n\t}\n\n\tprivate parseHeader():void\n\t{\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tvar flags:number = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tvar body_len:number = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable())\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(spriteID:number /*uint*/):Array<Float32Array>\n\t{\n\t\tif (this._blocks[spriteID].data instanceof Sprite)\n\t\t\tspriteID = this._blocks[spriteID].geoID;\n\n\t\tif (this._blocks[spriteID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\n\n\t\tvar graphics:Graphics = (<Graphics> this._blocks[spriteID].data);\n\t\tvar elements:TriangleElements;\n\t\tvar uvsForVertexAnimation:Array<ArrayBufferView> = this._blocks[spriteID].uvsForVertexAnimation = new Array<Float32Array>();\n\n\t\tvar len:number = graphics.count;\n\t\tfor (var geoCnt:number= 0; geoCnt < len; geoCnt++) {\n\t\t\telements = <TriangleElements> graphics.getGraphicAt(geoCnt).elements;\n\t\t\tuvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n\t\t}\n\n\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\t\treturn this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\n\t\treturn this._newBlockBytes.readFloat();\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Float32Array\n\t{\n\t\tvar mtx_raw:Float32Array = new Float32Array(6);\n\n\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Float32Array\n\t{\n\t\tvar mtx_raw:Float32Array = new Float32Array(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n}\n\nclass ElementType {\n\tpublic static STANDART_STREAMS:number = 0;\n\tpublic static CONCENATED_STREAMS:number = 1;\n\tpublic static SHARED_BUFFER:number = 2;\n}\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any):void\n\t{\n\t\tthis[key] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\treturn (this[key] || fallback);\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import {BitmapImage2D}\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {IAsset}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {AssetLibrary}\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\nimport {URLLoaderDataFormat}\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {URLRequest}\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport {ParserBase}\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport {ParserUtils}\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport {ResourceDependency}\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport {XmlUtils}\t\t\t\tfrom \"awayjs-core/lib/utils/XmlUtils\";\nimport {BitmapFontTable}\t\tfrom \"awayjs-display/lib/text/BitmapFontTable\";\nimport {Font}\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\n\n/**\n * TextureAtlasParser provides a \"parser\" for natively supported image types (jpg, png). While it simply loads bytes into\n * a loader object, it wraps it in a BitmapImage2DResource so resource management can happen consistently without\n * exception cases.\n */\nexport class FNTParser extends ParserBase\n{\n\tprivate _doc:Node;\n\tprivate _imagePath:string;\n\tprivate _bitmapFontTable:BitmapFontTable;\n\tprivate _font:Font;\n\tprivate _chars:NodeList;\n\tprivate _parseState:number = 0;\n\n\t/**\n\t * Creates a new TextureAtlasParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor()\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\tvar supports:boolean=extension == \"fnt\";\n\t\tif(supports){\n\t\t\tconsole.log(\"supportsType fnt = \"+extension);\n\t\t}\n\t\treturn extension == \"fnt\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\ttry {\n\t\t\tvar content:string = ParserUtils.toString(data);\n\t\t\tif(content.indexOf(\"font\") != -1 || content.indexOf(\"Font\") != -1){\n\t\t\t\tconsole.log(\"supportsData fnt\");\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif(resourceDependency.assets.length) {\n\t\t\tthis._bitmapFontTable.add_page(<BitmapImage2D> resourceDependency.assets[0]);\n\t\t\tthis._pFinalizeAsset(<BitmapImage2D> resourceDependency.assets[0]);\n\t\t\tthis._parseState = FNTParserState.PARSE_CHARS;\n\t\t} else {\n\t\t\tthis._parseState = FNTParserState.PARSE_COMPLETE;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tthis._parseState = FNTParserState.PARSE_COMPLETE;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar nodes:NodeList;\n\n\t\tswitch(this._parseState) {\n\t\t\tcase FNTParserState.PARSE_XML:\n\t\t\t\ttry {\n\t\t\t\t\tthis._doc = XmlUtils.getChildrenWithTag(XmlUtils.strToXml(this._pGetTextData()), \"font\")[0];\n\t\t\t\t\tvar page_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"pages\")[0];\n\t\t\t\t\tvar all_pages:NodeList = XmlUtils.getChildrenWithTag(page_node, \"page\");\n\t\t\t\t\tvar len:number = all_pages.length;\n\t\t\t\t\t// todo: correctly support multiple pages\n\t\t\t\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\t\t\t\tthis._imagePath = XmlUtils.readAttributeValue(all_pages[i], \"file\");\n\t\t\t\t\t}\n\t\t\t\t\tvar char_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"chars\")[0];\n\t\t\t\t\tthis._chars = XmlUtils.getChildrenWithTag(char_node, \"char\");\n\t\t\t\t\tthis._parseState = FNTParserState.PARSE_IMAGE;\n\t\t\t\t\tvar info_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"info\")[0];\n\t\t\t\t\tvar common_node:Node = XmlUtils.getChildrenWithTag(this._doc, \"common\")[0];\n\n\t\t\t\t\tvar font_name:string = XmlUtils.readAttributeValue(info_node, \"face\");\n\t\t\t\t\tthis._font = <Font>AssetLibrary.getAsset(font_name);\n\t\t\t\t\tif(this._font==undefined){\n\t\t\t\t\t\tthis._font = new Font();\n\t\t\t\t\t\tthis._font.name=font_name;\n\t\t\t\t\t}\n\t\t\t\t\tvar bold:string = XmlUtils.readAttributeValue(info_node, \"bold\");\n\t\t\t\t\tif(bold!=\"0\") font_name+=\"_bold\";\n\t\t\t\t\tvar italic:string = XmlUtils.readAttributeValue(info_node, \"italic\");\n\t\t\t\t\tif(italic!=\"0\") font_name+=\"_italic\";\n\t\t\t\t\tthis._bitmapFontTable = <BitmapFontTable> this._font.get_font_table(font_name, BitmapFontTable.assetType);\n\t\t\t\t\t\n\t\t\t\t\tvar size:string = XmlUtils.readAttributeValue(info_node, \"size\");\n\t\t\t\t\tthis._bitmapFontTable._init_size=parseInt(size);\n\n\t\t\t\t} catch(Error) {\n\t\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase FNTParserState.PARSE_IMAGE:\n\t\t\t\tif (this._imagePath){\n\t\t\t\t\tthis._pAddDependency(this._imagePath, new URLRequest(this._imagePath));\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t} else {\n\t\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase FNTParserState.PARSE_CHARS:\n\t\t\t\tvar element:Node;\n\t\t\t\tvar x, y, width, height, xoff, yoff, xadv, page, chnl:number;\n\t\t\t\tvar id:string;\n\t\t\t\tvar len:number = this._chars.length;\n\t\t\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\t\t\telement = this._chars[i];\n\t\t\t\t\tx = parseInt(XmlUtils.readAttributeValue(element, \"x\"));\n\t\t\t\t\ty = parseInt(XmlUtils.readAttributeValue(element, \"y\"));\n\t\t\t\t\twidth = parseInt(XmlUtils.readAttributeValue(element, \"width\"));\n\t\t\t\t\theight = parseInt(XmlUtils.readAttributeValue(element, \"height\"));\n\t\t\t\t\txoff = parseInt(XmlUtils.readAttributeValue(element, \"xoffset\"));\n\t\t\t\t\tyoff = parseInt(XmlUtils.readAttributeValue(element, \"yoffset\"));\n\t\t\t\t\txadv = parseInt(XmlUtils.readAttributeValue(element, \"xadvance\"));\n\t\t\t\t\tpage = parseInt(XmlUtils.readAttributeValue(element, \"page\"));\n\t\t\t\t\tchnl = parseInt(XmlUtils.readAttributeValue(element, \"chnl\"));\n\t\t\t\t\tid = XmlUtils.readAttributeValue(element, \"id\");\n\t\t\t\t\tthis._bitmapFontTable.setChar(id, x, y, width, height, xoff, yoff, xadv, page, chnl);\n\t\t\t\t}\n\t\t\t\tthis._pFinalizeAsset(<IAsset>this._font, this._font.name);\n\t\t\t\tthis._parseState = FNTParserState.PARSE_COMPLETE;\n\t\t\t\tbreak;\n\n\t\t\tcase FNTParserState.PARSE_COMPLETE:\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n}\n\n\nclass FNTParserState {\n\tpublic static PARSE_XML:number = 0;\n\tpublic static PARSE_IMAGE:number = 1;\n\tpublic static PARSE_CHARS:number = 2;\n\tpublic static PARSE_COMPLETE:number = 3;\n}",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport {ParserUtils}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport {DisplayObject}\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {Single2DTexture}\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport {VertexClipNode}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\nimport {VertexAnimationSet}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\n\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nexport class MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current elements being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstElements:TriangleElements;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _sprite:Sprite;\n\tprivate _graphics:Graphics;\n\n\tprivate materialFinal:boolean = false;\n\tprivate graphicsCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar material:MethodMaterial = new MethodMaterial(<BitmapImage2D> resourceDependency.assets[0]);\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\tmaterial.name = this._sprite.material.name;\n\t\tthis._sprite.material = material;\n\t\tthis._pFinalizeAsset(material);\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\tthis._pFinalizeAsset(this._sprite);\n\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\tthis._pFinalizeAsset(this._sprite);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a sprite only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._sprite = new Sprite();\n\t\t\t\tthis._graphics = this._sprite.graphics;\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.graphicsCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.graphicsCreated) {\n\t\t\t\tthis.graphicsCreated = true;\n\t\t\t\t//create default subgraphics\n\t\t\t\tthis._graphics.addGraphic(this._firstElements.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._sprite.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number):void\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader():void\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames():void\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._sprite.material.name = this._materialNames[0];\n\t\telse\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the sprite.\n\t */\n\tprivate parseUV():void\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces():void\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame elements.\n\t */\n\tprivate parseFrames():void\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar graphics:Graphics;\n\t\tvar elements:TriangleElements;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\n\t\t\tif (this._firstElements == null)\n\t\t\t\tthis._firstElements = elements;\n\n\t\t\tgraphics = new Graphics();\n\t\t\tgraphics.addGraphic(elements);\n\n\t\t\telements.setIndices(this._indices);\n\t\t\telements.setPositions(fvertices);\n\t\t\telements.setUVs(this._finalUV);\n\t\t\t// cause explicit updates\n\t\t\telements.setNormals(null);\n\t\t\telements.setTangents(null);\n\t\t\t// turn auto updates off because they may be animated and set explicitly\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(graphics, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\n\nimport {JointPose}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\nimport {SkeletonClipNode}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nexport class MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\n\n/**\n *\n */\nexport class BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nexport class BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nexport class FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nexport class HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\n\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\n\nimport {SkeletonAnimationSet}\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\nimport {SkeletonJoint}\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nexport class MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _sprite:Sprite;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _elementsData:Array<ElementsData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _graphics:Graphics;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5sprite\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._sprite = new Sprite();\n\t\t\t\tthis._graphics = this._sprite.graphics;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._elementsData.length; ++i)\n\t\t\t\t\tthis._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\n\n\t\t\t\t//_graphics.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_sprite.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\t\t\tthis._pFinalizeAsset(this._graphics);\n\t\t\t\tthis._pFinalizeAsset(this._sprite);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number):void\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numElementsData:number /*int*/ = this._elementsData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numElementsData; ++i) {\n\t\t\tvar elementsData:ElementsData = this._elementsData[i];\n\t\t\tvar positionData:Array<PositionData> = elementsData.positionData;\n\t\t\tvar numVerts:number /*int*/ = positionData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = positionData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(position:PositionData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = position.startWeight;\n\t\tvar end:number /*int*/ = position.startWeight + position.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh graphics.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar positionData:Array<PositionData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tpositionData = new Array<PositionData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(positionData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._elementsData == null)\n\t\t\tthis._elementsData = new Array<ElementsData>();\n\n\t\tvar i:number /*uint*/ = this._elementsData.length;\n\t\tthis._elementsData[i] = new ElementsData();\n\t\tthis._elementsData[i].positionData = positionData;\n\t\tthis._elementsData[i].weightData = weights;\n\t\tthis._elementsData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the sprite data to a SkinnedSub instance.\n\t * @param positionData The sprite's positions.\n\t * @param weights The joint weights per position.\n\t * @param indices The indices for the faces.\n\t * @return A TriangleElements instance containing all elements data for the current sprite.\n\t */\n\tprivate translateElements(positionData:Array<PositionData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleElements\n\t{\n\t\tvar len:number /*int*/ = positionData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar position:PositionData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar positions:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tposition = positionData[i];\n\t\t\tv1 = position.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tpositions[v1] = positions[v2] = positions[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < position.countWeight; ++j) {\n\t\t\t\tweight = weights[position.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tpositions[v1] += pos.x*weight.bias;\n\t\t\t\t\tpositions[v2] += pos.y*weight.bias;\n\t\t\t\t\tpositions[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = position.index << 1;\n\t\t\tuvs[v1++] = position.s;\n\t\t\tuvs[v1] = position.t;\n\t\t}\n\n\t\telements.jointsPerVertex = this._maxJointCount;\n\t\telements.setIndices(indices);\n\t\telements.setPositions(positions);\n\t\telements.setUVs(uvs);\n\t\telements.setJointIndices(jointIndices);\n\t\telements.setJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\telements.setNormals(null);\n\t\telements.setTangents(null);\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\telements.autoDeriveTangents = false;\n\t\telements.autoDeriveNormals = false;\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of position indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single position.\n\t * @param positionData The list to contain the position data.\n\t */\n\tprivate parseVertex(positionData:Array<PositionData>):void\n\t{\n\t\tvar position:PositionData = new PositionData();\n\t\tposition.index = this.getNextInt();\n\t\tthis.parseUV(position);\n\t\tposition.startWeight = this.getNextInt();\n\t\tposition.countWeight = this.getNextInt();\n\t\t//\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\n\t\tpositionData[position.index] = position;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param positionData The positionData to contain the UV coordinates.\n\t */\n\tprivate parseUV(positionData:PositionData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tpositionData.s = this.getNextNumber();\n\t\tpositionData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\n\nexport class PositionData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nexport class JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nexport class ElementsData\n{\n\tpublic positionData:Array<PositionData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport {ParserUtils}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport {ByteArray}\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {MaterialBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport {Single2DTexture}\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nexport class Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = Sprite.assetType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number):void\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == Sprite.assetType) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleElements;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar sprite:Sprite;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Build sprite and return it\n\t\t\tsprite = new Sprite(mat);\n\t\t\tsprite.transform.matrix3D = new Matrix3D(obj.transform);\n\n\t\t\tgraphics = sprite.graphics;\n\n\t\t\t// Construct elements (potentially splitting buffers)\n\t\t\t// and add them to graphics.\n\t\t\tsub = new TriangleElements(new AttributesBuffer());\n\t\t\tsub.setIndices(obj.indices);\n\t\t\tsub.setPositions(obj.verts);\n\t\t\tsub.setUVs(obj.uvs);\n\n\t\t\tgraphics.addGraphic(sub);\n\n\t\t\t// Apply pivot translation to graphics if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\t\tmtx.rawData[12] = 0;\n\t\t\t\t\tmtx.rawData[13] = 0;\n\t\t\t\t\tmtx.rawData[14] = 0;\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to graphics if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to graphics. Finalize the graphics,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n\n\t\t\treturn sprite;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture();\n\n\t\tmat.diffuseMethod.color = this._cur_mat.diffuseColor;\n\t\tmat.specularMethod.color = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Float32Array\n\t{\n\t\tvar data:Float32Array = new Float32Array(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\n/**\n *\n */\nexport class FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nexport class MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nexport class ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Float32Array;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nexport class TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Single2DTexture;\n}\n\n/**\n *\n */\nexport class VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import {Sampler2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\nimport {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {BitmapImage2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {URLLoaderDataFormat}\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport {URLRequest}\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport {ParserBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport {ParserUtils}\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport {ResourceDependency}\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\n\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport {DefaultMaterialManager}\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {MaterialBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport {Single2DTexture}\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport {MethodMaterial}\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport {MethodMaterialMode}\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\nimport {SpecularBasicMethod}\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\";\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nexport class OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _sprites:Array<Sprite>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = new Single2DTexture(<BitmapImage2D> asset);\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._sprites.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._sprites.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._sprites = new Array<Sprite>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number):void\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk):void\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate():void\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar sprite:Sprite;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tsprite = new Sprite(bmMaterial);\n\t\t\t\tgraphics = sprite.graphics;\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], graphics);\n\n\t\t\t\tif (graphics.count == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> graphics);//, \"\");\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tsprite.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\n\t\t\t\t\tsprite.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tsprite.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._sprites.push(sprite);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + sprite.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\n\n\t\t\t\tif (sprite.graphics.count > 1) {\n\t\t\t\t\tfor (sm = 1; sm < sprite.graphics.count; ++sm)\n\t\t\t\t\t\tsprite.graphics.getGraphicAt(sm).material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> sprite);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgraphics.\n\t * @param materialGroup The material group data to convert.\n\t * @param graphics The Graphics to contain the converted Elements.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, graphics:Graphics):void\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar elements:TriangleElements;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\telements.autoDeriveNormals = normals.length? false : true;\n\t\t\telements.setIndices(indices);\n\t\t\telements.setPositions(vertices);\n\t\t\telements.setNormals(normals);\n\t\t\telements.setUVs(uvs);\n\n\t\t\tgraphics.addGraphic(elements);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>):void\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk):void\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk):void\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk):void\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk):void\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk):void\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk):void\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk):void\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string):void\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.color = specularColor;\n\t\t\t\t\tbasicSpecularMethod.strength = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial = new MethodMaterial(color);\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm.alpha = alpha;\n\t\t\t\t} else {\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\tcm.diffuseMethod.color = diffuseColor;\n\n\t\t\t\tif (useSpecular) {\n\t\t\t\t\tcm.specularMethod.color = specularColor;\n\t\t\t\t\tcm.specularMethod.strength = specular;\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._sprites.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string):void\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial):void\n\t{\n\t\tvar decomposeID;\n\t\tvar sprite:Sprite;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._sprites.length; ++i) {\n\t\t\tsprite = this._sprites[i];\n\t\t\tdecomposeID = sprite.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (sprite.material)\n\t\t\t\t\t\tsprite.material = null;\n\t\t\t\t\tsprite.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\ttm = <MethodMaterial > sprite.material;\n\n\t\t\t\t\ttm.ambientMethod.texture = lm.texture;\n\t\t\t\t\ttm.style.color = lm.color;\n\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\ttm.style.sampler = new Sampler2D(true);\n\n\t\t\t\t\tif (this.materialMode < 2) // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\telse\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\ttm.specularMethod.color = specularData.color;\n\t\t\t\t\t\t\t\ttm.specularMethod.strength = specularData.alpha;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsprite.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._sprites.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials():void\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport class ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nexport class Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nexport class MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nexport class SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nexport class LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Single2DTexture;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nexport class FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nexport class UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nexport class Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import {Loader}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/Loader\";\n\nimport {AWDParser}\t\t\t\t\t\tfrom \"./AWDParser\";\nimport {Max3DSParser}\t\t\t\t\t\tfrom \"./Max3DSParser\";\nimport {MD2Parser}\t\t\t\t\t\tfrom \"./MD2Parser\";\nimport {OBJParser}\t\t\t\t\t\tfrom \"./OBJParser\";\nimport {FNTParser}\t\t\t\t\t\tfrom \"./FNTParser\";\n\n/**\n *\n */\nexport class Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 sprites (.md5sprite)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser, FNTParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}"
  ],
  "sourceRoot": ""
}