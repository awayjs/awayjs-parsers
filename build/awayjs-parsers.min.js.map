{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "../index.ts",
    "lib/lib/AWD3ParserUtils/AWD3Utils.ts",
    "lib/lib/AWD3ParserUtils/AWDBlock.ts",
    "lib/AWDParser.ts",
    "lib/MD2Parser.ts",
    "lib/MD5AnimParser.ts",
    "lib/MD5MeshParser.ts",
    "lib/Max3DSParser.ts",
    "lib/OBJParser.ts",
    "lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    1,
    "module",
    "AWDParser_1",
    "AWDParser",
    "default",
    "Max3DSParser_1",
    "Max3DSParser",
    "MD2Parser_1",
    "MD2Parser",
    "MD5AnimParser_1",
    "MD5AnimParser",
    "MD5MeshParser_1",
    "MD5MeshParser",
    "OBJParser_1",
    "OBJParser",
    "Parsers_1",
    "Parsers",
    "./lib/AWDParser",
    "./lib/MD2Parser",
    "./lib/MD5AnimParser",
    "./lib/MD5MeshParser",
    "./lib/Max3DSParser",
    "./lib/OBJParser",
    "./lib/Parsers",
    "awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils",
    "AWD3Utils",
    "BLOCKSTATE_FINALIZE",
    "BLOCKSTATE_INVALID",
    "BLOCKSTATE_LOAD_DEPENDENICES",
    "BLOCKSTATE_NO_ASSET",
    "COMPRESSIONMODE_LZMA",
    "UNCOMPRESSED",
    "DEFLATE",
    "LZMA",
    "INT8",
    "INT16",
    "INT32",
    "UINT8",
    "UINT16",
    "UINT32",
    "FLOAT32",
    "FLOAT64",
    "BOOL",
    "COLOR",
    "BADDR",
    "AWDSTRING",
    "AWDBYTEARRAY",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "MTX4x4",
    "Object",
    "defineProperty",
    "value",
    "awayjs-parsers/lib/AWD3ParserUtils/AWDBlock",
    "AWD3Utils_1",
    "AWDBlock",
    "this_id",
    "this_type",
    "this",
    "type",
    "id",
    "state",
    "dependencies_data",
    "Array",
    "dependencies_urls",
    "loaded_dependencies",
    "loaded_dependencies_cnt",
    "prototype",
    "dispose",
    "bytes",
    "errorMessages",
    "uvsForVertexAnimation",
    "addError",
    "errorMsg",
    "push",
    "../AWD3ParserUtils/AWD3Utils",
    "awayjs-parsers/lib/AWDParser",
    "__extends",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "create",
    "AttributesBuffer_1",
    "Float3Attributes_1",
    "Float2Attributes_1",
    "Byte4Attributes_1",
    "BitmapImageCube_1",
    "BlendMode_1",
    "Sampler2D_1",
    "ColorTransform_1",
    "Matrix3D_1",
    "Vector3D_1",
    "URLLoaderDataFormat_1",
    "URLRequest_1",
    "ParserBase_1",
    "ParserUtils_1",
    "PerspectiveProjection_1",
    "OrthographicProjection_1",
    "OrthographicOffCenterProjection_1",
    "ByteArray_1",
    "DisplayObjectContainer_1",
    "Graphics_1",
    "TriangleElements_1",
    "DirectionalLight_1",
    "PointLight_1",
    "Camera_1",
    "Sprite_1",
    "Billboard_1",
    "Skybox_1",
    "DefaultMaterialManager_1",
    "StaticLightPicker_1",
    "CubeMapShadowMapper_1",
    "DirectionalShadowMapper_1",
    "PrefabBase_1",
    "PrimitiveCapsulePrefab_1",
    "PrimitiveConePrefab_1",
    "PrimitiveCubePrefab_1",
    "PrimitiveCylinderPrefab_1",
    "PrimitivePlanePrefab_1",
    "PrimitiveSpherePrefab_1",
    "PrimitiveTorusPrefab_1",
    "SingleCubeTexture_1",
    "Single2DTexture_1",
    "VertexAnimationSet_1",
    "VertexAnimator_1",
    "SkeletonAnimationSet_1",
    "SkeletonAnimator_1",
    "JointPose_1",
    "Skeleton_1",
    "SkeletonPose_1",
    "SkeletonJoint_1",
    "SkeletonClipNode_1",
    "VertexClipNode_1",
    "MethodMaterialMode_1",
    "MethodMaterial_1",
    "AmbientEnvMapMethod_1",
    "DiffuseDepthMethod_1",
    "DiffuseCelMethod_1",
    "DiffuseGradientMethod_1",
    "DiffuseLightMapMethod_1",
    "DiffuseWrapMethod_1",
    "EffectAlphaMaskMethod_1",
    "EffectColorMatrixMethod_1",
    "EffectColorTransformMethod_1",
    "EffectEnvMapMethod_1",
    "EffectFogMethod_1",
    "EffectFresnelEnvMapMethod_1",
    "EffectLightMapMethod_1",
    "EffectRimLightMethod_1",
    "NormalSimpleWaterMethod_1",
    "ShadowDitheredMethod_1",
    "ShadowFilteredMethod_1",
    "SpecularFresnelMethod_1",
    "ShadowHardMethod_1",
    "SpecularAnisotropicMethod_1",
    "SpecularCelMethod_1",
    "SpecularPhongMethod_1",
    "ShadowNearMethod_1",
    "ShadowSoftMethod_1",
    "BasicMaterial_1",
    "AS2SceneGraphFactory_1",
    "Timeline_1",
    "AssetLibrary_1",
    "Font_1",
    "TextFormat_1",
    "AWDBlock_1",
    "Rectangle_1",
    "Style_1",
    "Matrix_1",
    "MappingMode_1",
    "ElementsType_1",
    "_super",
    "view",
    "ARRAY_BUFFER",
    "_debug",
    "_debugTimers",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_time_all",
    "_time_graphics",
    "_time_graphics_bytes",
    "_time_timeline",
    "_time_fonts",
    "_time_textfields",
    "_time_sounds",
    "_time_textures",
    "_time_materials",
    "_time_sprites",
    "_num_graphics",
    "_num_timeline",
    "_num_fonts",
    "_num_textfields",
    "_num_sounds",
    "_num_textures",
    "_num_materials",
    "_num_sprites",
    "shadowMethodListProperties",
    2,
    3,
    101,
    "PROPERTY_NUMBER",
    102,
    103,
    201,
    202,
    301,
    302,
    401,
    402,
    601,
    602,
    701,
    702,
    801,
    "spritePoseAnimationProperties",
    "sharedMethodListProperties",
    104,
    105,
    106,
    107,
    "_view",
    "_blocks",
    "data",
    "blendModeDic",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "this_block",
    "parseInt",
    "image_asset",
    "_pFinalizeAsset",
    "name",
    "console",
    "log",
    "audio_asset",
    "sub_id",
    "cube_image_asset",
    "width",
    "draw",
    "_isParsing",
    "updateTimers",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "asset",
    "oldName",
    "block",
    "resetAssetPath",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "_pDieWithError",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "isParsed",
    "ns",
    "flags",
    "len",
    "start_timeing",
    "performance",
    "now",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseSpriteLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseMovieClip",
    "parseTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseSpritePoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseGraphics",
    "parseContainer",
    "parseSpriteInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "end_timing",
    "time_delta",
    "blockID",
    "parseVarStr",
    "new_font",
    "getAsset",
    "newfont",
    "undefined",
    "font_style_cnt",
    "font_style_char_cnt",
    "font_style_name",
    "new_font_style",
    "font_style_char",
    "attr_count",
    "sm_len",
    "sm_end",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "get_font_table",
    "set_font_em_size",
    "set_whitespace_width",
    "ascent",
    "readFloat",
    "descent",
    "j",
    "char_width",
    "indices",
    "idx",
    "readUnsignedShort",
    "curveData",
    "vertexBuffer",
    "bufferView",
    "Uint8Array",
    "arraybytes",
    "curve_elements",
    "setPositions",
    "setCustomAttributes",
    "setUVs",
    "setChar",
    "parseProperties",
    "parseUserAttributes",
    "font",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "mat",
    "bothSides",
    "curves",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "format_props",
    "textFormatProperties",
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "tf_align_int",
    "align",
    "indent",
    "leftMargin",
    "rightMargin",
    "leading",
    "material",
    "newTextField",
    "createTextField",
    "text_field_type",
    "textFieldTypes",
    "displayAsPassword",
    "textWidth",
    "Math",
    "abs",
    "textHeight",
    "num_paragraphs",
    "complete_text",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "text_format",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "props",
    "textFieldProperties",
    "selectable",
    "border",
    "extra",
    "billboard",
    "data_id",
    "graphics",
    "geoID",
    "num_materials",
    "materials",
    "materialNames",
    "materials_parsed",
    "getDefaultMaterial",
    "alphaBlending",
    "useColorTransform",
    "sprite",
    "copyTo",
    "count",
    "getGraphicAt",
    "min",
    "sampler",
    "graphic",
    "style",
    "addSamplerAt",
    "getTextureAt",
    "tx",
    "ty",
    "animateUVs",
    "uvMatrix",
    "matrix",
    "parseMatrix32RawData",
    "newMatrix",
    "x",
    "y",
    "height",
    "imageRect",
    "elements",
    "getCustomAtributes",
    "data_len",
    "url",
    "_pAddDependency",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "cmd_asset",
    "new_timeline",
    "new_mc",
    "createMovieClip",
    "num_potential_childs",
    "registerPotentialChild",
    "num_all_display_instances",
    "num_potential_childs_multi_instanced",
    "num_instances",
    "num_potential_sounds",
    "str_cnt",
    "str_data_type",
    "str_counter",
    "keyframes_start_indices_data",
    "new_buffer",
    "Uint16Array",
    "Uint32Array",
    "keyframe_durations",
    "numKeyFrames",
    "frame_command_indices",
    "frame_recipe",
    "command_length_stream",
    "command_index_stream",
    "add_child_stream",
    "remove_child_stream",
    "update_child_stream",
    "update_child_props_indices_stream",
    "update_child_props_length_stream",
    "property_type_stream",
    "property_index_stream",
    "properties_stream_int",
    "lc",
    "float_array_data",
    "properties_stream_f32_mtx_scale_rot",
    "Float32Array",
    "properties_stream_f32_mtx_pos",
    "properties_stream_f32_mtx_all",
    "properties_stream_f32_ct",
    "_labels",
    "string_props_array",
    "properties_stream_strings",
    "frame_index",
    "one_str_len",
    "add_framescript",
    "init",
    "sceneID",
    "fps",
    "movieClipProperties",
    "timeline",
    "numFrames",
    "numElements",
    "graphicsProperties",
    "geoScaleU",
    "geoScaleV",
    "elements_parsed",
    "is_curve_elements",
    "w_indices",
    "weights",
    "elementsProps",
    "elementsProperties",
    "z",
    "verts",
    "readNumber",
    "uvs",
    "normals",
    "addGraphic",
    "triangle_elements",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "setIndices",
    "setNormals",
    "setJointWeights",
    "setJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    "primitiveProperties",
    "TRIANGLE",
    "topClosed",
    "bottomClosed",
    "yUp",
    "primitiveTypes",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "addChild",
    "containerProperties",
    "pivot",
    "isPrefab",
    "isAsset",
    "getNewObject",
    "spriteInstanceProperties",
    "castsShadows",
    "tex",
    "getDefaultImageCube",
    "texture",
    "light",
    "newShadowMapper",
    "lightType",
    "lightProperties",
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    "cameraProperties",
    "camera",
    "cameraPivotProperties",
    "numLights",
    "lightsArray",
    "lightsArrayNames",
    "k",
    "lightPick",
    "finalize",
    "num_methods",
    "methods_parsed",
    "returnedArray",
    "materialProperties",
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "ambientMethod",
    "alpha",
    "alphaThreshold",
    "diffuseImage",
    "normalImage",
    "specImage",
    "material_v1Properties",
    "spezialType",
    "lightPicker",
    "alphaPremultiplied",
    "blendMode",
    "diffuseTexture",
    "normalMethod",
    "specularMethod",
    "strength",
    "diffuseMethod",
    "gloss",
    "method_v1Properties",
    "effectMethod",
    "addEffectMethod",
    "shadowMapMethod",
    "shadowMethod",
    "cubeTexture",
    "smoothness",
    "fresnelPower",
    "normalReflectance",
    "mappingMode",
    "LINEAR_GRADIENT",
    "RADIAL_GRADIENT",
    "basic_mat",
    "byteArrayToImage",
    "parseSharedMethodList",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "numCommands",
    "typeCommand",
    "commandProperties",
    "targetProperties",
    "metaDataProperties",
    "nameSpaceString",
    "methodType",
    "targetID",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "rawData",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_id",
    "clip",
    "num_frames",
    "frames_parsed",
    "addFrame",
    "frames",
    "poseOnly",
    "subSpriteParsed",
    "streamtypes",
    "geo_id",
    "getUVForVertexAnimation",
    "num_subsprites",
    "num_Streams",
    "streamsParsed",
    "looping",
    "stitchFinalFrame",
    "setTangents",
    "vertexAnimationSetProperties",
    "skeletonFrames",
    "vertexFrames",
    "clipNode",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "animatorSetProperties",
    "targetAnimationSet",
    "targetSpritees",
    "targetSpriteLength",
    "activeState",
    "autoplay",
    "thisAnimator",
    "animator",
    "effectMethodReturn",
    "offCol",
    "colorTransform",
    "list_len",
    "list_end",
    "attributes",
    "attibuteCnt",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "readByte",
    "readInt",
    "readDouble",
    "expected",
    "AWDProperties",
    "key",
    "propertyCnt",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "accuracy",
    "GEO_NUMBER",
    "MATRIX_NUMBER",
    "list",
    "num_elems",
    "num_read",
    "_streaming",
    "body_len",
    "spriteID",
    "geoCnt",
    "numVertices",
    "precision",
    "mtx_raw",
    "isNaN",
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    110,
    111,
    303,
    703,
    704,
    11,
    12,
    21,
    22,
    23,
    13,
    15,
    16,
    17,
    18,
    19,
    20,
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "./AWD3ParserUtils/AWDBlock",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-core/lib/attributes/Byte4Attributes",
    "awayjs-core/lib/attributes/Float2Attributes",
    "awayjs-core/lib/attributes/Float3Attributes",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/image/BitmapImageCube",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-core/lib/image/Sampler2D",
    "awayjs-core/lib/library/AssetLibrary",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/Style",
    "awayjs-display/lib/base/Timeline",
    "awayjs-display/lib/display/Billboard",
    "awayjs-display/lib/display/Camera",
    "awayjs-display/lib/display/DirectionalLight",
    "awayjs-display/lib/display/DisplayObjectContainer",
    "awayjs-display/lib/display/PointLight",
    "awayjs-display/lib/display/Skybox",
    "awayjs-display/lib/display/Sprite",
    "awayjs-display/lib/graphics/ElementsType",
    "awayjs-display/lib/graphics/Graphics",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "_animationSet",
    "materialFinal",
    "graphicsCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_sprite",
    "getDefaultImage2D",
    "_pHasTime",
    "_parsedHeader",
    "_graphics",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstElements",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion_1",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_elementsData",
    "translateElements",
    "positionData",
    "weightData",
    "_skeleton",
    "numElementsData",
    "elementsData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "start",
    "startWeight",
    "end",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "ElementsData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "positions",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "PositionData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "BitmapImage2D_1",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "assetType",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "obj",
    "constructObject",
    "MaterialVO",
    "readColor",
    "diffuseColor",
    "specularColor",
    "twoSided",
    "colorMap",
    "specularMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "vertices",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "scaleBy",
    "applyTransformation",
    "concat",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "getDefaultTexture",
    "chr",
    "g",
    "awayjs-core/lib/image/BitmapImage2D",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod_1",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_sprites",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "split",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "m",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertex",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "val",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "Loader_1",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "./AWDParser",
    "./MD2Parser",
    "./Max3DSParser",
    "./OBJParser",
    "awayjs-core/lib/library/Loader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\nvar AWDParser_1 = require(\"./lib/AWDParser\");\nexports.AWDParser = AWDParser_1.default;\nvar Max3DSParser_1 = require(\"./lib/Max3DSParser\");\nexports.Max3DSParser = Max3DSParser_1.default;\nvar MD2Parser_1 = require(\"./lib/MD2Parser\");\nexports.MD2Parser = MD2Parser_1.default;\nvar MD5AnimParser_1 = require(\"./lib/MD5AnimParser\");\nexports.MD5AnimParser = MD5AnimParser_1.default;\nvar MD5MeshParser_1 = require(\"./lib/MD5MeshParser\");\nexports.MD5MeshParser = MD5MeshParser_1.default;\nvar OBJParser_1 = require(\"./lib/OBJParser\");\nexports.OBJParser = OBJParser_1.default;\nvar Parsers_1 = require(\"./lib/Parsers\");\nexports.Parsers = Parsers_1.default;\n\n},{\"./lib/AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"./lib/MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"./lib/MD5AnimParser\":\"awayjs-parsers/lib/MD5AnimParser\",\"./lib/MD5MeshParser\":\"awayjs-parsers/lib/MD5MeshParser\",\"./lib/Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"./lib/OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"./lib/Parsers\":\"awayjs-parsers/lib/Parsers\"}],\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\":[function(require,module,exports){\n\"use strict\";\nvar AWD3Utils = (function () {\n    function AWD3Utils() {\n    }\n    AWD3Utils.BLOCKSTATE_FINALIZE = 0;\n    AWD3Utils.BLOCKSTATE_INVALID = 1;\n    AWD3Utils.BLOCKSTATE_LOAD_DEPENDENICES = 2;\n    AWD3Utils.BLOCKSTATE_NO_ASSET = 3;\n    AWD3Utils.COMPRESSIONMODE_LZMA = \"lzma\";\n    AWD3Utils.UNCOMPRESSED = 0;\n    AWD3Utils.DEFLATE = 1;\n    AWD3Utils.LZMA = 2;\n    AWD3Utils.INT8 = 1;\n    AWD3Utils.INT16 = 2;\n    AWD3Utils.INT32 = 3;\n    AWD3Utils.UINT8 = 4;\n    AWD3Utils.UINT16 = 5;\n    AWD3Utils.UINT32 = 6;\n    AWD3Utils.FLOAT32 = 7;\n    AWD3Utils.FLOAT64 = 8;\n    AWD3Utils.BOOL = 21;\n    AWD3Utils.COLOR = 22;\n    AWD3Utils.BADDR = 23;\n    AWD3Utils.AWDSTRING = 31;\n    AWD3Utils.AWDBYTEARRAY = 32;\n    AWD3Utils.VECTOR2x1 = 41;\n    AWD3Utils.VECTOR3x1 = 42;\n    AWD3Utils.VECTOR4x1 = 43;\n    AWD3Utils.MTX3x2 = 44;\n    AWD3Utils.MTX3x3 = 45;\n    AWD3Utils.MTX4x3 = 46;\n    AWD3Utils.MTX4x4 = 47;\n    return AWD3Utils;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = AWD3Utils;\n\n},{}],\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\":[function(require,module,exports){\n\"use strict\";\nvar AWD3Utils_1 = require(\"../AWD3ParserUtils/AWD3Utils\");\nvar AWDBlock = (function () {\n    function AWDBlock(this_id, this_type) {\n        this.type = this_type;\n        this.id = this_id;\n        this.state = AWD3Utils_1.default.BLOCKSTATE_FINALIZE;\n        this.dependencies_data = Array();\n        this.dependencies_urls = Array();\n        if (this_type == 83) {\n            this.loaded_dependencies = Array(6);\n        }\n        this.loaded_dependencies_cnt = 0;\n    }\n    AWDBlock.prototype.dispose = function () {\n        this.id = null;\n        this.bytes = null;\n        this.errorMessages = null;\n        this.uvsForVertexAnimation = null;\n    };\n    AWDBlock.prototype.addError = function (errorMsg) {\n        if (!this.errorMessages)\n            this.errorMessages = new Array();\n        this.errorMessages.push(errorMsg);\n    };\n    return AWDBlock;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = AWDBlock;\n\n},{\"../AWD3ParserUtils/AWD3Utils\":\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\"}],\"awayjs-parsers/lib/AWDParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Float3Attributes_1 = require(\"awayjs-core/lib/attributes/Float3Attributes\");\nvar Float2Attributes_1 = require(\"awayjs-core/lib/attributes/Float2Attributes\");\nvar Byte4Attributes_1 = require(\"awayjs-core/lib/attributes/Byte4Attributes\");\nvar BitmapImageCube_1 = require(\"awayjs-core/lib/image/BitmapImageCube\");\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar PerspectiveProjection_1 = require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nvar OrthographicProjection_1 = require(\"awayjs-core/lib/projections/OrthographicProjection\");\nvar OrthographicOffCenterProjection_1 = require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nvar ByteArray_1 = require(\"awayjs-core/lib/utils/ByteArray\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DirectionalLight_1 = require(\"awayjs-display/lib/display/DirectionalLight\");\nvar PointLight_1 = require(\"awayjs-display/lib/display/PointLight\");\nvar Camera_1 = require(\"awayjs-display/lib/display/Camera\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar Billboard_1 = require(\"awayjs-display/lib/display/Billboard\");\nvar Skybox_1 = require(\"awayjs-display/lib/display/Skybox\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar StaticLightPicker_1 = require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nvar CubeMapShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nvar DirectionalShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nvar PrefabBase_1 = require(\"awayjs-display/lib/prefabs/PrefabBase\");\nvar PrimitiveCapsulePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nvar PrimitiveConePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nvar PrimitiveCubePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nvar PrimitiveCylinderPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nvar PrimitivePlanePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nvar PrimitiveSpherePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nvar PrimitiveTorusPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\nvar SingleCubeTexture_1 = require(\"awayjs-display/lib/textures/SingleCubeTexture\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nvar VertexAnimator_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nvar SkeletonAnimator_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar AmbientEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nvar DiffuseDepthMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nvar DiffuseCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nvar DiffuseGradientMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nvar DiffuseLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nvar DiffuseWrapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nvar EffectAlphaMaskMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nvar EffectColorMatrixMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nvar EffectColorTransformMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nvar EffectEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nvar EffectFogMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nvar EffectFresnelEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nvar EffectLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nvar EffectRimLightMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nvar NormalSimpleWaterMethod_1 = require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nvar ShadowDitheredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nvar ShadowFilteredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nvar SpecularFresnelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nvar ShadowHardMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nvar SpecularAnisotropicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nvar SpecularCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nvar SpecularPhongMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nvar ShadowNearMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nvar ShadowSoftMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\nvar BasicMaterial_1 = require(\"awayjs-display/lib/materials/BasicMaterial\");\nvar AS2SceneGraphFactory_1 = require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\nvar Timeline_1 = require(\"awayjs-display/lib/base/Timeline\");\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\nvar TextFormat_1 = require(\"awayjs-display/lib/text/TextFormat\");\nvar AWDBlock_1 = require(\"./AWD3ParserUtils/AWDBlock\");\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\nvar Style_1 = require(\"awayjs-display/lib/base/Style\");\nvar Matrix_1 = require(\"awayjs-core/lib/geom/Matrix\");\nvar MappingMode_1 = require(\"awayjs-display/lib/textures/MappingMode\");\nvar ElementsType_1 = require(\"awayjs-display/lib/graphics/ElementsType\");\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nvar AWDParser = (function (_super) {\n    __extends(AWDParser, _super);\n    /**\n     * Creates a new AWD3Parserutils object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function AWDParser(view) {\n        if (view === void 0) { view = null; }\n        _super.call(this, URLLoaderDataFormat_1.default.ARRAY_BUFFER);\n        //set to \"true\" to have some console.logs in the Console\n        this._debug = false;\n        this._debugTimers = true;\n        this._startedParsing = false;\n        this._texture_users = {};\n        this._parsed_header = false;\n        this._time_all = 0;\n        this._time_graphics = 0;\n        this._time_graphics_bytes = 0;\n        this._time_timeline = 0;\n        this._time_fonts = 0;\n        this._time_textfields = 0;\n        this._time_sounds = 0;\n        this._time_textures = 0;\n        this._time_materials = 0;\n        this._time_sprites = 0;\n        this._num_graphics = 0;\n        this._num_timeline = 0;\n        this._num_fonts = 0;\n        this._num_textfields = 0;\n        this._num_sounds = 0;\n        this._num_textures = 0;\n        this._num_materials = 0;\n        this._num_sprites = 0;\n        //--Parser UTILS---------------------------------------------------------------------------\n        this.shadowMethodListProperties = {\n            1: AWDParser.BADDR,\n            2: AWDParser.BADDR,\n            3: AWDParser.BADDR,\n            101: AWDParser.PROPERTY_NUMBER,\n            102: AWDParser.PROPERTY_NUMBER,\n            103: AWDParser.PROPERTY_NUMBER,\n            201: AWDParser.UINT32,\n            202: AWDParser.UINT32,\n            301: AWDParser.UINT16,\n            302: AWDParser.UINT16,\n            401: AWDParser.UINT8,\n            402: AWDParser.UINT8,\n            601: AWDParser.COLOR,\n            602: AWDParser.COLOR,\n            701: AWDParser.BOOL,\n            702: AWDParser.BOOL,\n            801: AWDParser.MTX4x4 };\n        this.spritePoseAnimationProperties = {\n            1: AWDParser.BOOL,\n            2: AWDParser.BOOL };\n        this.sharedMethodListProperties = {\n            1: AWDParser.BADDR,\n            2: AWDParser.BADDR,\n            3: AWDParser.BADDR,\n            101: AWDParser.PROPERTY_NUMBER,\n            102: AWDParser.PROPERTY_NUMBER,\n            103: AWDParser.PROPERTY_NUMBER,\n            104: AWDParser.PROPERTY_NUMBER,\n            105: AWDParser.PROPERTY_NUMBER,\n            106: AWDParser.PROPERTY_NUMBER,\n            107: AWDParser.PROPERTY_NUMBER,\n            201: AWDParser.UINT32,\n            202: AWDParser.UINT32,\n            301: AWDParser.UINT16,\n            302: AWDParser.UINT16,\n            401: AWDParser.UINT8,\n            402: AWDParser.UINT8,\n            601: AWDParser.COLOR,\n            602: AWDParser.COLOR,\n            701: AWDParser.BOOL,\n            702: AWDParser.BOOL };\n        this._view = view;\n        this._blocks = new Array();\n        this._blocks[0] = new AWDBlock_1.default(0, 255);\n        this._blocks[0].data = null; // Zero address means null in AWD\n        this.blendModeDic = new Array(); // used to translate ints to blendMode-strings\n        this.blendModeDic.push(BlendMode_1.default.NORMAL);\n        this.blendModeDic.push(BlendMode_1.default.ADD);\n        this.blendModeDic.push(BlendMode_1.default.ALPHA);\n        this.blendModeDic.push(BlendMode_1.default.DARKEN);\n        this.blendModeDic.push(BlendMode_1.default.DIFFERENCE);\n        this.blendModeDic.push(BlendMode_1.default.ERASE);\n        this.blendModeDic.push(BlendMode_1.default.HARDLIGHT);\n        this.blendModeDic.push(BlendMode_1.default.INVERT);\n        this.blendModeDic.push(BlendMode_1.default.LAYER);\n        this.blendModeDic.push(BlendMode_1.default.LIGHTEN);\n        this.blendModeDic.push(BlendMode_1.default.MULTIPLY);\n        this.blendModeDic.push(BlendMode_1.default.NORMAL);\n        this.blendModeDic.push(BlendMode_1.default.OVERLAY);\n        this.blendModeDic.push(BlendMode_1.default.SCREEN);\n        this.blendModeDic.push(BlendMode_1.default.SHADER);\n        this.blendModeDic.push(BlendMode_1.default.OVERLAY);\n        this._depthSizeDic = new Array(); // used to translate ints to depthSize-values\n        this._depthSizeDic.push(256);\n        this._depthSizeDic.push(512);\n        this._depthSizeDic.push(2048);\n        this._depthSizeDic.push(1024);\n        this._version = Array(); // will contain 2 int (major-version, minor-version) for awd-version-check\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    AWDParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"awd\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    AWDParser.supportsData = function (data) {\n        return (ParserUtils_1.default.toString(data, 3) == 'AWD');\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._iResolveDependency = function (resourceDependency) {\n        // this will be called when Dependency has finished loading.\n        // the ressource dependecniy has a id that point to the awd_block waiting for it.\n        //console.log(\"AWDParser resolve dependencies\";\n        if (resourceDependency.assets.length == 1) {\n            var this_block = this._blocks[parseInt(resourceDependency.id)];\n            if (this_block.type == 82) {\n                var image_asset = resourceDependency.assets[0];\n                this_block.data = image_asset; // Store finished asset\n                // Finalize texture asset to dispatch texture event, which was\n                // previously suppressed while the dependency was loaded.\n                this._pFinalizeAsset(image_asset, this_block.name);\n                if (this._debug)\n                    console.log(\"Parsed Texture: Name = \" + this_block.name);\n            }\n            else if (this_block.type == 44) {\n                var audio_asset = resourceDependency.assets[0];\n                this_block.data = audio_asset; // Store finished asset\n                // Finalize texture asset to dispatch texture event, which was\n                // previously suppressed while the dependency was loaded.\n                //console.log(\"Parsing audio \" + this_block.name);\n                this._pFinalizeAsset(audio_asset, this_block.name);\n                if (this._debug)\n                    console.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n            }\n            else if (this_block.type == 83) {\n                this_block.loaded_dependencies[resourceDependency.sub_id] = resourceDependency.assets[0];\n                this_block.loaded_dependencies_cnt++;\n                if (this._debug)\n                    console.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n                if (this_block.loaded_dependencies_cnt == 6) {\n                    var cube_image_asset = new BitmapImageCube_1.default(this_block.loaded_dependencies[0].width);\n                    for (var i = 0; i < 6; i++)\n                        cube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n                    this_block.data = cube_image_asset; // Store finished asset\n                    this._pFinalizeAsset(cube_image_asset, this_block.name);\n                    if (this._debug)\n                        console.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n                }\n            }\n            if (this._debugTimers && !this._isParsing)\n                this.updateTimers(this_block.type);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        //not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n        // this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n    };\n    /**\n     * Resolve a dependency name\n     *\n     * @param resourceDependency The dependency to be resolved.\n     */\n    AWDParser.prototype._iResolveDependencyName = function (resourceDependency, asset) {\n        var oldName = asset.name;\n        if (asset) {\n            var block = this._blocks[parseInt(resourceDependency.id)];\n            // Reset name of texture to the one defined in the AWD file,\n            // as opposed to whatever the image parser came up with.\n            asset.resetAssetPath(block.name, null, true);\n        }\n        var newName = asset.name;\n        asset.name = oldName;\n        return newName;\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._pProceedParsing = function () {\n        if (!this._startedParsing) {\n            this._byteData = this._pGetByteData(); //getByteData();\n            this._startedParsing = true;\n        }\n        if (!this._parsed_header) {\n            //----------------------------------------------------------------------------\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n            //----------------------------------------------------------------------------\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;\n            //----------------------------------------------------------------------------\n            //----------------------------------------------------------------------------\n            // Parse header and decompress body if needed\n            this.parseHeader();\n            switch (this._compression) {\n                case AWDParser.DEFLATE:\n                case AWDParser.LZMA:\n                    this._pDieWithError('Compressed AWD formats not yet supported');\n                    break;\n                case AWDParser.UNCOMPRESSED:\n                    this._body = this._byteData;\n                    break;\n            }\n            this._parsed_header = true;\n        }\n        if (this._body) {\n            while (this._body.getBytesAvailable() > 0 && !this.parsingPaused)\n                this.parseNextBlock();\n            //----------------------------------------------------------------------------\n            // Return complete status\n            if (this._body.getBytesAvailable() == 0) {\n                this.dispose();\n                if (this._debugTimers)\n                    console.log(\"Parsing total: \" + (this._time_all | 0) + \"ms\", \" | graphics: \" + this._num_graphics + \", \" + (this._time_graphics | 0) + \"ms\", \" | graphics bytes: \" + this._num_graphics + \", \" + (this._time_graphics_bytes | 0) + \"ms\", \" | timelines: \" + this._num_timeline + \", \" + (this._time_timeline | 0) + \"ms\", \" | fonts: \" + this._num_fonts + \", \" + (this._time_fonts | 0) + \"ms\", \" | sounds: \" + this._num_sounds + \", \" + (this._time_sounds | 0) + \"ms\", \" | mats: \" + this._num_materials + \", \" + (this._time_materials | 0) + \"ms\", \" | textures: \" + this._num_textures + \", \" + (this._time_textures | 0) + \"ms\", \" | sprites: \" + this._num_sprites + \", \" + (this._time_sprites | 0) + \"ms\");\n                return ParserBase_1.default.PARSING_DONE;\n            }\n            else {\n                return ParserBase_1.default.MORE_TO_PARSE;\n            }\n        }\n        else {\n            switch (this._compression) {\n                case AWDParser.DEFLATE:\n                case AWDParser.LZMA:\n                    if (this._debug)\n                        console.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n                    break;\n            }\n            // Error - most likely _body not set because we do not support compression.\n            return ParserBase_1.default.PARSING_DONE;\n        }\n    };\n    AWDParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    AWDParser.prototype.dispose = function () {\n        for (var c in this._blocks) {\n            var b = this._blocks[c];\n            b.dispose();\n        }\n    };\n    AWDParser.prototype.parseNextBlock = function () {\n        var block;\n        var isParsed = false;\n        var ns;\n        var type;\n        var flags;\n        var len;\n        //*\n        if (this._debugTimers)\n            this.start_timeing = performance.now();\n        //*/\n        this._cur_block_id = this._body.readUnsignedInt();\n        ns = this._body.readUnsignedByte();\n        type = this._body.readUnsignedByte();\n        flags = this._body.readUnsignedByte();\n        len = this._body.readUnsignedInt();\n        var blockCompression = BitFlags.test(flags, BitFlags.FLAG4);\n        var blockCompressionLZMA = BitFlags.test(flags, BitFlags.FLAG5);\n        if (this._accuracyOnBlocks) {\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n        }\n        var blockEndAll = this._body.position + len;\n        if (len > this._body.getBytesAvailable()) {\n            this._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n            this._body.position += this._body.getBytesAvailable();\n            return;\n        }\n        //----------------------------------------------------------------------------\n        // Compressed AWD Formats not yet supported\n        if (blockCompression) {\n            this._pDieWithError('Compressed AWD formats not yet supported');\n            this._newBlockBytes = new ByteArray_1.default();\n            this._body.readBytes(this._newBlockBytes, 0, len);\n            this._newBlockBytes.position = 0;\n        }\n        else {\n            this._newBlockBytes = this._body;\n        }\n        //----------------------------------------------------------------------------\n        // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n        //----------------------------------------------------------------------------\n        //this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n        //----------------------------------------------------------------------------\n        block = new AWDBlock_1.default(this._cur_block_id, type);\n        block.len = len;\n        var blockEndBlock = this._newBlockBytes.position + len;\n        if (blockCompression) {\n            this._pDieWithError('Compressed AWD formats not yet supported');\n        }\n        if (this._debug)\n            console.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n        this._blocks[this._cur_block_id] = block;\n        if ((this._version[0] == 3) && (this._version[1] == 0)) {\n            // probably should contain some info about the type of animation\n            var factory = new AS2SceneGraphFactory_1.default(this._view);\n            switch (type) {\n                case 24:\n                    this.parseSpriteLibraryBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 25:\n                    this.parseBillBoardLibraryBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 4444:\n                    this.parseAudioBlock(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 133:\n                    this.parseMovieClip(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 134:\n                    this.parseTextField(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 135:\n                    this.parseTesselatedFont(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 136:\n                    this.parseTextFormat(this._cur_block_id);\n                    isParsed = true;\n                    break;\n            }\n        }\n        if ((this._version[0] > 2) || ((this._version[0] >= 2) && (this._version[1] >= 1))) {\n            switch (type) {\n                case 11:\n                    this.parsePrimitves(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 31:\n                    this.parseSkyboxInstance(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 41:\n                    this.parseLight(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 42:\n                    this.parseCamera(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                //  case 43:\n                //      parseTextureProjector(_cur_block_id);\n                //      isParsed = true;\n                //      break;\n                case 51:\n                    this.parseLightPicker(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 81:\n                    this.parseMaterial_v1(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 83:\n                    this.parseCubeTexture(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 91:\n                    this.parseSharedMethodBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 92:\n                    this.parseShadowMethodBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 111:\n                    this.parseSpritePoseAnimation(this._cur_block_id, true);\n                    isParsed = true;\n                    break;\n                case 112:\n                    this.parseSpritePoseAnimation(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 113:\n                    this.parseVertexAnimationSet(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 122:\n                    this.parseAnimatorSet(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 253:\n                    this.parseCommand(this._cur_block_id);\n                    isParsed = true;\n                    break;\n            }\n        }\n        if (isParsed == false) {\n            switch (type) {\n                case 1:\n                    this.parseGraphics(this._cur_block_id);\n                    break;\n                case 22:\n                    this.parseContainer(this._cur_block_id);\n                    break;\n                case 23:\n                    this.parseSpriteInstance(this._cur_block_id);\n                    break;\n                case 81:\n                    this.parseMaterial(this._cur_block_id);\n                    break;\n                case 82:\n                    this.parseTexture(this._cur_block_id);\n                    break;\n                case 101:\n                    this.parseSkeleton(this._cur_block_id);\n                    break;\n                case 102:\n                    this.parseSkeletonPose(this._cur_block_id);\n                    break;\n                case 103:\n                    this.parseSkeletonAnimation(this._cur_block_id);\n                    break;\n                case 121:\n                //this.parseUVAnimation(this._cur_block_id);\n                //break;\n                case 254:\n                    this.parseNameSpace(this._cur_block_id);\n                    break;\n                case 255:\n                    this.parseMetaData(this._cur_block_id);\n                    break;\n                default:\n                    if (this._debug)\n                        console.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n                    this._newBlockBytes.position += len;\n                    break;\n            }\n        }\n        if (this._debug) {\n            if (this._newBlockBytes.position != blockEndBlock)\n                console.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n            if (block.errorMessages) {\n                var len = block.errorMessages.length;\n                for (var msgCnt = 0; msgCnt < len; msgCnt++)\n                    console.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n            }\n            console.log(\"\\n\");\n        }\n        if (this._debugTimers && !this.parsingPaused)\n            this.updateTimers(type);\n        this._body.position = blockEndAll;\n        this._newBlockBytes = null;\n    };\n    AWDParser.prototype.updateTimers = function (type) {\n        var end_timing = performance.now();\n        var time_delta = end_timing - this.start_timeing;\n        this._time_all += time_delta;\n        if (type == 1) {\n            this._time_graphics += time_delta;\n            this._num_graphics++;\n        }\n        else if (type == 133) {\n            this._time_timeline += time_delta;\n            this._num_timeline++;\n        }\n        else if (type == 135) {\n            this._time_fonts += time_delta;\n            this._num_fonts++;\n        }\n        else if (type == 134) {\n            this._time_textfields += time_delta;\n            this._num_textfields++;\n        }\n        else if (type == 44) {\n            this._time_sounds += time_delta;\n            this._num_sounds++;\n        }\n        else if (type == 82) {\n            this._time_textures += time_delta;\n            this._num_textures++;\n        }\n        else if (type == 81) {\n            this._time_materials += time_delta;\n            this._num_materials++;\n        }\n        else if (type == 24) {\n            this._time_sprites += time_delta;\n            this._num_sprites++;\n        }\n    };\n    //--Parser Blocks---------------------------------------------------------------------------\n    AWDParser.prototype.parseTesselatedFont = function (blockID) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var new_font = AssetLibrary_1.default.getAsset(this._blocks[blockID].name);\n        var newfont = false;\n        if (new_font == undefined) {\n            new_font = new Font_1.default();\n            newfont = true;\n        }\n        var font_style_cnt = this._newBlockBytes.readUnsignedInt();\n        var font_style_char_cnt;\n        var font_style_name;\n        var new_font_style;\n        var font_style_char;\n        var attr_count = 0;\n        var sm_len;\n        var sm_end;\n        var str_ftype, str_type, str_len, str_end;\n        for (var i = 0; i < font_style_cnt; ++i) {\n            font_style_name = this.parseVarStr();\n            // dirty hack for icycle\n            // we use bold chars for non-latin chars, but we use regular for � sign,\n            // so the dirty hack is to merge the regular and the bold style\n            if ((this._blocks[blockID].name == \"Tahoma\") && (font_style_name == \"RegularStyle\")) {\n                font_style_name = \"BoldStyle\";\n            }\n            new_font_style = new_font.get_font_table(font_style_name);\n            new_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n            new_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n            new_font_style.ascent = this._newBlockBytes.readFloat();\n            new_font_style.descent = this._newBlockBytes.readFloat();\n            //console.log(new_font_style.get_whitespace_width());\n            font_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n            for (var j = 0; j < font_style_char_cnt; ++j) {\n                // todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n                font_style_char = this._newBlockBytes.readUnsignedInt();\n                var char_width = this._newBlockBytes.readFloat();\n                sm_len = this._newBlockBytes.readUnsignedInt();\n                sm_end = this._newBlockBytes.position + sm_len;\n                // Loop through data streams\n                while (this._newBlockBytes.position < sm_end) {\n                    // Type, field type, length\n                    str_type = this._newBlockBytes.readUnsignedByte();\n                    str_ftype = this._newBlockBytes.readUnsignedByte();\n                    str_len = this._newBlockBytes.readUnsignedInt();\n                    str_end = this._newBlockBytes.position + str_len;\n                    if (str_type == 2) {\n                        var indices = new Array();\n                        for (var idx = 0; this._newBlockBytes.position < str_end; idx++)\n                            indices[idx] = this._newBlockBytes.readUnsignedShort();\n                    }\n                    else if (str_type == 11) {\n                        attr_count = 20;\n                        var curveData = new ByteArray_1.default(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else if (str_type == 12) {\n                        attr_count = 12;\n                        var curveData = new ByteArray_1.default(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else if (str_type == 10) {\n                        attr_count = 28;\n                        var curveData = new ByteArray_1.default(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else {\n                        this._newBlockBytes.position = str_end;\n                    }\n                }\n                if (curveData) {\n                    var vertexBuffer = new AttributesBuffer_1.default(attr_count, str_len / attr_count);\n                    vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\n                    var curve_elements = new TriangleElements_1.default(vertexBuffer);\n                    curve_elements.setPositions(new Float2Attributes_1.default(vertexBuffer));\n                    if (attr_count == 20)\n                        curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.default(vertexBuffer));\n                    else if (attr_count == 12)\n                        curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.default(vertexBuffer, false));\n                    //add UVs if they exist in the data\n                    if (attr_count == 28)\n                        curve_elements.setUVs(new Float2Attributes_1.default(vertexBuffer));\n                    new_font_style.setChar(font_style_char.toString(), curve_elements, char_width);\n                }\n            }\n        }\n        this.parseProperties(null);\n        this.parseUserAttributes();\n        if (newfont) {\n            this._pFinalizeAsset(new_font, name);\n        }\n        this._blocks[blockID].data = new_font;\n        if (this._debug)\n            console.log(\"Parsed a font: Name = '\" + name);\n    };\n    AWDParser.prototype.parseTextFormat = function (blockID) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var font = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var font_style_name = this.parseVarStr();\n        var newTextFormat = new TextFormat_1.default();\n        newTextFormat.font_name = font.name;\n        var font_table = font.get_font_table(font_style_name);\n        if (font_table != null) {\n            newTextFormat.font_style = font_style_name;\n            newTextFormat.font_table = font_table;\n        }\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mat.bothSides = true;\n        mat.curves = true;\n        var num_uv_values = this._newBlockBytes.readUnsignedByte();\n        var uv_values = [];\n        for (var uvcnt = 0; uvcnt < num_uv_values; uvcnt++)\n            uv_values[uvcnt] = this._newBlockBytes.readFloat();\n        newTextFormat.uv_values = uv_values;\n        var format_props = this.parseProperties(AWDParser.textFormatProperties);\n        newTextFormat.size = format_props.get(1, 12);\n        newTextFormat.letterSpacing = format_props.get(2, 0);\n        //newTextFormat.rotated = format_props.get(3,false);\n        newTextFormat.kerning = format_props.get(4, true);\n        //newTextFormat.baseline_shift = format_props.get(5,1);\n        var tf_align_int = format_props.get(6, 0);\n        if (tf_align_int == 1) {\n            newTextFormat.align = \"right\";\n        }\n        else if (tf_align_int == 2) {\n            newTextFormat.align = \"center\";\n        }\n        newTextFormat.indent = format_props.get(7, 0);\n        newTextFormat.leftMargin = format_props.get(8, 0);\n        newTextFormat.rightMargin = format_props.get(9, 0);\n        newTextFormat.leading = format_props.get(10, 0);\n        newTextFormat.material = mat;\n        this.parseUserAttributes(); // textformat has no extra-properties\n        //newTextFormat.extra =\n        this._pFinalizeAsset(newTextFormat, name);\n        this._blocks[blockID].data = newTextFormat;\n        if (this._debug)\n            console.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \" + font.name);\n    };\n    AWDParser.prototype.parseTextField = function (blockID, factory) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n        var text_field_type = this._newBlockBytes.readUnsignedByte();\n        newTextField.type = AWDParser.textFieldTypes[text_field_type];\n        if (text_field_type == 3)\n            newTextField.displayAsPassword = true;\n        //\n        newTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n        newTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n        var num_paragraphs = this._newBlockBytes.readUnsignedInt();\n        var complete_text = \"\";\n        //console.log(\"num_paragraphs  '\" + num_paragraphs);\n        for (var paracnt = 0; paracnt < num_paragraphs; paracnt++) {\n            var num_textruns = this._newBlockBytes.readUnsignedInt();\n            //console.log(\"num_textruns  '\" + num_textruns);\n            for (var textrun_cnt = 0; textrun_cnt < num_textruns; textrun_cnt++) {\n                var text_format = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n                var txt_length = this._newBlockBytes.readUnsignedInt();\n                //console.log(\"txt_length  '\" + txt_length);\n                if (txt_length > 0) {\n                    var this_txt = this._newBlockBytes.readUTFBytes(txt_length);\n                    //newTextField.appendText(this_txt, text_format);\n                    complete_text += this_txt;\n                }\n            }\n        }\n        newTextField.textFormat = text_format;\n        newTextField.text = complete_text;\n        //newTextField.construct_graphics();\n        // todo: optional matrix etc can be put in properties.\n        var props = this.parseProperties(AWDParser.textFieldProperties);\n        newTextField.selectable = props.get(1, false);\n        newTextField.border = props.get(3, false);\n        //newTextField.renderHTML =  props.get(4, false);\n        //newTextField.scrollable =  props.get(5, false);\n        //newTextField.text_flow =  props.get(7, 0);\n        //newTextField.orientationMode =  props.get(8, 0);\n        //newTextField.line_mode =  props.get(9, 0);\n        newTextField.extra = this.parseUserAttributes();\n        //console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n        this._pFinalizeAsset(newTextField, name);\n        this._blocks[blockID].data = newTextField;\n        if (this._debug)\n            console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n    };\n    // Block ID = 25\n    AWDParser.prototype.parseBillBoardLibraryBlock = function (blockID) {\n        var name = this.parseVarStr();\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mat.bothSides = true;\n        var billboard = new Billboard_1.default(mat);\n        // todo: optional matrix etc can be put in properties.\n        this.parseProperties(null);\n        billboard.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(billboard, name);\n        this._blocks[blockID].data = billboard;\n        if (this._debug)\n            console.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n    };\n    // Block ID = 24\n    AWDParser.prototype.parseSpriteLibraryBlock = function (blockID) {\n        var name = this.parseVarStr();\n        var data_id = this._newBlockBytes.readUnsignedInt();\n        var graphics = this._blocks[data_id].data;\n        this._blocks[blockID].geoID = data_id;\n        var num_materials = this._newBlockBytes.readUnsignedShort();\n        var materials = new Array();\n        var materialNames = new Array();\n        var mat;\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.default.getDefaultMaterial());\n            //mat.preserveAlpha = true;\n            mat.alphaBlending = true;\n            mat.useColorTransform = true;\n            materials[materials_parsed] = mat;\n            materialNames[materials_parsed] = mat.name;\n        }\n        var start_timeing = performance.now();\n        var sprite = new Sprite_1.default();\n        graphics.copyTo(sprite.graphics);\n        var end_timing = performance.now();\n        var time_delta = end_timing - start_timeing;\n        this._time_graphics_bytes += time_delta;\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\n            sprite.material = materials[0];\n        }\n        else if (materials.length > 1) {\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n            // than materials, repeat the last material for all remaining sub-sprites.\n            for (var i = 0; i < sprite.graphics.count; i++)\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n        }\n        var count = this._newBlockBytes.readUnsignedShort();\n        //if(count != sprite.graphics.count)\n        //\tthrow new Error(\"num elements does not match num subsprites\";\n        for (var i = 0; i < count; i++) {\n            var type = this._newBlockBytes.readUnsignedByte();\n            var sampler = new Sampler2D_1.default();\n            var graphic = sprite.graphics.getGraphicAt(i);\n            if (graphic) {\n                graphic.style = new Style_1.default();\n                graphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n            }\n            if (type == 3) {\n                var tx = this._newBlockBytes.readFloat();\n                var ty = this._newBlockBytes.readFloat();\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.default(0, 0, 0, 0, tx, ty);\n                }\n            }\n            else if (type == 4) {\n                var matrix = this.parseMatrix32RawData();\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.default(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n                }\n            }\n            else if (type == 5) {\n                var newMatrix = new Matrix_1.default(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = newMatrix;\n                }\n            }\n            else if (type == 6) {\n                var x = this._newBlockBytes.readFloat();\n                var y = this._newBlockBytes.readFloat();\n                var width = this._newBlockBytes.readFloat();\n                var height = this._newBlockBytes.readFloat();\n                var matrix = this.parseMatrix32RawData();\n                if (graphic) {\n                    sampler.imageRect = new Rectangle_1.default(x, y, width, height);\n                    graphic.material.imageRect = true;\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.default(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n                }\n            }\n            if (graphic) {\n                //check if curves are needed\n                if (graphic.elements.getCustomAtributes(\"curves\"))\n                    graphic.material.curves = true;\n            }\n            // todo: finish optional properties (spreadmode + focalpoint)\n            this._newBlockBytes.readUnsignedInt();\n        }\n        this.parseProperties(null);\n        sprite.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(sprite, name);\n        this._blocks[blockID].data = sprite;\n        if (this._debug)\n            console.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n    };\n    AWDParser.prototype.parseAudioBlock = function (blockID, factory) {\n        //var asset:Audio;todo create asset for audio\n        this._blocks[blockID].name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        var data_len;\n        // External\n        if (type == 0) {\n            data_len = this._newBlockBytes.readUnsignedInt();\n            var url;\n            url = this._newBlockBytes.readUTFBytes(data_len);\n            // todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.default(url), false, null, true);\n        }\n        else {\n            // todo: exporter does not export embed sounds yet\n            data_len = this._newBlockBytes.readUnsignedInt();\n            var data = new ByteArray_1.default(data_len);\n            this._newBlockBytes.readBytes(data, 0, data_len);\n            // todo parse sound from bytes\n            // this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        //this._blocks[blockID].data = asset;todo\n        if (this._debug)\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n    };\n    //Block ID = 4\n    AWDParser.prototype.parseMovieClip = function (blockID, factory) {\n        var i;\n        var j;\n        var cmd_asset;\n        var new_timeline = new Timeline_1.default();\n        var new_mc = factory.createMovieClip(new_timeline);\n        var name = this.parseVarStr();\n        // register list of potential childs\n        // a potential child can be reused on a timeline (added / removed / added)\n        // However, for each potential child, we need to register the max-number of instances that a frame contains\n        // we parse 2 lists of potential-childs:\n        // -\tthe first list contains potential-childs that are only ever instanced once per frame.\n        // -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n        // on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n        // hence we need to be careful to register all objects in correct order.\n        var num_potential_childs = this._newBlockBytes.readUnsignedShort();\n        for (i = 0; i < num_potential_childs; i++) {\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            if (cmd_asset != null) {\n                new_timeline.registerPotentialChild(cmd_asset);\n            }\n            else {\n                //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n                //new_mc.registerPotentialChild(cmd_asset);\n                console.log(\"ERROR when collecting objects for timeline\");\n            }\n        }\n        var num_all_display_instances = num_potential_childs;\n        var num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n        for (i = 0; i < num_potential_childs_multi_instanced; i++) {\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            var num_instances = this._newBlockBytes.readUnsignedShort();\n            num_all_display_instances += num_instances;\n            if (cmd_asset != null) {\n                for (j = 0; j < num_instances; j++)\n                    new_timeline.registerPotentialChild(cmd_asset);\n            }\n            else {\n                for (j = 0; j < num_instances; j++) {\n                    //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n                    //new_mc.registerPotentialChild(cmd_asset);\n                    console.log(\"ERROR when collecting objects for timeline\");\n                }\n            }\n        }\n        if (this._debug)\n            console.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n        // register list of potential sounds - for now we always have 0 sounds\n        var num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n        var str_cnt = this._newBlockBytes.readUnsignedByte();\n        var str_len = 0;\n        var str_data_type = 0;\n        var str_type = 0;\n        var str_counter = 0;\n        for (i = 0; i < str_cnt; i++) {\n            // the first 6 lists are not optional and always in same order\n            // hence we can get type by incremental counter instead of stored uint8\n            if (str_counter < 6)\n                str_type = str_counter;\n            else\n                str_type = this._newBlockBytes.readUnsignedByte();\n            // get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n            str_data_type = this._newBlockBytes.readUnsignedByte();\n            // size of this stream in byte\n            str_len = this._newBlockBytes.readUnsignedInt();\n            if (str_len > 0) {\n                var keyframes_start_indices_data = new ByteArray_1.default(str_len);\n                this._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n                var new_buffer;\n                //console.log(\"str_data_type = \"+str_type);\n                switch (str_data_type) {\n                    case 1:\n                        new_buffer = new Uint8Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                    case 2:\n                        new_buffer = new Uint16Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                    case 4:\n                        new_buffer = new Uint32Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                }\n                switch (str_type) {\n                    case 0:\n                        new_timeline.keyframe_durations = new_buffer;\n                        new_timeline.numKeyFrames = str_len / str_data_type;\n                        break;\n                    case 1:\n                        new_timeline.frame_command_indices = new_buffer;\n                        break;\n                    case 2:\n                        new_timeline.frame_recipe = new_buffer;\n                        break;\n                    case 3:\n                        new_timeline.command_length_stream = new_buffer;\n                        break;\n                    case 4:\n                        new_timeline.command_index_stream = new_buffer;\n                        break;\n                    case 5:\n                        new_timeline.add_child_stream = new_buffer;\n                        break;\n                    case 6:\n                        new_timeline.remove_child_stream = new_buffer;\n                        break;\n                    case 7:\n                        new_timeline.update_child_stream = new_buffer;\n                        break;\n                    case 8:\n                        new_timeline.update_child_props_indices_stream = new_buffer;\n                        break;\n                    case 9:\n                        new_timeline.update_child_props_length_stream = new_buffer;\n                        break;\n                    case 10:\n                        new_timeline.property_type_stream = new_buffer;\n                        break;\n                    case 11:\n                        new_timeline.property_index_stream = new_buffer;\n                        break;\n                    case 12:\n                        new_timeline.properties_stream_int = new_buffer;\n                        break;\n                }\n            }\n            str_counter++;\n        }\n        var lc = 0;\n        var float_array_data;\n        str_cnt = this._newBlockBytes.readUnsignedByte();\n        for (i = 0; i < str_cnt; i++) {\n            str_type = this._newBlockBytes.readUnsignedByte();\n            str_len = this._newBlockBytes.readUnsignedInt();\n            switch (str_type) {\n                case 0:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_scale_rot = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 1:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_pos = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 2:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_all = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 3:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_ct = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 4:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    //console.log(\"start reading labels \"+str_len);\n                    for (lc = 0; lc < str_len; lc++) {\n                        new_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n                    }\n                    break;\n                case 5:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    var string_props_array = [];\n                    for (lc = 0; lc < str_len; lc++) {\n                        string_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n                    }\n                    new_timeline.properties_stream_strings = string_props_array;\n                    break;\n                case 6:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    for (lc = 0; lc < str_len; lc++) {\n                        var frame_index = this._newBlockBytes.readUnsignedShort();\n                        var one_str_len = this._newBlockBytes.readUnsignedInt();\n                        //this._newBlockBytes.readUTFBytes(one_str_len);\n                        new_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n                    }\n                    break;\n            }\n        }\n        new_timeline.init();\n        var sceneID = 0;\n        var fps = 25;\n        this.parseProperties(AWDParser.movieClipProperties);\n        this.parseUserAttributes();\n        this._pFinalizeAsset(new_mc, name);\n        this._blocks[blockID].data = new_mc;\n        if (this._debug)\n            console.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\n    };\n    //Block ID = 1\n    AWDParser.prototype.parseGraphics = function (blockID) {\n        var graphics = new Graphics_1.default();\n        // Read name and sub count\n        var name = this.parseVarStr();\n        var numElements = this._newBlockBytes.readUnsignedShort();\n        // Read optional properties\n        var props = this.parseProperties(AWDParser.graphicsProperties);\n        var geoScaleU = props.get(1, 1);\n        var geoScaleV = props.get(2, 1);\n        //console.log(\"numElements \"+numElements);\n        // Loop through sub sprites\n        for (var elements_parsed = 0; elements_parsed < numElements; elements_parsed++) {\n            var is_curve_elements = false;\n            var attr_count = 0;\n            var sm_len, sm_end;\n            var w_indices;\n            var weights;\n            sm_len = this._newBlockBytes.readUnsignedInt();\n            sm_end = this._newBlockBytes.position + sm_len;\n            var elementsProps = this.parseProperties(AWDParser.elementsProperties);\n            // Loop through data streams\n            while (this._newBlockBytes.position < sm_end) {\n                var idx = 0;\n                var str_ftype, str_type, str_len, str_end;\n                // Type, field type, length\n                str_type = this._newBlockBytes.readUnsignedByte();\n                str_ftype = this._newBlockBytes.readUnsignedByte();\n                str_len = this._newBlockBytes.readUnsignedInt();\n                str_end = this._newBlockBytes.position + str_len;\n                var x, y, z;\n                if (str_type == 1) {\n                    var verts = new Array();\n                    while (this._newBlockBytes.position < str_end) {\n                        x = this.readNumber(this._accuracyGeo);\n                        y = this.readNumber(this._accuracyGeo);\n                        z = this.readNumber(this._accuracyGeo);\n                        verts[idx++] = x;\n                        verts[idx++] = y;\n                        verts[idx++] = z;\n                    }\n                }\n                else if (str_type == 2) {\n                    var indices = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        indices[idx++] = this._newBlockBytes.readUnsignedShort();\n                }\n                else if (str_type == 3) {\n                    var uvs = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        uvs[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 4) {\n                    var normals = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        normals[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 6) {\n                    w_indices = Array();\n                    while (this._newBlockBytes.position < str_end)\n                        w_indices[idx++] = this._newBlockBytes.readUnsignedShort() * 3;\n                }\n                else if (str_type == 7) {\n                    weights = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        weights[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 8) {\n                    this._newBlockBytes.position = str_end;\n                }\n                else if (str_type == 9) {\n                    this._newBlockBytes.position = str_end;\n                }\n                else if (str_type == 10) {\n                    is_curve_elements = true;\n                    attr_count = 28;\n                    var curveData = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 11) {\n                    is_curve_elements = true;\n                    attr_count = 20;\n                    var curveData = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 12) {\n                    is_curve_elements = true;\n                    attr_count = 12;\n                    var curveData = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else {\n                    this._newBlockBytes.position = str_end;\n                }\n            }\n            this.parseUserAttributes(); // Ignore sub-sprite attributes for now\n            if (is_curve_elements) {\n                var vertexBuffer = new AttributesBuffer_1.default(attr_count, str_len / attr_count);\n                vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\n                var curve_elements = new TriangleElements_1.default(vertexBuffer);\n                curve_elements.setPositions(new Float2Attributes_1.default(vertexBuffer));\n                if (attr_count == 20) {\n                    curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.default(vertexBuffer));\n                }\n                else if (attr_count == 12) {\n                    curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.default(vertexBuffer, false));\n                }\n                if (attr_count == 28)\n                    curve_elements.setUVs(new Float2Attributes_1.default(vertexBuffer));\n                graphics.addGraphic(curve_elements);\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements with curves\");\n            }\n            else {\n                var triangle_elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n                if (weights)\n                    triangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n                if (normals)\n                    triangle_elements.autoDeriveNormals = false;\n                triangle_elements.autoDeriveTangents = true;\n                triangle_elements.setIndices(indices);\n                triangle_elements.setPositions(verts);\n                triangle_elements.setNormals(normals);\n                triangle_elements.setUVs(uvs);\n                triangle_elements.setJointWeights(weights);\n                triangle_elements.setJointIndices(w_indices);\n                var scaleU = elementsProps.get(1, 1);\n                var scaleV = elementsProps.get(2, 1);\n                var setSubUVs = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n                if ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n                    setSubUVs = true;\n                    scaleU = geoScaleU / scaleU;\n                    scaleV = geoScaleV / scaleV;\n                }\n                if (setSubUVs)\n                    triangle_elements.scaleUV(scaleU, scaleV);\n                graphics.addGraphic(triangle_elements);\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements\");\n            }\n        }\n        if ((geoScaleU != 1) || (geoScaleV != 1))\n            graphics.scaleUV(geoScaleU, geoScaleV);\n        this.parseUserAttributes();\n        this._pFinalizeAsset(graphics, name);\n        this._blocks[blockID].data = graphics;\n        if (this._debug)\n            console.log(\"Parsed Graphics: Name = \" + name);\n    };\n    //Block ID = 11\n    AWDParser.prototype.parsePrimitves = function (blockID) {\n        var name;\n        var prefab;\n        var primType;\n        var elements_parsed;\n        var props;\n        var bsm;\n        // Read name and sub count\n        name = this.parseVarStr();\n        primType = this._newBlockBytes.readUnsignedByte();\n        props = this.parseProperties(AWDParser.primitiveProperties);\n        // to do, not all properties are set on all primitives\n        switch (primType) {\n            case 1:\n                prefab = new PrimitivePlanePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n                break;\n            case 2:\n                prefab = new PrimitiveCubePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n                break;\n            case 3:\n                prefab = new PrimitiveSpherePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n                break;\n            case 4:\n                prefab = new PrimitiveCylinderPrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n                if (!props.get(701, true))\n                    prefab.topClosed = false;\n                if (!props.get(702, true))\n                    prefab.bottomClosed = false;\n                if (!props.get(703, true))\n                    prefab.yUp = false;\n                break;\n            case 5:\n                prefab = new PrimitiveConePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n                break;\n            case 6:\n                prefab = new PrimitiveCapsulePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n                break;\n            case 7:\n                prefab = new PrimitiveTorusPrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n                break;\n            default:\n                prefab = new PrefabBase_1.default();\n                console.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n                break;\n        }\n        if ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n        }\n        this.parseUserAttributes();\n        prefab.name = name;\n        this._pFinalizeAsset(prefab, name);\n        this._blocks[blockID].data = prefab;\n        if (this._debug) {\n            if ((primType < 0) || (primType > 7))\n                primType = 0;\n            console.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n        }\n    };\n    // Block ID = 22\n    AWDParser.prototype.parseContainer = function (blockID) {\n        var name;\n        var mtx;\n        var ctr;\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mtx = this.parseMatrix3D();\n        name = this.parseVarStr();\n        var parentName = \"Root (TopLevel)\";\n        ctr = new DisplayObjectContainer_1.default();\n        ctr.transform.matrix3D = mtx;\n        if (parent) {\n            parent.addChild(ctr);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(ctr);\n        }\n        // in AWD version 2.1 we read the Container properties\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            var props = this.parseProperties(AWDParser.containerProperties);\n            ctr.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n        }\n        else {\n            this.parseProperties(null);\n        }\n        // the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n        ctr.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(ctr, name);\n        this._blocks[blockID].data = ctr;\n        if (this._debug)\n            console.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n    };\n    // Block ID = 23\n    AWDParser.prototype.parseSpriteInstance = function (blockID) {\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var data_id = this._newBlockBytes.readUnsignedInt();\n        var asset = this._blocks[data_id].data;\n        var graphics;\n        var prefab;\n        var isPrefab = false;\n        if (asset.isAsset(Graphics_1.default)) {\n            graphics = asset;\n        }\n        else {\n            isPrefab = true;\n            prefab = asset;\n        }\n        this._blocks[blockID].geoID = data_id;\n        var num_materials = this._newBlockBytes.readUnsignedShort();\n        var materials = new Array();\n        var materialNames = new Array();\n        var mat;\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.default.getDefaultMaterial());\n            materials[materials_parsed] = mat;\n            materialNames[materials_parsed] = mat.name;\n        }\n        var sprite;\n        if (isPrefab) {\n            sprite = prefab.getNewObject();\n        }\n        else {\n            sprite = new Sprite_1.default();\n            graphics.copyTo(sprite.graphics);\n        }\n        sprite.transform.matrix3D = mtx;\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(sprite);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(sprite);\n        }\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\n            sprite.material = materials[0];\n        }\n        else if (materials.length > 1) {\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n            // than materials, repeat the last material for all remaining sub-sprites.\n            for (var i = 0; i < sprite.graphics.count; i++)\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n        }\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            var props = this.parseProperties(AWDParser.spriteInstanceProperties);\n            sprite.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n            sprite.castsShadows = props.get(5, true);\n        }\n        else {\n            this.parseProperties(null);\n        }\n        sprite.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(sprite, name);\n        this._blocks[blockID].data = sprite;\n        if (this._debug) {\n            if (isPrefab)\n                console.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n            else\n                console.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n        }\n    };\n    //Block ID 31\n    AWDParser.prototype.parseSkyboxInstance = function (blockID) {\n        var name = this.parseVarStr();\n        var asset = new Skybox_1.default();\n        var tex = new SingleCubeTexture_1.default(this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.default.getDefaultImageCube());\n        asset.texture = tex;\n        this.parseProperties(null);\n        asset.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(asset, name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n    };\n    //Block ID = 41\n    AWDParser.prototype.parseLight = function (blockID) {\n        var light;\n        var newShadowMapper;\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var lightType = this._newBlockBytes.readUnsignedByte();\n        var props = this.parseProperties(AWDParser.lightProperties);\n        var shadowMapperType = props.get(9, 0);\n        var lightTypes = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n        var shadowMapperTypes = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n        if (lightType == 1) {\n            light = new PointLight_1.default();\n            light.radius = props.get(1, 90000);\n            light.fallOff = props.get(2, 100000);\n            if (shadowMapperType > 0) {\n                if (shadowMapperType == 4) {\n                    newShadowMapper = new CubeMapShadowMapper_1.default();\n                }\n            }\n            light.transform.matrix3D = mtx;\n        }\n        if (lightType == 2) {\n            light = new DirectionalLight_1.default(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n            if (shadowMapperType > 0) {\n                if (shadowMapperType == 1) {\n                    newShadowMapper = new DirectionalShadowMapper_1.default();\n                }\n            }\n        }\n        light.color = props.get(3, 0xffffff);\n        light.specular = props.get(4, 1.0);\n        light.diffuse = props.get(5, 1.0);\n        light.ambientColor = props.get(7, 0xffffff);\n        light.ambient = props.get(8, 0.0);\n        // if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n        if (newShadowMapper) {\n            if (newShadowMapper instanceof CubeMapShadowMapper_1.default) {\n                if (props.get(10, 1) != 1)\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n            }\n            else {\n                if (props.get(10, 2) != 2)\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n            }\n            light.shadowMapper = newShadowMapper;\n            light.castsShadows = true;\n        }\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(light);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(light);\n        }\n        this.parseUserAttributes();\n        this._pFinalizeAsset(light, name);\n        this._blocks[blockID].data = light;\n        if (this._debug)\n            console.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n    };\n    //Block ID = 43\n    AWDParser.prototype.parseCamera = function (blockID) {\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var projection;\n        this._newBlockBytes.readUnsignedByte(); //set as active camera\n        this._newBlockBytes.readShort(); //lengthof lenses - not used yet\n        var projectiontype = this._newBlockBytes.readShort();\n        var props = this.parseProperties(AWDParser.cameraProperties);\n        switch (projectiontype) {\n            case 5001:\n                projection = new PerspectiveProjection_1.default(props.get(101, 60));\n                break;\n            case 5002:\n                projection = new OrthographicProjection_1.default(props.get(101, 500));\n                break;\n            case 5003:\n                projection = new OrthographicOffCenterProjection_1.default(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n                break;\n            default:\n                console.log(\"unsupportedLenstype\");\n                return;\n        }\n        var camera = new Camera_1.default(projection);\n        camera.transform.matrix3D = mtx;\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(camera);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(camera);\n        }\n        camera.name = name;\n        props = this.parseProperties(AWDParser.cameraPivotProperties);\n        camera.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n        camera.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(camera, name);\n        this._blocks[blockID].data = camera;\n        if (this._debug)\n            console.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n    };\n    //Block ID = 51\n    AWDParser.prototype.parseLightPicker = function (blockID) {\n        var name = this.parseVarStr();\n        var numLights = this._newBlockBytes.readUnsignedShort();\n        var lightsArray = new Array();\n        var lightsArrayNames = new Array();\n        for (var k = 0; k < numLights; k++) {\n            var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            lightsArray.push(light);\n            lightsArrayNames.push(light.name);\n        }\n        if (lightsArray.length == 0) {\n            this._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n            this.parseUserAttributes();\n            return; //return without any more parsing for this block\n        }\n        var lightPick = new StaticLightPicker_1.default(lightsArray);\n        lightPick.name = name;\n        this.parseUserAttributes();\n        this._pFinalizeAsset(lightPick, name);\n        this._blocks[blockID].data = lightPick;\n        if (this._debug)\n            console.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n    };\n    //Block ID = 81\n    AWDParser.prototype.parseMaterial = function (blockID) {\n        // TODO: not used\n        ////blockLength = block.len;\n        var name;\n        var type;\n        var props;\n        var mat;\n        var finalize;\n        var num_methods;\n        var methods_parsed;\n        var returnedArray;\n        name = this.parseVarStr();\n        type = this._newBlockBytes.readUnsignedByte();\n        num_methods = this._newBlockBytes.readUnsignedByte();\n        // Read material numerical properties\n        props = this.parseProperties(AWDParser.materialProperties);\n        methods_parsed = 0;\n        while (methods_parsed < num_methods) {\n            var method_type;\n            method_type = this._newBlockBytes.readUnsignedShort();\n            this.parseProperties(null);\n            this.parseUserAttributes();\n            methods_parsed += 1;\n        }\n        var debugString = \"\";\n        if (type === 1) {\n            debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n            var color = props.get(1, 0xffffff);\n            if (this.materialMode < 2) {\n                mat = new MethodMaterial_1.default(color, props.get(10, 1.0));\n            }\n            else {\n                mat = new MethodMaterial_1.default(color);\n                mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n            }\n        }\n        else if (type === 2) {\n            var texture = new Single2DTexture_1.default(this._blocks[props.get(2, 0)].data);\n            mat = new MethodMaterial_1.default();\n            mat.ambientMethod.texture = texture;\n            if (this.materialMode < 2) {\n                mat.alphaBlending = props.get(11, false);\n                mat.alpha = props.get(10, 1.0);\n                debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n            }\n            else {\n                mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n            }\n        }\n        mat.extra = this.parseUserAttributes();\n        mat.alphaThreshold = props.get(12, 0.0);\n        mat.style.sampler = new Sampler2D_1.default(props.get(13, false));\n        this._pFinalizeAsset(mat, name);\n        this._blocks[blockID].data = mat;\n        if (this._debug)\n            console.log(debugString);\n    };\n    // Block ID = 81 AWD2.1\n    AWDParser.prototype.parseMaterial_v1 = function (blockID) {\n        var mat;\n        var diffuseImage;\n        var normalImage;\n        var specImage;\n        var name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        var num_methods = this._newBlockBytes.readUnsignedByte();\n        var props = this.parseProperties(AWDParser.material_v1Properties);\n        var spezialType = props.get(4, 0);\n        var debugString = \"Parsed Material \";\n        if (spezialType >= 2) {\n            this._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n            return;\n        }\n        if (type <= 2) {\n            if (this.materialMode == 1)\n                spezialType = 0;\n            else if (this.materialMode == 2)\n                spezialType = 1;\n            if (spezialType < 2) {\n                if (type == 1) {\n                    var color = props.get(1, 0xcccccc); //TODO temporarily swapped so that diffuse color goes to ambient\n                    if (spezialType == 1) {\n                        mat = new MethodMaterial_1.default(color);\n                        mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                        debugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n                    }\n                    else {\n                        mat = new MethodMaterial_1.default(color, props.get(10, 1.0));\n                        mat.alphaBlending = props.get(11, false);\n                        debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n                    }\n                }\n                else if (type == 2) {\n                    var texture = new Single2DTexture_1.default(this._blocks[props.get(2, 0)].data);\n                    mat = new MethodMaterial_1.default();\n                    mat.ambientMethod.texture = texture;\n                    if (spezialType == 1) {\n                        mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                        debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n                    }\n                    else {\n                        mat.alpha = props.get(10, 1.0);\n                        mat.alphaBlending = props.get(11, false);\n                        debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n                    }\n                }\n                diffuseImage = this._blocks[props.get(17, 0)].data;\n                normalImage = this._blocks[props.get(3, 0)].data;\n                specImage = this._blocks[props.get(21, 0)].data;\n                mat.lightPicker = this._blocks[props.get(22, 0)].data;\n                mat.style.sampler = new Sampler2D_1.default(props.get(13, false), props.get(5, true), props.get(6, true));\n                mat.bothSides = props.get(7, false);\n                mat.alphaPremultiplied = props.get(8, false);\n                mat.blendMode = this.blendModeDic[props.get(9, 0)];\n                if (diffuseImage) {\n                    mat.diffuseTexture = new Single2DTexture_1.default(diffuseImage);\n                    debugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n                }\n                if (normalImage) {\n                    mat.normalMethod.texture = new Single2DTexture_1.default(normalImage);\n                    debugString += \" | NormalTexture-Name = \" + normalImage.name;\n                }\n                if (specImage) {\n                    mat.specularMethod.texture = new Single2DTexture_1.default(specImage);\n                    debugString += \" | SpecularTexture-Name = \" + specImage.name;\n                }\n                mat.alphaThreshold = props.get(12, 0.0);\n                mat.ambientMethod.strength = props.get(15, 1.0);\n                mat.diffuseMethod.color = props.get(16, 0xffffff);\n                mat.specularMethod.strength = props.get(18, 1.0);\n                mat.specularMethod.gloss = props.get(19, 50);\n                mat.specularMethod.color = props.get(20, 0xffffff);\n                for (var methods_parsed = 0; methods_parsed < num_methods; methods_parsed++) {\n                    var method_type;\n                    method_type = this._newBlockBytes.readUnsignedShort();\n                    props = this.parseProperties(AWDParser.method_v1Properties);\n                    switch (method_type) {\n                        case 999:\n                            var effectMethod = this._blocks[props.get(1, 0)].data;\n                            mat.addEffectMethod(effectMethod);\n                            debugString += \" | EffectMethod-Name = \" + effectMethod.name;\n                            break;\n                        case 998:\n                            var shadowMapMethod = this._blocks[props.get(1, 0)].data;\n                            mat.shadowMethod = shadowMapMethod;\n                            debugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n                            break;\n                        case 1:\n                            var cubeTexture = new SingleCubeTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.ambientMethod = new AmbientEnvMapMethod_1.default();\n                            mat.ambientMethod.texture = cubeTexture;\n                            debugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n                            break;\n                        case 51:\n                            mat.diffuseMethod = new DiffuseDepthMethod_1.default();\n                            debugString += \" | DiffuseDepthMethod\";\n                            break;\n                        case 52:\n                            var texture = new Single2DTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.diffuseMethod = new DiffuseGradientMethod_1.default(texture);\n                            debugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n                            break;\n                        case 53:\n                            mat.diffuseMethod = new DiffuseWrapMethod_1.default(props.get(101, 5));\n                            debugString += \" | DiffuseWrapMethod\";\n                            break;\n                        case 54:\n                            var texture = new Single2DTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.diffuseMethod = new DiffuseLightMapMethod_1.default(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n                            debugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n                            break;\n                        case 55:\n                            mat.diffuseMethod = new DiffuseCelMethod_1.default(props.get(401, 3), mat.diffuseMethod);\n                            mat.diffuseMethod.smoothness = props.get(101, 0.1);\n                            debugString += \" | DiffuseCelMethod\";\n                            break;\n                        case 56:\n                            //\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n                            //\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n                            break;\n                        case 101:\n                            mat.specularMethod = new SpecularAnisotropicMethod_1.default();\n                            debugString += \" | SpecularAnisotropicMethod\";\n                            break;\n                        case 102:\n                            mat.specularMethod = new SpecularPhongMethod_1.default();\n                            debugString += \" | SpecularPhongMethod\";\n                            break;\n                        case 103:\n                            mat.specularMethod = new SpecularCelMethod_1.default(props.get(101, 0.5), mat.specularMethod);\n                            mat.specularMethod.smoothness = props.get(102, 0.1);\n                            debugString += \" | SpecularCelMethod\";\n                            break;\n                        case 104:\n                            mat.specularMethod = new SpecularFresnelMethod_1.default(props.get(701, true), mat.specularMethod);\n                            mat.specularMethod.fresnelPower = props.get(101, 5);\n                            mat.specularMethod.normalReflectance = props.get(102, 0.1);\n                            debugString += \" | SpecularFresnelMethod\";\n                            break;\n                        case 151:\n                            break;\n                        case 152:\n                            var texture = new Single2DTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.normalMethod = new NormalSimpleWaterMethod_1.default(mat.normalMethod.texture || texture, texture);\n                            debugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n                            break;\n                    }\n                    this.parseUserAttributes();\n                }\n            }\n        }\n        else if ((type >= 3) && (type <= 7)) {\n            // if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n            var color = props.get(1, 0xcccccc);\n            debugString += color;\n            var diffuseTexture = new Single2DTexture_1.default(this._blocks[props.get(2, 0)].data);\n            if (type == 5) {\n                diffuseTexture.mappingMode = MappingMode_1.default.LINEAR_GRADIENT;\n            }\n            else if (type == 6) {\n                diffuseTexture.mappingMode = MappingMode_1.default.RADIAL_GRADIENT;\n            }\n            var basic_mat = new BasicMaterial_1.default();\n            basic_mat.texture = diffuseTexture;\n            basic_mat.bothSides = true;\n            //basic_mat.preserveAlpha = true;\n            basic_mat.alphaBlending = true;\n            basic_mat.extra = this.parseUserAttributes();\n            this._pFinalizeAsset(basic_mat, name);\n            this._blocks[blockID].data = basic_mat;\n            if (this._debug)\n                console.log(debugString);\n            return;\n        }\n        mat.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(mat, name);\n        this._blocks[blockID].data = mat;\n        if (this._debug)\n            console.log(debugString);\n    };\n    //Block ID = 82\n    AWDParser.prototype.parseTexture = function (blockID) {\n        this._blocks[blockID].name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        this._texture_users[this._cur_block_id] = [];\n        // External\n        if (type == 0) {\n            var url = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.default(url), false, null, true);\n        }\n        else {\n            var data_len = this._newBlockBytes.readUnsignedInt();\n            var data = new ByteArray_1.default(data_len);\n            this._newBlockBytes.readBytes(data, 0, data_len);\n            //\n            // AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n            //\n            // Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n            // This gives the browser time to initialise image width / height.\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        if (this._debug)\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n    };\n    //Block ID = 83\n    AWDParser.prototype.parseCubeTexture = function (blockID) {\n        //blockLength = block.len;\n        var data_len;\n        var i;\n        this._texture_users[this._cur_block_id] = [];\n        var type = this._newBlockBytes.readUnsignedByte();\n        this._blocks[blockID].name = this.parseVarStr();\n        for (i = 0; i < 6; i++) {\n            this._texture_users[this._cur_block_id] = [];\n            // External\n            if (type == 0) {\n                data_len = this._newBlockBytes.readUnsignedInt();\n                var url;\n                url = this._newBlockBytes.readUTFBytes(data_len);\n                this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.default(url), false, null, true, i);\n            }\n            else {\n                data_len = this._newBlockBytes.readUnsignedInt();\n                var data = new ByteArray_1.default(data_len);\n                this._newBlockBytes.readBytes(data, 0, data_len);\n                this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils_1.default.byteArrayToImage(data), true, i);\n            }\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        if (this._debug)\n            console.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n    };\n    //Block ID = 91\n    AWDParser.prototype.parseSharedMethodBlock = function (blockID) {\n        var asset;\n        this._blocks[blockID].name = this.parseVarStr();\n        asset = this.parseSharedMethodList(blockID);\n        this.parseUserAttributes();\n        this._blocks[blockID].data = asset;\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n    };\n    //Block ID = 92\n    AWDParser.prototype.parseShadowMethodBlock = function (blockID) {\n        this._blocks[blockID].name = this.parseVarStr();\n        var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var asset = this.parseShadowMethodList(light, blockID);\n        if (!asset)\n            return;\n        this.parseUserAttributes(); // Ignore for now\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n    };\n    //Block ID = 253\n    AWDParser.prototype.parseCommand = function (blockID) {\n        var hasBlocks = (this._newBlockBytes.readUnsignedByte() == 1);\n        var parentObject = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var targetObject;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var numCommands = this._newBlockBytes.readShort();\n        var typeCommand = this._newBlockBytes.readShort();\n        var props = this.parseProperties(AWDParser.commandProperties);\n        switch (typeCommand) {\n            case 1:\n                targetObject = this._blocks[props.get(1, 0)].data;\n                targetObject.transform.matrix3D = mtx;\n                if (parentObject)\n                    parentObject.addChild(targetObject);\n                break;\n        }\n        if (targetObject) {\n            props = this.parseProperties(AWDParser.targetProperties);\n            targetObject.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n            targetObject.extra = this.parseUserAttributes();\n        }\n        this._blocks[blockID].data = targetObject;\n        if (this._debug)\n            console.log(\"Parsed a CommandBlock: Name = '\" + name);\n    };\n    //blockID 255\n    AWDParser.prototype.parseMetaData = function (blockID) {\n        var props = this.parseProperties(AWDParser.metaDataProperties);\n        if (this._debug) {\n            console.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n            console.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n            console.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n            console.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n            console.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n        }\n    };\n    //blockID 254\n    AWDParser.prototype.parseNameSpace = function (blockID) {\n        var id = this._newBlockBytes.readUnsignedByte();\n        var nameSpaceString = this.parseVarStr();\n        if (this._debug)\n            console.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n    };\n    // this functions reads and creates a ShadowMethodMethod\n    AWDParser.prototype.parseShadowMethodList = function (light, blockID) {\n        var methodType = this._newBlockBytes.readUnsignedShort();\n        var shadowMethod;\n        var props = this.parseProperties(this.shadowMethodListProperties);\n        var targetID;\n        var returnedArray;\n        switch (methodType) {\n            //\t\t\t\tcase 1001: //CascadeShadowMapMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n            //\t\t\t\t\tif (!returnedArray[0]) {\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n            //\t\t\t\t\t\treturn shadowMethod;\n            //\t\t\t\t\t}\n            //\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n            //\t\t\t\t\tbreak;\n            case 1002:\n                shadowMethod = new ShadowNearMethod_1.default(this._blocks[props.get(1, 0)].data);\n                break;\n            case 1101:\n                shadowMethod = new ShadowFilteredMethod_1.default(light);\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                break;\n            case 1102:\n                shadowMethod = new ShadowDitheredMethod_1.default(light, props.get(201, 5));\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                shadowMethod.range = props.get(103, 1);\n                break;\n            case 1103:\n                shadowMethod = new ShadowSoftMethod_1.default(light, props.get(201, 5));\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                shadowMethod.range = props.get(103, 1);\n                break;\n            case 1104:\n                shadowMethod = new ShadowHardMethod_1.default(light);\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                break;\n        }\n        this.parseUserAttributes();\n        return shadowMethod;\n    };\n    //Block ID 101\n    AWDParser.prototype.parseSkeleton = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_joints = this._newBlockBytes.readUnsignedShort();\n        var skeleton = new Skeleton_1.default();\n        this.parseProperties(null); // Discard properties for now\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\n            var joint;\n            var ibp;\n            // Ignore joint id\n            this._newBlockBytes.readUnsignedShort();\n            joint = new SkeletonJoint_1.default();\n            joint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n            joint.name = this.parseVarStr();\n            ibp = this.parseMatrix3D();\n            joint.inverseBindPose = ibp.rawData;\n            // Ignore joint props/attributes for now\n            this.parseProperties(null);\n            this.parseUserAttributes();\n            skeleton.joints.push(joint);\n        }\n        // Discard attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(skeleton, name);\n        this._blocks[blockID].data = skeleton;\n        if (this._debug)\n            console.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n    };\n    //Block ID = 102\n    AWDParser.prototype.parseSkeletonPose = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_joints = this._newBlockBytes.readUnsignedShort();\n        this.parseProperties(null); // Ignore properties for now\n        var pose = new SkeletonPose_1.default();\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\n            var joint_pose;\n            var has_transform;\n            joint_pose = new JointPose_1.default();\n            has_transform = this._newBlockBytes.readUnsignedByte();\n            if (has_transform == 1) {\n                var mtx_data = this.parseMatrix43RawData();\n                var mtx = new Matrix3D_1.default(mtx_data);\n                joint_pose.orientation.fromMatrix(mtx);\n                joint_pose.translation.copyFrom(mtx.position);\n                pose.jointPoses[joints_parsed] = joint_pose;\n            }\n        }\n        // Skip attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(pose, name);\n        this._blocks[blockID].data = pose;\n        if (this._debug)\n            console.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n    };\n    //blockID 103\n    AWDParser.prototype.parseSkeletonAnimation = function (blockID /*uint*/) {\n        var frame_dur;\n        var pose_id;\n        var name = this.parseVarStr();\n        var clip = new SkeletonClipNode_1.default();\n        var num_frames = this._newBlockBytes.readUnsignedShort();\n        this.parseProperties(null); // Ignore properties for now\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            pose_id = this._newBlockBytes.readUnsignedInt();\n            frame_dur = this._newBlockBytes.readUnsignedShort();\n            clip.addFrame(this._blocks[pose_id].data, frame_dur);\n        }\n        if (clip.frames.length == 0) {\n            this._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n            return;\n        }\n        // Ignore attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(clip, name);\n        this._blocks[blockID].data = clip;\n        if (this._debug)\n            console.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n    };\n    //Block ID = 111 /  Block ID = 112\n    AWDParser.prototype.parseSpritePoseAnimation = function (blockID /*uint*/, poseOnly) {\n        if (poseOnly === void 0) { poseOnly = false; }\n        var subSpriteParsed;\n        var x;\n        var y;\n        var z;\n        var str_len;\n        var str_end;\n        var elements;\n        var idx = 0;\n        var clip = new VertexClipNode_1.default();\n        var indices;\n        var verts;\n        var streamtypes = new Array();\n        var props;\n        var name = this.parseVarStr();\n        var geo_id = this._newBlockBytes.readUnsignedInt();\n        var graphics = this._blocks[geo_id].data;\n        var uvs = this.getUVForVertexAnimation(geo_id);\n        var num_frames = (!poseOnly) ? this._newBlockBytes.readUnsignedShort() : 1;\n        var num_subsprites = this._newBlockBytes.readUnsignedShort();\n        var num_Streams = this._newBlockBytes.readUnsignedShort();\n        for (var streamsParsed = 0; streamsParsed < num_Streams; streamsParsed++)\n            streamtypes.push(this._newBlockBytes.readUnsignedShort());\n        props = this.parseProperties(this.spritePoseAnimationProperties);\n        clip.looping = props.get(1, true);\n        clip.stitchFinalFrame = props.get(2, false);\n        var frame_dur;\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            frame_dur = this._newBlockBytes.readUnsignedShort();\n            graphics = new Graphics_1.default();\n            subSpriteParsed = 0;\n            while (subSpriteParsed < num_subsprites) {\n                streamsParsed = 0;\n                str_len = this._newBlockBytes.readUnsignedInt();\n                str_end = this._newBlockBytes.position + str_len;\n                while (streamsParsed < num_Streams) {\n                    if (streamtypes[streamsParsed] == 1) {\n                        indices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\n                        verts = new Array();\n                        idx = 0;\n                        while (this._newBlockBytes.position < str_end) {\n                            x = this.readNumber(this._accuracyGeo);\n                            y = this.readNumber(this._accuracyGeo);\n                            z = this.readNumber(this._accuracyGeo);\n                            verts[idx++] = x;\n                            verts[idx++] = y;\n                            verts[idx++] = z;\n                        }\n                        elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n                        elements.setIndices(indices);\n                        elements.setPositions(verts);\n                        elements.setUVs(uvs[subSpriteParsed]);\n                        elements.setNormals(null);\n                        elements.setTangents(null);\n                        elements.autoDeriveNormals = false;\n                        elements.autoDeriveTangents = false;\n                        subSpriteParsed++;\n                        graphics.addGraphic(elements);\n                    }\n                    else\n                        this._newBlockBytes.position = str_end;\n                    streamsParsed++;\n                }\n            }\n            clip.addFrame(graphics, frame_dur);\n        }\n        this.parseUserAttributes();\n        this._pFinalizeAsset(clip, name);\n        this._blocks[blockID].data = clip;\n        if (this._debug)\n            console.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n    };\n    //BlockID 113\n    AWDParser.prototype.parseVertexAnimationSet = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_frames = this._newBlockBytes.readUnsignedShort();\n        var props = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n        var skeletonFrames = new Array();\n        var vertexFrames = new Array();\n        var clipNode;\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            clipNode = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            if (clipNode instanceof VertexClipNode_1.default)\n                vertexFrames.push(clipNode);\n            else if (clipNode instanceof SkeletonClipNode_1.default)\n                skeletonFrames.push(clipNode);\n        }\n        if ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n            this._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n            return;\n        }\n        this.parseUserAttributes();\n        if (vertexFrames.length > 0) {\n            var newVertexAnimationSet = new VertexAnimationSet_1.default();\n            for (var i = 0; i < vertexFrames.length; i++)\n                newVertexAnimationSet.addAnimation(vertexFrames[i]);\n            this._pFinalizeAsset(newVertexAnimationSet, name);\n            this._blocks[blockID].data = newVertexAnimationSet;\n            if (this._debug)\n                console.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n        }\n        else if (skeletonFrames.length > 0) {\n            var newSkeletonAnimationSet = new SkeletonAnimationSet_1.default(props.get(1, 4)); //props.get(1,4));\n            for (var i = 0; i < skeletonFrames.length; i++)\n                newSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n            this._pFinalizeAsset(newSkeletonAnimationSet, name);\n            this._blocks[blockID].data = newSkeletonAnimationSet;\n            if (this._debug)\n                console.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n        }\n    };\n    //BlockID 122\n    AWDParser.prototype.parseAnimatorSet = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedShort();\n        var props = this.parseProperties(AWDParser.animatorSetProperties);\n        var targetAnimationSet = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var targetSpritees = new Array();\n        var targetSpriteLength = this._newBlockBytes.readUnsignedShort();\n        for (var i = 0; i < targetSpriteLength; i++)\n            targetSpritees.push(this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n        var activeState = this._newBlockBytes.readUnsignedShort();\n        var autoplay = (this._newBlockBytes.readUnsignedByte() == 1);\n        this.parseUserAttributes();\n        this.parseUserAttributes();\n        var thisAnimator;\n        if (type == 1)\n            thisAnimator = new SkeletonAnimator_1.default(targetAnimationSet, this._blocks[props.get(1, 0)].data);\n        else if (type == 2)\n            thisAnimator = new VertexAnimator_1.default(targetAnimationSet);\n        this._pFinalizeAsset(thisAnimator, name);\n        this._blocks[blockID].data = thisAnimator;\n        for (i = 0; i < targetSpritees.length; i++) {\n            if (type == 1)\n                targetSpritees[i].animator = thisAnimator;\n            else if (type == 2)\n                targetSpritees[i].animator = thisAnimator;\n        }\n        if (this._debug)\n            console.log(\"Parsed a Animator: Name = \" + name);\n    };\n    // this functions reads and creates a EffectMethod\n    AWDParser.prototype.parseSharedMethodList = function (blockID) {\n        var methodType = this._newBlockBytes.readUnsignedShort();\n        var effectMethodReturn;\n        var props = this.parseProperties(this.sharedMethodListProperties);\n        switch (methodType) {\n            // Effect Methods\n            case 401:\n                effectMethodReturn = new EffectColorMatrixMethod_1.default(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n                break;\n            case 402:\n                effectMethodReturn = new EffectColorTransformMethod_1.default();\n                var offCol = props.get(601, 0x00000000);\n                effectMethodReturn.colorTransform = new ColorTransform_1.default(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n                break;\n            case 403:\n                effectMethodReturn = new EffectEnvMapMethod_1.default(new SingleCubeTexture_1.default(this._blocks[props.get(1, 0)].data), props.get(101, 1));\n                var targetID = props.get(2, 0);\n                if (targetID > 0) {\n                }\n                break;\n            case 404:\n                effectMethodReturn = new EffectLightMapMethod_1.default(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n                break;\n            //\t\t\t\tcase 405: //ProjectiveTextureMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n            //\t\t\t\t\tif (!returnedArray[0])\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n            //\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n            //\t\t\t\t\tbreak;\n            case 406:\n                effectMethodReturn = new EffectRimLightMethod_1.default(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n                break;\n            case 407:\n                effectMethodReturn = new EffectAlphaMaskMethod_1.default(this._blocks[props.get(1, 0)].data, props.get(701, false));\n                break;\n            //\t\t\t\tcase 408: //RefractionEnvMapMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n            //\t\t\t\t\tif (!returnedArray[0])\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n            //\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n            //\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n            //\t\t\t\t\tbreak;\n            //\t\t\t\tcase 409: //OutlineMethod\n            //\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n            //\t\t\t\t\tbreak;\n            case 410:\n                effectMethodReturn = new EffectFresnelEnvMapMethod_1.default(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n                break;\n            case 411:\n                effectMethodReturn = new EffectFogMethod_1.default(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n                break;\n        }\n        this.parseUserAttributes();\n        return effectMethodReturn;\n    };\n    AWDParser.prototype.parseUserAttributes = function () {\n        var list_len = this._newBlockBytes.readUnsignedInt();\n        if (list_len > 0) {\n            var list_end = this._newBlockBytes.position + list_len;\n            var attributes = {};\n            for (var attibuteCnt = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n                var ns_id;\n                var attr_key;\n                var attr_type;\n                var attr_len;\n                var attr_val;\n                // TODO: Properly tend to namespaces in attributes\n                ns_id = this._newBlockBytes.readUnsignedByte();\n                attr_key = this.parseVarStr();\n                attr_type = this._newBlockBytes.readUnsignedByte();\n                attr_len = this._newBlockBytes.readUnsignedInt();\n                if ((this._newBlockBytes.position + attr_len) > list_end) {\n                    console.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n                    this._newBlockBytes.position = list_end;\n                    return attributes;\n                }\n                switch (attr_type) {\n                    case AWDParser.AWDSTRING:\n                        attr_val = this._newBlockBytes.readUTFBytes(attr_len);\n                        break;\n                    case AWDParser.INT8:\n                        attr_val = this._newBlockBytes.readByte();\n                        break;\n                    case AWDParser.INT16:\n                        attr_val = this._newBlockBytes.readShort();\n                        break;\n                    case AWDParser.INT32:\n                        attr_val = this._newBlockBytes.readInt();\n                        break;\n                    case AWDParser.BOOL:\n                    case AWDParser.UINT8:\n                        attr_val = this._newBlockBytes.readUnsignedByte();\n                        break;\n                    case AWDParser.UINT16:\n                        attr_val = this._newBlockBytes.readUnsignedShort();\n                        break;\n                    case AWDParser.UINT32:\n                    case AWDParser.BADDR:\n                        attr_val = this._newBlockBytes.readUnsignedInt();\n                        break;\n                    case AWDParser.FLOAT32:\n                        attr_val = this._newBlockBytes.readFloat();\n                        break;\n                    case AWDParser.FLOAT64:\n                        attr_val = this._newBlockBytes.readDouble();\n                        break;\n                    default:\n                        attr_val = 'unimplemented attribute type ' + attr_type;\n                        this._newBlockBytes.position += attr_len;\n                        break;\n                }\n                attributes[attr_key] = attr_val;\n                if (this._debug)\n                    console.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n            }\n        }\n        return attributes;\n    };\n    AWDParser.prototype.parseProperties = function (expected) {\n        var list_len = this._newBlockBytes.readUnsignedInt();\n        var props = new AWDProperties();\n        var list_end = this._newBlockBytes.position + list_len;\n        if (expected) {\n            var len;\n            var key;\n            var type;\n            for (var propertyCnt = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n                key = this._newBlockBytes.readUnsignedShort();\n                len = this._newBlockBytes.readUnsignedInt();\n                if ((this._newBlockBytes.position + len) > list_end) {\n                    console.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n                    this._newBlockBytes.position = list_end;\n                    return props;\n                }\n                if (expected[key]) {\n                    type = expected[key];\n                    props.set(key, this.parseAttrValue(type, len));\n                }\n                else {\n                    this._newBlockBytes.position += len;\n                }\n            }\n        }\n        else {\n            this._newBlockBytes.position = list_end;\n        }\n        return props;\n    };\n    AWDParser.prototype.parseAttrValue = function (type, len) {\n        var elem_len;\n        var read_func;\n        var accuracy;\n        switch (type) {\n            case AWDParser.BOOL:\n            case AWDParser.INT8:\n                elem_len = 1;\n                read_func = this._newBlockBytes.readByte;\n                break;\n            case AWDParser.INT16:\n                elem_len = 2;\n                read_func = this._newBlockBytes.readShort;\n                break;\n            case AWDParser.INT32:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readInt;\n                break;\n            case AWDParser.UINT8:\n                elem_len = 1;\n                read_func = this._newBlockBytes.readUnsignedByte;\n                break;\n            case AWDParser.UINT16:\n                elem_len = 2;\n                read_func = this._newBlockBytes.readUnsignedShort;\n                break;\n            case AWDParser.UINT32:\n            case AWDParser.COLOR:\n            case AWDParser.BADDR:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readUnsignedInt;\n                break;\n            case AWDParser.FLOAT32:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readFloat;\n                break;\n            case AWDParser.FLOAT64:\n                elem_len = 8;\n                read_func = this._newBlockBytes.readDouble;\n                break;\n            case AWDParser.AWDSTRING:\n                return this._newBlockBytes.readUTFBytes(len);\n            case AWDParser.VECTOR2x1:\n            case AWDParser.VECTOR3x1:\n            case AWDParser.VECTOR4x1:\n            case AWDParser.MTX3x2:\n            case AWDParser.MTX3x3:\n            case AWDParser.MTX4x3:\n            case AWDParser.MTX4x4:\n                elem_len = 8;\n                read_func = this._newBlockBytes.readDouble;\n                break;\n            case AWDParser.GEO_NUMBER:\n                accuracy = this._accuracyGeo;\n            case AWDParser.MATRIX_NUMBER:\n                accuracy = this._accuracyMatrix;\n            case AWDParser.PROPERTY_NUMBER:\n                accuracy = this._accuracyProps;\n            default:\n                if (accuracy) {\n                    elem_len = 8;\n                    read_func = this._newBlockBytes.readDouble;\n                }\n                else {\n                    elem_len = 4;\n                    read_func = this._newBlockBytes.readFloat;\n                }\n        }\n        if (elem_len < len) {\n            var list = [];\n            var num_elems = len / elem_len;\n            for (var num_read = 0; num_read < num_elems; num_read++)\n                list[num_read] = read_func.call(this._newBlockBytes);\n            return list;\n        }\n        else {\n            return read_func.call(this._newBlockBytes);\n        }\n    };\n    AWDParser.prototype.parseHeader = function () {\n        this._byteData.position = 3; // Skip magic string and parse version\n        this._version[0] = this._byteData.readUnsignedByte();\n        this._version[1] = this._byteData.readUnsignedByte();\n        var flags = this._byteData.readUnsignedShort(); // Parse bit flags\n        this._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n        // if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n        }\n        this._compression = this._byteData.readUnsignedByte(); // compression\n        if (this._debug) {\n            console.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n            console.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n        }\n        // Check file integrity\n        var body_len = this._byteData.readUnsignedInt();\n        if (!this._streaming && body_len != this._byteData.getBytesAvailable())\n            this._pDieWithError('AWD2 body length does not match header integrity field');\n    };\n    // Helper - functions\n    AWDParser.prototype.getUVForVertexAnimation = function (spriteID /*uint*/) {\n        if (this._blocks[spriteID].data instanceof Sprite_1.default)\n            spriteID = this._blocks[spriteID].geoID;\n        if (this._blocks[spriteID].uvsForVertexAnimation)\n            return this._blocks[spriteID].uvsForVertexAnimation;\n        var graphics = this._blocks[spriteID].data;\n        var elements;\n        var uvsForVertexAnimation = this._blocks[spriteID].uvsForVertexAnimation = new Array();\n        var len = graphics.count;\n        for (var geoCnt = 0; geoCnt < len; geoCnt++) {\n            elements = graphics.getGraphicAt(geoCnt).elements;\n            uvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n        }\n        return this._blocks[spriteID].uvsForVertexAnimation;\n    };\n    AWDParser.prototype.parseVarStr = function () {\n        return this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n    };\n    AWDParser.prototype.readNumber = function (precision) {\n        if (precision === void 0) { precision = false; }\n        if (precision)\n            return this._newBlockBytes.readDouble();\n        return this._newBlockBytes.readFloat();\n    };\n    AWDParser.prototype.parseMatrix3D = function () {\n        return new Matrix3D_1.default(this.parseMatrix43RawData());\n    };\n    AWDParser.prototype.parseMatrix32RawData = function () {\n        var mtx_raw = new Array(6);\n        for (var i = 0; i < 6; i++)\n            mtx_raw[i] = this._newBlockBytes.readFloat();\n        return mtx_raw;\n    };\n    AWDParser.prototype.parseMatrix43RawData = function () {\n        var mtx_raw = new Float32Array(16);\n        mtx_raw[0] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[1] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[2] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[3] = 0.0;\n        mtx_raw[4] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[5] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[6] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[7] = 0.0;\n        mtx_raw[8] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[9] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[10] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[11] = 0.0;\n        mtx_raw[12] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[13] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[14] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[15] = 1.0;\n        //TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n        if (isNaN(mtx_raw[0])) {\n            mtx_raw[0] = 1;\n            mtx_raw[1] = 0;\n            mtx_raw[2] = 0;\n            mtx_raw[4] = 0;\n            mtx_raw[5] = 1;\n            mtx_raw[6] = 0;\n            mtx_raw[8] = 0;\n            mtx_raw[9] = 0;\n            mtx_raw[10] = 1;\n            mtx_raw[12] = 0;\n            mtx_raw[13] = 0;\n            mtx_raw[14] = 0;\n        }\n        return mtx_raw;\n    };\n    AWDParser.COMPRESSIONMODE_LZMA = \"lzma\";\n    AWDParser.UNCOMPRESSED = 0;\n    AWDParser.DEFLATE = 1;\n    AWDParser.LZMA = 2;\n    AWDParser.INT8 = 1;\n    AWDParser.INT16 = 2;\n    AWDParser.INT32 = 3;\n    AWDParser.UINT8 = 4;\n    AWDParser.UINT16 = 5;\n    AWDParser.UINT32 = 6;\n    AWDParser.FLOAT32 = 7;\n    AWDParser.FLOAT64 = 8;\n    AWDParser.BOOL = 21;\n    AWDParser.COLOR = 22;\n    AWDParser.BADDR = 23;\n    AWDParser.AWDSTRING = 31;\n    AWDParser.AWDBYTEARRAY = 32;\n    AWDParser.VECTOR2x1 = 41;\n    AWDParser.VECTOR3x1 = 42;\n    AWDParser.VECTOR4x1 = 43;\n    AWDParser.MTX3x2 = 44;\n    AWDParser.MTX3x3 = 45;\n    AWDParser.MTX4x3 = 46;\n    AWDParser.MTX4x4 = 47;\n    AWDParser.GEO_NUMBER = 48;\n    AWDParser.MATRIX_NUMBER = 49;\n    AWDParser.PROPERTY_NUMBER = 50;\n    AWDParser.textFormatProperties = {\n        1: AWDParser.UINT16,\n        2: AWDParser.FLOAT32,\n        3: AWDParser.UINT8,\n        4: AWDParser.UINT8,\n        5: AWDParser.UINT8,\n        6: AWDParser.UINT8,\n        7: AWDParser.FLOAT32,\n        8: AWDParser.FLOAT32,\n        9: AWDParser.FLOAT32,\n        10: AWDParser.FLOAT32 }; //line spacing\n    AWDParser.textFieldProperties = {\n        1: AWDParser.BOOL,\n        3: AWDParser.BOOL,\n        4: AWDParser.BOOL,\n        5: AWDParser.BOOL,\n        7: AWDParser.UINT8,\n        8: AWDParser.UINT8,\n        9: AWDParser.UINT8 };\n    AWDParser.textFieldTypes = [\"static\", \"dynamic\", \"input\", \"input\"];\n    AWDParser.movieClipProperties = {\n        1: AWDParser.FLOAT32,\n        2: AWDParser.UINT16,\n        3: AWDParser.UINT8 }; // scripting-language right now its always as2\n    AWDParser.graphicsProperties = {\n        1: AWDParser.GEO_NUMBER,\n        2: AWDParser.GEO_NUMBER };\n    AWDParser.elementsProperties = {\n        1: AWDParser.GEO_NUMBER,\n        2: AWDParser.GEO_NUMBER };\n    AWDParser.primitiveProperties = {\n        101: AWDParser.GEO_NUMBER,\n        102: AWDParser.GEO_NUMBER,\n        103: AWDParser.GEO_NUMBER,\n        110: AWDParser.GEO_NUMBER,\n        111: AWDParser.GEO_NUMBER,\n        301: AWDParser.UINT16,\n        302: AWDParser.UINT16,\n        303: AWDParser.UINT16,\n        701: AWDParser.BOOL,\n        702: AWDParser.BOOL,\n        703: AWDParser.BOOL,\n        704: AWDParser.BOOL };\n    AWDParser.primitiveTypes = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n    AWDParser.containerProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    AWDParser.spriteInstanceProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8,\n        5: AWDParser.BOOL };\n    AWDParser.lightProperties = {\n        1: AWDParser.PROPERTY_NUMBER,\n        2: AWDParser.PROPERTY_NUMBER,\n        3: AWDParser.COLOR,\n        4: AWDParser.PROPERTY_NUMBER,\n        5: AWDParser.PROPERTY_NUMBER,\n        6: AWDParser.BOOL,\n        7: AWDParser.COLOR,\n        8: AWDParser.PROPERTY_NUMBER,\n        9: AWDParser.UINT8,\n        10: AWDParser.UINT8,\n        11: AWDParser.PROPERTY_NUMBER,\n        12: AWDParser.UINT16,\n        21: AWDParser.MATRIX_NUMBER,\n        22: AWDParser.MATRIX_NUMBER,\n        23: AWDParser.MATRIX_NUMBER };\n    AWDParser.cameraProperties = {\n        101: AWDParser.PROPERTY_NUMBER,\n        102: AWDParser.PROPERTY_NUMBER,\n        103: AWDParser.PROPERTY_NUMBER,\n        104: AWDParser.PROPERTY_NUMBER };\n    AWDParser.cameraPivotProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    // (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n    AWDParser.materialProperties = {\n        1: AWDParser.INT32,\n        2: AWDParser.BADDR,\n        10: AWDParser.PROPERTY_NUMBER,\n        11: AWDParser.BOOL,\n        12: AWDParser.PROPERTY_NUMBER,\n        13: AWDParser.BOOL };\n    AWDParser.material_v1Properties = { 1: AWDParser.UINT32,\n        2: AWDParser.BADDR,\n        3: AWDParser.BADDR,\n        4: AWDParser.UINT8,\n        5: AWDParser.BOOL,\n        6: AWDParser.BOOL,\n        7: AWDParser.BOOL,\n        8: AWDParser.BOOL,\n        9: AWDParser.UINT8,\n        10: AWDParser.PROPERTY_NUMBER,\n        11: AWDParser.BOOL,\n        12: AWDParser.PROPERTY_NUMBER,\n        13: AWDParser.BOOL,\n        15: AWDParser.PROPERTY_NUMBER,\n        16: AWDParser.UINT32,\n        17: AWDParser.BADDR,\n        18: AWDParser.PROPERTY_NUMBER,\n        19: AWDParser.PROPERTY_NUMBER,\n        20: AWDParser.UINT32,\n        21: AWDParser.BADDR,\n        22: AWDParser.BADDR };\n    AWDParser.method_v1Properties = {\n        1: AWDParser.BADDR,\n        2: AWDParser.BADDR,\n        3: AWDParser.BADDR,\n        101: AWDParser.PROPERTY_NUMBER,\n        102: AWDParser.PROPERTY_NUMBER,\n        103: AWDParser.PROPERTY_NUMBER,\n        201: AWDParser.UINT32,\n        202: AWDParser.UINT32,\n        301: AWDParser.UINT16,\n        302: AWDParser.UINT16,\n        401: AWDParser.UINT8,\n        402: AWDParser.UINT8,\n        601: AWDParser.COLOR,\n        602: AWDParser.COLOR,\n        701: AWDParser.BOOL,\n        702: AWDParser.BOOL,\n        801: AWDParser.MTX4x4 };\n    AWDParser.commandProperties = {\n        1: AWDParser.BADDR };\n    AWDParser.targetProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    AWDParser.metaDataProperties = {\n        1: AWDParser.UINT32,\n        2: AWDParser.AWDSTRING,\n        3: AWDParser.AWDSTRING,\n        4: AWDParser.AWDSTRING,\n        5: AWDParser.AWDSTRING };\n    AWDParser.vertexAnimationSetProperties = {\n        1: AWDParser.UINT16 };\n    AWDParser.animatorSetProperties = { 1: AWDParser.BADDR };\n    return AWDParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = AWDParser;\nvar AWDProperties = (function () {\n    function AWDProperties() {\n    }\n    AWDProperties.prototype.set = function (key, value) {\n        this[key] = value;\n    };\n    AWDProperties.prototype.get = function (key, fallback) {\n        return (this[key] || fallback);\n    };\n    return AWDProperties;\n}());\n/**\n *\n */\nvar BitFlags = (function () {\n    function BitFlags() {\n    }\n    BitFlags.test = function (flags, testFlag) {\n        return (flags & testFlag) == testFlag;\n    };\n    BitFlags.FLAG1 = 1;\n    BitFlags.FLAG2 = 2;\n    BitFlags.FLAG3 = 4;\n    BitFlags.FLAG4 = 8;\n    BitFlags.FLAG5 = 16;\n    BitFlags.FLAG6 = 32;\n    BitFlags.FLAG7 = 64;\n    BitFlags.FLAG8 = 128;\n    BitFlags.FLAG9 = 256;\n    BitFlags.FLAG10 = 512;\n    BitFlags.FLAG11 = 1024;\n    BitFlags.FLAG12 = 2048;\n    BitFlags.FLAG13 = 4096;\n    BitFlags.FLAG14 = 8192;\n    BitFlags.FLAG15 = 16384;\n    BitFlags.FLAG16 = 32768;\n    return BitFlags;\n}());\n\n},{\"./AWD3ParserUtils/AWDBlock\":\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/attributes/Byte4Attributes\":undefined,\"awayjs-core/lib/attributes/Float2Attributes\":undefined,\"awayjs-core/lib/attributes/Float3Attributes\":undefined,\"awayjs-core/lib/geom/ColorTransform\":undefined,\"awayjs-core/lib/geom/Matrix\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImageCube\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-core/lib/projections/OrthographicOffCenterProjection\":undefined,\"awayjs-core/lib/projections/OrthographicProjection\":undefined,\"awayjs-core/lib/projections/PerspectiveProjection\":undefined,\"awayjs-core/lib/utils/ByteArray\":undefined,\"awayjs-display/lib/base/Style\":undefined,\"awayjs-display/lib/base/Timeline\":undefined,\"awayjs-display/lib/display/Billboard\":undefined,\"awayjs-display/lib/display/Camera\":undefined,\"awayjs-display/lib/display/DirectionalLight\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/PointLight\":undefined,\"awayjs-display/lib/display/Skybox\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/ElementsType\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/materials/BasicMaterial\":undefined,\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\":undefined,\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\":undefined,\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\":undefined,\"awayjs-display/lib/prefabs/PrefabBase\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveConePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\":undefined,\"awayjs-display/lib/text/Font\":undefined,\"awayjs-display/lib/text/TextFormat\":undefined,\"awayjs-display/lib/textures/MappingMode\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-display/lib/textures/SingleCubeTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFogMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\":undefined,\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\":undefined,\"awayjs-player/lib/factories/AS2SceneGraphFactory\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimator\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimator\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/MD2Parser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nvar MD2Parser = (function (_super) {\n    __extends(MD2Parser, _super);\n    /**\n     * Creates a new MD2Parser object.\n     * @param textureType The extension of the texture (e.g. jpg/png/...)\n     * @param ignoreTexturePath If true, the path of the texture is ignored\n     */\n    function MD2Parser(textureType, ignoreTexturePath) {\n        if (textureType === void 0) { textureType = \"jpg\"; }\n        if (ignoreTexturePath === void 0) { ignoreTexturePath = true; }\n        _super.call(this, URLLoaderDataFormat_1.default.ARRAY_BUFFER);\n        this._clipNodes = new Object();\n        // the current elements being built\n        this._animationSet = new VertexAnimationSet_1.default();\n        this.materialFinal = false;\n        this.graphicsCreated = false;\n        this._textureType = textureType;\n        this._ignoreTexturePath = ignoreTexturePath;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD2Parser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md2\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD2Parser.supportsData = function (data) {\n        return (ParserUtils_1.default.toString(data, 4) == 'IDP2');\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length != 1)\n            return;\n        var material = new MethodMaterial_1.default(resourceDependency.assets[0]);\n        if (this.materialMode >= 2)\n            material.mode = MethodMaterialMode_1.default.MULTI_PASS;\n        //add to the content property\n        this._pContent.addChild(this._sprite);\n        material.name = this._sprite.material.name;\n        this._sprite.material = material;\n        this._pFinalizeAsset(material);\n        this._pFinalizeAsset(this._sprite.graphics);\n        this._pFinalizeAsset(this._sprite);\n        this.materialFinal = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        // apply system default\n        if (this.materialMode < 2) {\n            this._sprite.material = DefaultMaterialManager_1.default.getDefaultMaterial();\n        }\n        else {\n            this._sprite.material = new MethodMaterial_1.default(DefaultMaterialManager_1.default.getDefaultImage2D());\n            this._sprite.material.mode = MethodMaterialMode_1.default.MULTI_PASS;\n        }\n        //add to the content property\n        this._pContent.addChild(this._sprite);\n        this._pFinalizeAsset(this._sprite.graphics);\n        this._pFinalizeAsset(this._sprite);\n        this.materialFinal = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._pProceedParsing = function () {\n        if (!this._startedParsing) {\n            this._byteData = this._pGetByteData();\n            this._startedParsing = true;\n            // Reset bytearray read position (which may have been\n            // moved forward by the supportsData() function.)\n            this._byteData.position = 0;\n        }\n        while (this._pHasTime()) {\n            if (!this._parsedHeader) {\n                //----------------------------------------------------------------------------\n                // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n                //----------------------------------------------------------------------------\n                //this._byteData.endian = Endian.LITTLE_ENDIAN;\n                // TODO: Create a sprite only when encountered (if it makes sense\n                // for this file format) and return it using this._pFinalizeAsset()\n                this._sprite = new Sprite_1.default();\n                this._graphics = this._sprite.graphics;\n                if (this.materialMode < 2) {\n                    this._sprite.material = DefaultMaterialManager_1.default.getDefaultMaterial();\n                }\n                else {\n                    this._sprite.material = new MethodMaterial_1.default(DefaultMaterialManager_1.default.getDefaultImage2D());\n                    this._sprite.material.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                }\n                //_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n                //_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\n                // Parse header and decompress body\n                this.parseHeader();\n                this.parseMaterialNames();\n            }\n            else if (!this._parsedUV) {\n                this.parseUV();\n            }\n            else if (!this._parsedFaces) {\n                this.parseFaces();\n            }\n            else if (!this._parsedFrames) {\n                this.parseFrames();\n            }\n            else if ((this.graphicsCreated) && (this.materialFinal)) {\n                return ParserBase_1.default.PARSING_DONE;\n            }\n            else if (!this.graphicsCreated) {\n                this.graphicsCreated = true;\n                //create default subgraphics\n                this._graphics.addGraphic(this._firstElements.clone());\n                // Force name to be chosen by this._pFinalizeAsset()\n                this._sprite.name = \"\";\n                if (this.materialFinal) {\n                    //add to the content property\n                    this._pContent.addChild(this._sprite);\n                    this._pFinalizeAsset(this._sprite.graphics);\n                    this._pFinalizeAsset(this._sprite);\n                }\n                this._pPauseAndRetrieveDependencies();\n            }\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    MD2Parser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    /**\n     * Reads in all that MD2 Header data that is declared as private variables.\n     * I know its a lot, and it looks ugly, but only way to do it in Flash\n     */\n    MD2Parser.prototype.parseHeader = function () {\n        this._ident = this._byteData.readInt();\n        this._version = this._byteData.readInt();\n        this._skinWidth = this._byteData.readInt();\n        this._skinHeight = this._byteData.readInt();\n        //skip this._frameSize\n        this._byteData.readInt();\n        this._numSkins = this._byteData.readInt();\n        this._numVertices = this._byteData.readInt();\n        this._numST = this._byteData.readInt();\n        this._numTris = this._byteData.readInt();\n        //skip this._numGlCmds\n        this._byteData.readInt();\n        this._numFrames = this._byteData.readInt();\n        this._offsetSkins = this._byteData.readInt();\n        this._offsetST = this._byteData.readInt();\n        this._offsetTris = this._byteData.readInt();\n        this._offsetFrames = this._byteData.readInt();\n        //skip this._offsetGlCmds\n        this._byteData.readInt();\n        this._offsetEnd = this._byteData.readInt();\n        this._parsedHeader = true;\n    };\n    /**\n     * Parses the file names for the materials.\n     */\n    MD2Parser.prototype.parseMaterialNames = function () {\n        var url;\n        var name;\n        var extIndex;\n        var slashIndex;\n        this._materialNames = new Array();\n        this._byteData.position = this._offsetSkins;\n        var regExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n        for (var i = 0; i < this._numSkins; ++i) {\n            name = this._byteData.readUTFBytes(64);\n            name = name.replace(regExp, \"\");\n            extIndex = name.lastIndexOf(\".\");\n            if (this._ignoreTexturePath)\n                slashIndex = name.lastIndexOf(\"/\");\n            if (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n                name = name.substring(slashIndex + 1, extIndex);\n                url = name + \".\" + this._textureType;\n            }\n            else {\n                url = name;\n            }\n            this._materialNames[i] = name;\n            // only support 1 skin TODO: really?\n            if (this.dependencies.length == 0)\n                this._pAddDependency(name, new URLRequest_1.default(url));\n        }\n        if (this._materialNames.length > 0)\n            this._sprite.material.name = this._materialNames[0];\n        else\n            this.materialFinal = true;\n    };\n    /**\n     * Parses the uv data for the sprite.\n     */\n    MD2Parser.prototype.parseUV = function () {\n        var j = 0;\n        this._uvs = new Array(this._numST * 2);\n        this._byteData.position = this._offsetST;\n        for (var i = 0; i < this._numST; i++) {\n            this._uvs[j++] = this._byteData.readShort() / this._skinWidth;\n            this._uvs[j++] = this._byteData.readShort() / this._skinHeight;\n        }\n        this._parsedUV = true;\n    };\n    /**\n     * Parses unique indices for the faces.\n     */\n    MD2Parser.prototype.parseFaces = function () {\n        var a /*uint*/, b /*uint*/, c /*uint*/, ta /*uint*/, tb /*uint*/, tc;\n        var i;\n        this._vertIndices = new Array();\n        this._uvIndices = new Array();\n        this._indices = new Array() /*uint*/;\n        this._byteData.position = this._offsetTris;\n        for (i = 0; i < this._numTris; i++) {\n            //collect vertex indices\n            a = this._byteData.readUnsignedShort();\n            b = this._byteData.readUnsignedShort();\n            c = this._byteData.readUnsignedShort();\n            //collect uv indices\n            ta = this._byteData.readUnsignedShort();\n            tb = this._byteData.readUnsignedShort();\n            tc = this._byteData.readUnsignedShort();\n            this.addIndex(a, ta);\n            this.addIndex(b, tb);\n            this.addIndex(c, tc);\n        }\n        var len = this._uvIndices.length;\n        this._finalUV = new Array(len * 2);\n        for (i = 0; i < len; ++i) {\n            this._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n            this._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n        }\n        this._parsedFaces = true;\n    };\n    /**\n     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n     * corresponding vertex and uv data in the correct location.\n     * @param vertexIndex The original index in the vertex list.\n     * @param uvIndex The original index in the uv list.\n     */\n    MD2Parser.prototype.addIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\n        var index = this.findIndex(vertexIndex, uvIndex);\n        if (index == -1) {\n            this._indices.push(this._vertIndices.length);\n            this._vertIndices.push(vertexIndex);\n            this._uvIndices.push(uvIndex);\n        }\n        else\n            this._indices.push(index);\n    };\n    /**\n     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n     * @param vertexIndex The original index in the vertex list.\n     * @param uvIndex The original index in the uv list.\n     * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n     */\n    MD2Parser.prototype.findIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\n        var len = this._vertIndices.length;\n        for (var i = 0; i < len; ++i) {\n            if (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Parses all the frame elements.\n     */\n    MD2Parser.prototype.parseFrames = function () {\n        var sx, sy, sz;\n        var tx, ty, tz;\n        var graphics;\n        var elements;\n        var vertLen = this._vertIndices.length;\n        var fvertices;\n        var tvertices;\n        var i /*uint*/, j /*int*/, k;\n        //var ch : number /*uint*/;\n        var name = \"\";\n        var prevClip = null;\n        this._byteData.position = this._offsetFrames;\n        for (i = 0; i < this._numFrames; i++) {\n            tvertices = new Array();\n            fvertices = new Array(vertLen * 3);\n            sx = this._byteData.readFloat();\n            sy = this._byteData.readFloat();\n            sz = this._byteData.readFloat();\n            tx = this._byteData.readFloat();\n            ty = this._byteData.readFloat();\n            tz = this._byteData.readFloat();\n            name = this.readFrameName();\n            // Note, the extra data.position++ in the for loop is there\n            // to skip over a byte that holds the \"vertex normal index\"\n            for (j = 0; j < this._numVertices; j++, this._byteData.position++)\n                tvertices.push(sx * this._byteData.readUnsignedByte() + tx, sy * this._byteData.readUnsignedByte() + ty, sz * this._byteData.readUnsignedByte() + tz);\n            k = 0;\n            for (j = 0; j < vertLen; j++) {\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3];\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 2];\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 1];\n            }\n            elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n            if (this._firstElements == null)\n                this._firstElements = elements;\n            graphics = new Graphics_1.default();\n            graphics.addGraphic(elements);\n            elements.setIndices(this._indices);\n            elements.setPositions(fvertices);\n            elements.setUVs(this._finalUV);\n            // cause explicit updates\n            elements.setNormals(null);\n            elements.setTangents(null);\n            // turn auto updates off because they may be animated and set explicitly\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            var clip = this._clipNodes[name];\n            if (!clip) {\n                // If another sequence was parsed before this one, starting\n                // a new state means the previous one is complete and can\n                // hence be finalized.\n                if (prevClip) {\n                    this._pFinalizeAsset(prevClip);\n                    this._animationSet.addAnimation(prevClip);\n                }\n                clip = new VertexClipNode_1.default();\n                clip.name = name;\n                clip.stitchFinalFrame = true;\n                this._clipNodes[name] = clip;\n                prevClip = clip;\n            }\n            clip.addFrame(graphics, 1000 / MD2Parser.FPS);\n        }\n        // Finalize the last state\n        if (prevClip) {\n            this._pFinalizeAsset(prevClip);\n            this._animationSet.addAnimation(prevClip);\n        }\n        // Force this._pFinalizeAsset() to decide name\n        this._pFinalizeAsset(this._animationSet);\n        this._parsedFrames = true;\n    };\n    MD2Parser.prototype.readFrameName = function () {\n        var name = \"\";\n        var k = 0;\n        for (var j = 0; j < 16; j++) {\n            var ch = this._byteData.readUnsignedByte();\n            if (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n                name += String.fromCharCode(ch);\n            if (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n                k++;\n        }\n        return name;\n    };\n    MD2Parser.FPS = 6;\n    return MD2Parser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MD2Parser;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/MD5AnimParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nvar MD5AnimParser = (function (_super) {\n    __extends(MD5AnimParser, _super);\n    /**\n     * Creates a new MD5AnimParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function MD5AnimParser(additionalRotationAxis, additionalRotationRadians) {\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\n        _super.call(this, URLLoaderDataFormat_1.default.TEXT);\n        this._parseIndex = 0;\n        this._line = 0;\n        this._charLineIndex = 0;\n        this._rotationQuat = new Quaternion_1.default();\n        var t1 = new Quaternion_1.default();\n        var t2 = new Quaternion_1.default();\n        t1.fromAxisAngle(Vector3D_1.default.X_AXIS, -Math.PI * .5);\n        t2.fromAxisAngle(Vector3D_1.default.Y_AXIS, -Math.PI * .5);\n        this._rotationQuat.multiply(t2, t1);\n        if (additionalRotationAxis) {\n            this._rotationQuat.multiply(t2, t1);\n            t1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n            this._rotationQuat.multiply(t1, this._rotationQuat);\n        }\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD5AnimParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md5anim\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD5AnimParser.supportsData = function (data) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD5AnimParser.prototype._pProceedParsing = function () {\n        var token;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            this._startedParsing = true;\n        }\n        while (this._pHasTime()) {\n            token = this.getNextToken();\n            switch (token) {\n                case MD5AnimParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case \"\":\n                    // can occur at the end of a file\n                    break;\n                case MD5AnimParser.VERSION_TOKEN:\n                    this._version = this.getNextInt();\n                    if (this._version != 10)\n                        throw new Error(\"Unknown version number encountered!\");\n                    break;\n                case MD5AnimParser.COMMAND_LINE_TOKEN:\n                    this.parseCMD();\n                    break;\n                case MD5AnimParser.NUM_FRAMES_TOKEN:\n                    this._numFrames = this.getNextInt();\n                    this._bounds = new Array();\n                    this._frameData = new Array();\n                    break;\n                case MD5AnimParser.NUM_JOINTS_TOKEN:\n                    this._numJoints = this.getNextInt();\n                    this._hierarchy = new Array(this._numJoints);\n                    this._baseFrameData = new Array(this._numJoints);\n                    break;\n                case MD5AnimParser.FRAME_RATE_TOKEN:\n                    this._frameRate = this.getNextInt();\n                    break;\n                case MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n                    this._numAnimatedComponents = this.getNextInt();\n                    break;\n                case MD5AnimParser.HIERARCHY_TOKEN:\n                    this.parseHierarchy();\n                    break;\n                case MD5AnimParser.BOUNDS_TOKEN:\n                    this.parseBounds();\n                    break;\n                case MD5AnimParser.BASE_FRAME_TOKEN:\n                    this.parseBaseFrame();\n                    break;\n                case MD5AnimParser.FRAME_TOKEN:\n                    this.parseFrame();\n                    break;\n                default:\n                    if (!this._reachedEOF)\n                        this.sendUnknownKeywordError();\n            }\n            if (this._reachedEOF) {\n                this._clip = new SkeletonClipNode_1.default();\n                this.translateClip();\n                this._pFinalizeAsset(this._clip);\n                return ParserBase_1.default.PARSING_DONE;\n            }\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    /**\n     * Converts all key frame data to an SkinnedAnimationSequence.\n     */\n    MD5AnimParser.prototype.translateClip = function () {\n        for (var i = 0; i < this._numFrames; ++i)\n            this._clip.addFrame(this.translatePose(this._frameData[i]), 1000 / this._frameRate);\n    };\n    /**\n     * Converts a single key frame data to a SkeletonPose.\n     * @param frameData The actual frame data.\n     * @return A SkeletonPose containing the frame data's pose.\n     */\n    MD5AnimParser.prototype.translatePose = function (frameData) {\n        var hierarchy;\n        var pose;\n        var base;\n        var flags;\n        var j;\n        var translate = new Vector3D_1.default();\n        var orientation = new Quaternion_1.default();\n        var components = frameData.components;\n        var skelPose = new SkeletonPose_1.default();\n        var jointPoses = skelPose.jointPoses;\n        for (var i = 0; i < this._numJoints; ++i) {\n            j = 0;\n            pose = new JointPose_1.default();\n            hierarchy = this._hierarchy[i];\n            base = this._baseFrameData[i];\n            flags = hierarchy.flags;\n            translate.x = base.position.x;\n            translate.y = base.position.y;\n            translate.z = base.position.z;\n            orientation.x = base.orientation.x;\n            orientation.y = base.orientation.y;\n            orientation.z = base.orientation.z;\n            if (flags & 1)\n                translate.x = components[hierarchy.startIndex + (j++)];\n            if (flags & 2)\n                translate.y = components[hierarchy.startIndex + (j++)];\n            if (flags & 4)\n                translate.z = components[hierarchy.startIndex + (j++)];\n            if (flags & 8)\n                orientation.x = components[hierarchy.startIndex + (j++)];\n            if (flags & 16)\n                orientation.y = components[hierarchy.startIndex + (j++)];\n            if (flags & 32)\n                orientation.z = components[hierarchy.startIndex + (j++)];\n            var w = 1 - orientation.x * orientation.x - orientation.y * orientation.y - orientation.z * orientation.z;\n            orientation.w = w < 0 ? 0 : -Math.sqrt(w);\n            if (hierarchy.parentIndex < 0) {\n                pose.orientation.multiply(this._rotationQuat, orientation);\n                pose.translation = this._rotationQuat.rotatePoint(translate);\n            }\n            else {\n                pose.orientation.copyFrom(orientation);\n                pose.translation.x = translate.x;\n                pose.translation.y = translate.y;\n                pose.translation.z = translate.z;\n            }\n            pose.orientation.y = -pose.orientation.y;\n            pose.orientation.z = -pose.orientation.z;\n            pose.translation.x = -pose.translation.x;\n            jointPoses[i] = pose;\n        }\n        return skelPose;\n    };\n    /**\n     * Parses the skeleton's hierarchy data.\n     */\n    MD5AnimParser.prototype.parseHierarchy = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new HierarchyData();\n            data.name = this.parseLiteralstring();\n            data.parentIndex = this.getNextInt();\n            data.flags = this.getNextInt();\n            data.startIndex = this.getNextInt();\n            this._hierarchy[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses frame bounds.\n     */\n    MD5AnimParser.prototype.parseBounds = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new BoundsData();\n            data.min = this.parseVector3D();\n            data.max = this.parseVector3D();\n            this._bounds[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses the base frame.\n     */\n    MD5AnimParser.prototype.parseBaseFrame = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new BaseFrameData();\n            data.position = this.parseVector3D();\n            data.orientation = this.parseQuaternion();\n            this._baseFrameData[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses a single frame.\n     */\n    MD5AnimParser.prototype.parseFrame = function () {\n        var ch;\n        var data;\n        var token;\n        var frameIndex;\n        frameIndex = this.getNextInt();\n        token = this.getNextToken();\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new FrameData();\n            data.components = new Array(this._numAnimatedComponents);\n            for (var i = 0; i < this._numAnimatedComponents; ++i)\n                data.components[i] = this.getNextNumber();\n            this._frameData[frameIndex] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Puts back the last read character into the data stream.\n     */\n    MD5AnimParser.prototype.putBack = function () {\n        this._parseIndex--;\n        this._charLineIndex--;\n        this._reachedEOF = this._parseIndex >= this._textData.length;\n    };\n    /**\n     * Gets the next token in the data stream.\n     */\n    MD5AnimParser.prototype.getNextToken = function () {\n        var ch;\n        var token = \"\";\n        while (!this._reachedEOF) {\n            ch = this.getNextChar();\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n                if (token != MD5AnimParser.COMMENT_TOKEN)\n                    this.skipWhiteSpace();\n                if (token != \"\")\n                    return token;\n            }\n            else\n                token += ch;\n            if (token == MD5AnimParser.COMMENT_TOKEN)\n                return token;\n        }\n        return token;\n    };\n    /**\n     * Skips all whitespace in the data stream.\n     */\n    MD5AnimParser.prototype.skipWhiteSpace = function () {\n        var ch;\n        do\n            ch = this.getNextChar();\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n        this.putBack();\n    };\n    /**\n     * Skips to the next line.\n     */\n    MD5AnimParser.prototype.ignoreLine = function () {\n        var ch;\n        while (!this._reachedEOF && ch != \"\\n\")\n            ch = this.getNextChar();\n    };\n    /**\n     * Retrieves the next single character in the data stream.\n     */\n    MD5AnimParser.prototype.getNextChar = function () {\n        var ch = this._textData.charAt(this._parseIndex++);\n        if (ch == \"\\n\") {\n            ++this._line;\n            this._charLineIndex = 0;\n        }\n        else if (ch != \"\\r\")\n            ++this._charLineIndex;\n        if (this._parseIndex == this._textData.length)\n            this._reachedEOF = true;\n        return ch;\n    };\n    /**\n     * Retrieves the next integer in the data stream.\n     */\n    MD5AnimParser.prototype.getNextInt = function () {\n        var i = parseInt(this.getNextToken());\n        if (isNaN(i))\n            this.sendParseError(\"int type\");\n        return i;\n    };\n    /**\n     * Retrieves the next floating point number in the data stream.\n     */\n    MD5AnimParser.prototype.getNextNumber = function () {\n        var f = parseFloat(this.getNextToken());\n        if (isNaN(f))\n            this.sendParseError(\"float type\");\n        return f;\n    };\n    /**\n     * Retrieves the next 3d vector in the data stream.\n     */\n    MD5AnimParser.prototype.parseVector3D = function () {\n        var vec = new Vector3D_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        vec.x = this.getNextNumber();\n        vec.y = this.getNextNumber();\n        vec.z = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return vec;\n    };\n    /**\n     * Retrieves the next quaternion in the data stream.\n     */\n    MD5AnimParser.prototype.parseQuaternion = function () {\n        var quat = new Quaternion_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        quat.x = this.getNextNumber();\n        quat.y = this.getNextNumber();\n        quat.z = this.getNextNumber();\n        // quat supposed to be unit length\n        var t = 1 - (quat.x * quat.x) - (quat.y * quat.y) - (quat.z * quat.z);\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return quat;\n    };\n    /**\n     * Parses the command line data.\n     */\n    MD5AnimParser.prototype.parseCMD = function () {\n        // just ignore the command line property\n        this.parseLiteralstring();\n    };\n    /**\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n     * by double quotes.\n     */\n    MD5AnimParser.prototype.parseLiteralstring = function () {\n        this.skipWhiteSpace();\n        var ch = this.getNextChar();\n        var str = \"\";\n        if (ch != \"\\\"\")\n            this.sendParseError(\"\\\"\");\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            ch = this.getNextChar();\n            if (ch != \"\\\"\")\n                str += ch;\n        } while (ch != \"\\\"\");\n        return str;\n    };\n    /**\n     * Throws an end-of-file error when a premature end of file was encountered.\n     */\n    MD5AnimParser.prototype.sendEOFError = function () {\n        throw new Error(\"Unexpected end of file\");\n    };\n    /**\n     * Throws an error when an unexpected token was encountered.\n     * @param expected The token type that was actually expected.\n     */\n    MD5AnimParser.prototype.sendParseError = function (expected) {\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n    };\n    /**\n     * Throws an error when an unknown keyword was encountered.\n     */\n    MD5AnimParser.prototype.sendUnknownKeywordError = function () {\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n    };\n    MD5AnimParser.VERSION_TOKEN = \"MD5Version\";\n    MD5AnimParser.COMMAND_LINE_TOKEN = \"commandline\";\n    MD5AnimParser.NUM_FRAMES_TOKEN = \"numFrames\";\n    MD5AnimParser.NUM_JOINTS_TOKEN = \"numJoints\";\n    MD5AnimParser.FRAME_RATE_TOKEN = \"frameRate\";\n    MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN = \"numAnimatedComponents\";\n    MD5AnimParser.HIERARCHY_TOKEN = \"hierarchy\";\n    MD5AnimParser.BOUNDS_TOKEN = \"bounds\";\n    MD5AnimParser.BASE_FRAME_TOKEN = \"baseframe\";\n    MD5AnimParser.FRAME_TOKEN = \"frame\";\n    MD5AnimParser.COMMENT_TOKEN = \"//\";\n    return MD5AnimParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MD5AnimParser;\n/**\n *\n */\nvar BaseFrameData = (function () {\n    function BaseFrameData() {\n    }\n    return BaseFrameData;\n}());\n/**\n *\n */\nvar BoundsData = (function () {\n    function BoundsData() {\n    }\n    return BoundsData;\n}());\n/**\n *\n */\nvar FrameData = (function () {\n    function FrameData() {\n    }\n    return FrameData;\n}());\n/**\n *\n */\nvar HierarchyData = (function () {\n    function HierarchyData() {\n    }\n    return HierarchyData;\n}());\n\n},{\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined}],\"awayjs-parsers/lib/MD5MeshParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n// todo: create animation system, parse skeleton\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nvar MD5MeshParser = (function (_super) {\n    __extends(MD5MeshParser, _super);\n    /**\n     * Creates a new MD5MeshParser object.\n     */\n    function MD5MeshParser(additionalRotationAxis, additionalRotationRadians) {\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\n        _super.call(this, URLLoaderDataFormat_1.default.TEXT);\n        this._parseIndex = 0;\n        this._line = 0;\n        this._charLineIndex = 0;\n        this._rotationQuat = new Quaternion_1.default();\n        this._rotationQuat.fromAxisAngle(Vector3D_1.default.X_AXIS, -Math.PI * .5);\n        if (additionalRotationAxis) {\n            var quat = new Quaternion_1.default();\n            quat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n            this._rotationQuat.multiply(this._rotationQuat, quat);\n        }\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD5MeshParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md5sprite\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD5MeshParser.supportsData = function (data) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD5MeshParser.prototype._pProceedParsing = function () {\n        var token;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            this._startedParsing = true;\n        }\n        while (this._pHasTime()) {\n            token = this.getNextToken();\n            switch (token) {\n                case MD5MeshParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case MD5MeshParser.VERSION_TOKEN:\n                    this._version = this.getNextInt();\n                    if (this._version != 10)\n                        throw new Error(\"Unknown version number encountered!\");\n                    break;\n                case MD5MeshParser.COMMAND_LINE_TOKEN:\n                    this.parseCMD();\n                    break;\n                case MD5MeshParser.NUM_JOINTS_TOKEN:\n                    this._numJoints = this.getNextInt();\n                    this._bindPoses = new Array(this._numJoints);\n                    break;\n                case MD5MeshParser.NUM_MESHES_TOKEN:\n                    this._numMeshes = this.getNextInt();\n                    break;\n                case MD5MeshParser.JOINTS_TOKEN:\n                    this.parseJoints();\n                    break;\n                case MD5MeshParser.MESH_TOKEN:\n                    this.parseMesh();\n                    break;\n                default:\n                    if (!this._reachedEOF)\n                        this.sendUnknownKeywordError();\n            }\n            if (this._reachedEOF) {\n                this.calculateMaxJointCount();\n                this._animationSet = new SkeletonAnimationSet_1.default(this._maxJointCount);\n                this._sprite = new Sprite_1.default();\n                this._graphics = this._sprite.graphics;\n                for (var i = 0; i < this._elementsData.length; ++i)\n                    this._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\n                //_graphics.animation = _animation;\n                //\t\t\t\t\t_sprite.animationController = _animationController;\n                //add to the content property\n                this._pContent.addChild(this._sprite);\n                this._pFinalizeAsset(this._graphics);\n                this._pFinalizeAsset(this._sprite);\n                this._pFinalizeAsset(this._skeleton);\n                this._pFinalizeAsset(this._animationSet);\n                return ParserBase_1.default.PARSING_DONE;\n            }\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    MD5MeshParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    MD5MeshParser.prototype.calculateMaxJointCount = function () {\n        this._maxJointCount = 0;\n        var numElementsData = this._elementsData.length;\n        for (var i = 0; i < numElementsData; ++i) {\n            var elementsData = this._elementsData[i];\n            var positionData = elementsData.positionData;\n            var numVerts = positionData.length;\n            for (var j = 0; j < numVerts; ++j) {\n                var zeroWeights = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\n                var totalJoints = positionData[j].countWeight - zeroWeights;\n                if (totalJoints > this._maxJointCount)\n                    this._maxJointCount = totalJoints;\n            }\n        }\n    };\n    MD5MeshParser.prototype.countZeroWeightJoints = function (position, weights) {\n        var start = position.startWeight;\n        var end = position.startWeight + position.countWeight;\n        var count = 0;\n        var weight;\n        for (var i = start; i < end; ++i) {\n            weight = weights[i].bias;\n            if (weight == 0)\n                ++count;\n        }\n        return count;\n    };\n    /**\n     * Parses the skeleton's joints.\n     */\n    MD5MeshParser.prototype.parseJoints = function () {\n        var ch;\n        var joint;\n        var pos;\n        var quat;\n        var i = 0;\n        var token = this.getNextToken();\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        this._skeleton = new Skeleton_1.default();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            joint = new SkeletonJoint_1.default();\n            joint.name = this.parseLiteralstring();\n            joint.parentIndex = this.getNextInt();\n            pos = this.parseVector3D();\n            pos = this._rotationQuat.rotatePoint(pos);\n            quat = this.parseQuaternion();\n            // todo: check if this is correct, or maybe we want to actually store it as quats?\n            this._bindPoses[i] = quat.toMatrix3D();\n            this._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n            var inv = this._bindPoses[i].clone();\n            inv.invert();\n            joint.inverseBindPose = inv.rawData;\n            this._skeleton.joints[i++] = joint;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5MeshParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Puts back the last read character into the data stream.\n     */\n    MD5MeshParser.prototype.putBack = function () {\n        this._parseIndex--;\n        this._charLineIndex--;\n        this._reachedEOF = this._parseIndex >= this._textData.length;\n    };\n    /**\n     * Parses the mesh graphics.\n     */\n    MD5MeshParser.prototype.parseMesh = function () {\n        var token = this.getNextToken();\n        var ch;\n        var positionData;\n        var weights;\n        var indices;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        if (this._shaders == null)\n            this._shaders = new Array();\n        while (ch != \"}\") {\n            ch = this.getNextToken();\n            switch (ch) {\n                case MD5MeshParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case MD5MeshParser.MESH_SHADER_TOKEN:\n                    this._shaders.push(this.parseLiteralstring());\n                    break;\n                case MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n                    positionData = new Array(this.getNextInt());\n                    break;\n                case MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n                    indices = new Array(this.getNextInt() * 3) /*uint*/;\n                    break;\n                case MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n                    weights = new Array(this.getNextInt());\n                    break;\n                case MD5MeshParser.MESH_VERT_TOKEN:\n                    this.parseVertex(positionData);\n                    break;\n                case MD5MeshParser.MESH_TRI_TOKEN:\n                    this.parseTri(indices);\n                    break;\n                case MD5MeshParser.MESH_WEIGHT_TOKEN:\n                    this.parseJoint(weights);\n                    break;\n            }\n        }\n        if (this._elementsData == null)\n            this._elementsData = new Array();\n        var i = this._elementsData.length;\n        this._elementsData[i] = new ElementsData();\n        this._elementsData[i].positionData = positionData;\n        this._elementsData[i].weightData = weights;\n        this._elementsData[i].indices = indices;\n    };\n    /**\n     * Converts the sprite data to a SkinnedSub instance.\n     * @param positionData The sprite's positions.\n     * @param weights The joint weights per position.\n     * @param indices The indices for the faces.\n     * @return A TriangleElements instance containing all elements data for the current sprite.\n     */\n    MD5MeshParser.prototype.translateElements = function (positionData, weights, indices /*uint*/) {\n        var len = positionData.length;\n        var v1 /*int*/, v2 /*int*/, v3;\n        var position;\n        var weight;\n        var bindPose;\n        var pos;\n        var elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n        var uvs = new Array(len * 2);\n        var positions = new Array(len * 3);\n        var jointIndices = new Array(len * this._maxJointCount);\n        var jointWeights = new Array(len * this._maxJointCount);\n        var l = 0;\n        var nonZeroWeights;\n        for (var i = 0; i < len; ++i) {\n            position = positionData[i];\n            v1 = position.index * 3;\n            v2 = v1 + 1;\n            v3 = v1 + 2;\n            positions[v1] = positions[v2] = positions[v3] = 0;\n            nonZeroWeights = 0;\n            for (var j = 0; j < position.countWeight; ++j) {\n                weight = weights[position.startWeight + j];\n                if (weight.bias > 0) {\n                    bindPose = this._bindPoses[weight.joint];\n                    pos = bindPose.transformVector(weight.pos);\n                    positions[v1] += pos.x * weight.bias;\n                    positions[v2] += pos.y * weight.bias;\n                    positions[v3] += pos.z * weight.bias;\n                    // indices need to be multiplied by 3 (amount of matrix registers)\n                    jointIndices[l] = weight.joint * 3;\n                    jointWeights[l++] = weight.bias;\n                    ++nonZeroWeights;\n                }\n            }\n            for (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n                jointIndices[l] = 0;\n                jointWeights[l++] = 0;\n            }\n            v1 = position.index << 1;\n            uvs[v1++] = position.s;\n            uvs[v1] = position.t;\n        }\n        elements.jointsPerVertex = this._maxJointCount;\n        elements.setIndices(indices);\n        elements.setPositions(positions);\n        elements.setUVs(uvs);\n        elements.setJointIndices(jointIndices);\n        elements.setJointWeights(jointWeights);\n        // cause explicit updates\n        elements.setNormals(null);\n        elements.setTangents(null);\n        // turn auto updates off because they may be animated and set explicitly\n        elements.autoDeriveTangents = false;\n        elements.autoDeriveNormals = false;\n        return elements;\n    };\n    /**\n     * Retrieve the next triplet of position indices that form a face.\n     * @param indices The index list in which to store the read data.\n     */\n    MD5MeshParser.prototype.parseTri = function (indices /*uint*/) {\n        var index = this.getNextInt() * 3;\n        indices[index] = this.getNextInt();\n        indices[index + 1] = this.getNextInt();\n        indices[index + 2] = this.getNextInt();\n    };\n    /**\n     * Reads a new joint data set for a single joint.\n     * @param weights the target list to contain the weight data.\n     */\n    MD5MeshParser.prototype.parseJoint = function (weights) {\n        var weight = new JointData();\n        weight.index = this.getNextInt();\n        weight.joint = this.getNextInt();\n        weight.bias = this.getNextNumber();\n        weight.pos = this.parseVector3D();\n        weights[weight.index] = weight;\n    };\n    /**\n     * Reads the data for a single position.\n     * @param positionData The list to contain the position data.\n     */\n    MD5MeshParser.prototype.parseVertex = function (positionData) {\n        var position = new PositionData();\n        position.index = this.getNextInt();\n        this.parseUV(position);\n        position.startWeight = this.getNextInt();\n        position.countWeight = this.getNextInt();\n        //\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\n        positionData[position.index] = position;\n    };\n    /**\n     * Reads the next uv coordinate.\n     * @param positionData The positionData to contain the UV coordinates.\n     */\n    MD5MeshParser.prototype.parseUV = function (positionData) {\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        positionData.s = this.getNextNumber();\n        positionData.t = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n    };\n    /**\n     * Gets the next token in the data stream.\n     */\n    MD5MeshParser.prototype.getNextToken = function () {\n        var ch;\n        var token = \"\";\n        while (!this._reachedEOF) {\n            ch = this.getNextChar();\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n                if (token != MD5MeshParser.COMMENT_TOKEN)\n                    this.skipWhiteSpace();\n                if (token != \"\")\n                    return token;\n            }\n            else\n                token += ch;\n            if (token == MD5MeshParser.COMMENT_TOKEN)\n                return token;\n        }\n        return token;\n    };\n    /**\n     * Skips all whitespace in the data stream.\n     */\n    MD5MeshParser.prototype.skipWhiteSpace = function () {\n        var ch;\n        do\n            ch = this.getNextChar();\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n        this.putBack();\n    };\n    /**\n     * Skips to the next line.\n     */\n    MD5MeshParser.prototype.ignoreLine = function () {\n        var ch;\n        while (!this._reachedEOF && ch != \"\\n\")\n            ch = this.getNextChar();\n    };\n    /**\n     * Retrieves the next single character in the data stream.\n     */\n    MD5MeshParser.prototype.getNextChar = function () {\n        var ch = this._textData.charAt(this._parseIndex++);\n        if (ch == \"\\n\") {\n            ++this._line;\n            this._charLineIndex = 0;\n        }\n        else if (ch != \"\\r\")\n            ++this._charLineIndex;\n        if (this._parseIndex >= this._textData.length)\n            this._reachedEOF = true;\n        return ch;\n    };\n    /**\n     * Retrieves the next integer in the data stream.\n     */\n    MD5MeshParser.prototype.getNextInt = function () {\n        var i = parseInt(this.getNextToken());\n        if (isNaN(i))\n            this.sendParseError(\"int type\");\n        return i;\n    };\n    /**\n     * Retrieves the next floating point number in the data stream.\n     */\n    MD5MeshParser.prototype.getNextNumber = function () {\n        var f = parseFloat(this.getNextToken());\n        if (isNaN(f))\n            this.sendParseError(\"float type\");\n        return f;\n    };\n    /**\n     * Retrieves the next 3d vector in the data stream.\n     */\n    MD5MeshParser.prototype.parseVector3D = function () {\n        var vec = new Vector3D_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        vec.x = -this.getNextNumber();\n        vec.y = this.getNextNumber();\n        vec.z = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return vec;\n    };\n    /**\n     * Retrieves the next quaternion in the data stream.\n     */\n    MD5MeshParser.prototype.parseQuaternion = function () {\n        var quat = new Quaternion_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        quat.x = this.getNextNumber();\n        quat.y = -this.getNextNumber();\n        quat.z = -this.getNextNumber();\n        // quat supposed to be unit length\n        var t = 1 - quat.x * quat.x - quat.y * quat.y - quat.z * quat.z;\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        var rotQuat = new Quaternion_1.default();\n        rotQuat.multiply(this._rotationQuat, quat);\n        return rotQuat;\n    };\n    /**\n     * Parses the command line data.\n     */\n    MD5MeshParser.prototype.parseCMD = function () {\n        // just ignore the command line property\n        this.parseLiteralstring();\n    };\n    /**\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n     * by double quotes.\n     */\n    MD5MeshParser.prototype.parseLiteralstring = function () {\n        this.skipWhiteSpace();\n        var ch = this.getNextChar();\n        var str = \"\";\n        if (ch != \"\\\"\")\n            this.sendParseError(\"\\\"\");\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            ch = this.getNextChar();\n            if (ch != \"\\\"\")\n                str += ch;\n        } while (ch != \"\\\"\");\n        return str;\n    };\n    /**\n     * Throws an end-of-file error when a premature end of file was encountered.\n     */\n    MD5MeshParser.prototype.sendEOFError = function () {\n        throw new Error(\"Unexpected end of file\");\n    };\n    /**\n     * Throws an error when an unexpected token was encountered.\n     * @param expected The token type that was actually expected.\n     */\n    MD5MeshParser.prototype.sendParseError = function (expected) {\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n    };\n    /**\n     * Throws an error when an unknown keyword was encountered.\n     */\n    MD5MeshParser.prototype.sendUnknownKeywordError = function () {\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n    };\n    MD5MeshParser.VERSION_TOKEN = \"MD5Version\";\n    MD5MeshParser.COMMAND_LINE_TOKEN = \"commandline\";\n    MD5MeshParser.NUM_JOINTS_TOKEN = \"numJoints\";\n    MD5MeshParser.NUM_MESHES_TOKEN = \"numMeshes\";\n    MD5MeshParser.COMMENT_TOKEN = \"//\";\n    MD5MeshParser.JOINTS_TOKEN = \"joints\";\n    MD5MeshParser.MESH_TOKEN = \"mesh\";\n    MD5MeshParser.MESH_SHADER_TOKEN = \"shader\";\n    MD5MeshParser.MESH_NUM_VERTS_TOKEN = \"numverts\";\n    MD5MeshParser.MESH_VERT_TOKEN = \"vert\";\n    MD5MeshParser.MESH_NUM_TRIS_TOKEN = \"numtris\";\n    MD5MeshParser.MESH_TRI_TOKEN = \"tri\";\n    MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN = \"numweights\";\n    MD5MeshParser.MESH_WEIGHT_TOKEN = \"weight\";\n    return MD5MeshParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MD5MeshParser;\nvar PositionData = (function () {\n    function PositionData() {\n    }\n    return PositionData;\n}());\nvar JointData = (function () {\n    function JointData() {\n    }\n    return JointData;\n}());\nvar ElementsData = (function () {\n    function ElementsData() {\n    }\n    return ElementsData;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined}],\"awayjs-parsers/lib/Max3DSParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nvar Max3DSParser = (function (_super) {\n    __extends(Max3DSParser, _super);\n    /**\n     * Creates a new <code>Max3DSParser</code> object.\n     *\n     * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n     */\n    function Max3DSParser(useSmoothingGroups) {\n        if (useSmoothingGroups === void 0) { useSmoothingGroups = true; }\n        _super.call(this, URLLoaderDataFormat_1.default.ARRAY_BUFFER);\n        this._useSmoothingGroups = useSmoothingGroups;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    Max3DSParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"3ds\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    Max3DSParser.supportsData = function (data) {\n        var ba;\n        ba = ParserUtils_1.default.toByteArray(data);\n        if (ba) {\n            ba.position = 0;\n            if (ba.readShort() == 0x4d4d)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length == 1) {\n            var asset;\n            asset = resourceDependency.assets[0];\n            if (asset.isAsset(BitmapImage2D_1.default)) {\n                var tex;\n                tex = this._textures[resourceDependency.id];\n                tex.texture = new Single2DTexture_1.default(asset);\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        // TODO: Implement\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._pProceedParsing = function () {\n        if (!this._byteData) {\n            this._byteData = this._pGetByteData();\n            this._byteData.position = 0;\n            //----------------------------------------------------------------------------\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n            //----------------------------------------------------------------------------\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n            //----------------------------------------------------------------------------\n            this._textures = {};\n            this._materials = {};\n            this._unfinalized_objects = {};\n        }\n        // TODO: With this construct, the loop will run no-op for as long\n        // as there is time once file has finished reading. Consider a nice\n        // way to stop loop when byte array is empty, without putting it in\n        // the while-conditional, which will prevent finalizations from\n        // happening after the last chunk.\n        while (this._pHasTime()) {\n            // If we are currently working on an object, and the most recent chunk was\n            // the last one in that object, finalize the current object.\n            if (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n                this.finalizeCurrentMaterial();\n            else if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n                // Can't finalize at this point, because we have to wait until the full\n                // animation section has been parsed for any potential pivot definitions\n                this._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n                this._cur_obj_end = Number.MAX_VALUE /*uint*/;\n                this._cur_obj = null;\n            }\n            if (this._byteData.getBytesAvailable() > 0) {\n                var cid;\n                var len;\n                var end;\n                cid = this._byteData.readUnsignedShort();\n                len = this._byteData.readUnsignedInt();\n                end = this._byteData.position + (len - 6);\n                switch (cid) {\n                    case 0x4D4D: // MAIN3DS\n                    case 0x3D3D: // EDIT3DS\n                    case 0xB000:\n                        // This types are \"container chunks\" and contain only\n                        // sub-chunks (no data on their own.) This means that\n                        // there is nothing more to parse at this point, and\n                        // instead we should progress to the next chunk, which\n                        // will be the first sub-chunk of this one.\n                        continue;\n                    case 0xAFFF:\n                        this._cur_mat_end = end;\n                        this._cur_mat = this.parseMaterial();\n                        break;\n                    case 0x4000:\n                        this._cur_obj_end = end;\n                        this._cur_obj = new ObjectVO();\n                        this._cur_obj.name = this.readNulTermstring();\n                        this._cur_obj.materials = new Array();\n                        this._cur_obj.materialFaces = {};\n                        break;\n                    case 0x4100:\n                        this._cur_obj.type = Sprite_1.default.assetType;\n                        break;\n                    case 0x4110:\n                        this.parseVertexList();\n                        break;\n                    case 0x4120:\n                        this.parseFaceList();\n                        break;\n                    case 0x4140:\n                        this.parseUVList();\n                        break;\n                    case 0x4130:\n                        this.parseFaceMaterialList();\n                        break;\n                    case 0x4160:\n                        this._cur_obj.transform = this.readTransform();\n                        break;\n                    case 0xB002:\n                        this.parseObjectAnimation(end);\n                        break;\n                    case 0x4150:\n                        this.parseSmoothingGroups();\n                        break;\n                    default:\n                        // Skip this (unknown) chunk\n                        this._byteData.position += (len - 6);\n                        break;\n                }\n                // Pause parsing if there were any dependencies found during this\n                // iteration (i.e. if there are any dependencies that need to be\n                // retrieved at this time.)\n                if (this.dependencies.length) {\n                    this._pPauseAndRetrieveDependencies();\n                    break;\n                }\n            }\n        }\n        // More parsing is required if the entire byte array has not yet\n        // been read, or if there is a currently non-finalized object in\n        // the pipeline.\n        if (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n            return ParserBase_1.default.MORE_TO_PARSE;\n        }\n        else {\n            var name;\n            // Finalize any remaining objects before ending.\n            for (name in this._unfinalized_objects) {\n                var obj;\n                obj = this.constructObject(this._unfinalized_objects[name]);\n                if (obj) {\n                    //add to the content property\n                    this._pContent.addChild(obj);\n                    this._pFinalizeAsset(obj, name);\n                }\n            }\n            return ParserBase_1.default.PARSING_DONE;\n        }\n    };\n    Max3DSParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    Max3DSParser.prototype.parseMaterial = function () {\n        var mat;\n        mat = new MaterialVO();\n        while (this._byteData.position < this._cur_mat_end) {\n            var cid;\n            var len;\n            var end;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            end = this._byteData.position + (len - 6);\n            switch (cid) {\n                case 0xA000:\n                    mat.name = this.readNulTermstring();\n                    break;\n                case 0xA010:\n                    mat.ambientColor = this.readColor();\n                    break;\n                case 0xA020:\n                    mat.diffuseColor = this.readColor();\n                    break;\n                case 0xA030:\n                    mat.specularColor = this.readColor();\n                    break;\n                case 0xA081:\n                    mat.twoSided = true;\n                    break;\n                case 0xA200:\n                    mat.colorMap = this.parseTexture(end);\n                    break;\n                case 0xA204:\n                    mat.specularMap = this.parseTexture(end);\n                    break;\n                default:\n                    this._byteData.position = end;\n                    break;\n            }\n        }\n        return mat;\n    };\n    Max3DSParser.prototype.parseTexture = function (end /*uint*/) {\n        var tex;\n        tex = new TextureVO();\n        while (this._byteData.position < end) {\n            var cid;\n            var len;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            switch (cid) {\n                case 0xA300:\n                    tex.url = this.readNulTermstring();\n                    break;\n                default:\n                    // Skip this unknown texture sub-chunk\n                    this._byteData.position += (len - 6);\n                    break;\n            }\n        }\n        this._textures[tex.url] = tex;\n        this._pAddDependency(tex.url, new URLRequest_1.default(tex.url));\n        return tex;\n    };\n    Max3DSParser.prototype.parseVertexList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.verts = new Array(count * 3);\n        i = 0;\n        len = this._cur_obj.verts.length;\n        while (i < len) {\n            var x, y, z;\n            x = this._byteData.readFloat();\n            y = this._byteData.readFloat();\n            z = this._byteData.readFloat();\n            this._cur_obj.verts[i++] = x;\n            this._cur_obj.verts[i++] = z;\n            this._cur_obj.verts[i++] = y;\n        }\n    };\n    Max3DSParser.prototype.parseFaceList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.indices = new Array(count * 3) /*uint*/;\n        i = 0;\n        len = this._cur_obj.indices.length;\n        while (i < len) {\n            var i0 /*uint*/, i1 /*uint*/, i2;\n            i0 = this._byteData.readUnsignedShort();\n            i1 = this._byteData.readUnsignedShort();\n            i2 = this._byteData.readUnsignedShort();\n            this._cur_obj.indices[i++] = i0;\n            this._cur_obj.indices[i++] = i2;\n            this._cur_obj.indices[i++] = i1;\n            // Skip \"face info\", irrelevant in Away3D\n            this._byteData.position += 2;\n        }\n        this._cur_obj.smoothingGroups = new Array(count) /*uint*/;\n    };\n    Max3DSParser.prototype.parseSmoothingGroups = function () {\n        var len = this._cur_obj.indices.length / 3;\n        var i = 0;\n        while (i < len) {\n            this._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n            i++;\n        }\n    };\n    Max3DSParser.prototype.parseUVList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.uvs = new Array(count * 2);\n        i = 0;\n        len = this._cur_obj.uvs.length;\n        while (i < len) {\n            this._cur_obj.uvs[i++] = this._byteData.readFloat();\n            this._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n        }\n    };\n    Max3DSParser.prototype.parseFaceMaterialList = function () {\n        var mat;\n        var count;\n        var i;\n        var faces;\n        mat = this.readNulTermstring();\n        count = this._byteData.readUnsignedShort();\n        faces = new Array(count) /*uint*/;\n        i = 0;\n        while (i < faces.length)\n            faces[i++] = this._byteData.readUnsignedShort();\n        this._cur_obj.materials.push(mat);\n        this._cur_obj.materialFaces[mat] = faces;\n    };\n    Max3DSParser.prototype.parseObjectAnimation = function (end) {\n        var vo;\n        var obj;\n        var pivot;\n        var name;\n        var hier;\n        // Pivot defaults to origin\n        pivot = new Vector3D_1.default;\n        while (this._byteData.position < end) {\n            var cid;\n            var len;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            switch (cid) {\n                case 0xb010:\n                    name = this.readNulTermstring();\n                    this._byteData.position += 4;\n                    hier = this._byteData.readShort();\n                    break;\n                case 0xb013:\n                    pivot.x = this._byteData.readFloat();\n                    pivot.z = this._byteData.readFloat();\n                    pivot.y = this._byteData.readFloat();\n                    break;\n                default:\n                    this._byteData.position += (len - 6);\n                    break;\n            }\n        }\n        // If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n        // and will be ignored in this version of the parser\n        // TODO: Implement containers in 3DS parser.\n        if (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n            vo = this._unfinalized_objects[name];\n            obj = this.constructObject(vo, pivot);\n            if (obj) {\n                //add to the content property\n                this._pContent.addChild(obj);\n                this._pFinalizeAsset(obj, vo.name);\n            }\n            delete this._unfinalized_objects[name];\n        }\n    };\n    Max3DSParser.prototype.constructObject = function (obj, pivot) {\n        if (pivot === void 0) { pivot = null; }\n        if (obj.type == Sprite_1.default.assetType) {\n            var i;\n            var sub;\n            var graphics;\n            var mat;\n            var sprite;\n            var mtx;\n            var vertices;\n            var faces;\n            if (obj.materials.length > 1)\n                console.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\n            // Ignore empty objects\n            if (!obj.indices || obj.indices.length == 0)\n                return null;\n            vertices = new Array(obj.verts.length / 3);\n            faces = new Array(obj.indices.length / 3);\n            this.prepareData(vertices, faces, obj);\n            if (this._useSmoothingGroups)\n                this.applySmoothGroups(vertices, faces);\n            obj.verts = new Array(vertices.length * 3);\n            for (i = 0; i < vertices.length; i++) {\n                obj.verts[i * 3] = vertices[i].x;\n                obj.verts[i * 3 + 1] = vertices[i].y;\n                obj.verts[i * 3 + 2] = vertices[i].z;\n            }\n            obj.indices = new Array(faces.length * 3) /*uint*/;\n            for (i = 0; i < faces.length; i++) {\n                obj.indices[i * 3] = faces[i].a;\n                obj.indices[i * 3 + 1] = faces[i].b;\n                obj.indices[i * 3 + 2] = faces[i].c;\n            }\n            if (obj.uvs) {\n                // If the object had UVs to start with, use UVs generated by\n                // smoothing group splitting algorithm. Otherwise those UVs\n                // will be nonsense and should be skipped.\n                obj.uvs = new Array(vertices.length * 2);\n                for (i = 0; i < vertices.length; i++) {\n                    obj.uvs[i * 2] = vertices[i].u;\n                    obj.uvs[i * 2 + 1] = vertices[i].v;\n                }\n            }\n            if (obj.materials.length > 0) {\n                var mname;\n                mname = obj.materials[0];\n                mat = this._materials[mname].material;\n            }\n            // Build sprite and return it\n            sprite = new Sprite_1.default(mat);\n            sprite.transform.matrix3D = new Matrix3D_1.default(obj.transform);\n            graphics = sprite.graphics;\n            // Construct elements (potentially splitting buffers)\n            // and add them to graphics.\n            sub = new TriangleElements_1.default(new AttributesBuffer_1.default());\n            sub.setIndices(obj.indices);\n            sub.setPositions(obj.verts);\n            sub.setUVs(obj.uvs);\n            graphics.addGraphic(sub);\n            // Apply pivot translation to graphics if a pivot was\n            // found while parsing the keyframe chunk earlier.\n            if (pivot) {\n                if (obj.transform) {\n                    // If a transform was found while parsing the\n                    // object chunk, use it to find the local pivot vector\n                    mtx = new Matrix3D_1.default(obj.transform);\n                    mtx.rawData[12] = 0;\n                    mtx.rawData[13] = 0;\n                    mtx.rawData[14] = 0;\n                    pivot = mtx.transformVector(pivot);\n                }\n                pivot.scaleBy(-1);\n                mtx = new Matrix3D_1.default();\n                mtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n                graphics.applyTransformation(mtx);\n            }\n            // Apply transformation to graphics if a transformation\n            // was found while parsing the object chunk earlier.\n            if (obj.transform) {\n                mtx = new Matrix3D_1.default(obj.transform);\n                mtx.invert();\n                graphics.applyTransformation(mtx);\n            }\n            // Final transform applied to graphics. Finalize the graphics,\n            // which will no longer be modified after this point.\n            this._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n            return sprite;\n        }\n        // If reached, unknown\n        return null;\n    };\n    Max3DSParser.prototype.prepareData = function (vertices, faces, obj) {\n        // convert raw ObjectVO's data to structured VertexVO and FaceVO\n        var i;\n        var j;\n        var k;\n        var len = obj.verts.length;\n        for (i = 0, j = 0, k = 0; i < len;) {\n            var v = new VertexVO;\n            v.x = obj.verts[i++];\n            v.y = obj.verts[i++];\n            v.z = obj.verts[i++];\n            if (obj.uvs) {\n                v.u = obj.uvs[j++];\n                v.v = obj.uvs[j++];\n            }\n            vertices[k++] = v;\n        }\n        len = obj.indices.length;\n        for (i = 0, k = 0; i < len;) {\n            var f = new FaceVO();\n            f.a = obj.indices[i++];\n            f.b = obj.indices[i++];\n            f.c = obj.indices[i++];\n            f.smoothGroup = obj.smoothingGroups[k] || 0;\n            faces[k++] = f;\n        }\n    };\n    Max3DSParser.prototype.applySmoothGroups = function (vertices, faces) {\n        // clone vertices according to following rule:\n        // clone if vertex's in faces from groups 1+2 and 3\n        // don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n        var i;\n        var j;\n        var k;\n        var l;\n        var len;\n        var numVerts = vertices.length;\n        var numFaces = faces.length;\n        // extract groups data for vertices\n        var vGroups = new Array(numVerts);\n        for (i = 0; i < numVerts; i++)\n            vGroups[i] = new Array() /*uint*/;\n        for (i = 0; i < numFaces; i++) {\n            var face = faces[i];\n            for (j = 0; j < 3; j++) {\n                var groups = vGroups[(j == 0) ? face.a : ((j == 1) ? face.b : face.c)];\n                var group = face.smoothGroup;\n                for (k = groups.length - 1; k >= 0; k--) {\n                    if ((group & groups[k]) > 0) {\n                        group |= groups[k];\n                        groups.splice(k, 1);\n                        k = groups.length - 1;\n                    }\n                }\n                groups.push(group);\n            }\n        }\n        // clone vertices\n        var vClones = new Array(numVerts);\n        for (i = 0; i < numVerts; i++) {\n            if ((len = vGroups[i].length) < 1)\n                continue;\n            var clones = new Array(len);\n            vClones[i] = clones;\n            clones[0] = i;\n            var v0 = vertices[i];\n            for (j = 1; j < len; j++) {\n                var v1 = new VertexVO;\n                v1.x = v0.x;\n                v1.y = v0.y;\n                v1.z = v0.z;\n                v1.u = v0.u;\n                v1.v = v0.v;\n                clones[j] = vertices.length;\n                vertices.push(v1);\n            }\n        }\n        numVerts = vertices.length;\n        for (i = 0; i < numFaces; i++) {\n            face = faces[i];\n            group = face.smoothGroup;\n            for (j = 0; j < 3; j++) {\n                k = (j == 0) ? face.a : ((j == 1) ? face.b : face.c);\n                groups = vGroups[k];\n                len = groups.length;\n                clones = vClones[k];\n                for (l = 0; l < len; l++) {\n                    if (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n                        var index = clones[l];\n                        if (group == 0) {\n                            // vertex is unique if no smoothGroup found\n                            groups.splice(l, 1);\n                            clones.splice(l, 1);\n                        }\n                        if (j == 0)\n                            face.a = index;\n                        else if (j == 1)\n                            face.b = index;\n                        else\n                            face.c = index;\n                        l = len;\n                    }\n                }\n            }\n        }\n    };\n    Max3DSParser.prototype.finalizeCurrentMaterial = function () {\n        var mat;\n        mat = new MethodMaterial_1.default(this._cur_mat.ambientColor);\n        if (this._cur_mat.colorMap)\n            mat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager_1.default.getDefaultTexture();\n        mat.diffuseMethod.color = this._cur_mat.diffuseColor;\n        mat.specularMethod.color = this._cur_mat.specularColor;\n        if (this.materialMode >= 2)\n            mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n        mat.bothSides = this._cur_mat.twoSided;\n        this._pFinalizeAsset(mat, this._cur_mat.name);\n        this._materials[this._cur_mat.name] = this._cur_mat;\n        this._cur_mat.material = mat;\n        this._cur_mat = null;\n    };\n    Max3DSParser.prototype.readNulTermstring = function () {\n        var chr;\n        var str = \"\";\n        while ((chr = this._byteData.readUnsignedByte()) > 0)\n            str += String.fromCharCode(chr);\n        return str;\n    };\n    Max3DSParser.prototype.readTransform = function () {\n        var data = new Float32Array(16);\n        // X axis\n        data[0] = this._byteData.readFloat(); // X\n        data[2] = this._byteData.readFloat(); // Z\n        data[1] = this._byteData.readFloat(); // Y\n        data[3] = 0;\n        // Z axis\n        data[8] = this._byteData.readFloat(); // X\n        data[10] = this._byteData.readFloat(); // Z\n        data[9] = this._byteData.readFloat(); // Y\n        data[11] = 0;\n        // Y Axis\n        data[4] = this._byteData.readFloat(); // X\n        data[6] = this._byteData.readFloat(); // Z\n        data[5] = this._byteData.readFloat(); // Y\n        data[7] = 0;\n        // Translation\n        data[12] = this._byteData.readFloat(); // X\n        data[14] = this._byteData.readFloat(); // Z\n        data[13] = this._byteData.readFloat(); // Y\n        data[15] = 1;\n        return data;\n    };\n    Max3DSParser.prototype.readColor = function () {\n        var cid;\n        var len;\n        var r /*int*/, g /*int*/, b;\n        cid = this._byteData.readUnsignedShort();\n        len = this._byteData.readUnsignedInt();\n        switch (cid) {\n            case 0x0010:\n                r = this._byteData.readFloat() * 255;\n                g = this._byteData.readFloat() * 255;\n                b = this._byteData.readFloat() * 255;\n                break;\n            case 0x0011:\n                r = this._byteData.readUnsignedByte();\n                g = this._byteData.readUnsignedByte();\n                b = this._byteData.readUnsignedByte();\n                break;\n            default:\n                this._byteData.position += (len - 6);\n                break;\n        }\n        return (r << 16) | (g << 8) | b;\n    };\n    return Max3DSParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Max3DSParser;\n/**\n *\n */\nvar FaceVO = (function () {\n    function FaceVO() {\n    }\n    return FaceVO;\n}());\n/**\n *\n */\nvar MaterialVO = (function () {\n    function MaterialVO() {\n    }\n    return MaterialVO;\n}());\n/**\n *\n */\nvar ObjectVO = (function () {\n    function ObjectVO() {\n    }\n    return ObjectVO;\n}());\n/**\n *\n */\nvar TextureVO = (function () {\n    function TextureVO() {\n    }\n    return TextureVO;\n}());\n/**\n *\n */\nvar VertexVO = (function () {\n    function VertexVO() {\n    }\n    return VertexVO;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined}],\"awayjs-parsers/lib/OBJParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nvar SpecularBasicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nvar OBJParser = (function (_super) {\n    __extends(OBJParser, _super);\n    /**\n     * Creates a new OBJParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function OBJParser(scale) {\n        if (scale === void 0) { scale = 1; }\n        _super.call(this, URLLoaderDataFormat_1.default.TEXT);\n        this._mtlLibLoaded = true;\n        this._activeMaterialID = \"\";\n        this._scale = scale;\n    }\n    Object.defineProperty(OBJParser.prototype, \"scale\", {\n        /**\n         * Scaling factor applied directly to vertices data\n         * @param value The scaling factor.\n         */\n        set: function (value) {\n            this._scale = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    OBJParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"obj\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    OBJParser.supportsData = function (data) {\n        var content = ParserUtils_1.default.toString(data);\n        var hasV = false;\n        var hasF = false;\n        if (content) {\n            hasV = content.indexOf(\"\\nv \") != -1;\n            hasF = content.indexOf(\"\\nf \") != -1;\n        }\n        return hasV && hasF;\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.id == 'mtl') {\n            var str = ParserUtils_1.default.toString(resourceDependency.data);\n            this.parseMtl(str);\n        }\n        else {\n            var asset;\n            if (resourceDependency.assets.length != 1) {\n                return;\n            }\n            asset = resourceDependency.assets[0];\n            if (asset.isAsset(BitmapImage2D_1.default)) {\n                var lm = new LoadedMaterial();\n                lm.materialID = resourceDependency.id;\n                lm.texture = new Single2DTexture_1.default(asset);\n                this._materialLoaded.push(lm);\n                if (this._sprites.length > 0) {\n                    this.applyMaterial(lm);\n                }\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        if (resourceDependency.id == \"mtl\") {\n            this._mtlLib = false;\n            this._mtlLibLoaded = false;\n        }\n        else {\n            var lm = new LoadedMaterial();\n            lm.materialID = resourceDependency.id;\n            this._materialLoaded.push(lm);\n        }\n        if (this._sprites.length > 0)\n            this.applyMaterial(lm);\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._pProceedParsing = function () {\n        var line;\n        var creturn = String.fromCharCode(10);\n        var trunk;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            // Merge linebreaks that are immediately preceeded by\n            // the \"escape\" backward slash into single lines.\n            this._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n        }\n        if (this._textData.indexOf(creturn) == -1)\n            creturn = String.fromCharCode(13);\n        if (!this._startedParsing) {\n            this._startedParsing = true;\n            this._vertices = new Array();\n            this._vertexNormals = new Array();\n            this._materialIDs = new Array();\n            this._materialLoaded = new Array();\n            this._sprites = new Array();\n            this._uvs = new Array();\n            this._stringLength = this._textData.length;\n            this._charIndex = this._textData.indexOf(creturn, 0);\n            this._oldIndex = 0;\n            this._objects = new Array();\n            this._objectIndex = 0;\n        }\n        while (this._charIndex < this._stringLength && this._pHasTime()) {\n            this._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n            if (this._charIndex == -1)\n                this._charIndex = this._stringLength;\n            line = this._textData.substring(this._oldIndex, this._charIndex);\n            line = line.split('\\r').join(\"\");\n            line = line.replace(\"  \", \" \");\n            trunk = line.split(\" \");\n            this._oldIndex = this._charIndex + 1;\n            this.parseLine(trunk);\n            // If whatever was parsed on this line resulted in the\n            // parsing being paused to retrieve dependencies, break\n            // here and do not continue parsing until un-paused.\n            if (this.parsingPaused) {\n                return ParserBase_1.default.MORE_TO_PARSE;\n            }\n        }\n        if (this._charIndex >= this._stringLength) {\n            if (this._mtlLib && !this._mtlLibLoaded) {\n                return ParserBase_1.default.MORE_TO_PARSE;\n            }\n            this.translate();\n            this.applyMaterials();\n            return ParserBase_1.default.PARSING_DONE;\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    OBJParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    /**\n     * Parses a single line in the OBJ file.\n     */\n    OBJParser.prototype.parseLine = function (trunk) {\n        switch (trunk[0]) {\n            case \"mtllib\":\n                this._mtlLib = true;\n                this._mtlLibLoaded = false;\n                this.loadMtl(trunk[1]);\n                break;\n            case \"g\":\n                this.createGroup(trunk);\n                break;\n            case \"o\":\n                this.createObject(trunk);\n                break;\n            case \"usemtl\":\n                if (this._mtlLib) {\n                    if (!trunk[1])\n                        trunk[1] = \"def000\";\n                    this._materialIDs.push(trunk[1]);\n                    this._activeMaterialID = trunk[1];\n                    if (this._currentGroup)\n                        this._currentGroup.materialID = this._activeMaterialID;\n                }\n                break;\n            case \"v\":\n                this.parseVertex(trunk);\n                break;\n            case \"vt\":\n                this.parseUV(trunk);\n                break;\n            case \"vn\":\n                this.parseVertexNormal(trunk);\n                break;\n            case \"f\":\n                this.parseFace(trunk);\n        }\n    };\n    /**\n     * Converts the parsed data into an Away3D scenegraph structure\n     */\n    OBJParser.prototype.translate = function () {\n        for (var objIndex = 0; objIndex < this._objects.length; ++objIndex) {\n            var groups = this._objects[objIndex].groups;\n            var numGroups = groups.length;\n            var materialGroups;\n            var numMaterialGroups;\n            var graphics;\n            var sprite;\n            var m;\n            var sm;\n            var bmMaterial;\n            for (var g = 0; g < numGroups; ++g) {\n                bmMaterial = new MethodMaterial_1.default(DefaultMaterialManager_1.default.getDefaultImage2D());\n                //check for multipass\n                if (this.materialMode >= 2)\n                    bmMaterial.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                sprite = new Sprite_1.default(bmMaterial);\n                graphics = sprite.graphics;\n                materialGroups = groups[g].materialGroups;\n                numMaterialGroups = materialGroups.length;\n                for (m = 0; m < numMaterialGroups; ++m)\n                    this.translateMaterialGroup(materialGroups[m], graphics);\n                if (graphics.count == 0)\n                    continue;\n                // Finalize and force type-based name\n                this._pFinalizeAsset(graphics); //, \"\");\n                if (this._objects[objIndex].name) {\n                    // this is a full independent object ('o' tag in OBJ file)\n                    sprite.name = this._objects[objIndex].name;\n                }\n                else if (groups[g].name) {\n                    // this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\n                    sprite.name = groups[g].name;\n                }\n                else {\n                    // No name stored. Use empty string which will force it\n                    // to be overridden by finalizeAsset() to type default.\n                    sprite.name = \"\";\n                }\n                this._sprites.push(sprite);\n                if (groups[g].materialID != \"\")\n                    bmMaterial.name = groups[g].materialID + \"~\" + sprite.name;\n                else\n                    bmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\n                if (sprite.graphics.count > 1) {\n                    for (sm = 1; sm < sprite.graphics.count; ++sm)\n                        sprite.graphics.getGraphicAt(sm).material = bmMaterial;\n                }\n                //add to the content property\n                this._pContent.addChild(sprite);\n                this._pFinalizeAsset(sprite);\n            }\n        }\n    };\n    /**\n     * Translates an obj's material group to a subgraphics.\n     * @param materialGroup The material group data to convert.\n     * @param graphics The Graphics to contain the converted Elements.\n     */\n    OBJParser.prototype.translateMaterialGroup = function (materialGroup, graphics) {\n        var faces = materialGroup.faces;\n        var face;\n        var numFaces = faces.length;\n        var numVerts;\n        var elements;\n        var vertices = new Array();\n        var uvs = new Array();\n        var normals = new Array();\n        var indices = new Array();\n        this._realIndices = [];\n        this._vertexIndex = 0;\n        var j;\n        for (var i = 0; i < numFaces; ++i) {\n            face = faces[i];\n            numVerts = face.indexIds.length - 1;\n            for (j = 1; j < numVerts; ++j) {\n                this.translateVertexData(face, j, vertices, uvs, indices, normals);\n                this.translateVertexData(face, 0, vertices, uvs, indices, normals);\n                this.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n            }\n        }\n        if (vertices.length > 0) {\n            elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n            elements.autoDeriveNormals = normals.length ? false : true;\n            elements.setIndices(indices);\n            elements.setPositions(vertices);\n            elements.setNormals(normals);\n            elements.setUVs(uvs);\n            graphics.addGraphic(elements);\n        }\n    };\n    OBJParser.prototype.translateVertexData = function (face, vertexIndex, vertices, uvs, indices /*uint*/, normals) {\n        var index;\n        var vertex;\n        var vertexNormal;\n        var uv;\n        if (!this._realIndices[face.indexIds[vertexIndex]]) {\n            index = this._vertexIndex;\n            this._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n            vertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n            vertices.push(vertex.x * this._scale, vertex.y * this._scale, vertex.z * this._scale);\n            if (face.normalIndices.length > 0) {\n                vertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n                normals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n            }\n            if (face.uvIndices.length > 0) {\n                try {\n                    uv = this._uvs[face.uvIndices[vertexIndex] - 1];\n                    uvs.push(uv.u, uv.v);\n                }\n                catch (e) {\n                    switch (vertexIndex) {\n                        case 0:\n                            uvs.push(0, 1);\n                            break;\n                        case 1:\n                            uvs.push(.5, 0);\n                            break;\n                        case 2:\n                            uvs.push(1, 1);\n                    }\n                }\n            }\n        }\n        else {\n            index = this._realIndices[face.indexIds[vertexIndex]] - 1;\n        }\n        indices.push(index);\n    };\n    /**\n     * Creates a new object group.\n     * @param trunk The data block containing the object tag and its parameters\n     */\n    OBJParser.prototype.createObject = function (trunk) {\n        this._currentGroup = null;\n        this._currentMaterialGroup = null;\n        this._objects.push(this._currentObject = new ObjectGroup());\n        if (trunk)\n            this._currentObject.name = trunk[1];\n    };\n    /**\n     * Creates a new group.\n     * @param trunk The data block containing the group tag and its parameters\n     */\n    OBJParser.prototype.createGroup = function (trunk) {\n        if (!this._currentObject)\n            this.createObject(null);\n        this._currentGroup = new Group();\n        this._currentGroup.materialID = this._activeMaterialID;\n        if (trunk)\n            this._currentGroup.name = trunk[1];\n        this._currentObject.groups.push(this._currentGroup);\n        this.createMaterialGroup(null);\n    };\n    /**\n     * Creates a new material group.\n     * @param trunk The data block containing the material tag and its parameters\n     */\n    OBJParser.prototype.createMaterialGroup = function (trunk) {\n        this._currentMaterialGroup = new MaterialGroup();\n        if (trunk)\n            this._currentMaterialGroup.url = trunk[1];\n        this._currentGroup.materialGroups.push(this._currentMaterialGroup);\n    };\n    /**\n     * Reads the next vertex coordinates.\n     * @param trunk The data block containing the vertex tag and its parameters\n     */\n    OBJParser.prototype.parseVertex = function (trunk) {\n        //for the very rare cases of other delimiters/charcodes seen in some obj files\n        var v1, v2, v3;\n        if (trunk.length > 4) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            v1 = nTrunk[0];\n            v2 = nTrunk[1];\n            v3 = -nTrunk[2];\n            this._vertices.push(new Vertex(v1, v2, v3));\n        }\n        else {\n            v1 = parseFloat(trunk[1]);\n            v2 = parseFloat(trunk[2]);\n            v3 = -parseFloat(trunk[3]);\n            this._vertices.push(new Vertex(v1, v2, v3));\n        }\n    };\n    /**\n     * Reads the next uv coordinates.\n     * @param trunk The data block containing the uv tag and its parameters\n     */\n    OBJParser.prototype.parseUV = function (trunk) {\n        if (trunk.length > 3) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            this._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n        }\n        else {\n            this._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n        }\n    };\n    /**\n     * Reads the next vertex normal coordinates.\n     * @param trunk The data block containing the vertex normal tag and its parameters\n     */\n    OBJParser.prototype.parseVertexNormal = function (trunk) {\n        if (trunk.length > 4) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            this._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n        }\n        else {\n            this._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n        }\n    };\n    /**\n     * Reads the next face's indices.\n     * @param trunk The data block containing the face tag and its parameters\n     */\n    OBJParser.prototype.parseFace = function (trunk) {\n        var len = trunk.length;\n        var face = new FaceData();\n        if (!this._currentGroup) {\n            this.createGroup(null);\n        }\n        var indices;\n        for (var i = 1; i < len; ++i) {\n            if (trunk[i] == \"\") {\n                continue;\n            }\n            indices = trunk[i].split(\"/\");\n            face.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n            if (indices[1] && String(indices[1]).length > 0)\n                face.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n            if (indices[2] && String(indices[2]).length > 0)\n                face.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n            face.indexIds.push(trunk[i]);\n        }\n        this._currentMaterialGroup.faces.push(face);\n    };\n    /**\n     * This is a hack around negative face coords\n     */\n    OBJParser.prototype.parseIndex = function (index, length) {\n        if (index < 0)\n            return index + length + 1;\n        else\n            return index;\n    };\n    OBJParser.prototype.parseMtl = function (data) {\n        var materialDefinitions = data.split('newmtl');\n        var lines;\n        var trunk;\n        var j;\n        var basicSpecularMethod;\n        var useSpecular;\n        var useColor;\n        var diffuseColor;\n        var color;\n        var specularColor;\n        var specular;\n        var alpha;\n        var mapkd;\n        for (var i = 0; i < materialDefinitions.length; ++i) {\n            lines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n            //lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n            if (lines.length == 1)\n                lines = materialDefinitions[i].split(String.fromCharCode(13));\n            diffuseColor = color = specularColor = 0xFFFFFF;\n            specular = 0;\n            useSpecular = false;\n            useColor = false;\n            alpha = 1;\n            mapkd = \"\";\n            for (j = 0; j < lines.length; ++j) {\n                lines[j] = lines[j].replace(/\\s+$/, \"\");\n                if (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n                    trunk = lines[j].split(\" \");\n                    if (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n                        trunk[0] = trunk[0].substring(1, trunk[0].length);\n                    if (j == 0) {\n                        this._lastMtlID = trunk.join(\"\");\n                        this._lastMtlID = (this._lastMtlID == \"\") ? \"def000\" : this._lastMtlID;\n                    }\n                    else {\n                        switch (trunk[0]) {\n                            case \"Ka\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n                                    color = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                break;\n                            case \"Ks\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n                                    specularColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                    useSpecular = true;\n                                }\n                                break;\n                            case \"Ns\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\n                                    specular = Number(trunk[1]) * 0.001;\n                                if (specular == 0)\n                                    useSpecular = false;\n                                break;\n                            case \"Kd\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n                                    diffuseColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                    useColor = true;\n                                }\n                                break;\n                            case \"tr\":\n                            case \"d\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\n                                    alpha = Number(trunk[1]);\n                                break;\n                            case \"map_Kd\":\n                                mapkd = this.parseMapKdString(trunk);\n                                mapkd = mapkd.replace(/\\\\/g, \"/\");\n                        }\n                    }\n                }\n            }\n            if (mapkd != \"\") {\n                if (useSpecular) {\n                    basicSpecularMethod = new SpecularBasicMethod_1.default();\n                    basicSpecularMethod.color = specularColor;\n                    basicSpecularMethod.strength = specular;\n                    var specularData = new SpecularData();\n                    specularData.alpha = alpha;\n                    specularData.basicSpecularMethod = basicSpecularMethod;\n                    specularData.materialID = this._lastMtlID;\n                    if (!this._materialSpecularData)\n                        this._materialSpecularData = new Array();\n                    this._materialSpecularData.push(specularData);\n                }\n                this._pAddDependency(this._lastMtlID, new URLRequest_1.default(mapkd));\n            }\n            else if (useColor && !isNaN(color)) {\n                var lm = new LoadedMaterial();\n                lm.materialID = this._lastMtlID;\n                if (alpha == 0)\n                    console.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\n                var cm = new MethodMaterial_1.default(color);\n                if (this.materialMode < 2) {\n                    cm.alpha = alpha;\n                }\n                else {\n                    cm.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                }\n                cm.diffuseMethod.color = diffuseColor;\n                if (useSpecular) {\n                    cm.specularMethod.color = specularColor;\n                    cm.specularMethod.strength = specular;\n                }\n                lm.cm = cm;\n                this._materialLoaded.push(lm);\n                if (this._sprites.length > 0)\n                    this.applyMaterial(lm);\n            }\n        }\n        this._mtlLibLoaded = true;\n    };\n    OBJParser.prototype.parseMapKdString = function (trunk) {\n        var url = \"\";\n        var i;\n        var breakflag;\n        for (i = 1; i < trunk.length;) {\n            switch (trunk[i]) {\n                case \"-blendu\":\n                case \"-blendv\":\n                case \"-cc\":\n                case \"-clamp\":\n                case \"-texres\":\n                    i += 2; //Skip ahead 1 attribute\n                    break;\n                case \"-mm\":\n                    i += 3; //Skip ahead 2 attributes\n                    break;\n                case \"-o\":\n                case \"-s\":\n                case \"-t\":\n                    i += 4; //Skip ahead 3 attributes\n                    continue;\n                default:\n                    breakflag = true;\n                    break;\n            }\n            if (breakflag)\n                break;\n        }\n        //Reconstruct URL/filename\n        for (i; i < trunk.length; i++) {\n            url += trunk[i];\n            url += \" \";\n        }\n        //Remove the extraneous space and/or newline from the right side\n        url = url.replace(/\\s+$/, \"\");\n        return url;\n    };\n    OBJParser.prototype.loadMtl = function (mtlurl) {\n        // Add raw-data dependency to queue and load dependencies now,\n        // which will pause the parsing in the meantime.\n        this._pAddDependency('mtl', new URLRequest_1.default(mtlurl), true);\n        this._pPauseAndRetrieveDependencies(); //\n    };\n    OBJParser.prototype.applyMaterial = function (lm) {\n        var decomposeID;\n        var sprite;\n        var tm;\n        var j;\n        var specularData;\n        for (var i = 0; i < this._sprites.length; ++i) {\n            sprite = this._sprites[i];\n            decomposeID = sprite.material.name.split(\"~\");\n            if (decomposeID[0] == lm.materialID) {\n                if (lm.cm) {\n                    if (sprite.material)\n                        sprite.material = null;\n                    sprite.material = lm.cm;\n                }\n                else if (lm.texture) {\n                    tm = sprite.material;\n                    tm.ambientMethod.texture = lm.texture;\n                    tm.style.color = lm.color;\n                    tm.alpha = lm.alpha;\n                    tm.style.sampler = new Sampler2D_1.default(true);\n                    if (this.materialMode < 2)\n                        tm.alpha = lm.alpha;\n                    else\n                        tm.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                    if (lm.specularMethod) {\n                        // By setting the specularMethod property to null before assigning\n                        // the actual method instance, we avoid having the properties of\n                        // the new method being overridden with the settings from the old\n                        // one, which is default behavior of the setter.\n                        tm.specularMethod = null;\n                        tm.specularMethod = lm.specularMethod;\n                    }\n                    else if (this._materialSpecularData) {\n                        for (j = 0; j < this._materialSpecularData.length; ++j) {\n                            specularData = this._materialSpecularData[j];\n                            if (specularData.materialID == lm.materialID) {\n                                tm.specularMethod = null; // Prevent property overwrite (see above)\n                                tm.specularMethod = specularData.basicSpecularMethod;\n                                tm.specularMethod.color = specularData.color;\n                                tm.specularMethod.strength = specularData.alpha;\n                                break;\n                            }\n                        }\n                    }\n                }\n                sprite.material.name = decomposeID[1] ? decomposeID[1] : decomposeID[0];\n                this._sprites.splice(i, 1);\n                --i;\n            }\n        }\n        if (lm.cm || tm)\n            this._pFinalizeAsset(lm.cm || tm);\n    };\n    OBJParser.prototype.applyMaterials = function () {\n        if (this._materialLoaded.length == 0)\n            return;\n        for (var i = 0; i < this._materialLoaded.length; ++i)\n            this.applyMaterial(this._materialLoaded[i]);\n    };\n    return OBJParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = OBJParser;\nvar ObjectGroup = (function () {\n    function ObjectGroup() {\n        this.groups = new Array();\n    }\n    return ObjectGroup;\n}());\nvar Group = (function () {\n    function Group() {\n        this.materialGroups = new Array();\n    }\n    return Group;\n}());\nvar MaterialGroup = (function () {\n    function MaterialGroup() {\n        this.faces = new Array();\n    }\n    return MaterialGroup;\n}());\nvar SpecularData = (function () {\n    function SpecularData() {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n    }\n    return SpecularData;\n}());\nvar LoadedMaterial = (function () {\n    function LoadedMaterial() {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n    }\n    return LoadedMaterial;\n}());\nvar FaceData = (function () {\n    function FaceData() {\n        this.vertexIndices = new Array();\n        this.uvIndices = new Array();\n        this.normalIndices = new Array();\n        this.indexIds = new Array(); // used for real index lookups\n    }\n    return FaceData;\n}());\n/**\n* Texture coordinates value object.\n*/\nvar UV = (function () {\n    /**\n     * Creates a new <code>UV</code> object.\n     *\n     * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n     * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n     */\n    function UV(u, v) {\n        if (u === void 0) { u = 0; }\n        if (v === void 0) { v = 0; }\n        this._u = u;\n        this._v = v;\n    }\n    Object.defineProperty(UV.prototype, \"v\", {\n        /**\n         * Defines the vertical coordinate of the texture value.\n         */\n        get: function () {\n            return this._v;\n        },\n        set: function (value) {\n            this._v = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UV.prototype, \"u\", {\n        /**\n         * Defines the horizontal coordinate of the texture value.\n         */\n        get: function () {\n            return this._u;\n        },\n        set: function (value) {\n            this._u = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * returns a new UV value Object\n     */\n    UV.prototype.clone = function () {\n        return new UV(this._u, this._v);\n    };\n    /**\n     * returns the value object as a string for trace/debug purpose\n     */\n    UV.prototype.toString = function () {\n        return this._u + \",\" + this._v;\n    };\n    return UV;\n}());\nvar Vertex = (function () {\n    /**\n     * Creates a new <code>Vertex</code> value object.\n     *\n     * @param    x            [optional]    The x value. Defaults to 0.\n     * @param    y            [optional]    The y value. Defaults to 0.\n     * @param    z            [optional]    The z value. Defaults to 0.\n     * @param    index        [optional]    The index value. Defaults is NaN.\n     */\n    function Vertex(x, y, z, index) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        if (index === void 0) { index = 0; }\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._index = index;\n    }\n    Object.defineProperty(Vertex.prototype, \"index\", {\n        get: function () {\n            return this._index;\n        },\n        /**\n         * To define/store the index of value object\n         * @param    ind        The index\n         */\n        set: function (ind) {\n            this._index = ind;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"x\", {\n        /**\n         * To define/store the x value of the value object\n         * @param    value        The x value\n         */\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"y\", {\n        /**\n         * To define/store the y value of the value object\n         * @param    value        The y value\n         */\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"z\", {\n        /**\n         * To define/store the z value of the value object\n         * @param    value        The z value\n         */\n        get: function () {\n            return this._z;\n        },\n        set: function (value) {\n            this._z = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * returns a new Vertex value Object\n     */\n    Vertex.prototype.clone = function () {\n        return new Vertex(this._x, this._y, this._z);\n    };\n    return Vertex;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\":undefined}],\"awayjs-parsers/lib/Parsers\":[function(require,module,exports){\n\"use strict\";\nvar Loader_1 = require(\"awayjs-core/lib/library/Loader\");\nvar AWDParser_1 = require(\"./AWDParser\");\nvar Max3DSParser_1 = require(\"./Max3DSParser\");\nvar MD2Parser_1 = require(\"./MD2Parser\");\nvar OBJParser_1 = require(\"./OBJParser\");\n/**\n *\n */\nvar Parsers = (function () {\n    function Parsers() {\n    }\n    /**\n     * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n     * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n     * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n     *\n     * See notes about file size in the documentation for the ALL_BUNDLED constant.\n     *\n     * @see away.parsers.Parsers.ALL_BUNDLED\n     */\n    Parsers.enableAllBundled = function () {\n        Loader_1.default.enableParsers(Parsers.ALL_BUNDLED);\n    };\n    /**\n     * A list of all parsers that come bundled with Away3D. Use this to quickly\n     * enable support for all bundled parsers to the file format auto-detection\n     * feature, using any of the enableParsers() methods on loaders, e.g.:\n     *\n     * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n     *\n     * Beware however that this requires all parser classes to be included in the\n     * SWF file, which will add 50-100 kb to the file. When only a limited set of\n     * file formats are used, SWF file size can be saved by adding the parsers\n     * individually using AssetLibrary.enableParser()\n     *\n     * A third way is to specify a parser for each loaded file, thereby bypassing\n     * the auto-detection mechanisms altogether, while at the same time allowing\n     * any properties that are unique to that parser to be set for that load.\n     *\n     * The bundled parsers are:\n     *\n     * <ul>\n     * <li>AC3D (.ac)</li>\n     * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n     * <li>3DMax (.3ds)</li>\n     * <li>DXF (.dxf)</li>\n     * <li>Quake 2 MD2 models (.md2)</li>\n     * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n     * <li>Doom 3 MD5 sprites (.md5sprite)</li>\n     * <li>Wavefront OBJ (.obj)</li>\n     * <li>Collada (.dae)</li>\n     * <li>Images (.jpg, .png)</li>\n     * </ul>\n     *\n     * @see away.library.AssetLibrary.enableParser\n     */\n    Parsers.ALL_BUNDLED = Array(AWDParser_1.default, Max3DSParser_1.default, MD2Parser_1.default, OBJParser_1.default);\n    return Parsers;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Parsers;\n\n},{\"./AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"./MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"./Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"./OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"awayjs-core/lib/library/Loader\":undefined}]},{},[1])\n\n",
    "export {default as AWDParser}\t\t\t\t\t\tfrom \"./lib/AWDParser\";\nexport {default as Max3DSParser}\t\t\t\t\tfrom \"./lib/Max3DSParser\";\nexport {default as MD2Parser}\t\t\t\t\t\tfrom \"./lib/MD2Parser\";\nexport {default as MD5AnimParser}\t\t\t\t\tfrom \"./lib/MD5AnimParser\";\nexport {default as MD5MeshParser}\t\t\t\t\tfrom \"./lib/MD5MeshParser\";\nexport {default as OBJParser}\t\t\t\t\t\tfrom \"./lib/OBJParser\";\nexport {default as Parsers}\t\t\t\t\t\t\tfrom \"./lib/Parsers\";",
    "\nclass AWD3Utils {\n\tpublic static BLOCKSTATE_FINALIZE:number = 0;\n\tpublic static BLOCKSTATE_INVALID:number = 1;\n\tpublic static BLOCKSTATE_LOAD_DEPENDENICES:number = 2;\n\tpublic static BLOCKSTATE_NO_ASSET:number = 3;\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n}\nexport default AWD3Utils;",
    "import ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport AWD3Utils\t\t\t\t\t\tfrom \"../AWD3ParserUtils/AWD3Utils\";\n\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic type:number;\n\tpublic data:any;\n\tpublic dependencies_data:Array<ByteArray>;\n\tpublic dependencies_urls:Array<string>;\n\tpublic loaded_dependencies:Array<any>;\n\tpublic loaded_dependencies_cnt:number;\n\tpublic len:number;\n\tpublic geoID:number;\n\tpublic state:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Float32Array>;\n\n\tconstructor(this_id:number, this_type:number)\n\t{\n\t\tthis.type=this_type;\n\t\tthis.id=this_id;\n\t\tthis.state = AWD3Utils.BLOCKSTATE_FINALIZE;\n\t\tthis.dependencies_data=Array<any>();\n\t\tthis.dependencies_urls=Array<string>();\n\t\tif(this_type==83){\n\t\t\tthis.loaded_dependencies=Array<any>(6);\n\t\t}\n\t\tthis.loaded_dependencies_cnt=0;\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\nexport default AWDBlock;",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport Short3Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Short3Attributes\";\nimport Float3Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Float3Attributes\";\nimport Float2Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Float2Attributes\";\nimport Byte4Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Byte4Attributes\";\n\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport BitmapImageCube\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImageCube\";\nimport BlendMode\t\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\nimport Sampler2D\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\nimport WaveAudio\t\t\t\t\t\tfrom \"awayjs-core/lib/audio/WaveAudio\";\nimport ColorTransform\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport IAsset\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport ProjectionBase\t\t\t\t\tfrom \"awayjs-core/lib/projections/ProjectionBase\";\nimport PerspectiveProjection\t\t\tfrom \"awayjs-core/lib/projections/PerspectiveProjection\";\nimport OrthographicProjection\t\t\tfrom \"awayjs-core/lib/projections/OrthographicProjection\";\nimport OrthographicOffCenterProjection\tfrom \"awayjs-core/lib/projections/OrthographicOffCenterProjection\";\nimport ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\nimport Point\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\n\nimport AnimationNodeBase\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport View\t\t\t\t\t\t\t\tfrom \"awayjs-display/lib/View\";\nimport DisplayObject\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport LightBase\t\t\t\t\t\tfrom \"awayjs-display/lib/display/LightBase\";\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DirectionalLight\t\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\nimport PointLight\t\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\nimport Camera\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport TextField\t\t\t\t\t\tfrom \"awayjs-display/lib/display/TextField\";\nimport Billboard\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\nimport Skybox\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport MaterialBase\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport LightPickerBase\t\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/LightPickerBase\";\nimport StaticLightPicker\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/StaticLightPicker\";\nimport CubeMapShadowMapper\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\";\nimport DirectionalShadowMapper\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\";\nimport ShadowMapperBase\t\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\";\n\nimport PrefabBase\t\t\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrefabBase\";\nimport PrimitivePrefabBase\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePrefabBase\";\nimport PrimitiveCapsulePrefab\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\";\nimport PrimitiveConePrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveConePrefab\";\nimport PrimitiveCubePrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCubePrefab\";\nimport PrimitiveCylinderPrefab\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\";\nimport PrimitivePlanePrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePlanePrefab\";\nimport PrimitiveSpherePrefab\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\";\nimport PrimitiveTorusPrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\";\nimport SingleCubeTexture\t\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\nimport TextureBase\t\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport AnimationSetBase\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimationSetBase\";\nimport AnimatorBase\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimatorBase\";\nimport VertexAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\nimport VertexAnimator\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimator\";\nimport SkeletonAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\nimport SkeletonAnimator\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimator\";\nimport JointPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\nimport Skeleton\t\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\nimport SkeletonPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\nimport SkeletonJoint\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\nimport SkeletonClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\nimport VertexClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\nimport AnimationClipNodeBase\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\";\n\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport AmbientEnvMapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\";\nimport DiffuseDepthMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\";\nimport DiffuseCelMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\";\nimport DiffuseGradientMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\";\nimport DiffuseLightMapMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\";\nimport DiffuseWrapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\";\nimport EffectAlphaMaskMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\";\nimport EffectColorMatrixMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\";\nimport EffectColorTransformMethod\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\";\nimport EffectEnvMapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\";\nimport EffectFogMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFogMethod\";\nimport EffectFresnelEnvMapMethod\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\";\nimport EffectLightMapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\";\nimport EffectMethodBase\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectMethodBase\";\nimport EffectRimLightMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\";\nimport NormalSimpleWaterMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\";\nimport ShadowDitheredMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\";\nimport ShadowFilteredMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\";\nimport ShadowMapMethodBase\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\";\nimport ShadowMethodBase\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMethodBase\";\nimport SpecularFresnelMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\";\nimport ShadowHardMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowHardMethod\";\nimport SpecularAnisotropicMethod\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\";\nimport SpecularCelMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularCelMethod\";\nimport SpecularPhongMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\";\nimport ShadowNearMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowNearMethod\";\nimport ShadowSoftMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\";\n\nimport BasicMaterial\t\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\n\nimport ITimelineSceneGraphFactory \tfrom \"awayjs-display/lib/factories/ITimelineSceneGraphFactory\";\nimport AS2SceneGraphFactory \t\tfrom \"awayjs-player/lib/factories/AS2SceneGraphFactory\";\nimport MovieClip \t\t\t\t\tfrom \"awayjs-display/lib/display/MovieClip\";\nimport Timeline\t\t\t \t\t\tfrom \"awayjs-display/lib/base/Timeline\";\n\n\nimport AssetLibrary\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\n\nimport Font\t\t\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\nimport TesselatedFontTable\t\t\tfrom \"awayjs-display/lib/text/TesselatedFontTable\";\nimport TextFormat\t\t\t\t\tfrom \"awayjs-display/lib/text/TextFormat\";\nimport TextFieldType\t\t\t\tfrom \"awayjs-display/lib/text/TextFieldType\";\n\nimport AWDBlock\t\t\t\t\t\tfrom \"./AWD3ParserUtils/AWDBlock\";\nimport Rectangle \t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\nimport Style \t\t\t\t\t\tfrom \"awayjs-display/lib/base/Style\";\nimport Matrix \t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport MappingMode \t\t\t\t\tfrom \"awayjs-display/lib/textures/MappingMode\";\nimport ElementsType from \"awayjs-display/lib/graphics/ElementsType\";\nimport Graphic from \"awayjs-display/lib/graphics/Graphic\";\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\tprivate _view:View;\n\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = false;\n\tprivate _debugTimers:boolean = true;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\tpublic static GEO_NUMBER:number = 48;\n\tpublic static MATRIX_NUMBER:number = 49;\n\tpublic static PROPERTY_NUMBER:number = 50;\n\t\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\tprivate start_timeing:number;\n\tprivate _time_all:number=0;\n\tprivate _time_graphics:number=0;\n\tprivate _time_graphics_bytes:number=0;\n\tprivate _time_timeline:number=0;\n\tprivate _time_fonts:number=0;\n\tprivate _time_textfields:number=0;\n\tprivate _time_sounds:number=0;\n\tprivate _time_textures:number=0;\n\tprivate _time_materials:number=0;\n\tprivate _time_sprites:number=0;\n\tprivate _num_graphics:number=0;\n\tprivate _num_timeline:number=0;\n\tprivate _num_fonts:number=0;\n\tprivate _num_textfields:number=0;\n\tprivate _num_sounds:number=0;\n\tprivate _num_textures:number=0;\n\tprivate _num_materials:number=0;\n\tprivate _num_sprites:number=0;\n\n\n\t/**\n\t * Creates a new AWD3Parserutils object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(view:View = null)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._view = view;\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock(0,255);\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the ressource dependecniy has a id that point to the awd_block waiting for it.\n\t\t//console.log(\"AWDParser resolve dependencies\";\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar this_block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\tif(this_block.type==82){\n\t\t\t\tvar image_asset:BitmapImage2D = <BitmapImage2D> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = image_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\tthis._pFinalizeAsset(<IAsset> image_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed Texture: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==44){\n\t\t\t\tvar audio_asset:WaveAudio = <WaveAudio> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = audio_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t//console.log(\"Parsing audio \" + this_block.name);\n\t\t\t\tthis._pFinalizeAsset(<IAsset> audio_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==83){\n\t\t\t\tthis_block.loaded_dependencies[resourceDependency.sub_id]= resourceDependency.assets[0];\n\t\t\t\tthis_block.loaded_dependencies_cnt++;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n\n\t\t\t\tif(this_block.loaded_dependencies_cnt==6){\n\t\t\t\t\tvar cube_image_asset = new BitmapImageCube(this_block.loaded_dependencies[0].width);\n\n\t\t\t\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\t\t\t\tcube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n\n\t\t\t\t\tthis_block.data = cube_image_asset; // Store finished asset\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> cube_image_asset, this_block.name);\n\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._debugTimers && !this._isParsing)\n\t\t\t\tthis.updateTimers(this_block.type);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWD3Parserutils.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWD3Parserutils.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\n\t\t\t\tif (this._debugTimers)\n\t\t\t\t\tconsole.log(\"Parsing total: \"+(this._time_all | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics: \"+this._num_graphics+\", \"+(this._time_graphics | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics bytes: \"+this._num_graphics+\", \"+(this._time_graphics_bytes | 0)+\"ms\",\n\t\t\t\t\t\t\" | timelines: \"+this._num_timeline+\", \"+(this._time_timeline | 0)+\"ms\",\n\t\t\t\t\t\t\" | fonts: \"+this._num_fonts+\", \"+(this._time_fonts | 0)+\"ms\",\n\t\t\t\t\t\t\" | sounds: \"+this._num_sounds+\", \"+(this._time_sounds | 0)+\"ms\",\n\t\t\t\t\t\t\" | mats: \"+this._num_materials+\", \"+(this._time_materials | 0)+\"ms\",\n\t\t\t\t\t\t\" | textures: \"+this._num_textures+\", \"+(this._time_textures | 0)+\"ms\",\n\t\t\t\t\t\t\" | sprites: \"+this._num_sprites+\", \"+(this._time_sprites | 0)+\"ms\");\n\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate dispose()\n\t{\n\t\tfor (var c in this._blocks) {\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[c];\n\t\t\tb.dispose();\n\t\t}\n\t}\n\n\tprivate parseNextBlock()\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n//*\n\t\tif (this._debugTimers)\n\t\t\tthis.start_timeing = performance.now();\n//*/\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\tthis._newBlockBytes = new ByteArray();\n\t\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\t\t\tthis._newBlockBytes.position = 0;\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWD3Parserutils.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t} else {\n\t\t\tthis._newBlockBytes = this._body;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tblock = new AWDBlock(this._cur_block_id, type);\n\t\tblock.len = len;\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory(this._view);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 24:\n\t\t\t\t\tthis.parseSpriteLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 25:\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4444:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseMovieClip(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 134:\n\t\t\t\t\tthis.parseTextField(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 135:\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 136:\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseGraphics(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseSpriteInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tif (this._newBlockBytes.position != blockEndBlock)\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\tif (block.errorMessages) {\n\t\t\t\tvar len:number = block.errorMessages.length;\n\t\t\t\tfor (var msgCnt:number = 0; msgCnt < len; msgCnt++)\n\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t}\n\n\t\t\tconsole.log(\"\\n\");\n\t\t}\n\n\t\tif (this._debugTimers && !this.parsingPaused)\n\t\t\tthis.updateTimers(type);\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\t}\n\n\tprivate updateTimers(type:number)\n\t{\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - this.start_timeing;\n\t\tthis._time_all += time_delta;\n\n\t\tif (type == 1) {\n\t\t\tthis._time_graphics += time_delta;\n\t\t\tthis._num_graphics++;\n\t\t} else if (type == 133) {\n\t\t\tthis._time_timeline += time_delta;\n\t\t\tthis._num_timeline++;\n\t\t} else if (type == 135) {\n\t\t\tthis._time_fonts += time_delta;\n\t\t\tthis._num_fonts++;\n\t\t} else if (type == 134) {\n\t\t\tthis._time_textfields += time_delta;\n\t\t\tthis._num_textfields++;\n\t\t} else if (type == 44) {\n\t\t\tthis._time_sounds += time_delta;\n\t\t\tthis._num_sounds++;\n\t\t} else if (type == 82) {\n\t\t\tthis._time_textures += time_delta;\n\t\t\tthis._num_textures++;\n\t\t} else if (type == 81) {\n\t\t\tthis._time_materials += time_delta;\n\t\t\tthis._num_materials++;\n\t\t} else if(type==24) {\n\t\t\tthis._time_sprites += time_delta;\n\t\t\tthis._num_sprites++;\n\t\t}\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\n\tprivate parseTesselatedFont(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\tvar new_font:Font=<Font>AssetLibrary.getAsset(this._blocks[blockID].name);\n\t\tvar newfont:Boolean = false;\n\t\tif(new_font==undefined){\n\t\t\tnew_font = new Font();\n\t\t\tnewfont=true;\n\t\t}\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar font_style_char_cnt:number;\n\t\tvar font_style_name:string;\n\t\tvar new_font_style:TesselatedFontTable;\n\t\tvar font_style_char:number;\n\t\tvar attr_count:number=0;\n\t\tvar sm_len:number;\n\t\tvar sm_end:number;\n\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\n\t\t\tfont_style_name = this.parseVarStr();\n\n\t\t\t// dirty hack for icycle\n\t\t\t// we use bold chars for non-latin chars, but we use regular for � sign,\n\t\t\t// so the dirty hack is to merge the regular and the bold style\n\t\t\tif((this._blocks[blockID].name==\"Tahoma\") && (font_style_name==\"RegularStyle\")){\n\t\t\t\tfont_style_name=\"BoldStyle\";\n\t\t\t}\n\n\t\t\tnew_font_style = new_font.get_font_table(font_style_name);\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.ascent=this._newBlockBytes.readFloat();\n\t\t\tnew_font_style.descent=this._newBlockBytes.readFloat();\n\t\t\t//console.log(new_font_style.get_whitespace_width());\n\t\t\tfont_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n\t\t\tfor (var j:number = 0; j < font_style_char_cnt; ++j) {\n\t\t\t\t// todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n\t\t\t\tfont_style_char = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar char_width=this._newBlockBytes.readFloat();\n\t\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\t\t// Loop through data streams\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\t\t// Type, field type, length\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\t\tif (str_type == 2) {//face indices positions\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\t\tfor(var idx:number = 0; this._newBlockBytes.position < str_end; idx++)\n\t\t\t\t\t\t\tindices[idx] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 20;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 12;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (position + curvedata + uv)\n\t\t\t\t\t\tattr_count = 28;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(curveData) {\n\t\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len / attr_count);\n\t\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\t\tif (attr_count == 20)\n\t\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\t\t\t\t\telse if(attr_count == 12)\n\t\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\n\n\t\t\t\t\t//add UVs if they exist in the data\n\t\t\t\t\tif (attr_count == 28)\n\t\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\t\tnew_font_style.setChar(font_style_char.toString(), curve_elements, char_width);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tif(newfont) {\n\t\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\n\t\t}\n\n\t\tthis._blocks[blockID].data = new_font;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\n\t}\n\n\tprivate static textFormatProperties:Object = {\n\t\t1:AWDParser.UINT16,\t\t//fontsize\n\t\t2:AWDParser.FLOAT32,\t\t//letterspacing\n\t\t3:AWDParser.UINT8,\t\t//rotated\n\t\t4:AWDParser.UINT8,\t\t//auto-kerning\n\t\t5:AWDParser.UINT8,\t\t//baselineshift\n\t\t6:AWDParser.UINT8,\t\t//align\n\t\t7:AWDParser.FLOAT32,\t\t//intent\n\t\t8:AWDParser.FLOAT32,\t\t//left margin\n\t\t9:AWDParser.FLOAT32,\t\t//right margin\n\t\t10:AWDParser.FLOAT32};\t//line spacing\n\n\tprivate parseTextFormat(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\n\t\tvar font:Font = <Font> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar font_style_name:string = this.parseVarStr();\n\n\t\tvar newTextFormat:TextFormat = new TextFormat();\n\t\tnewTextFormat.font_name = font.name;\n\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\n\t\tif (font_table!=null) {\n\t\t\tnewTextFormat.font_style = font_style_name;\n\t\t\tnewTextFormat.font_table = font_table;\n\t\t}\n\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides = true;\n\t\tmat.curves = true;\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar uv_values:Array<number> = [];\n\t\tfor(var uvcnt:number = 0; uvcnt < num_uv_values; uvcnt++)\n\t\t\tuv_values[uvcnt] = this._newBlockBytes.readFloat();\n\n\t\tnewTextFormat.uv_values = uv_values;\n\t\tvar format_props:AWDProperties = this.parseProperties(AWDParser.textFormatProperties);\n\n\t\tnewTextFormat.size = format_props.get(1,12);\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\n\t\t//newTextFormat.rotated = format_props.get(3,false);\n\t\tnewTextFormat.kerning = format_props.get(4,true);\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\n\t\tvar tf_align_int:number = format_props.get(6,0);\n\t\tif(tf_align_int==1){\n\t\t\tnewTextFormat.align=\"right\";\n\t\t}\n\t\telse if(tf_align_int==2){\n\t\t\tnewTextFormat.align=\"center\";\n\t\t}\n\t\tnewTextFormat.indent = format_props.get(7,0);\n\t\tnewTextFormat.leftMargin = format_props.get(8,0);\n\t\tnewTextFormat.rightMargin = format_props.get(9,0);\n\t\tnewTextFormat.leading = format_props.get(10,0);\n\t\tnewTextFormat.material = mat;\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\n\t\t//newTextFormat.extra =\n\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\n\t\tthis._blocks[blockID].data = newTextFormat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\n\t}\n\n\tprivate static textFieldProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t3:AWDParser.BOOL,\n\t\t4:AWDParser.BOOL,\n\t\t5:AWDParser.BOOL,\n\t\t7:AWDParser.UINT8,\n\t\t8:AWDParser.UINT8,\n\t\t9:AWDParser.UINT8};\n\n\tprivate static textFieldTypes:Array<string> = [\"static\", \"dynamic\", \"input\", \"input\"];\n\n\n\tprivate parseTextField(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n\t\tvar text_field_type:number=this._newBlockBytes.readUnsignedByte();\n\n\t\tnewTextField.type = AWDParser.textFieldTypes[text_field_type];\n\n\t\tif(text_field_type == 3)\n\t\t\tnewTextField.displayAsPassword = true;\n\n\t\t//\n\t\tnewTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n\t\tnewTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar complete_text:string = \"\";\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\n\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\n\t\t\t\tvar text_format:TextFormat = <TextFormat> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\n\t\t\t\tif (txt_length > 0) {\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\n\t\t\t\t\tcomplete_text += this_txt;\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//newTextField.closeParagraph();\n\t\t}\n\t\tnewTextField.textFormat=text_format;\n\t\tnewTextField.text=complete_text;\n\t\t//newTextField.construct_graphics();\n\t\t// todo: optional matrix etc can be put in properties.\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.textFieldProperties);\n\t\tnewTextField.selectable = props.get(1, false);\n\t\tnewTextField.border =  props.get(3, false);\n\t\t//newTextField.renderHTML =  props.get(4, false);\n\t\t//newTextField.scrollable =  props.get(5, false);\n\t\t//newTextField.text_flow =  props.get(7, 0);\n\t\t//newTextField.orientationMode =  props.get(8, 0);\n\t\t//newTextField.line_mode =  props.get(9, 0);\n\t\tnewTextField.extra = this.parseUserAttributes();\n\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\n\t\tthis._blocks[blockID].data = newTextField;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t}\n\n\t// Block ID = 25\n\tprivate parseBillBoardLibraryBlock(blockID:number)\n\t{\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides=true;\n\t\tvar billboard:Billboard = new Billboard(mat);\n\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tbillboard.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\n\n\t\tthis._blocks[blockID].data = billboard;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n\t}\n\t// Block ID = 24\n\tprivate parseSpriteLibraryBlock(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[data_id].data;\n\t\tthis._blocks[blockID].geoID = data_id;\n\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\t//mat.preserveAlpha = true;\n\t\t\tmat.alphaBlending = true;\n\t\t\tmat.useColorTransform = true;\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar start_timeing = performance.now();\n\t\tvar sprite:Sprite = new Sprite();\n\t\tgraphics.copyTo(sprite.graphics);\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - start_timeing;\n\t\tthis._time_graphics_bytes += time_delta;\n\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\n\t\t\tsprite.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\n\t\tvar count:number = this._newBlockBytes.readUnsignedShort();\n\t\t//if(count != sprite.graphics.count)\n\t\t//\tthrow new Error(\"num elements does not match num subsprites\";\n\n\t\tfor (var i:number = 0; i < count; i++) {\n\t\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\t\tvar sampler:Sampler2D = new Sampler2D();\n\t\t\tvar graphic:Graphic = sprite.graphics.getGraphicAt(i);\n\t\t\tif(graphic) {\n\t\t\t\tgraphic.style = new Style();\n\t\t\t\tgraphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n\t\t\t}\n\t\t\tif (type == 3) {// solid color fill - need tx and ty\n\t\t\t\tvar tx:number=this._newBlockBytes.readFloat();\n\t\t\t\tvar ty:number=this._newBlockBytes.readFloat();\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(0, 0, 0, 0, tx, ty);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type == 4) {// texture fill - need full matrix\n\t\t\t\tvar matrix:Array<number> = this.parseMatrix32RawData();\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type == 5) {// linear gradient fill - need a, c , tx and ty\n\t\t\t\tvar newMatrix:Matrix = new Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = newMatrix;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\telse if (type == 6) {// radial gradient fill - need image rectangle + full transform\n\t\t\t\t\tvar x:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar y:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar width:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar height:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar matrix:Array<number> = this.parseMatrix32RawData();\n\t\t\t\t\tif(graphic) {\n\t\t\t\t\t\tsampler.imageRect = new Rectangle(x, y, width, height);\n\t\t\t\t\t\tgraphic.material.imageRect = true;\n\t\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(graphic) {\n\t\t\t\t//check if curves are needed\n\t\t\t\tif (graphic.elements.getCustomAtributes(\"curves\"))\n\t\t\t\t\tgraphic.material.curves = true;\n\t\t\t}\n\t\t\t// todo: finish optional properties (spreadmode + focalpoint)\n\t\t\tthis._newBlockBytes.readUnsignedInt();\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tsprite.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\n\n\t\tthis._blocks[blockID].data = sprite;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t}\n\n\tprivate parseAudioBlock(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n\t}\n\n\tprivate static movieClipProperties:Object = {\n\t\t1:AWDParser.FLOAT32,\t//fps\n\t\t2:AWDParser.UINT16,\t\t// sceneID if not present or 0, mc is no scene\n\t\t3:AWDParser.UINT8};\t\t// scripting-language right now its always as2\n\t//Block ID = 4\n\tprivate parseMovieClip(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar cmd_asset:DisplayObject;\n\t\tvar new_timeline:Timeline = new Timeline();\n\t\tvar new_mc = factory.createMovieClip(new_timeline);\n\t\tvar name = this.parseVarStr();\n\n\t\t// register list of potential childs\n\t\t// a potential child can be reused on a timeline (added / removed / added)\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\n\t\t// we parse 2 lists of potential-childs:\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n\t\t// hence we need to be careful to register all objects in correct order.\n\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t}\n\t\t}\n\n\t\tvar num_all_display_instances:number = num_potential_childs;\n\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tvar num_instances:number = this._newBlockBytes.readUnsignedShort();\n\t\t\tnum_all_display_instances += num_instances;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tfor (j = 0; j < num_instances; j++)\n\t\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n\n\t\t// register list of potential sounds - for now we always have 0 sounds\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n\n\n\t\tvar str_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tvar str_len = 0;\n\t\tvar str_data_type = 0;\n\t\tvar str_type=0;\n\t\tvar str_counter=0;\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\t// the first 6 lists are not optional and always in same order\n\t\t\t// hence we can get type by incremental counter instead of stored uint8\n\t\t\tif(str_counter<6)\n\t\t\t\tstr_type=str_counter;\n\t\t\telse\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n\t\t\tstr_data_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// size of this stream in byte\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tif(str_len>0) {\n\t\t\t\tvar keyframes_start_indices_data:ByteArray = new ByteArray(str_len);\n\t\t\t\tthis._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n\t\t\t\tvar new_buffer:ArrayBufferView;\n\t\t\t\t//console.log(\"str_data_type = \"+str_type);\n\t\t\t\tswitch (str_data_type) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_buffer = new Uint8Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_buffer = new Uint16Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_buffer = new Uint32Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tswitch (str_type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tnew_timeline.keyframe_durations = new_buffer;\n\t\t\t\t\t\tnew_timeline.numKeyFrames=str_len / str_data_type;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_timeline.frame_command_indices = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_timeline.frame_recipe = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tnew_timeline.command_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_timeline.command_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tnew_timeline.add_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tnew_timeline.remove_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tnew_timeline.update_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tnew_timeline.update_child_props_indices_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tnew_timeline.update_child_props_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tnew_timeline.property_type_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tnew_timeline.property_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tnew_timeline.properties_stream_int = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr_counter++;\n\t\t}\n\t\tvar lc:number=0;\n\t\tvar float_array_data:ByteArray;\n\t\tstr_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tswitch(str_type) {\n\t\t\t\tcase 0://mtx_scale\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_scale_rot=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1://mtx_pos\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_pos=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2://mtx_all\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_all=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3://ct\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_ct=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4://labels\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t//console.log(\"start reading labels \"+str_len);\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tnew_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5://name_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tvar string_props_array:Array<string>=[];\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tstring_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n\t\t\t\t\t}\n\t\t\t\t\tnew_timeline.properties_stream_strings = string_props_array;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6://script_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tvar frame_index=this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tvar one_str_len=this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t//this._newBlockBytes.readUTFBytes(one_str_len);\n\t\t\t\t\t\tnew_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnew_timeline.init();\n\n\t\tvar sceneID:number = 0;\n\t\tvar fps:number = 25;\n\t\tthis.parseProperties(AWDParser.movieClipProperties);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset>new_mc, name);\n\n\t\tthis._blocks[blockID].data = new_mc;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\n\t}\n\n\tprivate static graphicsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\tprivate static elementsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\t//Block ID = 1\n\tprivate parseGraphics(blockID:number)\n\t{\n\t\tvar graphics:Graphics = new Graphics();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numElements:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.graphicsProperties);\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t//console.log(\"numElements \"+numElements);\n\t\t// Loop through sub sprites\n\t\tfor (var elements_parsed:number = 0;  elements_parsed < numElements; elements_parsed++) {\n\t\t\tvar is_curve_elements:boolean=false;\n\t\t\tvar attr_count:number=0;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\tvar elementsProps:AWDProperties = this.parseProperties(AWDParser.elementsProperties);\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 4) {\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t} else if (str_type == 7) {\n\t\t\t\t\tweights = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (2d pos + uv + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 28;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 20;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 12;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t}else {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-sprite attributes for now\n\n\t\t\tif(is_curve_elements){\n\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len/attr_count);\n\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\tif(attr_count==20){\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\t\t\t\t}\n\t\t\t\telse if(attr_count==12){\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\n\t\t\t\t}\n\n\t\t\t\tif(attr_count==28)\n\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\tgraphics.addGraphic(curve_elements);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements with curves\");\n\n\t\t\t} else {\n\t\t\t\tvar triangle_elements = new TriangleElements(new AttributesBuffer());\n\n\t\t\t\tif (weights)\n\t\t\t\t\ttriangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n\n\t\t\t\tif (normals)\n\t\t\t\t\ttriangle_elements.autoDeriveNormals = false;\n\n\t\t\t\ttriangle_elements.autoDeriveTangents = true;\n\n\t\t\t\ttriangle_elements.setIndices(indices);\n\t\t\t\ttriangle_elements.setPositions(verts);\n\t\t\t\ttriangle_elements.setNormals(normals);\n\t\t\t\ttriangle_elements.setUVs(uvs);\n\t\t\t\ttriangle_elements.setJointWeights(weights);\n\t\t\t\ttriangle_elements.setJointIndices(w_indices);\n\n\t\t\t\tvar scaleU:number = elementsProps.get(1, 1);\n\t\t\t\tvar scaleV:number = elementsProps.get(2, 1);\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\t\tsetSubUVs = true;\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\n\t\t\t\t}\n\n\t\t\t\tif (setSubUVs)\n\t\t\t\t\ttriangle_elements.scaleUV(scaleU, scaleV);\n\n\t\t\t\tgraphics.addGraphic(triangle_elements);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements\");\n\t\t\t}\n\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating sprites (and their material assignments.)\n\t\t}\n\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgraphics.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> graphics, name);\n\t\tthis._blocks[blockID].data = graphics;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed Graphics: Name = \" + name);\n\t}\n\n\tprivate static primitiveProperties:Object = {\n\t\t101:AWDParser.GEO_NUMBER,\n\t\t102:AWDParser.GEO_NUMBER,\n\t\t103:AWDParser.GEO_NUMBER,\n\t\t110:AWDParser.GEO_NUMBER,\n\t\t111:AWDParser.GEO_NUMBER,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t303:AWDParser.UINT16,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t703:AWDParser.BOOL,\n\t\t704:AWDParser.BOOL};\n\n\tprivate static primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number)\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar elements_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties(AWDParser.primitiveProperties);\n\n\t\t// to do, not all properties are set on all primitives\n\t\tswitch (primType) {\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//graphics.elements;\n\t\t\t//graphics.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7))\n\t\t\t\tprimType = 0;\n\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n\t\t}\n\t}\n\n\tprivate static containerProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number)\n\t{\n\t\tvar name:string;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tif (parent) {\n\t\t\tparent.addChild(ctr);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.containerProperties);\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t} else {// in other versions we do not read the Container properties\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t}\n\n\tprivate static spriteInstanceProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL};\n\n\t// Block ID = 23\n\tprivate parseSpriteInstance(blockID:number)\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar asset:IAsset = <IAsset> this._blocks[data_id].data;\n\t\tvar graphics:Graphics;\n\t\tvar prefab:PrefabBase;\n\t\tvar isPrefab:boolean=false;\n\t\tif (asset.isAsset(Graphics)) {\n\t\t\tgraphics = <Graphics> asset;\n\t\t} else {\n\t\t\tisPrefab = true;\n\t\t\tprefab = <PrefabBase> asset;\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar sprite:Sprite;\n\n\t\tif (isPrefab) {\n\t\t\tsprite = <Sprite> prefab.getNewObject()\n\t\t} else {\n\t\t\tsprite = new Sprite();\n\t\t\tgraphics.copyTo(sprite.graphics);\n\t\t}\n\n\t\tsprite.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(sprite);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\n\t\t}\n\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\n\t\t\tsprite.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.spriteInstanceProperties);\n\t\t\tsprite.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\tsprite.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tsprite.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\n\t\tthis._blocks[blockID].data = sprite;\n\n\t\tif (this._debug) {\n\t\t\tif (isPrefab)\n\t\t\t\tconsole.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t\telse\n\t\t\t\tconsole.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar asset:Skybox = new Skybox();\n\t\tvar tex:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultImageCube());\n\t\tasset.texture = tex;\n\n\t\tthis.parseProperties(null);\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n\t}\n\n\tprivate static lightProperties:Object = {\n\t\t1:AWDParser.PROPERTY_NUMBER,\n\t\t2:AWDParser.PROPERTY_NUMBER,\n\t\t3:AWDParser.COLOR,\n\t\t4:AWDParser.PROPERTY_NUMBER,\n\t\t5:AWDParser.PROPERTY_NUMBER,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.COLOR,\n\t\t8:AWDParser.PROPERTY_NUMBER,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.UINT8,\n\t\t11:AWDParser.PROPERTY_NUMBER,\n\t\t12:AWDParser.UINT16,\n\t\t21:AWDParser.MATRIX_NUMBER,\n\t\t22:AWDParser.MATRIX_NUMBER,\n\t\t23:AWDParser.MATRIX_NUMBER};\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number)\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.lightProperties);\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\t\t}\n\n\t\tif (lightType == 2) {\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\t\t}\n\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(light);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\t}\n\n\tprivate static cameraProperties:Object = {\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER};\n\n\tprivate static cameraPivotProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number)\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.cameraProperties);\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(camera);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties(AWDParser.cameraPivotProperties);\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (var k:number = 0; k < numLights; k++) {\n\t\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tlightsArray.push(light);\n\t\t\tlightsArrayNames.push(light.name);\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n\t}\n\n\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\tprivate static materialProperties:Object = {\n\t\t1:AWDParser.INT32,\n\t\t2:AWDParser.BADDR,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL};\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number)\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\tprops = this.parseProperties(AWDParser.materialProperties);\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\n\t\tvar debugString:string = \"\";\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\tmat = new MethodMaterial();\n\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = this.parseUserAttributes();\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.style.sampler = new Sampler2D(props.get(13, false));\n\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\t\n\tprivate static material_v1Properties:Object = {1:AWDParser.UINT32,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.BOOL,\n\t\t8:AWDParser.BOOL,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL,\n\t\t15:AWDParser.PROPERTY_NUMBER,\n\t\t16:AWDParser.UINT32,\n\t\t17:AWDParser.BADDR,\n\t\t18:AWDParser.PROPERTY_NUMBER,\n\t\t19:AWDParser.PROPERTY_NUMBER,\n\t\t20:AWDParser.UINT32,\n\t\t21:AWDParser.BADDR,\n\t\t22:AWDParser.BADDR};\n\n\tprivate static method_v1Properties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4};\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number)\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar diffuseImage:BitmapImage2D;\n\t\tvar normalImage:BitmapImage2D;\n\t\tvar specImage:BitmapImage2D;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.material_v1Properties);\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\t\t\tmat = new MethodMaterial();\n\t\t\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdiffuseImage = <BitmapImage2D> this._blocks[props.get(17, 0)].data;\n\t\t\t\tnormalImage = <BitmapImage2D> this._blocks[props.get(3, 0)].data;\n\t\t\t\tspecImage = <BitmapImage2D> this._blocks[props.get(21, 0)].data;\n\t\t\t\tmat.lightPicker = <LightPickerBase> this._blocks[props.get(22, 0)].data;\n\t\t\t\tmat.style.sampler = new Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true));\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\n\t\t\t\tif (diffuseImage) {\n\t\t\t\t\tmat.diffuseTexture = new Single2DTexture(diffuseImage);\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (normalImage) {\n\t\t\t\t\tmat.normalMethod.texture = new Single2DTexture(normalImage);\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (specImage) {\n\t\t\t\t\tmat.specularMethod.texture = new Single2DTexture(specImage);\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specImage.name;\n\t\t\t\t}\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambientMethod.strength = props.get(15, 1.0);\n\t\t\t\tmat.diffuseMethod.color = props.get(16, 0xffffff);\n\t\t\t\tmat.specularMethod.strength = props.get(18, 1.0);\n\t\t\t\tmat.specularMethod.gloss = props.get(19, 50);\n\t\t\t\tmat.specularMethod.color = props.get(20, 0xffffff);\n\n\t\t\t\tfor (var methods_parsed:number = 0; methods_parsed < num_methods; methods_parsed++) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties(AWDParser.method_v1Properties);\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\t\t\t\t\t\t\tvar effectMethod:EffectMethodBase = <EffectMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.addEffectMethod(effectMethod);\n\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + effectMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\t\t\t\t\t\t\tvar shadowMapMethod:ShadowMapMethodBase = <ShadowMapMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.shadowMethod = shadowMapMethod;\n\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\tvar cubeTexture:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod();\n\t\t\t\t\t\t\tmat.ambientMethod.texture = cubeTexture;\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(texture);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(<Single2DTexture> mat.normalMethod.texture || texture, texture);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: we should not need this anymore (if using texture-atlas)\n\t\telse if ((type>=3)&&(type<=7)){\n\t\t\t// if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n\t\t\tvar color:number = props.get(1, 0xcccccc);\n\t\t\tdebugString+=color;\n\t\t\tvar diffuseTexture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\t\t\tif(type==5){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.LINEAR_GRADIENT;\n\t\t\t}\n\t\t\telse if(type==6){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.RADIAL_GRADIENT;\n\t\t\t}\n\t\t\tvar basic_mat:BasicMaterial = new BasicMaterial();\n\t\t\tbasic_mat.texture = diffuseTexture;\n\t\t\tbasic_mat.bothSides = true;\n\t\t\t//basic_mat.preserveAlpha = true;\n\t\t\tbasic_mat.alphaBlending = true;\n\t\t\tbasic_mat.extra = this.parseUserAttributes();\n\t\t\tthis._pFinalizeAsset(<IAsset> basic_mat, name);\n\t\t\tthis._blocks[blockID].data = basic_mat;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(debugString);\n\t\t\treturn;\n\t\t\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number)\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tvar url:string = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tvar data_len:number = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number)\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar i:number;\n\n\t\tthis._texture_users[ this._cur_block_id ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true, i);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true, i);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number)\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number)\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar asset:ShadowMethodBase = this.parseShadowMethodList(light, blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n\t}\n\n\tprivate static commandProperties:Object = {\n\t\t1:AWDParser.BADDR};\n\n\tprivate static targetProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\t\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number)\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar parentObject:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar targetObject:DisplayObjectContainer;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.commandProperties);\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\t\t\t\ttargetObject = this._blocks[props.get(1, 0)].data;\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tif (parentObject)\n\t\t\t\t\tparentObject.addChild(targetObject);\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties(AWDParser.targetProperties);\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\t\t}\n\n\t\tthis._blocks[blockID].data = targetObject;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t}\n\t\n\tprivate static metaDataProperties:Object = {\n\t\t1:AWDParser.UINT32,\n\t\t2:AWDParser.AWDSTRING,\n\t\t3:AWDParser.AWDSTRING,\n\t\t4:AWDParser.AWDSTRING,\n\t\t5:AWDParser.AWDSTRING};\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number)\n\t{\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.metaDataProperties);\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number)\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\tprivate shadowMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4}\n\t\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties(this.shadowMethodListProperties);\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> this._blocks[props.get(1, 0)].data);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\n\t\tthis._blocks[blockID].data = skeleton;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Float32Array = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t}\n\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\n\t\tthis._blocks[blockID].data = pose;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/)\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_id:number;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tpose_id = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_id].data, frame_dur);\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\t\n\tprivate spritePoseAnimationProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t2:AWDParser.BOOL};\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseSpritePoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false)\n\t{\n\t\tvar subSpriteParsed:number /*uint*/;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar elements:TriangleElements;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Short3Attributes;\n\t\tvar verts:Array<number>;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geo_id:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[geo_id].data;\n\n\t\tvar uvs:Array<Float32Array> = this.getUVForVertexAnimation(geo_id);\n\n\t\tvar num_frames:number = (!poseOnly)? this._newBlockBytes.readUnsignedShort() : 1;\n\n\t\tvar num_subsprites:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar num_Streams:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var streamsParsed:number = 0; streamsParsed < num_Streams; streamsParsed++)\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\n\t\tprops = this.parseProperties(this.spritePoseAnimationProperties);\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tvar frame_dur:number;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgraphics = new Graphics();\n\t\t\tsubSpriteParsed = 0;\n\t\t\twhile (subSpriteParsed < num_subsprites) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\t\t\t\telements.setIndices(indices);\n\t\t\t\t\t\telements.setPositions(verts);\n\t\t\t\t\t\telements.setUVs(uvs[subSpriteParsed]);\n\t\t\t\t\t\telements.setNormals(null);\n\t\t\t\t\t\telements.setTangents(null);\n\t\t\t\t\t\telements.autoDeriveNormals = false;\n\t\t\t\t\t\telements.autoDeriveTangents = false;\n\t\t\t\t\t\tsubSpriteParsed++;\n\t\t\t\t\t\tgraphics.addGraphic(elements);\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(graphics, frame_dur);\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\tprivate static vertexAnimationSetProperties:Object = {\n\t\t1:AWDParser.UINT16};\n\t\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\tvar clipNode:AnimationClipNodeBase;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tclipNode = <AnimationClipNodeBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (clipNode instanceof VertexClipNode)\n\t\t\t\tvertexFrames.push(<VertexClipNode> clipNode);\n\t\t\telse if (clipNode instanceof SkeletonClipNode)\n\t\t\t\tskeletonFrames.push(<SkeletonClipNode> clipNode);\n\t\t}\n\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n\t\t}\n\t}\n\n\tprivate static animatorSetProperties:Object = {1:AWDParser.BADDR};\n\t\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.animatorSetProperties);\n\t\tvar targetAnimationSet:AnimationSetBase = <AnimationSetBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tvar targetSpritees:Array<Sprite> = new Array<Sprite>();\n\t\tvar targetSpriteLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var i:number /*int*/ = 0; i < targetSpriteLength; i++)\n\t\t\ttargetSpritees.push(<Sprite> this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1)\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> this._blocks[props.get(1, 0)].data);\n\t\telse if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\n\t\tfor (i = 0; i < targetSpritees.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetSpritees[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\telse if (type == 2)\n\t\t\t\ttargetSpritees[i].animator = (<VertexAnimator> thisAnimator);\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\tprivate sharedMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER,\n\t\t105:AWDParser.PROPERTY_NUMBER,\n\t\t106:AWDParser.PROPERTY_NUMBER,\n\t\t107:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL};\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties(this.sharedMethodListProperties);\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data), <number> props.get(101, 1));\n\t\t\t\tvar targetID:number = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <TextureBase> this._blocks[targetID].data;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\t\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\t\t\tvar attributes:Object = {};\n\n\t\t\tfor (var attibuteCnt:number = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar props:AWDProperties = new AWDProperties();\n\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\t\t\tvar len:number;\n\t\t\tvar key:number;\n\t\t\tvar type:number;\n\n\t\t\tfor (var propertyCnt:number = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected[key]) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\t\tvar accuracy:boolean;\n\n\t\tswitch (type) {\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\t\t\tcase AWDParser.GEO_NUMBER:\n\t\t\t\taccuracy = this._accuracyGeo;\n\t\t\tcase AWDParser.MATRIX_NUMBER:\n\t\t\t\taccuracy = this._accuracyMatrix;\n\t\t\tcase AWDParser.PROPERTY_NUMBER:\n\t\t\t\taccuracy = this._accuracyProps;\n\t\t\tdefault:\n\t\t\t\tif (accuracy) {\n\t\t\t\t\telem_len = 8;\n\t\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\t} else {\n\t\t\t\t\telem_len = 4;\n\t\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\t}\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\tfor (var num_read:number = 0; num_read < num_elems; num_read++)\n\t\t\t\tlist[num_read] = read_func.call(this._newBlockBytes);\n\n\t\t\treturn list;\n\t\t} else {\n\t\t\treturn read_func.call(this._newBlockBytes);\n\t\t}\n\t}\n\n\tprivate parseHeader()\n\t{\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tvar flags:number = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tvar body_len:number = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable())\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(spriteID:number /*uint*/):Array<Float32Array>\n\t{\n\t\tif (this._blocks[spriteID].data instanceof Sprite)\n\t\t\tspriteID = this._blocks[spriteID].geoID;\n\n\t\tif (this._blocks[spriteID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\n\n\t\tvar graphics:Graphics = (<Graphics> this._blocks[spriteID].data);\n\t\tvar elements:TriangleElements;\n\t\tvar uvsForVertexAnimation:Array<ArrayBufferView> = this._blocks[spriteID].uvsForVertexAnimation = new Array<Float32Array>();\n\n\t\tvar len:number = graphics.count;\n\t\tfor (var geoCnt:number= 0; geoCnt < len; geoCnt++) {\n\t\t\telements = <TriangleElements> graphics.getGraphicAt(geoCnt).elements;\n\t\t\tuvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n\t\t}\n\n\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\t\treturn this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\n\t\treturn this._newBlockBytes.readFloat();\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\n\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Float32Array\n\t{\n\t\tvar mtx_raw:Float32Array = new Float32Array(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n}\n\nexport default AWDParser;\n\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any)\n\t{\n\t\tthis[key] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\treturn (this[key] || fallback);\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport DisplayObject\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport Camera\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport VertexClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\nimport VertexAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\n\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current elements being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstElements:TriangleElements;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _sprite:Sprite;\n\tprivate _graphics:Graphics;\n\n\tprivate materialFinal:boolean = false;\n\tprivate graphicsCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar material:MethodMaterial = new MethodMaterial(<BitmapImage2D> resourceDependency.assets[0]);\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\tmaterial.name = this._sprite.material.name;\n\t\tthis._sprite.material = material;\n\t\tthis._pFinalizeAsset(material);\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\tthis._pFinalizeAsset(this._sprite);\n\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\tthis._pFinalizeAsset(this._sprite);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a sprite only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._sprite = new Sprite();\n\t\t\t\tthis._graphics = this._sprite.graphics;\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.graphicsCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.graphicsCreated) {\n\t\t\t\tthis.graphicsCreated = true;\n\t\t\t\t//create default subgraphics\n\t\t\t\tthis._graphics.addGraphic(this._firstElements.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._sprite.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader()\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames()\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._sprite.material.name = this._materialNames[0];\n\t\telse\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the sprite.\n\t */\n\tprivate parseUV()\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces()\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame elements.\n\t */\n\tprivate parseFrames()\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar graphics:Graphics;\n\t\tvar elements:TriangleElements;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\n\t\t\tif (this._firstElements == null)\n\t\t\t\tthis._firstElements = elements;\n\n\t\t\tgraphics = new Graphics();\n\t\t\tgraphics.addGraphic(elements);\n\n\t\t\telements.setIndices(this._indices);\n\t\t\telements.setPositions(fvertices);\n\t\t\telements.setUVs(this._finalUV);\n\t\t\t// cause explicit updates\n\t\t\telements.setNormals(null);\n\t\t\telements.setTangents(null);\n\t\t\t// turn auto updates off because they may be animated and set explicitly\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(graphics, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport default MD2Parser;",
    "import Quaternion\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\n\nimport JointPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\nimport SkeletonPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\nimport SkeletonClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport default MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Quaternion\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\n\nimport SkeletonAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\nimport Skeleton\t\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\nimport SkeletonJoint\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _sprite:Sprite;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _elementsData:Array<ElementsData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _graphics:Graphics;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5sprite\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._sprite = new Sprite();\n\t\t\t\tthis._graphics = this._sprite.graphics;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._elementsData.length; ++i)\n\t\t\t\t\tthis._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\n\n\t\t\t\t//_graphics.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_sprite.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\t\t\tthis._pFinalizeAsset(this._graphics);\n\t\t\t\tthis._pFinalizeAsset(this._sprite);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numElementsData:number /*int*/ = this._elementsData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numElementsData; ++i) {\n\t\t\tvar elementsData:ElementsData = this._elementsData[i];\n\t\t\tvar positionData:Array<PositionData> = elementsData.positionData;\n\t\t\tvar numVerts:number /*int*/ = positionData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = positionData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(position:PositionData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = position.startWeight;\n\t\tvar end:number /*int*/ = position.startWeight + position.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh graphics.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar positionData:Array<PositionData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tpositionData = new Array<PositionData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(positionData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._elementsData == null)\n\t\t\tthis._elementsData = new Array<ElementsData>();\n\n\t\tvar i:number /*uint*/ = this._elementsData.length;\n\t\tthis._elementsData[i] = new ElementsData();\n\t\tthis._elementsData[i].positionData = positionData;\n\t\tthis._elementsData[i].weightData = weights;\n\t\tthis._elementsData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the sprite data to a SkinnedSub instance.\n\t * @param positionData The sprite's positions.\n\t * @param weights The joint weights per position.\n\t * @param indices The indices for the faces.\n\t * @return A TriangleElements instance containing all elements data for the current sprite.\n\t */\n\tprivate translateElements(positionData:Array<PositionData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleElements\n\t{\n\t\tvar len:number /*int*/ = positionData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar position:PositionData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar positions:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tposition = positionData[i];\n\t\t\tv1 = position.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tpositions[v1] = positions[v2] = positions[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < position.countWeight; ++j) {\n\t\t\t\tweight = weights[position.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tpositions[v1] += pos.x*weight.bias;\n\t\t\t\t\tpositions[v2] += pos.y*weight.bias;\n\t\t\t\t\tpositions[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = position.index << 1;\n\t\t\tuvs[v1++] = position.s;\n\t\t\tuvs[v1] = position.t;\n\t\t}\n\n\t\telements.jointsPerVertex = this._maxJointCount;\n\t\telements.setIndices(indices);\n\t\telements.setPositions(positions);\n\t\telements.setUVs(uvs);\n\t\telements.setJointIndices(jointIndices);\n\t\telements.setJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\telements.setNormals(null);\n\t\telements.setTangents(null);\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\telements.autoDeriveTangents = false;\n\t\telements.autoDeriveNormals = false;\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of position indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single position.\n\t * @param positionData The list to contain the position data.\n\t */\n\tprivate parseVertex(positionData:Array<PositionData>):void\n\t{\n\t\tvar position:PositionData = new PositionData();\n\t\tposition.index = this.getNextInt();\n\t\tthis.parseUV(position);\n\t\tposition.startWeight = this.getNextInt();\n\t\tposition.countWeight = this.getNextInt();\n\t\t//\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\n\t\tpositionData[position.index] = position;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param positionData The positionData to contain the UV coordinates.\n\t */\n\tprivate parseUV(positionData:PositionData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tpositionData.s = this.getNextNumber();\n\t\tpositionData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport default MD5MeshParser;\n\n\nclass PositionData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass ElementsData\n{\n\tpublic positionData:Array<PositionData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport IAsset\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport MaterialBase\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = Sprite.assetType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == Sprite.assetType) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleElements;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar sprite:Sprite;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Build sprite and return it\n\t\t\tsprite = new Sprite(mat);\n\t\t\tsprite.transform.matrix3D = new Matrix3D(obj.transform);\n\n\t\t\tgraphics = sprite.graphics;\n\n\t\t\t// Construct elements (potentially splitting buffers)\n\t\t\t// and add them to graphics.\n\t\t\tsub = new TriangleElements(new AttributesBuffer());\n\t\t\tsub.setIndices(obj.indices);\n\t\t\tsub.setPositions(obj.verts);\n\t\t\tsub.setUVs(obj.uvs);\n\n\t\t\tgraphics.addGraphic(sub);\n\n\t\t\t// Apply pivot translation to graphics if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\t\tmtx.rawData[12] = 0;\n\t\t\t\t\tmtx.rawData[13] = 0;\n\t\t\t\t\tmtx.rawData[14] = 0;\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to graphics if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to graphics. Finalize the graphics,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n\n\t\t\treturn sprite;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture();\n\n\t\tmat.diffuseMethod.color = this._cur_mat.diffuseColor;\n\t\tmat.specularMethod.color = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Float32Array\n\t{\n\t\tvar data:Float32Array = new Float32Array(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport default Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Float32Array;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Single2DTexture;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import Sampler2D\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\nimport AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Quaternion\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport IAsset\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport MaterialBase\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\nimport SpecularBasicMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\";\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _sprites:Array<Sprite>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = new Single2DTexture(<BitmapImage2D> asset);\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._sprites.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._sprites.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._sprites = new Array<Sprite>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar sprite:Sprite;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tsprite = new Sprite(bmMaterial);\n\t\t\t\tgraphics = sprite.graphics;\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], graphics);\n\n\t\t\t\tif (graphics.count == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> graphics);//, \"\");\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tsprite.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\n\t\t\t\t\tsprite.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tsprite.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._sprites.push(sprite);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + sprite.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\n\n\t\t\t\tif (sprite.graphics.count > 1) {\n\t\t\t\t\tfor (sm = 1; sm < sprite.graphics.count; ++sm)\n\t\t\t\t\t\tsprite.graphics.getGraphicAt(sm).material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> sprite);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgraphics.\n\t * @param materialGroup The material group data to convert.\n\t * @param graphics The Graphics to contain the converted Elements.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, graphics:Graphics)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar elements:TriangleElements;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\telements.autoDeriveNormals = normals.length? false : true;\n\t\t\telements.setIndices(indices);\n\t\t\telements.setPositions(vertices);\n\t\t\telements.setNormals(normals);\n\t\t\telements.setUVs(uvs);\n\n\t\t\tgraphics.addGraphic(elements);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.color = specularColor;\n\t\t\t\t\tbasicSpecularMethod.strength = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial = new MethodMaterial(color);\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm.alpha = alpha;\n\t\t\t\t} else {\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\tcm.diffuseMethod.color = diffuseColor;\n\n\t\t\t\tif (useSpecular) {\n\t\t\t\t\tcm.specularMethod.color = specularColor;\n\t\t\t\t\tcm.specularMethod.strength = specular;\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._sprites.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar sprite:Sprite;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._sprites.length; ++i) {\n\t\t\tsprite = this._sprites[i];\n\t\t\tdecomposeID = sprite.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (sprite.material)\n\t\t\t\t\t\tsprite.material = null;\n\t\t\t\t\tsprite.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\ttm = <MethodMaterial > sprite.material;\n\n\t\t\t\t\ttm.ambientMethod.texture = lm.texture;\n\t\t\t\t\ttm.style.color = lm.color;\n\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\ttm.style.sampler = new Sampler2D(true);\n\n\t\t\t\t\tif (this.materialMode < 2) // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\telse\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\ttm.specularMethod.color = specularData.color;\n\t\t\t\t\t\t\t\ttm.specularMethod.strength = specularData.alpha;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsprite.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._sprites.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport default OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Single2DTexture;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import Loader\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/Loader\";\n\nimport AWDParser\t\t\t\t\t\tfrom \"./AWDParser\";\nimport Max3DSParser\t\t\t\t\t\tfrom \"./Max3DSParser\";\nimport MD2Parser\t\t\t\t\t\tfrom \"./MD2Parser\";\nimport OBJParser\t\t\t\t\t\tfrom \"./OBJParser\";\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 sprites (.md5sprite)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport default Parsers;"
  ],
  "sourceRoot": ""
}