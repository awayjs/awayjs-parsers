{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "Geometry",
    "CurveSubGeometry",
    "TriangleSubGeometry",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "TextureBase",
    "ByteArray",
    "AnimationNodeBase",
    "DisplayObjectContainer",
    "LightBase",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "TextField",
    "Billboard",
    "Skybox",
    "DefaultMaterialManager",
    "MaterialBase",
    "LightPickerBase",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "AnimationSetBase",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectMethodBase",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "ShadowMapMethodBase",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "CurveMaterial",
    "BasicMaterial",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildAtDepthCommand",
    "ApplyAS2DepthsCommand",
    "ExecuteScriptCommand",
    "RemoveChildrenAtDepthCommand",
    "SetInstanceNameCommand",
    "UpdatePropertyCommand",
    "SetMaskCommand",
    "Font",
    "TextFormat",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseMeshLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseTimeLine",
    "paresTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "font_style_cnt",
    "new_font",
    "font_style_name",
    "new_font_style",
    "get_font_table",
    "set_font_em_size",
    "font_style_char_cnt",
    "font_style_char",
    "sm_len",
    "sm_end",
    "idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "indices",
    "readUnsignedShort",
    "idx_pos",
    "idx_curves",
    "idx_uvs",
    "positions",
    "curveData",
    "uvs",
    "readNumber",
    "curve_sub_geom",
    "updateIndices",
    "updatePositions",
    "updateCurves",
    "updateUVs",
    "set_subgeo_for_char",
    "parseProperties",
    "parseUserAttributes",
    "font_id",
    "returnArrayFont",
    "getAssetByID",
    "assetType",
    "font",
    "addError",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "data_id",
    "returnedArrayMaterial",
    "bothSides",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "uv_value",
    "readFloat",
    "format_props",
    1,
    "UINT16",
    2,
    3,
    "UINT8",
    4,
    5,
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "material",
    "newTextField",
    "createTextField",
    "num_paragraphs",
    "complete_text",
    "text_format",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "format_id",
    "textFormatArray",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "extra",
    "billboard",
    "num_materials",
    "materials_parsed",
    "geom",
    "returnedArrayGeometry",
    "geoID",
    "materials",
    "materialNames",
    "mat_id",
    "m",
    "mesh",
    "subMeshes",
    "Math",
    "min",
    "data_len",
    "url",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "ms_per_frame",
    "num_instances",
    "num_all_display_instances",
    "num_potential_childs",
    "resourceID",
    "cmd_asset",
    "registerPotentialChild",
    "num_potential_childs_multi_instanced",
    "num_potential_sounds",
    "numFrames",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "label",
    "numCommands",
    "hasDepthChanges",
    "commandString",
    "objectID",
    "target_depth",
    "number_of_obj",
    "commandType",
    "remove_depths",
    "readShort",
    "addConstructCommand",
    "instanceName",
    "potChild",
    "getPotentialChild",
    "undefined",
    "isAsset",
    "props",
    "mask_id_nums",
    "mask_ids",
    "mi_cnt",
    "matrix_2d",
    "colortransform",
    "blendmode",
    "visibilty",
    "thisMatrix",
    "rawData",
    "blendmode_string",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_curve_geom",
    "w_indices",
    "weights",
    "subProps",
    "x",
    "y",
    "z",
    "verts",
    "normals",
    "addSubGeometry",
    "triangle_sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateVertexNormals",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "returnedArray",
    "obj",
    "addChild",
    "pivot",
    "returnedArrayParent",
    "objC",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "k",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    "UINT32",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "lightPicker",
    "smooth",
    "mipmap",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "addEffectMethod",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "getDefaultTexture",
    "curve_mat",
    "preserveAlpha",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "thisAnimator",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "sub_geom",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/data/BlendMode",
    "awayjs-core/lib/data/CurveSubGeometry",
    "awayjs-core/lib/data/Geometry",
    "awayjs-core/lib/data/TriangleSubGeometry",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/textures/TextureBase",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/animators/nodes/AnimationNodeBase",
    "awayjs-display/lib/base/LightBase",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Billboard",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/entities/TextField",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/CurveMaterial",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-display/lib/materials/lightpickers/LightPickerBase",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/timeline/TimelineKeyFrame",
    "awayjs-player/lib/timeline/commands/AddChildAtDepthCommand",
    "awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/timeline/commands/ExecuteScriptCommand",
    "awayjs-player/lib/timeline/commands/RemoveChildrenAtDepthCommand",
    "awayjs-player/lib/timeline/commands/SetInstanceNameCommand",
    "awayjs-player/lib/timeline/commands/SetMaskCommand",
    "awayjs-player/lib/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/AnimationSetBase",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "g",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapData\");\r\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport SubGeometryBase\t\t\t\t\t= require(\"awayjs-core/lib/data/SubGeometryBase\");\r\nimport CurveSubGeometry\t\t\t\t\t= require(\"awayjs-core/lib/data/CurveSubGeometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\r\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\r\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\r\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\r\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\r\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\r\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\r\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\r\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport AnimationNodeBase\t\t\t\t= require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\r\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\r\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport TextField\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/TextField\");\r\nimport Billboard\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\r\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\r\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\r\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\r\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\r\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\r\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\r\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\r\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\r\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\r\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\r\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\r\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\r\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\r\n\r\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\r\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\n\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\r\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\r\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\r\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\r\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\r\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\r\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\r\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\r\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\r\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\r\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\r\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\r\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\r\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\r\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\r\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\r\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\r\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\r\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\r\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\r\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\r\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\r\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\r\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\r\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\r\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\r\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\r\n\r\nimport CurveMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/CurveMaterial\")\r\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\r\n\r\nimport TimelineSceneGraphFactory \t= require(\"awayjs-player/lib/factories/TimelineSceneGraphFactory\");\r\nimport AS2SceneGraphFactory \t\t= require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\r\nimport MovieClip \t\t\t\t\t= require(\"awayjs-player/lib/display/MovieClip\");\r\nimport TimelineKeyFrame \t\t\t= require(\"awayjs-player/lib/timeline/TimelineKeyFrame\");\r\nimport AddChildCommand \t\t\t\t= require(\"awayjs-player/lib/timeline/commands/AddChildCommand\");\r\nimport AddChildAtDepthCommand\t\t= require(\"awayjs-player/lib/timeline/commands/AddChildAtDepthCommand\");\r\nimport ApplyAS2DepthsCommand\t\t= require(\"awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand\");\r\nimport ExecuteScriptCommand \t\t= require(\"awayjs-player/lib/timeline/commands/ExecuteScriptCommand\");\r\nimport RemoveChildCommand \t\t\t= require(\"awayjs-player/lib/timeline/commands/RemoveChildCommand\");\r\nimport RemoveChildrenAtDepthCommand\t= require(\"awayjs-player/lib/timeline/commands/RemoveChildrenAtDepthCommand\");\r\nimport SetInstanceNameCommand \t\t= require(\"awayjs-player/lib/timeline/commands/SetInstanceNameCommand\");\r\nimport UpdatePropertyCommand \t\t= require(\"awayjs-player/lib/timeline/commands/UpdatePropertyCommand\");\r\nimport SetMaskCommand \t\t        = require(\"awayjs-player/lib/timeline/commands/SetMaskCommand\");\r\n\r\nimport Font\t\t\t\t\t\t\t= require(\"awayjs-display/lib/text/Font\");\r\nimport TesselatedFontTable\t\t\t= require(\"awayjs-display/lib/text/TesselatedFontTable\");\r\nimport TextFormat\t\t\t= require(\"awayjs-display/lib/text/TextFormat\");\r\n/**\r\n * AWDParser provides a parser for the AWD data type.\r\n */\r\nclass AWDParser extends ParserBase\r\n{\r\n\t//set to \"true\" to have some console.logs in the Console\r\n\tprivate _debug:boolean = true;\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean = false;\r\n\tprivate _cur_block_id:number;\r\n\tprivate _blocks:Array<AWDBlock>;\r\n\tprivate _newBlockBytes:ByteArray;\r\n\tprivate _version:Array<number>;\r\n\tprivate _compression:number;\r\n\tprivate _accuracyOnBlocks:boolean;\r\n\tprivate _accuracyMatrix:boolean;\r\n\tprivate _accuracyGeo:boolean;\r\n\tprivate _accuracyProps:boolean;\r\n\tprivate _matrixNrType:number;\r\n\tprivate _geoNrType:number;\r\n\tprivate _propsNrType:number;\r\n\tprivate _streaming:boolean;\r\n\tprivate _texture_users:Object = {};\r\n\tprivate _parsed_header:boolean = false;\r\n\tprivate _body:ByteArray;\r\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\r\n\tprivate _cubeTextures:Array<any>;\r\n\tprivate _defaultBitmapMaterial:MethodMaterial;\r\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\r\n\r\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\r\n\tpublic static UNCOMPRESSED:number = 0;\r\n\tpublic static DEFLATE:number = 1;\r\n\tpublic static LZMA:number = 2;\r\n\tpublic static INT8:number = 1;\r\n\tpublic static INT16:number = 2;\r\n\tpublic static INT32:number = 3;\r\n\tpublic static UINT8:number = 4;\r\n\tpublic static UINT16:number = 5;\r\n\tpublic static UINT32:number = 6;\r\n\tpublic static FLOAT32:number = 7;\r\n\tpublic static FLOAT64:number = 8;\r\n\tpublic static BOOL:number = 21;\r\n\tpublic static COLOR:number = 22;\r\n\tpublic static BADDR:number = 23;\r\n\tpublic static AWDSTRING:number = 31;\r\n\tpublic static AWDBYTEARRAY:number = 32;\r\n\tpublic static VECTOR2x1:number = 41;\r\n\tpublic static VECTOR3x1:number = 42;\r\n\tpublic static VECTOR4x1:number = 43;\r\n\tpublic static MTX3x2:number = 44;\r\n\tpublic static MTX3x3:number = 45;\r\n\tpublic static MTX4x3:number = 46;\r\n\tpublic static MTX4x4:number = 47;\r\n\r\n\tprivate blendModeDic:Array<string>;\r\n\tprivate _depthSizeDic:Array<number>;\r\n\tprivate _allFontTables:Array<TesselatedFontTable>;\r\n\r\n\t/**\r\n\t * Creates a new AWDParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._blocks = new Array<AWDBlock>();\r\n\t\tthis._blocks[0] = new AWDBlock();\r\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\r\n\r\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.ADD);\r\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\r\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\r\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\r\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\r\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\r\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\r\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\r\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\r\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\r\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\r\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\r\n\t\tthis._depthSizeDic.push(256);\r\n\t\tthis._depthSizeDic.push(512);\r\n\t\tthis._depthSizeDic.push(2048);\r\n\t\tthis._depthSizeDic.push(1024);\r\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"awd\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// this will be called when Dependency has finished loading.\r\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\r\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\r\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\r\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\r\n\t\t\tvar asset:TextureBase;\r\n\t\t\tvar thisBitmapTexture:Texture2DBase;\r\n\t\t\tvar block:AWDBlock;\r\n\r\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\r\n\t\t\t{\r\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\r\n\t\t\t\tif (asset) {\r\n\t\t\t\t\tvar mat:MethodMaterial;\r\n\t\t\t\t\tvar users:Array<string>;\r\n\r\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\r\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\r\n\t\t\t{\r\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\r\n\r\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\r\n\r\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\r\n\t\t\t\tthis._texture_users[ressourceID].push(1);\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\r\n\r\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\r\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\r\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\r\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\r\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\r\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\r\n\r\n\t\t\t\t\tasset = <TextureBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\r\n\t\t\t\t\tblock = this._blocks[ressourceID];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\r\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve a dependency name\r\n\t *\r\n\t * @param resourceDependency The dependency to be resolved.\r\n\t */\r\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\r\n\t{\r\n\t\tvar oldName:string = asset.name;\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\r\n\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t}\r\n\r\n\t\tvar newName:string = asset.name;\r\n\r\n\t\tasset.name = oldName;\r\n\r\n\t\treturn newName;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\tif (!this._parsed_header) {\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Parse header and decompress body if needed\r\n\t\t\tthis.parseHeader();\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\r\n\t\t\t\t\tthis._body = this._byteData;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// Compressed AWD Formats not yet supported\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t case AWDParser.DEFLATE:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress();\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t case AWDParser.LZMA:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t //*/\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._parsed_header = true;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t}\r\n\r\n\t\tif (this._body) {\r\n\r\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\r\n\t\t\t{\r\n\t\t\t\tthis.parseNextBlock();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Return complete status\r\n\t\t\tif (this._body.getBytesAvailable() == 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t\treturn  ParserBase.PARSING_DONE;\r\n\t\t\t} else {\r\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t\t// Error - most likely _body not set because we do not support compression.\r\n\t\t\treturn  ParserBase.PARSING_DONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate dispose():void\r\n\t{\r\n\r\n\t\tfor (var c in this._blocks) {\r\n\r\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\r\n\t\t\tb.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseNextBlock():void\r\n\t{\r\n\t\tvar block:AWDBlock;\r\n\t\tvar assetData:IAsset;\r\n\t\tvar isParsed:boolean = false;\r\n\t\tvar ns:number;\r\n\t\tvar type:number;\r\n\t\tvar flags:number;\r\n\t\tvar len:number;\r\n\r\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\r\n\r\n\t\tns = this._body.readUnsignedByte();\r\n\t\ttype = this._body.readUnsignedByte();\r\n\t\tflags = this._body.readUnsignedByte();\r\n\t\tlen = this._body.readUnsignedInt();\r\n\r\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\r\n\r\n\t\tif (this._accuracyOnBlocks) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyGeo) {\r\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyMatrix) {\r\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyProps) {\r\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar blockEndAll:number = this._body.position + len;\r\n\r\n\t\tif (len > this._body.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\r\n\t\t\tthis._body.position += this._body.getBytesAvailable();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._newBlockBytes = new ByteArray();\r\n\r\n\r\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// Compressed AWD Formats not yet supported\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\r\n\t\t\t/*\r\n\t\t\t if (blockCompressionLZMA)\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress();\r\n\t\t\t }\r\n\t\t\t */\r\n\r\n\t\t}\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\r\n\t\t//----------------------------------------------------------------------------\r\n\r\n\t\tthis._newBlockBytes.position = 0;\r\n\t\tblock = new AWDBlock();\r\n\t\tblock.len = this._newBlockBytes.position + len;\r\n\t\tblock.id = this._cur_block_id;\r\n\r\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\r\n\t\t\t//block.len       = blockEndBlock;\r\n\t\t}\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\tthis._blocks[this._cur_block_id] = block;\r\n\r\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\r\n\t\t\t// probably should contain some info about the type of animation\r\n\t\t\tvar factory = new AS2SceneGraphFactory();\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tthis.parseMeshLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 44:\r\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 133:\r\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 134:\r\n\t\t\t\t\tthis.paresTextField(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 135:\r\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 136:\r\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 41:\r\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//  case 43:\r\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\r\n\t\t\t\t//      isParsed = true;\r\n\t\t\t\t//      break;\r\n\r\n\t\t\t\tcase 51:\r\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 91:\r\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 92:\r\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 111:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 112:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 113:\r\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 122:\r\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 253:\r\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t//*/\r\n\t\t}\r\n\t\t//*\r\n\t\tif (isParsed == false) {\r\n\t\t\tswitch (type) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 82:\r\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 101:\r\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 102:\r\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:\r\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 121:\r\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\r\n\t\t\t\t//break;\r\n\t\t\t\tcase 254:\r\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 255:\r\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//*/\r\n\r\n\t\tvar msgCnt:number = 0;\r\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tconsole.log(\"\\n\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._debug) {\r\n\r\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\r\n\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._body.position = blockEndAll;\r\n\t\tthis._newBlockBytes = null;\r\n\r\n\t}\r\n\r\n\r\n\t//--Parser Blocks---------------------------------------------------------------------------\r\n\r\n\r\n\tprivate parseTesselatedFont(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"Font name = \"+this._blocks[blockID].name);\r\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"Font font_style_cnt = \"+font_style_cnt);\r\n\t\tvar new_font:Font=new Font();\r\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\r\n\t\t\tvar font_style_name:string = this.parseVarStr();\r\n\t\t\t//console.log(\"Font font_style_name = \"+font_style_name);\r\n\t\t\tvar new_font_style:TesselatedFontTable=new_font.get_font_table(font_style_name);\r\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\r\n\t\t\t//console.log(\"Font new_font_style.font_em_size = \"+new_font_style.get_font_em_size);\r\n\t\t\tvar font_style_char_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"Font font_style_char_cnt = \"+font_style_char_cnt);\r\n\t\t\tfor (var i:number = 0; i < font_style_char_cnt; ++i) {\r\n\r\n\t\t\t\tvar font_style_char:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"Font font_style_char = \"+font_style_char);\r\n\t\t\t\t// todo: this is basically a simplified version of the subgeom-parsing done in parseTriangleGeometry. Make a parseSubGeom() instead (?)\r\n\t\t\t\tvar sm_len:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar sm_end:number = this._newBlockBytes.position + sm_len;\r\n\t\t\t\t//console.log(\"Font sm_len = \"+sm_len);\r\n\r\n\t\t\t\t//this.parseProperties(null); // no properties for font-table subgeos\r\n\t\t\t\t// Loop through data streams\r\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\t\tvar idx:number = 0;\r\n\t\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t\t// Type, field type, length\r\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\t\tif (str_type == 2) {//face indicies positions\r\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//this.parseProperties(null);// no attributes for font-table subgeos\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tnew_font_style.set_subgeo_for_char(font_style_char.toString(), curve_sub_geom);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a font-table\");\r\n\r\n\t\t}\r\n\t\t//console.log(\"Parsed a font\");\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\r\n\t\tthis._blocks[blockID].data = new_font;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseTextFormat(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"this._blocks[blockID].name  '\" + this._blocks[blockID].name );\r\n\t\tvar font_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"font_id  '\" + font_id);\r\n\t\tvar font_style_name:string = this.parseVarStr();\r\n\t\t//console.log(\"font_style_name  '\" + font_style_name);\r\n\t\tvar returnArrayFont:Array<any> = this.getAssetByID(font_id, [Font.assetType]);\r\n\t\tvar font:Font;\r\n\t\tif (returnArrayFont[0]) {\r\n\t\t\tfont = <Font> returnArrayFont[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Font for this TextFormat. A empty Font is created!\");\r\n\t\t\tfont = new Font();\r\n\t\t}\r\n\t\tvar newTextFormat:TextFormat = new TextFormat();\r\n\t\tnewTextFormat.font_name = font.name;\r\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\r\n\t\tif(font_table!=null){\r\n\t\t\tnewTextFormat.font_style = font_style_name;\r\n\t\t\tnewTextFormat.font_table = font_table;\r\n\t\t}\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"mat  '\" + data_id);\r\n\t\tvar mat:BasicMaterial;\r\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [MaterialBase.assetType]);\r\n\r\n\t\tif (returnedArrayMaterial[0]) {\r\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this TextFormat. Default Material will be used!\");\r\n\t\t\tmat = new BasicMaterial();\r\n\t\t}\r\n\t\tmat.bothSides=true;\r\n\r\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\r\n\t\t//console.log(\"num_uv_values  '\" + num_uv_values);\r\n\t\tvar uv_values:Array<number>=[];\r\n\t\tfor(var uvcnt:number=0; uvcnt<num_uv_values; uvcnt++){\r\n\t\t\tvar uv_value:number=this._newBlockBytes.readFloat();\r\n\t\t\tuv_values.push(uv_value);\r\n\t\t\t//console.log(\"uv_value  '\" + uv_value);\r\n\t\t}\r\n\t\tnewTextFormat.uv_values=uv_values;\r\n\t\tvar format_props:AWDProperties = this.parseProperties({1:AWDParser.UINT16, 2:AWDParser.UINT16, 3:AWDParser.UINT8,4:AWDParser.UINT8,5:AWDParser.UINT8});\r\n\r\n\t\tnewTextFormat.size = format_props.get(1,12);\r\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\r\n\t\t//newTextFormat.rotated = format_props.get(3,false);\r\n\t\tnewTextFormat.kerning = format_props.get(4,true);\r\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\r\n\t\tnewTextFormat.material = mat;\r\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\r\n\t\t//newTextFormat.extra =\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\r\n\t\tthis._blocks[blockID].data = newTextFormat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate paresTextField(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"name  '\" + name);\r\n        var newTextField = factory.createTextField();\r\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar complete_text:string = \"\";\r\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\r\n\t\tvar text_format:TextFormat;\r\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\r\n\r\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\r\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\r\n\r\n\t\t\t\tvar format_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"format_id  '\" + format_id);\r\n\t\t\t\tvar textFormatArray:Array<any> = this.getAssetByID(format_id, [TextFormat.assetType]);\r\n\t\t\t\tif (textFormatArray[0]) {\r\n\t\t\t\t\ttext_format = <TextFormat> textFormatArray[1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\r\n\t\t\t\t\ttext_format = new TextFormat();\r\n\t\t\t\t}\r\n\t\t\t\t//console.log(\"text_format  '\" + text_format.name);\r\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\r\n\t\t\t\tif (txt_length > 0) {\r\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\r\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\r\n\t\t\t\t\tcomplete_text+=this_txt;\r\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//newTextField.closeParagraph();\r\n\t\t}\r\n\t\tnewTextField.textFormat=text_format;\r\n\t\tnewTextField.text=complete_text;\r\n\t\t//newTextField.construct_geometry();\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tnewTextField.extra = this.parseUserAttributes();\r\n\r\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\r\n\t\tthis._blocks[blockID].data = newTextField;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Block ID = 25\r\n\tprivate parseBillBoardLibraryBlock(blockID:number):void {\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mat:BasicMaterial;\r\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [MaterialBase.assetType]);\r\n\r\n\t\tif (returnedArrayMaterial[0]) {\r\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\r\n\t\t\tmat = new BasicMaterial();\r\n\t\t}\r\n\t\tmat.bothSides=true;\r\n\t\tvar billboard:Billboard = new Billboard(mat);\r\n\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tbillboard.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\r\n\t\tthis._blocks[blockID].data = billboard;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\r\n\t\t}\r\n\t}\r\n\t// Block ID = 24\r\n\tprivate parseMeshLibraryBlock(blockID:number):void {\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [Geometry.assetType])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [MaterialBase.assetType])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parseProperties(null);\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Library-Mesh: Name = '\" + name + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\t//var asset:Audio;todo create asset for audio\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\t\t\tconsole.log(\"Audio url = \"+url);\r\n\r\n\t\t} else {\r\n\t\t\t// todo: exporter does not export embed sounds yet\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t// todo parse sound from bytes\r\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t//this._blocks[blockID].data = asset;todo\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 4\r\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\tvar i:number;\r\n\t\tvar j:number;\r\n\t\tvar c:number;\r\n\t\tvar timeLineContainer = factory.createMovieClip();\r\n\t\tvar name = this.parseVarStr();\r\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\r\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar fps:number = this._newBlockBytes.readFloat();\r\n\t\t//console.log(\"fps = \"+fps);\r\n\t\t//timeLineContainer.fps=fps;\r\n\t\tvar ms_per_frame = 1000 / fps;\r\n\t\tvar num_instances:number=0;\r\n\t\tvar num_all_display_instances:number=0;\r\n\r\n\r\n\t\t// register list of potential childs\r\n\t\t// a potential child can be reused on a timeline (added / removed / added)\r\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\r\n\t\t// we parse 2 lists of potential-childs:\r\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\r\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\r\n\r\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\r\n\t\t// hence we need to be careful to register all objects in correct order.\r\n\r\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (i = 0; i < num_potential_childs; i++) {\r\n\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\ttimeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tnum_all_display_instances+=num_potential_childs;\r\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\r\n\t\tnum_potential_childs+=num_potential_childs_multi_instanced;\r\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\r\n\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tnum_instances = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tnum_all_display_instances+=num_instances;\r\n\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\r\n\t\t\t\t\ttimeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\r\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n\t\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(\"Parsed \"+num_potential_childs+\" potential childs. They will be used by \"+num_all_display_instances+\" instances.\");\r\n\r\n\t\t// register list of potential sounds\r\n\t\t// a potential child can be reused on a timeline (added / removed / added)\r\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (i = 0; i < num_potential_sounds; i++) {\r\n\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\t//todo: register sound objects on movieclip\r\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//todo: this is a error that might break complete timeline, because all sound obj-id shift\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(\"Parsed \"+num_potential_sounds+\" potential sounds\");\r\n\r\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t//console.log(\"numFrames \"+numFrames);\r\n\t\t// var previousTimeLine:TimeLineFrame;\r\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\r\n\r\n\r\n\t\tvar totalDuration = 0;\r\n\t\tfor (i = 0; i < numFrames; i++) {\r\n\r\n\t\t\tvar frame = new TimelineKeyFrame();\r\n\t\t\tvar traceString = \"frame = \" + i;\r\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\r\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt()*ms_per_frame;\r\n\t\t\t//console.log(\"frameDuration \"+frameDuration);\r\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\r\n\t\t\ttotalDuration += frameDuration;\r\n\t\t\t//console.log(\"duration = \" + frameDuration);\r\n\t\t\t//traceString += \"duration = \" + frameDuration;\r\n\r\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t//console.log(\"numLabels \"+numLabels);\r\n\t\t\tfor (j = 0; j < numLabels; j++) {\r\n\t\t\t\t//var labelType = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tvar label = this.parseVarStr();\r\n\t\t\t\t// TODO: Handle labels differently\r\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\r\n\t\t\t\t//traceString += \"\\n     label = \" + label;\r\n\t\t\t\t//console.log(\"label \"+label);\r\n\t\t\t}\r\n\r\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t//console.log(\"numCommands \"+numCommands);\r\n\t\t\t//traceString += \"\\n      Commands \" + numCommands;\r\n\t\t\tvar hasDepthChanges = false;\r\n\t\t\tvar commandString = \"\";\r\n\t\t\tfor (j = 0; j < numCommands; j++) {\r\n\t\t\t\tvar objectID:number;\r\n\t\t\t\tvar target_depth:number;\r\n\t\t\t\tvar resourceID:number;\r\n\t\t\t\tvar number_of_obj:number=0;\r\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t\t\t// 1 = remove a number of objects by depth\r\n\t\t\t\t// 2 = add a object by child-id at specific depth\r\n\t\t\t\t// 3 = update a object by child-id\r\n\t\t\t\t// 4 = add / update sound - (not finished)\r\n\r\n\t\t\t\tswitch (commandType) {\r\n\r\n\t\t\t\t\tcase 1:// remove a number of objects at specific depth\r\n\t\t\t\t\t\t//console.log(\"remove_obj \");\r\n\r\n\t\t\t\t\t\tnumber_of_obj = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t//console.log(\"number_of_obj \", number_of_obj);\r\n\t\t\t\t\t\tvar remove_depths:Array<number>=new Array<number>();\r\n\t\t\t\t\t\tfor (c = 0; c < number_of_obj; c++) {\r\n\t\t\t\t\t\t\t// Remove Object Command\r\n\t\t\t\t\t\t\ttarget_depth = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\t\tremove_depths.push(target_depth);\r\n\t\t\t\t\t\t\t//commandString += \"\\n       - Remove object at depth: \" + target_depth;\r\n\t\t\t\t\t\t\t//console.log(\"\\n       - Remove object at depth: \" + target_depth);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildrenAtDepthCommand(remove_depths));\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 2:// add a of object by child-id at specific depth\r\n\t\t\t\t\tcase 3:// update a object by child-id\r\n\t\t\t\t\t\t//console.log(\"add / remove obj \");\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t//console.log(\"objectID \", objectID);\r\n\t\t\t\t\t\tif (commandType == 2) {\r\n\t\t\t\t\t\t\thasDepthChanges=true;\r\n\t\t\t\t\t\t\ttarget_depth = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\r\n\t\t\t\t\t\t\t//console.log(\"target_depth \", target_depth);\r\n                            var potChild = timeLineContainer.getPotentialChild(objectID);\r\n\t\t\t\t\t\t\tif (potChild != undefined) {\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildAtDepthCommand(objectID, target_depth));\r\n\r\n                                if (instanceName.length)\r\n                                    frame.addConstructCommand(new SetInstanceNameCommand(objectID, instanceName));\r\n                                if(potChild.isAsset(TextField)) {\r\n                                    frame.addConstructCommand(new SetInstanceNameCommand(objectID, potChild.name));\r\n                                }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tconsole.log(\"ERROR: could not find the objectID \", objectID);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// read the command properties\r\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\r\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\r\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\r\n\t\t\t\t\t\t// 4: blendmode (uint8)\r\n\t\t\t\t\t\t// 5: visibilty (uint8)\r\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({\r\n\t\t\t\t\t\t\t1: this._matrixNrType,\r\n\t\t\t\t\t\t\t2: this._matrixNrType,\r\n\t\t\t\t\t\t\t3: this._propsNrType,\r\n\t\t\t\t\t\t\t4: AWDParser.UINT8,\r\n\t\t\t\t\t\t\t5: AWDParser.UINT8\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t// todo: fix property parsing so we can read variable size list (atm list with size = 1 is returned as single number)\r\n\t\t\t\t\t\t// for this reason, for now the mask-property is read sepperatly\r\n\t\t\t\t\t\tvar mask_id_nums:number = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tvar mask_ids:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tfor (var mi_cnt:number = 0; mi_cnt < mask_id_nums; mi_cnt++) {\r\n\t\t\t\t\t\t\tmask_ids.push(this._newBlockBytes.readShort());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (timeLineContainer.getPotentialChild(objectID)!=undefined) {\r\n\r\n\t\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\r\n\t\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\r\n\t\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\r\n\t\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\r\n\t\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\r\n\t\t\t\t\t\t\t// todo: handle filters\r\n\r\n\t\t\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\r\n\r\n\t\t\t\t\t\t\t//commandString += \"\\n                transformArray = \" + matrix_2d.length;\r\n\t\t\t\t\t\t\tif (matrix_2d.length == 6) {\r\n\t\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\r\n\t\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\r\n\t\t\t\t\t\t\t\t// todo is this correct for 2d -> 3d scale and rotation. (i doubt it)\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[0] = matrix_2d[0];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[1] = matrix_2d[1];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[4] = matrix_2d[2];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[5] = matrix_2d[3];\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"_iMatrix3D\", thisMatrix));\r\n\t\t\t\t\t\t\t\t//commandString += \"\\n                transformArray = \" + matrix_2d;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\r\n\t\t\t\t\t\t\tif (colortransform.length == 20) {\r\n\t\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\r\n\t\t\t\t\t\t\t\t//commandString += \"\\n                colorMatrix = \" + colortransform;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// blendmode must be positive to be valid\r\n\t\t\t\t\t\t\tif (blendmode >= 0) {\r\n\t\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\r\n\t\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\r\n\t\t\t\t\t\t\t\t//commandString += \"\\n                BlendMode = \" + blendmode_string;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// visibilty must be positive to be valid\r\n\t\t\t\t\t\t\tif (visibilty >= 0) {\r\n\t\t\t\t\t\t\t\tif (visibilty == 0)\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"visible\", false));\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"visible\", true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\r\n\t\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\r\n\t\t\t\t\t\t\tif (mask_ids.length > 0) {\r\n\t\t\t\t\t\t\t\tif ((mask_ids.length == 1) && (mask_ids[0] == -1)) {\r\n\t\t\t\t\t\t\t\t\t// TODO: this object is used as mask\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"_iMaskID\", objectID));\r\n\t\t\t\t\t\t\t\t\t//commandString += \"\\n                obj is used as mask\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new SetMaskCommand(objectID, mask_ids));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// todo: handle filters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tconsole.log(\"ERROR: could not find the objectID \", objectID);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 4:\r\n\r\n\t\t\t\t\t\t// Add Sound Command\r\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\t// TODO: implement sound in timeline\r\n\t\t\t\t\t\t//commandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t//commandString += \"\\n       - Unknown Command Type = \" + commandType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDepthChanges) {\r\n\t\t\t\t// only want to do this once after all children's depth values are updated\r\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\r\n\t\t\t\thasDepthChanges = false;\r\n\t\t\t}\r\n\r\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tif (length_code > 0) {\r\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\r\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\r\n\t\t\t\tframe.addConstructCommand(new ExecuteScriptCommand(frame_code));\r\n\t\t\t\t//traceString += \"\\nframe-code = \" + frame_code;\r\n\t\t\t}\r\n\t\t\t//traceString += commandString;\r\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\r\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\r\n\t\t\t//console.log(traceString);\r\n\t\t\ttimeLineContainer.addFrame(frame);\r\n\r\n\t\t}\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\r\n\t\tthis._blocks[blockID].data = timeLineContainer;\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\r\n\t}\r\n\t//Block ID = 1\r\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\r\n\t{\r\n\r\n\t\tvar geom:Geometry = new Geometry();\r\n\r\n\t\t// Read name and sub count\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t// Read optional properties\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\tvar geoScaleU:number = props.get(1, 1);\r\n\t\tvar geoScaleV:number = props.get(2, 1);\r\n\r\n\t\t// Loop through sub meshes\r\n\t\tvar subs_parsed:number = 0;\r\n\t\twhile (subs_parsed < num_subs) {\r\n\t\t\tvar is_curve_geom:boolean=false;\r\n\t\t\tvar i:number;\r\n\t\t\tvar sm_len:number, sm_end:number;\r\n\t\t\tvar w_indices:Array<number>;\r\n\t\t\tvar weights:Array<number>;\r\n\r\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\r\n\r\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\t\t// Loop through data streams\r\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\tvar idx:number = 0;\r\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t// Type, field type, length\r\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\r\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\r\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 3) {\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 4) {\r\n\r\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 6) {\r\n\t\t\t\t\tw_indices = Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 7) {\r\n\r\n\t\t\t\t\tweights = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\tis_curve_geom=true;\r\n\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\tpositions[idx_pos++] =  this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\r\n\t\t\tif(is_curve_geom){\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tgeom.addSubGeometry(curve_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a CurveSubGeometry\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar triangle_sub_geom = new TriangleSubGeometry(true);\r\n\t\t\t\tif (weights)\r\n\t\t\t\t\ttriangle_sub_geom.jointsPerVertex = weights.length / (verts.length / 3);\r\n\t\t\t\tif (normals)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (uvs)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveUVs = false;\r\n\t\t\t\t//triangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (true) {\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveTangents = true;\r\n\t\t\t\t}\r\n\t\t\t\ttriangle_sub_geom.updateIndices(indices);\r\n\t\t\t\ttriangle_sub_geom.updatePositions(verts);\r\n\t\t\t\ttriangle_sub_geom.updateVertexNormals(normals);\r\n\t\t\t\ttriangle_sub_geom.updateUVs(uvs);\r\n\t\t\t\ttriangle_sub_geom.updateVertexTangents(null);\r\n\t\t\t\ttriangle_sub_geom.updateJointWeights(weights);\r\n\t\t\t\ttriangle_sub_geom.updateJointIndices(w_indices);\r\n\r\n\t\t\t\tvar scaleU:number = subProps.get(1, 1);\r\n\t\t\t\tvar scaleV:number = subProps.get(2, 1);\r\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\r\n\r\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\r\n\t\t\t\t\tsetSubUVs = true;\r\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\r\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (setSubUVs)\r\n\t\t\t\t\ttriangle_sub_geom.scaleUV(scaleU, scaleV);\r\n\t\t\t\tgeom.addSubGeometry(triangle_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleSubGeometry\");\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\r\n\t\t\t// when creating meshes (and their material assignments.)\r\n\r\n\t\t\tsubs_parsed++;\r\n\t\t}\r\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\r\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\r\n\t\tthis._blocks[blockID].data = geom;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//Block ID = 11\r\n\tprivate parsePrimitves(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar prefab:PrefabBase;\r\n\t\tvar primType:number;\r\n\t\tvar subs_parsed:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar bsm:Matrix3D;\r\n\r\n\t\t// Read name and sub count\r\n\t\tname = this.parseVarStr();\r\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\r\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\r\n\r\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\r\n\r\n\t\tswitch (primType) {\r\n\t\t\t// to do, not all properties are set on all primitives\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3:\r\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\r\n\t\t\t\tif (!props.get(701, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\r\n\t\t\t\tif (!props.get(702, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\r\n\t\t\t\tif (!props.get(703, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 5:\r\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 7:\r\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tprefab = new PrefabBase();\r\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\r\n\t\t\t//geom.subGeometries;\r\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tprefab.name = name;\r\n\t\tthis._pFinalizeAsset(prefab, name);\r\n\t\tthis._blocks[blockID].data = prefab;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif ((primType < 0) || (primType > 7)) {\r\n\t\t\t\tprimType = 0;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 22\r\n\tprivate parseContainer(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar par_id:number;\r\n\t\tvar mtx:Matrix3D;\r\n\t\tvar ctr:DisplayObjectContainer;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\r\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\r\n\t\tmtx = this.parseMatrix3D();\r\n\t\tname = this.parseVarStr();\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tctr = new DisplayObjectContainer();\r\n\t\tctr.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\r\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\r\n\t\t}\r\n\r\n\t\t// in AWD version 2.1 we read the Container properties\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t}\r\n\t\t// in other versions we do not read the Container properties\r\n\t\telse {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\r\n\t\tctr.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\r\n\t\tthis._blocks[blockID].data = ctr;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 23\r\n\tprivate parseMeshInstance(blockID:number):void\r\n\t{\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [Geometry.assetType])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [MaterialBase.assetType])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\t\tmesh.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(mesh);\r\n\t\t\tparentName = objC.name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\t\t}\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\r\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\r\n\t\t\tmesh.castsShadows = props.get(5, true);\r\n\t\t} else {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID 31\r\n\tprivate parseSkyboxInstance(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [TextureBase.assetType], \"CubeTexture\");\r\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\r\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\r\n\r\n\t\tthis.parseProperties(null)\r\n\t\tasset.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(asset, name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\r\n\r\n\t}\r\n\r\n\t//Block ID = 41\r\n\tprivate parseLight(blockID:number):void\r\n\t{\r\n\t\tvar light:LightBase;\r\n\t\tvar newShadowMapper:ShadowMapperBase;\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\r\n\t\tvar shadowMapperType:number = props.get(9, 0);\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\r\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\r\n\r\n\t\tif (lightType == 1) {\r\n\t\t\tlight = new PointLight();\r\n\r\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\r\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 4) {\r\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.transform.matrix3D = mtx;\r\n\r\n\t\t}\r\n\r\n\t\tif (lightType == 2) {\r\n\r\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 1) {\r\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (shadowMapperType == 2)\r\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\r\n\t\t\t\t//if (shadowMapperType == 3)\r\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tlight.color = props.get(3, 0xffffff);\r\n\t\tlight.specular = props.get(4, 1.0);\r\n\t\tlight.diffuse = props.get(5, 1.0);\r\n\t\tlight.ambientColor = props.get(7, 0xffffff);\r\n\t\tlight.ambient = props.get(8, 0.0);\r\n\r\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\r\n\t\tif (newShadowMapper) {\r\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\r\n\t\t\t\tif (props.get(10, 1) != 1) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (props.get(10, 2) != 2) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.shadowMapper = newShadowMapper;\r\n\t\t\tlight.castsShadows = true;\r\n\t\t}\r\n\r\n\t\tif (par_id != 0) {\r\n\r\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\r\n\r\n\t\t\tif (returnedArrayParent[0]) {\r\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\r\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\r\n\r\n\t\tthis._blocks[blockID].data = light;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\r\n\r\n\t}\r\n\r\n\t//Block ID = 43\r\n\tprivate parseCamera(blockID:number):void\r\n\t{\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar projection:ProjectionBase;\r\n\r\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\r\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\r\n\r\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\r\n\r\n\t\tswitch (projectiontype) {\r\n\t\t\tcase 5001:\r\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5002:\r\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5003:\r\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar camera:Camera = new Camera(projection);\r\n\t\tcamera.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(camera);\r\n\r\n\t\t\tparentName = objC.name;\r\n\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\r\n\t\t}\r\n\r\n\t\tcamera.name = name;\r\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\tcamera.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(camera, name);\r\n\r\n\t\tthis._blocks[blockID].data = camera\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 51\r\n\tprivate parseLightPicker(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\r\n\t\tvar k:number = 0;\r\n\t\tvar lightID:number = 0;\r\n\r\n\t\tvar returnedArrayLight:Array<any>;\r\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\r\n\r\n\t\tfor (k = 0; k < numLights; k++) {\r\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [LightBase.assetType])\r\n\r\n\t\t\tif (returnedArrayLight[0]) {\r\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\r\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lightsArray.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\treturn; //return without any more parsing for this block\r\n\t\t}\r\n\r\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\r\n\t\tlightPick.name = name;\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\r\n\r\n\t\tthis._blocks[blockID].data = lightPick\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 81\r\n\tprivate parseMaterial(blockID:number):void\r\n\t{\r\n\t\t// TODO: not used\r\n\t\t////blockLength = block.len;\r\n\t\tvar name:string;\r\n\t\tvar type:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar attributes:Object;\r\n\t\tvar finalize:boolean;\r\n\t\tvar num_methods:number;\r\n\t\tvar methods_parsed:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tname = this.parseVarStr();\r\n\t\ttype = this._newBlockBytes.readUnsignedByte();\r\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t// Read material numerical properties\r\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\r\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\r\n\r\n\t\tmethods_parsed = 0;\r\n\t\twhile (methods_parsed < num_methods) {\r\n\t\t\tvar method_type:number;\r\n\r\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tmethods_parsed += 1;\r\n\t\t}\r\n\t\tvar debugString:string = \"\";\r\n\t\tattributes = this.parseUserAttributes();\r\n\t\tif (type === 1) { // Color material\r\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\tvar color:number;\r\n\t\t\tcolor = props.get(1, 0xffffff);\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t} else {\r\n\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t}\r\n\t\t} else if (type === 2) {\r\n\t\t\tvar tex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\r\n\r\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\r\n\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t} else {\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmat.extra = attributes;\r\n\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\tmat.repeat = props.get(13, false);\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\t\tthis._blocks[blockID].data = mat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 81 AWD2.1\r\n\tprivate parseMaterial_v1(blockID:number):void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar normalTexture:Texture2DBase;\r\n\t\tvar specTexture:Texture2DBase;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\r\n\t\tvar spezialType:number = props.get(4, 0);\r\n\t\tvar debugString:string = \"Parsed Material \";\r\n\r\n\t\tif (spezialType >= 2) {//this is no supported material\r\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type <= 2) {// Color material\r\n\t\t\tif (this.materialMode == 1)\r\n\t\t\t\tspezialType = 0;\r\n\t\t\telse if (this.materialMode == 2)\r\n\t\t\t\tspezialType = 1;\r\n\r\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\r\n\r\n\t\t\t\tif (type == 1) {// Color material\r\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\r\n\r\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\r\n\r\n\t\t\t\t\t} else { //\tSinglePassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (type == 2) {// texture material\r\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\r\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\r\n\r\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\r\n\r\n\t\t\t\t\tmat = new MethodMaterial(texture);\r\n\r\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t} else {//\tSinglePassMaterial\r\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0])\r\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\r\n\t\t\t\tif (diffuseTexture) {\r\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\r\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tnormalTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tspecTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [LightPickerBase.assetType])\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\r\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.smooth = props.get(5, true);\r\n\t\t\t\tmat.mipmap = props.get(6, true);\r\n\t\t\t\tmat.bothSides = props.get(7, false);\r\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\r\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\r\n\t\t\t\tmat.repeat = props.get(13, false);\r\n\r\n\t\t\t\tif (normalTexture)\r\n\t\t\t\t\tmat.normalMap = normalTexture;\r\n\r\n\t\t\t\tif (specTexture)\r\n\t\t\t\t\tmat.specularMap = specTexture;\r\n\r\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\t\t\tmat.ambient = props.get(15, 1.0);\r\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\r\n\t\t\t\tmat.specular = props.get(18, 1.0);\r\n\t\t\t\tmat.gloss = props.get(19, 50);\r\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\r\n\r\n\t\t\t\tvar methods_parsed:number = 0;\r\n\t\t\t\tvar targetID:number;\r\n\r\n\t\t\t\twhile (methods_parsed < num_methods) {\r\n\t\t\t\t\tvar method_type:number;\r\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t\tprops = this.parseProperties({\r\n\t\t\t\t\t\t1: AWDParser.BADDR,\r\n\t\t\t\t\t\t2: AWDParser.BADDR,\r\n\t\t\t\t\t\t3: AWDParser.BADDR,\r\n\t\t\t\t\t\t101: this._propsNrType,\r\n\t\t\t\t\t\t102: this._propsNrType,\r\n\t\t\t\t\t\t103: this._propsNrType,\r\n\t\t\t\t\t\t201: AWDParser.UINT32,\r\n\t\t\t\t\t\t202: AWDParser.UINT32,\r\n\t\t\t\t\t\t301: AWDParser.UINT16,\r\n\t\t\t\t\t\t302: AWDParser.UINT16,\r\n\t\t\t\t\t\t401: AWDParser.UINT8,\r\n\t\t\t\t\t\t402: AWDParser.UINT8,\r\n\t\t\t\t\t\t601: AWDParser.COLOR,\r\n\t\t\t\t\t\t602: AWDParser.COLOR,\r\n\t\t\t\t\t\t701: AWDParser.BOOL,\r\n\t\t\t\t\t\t702: AWDParser.BOOL,\r\n\t\t\t\t\t\t801: AWDParser.MTX4x4\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswitch (method_type) {\r\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [EffectMethodBase.assetType]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\r\n\r\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\r\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\r\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\r\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\r\n\t\t\t\t\t\t\tif (!mat.normalMap)\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\r\n\r\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\r\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.parseUserAttributes();\r\n\t\t\t\t\tmethods_parsed += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// todo: we should not need this anymore (if using texture-atlas)\r\n\t\telse if ((type>=3)&&(type<=7)){\r\n\t\t\t// if this is a curve material, we create it, finalize it, assign it to block-cache and return and return.\r\n\t\t\tvar color:number = props.get(1, 0xcccccc);\r\n\t\t\tdebugString+=color;\r\n\r\n\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\tvar diffuseTex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\tdiffuseTexture = DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t}\r\n\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\t\t\tvar curve_mat:CurveMaterial = new CurveMaterial(diffuseTexture);\r\n\t\t\t//debugString+= \" alpha = \"+props.get(10, 1.0)+\" \";\r\n\t\t\tdebugString+= \" texture = \"+diffuseTex_addr+\" \";\r\n\t\t\tcurve_mat.bothSides = true;\r\n\t\t\tcurve_mat.preserveAlpha = true;\r\n\t\t\tcurve_mat.alphaBlending = true;\r\n\t\t\tcurve_mat.extra = this.parseUserAttributes();\r\n\t\t\tthis._pFinalizeAsset(<IAsset> curve_mat, name);\r\n\t\t\tthis._blocks[blockID].data = curve_mat;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(debugString);\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\t\tmat.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\r\n\t\tthis._blocks[blockID].data = mat;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 82\r\n\tprivate parseTexture(blockID:number):void\r\n\t{\r\n\r\n\t\tvar asset:Texture2DBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\r\n\t\t} else {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t//\r\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\r\n\t\t\t//\r\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\r\n\t\t\t// This gives the browser time to initialise image width / height.\r\n\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 83\r\n\tprivate parseCubeTexture(blockID:number):void\r\n\t{\r\n\t\t//blockLength = block.len;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:CubeTextureBase;\r\n\t\tvar i:number;\r\n\r\n\t\tthis._cubeTextures = new Array<any>();\r\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\t\t\tthis._cubeTextures.push(null);\r\n\r\n\t\t\t// External\r\n\t\t\tif (type == 0) {\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar url:string;\r\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar data:ByteArray;\r\n\t\t\t\tdata = new ByteArray();\r\n\r\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 91\r\n\tprivate parseSharedMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar asset:EffectMethodBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\t\tasset = this.parseSharedMethodList(blockID);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 92\r\n\tprivate parseShadowMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar type:number;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:ShadowMethodBase;\r\n\t\tvar shadowLightID:number;\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [LightBase.assetType]);\r\n\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\r\n\r\n\t\tif (!asset)\r\n\t\t\treturn;\r\n\r\n\t\tthis.parseUserAttributes(); // Ignore for now\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID = 253\r\n\tprivate parseCommand(blockID:number):void\r\n\t{\r\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar parentObject:DisplayObjectContainer;\r\n\t\tvar targetObject:DisplayObjectContainer;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\r\n\t\t}\r\n\r\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\r\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tswitch (typeCommand) {\r\n\t\t\tcase 1:\r\n\r\n\t\t\t\tvar targetID:number = props.get(1, 0);\r\n\t\t\t\t//var returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [LightBase.assetType, TextureProjector.assetType]); //for no only light is requested!!!!\r\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [LightBase.assetType]); //for no only light is requested!!!!\r\n\r\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = returnedArrayTarget[1];\r\n\r\n\t\t\t\tif (parentObject) {\r\n\t\t\t\t\tparentObject.addChild(targetObject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (targetObject) {\r\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\r\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t\ttargetObject.extra = this.parseUserAttributes();\r\n\r\n\t\t}\r\n\t\tthis._blocks[blockID].data = targetObject\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//blockID 255\r\n\tprivate parseMetaData(blockID:number):void\r\n\t{\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\r\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\r\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\r\n\t\t}\r\n\t}\r\n\r\n\t//blockID 254\r\n\tprivate parseNameSpace(blockID:number):void\r\n\t{\r\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar nameSpaceString:string = this.parseVarStr();\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\r\n\t}\r\n\r\n\t//--Parser UTILS---------------------------------------------------------------------------\r\n\r\n\t// this functions reads and creates a ShadowMethodMethod\r\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar shadowMethod:ShadowMethodBase;\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\r\n\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>\r\n\t\tswitch (methodType) {\r\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\r\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\r\n\t\t\t//\t\t\t\t\t}\r\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 1002: //ShadowNearMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\r\n\t\t\t\t\treturn shadowMethod;\r\n\t\t\t\t}\r\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1101: //ShadowFilteredMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1102: //ShadowDitheredMethod\r\n\r\n\r\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1103: //ShadowSoftMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1104: //ShadowHardMethod\r\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn shadowMethod;\r\n\t}\r\n\r\n\t//Block ID 101\r\n\tprivate parseSkeleton(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar skeleton:Skeleton = new Skeleton();\r\n\t\tthis.parseProperties(null); // Discard properties for now\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint:SkeletonJoint;\r\n\t\t\tvar ibp:Matrix3D;\r\n\t\t\t// Ignore joint id\r\n\t\t\tthis._newBlockBytes.readUnsignedShort();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\r\n\t\t\tjoint.name = this.parseVarStr();\r\n\r\n\t\t\tibp = this.parseMatrix3D();\r\n\t\t\tjoint.inverseBindPose = ibp.rawData;\r\n\t\t\t// Ignore joint props/attributes for now\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tskeleton.joints.push(joint);\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\r\n\t\t// Discard attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(skeleton, name);\r\n\t\tthis._blocks[blockID].data = skeleton;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//Block ID = 102\r\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar pose:SkeletonPose = new SkeletonPose();\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint_pose:JointPose;\r\n\t\t\tvar has_transform:number /*uint*/;\r\n\t\t\tjoint_pose = new JointPose();\r\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\r\n\t\t\tif (has_transform == 1) {\r\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\r\n\r\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\r\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\r\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\r\n\r\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\r\n\t\t\t}\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\t\t// Skip attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(pose, name);\r\n\t\tthis._blocks[blockID].data = pose;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//blockID 103\r\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar frame_dur:number;\r\n\t\tvar pose_addr:number /*uint*/;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar returnedArray:Array<any>;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [SkeletonPose.assetType]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\r\n\t\t\telse\r\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif (clip.frames.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Ignore attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//Block ID = 111 /  Block ID = 112\r\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\r\n\t{\r\n\t\tvar num_frames:number /*uint*/ = 1;\r\n\t\tvar num_submeshes:number /*uint*/;\r\n\t\tvar frames_parsed:number /*uint*/;\r\n\t\tvar subMeshParsed:number /*uint*/;\r\n\t\tvar frame_dur:number;\r\n\t\tvar x:number;\r\n\t\tvar y:number;\r\n\t\tvar z:number;\r\n\t\tvar str_len:number;\r\n\t\tvar str_end:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar idx:number /*int*/ = 0;\r\n\t\tvar clip:VertexClipNode = new VertexClipNode();\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\t\tvar verts:Array<number>;\r\n\t\tvar num_Streams:number /*int*/ = 0;\r\n\t\tvar streamsParsed:number /*int*/ = 0;\r\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar thisGeo:Geometry;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [Geometry.assetType]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\r\n\t\tif (!poseOnly)\r\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\r\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\r\n\t\tstreamsParsed = 0;\r\n\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\r\n\t\t\tstreamsParsed++;\r\n\t\t}\r\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\r\n\r\n\t\tclip.looping = props.get(1, true);\r\n\t\tclip.stitchFinalFrame = props.get(2, false);\r\n\r\n\t\tframes_parsed = 0;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tsubMeshParsed = 0;\r\n\t\t\twhile (subMeshParsed < num_submeshes) {\r\n\t\t\t\tstreamsParsed = 0;\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\t\t\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\r\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\r\n\t\t\t\t\t\tverts = new Array<number>();\r\n\t\t\t\t\t\tidx = 0;\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\r\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\r\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\r\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\r\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\r\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\r\n\t\t\t\t\t\tsubMeshParsed++;\r\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\tstreamsParsed++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//BlockID 113\r\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar poseBlockAdress:number /*int*/\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\r\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AnimationNodeBase.assetType]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\r\n\t\t\telse {\r\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\r\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\r\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\r\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\r\n\t\t\t}\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tif (vertexFrames.length > 0) {\r\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\r\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\r\n\r\n\t\t} else if (skeletonFrames.length > 0) {\r\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AnimationNodeBase.assetType]);\r\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\r\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\r\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t//BlockID 122\r\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar targetMesh:Mesh;\r\n\t\tvar animSetBlockAdress:number /*int*/\r\n\t\tvar targetAnimationSet:AnimationSetBase;\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\r\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\r\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\r\n\r\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tvar returnedArray:Array<any>;\r\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\r\n\r\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\r\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [Mesh.assetType]);\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\r\n\t\t}\r\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AnimationSetBase.assetType]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\r\n\t\t\treturn\r\n\t\t}\r\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\r\n\t\tvar thisAnimator:AnimatorBase;\r\n\t\tif (type == 1) {\r\n\r\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [Skeleton.assetType]);\r\n\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\r\n\r\n\t\t} else if (type == 2)\r\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\r\n\r\n\t\tthis._pFinalizeAsset(thisAnimator, name);\r\n\t\tthis._blocks[blockID].data = thisAnimator;\r\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\r\n\t\t\tif (type == 1)\r\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\r\n\t\t\tif (type == 2)\r\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\r\n\r\n\t\t}\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\r\n\t}\r\n\r\n\t// this functions reads and creates a EffectMethod\r\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar effectMethodReturn:EffectMethodBase;\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tswitch (methodType) {\r\n\t\t\t// Effect Methods\r\n\t\t\tcase 401: //ColorMatrix\r\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 402: //ColorTransform\r\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\r\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\r\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 403: //EnvMap\r\n\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\tconsole.log('ENV MAP', targetID);\r\n\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ TextureBase.assetType ], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\r\n\t\t\t\ttargetID = props.get(2, 0);\r\n\t\t\t\tif (targetID > 0) {\r\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\r\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\r\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 404: //LightMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 406: //RimLightMethod\r\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\r\n\t\t\t\tbreak;\r\n\t\t\tcase 407: //AlphaMaskMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\r\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 410: //FresnelEnvMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 411: //FogMethod\r\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn effectMethodReturn;\r\n\r\n\t}\r\n\r\n\tprivate parseUserAttributes():Object\r\n\t{\r\n\t\tvar attributes:Object;\r\n\t\tvar list_len:number;\r\n\t\tvar attibuteCnt:number;\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tif (list_len > 0) {\r\n\r\n\t\t\tvar list_end:number;\r\n\r\n\t\t\tattributes = {};\r\n\r\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar ns_id:number;\r\n\t\t\t\tvar attr_key:string;\r\n\t\t\t\tvar attr_type:number;\r\n\t\t\t\tvar attr_len:number;\r\n\t\t\t\tvar attr_val:any;\r\n\r\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\r\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_key = this.parseVarStr();\r\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn attributes;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (attr_type) {\r\n\t\t\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.BOOL:\r\n\t\t\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT32:\r\n\t\t\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\r\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributes[attr_key] = attr_val;\r\n\t\t\t\tattibuteCnt += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\tprivate parseProperties(expected:Object):AWDProperties\r\n\t{\r\n\t\tvar list_end:number;\r\n\t\tvar list_len:number;\r\n\t\tvar propertyCnt:number = 0;\r\n\t\tvar props:AWDProperties = new AWDProperties();\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\tif (expected) {\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar len:number;\r\n\t\t\t\tvar key:number;\r\n\t\t\t\tvar type:number;\r\n\r\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn props;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\r\n\t\t\t\t\ttype = expected[key];\r\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpropertyCnt += 1;\r\n\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t}\r\n\r\n\t\treturn props;\r\n\r\n\t}\r\n\r\n\tprivate parseAttrValue(type:number, len:number):any\r\n\t{\r\n\t\tvar elem_len:number;\r\n\t\tvar read_func:Function;\r\n\r\n\t\tswitch (type) {\r\n\r\n\t\t\tcase AWDParser.BOOL:\r\n\t\t\tcase AWDParser.INT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT32:\r\n\t\t\tcase AWDParser.COLOR:\r\n\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\r\n\t\t\tcase AWDParser.VECTOR2x1:\r\n\t\t\tcase AWDParser.VECTOR3x1:\r\n\t\t\tcase AWDParser.VECTOR4x1:\r\n\t\t\tcase AWDParser.MTX3x2:\r\n\t\t\tcase AWDParser.MTX3x3:\r\n\t\t\tcase AWDParser.MTX4x3:\r\n\t\t\tcase AWDParser.MTX4x4:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif (elem_len < len) {\r\n\t\t\tvar list:Array<any> = [];\r\n\t\t\tvar num_read:number = 0;\r\n\t\t\tvar num_elems:number = len/elem_len;\r\n\r\n\t\t\twhile (num_read < num_elems) {\r\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\r\n\t\t\t\tnum_read++;\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t} else {\r\n\r\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\r\n\t\t\treturn val;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseHeader():void\r\n\t{\r\n\t\tvar flags:number;\r\n\t\tvar body_len:number;\r\n\r\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\r\n\r\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\r\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\r\n\r\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\r\n\r\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\r\n\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\t}\r\n\r\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\r\n\r\n\t\t// set storagePrecision types\r\n\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyGeo) {\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyMatrix) {\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyProps) {\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\r\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\t// Check file integrity\r\n\t\tbody_len = this._byteData.readUnsignedInt();\r\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\r\n\t\t}\r\n\r\n\t}\r\n\t// Helper - functions\r\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\r\n\t{\r\n\t\tif (this._blocks[meshID].data instanceof Mesh)\r\n\t\t\tmeshID = this._blocks[meshID].geoID;\r\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\r\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\r\n\t\tvar geoCnt:number /*int*/ = 0;\r\n\t\tvar ud:Array<number>;\r\n\t\tvar uStride:number /*uint*/;\r\n\t\tvar uOffs:number /*uint*/;\r\n\t\tvar numPoints:number /*uint*/;\r\n\t\tvar i:number /*int*/;\r\n\t\tvar newUvs:Array<number>;\r\n\t\tvar sub_geom:TriangleSubGeometry;\r\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\r\n\t\twhile (geoCnt < geometry.subGeometries.length) {\r\n\t\t\tnewUvs = new Array<number>();\r\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\r\n\t\t\tnumPoints = sub_geom.numVertices;\r\n\t\t\tud = sub_geom.uvs;\r\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\r\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\r\n\t\t\tfor (i = 0; i < numPoints; i++) {\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\r\n\t\t\t}\r\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\r\n\t\t\tgeoCnt++;\r\n\t\t}\r\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t}\r\n\r\n\tprivate parseVarStr():string\r\n\t{\r\n\r\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\r\n\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\t}\r\n\r\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\r\n\t{\r\n\t\tvar returnArray:Array<any> = new Array<any>();\r\n\t\tvar typeCnt:number = 0;\r\n\t\tif (assetID > 0) {\r\n\t\t\tif (this._blocks[assetID]) {\r\n\t\t\t\tif (this._blocks[assetID].data) {\r\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\r\n\r\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\r\n\r\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\r\n\t\t\t\t\t\t\t//if the right assetType was found\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == TextureBase.assetType) && (extraTypeInfo == \"CubeTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == TextureBase.assetType) && (extraTypeInfo == \"SingleTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == Geometry.assetType) && (IAsset(_blocks[assetID].data).assetType == Mesh.assetType)) {\r\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == Geometry.assetType) && (iasset.assetType == Mesh.assetType)) {\r\n\r\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\r\n\r\n\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\r\n\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttypeCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\r\n\t\treturnArray.push(false);\r\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\r\n\t\treturn returnArray;\r\n\t}\r\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\r\n\t{\r\n\t\tswitch (true) {\r\n\t\t\tcase (assetType == TextureBase.assetType):\r\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\r\n\t\t\t\t\treturn this.getDefaultCubeTexture();\r\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\r\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t\tbreak;\r\n\t\t\tcase (assetType == MaterialBase.assetType):\r\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate getDefaultCubeTexture():IAsset\r\n\t{\r\n\t\tif (!this._defaultCubeTexture) {\r\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\r\n\r\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\r\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\r\n\t\t}\r\n\r\n\t\treturn <IAsset> this._defaultCubeTexture;\r\n\t}\r\n\r\n\tprivate readNumber(precision:boolean = false):number\r\n\t{\r\n\t\tif (precision)\r\n\t\t\treturn this._newBlockBytes.readDouble();\r\n\t\treturn this._newBlockBytes.readFloat();\r\n\r\n\t}\r\n\r\n\tprivate parseMatrix3D():Matrix3D\r\n\t{\r\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\r\n\t}\r\n\r\n\tprivate parseMatrix32RawData():Array<number>\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n\tprivate parseMatrix43RawData():Array<number>\r\n\t{\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\r\n\r\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[3] = 0.0;\r\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[7] = 0.0;\r\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[11] = 0.0;\r\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[15] = 1.0;\r\n\r\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\r\n\r\n\t\tif (isNaN(mtx_raw[0])) {\r\n\t\t\tmtx_raw[0] = 1;\r\n\t\t\tmtx_raw[1] = 0;\r\n\t\t\tmtx_raw[2] = 0;\r\n\t\t\tmtx_raw[4] = 0;\r\n\t\t\tmtx_raw[5] = 1;\r\n\t\t\tmtx_raw[6] = 0;\r\n\t\t\tmtx_raw[8] = 0;\r\n\t\t\tmtx_raw[9] = 0;\r\n\t\t\tmtx_raw[10] = 1;\r\n\t\t\tmtx_raw[12] = 0;\r\n\t\t\tmtx_raw[13] = 0;\r\n\t\t\tmtx_raw[14] = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n}\r\n\r\nexport = AWDParser;\r\n\r\nclass AWDBlock\r\n{\r\n\tpublic id:number;\r\n\tpublic name:string;\r\n\tpublic data:any;\r\n\tpublic len:any;\r\n\tpublic geoID:number;\r\n\tpublic extras:Object;\r\n\tpublic bytes:ByteArray;\r\n\tpublic errorMessages:Array<string>;\r\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\r\n\r\n\tconstructor()\r\n\t{\r\n\t}\r\n\r\n\tpublic dispose()\r\n\t{\r\n\r\n\t\tthis.id = null;\r\n\t\tthis.bytes = null;\r\n\t\tthis.errorMessages = null;\r\n\t\tthis.uvsForVertexAnimation = null;\r\n\r\n\t}\r\n\r\n\tpublic addError(errorMsg:string):void\r\n\t{\r\n\t\tif (!this.errorMessages)\r\n\t\t\tthis.errorMessages = new Array<string>();\r\n\r\n\t\tthis.errorMessages.push(errorMsg);\r\n\t}\r\n}\r\n\r\nclass AWDProperties\r\n{\r\n\tpublic set(key:number, value:any):void\r\n\t{\r\n\t\tthis[ key.toString() ] = value;\r\n\t}\r\n\r\n\tpublic get(key:number, fallback:any):any\r\n\t{\r\n\t\tif (this.hasOwnProperty(key.toString())) {\r\n\t\t\treturn this[key.toString()];\r\n\t\t} else {\r\n\t\t\treturn fallback;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BitFlags\r\n{\r\n\tpublic static FLAG1:number = 1;\r\n\tpublic static FLAG2:number = 2;\r\n\tpublic static FLAG3:number = 4;\r\n\tpublic static FLAG4:number = 8;\r\n\tpublic static FLAG5:number = 16;\r\n\tpublic static FLAG6:number = 32;\r\n\tpublic static FLAG7:number = 64;\r\n\tpublic static FLAG8:number = 128;\r\n\tpublic static FLAG9:number = 256;\r\n\tpublic static FLAG10:number = 512;\r\n\tpublic static FLAG11:number = 1024;\r\n\tpublic static FLAG12:number = 2048;\r\n\tpublic static FLAG13:number = 4096;\r\n\tpublic static FLAG14:number = 8192;\r\n\tpublic static FLAG15:number = 16384;\r\n\tpublic static FLAG16:number = 32768;\r\n\r\n\tpublic static test(flags:number, testFlag:number):boolean\r\n\t{\r\n\t\treturn (flags & testFlag) == testFlag;\r\n\t}\r\n}\r\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapData\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\n\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * MD2Parser provides a parser for the MD2 data type.\r\n */\r\nclass MD2Parser extends ParserBase\r\n{\r\n\tpublic static FPS:number /*int*/ = 6;\r\n\r\n\tprivate _clipNodes:Object = new Object();\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _parsedHeader:boolean;\r\n\tprivate _parsedUV:boolean;\r\n\tprivate _parsedFaces:boolean;\r\n\tprivate _parsedFrames:boolean;\r\n\r\n\tprivate _ident:number /*uint*/;\r\n\tprivate _version:number /*uint*/;\r\n\tprivate _skinWidth:number /*uint*/;\r\n\tprivate _skinHeight:number /*uint*/;\r\n\t//private _frameSize : number /*uint*/;\r\n\tprivate _numSkins:number /*uint*/;\r\n\tprivate _numVertices:number /*uint*/;\r\n\tprivate _numST:number /*uint*/;\r\n\tprivate _numTris:number /*uint*/;\r\n\t//private _numGlCmds : number /*uint*/;\r\n\tprivate _numFrames:number /*uint*/;\r\n\tprivate _offsetSkins:number /*uint*/;\r\n\tprivate _offsetST:number /*uint*/;\r\n\tprivate _offsetTris:number /*uint*/;\r\n\tprivate _offsetFrames:number /*uint*/;\r\n\t//private _offsetGlCmds : number /*uint*/;\r\n\tprivate _offsetEnd:number /*uint*/;\r\n\r\n\tprivate _uvIndices:Array<number>;\r\n\tprivate _indices:Array<number> /*uint*/;\r\n\tprivate _vertIndices:Array<number>;\r\n\r\n\t// the current subgeom being built\r\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\tprivate _firstSubGeom:TriangleSubGeometry;\r\n\tprivate _uvs:Array<number>;\r\n\tprivate _finalUV:Array<number>;\r\n\r\n\tprivate _materialNames:Array<string>;\r\n\tprivate _textureType:string;\r\n\tprivate _ignoreTexturePath:boolean;\r\n\tprivate _mesh:Mesh;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate materialFinal:boolean = false;\r\n\tprivate geoCreated:boolean = false;\r\n\r\n\t/**\r\n\t * Creates a new MD2Parser object.\r\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\r\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\r\n\t */\r\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\t\tthis._textureType = textureType;\r\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md2\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.assets.length != 1)\r\n\t\t\treturn;\r\n\r\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\r\n\r\n\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\tmaterial.name = this._mesh.material.name;\r\n\t\t\tthis._mesh.material = material;\r\n\t\t\tthis._pFinalizeAsset(material);\r\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t}\r\n\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// apply system default\r\n\t\tif (this.materialMode < 2) {\r\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t} else {\r\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t}\r\n\r\n\t\t//add to the content property\r\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\tthis.materialFinal = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\r\n\t\t\t// Reset bytearray read position (which may have been\r\n\t\t\t// moved forward by the supportsData() function.)\r\n\t\t\tthis._byteData.position = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\tif (!this._parsedHeader) {\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\r\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\r\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\r\n\t\t\t\tthis._geometry = new Geometry();\r\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\r\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\r\n\r\n\t\t\t\t// Parse header and decompress body\r\n\t\t\t\tthis.parseHeader();\r\n\t\t\t\tthis.parseMaterialNames();\r\n\t\t\t} else if (!this._parsedUV) {\r\n\t\t\t\tthis.parseUV();\r\n\t\t\t} else if (!this._parsedFaces) {\r\n\t\t\t\tthis.parseFaces();\r\n\t\t\t} else if (!this._parsedFrames) {\r\n\t\t\t\tthis.parseFrames();\r\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t} else if (!this.geoCreated) {\r\n\t\t\t\tthis.geoCreated = true;\r\n\t\t\t\t//create default subgeometry\r\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\r\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\r\n\t\t\t\tthis._mesh.name = \"\";\r\n\t\t\t\tif (this.materialFinal) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads in all that MD2 Header data that is declared as private variables.\r\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\r\n\t */\r\n\tprivate parseHeader()\r\n\t{\r\n\t\tthis._ident = this._byteData.readInt();\r\n\t\tthis._version = this._byteData.readInt();\r\n\t\tthis._skinWidth = this._byteData.readInt();\r\n\t\tthis._skinHeight = this._byteData.readInt();\r\n\t\t//skip this._frameSize\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numSkins = this._byteData.readInt();\r\n\t\tthis._numVertices = this._byteData.readInt();\r\n\t\tthis._numST = this._byteData.readInt();\r\n\t\tthis._numTris = this._byteData.readInt();\r\n\t\t//skip this._numGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numFrames = this._byteData.readInt();\r\n\t\tthis._offsetSkins = this._byteData.readInt();\r\n\t\tthis._offsetST = this._byteData.readInt();\r\n\t\tthis._offsetTris = this._byteData.readInt();\r\n\t\tthis._offsetFrames = this._byteData.readInt();\r\n\t\t//skip this._offsetGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._offsetEnd = this._byteData.readInt();\r\n\r\n\t\tthis._parsedHeader = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the file names for the materials.\r\n\t */\r\n\tprivate parseMaterialNames()\r\n\t{\r\n\t\tvar url:string;\r\n\t\tvar name:string;\r\n\t\tvar extIndex:number /*int*/;\r\n\t\tvar slashIndex:number /*int*/;\r\n\t\tthis._materialNames = new Array<string>();\r\n\t\tthis._byteData.position = this._offsetSkins;\r\n\r\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\r\n\t\t\tname = this._byteData.readUTFBytes(64);\r\n\t\t\tname = name.replace(regExp, \"\");\r\n\t\t\textIndex = name.lastIndexOf(\".\");\r\n\t\t\tif (this._ignoreTexturePath)\r\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\r\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\r\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\r\n\t\t\t\turl = name + \".\" + this._textureType;\r\n\t\t\t} else {\r\n\t\t\t\turl = name;\r\n\t\t\t}\r\n\r\n\t\t\tthis._materialNames[i] = name;\r\n\r\n\t\t\t// only support 1 skin TODO: really?\r\n\t\t\tif (this.dependencies.length == 0)\r\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\r\n\t\t}\r\n\r\n\t\tif (this._materialNames.length > 0)\r\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\r\n\t\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the uv data for the mesh.\r\n\t */\r\n\tprivate parseUV()\r\n\t{\r\n\t\tvar j:number /*uint*/ = 0;\r\n\r\n\t\tthis._uvs = new Array<number>(this._numST*2);\r\n\t\tthis._byteData.position = this._offsetST;\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\r\n\t\t}\r\n\r\n\t\tthis._parsedUV = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses unique indices for the faces.\r\n\t */\r\n\tprivate parseFaces()\r\n\t{\r\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\r\n\t\tthis._vertIndices = new Array<number>();\r\n\t\tthis._uvIndices = new Array<number>();\r\n\t\tthis._indices = new Array<number>() /*uint*/;\r\n\r\n\t\tthis._byteData.position = this._offsetTris;\r\n\r\n\t\tfor (i = 0; i < this._numTris; i++) {\r\n\t\t\t//collect vertex indices\r\n\t\t\ta = this._byteData.readUnsignedShort();\r\n\t\t\tb = this._byteData.readUnsignedShort();\r\n\t\t\tc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\t//collect uv indices\r\n\t\t\tta = this._byteData.readUnsignedShort();\r\n\t\t\ttb = this._byteData.readUnsignedShort();\r\n\t\t\ttc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis.addIndex(a, ta);\r\n\t\t\tthis.addIndex(b, tb);\r\n\t\t\tthis.addIndex(c, tc);\r\n\t\t}\r\n\r\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\r\n\t\tthis._finalUV = new Array<number>(len*2);\r\n\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\r\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\r\n\t\t}\r\n\r\n\t\tthis._parsedFaces = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\r\n\t * corresponding vertex and uv data in the correct location.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t */\r\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\r\n\t{\r\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\r\n\r\n\t\tif (index == -1) {\r\n\t\t\tthis._indices.push(this._vertIndices.length);\r\n\t\t\tthis._vertIndices.push(vertexIndex);\r\n\t\t\tthis._uvIndices.push(uvIndex);\r\n\t\t} else\r\n\t\t\tthis._indices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\r\n\t */\r\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\r\n\r\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\r\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses all the frame geometries.\r\n\t */\r\n\tprivate parseFrames()\r\n\t{\r\n\t\tvar sx:number, sy:number, sz:number;\r\n\t\tvar tx:number, ty:number, tz:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\r\n\t\tvar fvertices:Array<number>;\r\n\t\tvar tvertices:Array<number>;\r\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\r\n\t\t//var ch : number /*uint*/;\r\n\t\tvar name:string = \"\";\r\n\t\tvar prevClip:VertexClipNode = null;\r\n\r\n\t\tthis._byteData.position = this._offsetFrames;\r\n\r\n\t\tfor (i = 0; i < this._numFrames; i++) {\r\n\r\n\t\t\ttvertices = new Array<number>();\r\n\t\t\tfvertices = new Array<number>(vertLen*3);\r\n\r\n\t\t\tsx = this._byteData.readFloat();\r\n\t\t\tsy = this._byteData.readFloat();\r\n\t\t\tsz = this._byteData.readFloat();\r\n\r\n\t\t\ttx = this._byteData.readFloat();\r\n\t\t\tty = this._byteData.readFloat();\r\n\t\t\ttz = this._byteData.readFloat();\r\n\r\n\t\t\tname = this.readFrameName();\r\n\r\n\t\t\t// Note, the extra data.position++ in the for loop is there\r\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\r\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\r\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\r\n\r\n\t\t\tk = 0;\r\n\t\t\tfor (j = 0; j < vertLen; j++) {\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\r\n\t\t\t}\r\n\r\n\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\r\n\t\t\tif (this._firstSubGeom == null)\r\n\t\t\t\tthis._firstSubGeom = subGeom;\r\n\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tgeometry.addSubGeometry(subGeom);\r\n\r\n\t\t\tsubGeom.updateIndices(this._indices);\r\n\t\t\tsubGeom.updatePositions(fvertices);\r\n\t\t\tsubGeom.updateUVs(this._finalUV);\r\n\t\t\tsubGeom.vertexNormals;\r\n\t\t\tsubGeom.vertexTangents;\r\n\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\tsubGeom.autoDeriveTangents = false;\r\n\r\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\r\n\r\n\t\t\tif (!clip) {\r\n\t\t\t\t// If another sequence was parsed before this one, starting\r\n\t\t\t\t// a new state means the previous one is complete and can\r\n\t\t\t\t// hence be finalized.\r\n\t\t\t\tif (prevClip) {\r\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclip = new VertexClipNode();\r\n\t\t\t\tclip.name = name;\r\n\t\t\t\tclip.stitchFinalFrame = true;\r\n\r\n\t\t\t\tthis._clipNodes[name] = clip;\r\n\r\n\t\t\t\tprevClip = clip;\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\r\n\t\t}\r\n\r\n\t\t// Finalize the last state\r\n\t\tif (prevClip) {\r\n\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t}\r\n\r\n\t\t// Force this._pFinalizeAsset() to decide name\r\n\t\tthis._pFinalizeAsset(this._animationSet);\r\n\r\n\t\tthis._parsedFrames = true;\r\n\t}\r\n\r\n\tprivate readFrameName():string\r\n\t{\r\n\t\tvar name:string = \"\";\r\n\t\tvar k:number /*uint*/ = 0;\r\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\r\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\r\n\r\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\r\n\t\t\t\tname += String.fromCharCode(ch);\r\n\r\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\r\n\t\t\t\tk++;\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n}\r\n\r\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\n\r\n/**\r\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5AnimParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\r\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\r\n\r\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\r\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\r\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\r\n\tpublic static FRAME_TOKEN:string = \"frame\";\r\n\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _frameRate:number /*int*/;\r\n\tprivate _numFrames:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numAnimatedComponents:number /*int*/;\r\n\r\n\tprivate _hierarchy:Array<HierarchyData>;\r\n\tprivate _bounds:Array<BoundsData>;\r\n\tprivate _frameData:Array<FrameData>;\r\n\tprivate _baseFrameData:Array<BaseFrameData>;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\tprivate _clip:SkeletonClipNode;\r\n\r\n\t/**\r\n\t * Creates a new MD5AnimParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\t\tvar t1:Quaternion = new Quaternion();\r\n\t\tvar t2:Quaternion = new Quaternion();\r\n\r\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\r\n\r\n\t\tthis._rotationQuat.multiply(t2, t1);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tthis._rotationQuat.multiply(t2, t1);\r\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5anim\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"\":\r\n\t\t\t\t\t// can occur at the end of a file\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\r\n\t\t\t\t\tthis._numFrames = this.getNextInt();\r\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\r\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\r\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\r\n\t\t\t\t\tthis._frameRate = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\r\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\r\n\t\t\t\t\tthis.parseHierarchy();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\r\n\t\t\t\t\tthis.parseBounds();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseBaseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis._clip = new SkeletonClipNode();\r\n\t\t\t\tthis.translateClip();\r\n\t\t\t\tthis._pFinalizeAsset(this._clip);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts all key frame data to an SkinnedAnimationSequence.\r\n\t */\r\n\tprivate translateClip():void\r\n\t{\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\r\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a single key frame data to a SkeletonPose.\r\n\t * @param frameData The actual frame data.\r\n\t * @return A SkeletonPose containing the frame data's pose.\r\n\t */\r\n\tprivate translatePose(frameData:FrameData):SkeletonPose\r\n\t{\r\n\t\tvar hierarchy:HierarchyData;\r\n\t\tvar pose:JointPose;\r\n\t\tvar base:BaseFrameData;\r\n\t\tvar flags:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar translate:Vector3D = new Vector3D();\r\n\t\tvar orientation:Quaternion = new Quaternion();\r\n\t\tvar components:Array<number> = frameData.components;\r\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\r\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\r\n\t\t\tj = 0;\r\n\t\t\tpose = new JointPose();\r\n\t\t\thierarchy = this._hierarchy[i];\r\n\t\t\tbase = this._baseFrameData[i];\r\n\t\t\tflags = hierarchy.flags;\r\n\t\t\ttranslate.x = base.position.x;\r\n\t\t\ttranslate.y = base.position.y;\r\n\t\t\ttranslate.z = base.position.z;\r\n\t\t\torientation.x = base.orientation.x;\r\n\t\t\torientation.y = base.orientation.y;\r\n\t\t\torientation.z = base.orientation.z;\r\n\r\n\t\t\tif (flags & 1)\r\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 2)\r\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 4)\r\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 8)\r\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 16)\r\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 32)\r\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\r\n\r\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\r\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\r\n\r\n\t\t\tif (hierarchy.parentIndex < 0) {\r\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\r\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\r\n\t\t\t} else {\r\n\t\t\t\tpose.orientation.copyFrom(orientation);\r\n\t\t\t\tpose.translation.x = translate.x;\r\n\t\t\t\tpose.translation.y = translate.y;\r\n\t\t\t\tpose.translation.z = translate.z;\r\n\t\t\t}\r\n\t\t\tpose.orientation.y = -pose.orientation.y;\r\n\t\t\tpose.orientation.z = -pose.orientation.z;\r\n\t\t\tpose.translation.x = -pose.translation.x;\r\n\r\n\t\t\tjointPoses[i] = pose;\r\n\t\t}\r\n\r\n\t\treturn skelPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's hierarchy data.\r\n\t */\r\n\tprivate parseHierarchy():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:HierarchyData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new HierarchyData();\r\n\t\t\tdata.name = this.parseLiteralstring();\r\n\t\t\tdata.parentIndex = this.getNextInt();\r\n\t\t\tdata.flags = this.getNextInt();\r\n\t\t\tdata.startIndex = this.getNextInt();\r\n\t\t\tthis._hierarchy[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses frame bounds.\r\n\t */\r\n\tprivate parseBounds():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BoundsData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BoundsData();\r\n\t\t\tdata.min = this.parseVector3D();\r\n\t\t\tdata.max = this.parseVector3D();\r\n\t\t\tthis._bounds[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the base frame.\r\n\t */\r\n\tprivate parseBaseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BaseFrameData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BaseFrameData();\r\n\t\t\tdata.position = this.parseVector3D();\r\n\t\t\tdata.orientation = this.parseQuaternion();\r\n\t\t\tthis._baseFrameData[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single frame.\r\n\t */\r\n\tprivate parseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:FrameData;\r\n\t\tvar token:string;\r\n\t\tvar frameIndex:number /*int*/;\r\n\r\n\t\tframeIndex = this.getNextInt();\r\n\r\n\t\ttoken = this.getNextToken();\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new FrameData();\r\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\r\n\r\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\r\n\t\t\t\tdata.components[i] = this.getNextNumber();\r\n\r\n\t\t\tthis._frameData[frameIndex] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex == this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = this.getNextNumber();\r\n\t\tquat.z = this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn quat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5AnimParser;\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass BaseFrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic position:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic orientation:Quaternion;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BoundsData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic min:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic max:Vector3D;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass FrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic index:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic components:Array<number>;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass HierarchyData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic name:string;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic parentIndex:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic flags:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic startIndex:number /*int*/;\r\n}",
    "import Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\n\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\n\r\n// todo: create animation system, parse skeleton\r\n\r\n/**\r\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5MeshParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\tpublic static JOINTS_TOKEN:string = \"joints\";\r\n\tpublic static MESH_TOKEN:string = \"mesh\";\r\n\r\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\r\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\r\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\r\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\r\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\r\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\r\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numMeshes:number /*int*/;\r\n\r\n\tprivate _mesh:Mesh;\r\n\tprivate _shaders:Array<string>;\r\n\r\n\tprivate _maxJointCount:number /*int*/;\r\n\tprivate _meshData:Array<MeshData>;\r\n\tprivate _bindPoses:Array<Matrix3D>;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate _skeleton:Skeleton;\r\n\tprivate _animationSet:SkeletonAnimationSet;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\r\n\t/**\r\n\t * Creates a new MD5MeshParser object.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\r\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tvar quat:Quaternion = new Quaternion();\r\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5mesh\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\r\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\r\n\t\t\t\t\tthis.parseJoints();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\r\n\t\t\t\t\tthis.parseMesh();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis.calculateMaxJointCount();\r\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\r\n\r\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\r\n\t\t\t\tthis._geometry = this._mesh.geometry;\r\n\r\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\r\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\r\n\r\n\t\t\t\t//_geometry.animation = _animation;\r\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\r\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\r\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate calculateMaxJointCount():void\r\n\t{\r\n\t\tthis._maxJointCount = 0;\r\n\r\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\r\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\r\n\t\t\tvar meshData:MeshData = this._meshData[i];\r\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\r\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\r\n\r\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\r\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\r\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\r\n\t\t\t\tif (totalJoints > this._maxJointCount)\r\n\t\t\t\t\tthis._maxJointCount = totalJoints;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\r\n\t{\r\n\t\tvar start:number /*int*/ = vertex.startWeight;\r\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\r\n\t\tvar count:number /*int*/ = 0;\r\n\t\tvar weight:number;\r\n\r\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\r\n\t\t\tweight = weights[i].bias;\r\n\t\t\tif (weight == 0)\r\n\t\t\t\t++count;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's joints.\r\n\t */\r\n\tprivate parseJoints():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar quat:Quaternion;\r\n\t\tvar i:number /*int*/ = 0;\r\n\t\tvar token:string = this.getNextToken();\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tthis._skeleton = new Skeleton();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.name = this.parseLiteralstring();\r\n\t\t\tjoint.parentIndex = this.getNextInt();\r\n\t\t\tpos = this.parseVector3D();\r\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\r\n\t\t\tquat = this.parseQuaternion();\r\n\r\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\r\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\r\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\r\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\r\n\t\t\tinv.invert();\r\n\t\t\tjoint.inverseBindPose = inv.rawData;\r\n\r\n\t\t\tthis._skeleton.joints[i++] = joint;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the mesh geometry.\r\n\t */\r\n\tprivate parseMesh():void\r\n\t{\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar ch:string;\r\n\t\tvar vertexData:Array<VertexData>;\r\n\t\tvar weights:Array<JointData>;\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tif (this._shaders == null)\r\n\t\t\tthis._shaders = new Array<string>();\r\n\r\n\t\twhile (ch != \"}\") {\r\n\t\t\tch = this.getNextToken();\r\n\t\t\tswitch (ch) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\r\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\r\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\r\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\r\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\r\n\t\t\t\t\tthis.parseVertex(vertexData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\r\n\t\t\t\t\tthis.parseTri(indices);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\r\n\t\t\t\t\tthis.parseJoint(weights);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._meshData == null)\r\n\t\t\tthis._meshData = new Array<MeshData>();\r\n\r\n\t\tvar i:number /*uint*/ = this._meshData.length;\r\n\t\tthis._meshData[i] = new MeshData();\r\n\t\tthis._meshData[i].vertexData = vertexData;\r\n\t\tthis._meshData[i].weightData = weights;\r\n\t\tthis._meshData[i].indices = indices;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the mesh data to a SkinnedSub instance.\r\n\t * @param vertexData The mesh's vertices.\r\n\t * @param weights The joint weights per vertex.\r\n\t * @param indices The indices for the faces.\r\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\r\n\t */\r\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\r\n\t{\r\n\t\tvar len:number /*int*/ = vertexData.length;\r\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\r\n\t\tvar vertex:VertexData;\r\n\t\tvar weight:JointData;\r\n\t\tvar bindPose:Matrix3D;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\r\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\r\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\r\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar l:number /*int*/ = 0;\r\n\t\tvar nonZeroWeights:number /*int*/;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\r\n\t\t\tvertex = vertexData[i];\r\n\t\t\tv1 = vertex.index*3;\r\n\t\t\tv2 = v1 + 1;\r\n\t\t\tv3 = v1 + 2;\r\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\r\n\r\n\t\t\tnonZeroWeights = 0;\r\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\r\n\t\t\t\tweight = weights[vertex.startWeight + j];\r\n\t\t\t\tif (weight.bias > 0) {\r\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\r\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\r\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\r\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\r\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\r\n\r\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\r\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\r\n\t\t\t\t\tjointWeights[l++] = weight.bias;\r\n\t\t\t\t\t++nonZeroWeights;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\r\n\t\t\t\tjointIndices[l] = 0;\r\n\t\t\t\tjointWeights[l++] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tv1 = vertex.index << 1;\r\n\t\t\tuvs[v1++] = vertex.s;\r\n\t\t\tuvs[v1] = vertex.t;\r\n\t\t}\r\n\r\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\r\n\t\tsubGeom.updateIndices(indices);\r\n\t\tsubGeom.updatePositions(vertices);\r\n\t\tsubGeom.updateUVs(uvs);\r\n\t\tsubGeom.updateJointIndices(jointIndices);\r\n\t\tsubGeom.updateJointWeights(jointWeights);\r\n\t\t// cause explicit updates\r\n\t\tsubGeom.vertexNormals;\r\n\t\tsubGeom.vertexTangents;\r\n\t\t// turn auto updates off because they may be animated and set explicitly\r\n\t\tsubGeom.autoDeriveTangents = false;\r\n\t\tsubGeom.autoDeriveNormals = false;\r\n\r\n\t\treturn subGeom;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve the next triplet of vertex indices that form a face.\r\n\t * @param indices The index list in which to store the read data.\r\n\t */\r\n\tprivate parseTri(indices:Array<number> /*uint*/):void\r\n\t{\r\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\r\n\t\tindices[index] = this.getNextInt();\r\n\t\tindices[index + 1] = this.getNextInt();\r\n\t\tindices[index + 2] = this.getNextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a new joint data set for a single joint.\r\n\t * @param weights the target list to contain the weight data.\r\n\t */\r\n\tprivate parseJoint(weights:Array<JointData>):void\r\n\t{\r\n\t\tvar weight:JointData = new JointData();\r\n\t\tweight.index = this.getNextInt();\r\n\t\tweight.joint = this.getNextInt();\r\n\t\tweight.bias = this.getNextNumber();\r\n\t\tweight.pos = this.parseVector3D();\r\n\t\tweights[weight.index] = weight;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the data for a single vertex.\r\n\t * @param vertexData The list to contain the vertex data.\r\n\t */\r\n\tprivate parseVertex(vertexData:Array<VertexData>):void\r\n\t{\r\n\t\tvar vertex:VertexData = new VertexData();\r\n\t\tvertex.index = this.getNextInt();\r\n\t\tthis.parseUV(vertex);\r\n\t\tvertex.startWeight = this.getNextInt();\r\n\t\tvertex.countWeight = this.getNextInt();\r\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\r\n\t\tvertexData[vertex.index] = vertex;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinate.\r\n\t * @param vertexData The vertexData to contain the UV coordinates.\r\n\t */\r\n\tprivate parseUV(vertexData:VertexData):void\r\n\t{\r\n\t\tvar ch:string = this.getNextToken();\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvertexData.s = this.getNextNumber();\r\n\t\tvertexData.t = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex >= this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = -this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = -this.getNextNumber();\r\n\t\tquat.z = -this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\tvar rotQuat:Quaternion = new Quaternion();\r\n\t\trotQuat.multiply(this._rotationQuat, quat);\r\n\t\treturn rotQuat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5MeshParser;\r\n\r\n\r\nclass VertexData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic s:number;\r\n\tpublic t:number;\r\n\tpublic startWeight:number /*int*/;\r\n\tpublic countWeight:number /*int*/;\r\n}\r\n\r\nclass JointData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic joint:number /*int*/;\r\n\tpublic bias:number;\r\n\tpublic pos:Vector3D;\r\n}\r\n\r\nclass MeshData\r\n{\r\n\tpublic vertexData:Array<VertexData>;\r\n\tpublic weightData:Array<JointData>;\r\n\tpublic indices:Array<number> /*uint*/;\r\n}",
    "import Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * Max3DSParser provides a parser for the 3ds data type.\r\n */\r\nclass Max3DSParser extends ParserBase\r\n{\r\n\tprivate _byteData:ByteArray;\r\n\r\n\tprivate _textures:Object;\r\n\tprivate _materials:Object;\r\n\tprivate _unfinalized_objects:Object;\r\n\r\n\tprivate _cur_obj_end:number;\r\n\tprivate _cur_obj:ObjectVO;\r\n\r\n\tprivate _cur_mat_end:number;\r\n\tprivate _cur_mat:MaterialVO;\r\n\tprivate _useSmoothingGroups:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>Max3DSParser</code> object.\r\n\t *\r\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\r\n\t */\r\n\tconstructor(useSmoothingGroups:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"3ds\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar ba:ByteArray;\r\n\r\n\t\tba = ParserUtils.toByteArray(data);\r\n\t\tif (ba) {\r\n\t\t\tba.position = 0;\r\n\t\t\tif (ba.readShort() == 0x4d4d)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\t\t\tif (asset.isAsset(TextureBase)) {\r\n\t\t\t\tvar tex:TextureVO;\r\n\r\n\t\t\t\ttex = this._textures[resourceDependency.id];\r\n\t\t\t\ttex.texture = <Texture2DBase> asset;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// TODO: Implement\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._byteData) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._byteData.position = 0;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\tthis._textures = {};\r\n\t\t\tthis._materials = {};\r\n\t\t\tthis._unfinalized_objects = {};\r\n\t\t}\r\n\r\n\t\t// TODO: With this construct, the loop will run no-op for as long\r\n\t\t// as there is time once file has finished reading. Consider a nice\r\n\t\t// way to stop loop when byte array is empty, without putting it in\r\n\t\t// the while-conditional, which will prevent finalizations from\r\n\t\t// happening after the last chunk.\r\n\t\twhile (this._pHasTime()) {\r\n\r\n\t\t\t// If we are currently working on an object, and the most recent chunk was\r\n\t\t\t// the last one in that object, finalize the current object.\r\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\r\n\t\t\t\tthis.finalizeCurrentMaterial();\r\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\r\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\r\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\r\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\r\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\r\n\t\t\t\tthis._cur_obj = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\r\n\t\t\t\tvar cid:number /*uint*/;\r\n\t\t\t\tvar len:number /*uint*/;\r\n\t\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\t\tswitch (cid) {\r\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\r\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\r\n\t\t\t\t\tcase 0xB000: // KEYF3DS\r\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\r\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\r\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\r\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\r\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\r\n\t\t\t\t\t\tthis._cur_mat_end = end;\r\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\r\n\t\t\t\t\t\tthis._cur_obj_end = end;\r\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\r\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\r\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\r\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\r\n\t\t\t\t\t\tthis._cur_obj.type = Mesh.assetType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\r\n\t\t\t\t\t\tthis.parseVertexList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\r\n\t\t\t\t\t\tthis.parseFaceList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\r\n\t\t\t\t\t\tthis.parseUVList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4130: // Face materials\r\n\t\t\t\t\t\tthis.parseFaceMaterialList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4160: // Transform\r\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\r\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4150: // Smoothing groups\r\n\t\t\t\t\t\tthis.parseSmoothingGroups();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Skip this (unknown) chunk\r\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pause parsing if there were any dependencies found during this\r\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\r\n\t\t\t\t// retrieved at this time.)\r\n\t\t\t\tif (this.dependencies.length) {\r\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// More parsing is required if the entire byte array has not yet\r\n\t\t// been read, or if there is a currently non-finalized object in\r\n\t\t// the pipeline.\r\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\r\n\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t} else {\r\n\t\t\tvar name:string;\r\n\r\n\t\t\t// Finalize any remaining objects before ending.\r\n\t\t\tfor (name in this._unfinalized_objects) {\r\n\t\t\t\tvar obj:DisplayObjectContainer;\r\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\r\n\t\t\t\tif (obj) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate parseMaterial():MaterialVO\r\n\t{\r\n\t\tvar mat:MaterialVO;\r\n\r\n\t\tmat = new MaterialVO();\r\n\r\n\t\twhile (this._byteData.position < this._cur_mat_end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA000: // Material name\r\n\t\t\t\t\tmat.name = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA010: // Ambient color\r\n\t\t\t\t\tmat.ambientColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA020: // Diffuse color\r\n\t\t\t\t\tmat.diffuseColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA030: // Specular color\r\n\t\t\t\t\tmat.specularColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\r\n\t\t\t\t\tmat.twoSided = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA200: // Main (color) texture\r\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA204: // Specular map\r\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position = end;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\t}\r\n\r\n\tprivate parseTexture(end:number /*uint*/):TextureVO\r\n\t{\r\n\t\tvar tex:TextureVO;\r\n\r\n\t\ttex = new TextureVO();\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA300:\r\n\t\t\t\t\ttex.url = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Skip this unknown texture sub-chunk\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._textures[tex.url] = tex;\r\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\r\n\r\n\t\treturn tex;\r\n\t}\r\n\r\n\tprivate parseVertexList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.verts.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\tx = this._byteData.readFloat();\r\n\t\t\ty = this._byteData.readFloat();\r\n\t\t\tz = this._byteData.readFloat();\r\n\r\n\t\t\tthis._cur_obj.verts[i++] = x;\r\n\t\t\tthis._cur_obj.verts[i++] = z;\r\n\t\t\tthis._cur_obj.verts[i++] = y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.indices.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\r\n\r\n\t\t\ti0 = this._byteData.readUnsignedShort();\r\n\t\t\ti1 = this._byteData.readUnsignedShort();\r\n\t\t\ti2 = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis._cur_obj.indices[i++] = i0;\r\n\t\t\tthis._cur_obj.indices[i++] = i2;\r\n\t\t\tthis._cur_obj.indices[i++] = i1;\r\n\r\n\t\t\t// Skip \"face info\", irrelevant in Away3D\r\n\t\t\tthis._byteData.position += 2;\r\n\t\t}\r\n\r\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\r\n\t}\r\n\r\n\tprivate parseSmoothingGroups():void\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\r\n\t\tvar i:number /*uint*/ = 0;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseUVList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.uvs.length;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\r\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceMaterialList():void\r\n\t{\r\n\t\tvar mat:string;\r\n\t\tvar count:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar faces:Array<number> /*uint*/;\r\n\r\n\t\tmat = this.readNulTermstring();\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\r\n\t\tfaces = new Array<number>(count) /*uint*/;\r\n\t\ti = 0;\r\n\t\twhile (i < faces.length)\r\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\r\n\r\n\t\tthis._cur_obj.materials.push(mat);\r\n\t\tthis._cur_obj.materialFaces[mat] = faces;\r\n\t}\r\n\r\n\tprivate parseObjectAnimation(end:number):void\r\n\t{\r\n\t\tvar vo:ObjectVO;\r\n\t\tvar obj:DisplayObjectContainer;\r\n\t\tvar pivot:Vector3D;\r\n\t\tvar name:string;\r\n\t\tvar hier:number /*uint*/;\r\n\r\n\t\t// Pivot defaults to origin\r\n\t\tpivot = new Vector3D;\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xb010: // Name/hierarchy\r\n\t\t\t\t\tname = this.readNulTermstring();\r\n\t\t\t\t\tthis._byteData.position += 4;\r\n\t\t\t\t\thier = this._byteData.readShort();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xb013: // Pivot\r\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\r\n\t\t// and will be ignored in this version of the parser\r\n\t\t// TODO: Implement containers in 3DS parser.\r\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\r\n\t\t\tvo = this._unfinalized_objects[name];\r\n\t\t\tobj = this.constructObject(vo, pivot);\r\n\r\n\t\t\tif (obj) {\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tdelete this._unfinalized_objects[name];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\r\n\t{\r\n\t\tif (obj.type == Mesh.assetType) {\r\n\t\t\tvar i:number /*uint*/;\r\n\t\t\tvar sub:TriangleSubGeometry;\r\n\t\t\tvar geom:Geometry;\r\n\t\t\tvar mat:MaterialBase;\r\n\t\t\tvar mesh:Mesh;\r\n\t\t\tvar mtx:Matrix3D;\r\n\t\t\tvar vertices:Array<VertexVO>;\r\n\t\t\tvar faces:Array<FaceVO>;\r\n\r\n\t\t\tif (obj.materials.length > 1)\r\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\r\n\r\n\t\t\t// Ignore empty objects\r\n\t\t\tif (!obj.indices || obj.indices.length == 0)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\r\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\r\n\r\n\t\t\tthis.prepareData(vertices, faces, obj);\r\n\r\n\t\t\tif (this._useSmoothingGroups)\r\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\r\n\r\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\r\n\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\r\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\r\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\r\n\t\t\t}\r\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\r\n\r\n\t\t\tfor (i = 0; i < faces.length; i++) {\r\n\t\t\t\tobj.indices[i*3] = faces[i].a;\r\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\r\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\r\n\t\t\t}\r\n\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\r\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\r\n\t\t\t\t// will be nonsense and should be skipped.\r\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\r\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\r\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tgeom = new Geometry();\r\n\r\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\r\n\t\t\t// and add them to geometry.\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.updateIndices(obj.indices);\r\n\t\t\tsub.updatePositions(obj.verts);\r\n\t\t\tsub.updateUVs(obj.uvs);\r\n\r\n\t\t\tgeom.addSubGeometry(sub);\r\n\r\n\t\t\tif (obj.materials.length > 0) {\r\n\t\t\t\tvar mname:string;\r\n\t\t\t\tmname = obj.materials[0];\r\n\t\t\t\tmat = this._materials[mname].material;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply pivot translation to geometry if a pivot was\r\n\t\t\t// found while parsing the keyframe chunk earlier.\r\n\t\t\tif (pivot) {\r\n\t\t\t\tif (obj.transform) {\r\n\t\t\t\t\t// If a transform was found while parsing the\r\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\r\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\r\n\t\t\t\t\tdat[12] = 0;\r\n\t\t\t\t\tdat[13] = 0;\r\n\t\t\t\t\tdat[14] = 0;\r\n\t\t\t\t\tmtx = new Matrix3D(dat);\r\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpivot.scaleBy(-1);\r\n\r\n\t\t\t\tmtx = new Matrix3D();\r\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Apply transformation to geometry if a transformation\r\n\t\t\t// was found while parsing the object chunk earlier.\r\n\t\t\tif (obj.transform) {\r\n\t\t\t\tmtx = new Matrix3D(obj.transform);\r\n\t\t\t\tmtx.invert();\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\r\n\t\t\t// which will no longer be modified after this point.\r\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\r\n\r\n\t\t\t// Build mesh and return it\r\n\t\t\tmesh = new Mesh(geom, mat);\r\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\r\n\t\t// If reached, unknown\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\r\n\t{\r\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar len:number /*int*/ = obj.verts.length;\r\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\r\n\t\t\tvar v:VertexVO = new VertexVO;\r\n\t\t\tv.x = obj.verts[i++];\r\n\t\t\tv.y = obj.verts[i++];\r\n\t\t\tv.z = obj.verts[i++];\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\tv.u = obj.uvs[j++];\r\n\t\t\t\tv.v = obj.uvs[j++];\r\n\t\t\t}\r\n\t\t\tvertices[k++] = v;\r\n\t\t}\r\n\t\tlen = obj.indices.length;\r\n\t\tfor (i = 0, k = 0; i < len;) {\r\n\t\t\tvar f:FaceVO = new FaceVO();\r\n\t\t\tf.a = obj.indices[i++];\r\n\t\t\tf.b = obj.indices[i++];\r\n\t\t\tf.c = obj.indices[i++];\r\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\r\n\t\t\tfaces[k++] = f;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\r\n\t{\r\n\t\t// clone vertices according to following rule:\r\n\t\t// clone if vertex's in faces from groups 1+2 and 3\r\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\r\n\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar l:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar numVerts:number /*uint*/ = vertices.length;\r\n\t\tvar numFaces:number /*uint*/ = faces.length;\r\n\r\n\t\t// extract groups data for vertices\r\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++)\r\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tvar face:FaceVO = faces[i];\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\r\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\r\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\r\n\t\t\t\t\tif ((group & groups[k]) > 0) {\r\n\t\t\t\t\t\tgroup |= groups[k];\r\n\t\t\t\t\t\tgroups.splice(k, 1);\r\n\t\t\t\t\t\tk = groups.length - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// clone vertices\r\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++) {\r\n\t\t\tif ((len = vGroups[i].length) < 1)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\r\n\t\t\tvClones[i] = clones;\r\n\t\t\tclones[0] = i;\r\n\t\t\tvar v0:VertexVO = vertices[i];\r\n\t\t\tfor (j = 1; j < len; j++) {\r\n\t\t\t\tvar v1:VertexVO = new VertexVO;\r\n\t\t\t\tv1.x = v0.x;\r\n\t\t\t\tv1.y = v0.y;\r\n\t\t\t\tv1.z = v0.z;\r\n\t\t\t\tv1.u = v0.u;\r\n\t\t\t\tv1.v = v0.v;\r\n\t\t\t\tclones[j] = vertices.length;\r\n\t\t\t\tvertices.push(v1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tnumVerts = vertices.length;\r\n\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tface = faces[i];\r\n\t\t\tgroup = face.smoothGroup;\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\r\n\t\t\t\tgroups = vGroups[k];\r\n\t\t\t\tlen = groups.length;\r\n\t\t\t\tclones = vClones[k];\r\n\t\t\t\tfor (l = 0; l < len; l++) {\r\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\r\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\r\n\t\t\t\t\t\tif (group == 0) {\r\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\r\n\t\t\t\t\t\t\tgroups.splice(l, 1);\r\n\t\t\t\t\t\t\tclones.splice(l, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (j == 0)\r\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\r\n\t\t\t\t\t\t\tface.b = index; else\r\n\t\t\t\t\t\t\tface.c = index;\r\n\t\t\t\t\t\tl = len;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate finalizeCurrentMaterial():void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\r\n\t\tif (this._cur_mat.colorMap)\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\r\n\t\telse\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\r\n\r\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\r\n\t\tmat.specularColor = this._cur_mat.specularColor;\r\n\r\n\t\tif (this.materialMode >= 2)\r\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\r\n\r\n\t\tmat.bothSides = this._cur_mat.twoSided;\r\n\r\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\r\n\r\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\r\n\t\tthis._cur_mat.material = mat;\r\n\r\n\t\tthis._cur_mat = null;\r\n\t}\r\n\r\n\tprivate readNulTermstring():string\r\n\t{\r\n\t\tvar chr:number /*int*/;\r\n\t\tvar str:string = \"\";\r\n\r\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\r\n\t\t\tstr += String.fromCharCode(chr);\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\tprivate readTransform():Array<number>\r\n\t{\r\n\t\tvar data:Array<number>;\r\n\r\n\t\tdata = new Array<number>(16);\r\n\r\n\t\t// X axis\r\n\t\tdata[0] = this._byteData.readFloat(); // X\r\n\t\tdata[2] = this._byteData.readFloat(); // Z\r\n\t\tdata[1] = this._byteData.readFloat(); // Y\r\n\t\tdata[3] = 0;\r\n\r\n\t\t// Z axis\r\n\t\tdata[8] = this._byteData.readFloat(); // X\r\n\t\tdata[10] = this._byteData.readFloat(); // Z\r\n\t\tdata[9] = this._byteData.readFloat(); // Y\r\n\t\tdata[11] = 0;\r\n\r\n\t\t// Y Axis\r\n\t\tdata[4] = this._byteData.readFloat(); // X\r\n\t\tdata[6] = this._byteData.readFloat(); // Z\r\n\t\tdata[5] = this._byteData.readFloat(); // Y\r\n\t\tdata[7] = 0;\r\n\r\n\t\t// Translation\r\n\t\tdata[12] = this._byteData.readFloat(); // X\r\n\t\tdata[14] = this._byteData.readFloat(); // Z\r\n\t\tdata[13] = this._byteData.readFloat(); // Y\r\n\t\tdata[15] = 1;\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate readColor():number /*int*/\r\n\t{\r\n\t\tvar cid:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\r\n\r\n\t\tcid = this._byteData.readUnsignedShort();\r\n\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\tswitch (cid) {\r\n\t\t\tcase 0x0010: // Floats\r\n\t\t\t\tr = this._byteData.readFloat()*255;\r\n\t\t\t\tg = this._byteData.readFloat()*255;\r\n\t\t\t\tb = this._byteData.readFloat()*255;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x0011: // 24-bit color\r\n\t\t\t\tr = this._byteData.readUnsignedByte();\r\n\t\t\t\tg = this._byteData.readUnsignedByte();\r\n\t\t\t\tb = this._byteData.readUnsignedByte();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (r << 16) | (g << 8) | b;\r\n\t}\r\n}\r\n\r\nexport = Max3DSParser;\r\n\r\n/**\r\n *\r\n */\r\nclass FaceVO\r\n{\r\n\tpublic a:number /*int*/;\r\n\tpublic b:number /*int*/;\r\n\tpublic c:number /*int*/;\r\n\tpublic smoothGroup:number /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass MaterialVO\r\n{\r\n\tpublic name:string;\r\n\tpublic ambientColor:number /*int*/;\r\n\tpublic diffuseColor:number /*int*/;\r\n\tpublic specularColor:number /*int*/;\r\n\tpublic twoSided:boolean;\r\n\tpublic colorMap:TextureVO;\r\n\tpublic specularMap:TextureVO;\r\n\tpublic material:MaterialBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass ObjectVO\r\n{\r\n\tpublic name:string;\r\n\tpublic type:string;\r\n\tpublic pivotX:number;\r\n\tpublic pivotY:number;\r\n\tpublic pivotZ:number;\r\n\tpublic transform:Array<number>;\r\n\tpublic verts:Array<number>;\r\n\tpublic indices:Array<number> /*int*/;\r\n\tpublic uvs:Array<number>;\r\n\tpublic materialFaces:Object;\r\n\tpublic materials:Array<string>;\r\n\tpublic smoothingGroups:Array<number> /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass TextureVO\r\n{\r\n\tpublic url:string;\r\n\tpublic texture:Texture2DBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass VertexVO\r\n{\r\n\tpublic x:number;\r\n\tpublic y:number;\r\n\tpublic z:number;\r\n\tpublic u:number;\r\n\tpublic v:number;\r\n\tpublic normal:Vector3D;\r\n\tpublic tangent:Vector3D;\r\n}",
    "import TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\r\n\r\n/**\r\n * OBJParser provides a parser for the OBJ data type.\r\n */\r\nclass OBJParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _charIndex:number;\r\n\tprivate _oldIndex:number;\r\n\tprivate _stringLength:number;\r\n\tprivate _currentObject:ObjectGroup;\r\n\tprivate _currentGroup:Group;\r\n\tprivate _currentMaterialGroup:MaterialGroup;\r\n\tprivate _objects:Array<ObjectGroup>;\r\n\tprivate _materialIDs:string[];\r\n\tprivate _materialLoaded:Array<LoadedMaterial>;\r\n\tprivate _materialSpecularData:Array<SpecularData>;\r\n\tprivate _meshes:Array<Mesh>;\r\n\tprivate _lastMtlID:string;\r\n\tprivate _objectIndex:number;\r\n\tprivate _realIndices;\r\n\tprivate _vertexIndex:number;\r\n\tprivate _vertices:Array<Vertex>;\r\n\tprivate _vertexNormals:Array<Vertex>;\r\n\tprivate _uvs:Array<UV>;\r\n\tprivate _scale:number;\r\n\tprivate _mtlLib:boolean;\r\n\tprivate _mtlLibLoaded:boolean = true;\r\n\tprivate _activeMaterialID:string = \"\";\r\n\r\n\t/**\r\n\t * Creates a new OBJParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(scale:number = 1)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._scale = scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Scaling factor applied directly to vertices data\r\n\t * @param value The scaling factor.\r\n\t */\r\n\tpublic set scale(value:number)\r\n\t{\r\n\t\tthis._scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"obj\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar content:string = ParserUtils.toString(data);\r\n\t\tvar hasV:boolean = false;\r\n\t\tvar hasF:boolean = false;\r\n\r\n\t\tif (content) {\r\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\r\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\r\n\t\t}\r\n\r\n\t\treturn hasV && hasF;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == 'mtl') {\r\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\r\n\t\t\tthis.parseMtl(str);\r\n\r\n\t\t} else {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tif (resourceDependency.assets.length != 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\r\n\t\t\tif (asset.isAsset(TextureBase)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\t\tlm.texture = <Texture2DBase> asset;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0) {\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == \"mtl\") {\r\n\t\t\tthis._mtlLib = false;\r\n\t\t\tthis._mtlLibLoaded = false;\r\n\t\t} else {\r\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\tthis._materialLoaded.push(lm);\r\n\t\t}\r\n\r\n\t\tif (this._meshes.length > 0)\r\n\t\t\tthis.applyMaterial(lm);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar line:string;\r\n\t\tvar creturn:string = String.fromCharCode(10);\r\n\t\tvar trunk;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\t// Merge linebreaks that are immediately preceeded by\r\n\t\t\t// the \"escape\" backward slash into single lines.\r\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\r\n\t\t}\r\n\r\n\t\tif (this._textData.indexOf(creturn) == -1)\r\n\t\t\tcreturn = String.fromCharCode(13);\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._startedParsing = true;\r\n\t\t\tthis._vertices = new Array<Vertex>();\r\n\t\t\tthis._vertexNormals = new Array<Vertex>();\r\n\t\t\tthis._materialIDs = new Array<string>();\r\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\r\n\t\t\tthis._meshes = new Array<Mesh>();\r\n\t\t\tthis._uvs = new Array<UV>();\r\n\t\t\tthis._stringLength = this._textData.length;\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\r\n\t\t\tthis._oldIndex = 0;\r\n\t\t\tthis._objects = new Array<ObjectGroup>();\r\n\t\t\tthis._objectIndex = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\r\n\r\n\t\t\tif (this._charIndex == -1)\r\n\t\t\t\tthis._charIndex = this._stringLength;\r\n\r\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\r\n\t\t\tline = line.split('\\r').join(\"\");\r\n\t\t\tline = line.replace(\"  \", \" \");\r\n\t\t\ttrunk = line.split(\" \");\r\n\t\t\tthis._oldIndex = this._charIndex + 1;\r\n\t\t\tthis.parseLine(trunk);\r\n\r\n\t\t\t// If whatever was parsed on this line resulted in the\r\n\t\t\t// parsing being paused to retrieve dependencies, break\r\n\t\t\t// here and do not continue parsing until un-paused.\r\n\t\t\tif (this.parsingPaused) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this._charIndex >= this._stringLength) {\r\n\r\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t\tthis.translate();\r\n\t\t\tthis.applyMaterials();\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single line in the OBJ file.\r\n\t */\r\n\tprivate parseLine(trunk)\r\n\t{\r\n\t\tswitch (trunk[0]) {\r\n\r\n\t\t\tcase \"mtllib\":\r\n\r\n\t\t\t\tthis._mtlLib = true;\r\n\t\t\t\tthis._mtlLibLoaded = false;\r\n\t\t\t\tthis.loadMtl(trunk[1]);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"g\":\r\n\r\n\t\t\t\tthis.createGroup(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"o\":\r\n\r\n\t\t\t\tthis.createObject(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"usemtl\":\r\n\r\n\t\t\t\tif (this._mtlLib) {\r\n\r\n\t\t\t\t\tif (!trunk[1])\r\n\t\t\t\t\t\ttrunk[1] = \"def000\";\r\n\r\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\r\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\r\n\r\n\t\t\t\t\tif (this._currentGroup)\r\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"v\":\r\n\r\n\t\t\t\tthis.parseVertex(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vt\":\r\n\r\n\t\t\t\tthis.parseUV(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vn\":\r\n\r\n\t\t\t\tthis.parseVertexNormal(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"f\":\r\n\r\n\t\t\t\tthis.parseFace(trunk);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the parsed data into an Away3D scenegraph structure\r\n\t */\r\n\tprivate translate()\r\n\t{\r\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\r\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\r\n\t\t\tvar numGroups:number = groups.length;\r\n\t\t\tvar materialGroups:Array<MaterialGroup>;\r\n\t\t\tvar numMaterialGroups:number;\r\n\t\t\tvar geometry:Geometry;\r\n\t\t\tvar mesh:Mesh;\r\n\r\n\t\t\tvar m:number;\r\n\t\t\tvar sm:number;\r\n\t\t\tvar bmMaterial:MethodMaterial;\r\n\r\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\r\n\t\t\t\tgeometry = new Geometry();\r\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\r\n\t\t\t\tnumMaterialGroups = materialGroups.length;\r\n\r\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\r\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\r\n\r\n\t\t\t\tif (geometry.subGeometries.length == 0)\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// Finalize and force type-based name\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\r\n\r\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\r\n\t\t\t\t//check for multipass\r\n\t\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\r\n\r\n\t\t\t\tif (this._objects[objIndex].name) {\r\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\r\n\r\n\t\t\t\t} else if (groups[g].name) {\r\n\r\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = groups[g].name;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No name stored. Use empty string which will force it\r\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\r\n\t\t\t\t\tmesh.name = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._meshes.push(mesh);\r\n\r\n\t\t\t\tif (groups[g].materialID != \"\")\r\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\r\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\r\n\r\n\t\t\t\tif (mesh.subMeshes.length > 1) {\r\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\r\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates an obj's material group to a subgeometry.\r\n\t * @param materialGroup The material group data to convert.\r\n\t * @param geometry The Geometry to contain the converted SubGeometry.\r\n\t */\r\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\r\n\t{\r\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\r\n\t\tvar face:FaceData;\r\n\t\tvar numFaces:number = faces.length;\r\n\t\tvar numVerts:number;\r\n\t\tvar sub:TriangleSubGeometry;\r\n\r\n\t\tvar vertices:Array<number> = new Array<number>();\r\n\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\tvar normals:Array<number> = new Array<number>();\r\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\r\n\r\n\t\tthis._realIndices = [];\r\n\t\tthis._vertexIndex = 0;\r\n\r\n\t\tvar j:number;\r\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\r\n\r\n\t\t\tface = faces[i];\r\n\t\t\tnumVerts = face.indexIds.length - 1;\r\n\r\n\t\t\tfor (j = 1; j < numVerts; ++j) {\r\n\r\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (vertices.length > 0) {\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\r\n\t\t\tsub.updateIndices(indices);\r\n\t\t\tsub.updatePositions(vertices);\r\n\t\t\tsub.updateVertexNormals(normals);\r\n\t\t\tsub.updateUVs(uvs);\r\n\r\n\t\t\tgeometry.addSubGeometry(sub);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\r\n\t{\r\n\t\tvar index:number;\r\n\t\tvar vertex:Vertex;\r\n\t\tvar vertexNormal:Vertex;\r\n\t\tvar uv:UV;\r\n\r\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\r\n\r\n\t\t\tindex = this._vertexIndex;\r\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\r\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\r\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\r\n\r\n\t\t\tif (face.normalIndices.length > 0) {\r\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\r\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n\t\t\t}\r\n\r\n\t\t\tif (face.uvIndices.length > 0) {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\r\n\t\t\t\t\tuvs.push(uv.u, uv.v);\r\n\r\n\t\t\t\t} catch (e) {\r\n\r\n\t\t\t\t\tswitch (vertexIndex) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tuvs.push(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tuvs.push(.5, 0);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tuvs.push(1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\r\n\t\t}\r\n\r\n\t\tindices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new object group.\r\n\t * @param trunk The data block containing the object tag and its parameters\r\n\t */\r\n\tprivate createObject(trunk)\r\n\t{\r\n\t\tthis._currentGroup = null;\r\n\t\tthis._currentMaterialGroup = null;\r\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentObject.name = trunk[1];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new group.\r\n\t * @param trunk The data block containing the group tag and its parameters\r\n\t */\r\n\tprivate createGroup(trunk)\r\n\t{\r\n\t\tif (!this._currentObject)\r\n\t\t\tthis.createObject(null);\r\n\t\tthis._currentGroup = new Group();\r\n\r\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentGroup.name = trunk[1];\r\n\t\tthis._currentObject.groups.push(this._currentGroup);\r\n\r\n\t\tthis.createMaterialGroup(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new material group.\r\n\t * @param trunk The data block containing the material tag and its parameters\r\n\t */\r\n\tprivate createMaterialGroup(trunk)\r\n\t{\r\n\t\tthis._currentMaterialGroup = new MaterialGroup();\r\n\t\tif (trunk)\r\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\r\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex coordinates.\r\n\t * @param trunk The data block containing the vertex tag and its parameters\r\n\t */\r\n\tprivate parseVertex(trunk)\r\n\t{\r\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\r\n\r\n\t\tvar v1:number, v2:number , v3:number;\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\r\n\t\t\tv1 = <number> nTrunk[0];\r\n\t\t\tv2 = <number> nTrunk[1];\r\n\t\t\tv3 = <number> -nTrunk[2];\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\r\n\t\t} else {\r\n\t\t\tv1 = <number> parseFloat(trunk[1]);\r\n\t\t\tv2 = <number> parseFloat(trunk[2]);\r\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\r\n\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinates.\r\n\t * @param trunk The data block containing the uv tag and its parameters\r\n\t */\r\n\tprivate parseUV(trunk)\r\n\t{\r\n\t\tif (trunk.length > 3) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex normal coordinates.\r\n\t * @param trunk The data block containing the vertex normal tag and its parameters\r\n\t */\r\n\tprivate parseVertexNormal(trunk)\r\n\t{\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next face's indices.\r\n\t * @param trunk The data block containing the face tag and its parameters\r\n\t */\r\n\tprivate parseFace(trunk)\r\n\t{\r\n\t\tvar len:number = trunk.length;\r\n\t\tvar face:FaceData = new FaceData();\r\n\r\n\t\tif (!this._currentGroup) {\r\n\t\t\tthis.createGroup(null);\r\n\t\t}\r\n\r\n\t\tvar indices;\r\n\t\tfor (var i:number = 1; i < len; ++i) {\r\n\r\n\t\t\tif (trunk[i] == \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tindices = trunk[i].split(\"/\");\r\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\r\n\r\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\r\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\r\n\r\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\r\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\r\n\r\n\t\t\tface.indexIds.push(trunk[i]);\r\n\t\t}\r\n\r\n\t\tthis._currentMaterialGroup.faces.push(face);\r\n\t}\r\n\r\n\t/**\r\n\t * This is a hack around negative face coords\r\n\t */\r\n\tprivate parseIndex(index:number, length:number):number\r\n\t{\r\n\t\tif (index < 0)\r\n\t\t\treturn index + length + 1; else\r\n\t\t\treturn index;\r\n\t}\r\n\r\n\tprivate parseMtl(data:string)\r\n\t{\r\n\t\tvar materialDefinitions = data.split('newmtl');\r\n\t\tvar lines;\r\n\t\tvar trunk;\r\n\t\tvar j:number;\r\n\r\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\r\n\t\tvar useSpecular:boolean;\r\n\t\tvar useColor:boolean;\r\n\t\tvar diffuseColor:number;\r\n\t\tvar color:number;\r\n\t\tvar specularColor:number;\r\n\t\tvar specular:number;\r\n\t\tvar alpha:number;\r\n\t\tvar mapkd:string;\r\n\r\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\r\n\r\n\r\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\r\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\r\n\r\n\t\t\tif (lines.length == 1)\r\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\r\n\r\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\r\n\t\t\tspecular = 0;\r\n\t\t\tuseSpecular = false;\r\n\t\t\tuseColor = false;\r\n\t\t\talpha = 1;\r\n\t\t\tmapkd = \"\";\r\n\r\n\t\t\tfor (j = 0; j < lines.length; ++j) {\r\n\r\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\r\n\r\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\r\n\t\t\t\t\ttrunk = lines[j].split(\" \");\r\n\r\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\r\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\r\n\r\n\t\t\t\t\tif (j == 0) {\r\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\r\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch (trunk[0]) {\r\n\r\n\t\t\t\t\t\t\tcase \"Ka\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\r\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ks\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ns\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\r\n\t\t\t\t\t\t\t\tif (specular == 0)\r\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Kd\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseColor = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"tr\":\r\n\t\t\t\t\t\t\tcase \"d\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"map_Kd\":\r\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\r\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (mapkd != \"\") {\r\n\r\n\t\t\t\tif (useSpecular) {\r\n\r\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\r\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\r\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\r\n\r\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\r\n\t\t\t\t\tspecularData.alpha = alpha;\r\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\r\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\r\n\r\n\t\t\t\t\tif (!this._materialSpecularData)\r\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\r\n\r\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\r\n\r\n\t\t\t} else if (useColor && !isNaN(color)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = this._lastMtlID;\r\n\r\n\t\t\t\tif (alpha == 0)\r\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\r\n\r\n\t\t\t\tvar cm:MethodMaterial;\r\n\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\r\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\t\t\t\t\tcolorMat.alpha = alpha;\r\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMat.specular = specular;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\r\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMultiMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlm.cm = cm;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0)\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._mtlLibLoaded = true;\r\n\t}\r\n\r\n\tprivate parseMapKdString(trunk):string\r\n\t{\r\n\t\tvar url:string = \"\";\r\n\t\tvar i:number;\r\n\t\tvar breakflag:boolean;\r\n\r\n\t\tfor (i = 1; i < trunk.length;) {\r\n\t\t\tswitch (trunk[i]) {\r\n\t\t\t\tcase \"-blendu\":\r\n\t\t\t\tcase \"-blendv\":\r\n\t\t\t\tcase \"-cc\":\r\n\t\t\t\tcase \"-clamp\":\r\n\t\t\t\tcase \"-texres\":\r\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-mm\":\r\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-o\":\r\n\t\t\t\tcase \"-s\":\r\n\t\t\t\tcase \"-t\":\r\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreakflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (breakflag)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//Reconstruct URL/filename\r\n\t\tfor (i; i < trunk.length; i++) {\r\n\t\t\turl += trunk[i];\r\n\t\t\turl += \" \";\r\n\t\t}\r\n\r\n\t\t//Remove the extraneous space and/or newline from the right side\r\n\t\turl = url.replace(/\\s+$/, \"\");\r\n\r\n\t\treturn url;\r\n\t}\r\n\r\n\tprivate loadMtl(mtlurl:string)\r\n\t{\r\n\t\t// Add raw-data dependency to queue and load dependencies now,\r\n\t\t// which will pause the parsing in the meantime.\r\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\r\n\t\tthis._pPauseAndRetrieveDependencies();//\r\n\t}\r\n\r\n\tprivate applyMaterial(lm:LoadedMaterial)\r\n\t{\r\n\t\tvar decomposeID;\r\n\t\tvar mesh:Mesh;\r\n\t\tvar tm:MethodMaterial;\r\n\t\tvar j:number;\r\n\t\tvar specularData:SpecularData;\r\n\r\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\r\n\t\t\tmesh = this._meshes[i];\r\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\r\n\r\n\t\t\tif (decomposeID[0] == lm.materialID) {\r\n\r\n\t\t\t\tif (lm.cm) {\r\n\t\t\t\t\tif (mesh.material)\r\n\t\t\t\t\t\tmesh.material = null;\r\n\t\t\t\t\tmesh.material = lm.cm;\r\n\r\n\t\t\t\t} else if (lm.texture) {\r\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\r\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.alpha = lm.alpha;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\r\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\r\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\r\n\t\t\t\tthis._meshes.splice(i, 1);\r\n\t\t\t\t--i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lm.cm || tm)\r\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\r\n\t}\r\n\r\n\tprivate applyMaterials()\r\n\t{\r\n\t\tif (this._materialLoaded.length == 0)\r\n\t\t\treturn;\r\n\r\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\r\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\r\n\t}\r\n}\r\n\r\nexport = OBJParser;\r\n\r\nclass ObjectGroup\r\n{\r\n\tpublic name:string;\r\n\tpublic groups:Group[] = new Array<Group>();\r\n}\r\n\r\nclass Group\r\n{\r\n\tpublic name:string;\r\n\tpublic materialID:string;\r\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\r\n}\r\n\r\nclass MaterialGroup\r\n{\r\n\tpublic url:string;\r\n\tpublic faces:FaceData[] = new Array<FaceData>();\r\n}\r\n\r\nclass SpecularData\r\n{\r\n\tpublic materialID:string;\r\n\tpublic basicSpecularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass LoadedMaterial\r\n{\r\n\tpublic materialID:string;\r\n\tpublic texture:Texture2DBase;\r\n\tpublic cm:MaterialBase;\r\n\tpublic specularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass FaceData\r\n{\r\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\r\n}\r\n\r\n/**\r\n* Texture coordinates value object.\r\n*/\r\nclass UV\r\n{\r\n\tprivate _u:number;\r\n\tprivate _v:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>UV</code> object.\r\n\t *\r\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\r\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\r\n\t */\r\n\tconstructor(u:number = 0, v:number = 0)\r\n\t{\r\n\t\tthis._u = u;\r\n\t\tthis._v = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the vertical coordinate of the texture value.\r\n\t */\r\n\tpublic get v():number\r\n\t{\r\n\t\treturn this._v;\r\n\t}\r\n\r\n\tpublic set v(value:number)\r\n\t{\r\n\t\tthis._v = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the horizontal coordinate of the texture value.\r\n\t */\r\n\tpublic get u():number\r\n\t{\r\n\t\treturn this._u;\r\n\t}\r\n\r\n\tpublic set u(value:number)\r\n\t{\r\n\t\tthis._u = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new UV value Object\r\n\t */\r\n\tpublic clone():UV\r\n\t{\r\n\t\treturn new UV(this._u, this._v);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the value object as a string for trace/debug purpose\r\n\t */\r\n\tpublic toString():string\r\n\t{\r\n\t\treturn this._u + \",\" + this._v;\r\n\t}\r\n}\r\n\r\nclass Vertex\r\n{\r\n\tprivate _x:number;\r\n\tprivate _y:number;\r\n\tprivate _z:number;\r\n\tprivate _index:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>Vertex</code> value object.\r\n\t *\r\n\t * @param    x            [optional]    The x value. Defaults to 0.\r\n\t * @param    y            [optional]    The y value. Defaults to 0.\r\n\t * @param    z            [optional]    The z value. Defaults to 0.\r\n\t * @param    index        [optional]    The index value. Defaults is NaN.\r\n\t */\r\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\r\n\t{\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._index = index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the index of value object\r\n\t * @param    ind        The index\r\n\t */\r\n\tpublic set index(ind:number)\r\n\t{\r\n\t\tthis._index = ind;\r\n\t}\r\n\r\n\tpublic get index():number\r\n\t{\r\n\t\treturn this._index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the x value of the value object\r\n\t * @param    value        The x value\r\n\t */\r\n\tpublic get x():number\r\n\t{\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value:number)\r\n\t{\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the y value of the value object\r\n\t * @param    value        The y value\r\n\t */\r\n\tpublic get y():number\r\n\t{\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value:number)\r\n\t{\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the z value of the value object\r\n\t * @param    value        The z value\r\n\t */\r\n\tpublic get z():number\r\n\t{\r\n\t\treturn this._z;\r\n\t}\r\n\r\n\tpublic set z(value:number)\r\n\t{\r\n\t\tthis._z = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new Vertex value Object\r\n\t */\r\n\tpublic clone():Vertex\r\n\t{\r\n\t\treturn new Vertex(this._x, this._y, this._z);\r\n\t}\r\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\r\n\r\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\r\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\r\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\r\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\r\n\r\n/**\r\n *\r\n */\r\nclass Parsers\r\n{\r\n\t/**\r\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\r\n\t * enable support for all bundled parsers to the file format auto-detection\r\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\r\n\t *\r\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\r\n\t *\r\n\t * Beware however that this requires all parser classes to be included in the\r\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\r\n\t * file formats are used, SWF file size can be saved by adding the parsers\r\n\t * individually using AssetLibrary.enableParser()\r\n\t *\r\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\r\n\t * the auto-detection mechanisms altogether, while at the same time allowing\r\n\t * any properties that are unique to that parser to be set for that load.\r\n\t *\r\n\t * The bundled parsers are:\r\n\t *\r\n\t * <ul>\r\n\t * <li>AC3D (.ac)</li>\r\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\r\n\t * <li>3DMax (.3ds)</li>\r\n\t * <li>DXF (.dxf)</li>\r\n\t * <li>Quake 2 MD2 models (.md2)</li>\r\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\r\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\r\n\t * <li>Wavefront OBJ (.obj)</li>\r\n\t * <li>Collada (.dae)</li>\r\n\t * <li>Images (.jpg, .png)</li>\r\n\t * </ul>\r\n\t *\r\n\t * @see away.library.AssetLibrary.enableParser\r\n\t */\r\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\r\n\r\n\t/**\r\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\r\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\r\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\r\n\t *\r\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\r\n\t *\r\n\t * @see away.parsers.Parsers.ALL_BUNDLED\r\n\t */\r\n\tpublic static enableAllBundled():void\r\n\t{\r\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\r\n\t}\r\n}\r\n\r\nexport = Parsers;"
  ],
  "sourceRoot": ""
}