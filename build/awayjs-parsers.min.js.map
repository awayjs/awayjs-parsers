{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils.ts",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWD3ParserUtils/AWDBlock.ts",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils",
    "module",
    "AWD3Utils",
    "BLOCKSTATE_FINALIZE",
    "BLOCKSTATE_INVALID",
    "BLOCKSTATE_LOAD_DEPENDENICES",
    "BLOCKSTATE_NO_ASSET",
    "COMPRESSIONMODE_LZMA",
    "UNCOMPRESSED",
    "DEFLATE",
    "LZMA",
    "INT8",
    "INT16",
    "INT32",
    "UINT8",
    "UINT16",
    "UINT32",
    "FLOAT32",
    "FLOAT64",
    "BOOL",
    "COLOR",
    "BADDR",
    "AWDSTRING",
    "AWDBYTEARRAY",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "MTX4x4",
    "awayjs-parsers/lib/AWD3ParserUtils/AWDBlock",
    "AWDBlock",
    "this_id",
    "this_type",
    "this",
    "type",
    "id",
    "state",
    "dependencies_data",
    "Array",
    "dependencies_urls",
    "loaded_dependencies",
    "loaded_dependencies_cnt",
    "prototype",
    "dispose",
    "bytes",
    "errorMessages",
    "uvsForVertexAnimation",
    "addError",
    "errorMsg",
    "push",
    "awayjs-parsers/lib/AWDParser",
    "__extends",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "AttributesBuffer",
    "Float3Attributes",
    "Float2Attributes",
    "BitmapImageCube",
    "BlendMode",
    "Sampler2D",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "ByteArray",
    "DisplayObjectContainer",
    "Graphics",
    "TriangleElements",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "Billboard",
    "Skybox",
    "DefaultMaterialManager",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "SingleCubeTexture",
    "Single2DTexture",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "BasicMaterial",
    "AS2SceneGraphFactory",
    "Timeline",
    "AssetLibrary",
    "Font",
    "TextFormat",
    "Rectangle",
    "Style",
    "Matrix",
    "MappingMode",
    "ElementsType",
    "AWDParser",
    "_super",
    "view",
    "ARRAY_BUFFER",
    "_debug",
    "_debugTimers",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_time_all",
    "_time_graphics",
    "_time_graphics_bytes",
    "_time_timeline",
    "_time_fonts",
    "_time_textfields",
    "_time_sounds",
    "_time_textures",
    "_time_materials",
    "_time_meshes",
    "_num_graphics",
    "_num_timeline",
    "_num_fonts",
    "_num_textfields",
    "_num_sounds",
    "_num_textures",
    "_num_materials",
    "_num_meshes",
    "shadowMethodListProperties",
    1,
    2,
    3,
    101,
    "PROPERTY_NUMBER",
    102,
    103,
    201,
    202,
    301,
    302,
    401,
    402,
    601,
    602,
    701,
    702,
    801,
    "meshPoseAnimationProperties",
    "sharedMethodListProperties",
    104,
    105,
    106,
    107,
    "_view",
    "_blocks",
    "data",
    "blendModeDic",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "this_block",
    "parseInt",
    "image_asset",
    "_pFinalizeAsset",
    "name",
    "console",
    "log",
    "audio_asset",
    "sub_id",
    "cube_image_asset",
    "width",
    "draw",
    "_isParsing",
    "updateTimers",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "asset",
    "oldName",
    "block",
    "resetAssetPath",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "_pDieWithError",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "isParsed",
    "ns",
    "flags",
    "len",
    "start_timeing",
    "performance",
    "now",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseMeshLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseTimeLine",
    "parseTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseGraphics",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "end_timing",
    "time_delta",
    "blockID",
    "parseVarStr",
    "new_font",
    "getAsset",
    "newfont",
    "undefined",
    "font_style_cnt",
    "font_style_char_cnt",
    "font_style_name",
    "new_font_style",
    "font_style_char",
    "attr_count",
    "sm_len",
    "sm_end",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "get_font_table",
    "set_font_em_size",
    "set_whitespace_width",
    "j",
    "indices",
    "idx",
    "readUnsignedShort",
    "curveData",
    "vertexBuffer",
    "bufferView",
    "Uint8Array",
    "arraybytes",
    "curve_elements",
    "setPositions",
    "setCustomAttributes",
    "setUVs",
    "setChar",
    "parseProperties",
    "parseUserAttributes",
    "font",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "mat",
    "bothSides",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "readFloat",
    "format_props",
    "textFormatProperties",
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "tf_align_int",
    "align",
    "indent",
    "leftMargin",
    "rightMargin",
    "leading",
    "material",
    "newTextField",
    "createTextField",
    "text_field_type",
    "textFieldTypes",
    "displayAsPassword",
    "textWidth",
    "Math",
    "abs",
    "textHeight",
    "num_paragraphs",
    "complete_text",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "text_format",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "props",
    "textFieldProperties",
    "selectable",
    "border",
    "extra",
    "billboard",
    "data_id",
    "graphics",
    "geoID",
    "num_materials",
    "materials",
    "materialNames",
    "materials_parsed",
    "getDefaultMaterial",
    "alphaBlending",
    "useColorTransform",
    "mesh",
    "copyTo",
    "count",
    "getGraphicAt",
    "min",
    "sampler",
    "graphic",
    "style",
    "addSamplerAt",
    "getTextureAt",
    "animateUVs",
    "uvTransform",
    "matrix",
    "parseMatrix32RawData",
    "x",
    "y",
    "height",
    "imageRect",
    "elements",
    "getCustomAtributes",
    "curves",
    "data_len",
    "url",
    "_pAddDependency",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "cmd_asset",
    "new_timeline",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "Boolean",
    "sceneID",
    "fps",
    "num_potential_childs",
    "registerPotentialChild",
    "num_all_display_instances",
    "num_potential_childs_multi_instanced",
    "num_instances",
    "num_potential_sounds",
    "str_cnt",
    "str_data_type",
    "str_counter",
    "keyframes_start_indices_data",
    "new_buffer",
    "Uint16Array",
    "Uint32Array",
    "keyframe_durations",
    "numKeyFrames",
    "frame_command_indices",
    "frame_recipe",
    "command_length_stream",
    "command_index_stream",
    "add_child_stream",
    "remove_child_stream",
    "update_child_stream",
    "update_child_props_indices_stream",
    "update_child_props_length_stream",
    "property_type_stream",
    "property_index_stream",
    "properties_stream_int",
    "lc",
    "float_array_data",
    "properties_stream_f32_mtx_scale_rot",
    "Float32Array",
    "properties_stream_f32_mtx_pos",
    "properties_stream_f32_mtx_all",
    "properties_stream_f32_ct",
    "_labels",
    "string_props_array",
    "properties_stream_strings",
    "frame_index",
    "one_str_len",
    "add_framescript",
    "init",
    "numElements",
    "graphicsProperties",
    "geoScaleU",
    "geoScaleV",
    "elements_parsed",
    "is_curve_elements",
    "w_indices",
    "weights",
    "elementsProps",
    "elementsProperties",
    "z",
    "verts",
    "readNumber",
    "uvs",
    "normals",
    "addGraphic",
    "triangle_elements",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "setIndices",
    "setNormals",
    "setJointWeights",
    "setJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    "primitiveProperties",
    "TRIANGLE",
    "topClosed",
    "bottomClosed",
    "yUp",
    "primitiveTypes",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "addChild",
    "containerProperties",
    "pivot",
    "isPrefab",
    "isAsset",
    "getNewObject",
    "meshInstanceProperties",
    "castsShadows",
    "tex",
    "getDefaultImageCube",
    "texture",
    "light",
    "newShadowMapper",
    "lightType",
    "lightProperties",
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    "cameraProperties",
    "camera",
    "cameraPivotProperties",
    "numLights",
    "lightsArray",
    "lightsArrayNames",
    "k",
    "lightPick",
    "finalize",
    "num_methods",
    "methods_parsed",
    "returnedArray",
    "materialProperties",
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "ambientMethod",
    "alpha",
    "alphaThreshold",
    "diffuseImage",
    "normalImage",
    "specImage",
    "material_v1Properties",
    "spezialType",
    "lightPicker",
    "alphaPremultiplied",
    "blendMode",
    "diffuseTexture",
    "normalMethod",
    "specularMethod",
    "strength",
    "diffuseMethod",
    "gloss",
    "method_v1Properties",
    "effectMethod",
    "addEffectMethod",
    "shadowMapMethod",
    "shadowMethod",
    "cubeTexture",
    "smoothness",
    "fresnelPower",
    "normalReflectance",
    "mappingMode",
    "LINEAR_GRADIENT",
    "RADIAL_GRADIENT",
    "basic_mat",
    "byteArrayToImage",
    "parseSharedMethodList",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "numCommands",
    "typeCommand",
    "commandProperties",
    "targetProperties",
    "metaDataProperties",
    "nameSpaceString",
    "methodType",
    "targetID",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "rawData",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_id",
    "clip",
    "num_frames",
    "frames_parsed",
    "addFrame",
    "frames",
    "poseOnly",
    "subMeshParsed",
    "streamtypes",
    "geo_id",
    "getUVForVertexAnimation",
    "num_submeshes",
    "num_Streams",
    "streamsParsed",
    "looping",
    "stitchFinalFrame",
    "setTangents",
    "vertexAnimationSetProperties",
    "skeletonFrames",
    "vertexFrames",
    "clipNode",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "animatorSetProperties",
    "targetAnimationSet",
    "targetMeshes",
    "targetMeshLength",
    "activeState",
    "autoplay",
    "thisAnimator",
    "animator",
    "effectMethodReturn",
    "offCol",
    "colorTransform",
    "list_len",
    "list_end",
    "attributes",
    "attibuteCnt",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "readByte",
    "readInt",
    "readDouble",
    "expected",
    "AWDProperties",
    "key",
    "propertyCnt",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "accuracy",
    "GEO_NUMBER",
    "MATRIX_NUMBER",
    "list",
    "num_elems",
    "num_read",
    "_streaming",
    "body_len",
    "meshID",
    "geoCnt",
    "numVertices",
    "precision",
    "mtx_raw",
    "isNaN",
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    110,
    111,
    303,
    703,
    704,
    11,
    12,
    21,
    22,
    23,
    13,
    15,
    16,
    17,
    18,
    19,
    20,
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-core/lib/attributes/Float2Attributes",
    "awayjs-core/lib/attributes/Float3Attributes",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/image/BitmapImageCube",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-core/lib/image/Sampler2D",
    "awayjs-core/lib/library/AssetLibrary",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/Style",
    "awayjs-display/lib/base/Timeline",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Billboard",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/graphics/ElementsType",
    "awayjs-display/lib/graphics/Graphics",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "graphicsCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "getDefaultImage2D",
    "_pHasTime",
    "_parsedHeader",
    "_graphics",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstElements",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "tx",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateElements",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "BitmapImage2D",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "assetType",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "obj",
    "constructObject",
    "MaterialVO",
    "readColor",
    "diffuseColor",
    "specularColor",
    "twoSided",
    "colorMap",
    "specularMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "scaleBy",
    "applyTransformation",
    "concat",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "getDefaultTexture",
    "chr",
    "g",
    "awayjs-core/lib/image/BitmapImage2D",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "split",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "m",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "val",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "Loader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/Loader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\nclass AWD3Utils {\n\tpublic static BLOCKSTATE_FINALIZE:number = 0;\n\tpublic static BLOCKSTATE_INVALID:number = 1;\n\tpublic static BLOCKSTATE_LOAD_DEPENDENICES:number = 2;\n\tpublic static BLOCKSTATE_NO_ASSET:number = 3;\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n}\nexport = AWD3Utils;",
    null,
    "import ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\nimport AWD3Utils\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\");\n\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic type:number;\n\tpublic data:any;\n\tpublic dependencies_data:Array<ByteArray>;\n\tpublic dependencies_urls:Array<string>;\n\tpublic loaded_dependencies:Array<any>;\n\tpublic loaded_dependencies_cnt:number;\n\tpublic len:number;\n\tpublic geoID:number;\n\tpublic state:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Float32Array>;\n\n\tconstructor(this_id:number, this_type:number)\n\t{\n\t\tthis.type=this_type;\n\t\tthis.id=this_id;\n\t\tthis.state = AWD3Utils.BLOCKSTATE_FINALIZE;\n\t\tthis.dependencies_data=Array<any>();\n\t\tthis.dependencies_urls=Array<string>();\n\t\tif(this_type==83){\n\t\t\tthis.loaded_dependencies=Array<any>(6);\n\t\t}\n\t\tthis.loaded_dependencies_cnt=0;\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\nexport = AWDBlock;",
    "import AttributesBuffer\t\t\t\t\t= require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nimport Short3Attributes\t\t\t\t\t= require(\"awayjs-core/lib/attributes/Short3Attributes\");\nimport Float3Attributes\t\t\t\t\t= require(\"awayjs-core/lib/attributes/Float3Attributes\");\nimport Float2Attributes\t\t\t\t\t= require(\"awayjs-core/lib/attributes/Float2Attributes\");\nimport BitmapImage2D\t\t\t\t\t= require(\"awayjs-core/lib/image/BitmapImage2D\");\nimport BitmapImageCube\t\t\t\t\t= require(\"awayjs-core/lib/image/BitmapImageCube\");\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/image/BlendMode\");\nimport Sampler2D\t\t\t\t\t\t= require(\"awayjs-core/lib/image/Sampler2D\");\nimport WaveAudio\t\t\t\t\t\t= require(\"awayjs-core/lib/audio/WaveAudio\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\nimport Point\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Point\");\n\nimport AnimationNodeBase\t\t\t\t= require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport View\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/containers/View\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport Graphics\t\t\t\t\t\t\t= require(\"awayjs-display/lib/graphics/Graphics\");\nimport TriangleElements\t\t\t\t\t= require(\"awayjs-display/lib/graphics/TriangleElements\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport TextField\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/TextField\");\nimport Billboard\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\n\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\nimport PrimitivePrefabBase\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePrefabBase\");\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\nimport SingleCubeTexture\t\t\t\t= require(\"awayjs-display/lib/textures/SingleCubeTexture\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport AnimationClipNodeBase\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\");\n\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\n\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\n\nimport ITimelineSceneGraphFactory \t= require(\"awayjs-display/lib/factories/ITimelineSceneGraphFactory\");\nimport AS2SceneGraphFactory \t\t= require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\nimport MovieClip \t\t\t\t\t= require(\"awayjs-display/lib/entities/MovieClip\");\nimport Timeline\t\t\t \t\t\t= require(\"awayjs-display/lib/base/Timeline\");\n\n\nimport AssetLibrary\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLibrary\");\n\nimport Font\t\t\t\t\t\t\t= require(\"awayjs-display/lib/text/Font\");\nimport TesselatedFontTable\t\t\t= require(\"awayjs-display/lib/text/TesselatedFontTable\");\nimport TextFormat\t\t\t\t\t= require(\"awayjs-display/lib/text/TextFormat\");\nimport TextFieldType\t\t\t\t= require(\"awayjs-display/lib/text/TextFieldType\");\n\nimport AWDBlock\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\");\nimport Rectangle \t\t\t\t\t= require(\"awayjs-core/lib/geom/Rectangle\");\nimport Style \t\t\t\t\t\t= require(\"awayjs-display/lib/base/Style\");\nimport Matrix \t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport MappingMode \t\t\t\t\t= require(\"awayjs-display/lib/textures/MappingMode\");\nimport ElementsType = require(\"awayjs-display/lib/graphics/ElementsType\");\nimport Graphic = require(\"awayjs-display/lib/graphics/Graphic\");\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\tprivate _view:View;\n\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = false;\n\tprivate _debugTimers:boolean = true;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\tpublic static GEO_NUMBER:number = 48;\n\tpublic static MATRIX_NUMBER:number = 49;\n\tpublic static PROPERTY_NUMBER:number = 50;\n\t\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\tprivate start_timeing:number;\n\tprivate _time_all:number=0;\n\tprivate _time_graphics:number=0;\n\tprivate _time_graphics_bytes:number=0;\n\tprivate _time_timeline:number=0;\n\tprivate _time_fonts:number=0;\n\tprivate _time_textfields:number=0;\n\tprivate _time_sounds:number=0;\n\tprivate _time_textures:number=0;\n\tprivate _time_materials:number=0;\n\tprivate _time_meshes:number=0;\n\tprivate _num_graphics:number=0;\n\tprivate _num_timeline:number=0;\n\tprivate _num_fonts:number=0;\n\tprivate _num_textfields:number=0;\n\tprivate _num_sounds:number=0;\n\tprivate _num_textures:number=0;\n\tprivate _num_materials:number=0;\n\tprivate _num_meshes:number=0;\n\n\n\t/**\n\t * Creates a new AWD3Parserutils object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(view:View = null)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._view = view;\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock(0,255);\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the ressource dependecniy has a id that point to the awd_block waiting for it.\n\t\t//console.log(\"AWDParser resolve dependencies\");\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar this_block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\tif(this_block.type==82){\n\t\t\t\tvar image_asset:BitmapImage2D = <BitmapImage2D> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = image_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\tthis._pFinalizeAsset(<IAsset> image_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed Texture: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==44){\n\t\t\t\tvar audio_asset:WaveAudio = <WaveAudio> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = audio_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t//console.log(\"Parsing audio \" + this_block.name);\n\t\t\t\tthis._pFinalizeAsset(<IAsset> audio_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==83){\n\t\t\t\tthis_block.loaded_dependencies[resourceDependency.sub_id]= resourceDependency.assets[0];\n\t\t\t\tthis_block.loaded_dependencies_cnt++;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n\n\t\t\t\tif(this_block.loaded_dependencies_cnt==6){\n\t\t\t\t\tvar cube_image_asset = new BitmapImageCube(this_block.loaded_dependencies[0].width);\n\n\t\t\t\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\t\t\t\tcube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n\n\t\t\t\t\tthis_block.data = cube_image_asset; // Store finished asset\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> cube_image_asset, this_block.name);\n\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._debugTimers && !this._isParsing)\n\t\t\t\tthis.updateTimers(this_block.type);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWD3Parserutils.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWD3Parserutils.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\n\t\t\t\tif (this._debugTimers)\n\t\t\t\t\tconsole.log(\"Parsing total: \"+(this._time_all | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics: \"+this._num_graphics+\", \"+(this._time_graphics | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics bytes: \"+this._num_graphics+\", \"+(this._time_graphics_bytes | 0)+\"ms\",\n\t\t\t\t\t\t\" | timelines: \"+this._num_timeline+\", \"+(this._time_timeline | 0)+\"ms\",\n\t\t\t\t\t\t\" | fonts: \"+this._num_fonts+\", \"+(this._time_fonts | 0)+\"ms\",\n\t\t\t\t\t\t\" | sounds: \"+this._num_sounds+\", \"+(this._time_sounds | 0)+\"ms\",\n\t\t\t\t\t\t\" | mats: \"+this._num_materials+\", \"+(this._time_materials | 0)+\"ms\",\n\t\t\t\t\t\t\" | textures: \"+this._num_textures+\", \"+(this._time_textures | 0)+\"ms\",\n\t\t\t\t\t\t\" | meshes: \"+this._num_meshes+\", \"+(this._time_meshes | 0)+\"ms\");\n\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate dispose()\n\t{\n\t\tfor (var c in this._blocks) {\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[c];\n\t\t\tb.dispose();\n\t\t}\n\t}\n\n\tprivate parseNextBlock()\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n//*\n\t\tif (this._debugTimers)\n\t\t\tthis.start_timeing = performance.now();\n//*/\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\tthis._newBlockBytes = new ByteArray();\n\t\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\t\t\tthis._newBlockBytes.position = 0;\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWD3Parserutils.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t} else {\n\t\t\tthis._newBlockBytes = this._body;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tblock = new AWDBlock(this._cur_block_id, type);\n\t\tblock.len = len;\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory(this._view);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 24:\n\t\t\t\t\tthis.parseMeshLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 25:\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4444:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 134:\n\t\t\t\t\tthis.parseTextField(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 135:\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 136:\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseGraphics(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tif (this._newBlockBytes.position != blockEndBlock)\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\tif (block.errorMessages) {\n\t\t\t\tvar len:number = block.errorMessages.length;\n\t\t\t\tfor (var msgCnt:number = 0; msgCnt < len; msgCnt++)\n\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t}\n\n\t\t\tconsole.log(\"\\n\");\n\t\t}\n\n\t\tif (this._debugTimers && !this.parsingPaused)\n\t\t\tthis.updateTimers(type);\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\t}\n\n\tprivate updateTimers(type:number)\n\t{\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - this.start_timeing;\n\t\tthis._time_all += time_delta;\n\n\t\tif (type == 1) {\n\t\t\tthis._time_graphics += time_delta;\n\t\t\tthis._num_graphics++;\n\t\t} else if (type == 133) {\n\t\t\tthis._time_timeline += time_delta;\n\t\t\tthis._num_timeline++;\n\t\t} else if (type == 135) {\n\t\t\tthis._time_fonts += time_delta;\n\t\t\tthis._num_fonts++;\n\t\t} else if (type == 134) {\n\t\t\tthis._time_textfields += time_delta;\n\t\t\tthis._num_textfields++;\n\t\t} else if (type == 44) {\n\t\t\tthis._time_sounds += time_delta;\n\t\t\tthis._num_sounds++;\n\t\t} else if (type == 82) {\n\t\t\tthis._time_textures += time_delta;\n\t\t\tthis._num_textures++;\n\t\t} else if (type == 81) {\n\t\t\tthis._time_materials += time_delta;\n\t\t\tthis._num_materials++;\n\t\t} else if(type==24) {\n\t\t\tthis._time_meshes += time_delta;\n\t\t\tthis._num_meshes++;\n\t\t}\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\n\tprivate parseTesselatedFont(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\tvar new_font:Font=<Font>AssetLibrary.getAsset(this._blocks[blockID].name);\n\t\tvar newfont:Boolean = false;\n\t\tif(new_font==undefined){\n\t\t\tnew_font = new Font();\n\t\t\tnewfont=true;\n\t\t}\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar font_style_char_cnt:number;\n\t\tvar font_style_name:string;\n\t\tvar new_font_style:TesselatedFontTable;\n\t\tvar font_style_char:number;\n\t\tvar attr_count:number=0;\n\t\tvar sm_len:number;\n\t\tvar sm_end:number;\n\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\n\t\t\tfont_style_name = this.parseVarStr();\n\n\t\t\t// dirty hack for icycle\n\t\t\t// we use bold chars for non-latin chars, but we use regular for � sign,\n\t\t\t// so the dirty hack is to merge the regular and the bold style\n\t\t\tif((this._blocks[blockID].name==\"Tahoma\") && (font_style_name==\"RegularStyle\")){\n\t\t\t\tfont_style_name=\"BoldStyle\";\n\t\t\t}\n\n\t\t\tnew_font_style = new_font.get_font_table(font_style_name);\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n\t\t\t//console.log(new_font_style.get_whitespace_width());\n\t\t\tfont_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n\t\t\tfor (var j:number = 0; j < font_style_char_cnt; ++j) {\n\t\t\t\t// todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n\t\t\t\tfont_style_char = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\t\t// Loop through data streams\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\t\t// Type, field type, length\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\t\tif (str_type == 2) {//face indices positions\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\t\tfor(var idx:number = 0; this._newBlockBytes.position < str_end; idx++)\n\t\t\t\t\t\t\tindices[idx] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 20;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (position + curvedata + uv)\n\t\t\t\t\t\tattr_count = 28;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(curveData) {\n\t\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len / attr_count);\n\t\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\n\t\t\t\t\t//add UVs if they exist in the data\n\t\t\t\t\tif (attr_count == 28)\n\t\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\t\tnew_font_style.setChar(font_style_char.toString(), curve_elements);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tif(newfont) {\n\t\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\n\t\t}\n\n\t\tthis._blocks[blockID].data = new_font;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\n\t}\n\n\tprivate static textFormatProperties:Object = {\n\t\t1:AWDParser.UINT16,\n\t\t2:AWDParser.UINT16,\n\t\t3:AWDParser.UINT8,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.UINT8,\n\t\t6:AWDParser.UINT8,\n\t\t7:AWDParser.UINT16,\n\t\t8:AWDParser.UINT16,\n\t\t9:AWDParser.UINT16,\n\t\t10:AWDParser.UINT16};\n\n\tprivate parseTextFormat(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\n\t\tvar font:Font = <Font> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar font_style_name:string = this.parseVarStr();\n\n\t\tvar newTextFormat:TextFormat = new TextFormat();\n\t\tnewTextFormat.font_name = font.name;\n\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\n\t\tif (font_table!=null) {\n\t\t\tnewTextFormat.font_style = font_style_name;\n\t\t\tnewTextFormat.font_table = font_table;\n\t\t}\n\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides = true;\n\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar uv_values:Array<number> = [];\n\t\tfor(var uvcnt:number = 0; uvcnt < num_uv_values; uvcnt++)\n\t\t\tuv_values[uvcnt] = this._newBlockBytes.readFloat();\n\n\t\tnewTextFormat.uv_values = uv_values;\n\t\tvar format_props:AWDProperties = this.parseProperties(AWDParser.textFormatProperties);\n\n\t\tnewTextFormat.size = format_props.get(1,12);\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\n\t\t//newTextFormat.rotated = format_props.get(3,false);\n\t\tnewTextFormat.kerning = format_props.get(4,true);\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\n\t\tvar tf_align_int:number = format_props.get(6,0);\n\t\tif(tf_align_int==1){\n\t\t\tnewTextFormat.align=\"right\";\n\t\t}\n\t\telse if(tf_align_int==2){\n\t\t\tnewTextFormat.align=\"center\";\n\t\t}\n\t\tnewTextFormat.indent = format_props.get(7,0);\n\t\tnewTextFormat.leftMargin = format_props.get(8,0);\n\t\tnewTextFormat.rightMargin = format_props.get(9,0);\n\t\tnewTextFormat.leading = format_props.get(10,0);\n\t\tnewTextFormat.material = mat;\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\n\t\t//newTextFormat.extra =\n\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\n\t\tthis._blocks[blockID].data = newTextFormat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\n\t}\n\n\tprivate static textFieldProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t3:AWDParser.BOOL,\n\t\t4:AWDParser.BOOL,\n\t\t5:AWDParser.BOOL,\n\t\t7:AWDParser.UINT8,\n\t\t8:AWDParser.UINT8,\n\t\t9:AWDParser.UINT8};\n\n\tprivate static textFieldTypes:Array<string> = [\"static\", \"dynamic\", \"input\", \"input\"];\n\n\n\tprivate parseTextField(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n\t\tvar text_field_type:number=this._newBlockBytes.readUnsignedByte();\n\n\t\tnewTextField.type = AWDParser.textFieldTypes[text_field_type];\n\n\t\tif(text_field_type == 3)\n\t\t\tnewTextField.displayAsPassword = true;\n\n\t\t//\n\t\tnewTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n\t\tnewTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar complete_text:string = \"\";\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\n\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\n\t\t\t\tvar text_format:TextFormat = <TextFormat> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\n\t\t\t\tif (txt_length > 0) {\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\n\t\t\t\t\tcomplete_text += this_txt;\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//newTextField.closeParagraph();\n\t\t}\n\t\tnewTextField.textFormat=text_format;\n\t\tnewTextField.text=complete_text;\n\t\t//newTextField.construct_graphics();\n\t\t// todo: optional matrix etc can be put in properties.\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.textFieldProperties);\n\t\tnewTextField.selectable = props.get(1, false);\n\t\tnewTextField.border =  props.get(3, false);\n\t\t//newTextField.renderHTML =  props.get(4, false);\n\t\t//newTextField.scrollable =  props.get(5, false);\n\t\t//newTextField.text_flow =  props.get(7, 0);\n\t\t//newTextField.orientationMode =  props.get(8, 0);\n\t\t//newTextField.line_mode =  props.get(9, 0);\n\t\tnewTextField.extra = this.parseUserAttributes();\n\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\n\t\tthis._blocks[blockID].data = newTextField;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t}\n\n\t// Block ID = 25\n\tprivate parseBillBoardLibraryBlock(blockID:number)\n\t{\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides=true;\n\t\tvar billboard:Billboard = new Billboard(mat);\n\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tbillboard.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\n\n\t\tthis._blocks[blockID].data = billboard;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n\t}\n\t// Block ID = 24\n\tprivate parseMeshLibraryBlock(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[data_id].data;\n\t\tthis._blocks[blockID].geoID = data_id;\n\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\t//mat.preserveAlpha = true;\n\t\t\tmat.alphaBlending = true;\n\t\t\tmat.useColorTransform = true;\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar start_timeing = performance.now();\n\t\tvar mesh:Mesh = new Mesh();\n\t\tgraphics.copyTo(mesh.graphics);\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - start_timeing;\n\t\tthis._time_graphics_bytes += time_delta;\n\n\t\tif (materials.length >= 1 && mesh.graphics.count == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (var i:number = 0; i < mesh.graphics.count; i++)\n\t\t\t\tmesh.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\n\t\tvar count:number = this._newBlockBytes.readUnsignedShort();\n\t\tif(count != mesh.graphics.count)\n\t\t\tthrow new Error(\"num elements does not match num submeshes\");\n\n\t\tfor (var i:number = 0; i < count; i++) {\n\t\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\t\tvar sampler:Sampler2D = new Sampler2D();\n\t\t\tvar graphic:Graphic = mesh.graphics.getGraphicAt(i);\n\t\t\tgraphic.style = new Style();\n\t\t\tgraphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n\n\t\t\tif(type==3){// solid color fill - need tx and ty\n\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\tgraphic.uvTransform = new Matrix(0, 0, 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n\t\t\t}\n\t\t\telse if(type==4){// texture fill - need full matrix\n\t\t\t\tvar matrix:Array<number> = this.parseMatrix32RawData();\n\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\tgraphic.uvTransform = new Matrix(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n\t\t\t}\n\t\t\telse if(type==5){// linear gradient fill - need a, c , tx and ty\n\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\tgraphic.uvTransform = new Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n\t\t\t}\n\t\t\telse if(type==6){// radial gradient fill - need image rectangle + full transform\n\t\t\t\tvar x:number = this._newBlockBytes.readFloat();\n\t\t\t\tvar y:number = this._newBlockBytes.readFloat();\n\t\t\t\tvar width:number = this._newBlockBytes.readFloat();\n\t\t\t\tvar height:number = this._newBlockBytes.readFloat();\n\t\t\t\tsampler.imageRect = new Rectangle(x, y, width, height);\n\t\t\t\tgraphic.material.imageRect = true;\n\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\tvar matrix:Array<number> = this.parseMatrix32RawData();\n\t\t\t\tgraphic.uvTransform = new Matrix(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n\t\t\t}\n\n\t\t\t//check if curves are needed\n\t\t\tif (graphic.elements.getCustomAtributes(\"curves\"))\n\t\t\t\tgraphic.material.curves = true;\n\n\t\t\t// todo: finish optional properties (spreadmode + focalpoint)\n\t\t\tthis._newBlockBytes.readUnsignedInt();\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Mesh: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + mesh.graphics.count + \" | Mat-Names = \" + materialNames);\n\t}\n\n\tprivate parseAudioBlock(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n\t}\n\n\t//Block ID = 4\n\tprivate parseTimeLine(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar cmd_asset:DisplayObject;\n\t\tvar new_timeline:Timeline = new Timeline();\n\t\tvar timeLineContainer = factory.createMovieClip(new_timeline);\n\t\tvar name = this.parseVarStr();\n\t\tvar isScene = Boolean(this._newBlockBytes.readUnsignedByte());\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\n\t\tvar fps = this._newBlockBytes.readFloat();\n\n\t\t// register list of potential childs\n\t\t// a potential child can be reused on a timeline (added / removed / added)\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\n\t\t// we parse 2 lists of potential-childs:\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n\t\t// hence we need to be careful to register all objects in correct order.\n\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t}\n\t\t}\n\n\t\tvar num_all_display_instances:number = num_potential_childs;\n\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tvar num_instances:number = this._newBlockBytes.readUnsignedShort();\n\t\t\tnum_all_display_instances += num_instances;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tfor (j = 0; j < num_instances; j++)\n\t\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n\n\t\t// register list of potential sounds - for now we always have 0 sounds\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n\n\n\t\tvar str_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tvar str_len = 0;\n\t\tvar str_data_type = 0;\n\t\tvar str_type=0;\n\t\tvar str_counter=0;\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\t// the first 6 lists are not optional and always in same order\n\t\t\t// hence we can get type by incremental counter instead of stored uint8\n\t\t\tif(str_counter<6)\n\t\t\t\tstr_type=str_counter;\n\t\t\telse\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n\t\t\tstr_data_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// size of this stream in byte\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tif(str_len>0) {\n\t\t\t\tvar keyframes_start_indices_data:ByteArray = new ByteArray(str_len);\n\t\t\t\tthis._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n\t\t\t\tvar new_buffer:ArrayBufferView;\n\t\t\t\t//console.log(\"str_data_type = \"+str_type);\n\t\t\t\tswitch (str_data_type) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_buffer = new Uint8Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_buffer = new Uint16Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_buffer = new Uint32Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tswitch (str_type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tnew_timeline.keyframe_durations = new_buffer;\n\t\t\t\t\t\tnew_timeline.numKeyFrames=str_len / str_data_type;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_timeline.frame_command_indices = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_timeline.frame_recipe = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tnew_timeline.command_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_timeline.command_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tnew_timeline.add_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tnew_timeline.remove_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tnew_timeline.update_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tnew_timeline.update_child_props_indices_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tnew_timeline.update_child_props_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tnew_timeline.property_type_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tnew_timeline.property_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tnew_timeline.properties_stream_int = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr_counter++;\n\t\t}\n\t\tvar lc:number=0;\n\t\tvar float_array_data:ByteArray;\n\t\tstr_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\tswitch(str_type) {\n\t\t\t\tcase 0://mtx_scale\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_scale_rot=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1://mtx_pos\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_pos=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2://mtx_all\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_all=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3://ct\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_ct=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4://labels\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t//console.log(\"start reading labels \"+str_len);\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tnew_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5://name_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tvar string_props_array:Array<string>=[];\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tstring_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n\t\t\t\t\t}\n\t\t\t\t\tnew_timeline.properties_stream_strings = string_props_array;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6://script_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tvar frame_index=this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tvar one_str_len=this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t//this._newBlockBytes.readUTFBytes(one_str_len);\n\t\t\t\t\t\tnew_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnew_timeline.init();\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\n\n\t\tthis._blocks[blockID].data = timeLineContainer;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \");\n\t}\n\n\tprivate static graphicsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\tprivate static elementsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\t//Block ID = 1\n\tprivate parseGraphics(blockID:number)\n\t{\n\t\tvar graphics:Graphics = new Graphics(null);\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numElements:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.graphicsProperties);\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t//console.log(\"numElements \"+numElements);\n\t\t// Loop through sub meshes\n\t\tfor (var elements_parsed:number = 0;  elements_parsed < numElements; elements_parsed++) {\n\t\t\tvar is_curve_elements:boolean=false;\n\t\t\tvar attr_count:number=0;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\tvar elementsProps:AWDProperties = this.parseProperties(AWDParser.elementsProperties);\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 4) {\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t} else if (str_type == 7) {\n\t\t\t\t\tweights = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (2d pos + uv + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 28;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 20;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\n\n\t\t\tif(is_curve_elements){\n\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len/attr_count);\n\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\n\t\t\t\tif(attr_count==28)\n\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\tgraphics.addGraphic(curve_elements);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements with curves\");\n\n\t\t\t} else {\n\t\t\t\tvar triangle_elements = new TriangleElements(new AttributesBuffer());\n\n\t\t\t\tif (weights)\n\t\t\t\t\ttriangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n\n\t\t\t\tif (normals)\n\t\t\t\t\ttriangle_elements.autoDeriveNormals = false;\n\n\t\t\t\ttriangle_elements.autoDeriveTangents = true;\n\n\t\t\t\ttriangle_elements.setIndices(indices);\n\t\t\t\ttriangle_elements.setPositions(verts);\n\t\t\t\ttriangle_elements.setNormals(normals);\n\t\t\t\ttriangle_elements.setUVs(uvs);\n\t\t\t\ttriangle_elements.setJointWeights(weights);\n\t\t\t\ttriangle_elements.setJointIndices(w_indices);\n\n\t\t\t\tvar scaleU:number = elementsProps.get(1, 1);\n\t\t\t\tvar scaleV:number = elementsProps.get(2, 1);\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\t\tsetSubUVs = true;\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\n\t\t\t\t}\n\n\t\t\t\tif (setSubUVs)\n\t\t\t\t\ttriangle_elements.scaleUV(scaleU, scaleV);\n\n\t\t\t\tgraphics.addGraphic(triangle_elements);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements\");\n\t\t\t}\n\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating meshes (and their material assignments.)\n\t\t}\n\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgraphics.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> graphics, name);\n\t\tthis._blocks[blockID].data = graphics;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed Graphics: Name = \" + name);\n\t}\n\n\tprivate static primitiveProperties:Object = {\n\t\t101:AWDParser.GEO_NUMBER,\n\t\t102:AWDParser.GEO_NUMBER,\n\t\t103:AWDParser.GEO_NUMBER,\n\t\t110:AWDParser.GEO_NUMBER,\n\t\t111:AWDParser.GEO_NUMBER,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t303:AWDParser.UINT16,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t703:AWDParser.BOOL,\n\t\t704:AWDParser.BOOL};\n\n\tprivate static primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number)\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar elements_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties(AWDParser.primitiveProperties);\n\n\t\t// to do, not all properties are set on all primitives\n\t\tswitch (primType) {\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//graphics.elements;\n\t\t\t//graphics.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7))\n\t\t\t\tprimType = 0;\n\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n\t\t}\n\t}\n\n\tprivate static containerProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number)\n\t{\n\t\tvar name:string;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tif (parent) {\n\t\t\tparent.addChild(ctr);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.containerProperties);\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t} else {// in other versions we do not read the Container properties\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t}\n\n\tprivate static meshInstanceProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL};\n\n\t// Block ID = 23\n\tprivate parseMeshInstance(blockID:number)\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar asset:IAsset = <IAsset> this._blocks[data_id].data;\n\t\tvar graphics:Graphics;\n\t\tvar prefab:PrefabBase;\n\t\tvar isPrefab:boolean=false;\n\t\tif (asset.isAsset(Graphics)) {\n\t\t\tgraphics = <Graphics> asset;\n\t\t} else {\n\t\t\tisPrefab = true;\n\t\t\tprefab = <PrefabBase> asset;\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar mesh:Mesh;\n\n\t\tif (isPrefab) {\n\t\t\tmesh = <Mesh> prefab.getNewObject()\n\t\t} else {\n\t\t\tmesh = new Mesh();\n\t\t\tgraphics.copyTo(mesh.graphics);\n\t\t}\n\n\t\tmesh.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(mesh);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\t\t}\n\n\t\tif (materials.length >= 1 && mesh.graphics.count == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (var i:number = 0; i < mesh.graphics.count; i++)\n\t\t\t\tmesh.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.meshInstanceProperties);\n\t\t\tmesh.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\tmesh.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tif (isPrefab)\n\t\t\t\tconsole.log(\"Parsed a Mesh for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + mesh.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t\telse\n\t\t\t\tconsole.log(\"Parsed a Mesh for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + mesh.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar asset:Skybox = new Skybox();\n\t\tvar tex:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultImageCube());\n\t\tasset.texture = tex;\n\n\t\tthis.parseProperties(null);\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n\t}\n\n\tprivate static lightProperties:Object = {\n\t\t1:AWDParser.PROPERTY_NUMBER,\n\t\t2:AWDParser.PROPERTY_NUMBER,\n\t\t3:AWDParser.COLOR,\n\t\t4:AWDParser.PROPERTY_NUMBER,\n\t\t5:AWDParser.PROPERTY_NUMBER,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.COLOR,\n\t\t8:AWDParser.PROPERTY_NUMBER,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.UINT8,\n\t\t11:AWDParser.PROPERTY_NUMBER,\n\t\t12:AWDParser.UINT16,\n\t\t21:AWDParser.MATRIX_NUMBER,\n\t\t22:AWDParser.MATRIX_NUMBER,\n\t\t23:AWDParser.MATRIX_NUMBER};\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number)\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.lightProperties);\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\t\t}\n\n\t\tif (lightType == 2) {\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\t\t}\n\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(light);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\t}\n\n\tprivate static cameraProperties:Object = {\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER};\n\n\tprivate static cameraPivotProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number)\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.cameraProperties);\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(camera);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties(AWDParser.cameraPivotProperties);\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (var k:number = 0; k < numLights; k++) {\n\t\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tlightsArray.push(light);\n\t\t\tlightsArrayNames.push(light.name);\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n\t}\n\n\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\tprivate static materialProperties:Object = {\n\t\t1:AWDParser.INT32,\n\t\t2:AWDParser.BADDR,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL};\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number)\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\tprops = this.parseProperties(AWDParser.materialProperties);\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\n\t\tvar debugString:string = \"\";\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\tmat = new MethodMaterial();\n\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = this.parseUserAttributes();\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.style.sampler = new Sampler2D(props.get(13, false));\n\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\t\n\tprivate static material_v1Properties:Object = {1:AWDParser.UINT32,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.BOOL,\n\t\t8:AWDParser.BOOL,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL,\n\t\t15:AWDParser.PROPERTY_NUMBER,\n\t\t16:AWDParser.UINT32,\n\t\t17:AWDParser.BADDR,\n\t\t18:AWDParser.PROPERTY_NUMBER,\n\t\t19:AWDParser.PROPERTY_NUMBER,\n\t\t20:AWDParser.UINT32,\n\t\t21:AWDParser.BADDR,\n\t\t22:AWDParser.BADDR};\n\n\tprivate static method_v1Properties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4};\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number)\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar diffuseImage:BitmapImage2D;\n\t\tvar normalImage:BitmapImage2D;\n\t\tvar specImage:BitmapImage2D;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.material_v1Properties);\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\t\t\tmat = new MethodMaterial();\n\t\t\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdiffuseImage = <BitmapImage2D> this._blocks[props.get(17, 0)].data;\n\t\t\t\tnormalImage = <BitmapImage2D> this._blocks[props.get(3, 0)].data;\n\t\t\t\tspecImage = <BitmapImage2D> this._blocks[props.get(21, 0)].data;\n\t\t\t\tmat.lightPicker = <LightPickerBase> this._blocks[props.get(22, 0)].data;\n\t\t\t\tmat.style.sampler = new Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true))\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\n\t\t\t\tif (diffuseImage) {\n\t\t\t\t\tmat.diffuseTexture = new Single2DTexture(diffuseImage);\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (normalImage) {\n\t\t\t\t\tmat.normalMethod.texture = new Single2DTexture(normalImage);\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (specImage) {\n\t\t\t\t\tmat.specularMethod.texture = new Single2DTexture(specImage);\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specImage.name;\n\t\t\t\t}\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambientMethod.strength = props.get(15, 1.0);\n\t\t\t\tmat.diffuseMethod.color = props.get(16, 0xffffff);\n\t\t\t\tmat.specularMethod.strength = props.get(18, 1.0);\n\t\t\t\tmat.specularMethod.gloss = props.get(19, 50);\n\t\t\t\tmat.specularMethod.color = props.get(20, 0xffffff);\n\n\t\t\t\tfor (var methods_parsed:number = 0; methods_parsed < num_methods; methods_parsed++) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties(AWDParser.method_v1Properties);\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\t\t\t\t\t\t\tvar effectMethod:EffectMethodBase = <EffectMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.addEffectMethod(effectMethod);\n\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + effectMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\t\t\t\t\t\t\tvar shadowMapMethod:ShadowMapMethodBase = <ShadowMapMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.shadowMethod = shadowMapMethod;\n\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\tvar cubeTexture:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod();\n\t\t\t\t\t\t\tmat.ambientMethod.texture = cubeTexture;\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(texture);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(<Single2DTexture> mat.normalMethod.texture || texture, texture);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: we should not need this anymore (if using texture-atlas)\n\t\telse if ((type>=3)&&(type<=7)){\n\t\t\t// if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n\t\t\tvar color:number = props.get(1, 0xcccccc);\n\t\t\tdebugString+=color;\n\t\t\tvar diffuseTexture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\t\t\tif(type==5){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.LINEAR_GRADIENT;\n\t\t\t}\n\t\t\telse if(type==6){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.RADIAL_GRADIENT;\n\t\t\t}\n\t\t\tvar basic_mat:BasicMaterial = new BasicMaterial();\n\t\t\tbasic_mat.texture = diffuseTexture;\n\t\t\tbasic_mat.bothSides = true;\n\t\t\t//basic_mat.preserveAlpha = true;\n\t\t\tbasic_mat.alphaBlending = true;\n\t\t\tbasic_mat.extra = this.parseUserAttributes();\n\t\t\tthis._pFinalizeAsset(<IAsset> basic_mat, name);\n\t\t\tthis._blocks[blockID].data = basic_mat;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(debugString);\n\t\t\treturn;\n\t\t\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number)\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tvar url:string = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tvar data_len:number = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number)\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar i:number;\n\n\t\tthis._texture_users[ this._cur_block_id ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true, i);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true, i);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number)\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number)\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar asset:ShadowMethodBase = this.parseShadowMethodList(light, blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n\t}\n\n\tprivate static commandProperties:Object = {\n\t\t1:AWDParser.BADDR};\n\n\tprivate static targetProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\t\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number)\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar parentObject:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar targetObject:DisplayObjectContainer;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.commandProperties);\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\t\t\t\ttargetObject = this._blocks[props.get(1, 0)].data;\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tif (parentObject)\n\t\t\t\t\tparentObject.addChild(targetObject);\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties(AWDParser.targetProperties);\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\t\t}\n\n\t\tthis._blocks[blockID].data = targetObject;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t}\n\t\n\tprivate static metaDataProperties:Object = {\n\t\t1:AWDParser.UINT32,\n\t\t2:AWDParser.AWDSTRING,\n\t\t3:AWDParser.AWDSTRING,\n\t\t4:AWDParser.AWDSTRING,\n\t\t5:AWDParser.AWDSTRING};\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number)\n\t{\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.metaDataProperties);\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number)\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\tprivate shadowMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4}\n\t\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties(this.shadowMethodListProperties);\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> this._blocks[props.get(1, 0)].data);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\n\t\tthis._blocks[blockID].data = skeleton;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Float32Array = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t}\n\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\n\t\tthis._blocks[blockID].data = pose;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/)\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_id:number;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tpose_id = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_id].data, frame_dur);\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\t\n\tprivate meshPoseAnimationProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t2:AWDParser.BOOL};\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false)\n\t{\n\t\tvar subMeshParsed:number /*uint*/;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar elements:TriangleElements;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Short3Attributes;\n\t\tvar verts:Array<number>;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geo_id:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[geo_id].data;\n\n\t\tvar uvs:Array<Float32Array> = this.getUVForVertexAnimation(geo_id);\n\n\t\tvar num_frames:number = (!poseOnly)? this._newBlockBytes.readUnsignedShort() : 1;\n\n\t\tvar num_submeshes:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar num_Streams:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var streamsParsed:number = 0; streamsParsed < num_Streams; streamsParsed++)\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\n\t\tprops = this.parseProperties(this.meshPoseAnimationProperties);\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tvar frame_dur:number;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgraphics = new Graphics(null);\n\t\t\tsubMeshParsed = 0;\n\t\t\twhile (subMeshParsed < num_submeshes) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = graphics.getGraphicAt(subMeshParsed).elements.indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\t\t\t\telements.setIndices(indices);\n\t\t\t\t\t\telements.setPositions(verts);\n\t\t\t\t\t\telements.setUVs(uvs[subMeshParsed]);\n\t\t\t\t\t\telements.setNormals(null);\n\t\t\t\t\t\telements.setTangents(null);\n\t\t\t\t\t\telements.autoDeriveNormals = false;\n\t\t\t\t\t\telements.autoDeriveTangents = false;\n\t\t\t\t\t\tsubMeshParsed++;\n\t\t\t\t\t\tgraphics.addGraphic(elements);\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(graphics, frame_dur);\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\tprivate static vertexAnimationSetProperties:Object = {\n\t\t1:AWDParser.UINT16};\n\t\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\tvar clipNode:AnimationClipNodeBase;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tclipNode = <AnimationClipNodeBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (clipNode instanceof VertexClipNode)\n\t\t\t\tvertexFrames.push(<VertexClipNode> clipNode);\n\t\t\telse if (clipNode instanceof SkeletonClipNode)\n\t\t\t\tskeletonFrames.push(<SkeletonClipNode> clipNode);\n\t\t}\n\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n\t\t}\n\t}\n\n\tprivate static animatorSetProperties:Object = {1:AWDParser.BADDR};\n\t\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.animatorSetProperties);\n\t\tvar targetAnimationSet:AnimationSetBase = <AnimationSetBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\n\t\t\ttargetMeshes.push(<Mesh> this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1)\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> this._blocks[props.get(1, 0)].data);\n\t\telse if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\telse if (type == 2)\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\tprivate sharedMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER,\n\t\t105:AWDParser.PROPERTY_NUMBER,\n\t\t106:AWDParser.PROPERTY_NUMBER,\n\t\t107:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL};\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties(this.sharedMethodListProperties);\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data), <number> props.get(101, 1));\n\t\t\t\tvar targetID:number = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <TextureBase> this._blocks[targetID].data;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\t\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\t\t\tvar attributes:Object = {};\n\n\t\t\tfor (var attibuteCnt:number = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar props:AWDProperties = new AWDProperties();\n\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\t\t\tvar len:number;\n\t\t\tvar key:number;\n\t\t\tvar type:number;\n\n\t\t\tfor (var propertyCnt:number = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected[key]) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\t\tvar accuracy:boolean;\n\n\t\tswitch (type) {\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\t\t\tcase AWDParser.GEO_NUMBER:\n\t\t\t\taccuracy = this._accuracyGeo;\n\t\t\tcase AWDParser.MATRIX_NUMBER:\n\t\t\t\taccuracy = this._accuracyMatrix;\n\t\t\tcase AWDParser.PROPERTY_NUMBER:\n\t\t\t\taccuracy = this._accuracyProps;\n\t\t\tdefault:\n\t\t\t\tif (accuracy) {\n\t\t\t\t\telem_len = 8;\n\t\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\t} else {\n\t\t\t\t\telem_len = 4;\n\t\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\t}\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\tfor (var num_read:number = 0; num_read < num_elems; num_read++)\n\t\t\t\tlist[num_read] = read_func.call(this._newBlockBytes);\n\n\t\t\treturn list;\n\t\t} else {\n\t\t\treturn read_func.call(this._newBlockBytes);\n\t\t}\n\t}\n\n\tprivate parseHeader()\n\t{\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tvar flags:number = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tvar body_len:number = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable())\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Float32Array>\n\t{\n\t\tif (this._blocks[meshID].data instanceof Mesh)\n\t\t\tmeshID = this._blocks[meshID].geoID;\n\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\n\t\tvar graphics:Graphics = (<Graphics> this._blocks[meshID].data);\n\t\tvar elements:TriangleElements;\n\t\tvar uvsForVertexAnimation:Array<ArrayBufferView> = this._blocks[meshID].uvsForVertexAnimation = new Array<Float32Array>();\n\n\t\tvar len:number = graphics.count;\n\t\tfor (var geoCnt:number= 0; geoCnt < len; geoCnt++) {\n\t\t\telements = <TriangleElements> graphics.getGraphicAt(geoCnt).elements;\n\t\t\tuvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n\t\t}\n\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\t\treturn this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\n\t\treturn this._newBlockBytes.readFloat();\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\n\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Float32Array\n\t{\n\t\tvar mtx_raw:Float32Array = new Float32Array(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n}\n\nexport = AWDParser;\n\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any)\n\t{\n\t\tthis[key] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\treturn (this[key] || fallback);\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import AttributesBuffer\t\t\t\t\t= require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nimport BitmapImage2D\t\t\t\t\t= require(\"awayjs-core/lib/image/BitmapImage2D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport Graphics\t\t\t\t\t\t\t= require(\"awayjs-display/lib/graphics/Graphics\");\nimport TriangleElements\t\t\t\t\t= require(\"awayjs-display/lib/graphics/TriangleElements\");\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\n\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current elements being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstElements:TriangleElements;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _mesh:Mesh;\n\tprivate _graphics:Graphics;\n\n\tprivate materialFinal:boolean = false;\n\tprivate graphicsCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar material:MethodMaterial = new MethodMaterial(<BitmapImage2D> resourceDependency.assets[0]);\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\tmaterial.name = this._mesh.material.name;\n\t\tthis._mesh.material = material;\n\t\tthis._pFinalizeAsset(material);\n\t\tthis._pFinalizeAsset(this._mesh.graphics);\n\t\tthis._pFinalizeAsset(this._mesh);\n\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\tthis._pFinalizeAsset(this._mesh.graphics);\n\t\tthis._pFinalizeAsset(this._mesh);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._mesh = new Mesh();\n\t\t\t\tthis._graphics = this._mesh.graphics;\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.graphicsCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.graphicsCreated) {\n\t\t\t\tthis.graphicsCreated = true;\n\t\t\t\t//create default subgraphics\n\t\t\t\tthis._graphics.addGraphic(this._firstElements.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._mesh.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.graphics);\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader()\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames()\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._mesh.material.name = this._materialNames[0];\n\t\telse\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the mesh.\n\t */\n\tprivate parseUV()\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces()\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame elements.\n\t */\n\tprivate parseFrames()\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar graphics:Graphics;\n\t\tvar elements:TriangleElements;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\n\t\t\tif (this._firstElements == null)\n\t\t\t\tthis._firstElements = elements;\n\n\t\t\tgraphics = new Graphics(null);\n\t\t\tgraphics.addGraphic(elements);\n\n\t\t\telements.setIndices(this._indices);\n\t\t\telements.setPositions(fvertices);\n\t\t\telements.setUVs(this._finalUV);\n\t\t\t// cause explicit updates\n\t\t\telements.setNormals(null);\n\t\t\telements.setTangents(null);\n\t\t\t// turn auto updates off because they may be animated and set explicitly\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(graphics, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import AttributesBuffer\t\t\t\t\t= require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport Graphics\t\t\t\t\t\t\t= require(\"awayjs-display/lib/graphics/Graphics\");\nimport TriangleElements\t\t\t\t\t= require(\"awayjs-display/lib/graphics/TriangleElements\");\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _mesh:Mesh;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _meshData:Array<MeshData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _graphics:Graphics;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5mesh\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._mesh = new Mesh();\n\t\t\t\tthis._graphics = this._mesh.graphics;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\n\t\t\t\t\tthis._graphics.addGraphic(this.translateElements(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\n\n\t\t\t\t//_graphics.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\tthis._pFinalizeAsset(this._graphics);\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\n\t\t\tvar meshData:MeshData = this._meshData[i];\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = vertex.startWeight;\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh graphics.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar vertexData:Array<VertexData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(vertexData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._meshData == null)\n\t\t\tthis._meshData = new Array<MeshData>();\n\n\t\tvar i:number /*uint*/ = this._meshData.length;\n\t\tthis._meshData[i] = new MeshData();\n\t\tthis._meshData[i].vertexData = vertexData;\n\t\tthis._meshData[i].weightData = weights;\n\t\tthis._meshData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the mesh data to a SkinnedSub instance.\n\t * @param vertexData The mesh's vertices.\n\t * @param weights The joint weights per vertex.\n\t * @param indices The indices for the faces.\n\t * @return A TriangleElements instance containing all elements data for the current mesh.\n\t */\n\tprivate translateElements(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleElements\n\t{\n\t\tvar len:number /*int*/ = vertexData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar vertex:VertexData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tvertex = vertexData[i];\n\t\t\tv1 = vertex.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\n\t\t\t\tweight = weights[vertex.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = vertex.index << 1;\n\t\t\tuvs[v1++] = vertex.s;\n\t\t\tuvs[v1] = vertex.t;\n\t\t}\n\n\t\telements.jointsPerVertex = this._maxJointCount;\n\t\telements.setIndices(indices);\n\t\telements.setPositions(vertices);\n\t\telements.setUVs(uvs);\n\t\telements.setJointIndices(jointIndices);\n\t\telements.setJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\telements.setNormals(null);\n\t\telements.setTangents(null);\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\telements.autoDeriveTangents = false;\n\t\telements.autoDeriveNormals = false;\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of vertex indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single vertex.\n\t * @param vertexData The list to contain the vertex data.\n\t */\n\tprivate parseVertex(vertexData:Array<VertexData>):void\n\t{\n\t\tvar vertex:VertexData = new VertexData();\n\t\tvertex.index = this.getNextInt();\n\t\tthis.parseUV(vertex);\n\t\tvertex.startWeight = this.getNextInt();\n\t\tvertex.countWeight = this.getNextInt();\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\n\t\tvertexData[vertex.index] = vertex;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param vertexData The vertexData to contain the UV coordinates.\n\t */\n\tprivate parseUV(vertexData:VertexData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvertexData.s = this.getNextNumber();\n\t\tvertexData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5MeshParser;\n\n\nclass VertexData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass MeshData\n{\n\tpublic vertexData:Array<VertexData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import AttributesBuffer\t\t\t\t\t= require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nimport BitmapImage2D\t\t\t\t\t= require(\"awayjs-core/lib/image/BitmapImage2D\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport Graphics\t\t\t\t\t\t\t= require(\"awayjs-display/lib/graphics/Graphics\");\nimport TriangleElements\t\t\t\t\t= require(\"awayjs-display/lib/graphics/TriangleElements\");\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = Mesh.assetType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == Mesh.assetType) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleElements;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar mesh:Mesh;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Build mesh and return it\n\t\t\tmesh = new Mesh(mat);\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\n\n\t\t\tgraphics = mesh.graphics;\n\n\t\t\t// Construct elements (potentially splitting buffers)\n\t\t\t// and add them to graphics.\n\t\t\tsub = new TriangleElements(new AttributesBuffer());\n\t\t\tsub.setIndices(obj.indices);\n\t\t\tsub.setPositions(obj.verts);\n\t\t\tsub.setUVs(obj.uvs);\n\n\t\t\tgraphics.addGraphic(sub);\n\n\t\t\t// Apply pivot translation to graphics if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\t\tmtx.rawData[12] = 0;\n\t\t\t\t\tmtx.rawData[13] = 0;\n\t\t\t\t\tmtx.rawData[14] = 0;\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to graphics if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to graphics. Finalize the graphics,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n\n\t\t\treturn mesh;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture();\n\n\t\tmat.diffuseMethod.color = this._cur_mat.diffuseColor;\n\t\tmat.specularMethod.color = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Float32Array\n\t{\n\t\tvar data:Float32Array = new Float32Array(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport = Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Float32Array;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Single2DTexture;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import Sampler2D\t\t\t\t\t= require(\"awayjs-core/lib/image/Sampler2D\");\nimport AttributesBuffer\t\t\t\t\t= require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nimport BitmapImage2D\t\t\t\t\t= require(\"awayjs-core/lib/image/BitmapImage2D\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\n\nimport Graphics\t\t\t\t\t\t\t= require(\"awayjs-display/lib/graphics/Graphics\");\nimport TriangleElements\t\t\t\t\t= require(\"awayjs-display/lib/graphics/TriangleElements\");\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _meshes:Array<Mesh>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = new Single2DTexture(<BitmapImage2D> asset);\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._meshes.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._meshes = new Array<Mesh>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar mesh:Mesh;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tmesh = new Mesh(bmMaterial);\n\t\t\t\tgraphics = mesh.graphics;\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], graphics);\n\n\t\t\t\tif (graphics.count == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> graphics);//, \"\");\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\n\t\t\t\t\tmesh.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tmesh.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._meshes.push(mesh);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\n\n\t\t\t\tif (mesh.graphics.count > 1) {\n\t\t\t\t\tfor (sm = 1; sm < mesh.graphics.count; ++sm)\n\t\t\t\t\t\tmesh.graphics.getGraphicAt(sm).material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgraphics.\n\t * @param materialGroup The material group data to convert.\n\t * @param graphics The Graphics to contain the converted Elements.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, graphics:Graphics)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar elements:TriangleElements;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\telements.autoDeriveNormals = normals.length? false : true;\n\t\t\telements.setIndices(indices);\n\t\t\telements.setPositions(vertices);\n\t\t\telements.setNormals(normals);\n\t\t\telements.setUVs(uvs);\n\n\t\t\tgraphics.addGraphic(elements);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.color = specularColor;\n\t\t\t\t\tbasicSpecularMethod.strength = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial = new MethodMaterial(color);\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm.alpha = alpha;\n\t\t\t\t} else {\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\tcm.diffuseMethod.color = diffuseColor;\n\n\t\t\t\tif (useSpecular) {\n\t\t\t\t\tcm.specularMethod.color = specularColor;\n\t\t\t\t\tcm.specularMethod.strength = specular;\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar mesh:Mesh;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\n\t\t\tmesh = this._meshes[i];\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (mesh.material)\n\t\t\t\t\t\tmesh.material = null;\n\t\t\t\t\tmesh.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\ttm = <MethodMaterial > mesh.material;\n\n\t\t\t\t\ttm.ambientMethod.texture = lm.texture;\n\t\t\t\t\ttm.style.color = lm.color;\n\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\ttm.style.sampler = new Sampler2D(true);\n\n\t\t\t\t\tif (this.materialMode < 2) // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\telse\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\ttm.specularMethod.color = specularData.color;\n\t\t\t\t\t\t\t\ttm.specularMethod.strength = specularData.alpha;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._meshes.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport = OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Single2DTexture;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import Loader\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/Loader\");\n\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport = Parsers;"
  ],
  "sourceRoot": ""
}