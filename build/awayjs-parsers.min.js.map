{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "Geometry",
    "CurveSubGeometry",
    "TriangleSubGeometry",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "TextureBase",
    "ByteArray",
    "AnimationNodeBase",
    "DisplayObjectContainer",
    "LightBase",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "TextField",
    "Billboard",
    "Skybox",
    "DefaultMaterialManager",
    "MaterialBase",
    "LightPickerBase",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "AnimationSetBase",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectMethodBase",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "ShadowMapMethodBase",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "CurveMaterial",
    "BasicMaterial",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildAtDepthCommand",
    "ApplyAS2DepthsCommand",
    "ExecuteScriptCommand",
    "RemoveChildrenAtDepthCommand",
    "SetInstanceNameCommand",
    "UpdatePropertyCommand",
    "Font",
    "TextFormat",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseMeshLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseTimeLine",
    "paresTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "font_style_cnt",
    "new_font",
    "font_style_name",
    "new_font_style",
    "get_font_table",
    "set_font_em_size",
    "font_style_char_cnt",
    "font_style_char",
    "sm_len",
    "sm_end",
    "idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "indices",
    "readUnsignedShort",
    "idx_pos",
    "idx_curves",
    "idx_uvs",
    "positions",
    "curveData",
    "uvs",
    "readNumber",
    "curve_sub_geom",
    "updateIndices",
    "updatePositions",
    "updateCurves",
    "updateUVs",
    "set_subgeo_for_char",
    "parseProperties",
    "parseUserAttributes",
    "font_id",
    "returnArrayFont",
    "getAssetByID",
    "assetType",
    "font",
    "addError",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "data_id",
    "returnedArrayMaterial",
    "bothSides",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "uv_value",
    "readFloat",
    "format_props",
    1,
    "UINT16",
    2,
    3,
    "UINT8",
    4,
    5,
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "material",
    "newTextField",
    "num_paragraphs",
    "complete_text",
    "text_format",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "format_id",
    "textFormatArray",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "extra",
    "billboard",
    "num_materials",
    "materials_parsed",
    "geom",
    "returnedArrayGeometry",
    "geoID",
    "materials",
    "materialNames",
    "mat_id",
    "m",
    "mesh",
    "subMeshes",
    "Math",
    "min",
    "data_len",
    "url",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "ms_per_frame",
    "num_instances",
    "num_all_display_instances",
    "num_potential_childs",
    "resourceID",
    "cmd_asset",
    "registerPotentialChild",
    "num_potential_childs_multi_instanced",
    "num_potential_sounds",
    "numFrames",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "label",
    "numCommands",
    "hasDepthChanges",
    "commandString",
    "objectID",
    "target_depth",
    "number_of_obj",
    "commandType",
    "remove_depths",
    "readShort",
    "addConstructCommand",
    "instanceName",
    "getPotentialChild",
    "undefined",
    "props",
    "mask_id_nums",
    "mask_ids",
    "mi_cnt",
    "matrix_2d",
    "colortransform",
    "blendmode",
    "visibilty",
    "thisMatrix",
    "rawData",
    "blendmode_string",
    "maskDOs",
    "cm",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_curve_geom",
    "w_indices",
    "weights",
    "subProps",
    "x",
    "y",
    "z",
    "verts",
    "normals",
    "addSubGeometry",
    "triangle_sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateVertexNormals",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "returnedArray",
    "obj",
    "addChild",
    "pivot",
    "returnedArrayParent",
    "objC",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "k",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    "UINT32",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "lightPicker",
    "smooth",
    "mipmap",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "addEffectMethod",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "getDefaultTexture",
    "curve_mat",
    "preserveAlpha",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "thisAnimator",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "sub_geom",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/data/BlendMode",
    "awayjs-core/lib/data/CurveSubGeometry",
    "awayjs-core/lib/data/Geometry",
    "awayjs-core/lib/data/TriangleSubGeometry",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/textures/TextureBase",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/animators/nodes/AnimationNodeBase",
    "awayjs-display/lib/base/LightBase",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Billboard",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/entities/TextField",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/CurveMaterial",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-display/lib/materials/lightpickers/LightPickerBase",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/timeline/TimelineKeyFrame",
    "awayjs-player/lib/timeline/commands/AddChildAtDepthCommand",
    "awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/timeline/commands/ExecuteScriptCommand",
    "awayjs-player/lib/timeline/commands/RemoveChildrenAtDepthCommand",
    "awayjs-player/lib/timeline/commands/SetInstanceNameCommand",
    "awayjs-player/lib/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/AnimationSetBase",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "isAsset",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "g",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapData\");\r\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport SubGeometryBase\t\t\t\t\t= require(\"awayjs-core/lib/data/SubGeometryBase\");\r\nimport CurveSubGeometry\t\t\t\t\t= require(\"awayjs-core/lib/data/CurveSubGeometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\r\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\r\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\r\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\r\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\r\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\r\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\r\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\r\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport AnimationNodeBase\t\t\t\t= require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\r\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\r\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport TextField\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/TextField\");\r\nimport Billboard\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\r\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\r\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\r\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\r\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\r\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\r\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\r\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\r\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\r\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\r\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\r\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\r\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\r\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\r\n\r\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\r\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\n\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\r\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\r\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\r\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\r\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\r\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\r\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\r\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\r\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\r\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\r\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\r\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\r\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\r\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\r\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\r\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\r\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\r\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\r\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\r\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\r\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\r\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\r\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\r\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\r\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\r\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\r\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\r\n\r\nimport CurveMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/CurveMaterial\")\r\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\r\n\r\nimport TimelineSceneGraphFactory \t= require(\"awayjs-player/lib/factories/TimelineSceneGraphFactory\");\r\nimport AS2SceneGraphFactory \t\t= require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\r\nimport MovieClip \t\t\t\t\t= require(\"awayjs-player/lib/display/MovieClip\");\r\nimport TimelineKeyFrame \t\t\t= require(\"awayjs-player/lib/timeline/TimelineKeyFrame\");\r\nimport AddChildCommand \t\t\t\t= require(\"awayjs-player/lib/timeline/commands/AddChildCommand\");\r\nimport AddChildAtDepthCommand\t\t= require(\"awayjs-player/lib/timeline/commands/AddChildAtDepthCommand\");\r\nimport ApplyAS2DepthsCommand\t\t= require(\"awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand\");\r\nimport ExecuteScriptCommand \t\t= require(\"awayjs-player/lib/timeline/commands/ExecuteScriptCommand\");\r\nimport RemoveChildCommand \t\t\t= require(\"awayjs-player/lib/timeline/commands/RemoveChildCommand\");\r\nimport RemoveChildrenAtDepthCommand\t= require(\"awayjs-player/lib/timeline/commands/RemoveChildrenAtDepthCommand\");\r\nimport SetInstanceNameCommand \t\t= require(\"awayjs-player/lib/timeline/commands/SetInstanceNameCommand\");\r\nimport UpdatePropertyCommand \t\t= require(\"awayjs-player/lib/timeline/commands/UpdatePropertyCommand\");\r\n\r\nimport Font\t\t\t\t\t\t\t= require(\"awayjs-display/lib/text/Font\");\r\nimport TesselatedFontTable\t\t\t= require(\"awayjs-display/lib/text/TesselatedFontTable\");\r\nimport TextFormat\t\t\t= require(\"awayjs-display/lib/text/TextFormat\");\r\n/**\r\n * AWDParser provides a parser for the AWD data type.\r\n */\r\nclass AWDParser extends ParserBase\r\n{\r\n\t//set to \"true\" to have some console.logs in the Console\r\n\tprivate _debug:boolean = true;\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean = false;\r\n\tprivate _cur_block_id:number;\r\n\tprivate _blocks:Array<AWDBlock>;\r\n\tprivate _newBlockBytes:ByteArray;\r\n\tprivate _version:Array<number>;\r\n\tprivate _compression:number;\r\n\tprivate _accuracyOnBlocks:boolean;\r\n\tprivate _accuracyMatrix:boolean;\r\n\tprivate _accuracyGeo:boolean;\r\n\tprivate _accuracyProps:boolean;\r\n\tprivate _matrixNrType:number;\r\n\tprivate _geoNrType:number;\r\n\tprivate _propsNrType:number;\r\n\tprivate _streaming:boolean;\r\n\tprivate _texture_users:Object = {};\r\n\tprivate _parsed_header:boolean = false;\r\n\tprivate _body:ByteArray;\r\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\r\n\tprivate _cubeTextures:Array<any>;\r\n\tprivate _defaultBitmapMaterial:MethodMaterial;\r\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\r\n\r\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\r\n\tpublic static UNCOMPRESSED:number = 0;\r\n\tpublic static DEFLATE:number = 1;\r\n\tpublic static LZMA:number = 2;\r\n\tpublic static INT8:number = 1;\r\n\tpublic static INT16:number = 2;\r\n\tpublic static INT32:number = 3;\r\n\tpublic static UINT8:number = 4;\r\n\tpublic static UINT16:number = 5;\r\n\tpublic static UINT32:number = 6;\r\n\tpublic static FLOAT32:number = 7;\r\n\tpublic static FLOAT64:number = 8;\r\n\tpublic static BOOL:number = 21;\r\n\tpublic static COLOR:number = 22;\r\n\tpublic static BADDR:number = 23;\r\n\tpublic static AWDSTRING:number = 31;\r\n\tpublic static AWDBYTEARRAY:number = 32;\r\n\tpublic static VECTOR2x1:number = 41;\r\n\tpublic static VECTOR3x1:number = 42;\r\n\tpublic static VECTOR4x1:number = 43;\r\n\tpublic static MTX3x2:number = 44;\r\n\tpublic static MTX3x3:number = 45;\r\n\tpublic static MTX4x3:number = 46;\r\n\tpublic static MTX4x4:number = 47;\r\n\r\n\tprivate blendModeDic:Array<string>;\r\n\tprivate _depthSizeDic:Array<number>;\r\n\tprivate _allFontTables:Array<TesselatedFontTable>;\r\n\r\n\t/**\r\n\t * Creates a new AWDParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._blocks = new Array<AWDBlock>();\r\n\t\tthis._blocks[0] = new AWDBlock();\r\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\r\n\r\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.ADD);\r\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\r\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\r\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\r\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\r\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\r\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\r\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\r\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\r\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\r\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\r\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\r\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\r\n\r\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\r\n\t\tthis._depthSizeDic.push(256);\r\n\t\tthis._depthSizeDic.push(512);\r\n\t\tthis._depthSizeDic.push(2048);\r\n\t\tthis._depthSizeDic.push(1024);\r\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"awd\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// this will be called when Dependency has finished loading.\r\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\r\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\r\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\r\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\r\n\t\t\tvar asset:TextureBase;\r\n\t\t\tvar thisBitmapTexture:Texture2DBase;\r\n\t\t\tvar block:AWDBlock;\r\n\r\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\r\n\t\t\t{\r\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\r\n\t\t\t\tif (asset) {\r\n\t\t\t\t\tvar mat:MethodMaterial;\r\n\t\t\t\t\tvar users:Array<string>;\r\n\r\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\r\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\r\n\t\t\t{\r\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\r\n\r\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\r\n\r\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\r\n\t\t\t\tthis._texture_users[ressourceID].push(1);\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\r\n\t\t\t\t}\r\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\r\n\r\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\r\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\r\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\r\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\r\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\r\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\r\n\r\n\t\t\t\t\tasset = <TextureBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\r\n\t\t\t\t\tblock = this._blocks[ressourceID];\r\n\t\t\t\t\tblock.data = asset; // Store finished asset\r\n\r\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t\t\t\tblock.name = asset.name;\r\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\r\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\r\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\r\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve a dependency name\r\n\t *\r\n\t * @param resourceDependency The dependency to be resolved.\r\n\t */\r\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\r\n\t{\r\n\t\tvar oldName:string = asset.name;\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\r\n\t\t\t// Reset name of texture to the one defined in the AWD file,\r\n\t\t\t// as opposed to whatever the image parser came up with.\r\n\t\t\tasset.resetAssetPath(block.name, null, true);\r\n\t\t}\r\n\r\n\t\tvar newName:string = asset.name;\r\n\r\n\t\tasset.name = oldName;\r\n\r\n\t\treturn newName;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\tif (!this._parsed_header) {\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Parse header and decompress body if needed\r\n\t\t\tthis.parseHeader();\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\r\n\t\t\t\t\tthis._body = this._byteData;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// Compressed AWD Formats not yet supported\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t case AWDParser.DEFLATE:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress();\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t case AWDParser.LZMA:\r\n\r\n\t\t\t\t this._body = new ByteArray();\r\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\r\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\r\n\r\n\t\t\t\t break;\r\n\t\t\t\t //*/\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._parsed_header = true;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t}\r\n\r\n\t\tif (this._body) {\r\n\r\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\r\n\t\t\t{\r\n\t\t\t\tthis.parseNextBlock();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// Return complete status\r\n\t\t\tif (this._body.getBytesAvailable() == 0) {\r\n\t\t\t\tthis.dispose();\r\n\t\t\t\treturn  ParserBase.PARSING_DONE;\r\n\t\t\t} else {\r\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\tswitch (this._compression) {\r\n\r\n\t\t\t\tcase AWDParser.DEFLATE:\r\n\t\t\t\tcase AWDParser.LZMA:\r\n\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t\t// Error - most likely _body not set because we do not support compression.\r\n\t\t\treturn  ParserBase.PARSING_DONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate dispose():void\r\n\t{\r\n\r\n\t\tfor (var c in this._blocks) {\r\n\r\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\r\n\t\t\tb.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseNextBlock():void\r\n\t{\r\n\t\tvar block:AWDBlock;\r\n\t\tvar assetData:IAsset;\r\n\t\tvar isParsed:boolean = false;\r\n\t\tvar ns:number;\r\n\t\tvar type:number;\r\n\t\tvar flags:number;\r\n\t\tvar len:number;\r\n\r\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\r\n\r\n\t\tns = this._body.readUnsignedByte();\r\n\t\ttype = this._body.readUnsignedByte();\r\n\t\tflags = this._body.readUnsignedByte();\r\n\t\tlen = this._body.readUnsignedInt();\r\n\r\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\r\n\r\n\t\tif (this._accuracyOnBlocks) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyGeo) {\r\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyMatrix) {\r\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\t\tif (this._accuracyProps) {\r\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar blockEndAll:number = this._body.position + len;\r\n\r\n\t\tif (len > this._body.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\r\n\t\t\tthis._body.position += this._body.getBytesAvailable();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._newBlockBytes = new ByteArray();\r\n\r\n\r\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// Compressed AWD Formats not yet supported\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\r\n\t\t\t/*\r\n\t\t\t if (blockCompressionLZMA)\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\r\n\t\t\t }\r\n\t\t\t else\r\n\t\t\t {\r\n\t\t\t this._newBlockBytes.uncompress();\r\n\t\t\t }\r\n\t\t\t */\r\n\r\n\t\t}\r\n\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t//----------------------------------------------------------------------------\r\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\r\n\t\t//----------------------------------------------------------------------------\r\n\r\n\t\tthis._newBlockBytes.position = 0;\r\n\t\tblock = new AWDBlock();\r\n\t\tblock.len = this._newBlockBytes.position + len;\r\n\t\tblock.id = this._cur_block_id;\r\n\r\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\r\n\r\n\t\tif (blockCompression) {\r\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\r\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\r\n\t\t\t//block.len       = blockEndBlock;\r\n\t\t}\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\tthis._blocks[this._cur_block_id] = block;\r\n\r\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\r\n\t\t\t// probably should contain some info about the type of animation\r\n\t\t\tvar factory = new AS2SceneGraphFactory();\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tthis.parseMeshLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 44:\r\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 133:\r\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 134:\r\n\t\t\t\t\tthis.paresTextField(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 135:\r\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 136:\r\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 41:\r\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t//  case 43:\r\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\r\n\t\t\t\t//      isParsed = true;\r\n\t\t\t\t//      break;\r\n\r\n\t\t\t\tcase 51:\r\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 91:\r\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 92:\r\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 111:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 112:\r\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 113:\r\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 122:\r\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 253:\r\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\r\n\t\t\t\t\tisParsed = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t//*/\r\n\t\t}\r\n\t\t//*\r\n\t\tif (isParsed == false) {\r\n\t\t\tswitch (type) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 82:\r\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 101:\r\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 102:\r\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:\r\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 121:\r\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\r\n\t\t\t\t//break;\r\n\t\t\t\tcase 254:\r\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 255:\r\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (this._debug) {\r\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//*/\r\n\r\n\t\tvar msgCnt:number = 0;\r\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this._debug) {\r\n\t\t\t\tconsole.log(\"\\n\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this._debug) {\r\n\r\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\r\n\r\n\t\t\t\tif (block.errorMessages) {\r\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\r\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\r\n\t\t\t\t\t\tmsgCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._body.position = blockEndAll;\r\n\t\tthis._newBlockBytes = null;\r\n\r\n\t}\r\n\r\n\r\n\t//--Parser Blocks---------------------------------------------------------------------------\r\n\r\n\r\n\tprivate parseTesselatedFont(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"Font name = \"+this._blocks[blockID].name);\r\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"Font font_style_cnt = \"+font_style_cnt);\r\n\t\tvar new_font:Font=new Font();\r\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\r\n\t\t\tvar font_style_name:string = this.parseVarStr();\r\n\t\t\t//console.log(\"Font font_style_name = \"+font_style_name);\r\n\t\t\tvar new_font_style:TesselatedFontTable=new_font.get_font_table(font_style_name);\r\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\r\n\t\t\t//console.log(\"Font new_font_style.font_em_size = \"+new_font_style.get_font_em_size);\r\n\t\t\tvar font_style_char_cnt:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"Font font_style_char_cnt = \"+font_style_char_cnt);\r\n\t\t\tfor (var i:number = 0; i < font_style_char_cnt; ++i) {\r\n\r\n\t\t\t\tvar font_style_char:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"Font font_style_char = \"+font_style_char);\r\n\t\t\t\t// todo: this is basically a simplified version of the subgeom-parsing done in parseTriangleGeometry. Make a parseSubGeom() instead (?)\r\n\t\t\t\tvar sm_len:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar sm_end:number = this._newBlockBytes.position + sm_len;\r\n\t\t\t\t//console.log(\"Font sm_len = \"+sm_len);\r\n\r\n\t\t\t\t//this.parseProperties(null); // no properties for font-table subgeos\r\n\t\t\t\t// Loop through data streams\r\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\t\tvar idx:number = 0;\r\n\t\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t\t// Type, field type, length\r\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\t\tif (str_type == 2) {//face indicies positions\r\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//this.parseProperties(null);// no attributes for font-table subgeos\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tnew_font_style.set_subgeo_for_char(font_style_char.toString(), curve_sub_geom);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a font-table\");\r\n\r\n\t\t}\r\n\t\t//console.log(\"Parsed a font\");\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\r\n\t\tthis._blocks[blockID].data = new_font;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate parseTextFormat(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"this._blocks[blockID].name  '\" + this._blocks[blockID].name );\r\n\t\tvar font_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"font_id  '\" + font_id);\r\n\t\tvar font_style_name:string = this.parseVarStr();\r\n\t\t//console.log(\"font_style_name  '\" + font_style_name);\r\n\t\tvar returnArrayFont:Array<any> = this.getAssetByID(font_id, [Font.assetType]);\r\n\t\tvar font:Font;\r\n\t\tif (returnArrayFont[0]) {\r\n\t\t\tfont = <Font> returnArrayFont[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Font for this TextFormat. A empty Font is created!\");\r\n\t\t\tfont = new Font();\r\n\t\t}\r\n\t\tvar newTextFormat:TextFormat = new TextFormat();\r\n\t\tnewTextFormat.font_name = font.name;\r\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\r\n\t\tif(font_table!=null){\r\n\t\t\tnewTextFormat.font_style = font_style_name;\r\n\t\t\tnewTextFormat.font_table = font_table;\r\n\t\t}\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t//console.log(\"mat  '\" + data_id);\r\n\t\tvar mat:BasicMaterial;\r\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [MaterialBase.assetType]);\r\n\r\n\t\tif (returnedArrayMaterial[0]) {\r\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this TextFormat. Default Material will be used!\");\r\n\t\t\tmat = new BasicMaterial();\r\n\t\t}\r\n\t\tmat.bothSides=true;\r\n\r\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\r\n\t\t//console.log(\"num_uv_values  '\" + num_uv_values);\r\n\t\tvar uv_values:Array<number>=[];\r\n\t\tfor(var uvcnt:number=0; uvcnt<num_uv_values; uvcnt++){\r\n\t\t\tvar uv_value:number=this._newBlockBytes.readFloat();\r\n\t\t\tuv_values.push(uv_value);\r\n\t\t\t//console.log(\"uv_value  '\" + uv_value);\r\n\t\t}\r\n\t\tnewTextFormat.uv_values=uv_values;\r\n\t\tvar format_props:AWDProperties = this.parseProperties({1:AWDParser.UINT16, 2:AWDParser.UINT16, 3:AWDParser.UINT8,4:AWDParser.UINT8,5:AWDParser.UINT8});\r\n\r\n\t\tnewTextFormat.size = format_props.get(1,12);\r\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\r\n\t\t//newTextFormat.rotated = format_props.get(3,false);\r\n\t\tnewTextFormat.kerning = format_props.get(4,true);\r\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\r\n\t\tnewTextFormat.material = mat;\r\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\r\n\t\t//newTextFormat.extra =\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\r\n\t\tthis._blocks[blockID].data = newTextFormat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate paresTextField(blockID:number):void {\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tthis._blocks[blockID].name = name;\r\n\t\t//console.log(\"name  '\" + name);\r\n\t\tvar newTextField:TextField = new TextField();\r\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar complete_text:string = \"\";\r\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\r\n\t\tvar text_format:TextFormat;\r\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\r\n\r\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\r\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\r\n\r\n\t\t\t\tvar format_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"format_id  '\" + format_id);\r\n\t\t\t\tvar textFormatArray:Array<any> = this.getAssetByID(format_id, [TextFormat.assetType]);\r\n\t\t\t\tif (textFormatArray[0]) {\r\n\t\t\t\t\ttext_format = <TextFormat> textFormatArray[1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\r\n\t\t\t\t\ttext_format = new TextFormat();\r\n\t\t\t\t}\r\n\t\t\t\t//console.log(\"text_format  '\" + text_format.name);\r\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\r\n\t\t\t\tif (txt_length > 0) {\r\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\r\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\r\n\t\t\t\t\tcomplete_text+=this_txt;\r\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//newTextField.closeParagraph();\r\n\t\t}\r\n\t\tnewTextField.textFormat=text_format;\r\n\t\tnewTextField.text=complete_text;\r\n\t\t//newTextField.construct_geometry();\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tnewTextField.extra = this.parseUserAttributes();\r\n\r\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\r\n\t\tthis._blocks[blockID].data = newTextField;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Block ID = 25\r\n\tprivate parseBillBoardLibraryBlock(blockID:number):void {\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mat:BasicMaterial;\r\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [MaterialBase.assetType]);\r\n\r\n\t\tif (returnedArrayMaterial[0]) {\r\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\r\n\t\t\tmat = new BasicMaterial();\r\n\t\t}\r\n\t\tmat.bothSides=true;\r\n\t\tvar billboard:Billboard = new Billboard(mat);\r\n\r\n\t\t// todo: optional matrix etc can be put in properties.\r\n\t\tthis.parseProperties(null);\r\n\r\n\t\tbillboard.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\r\n\t\tthis._blocks[blockID].data = billboard;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\r\n\t\t}\r\n\t}\r\n\t// Block ID = 24\r\n\tprivate parseMeshLibraryBlock(blockID:number):void {\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [Geometry.assetType])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [MaterialBase.assetType])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parseProperties(null);\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Library-Mesh: Name = '\" + name + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\t//var asset:Audio;todo create asset for audio\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\t\t\tconsole.log(\"Audio url = \"+url);\r\n\r\n\t\t} else {\r\n\t\t\t// todo: exporter does not export embed sounds yet\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t// todo parse sound from bytes\r\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t//this._blocks[blockID].data = asset;todo\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 4\r\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\r\n\r\n\t\tvar i:number;\r\n\t\tvar j:number;\r\n\t\tvar c:number;\r\n\t\tvar timeLineContainer = factory.createMovieClip();\r\n\t\tvar name = this.parseVarStr();\r\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\r\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar fps:number = this._newBlockBytes.readFloat();\r\n\t\t//console.log(\"fps = \"+fps);\r\n\t\t//timeLineContainer.fps=fps;\r\n\t\tvar ms_per_frame = 1000 / fps;\r\n\t\tvar num_instances:number=0;\r\n\t\tvar num_all_display_instances:number=0;\r\n\r\n\r\n\t\t// register list of potential childs\r\n\t\t// a potential child can be reused on a timeline (added / removed / added)\r\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\r\n\t\t// we parse 2 lists of potential-childs:\r\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\r\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\r\n\r\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\r\n\t\t// hence we need to be careful to register all objects in correct order.\r\n\r\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (i = 0; i < num_potential_childs; i++) {\r\n\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\ttimeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tnum_all_display_instances+=num_potential_childs;\r\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\r\n\t\tnum_potential_childs+=num_potential_childs_multi_instanced;\r\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\r\n\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tnum_instances = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tnum_all_display_instances+=num_instances;\r\n\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\r\n\t\t\t\t\ttimeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\r\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\r\n\t\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(\"Parsed \"+num_potential_childs+\" potential childs. They will be used by \"+num_all_display_instances+\" instances.\");\r\n\r\n\t\t// register list of potential sounds\r\n\t\t// a potential child can be reused on a timeline (added / removed / added)\r\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\r\n\t\tfor (i = 0; i < num_potential_sounds; i++) {\r\n\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\r\n\t\t\tif (cmd_asset != null) {\r\n\t\t\t\t//todo: register sound objects on movieclip\r\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\r\n\t\t\t\t//timeLineContainer.registerPotentialChild(cmd_asset);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//todo: this is a error that might break complete timeline, because all sound obj-id shift\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(\"Parsed \"+num_potential_sounds+\" potential sounds\");\r\n\r\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t//console.log(\"numFrames \"+numFrames);\r\n\t\t// var previousTimeLine:TimeLineFrame;\r\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\r\n\r\n\r\n\t\tvar totalDuration = 0;\r\n\t\tfor (i = 0; i < numFrames; i++) {\r\n\r\n\t\t\tvar frame = new TimelineKeyFrame();\r\n\t\t\tvar traceString = \"frame = \" + i;\r\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\r\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt()*ms_per_frame;\r\n\t\t\t//console.log(\"frameDuration \"+frameDuration);\r\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\r\n\t\t\ttotalDuration += frameDuration;\r\n\t\t\t//console.log(\"duration = \" + frameDuration);\r\n\t\t\t//traceString += \"duration = \" + frameDuration;\r\n\r\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t//console.log(\"numLabels \"+numLabels);\r\n\t\t\tfor (j = 0; j < numLabels; j++) {\r\n\t\t\t\t//var labelType = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tvar label = this.parseVarStr();\r\n\t\t\t\t// TODO: Handle labels differently\r\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\r\n\t\t\t\t//traceString += \"\\n     label = \" + label;\r\n\t\t\t\t//console.log(\"label \"+label);\r\n\t\t\t}\r\n\r\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t//console.log(\"numCommands \"+numCommands);\r\n\t\t\t//traceString += \"\\n      Commands \" + numCommands;\r\n\t\t\tvar hasDepthChanges = false;\r\n\t\t\tvar commandString = \"\";\r\n\t\t\tfor (j = 0; j < numCommands; j++) {\r\n\t\t\t\tvar objectID:number;\r\n\t\t\t\tvar target_depth:number;\r\n\t\t\t\tvar resourceID:number;\r\n\t\t\t\tvar number_of_obj:number=0;\r\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t\t\t// 1 = remove a number of objects by depth\r\n\t\t\t\t// 2 = add a object by child-id at specific depth\r\n\t\t\t\t// 3 = update a object by child-id\r\n\t\t\t\t// 4 = add / update sound - (not finished)\r\n\r\n\t\t\t\tswitch (commandType) {\r\n\r\n\t\t\t\t\tcase 1:// remove a number of objects at specific depth\r\n\t\t\t\t\t\t//console.log(\"remove_obj \");\r\n\r\n\t\t\t\t\t\tnumber_of_obj = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t//console.log(\"number_of_obj \", number_of_obj);\r\n\t\t\t\t\t\tvar remove_depths:Array<number>=new Array<number>();\r\n\t\t\t\t\t\tfor (c = 0; c < number_of_obj; c++) {\r\n\t\t\t\t\t\t\t// Remove Object Command\r\n\t\t\t\t\t\t\ttarget_depth = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\t\tremove_depths.push(target_depth);\r\n\t\t\t\t\t\t\t//commandString += \"\\n       - Remove object at depth: \" + target_depth;\r\n\t\t\t\t\t\t\t//console.log(\"\\n       - Remove object at depth: \" + target_depth);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildrenAtDepthCommand(remove_depths));\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 2:// add a of object by child-id at specific depth\r\n\t\t\t\t\tcase 3:// update a object by child-id\r\n\t\t\t\t\t\t//console.log(\"add / remove obj \");\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\t//console.log(\"objectID \", objectID);\r\n\t\t\t\t\t\tif (commandType == 2) {\r\n\t\t\t\t\t\t\thasDepthChanges=true;\r\n\t\t\t\t\t\t\ttarget_depth = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\r\n\t\t\t\t\t\t\t//console.log(\"target_depth \", target_depth);\r\n\t\t\t\t\t\t\tif (timeLineContainer.getPotentialChild(objectID)!=undefined) {\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildAtDepthCommand(objectID, target_depth));\r\n\t\t\t\t\t\t\t\t// this commands looks for a object by awd-id and puts it into the timeline\r\n\t\t\t\t\t\t\t\tif (instanceName.length) {\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new SetInstanceNameCommand(objectID, instanceName));\r\n\t\t\t\t\t\t\t\t\t//commandString += \"\\n                instanceName = \" + instanceName;\r\n\t\t\t\t\t\t\t\t\t//console.log(\"instanceName \", instanceName);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tconsole.log(\"ERROR: could not find the objectID \", objectID);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// read the command properties\r\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\r\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\r\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\r\n\t\t\t\t\t\t// 4: blendmode (uint8)\r\n\t\t\t\t\t\t// 5: visibilty (uint8)\r\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({\r\n\t\t\t\t\t\t\t1: this._matrixNrType,\r\n\t\t\t\t\t\t\t2: this._matrixNrType,\r\n\t\t\t\t\t\t\t3: this._propsNrType,\r\n\t\t\t\t\t\t\t4: AWDParser.UINT8,\r\n\t\t\t\t\t\t\t5: AWDParser.UINT8\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t// todo: fix property parsing so we can read variable size list (atm list with size = 1 is returned as single number)\r\n\t\t\t\t\t\t// for this reason, for now the mask-property is read sepperatly\r\n\t\t\t\t\t\tvar mask_id_nums:number = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tvar mask_ids:Array<number> = new Array<number>();\r\n\t\t\t\t\t\tfor (var mi_cnt:number = 0; mi_cnt < mask_id_nums; mi_cnt++) {\r\n\t\t\t\t\t\t\tmask_ids.push(this._newBlockBytes.readShort());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (timeLineContainer.getPotentialChild(objectID)!=undefined) {\r\n\r\n\t\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\r\n\t\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\r\n\t\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\r\n\t\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\r\n\t\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\r\n\t\t\t\t\t\t\t// todo: handle filters\r\n\r\n\t\t\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\r\n\r\n\t\t\t\t\t\t\t//commandString += \"\\n                transformArray = \" + matrix_2d.length;\r\n\t\t\t\t\t\t\tif (matrix_2d.length == 6) {\r\n\t\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\r\n\t\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\r\n\t\t\t\t\t\t\t\t// todo is this correct for 2d -> 3d scale and rotation. (i doubt it)\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[0] = matrix_2d[0];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[1] = matrix_2d[1];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[4] = matrix_2d[2];\r\n\t\t\t\t\t\t\t\tthisMatrix.rawData[5] = matrix_2d[3];\r\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"_iMatrix3D\", thisMatrix));\r\n\t\t\t\t\t\t\t\t//commandString += \"\\n                transformArray = \" + matrix_2d;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\r\n\t\t\t\t\t\t\tif (colortransform.length == 20) {\r\n\t\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\r\n\t\t\t\t\t\t\t\t//commandString += \"\\n                colorMatrix = \" + colortransform;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// blendmode must be positive to be valid\r\n\t\t\t\t\t\t\tif (blendmode >= 0) {\r\n\t\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\r\n\t\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\r\n\t\t\t\t\t\t\t\t//commandString += \"\\n                BlendMode = \" + blendmode_string;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// visibilty must be positive to be valid\r\n\t\t\t\t\t\t\tif (visibilty >= 0) {\r\n\t\t\t\t\t\t\t\tif (visibilty == 0)\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"visible\", false));\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"visible\", true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\r\n\t\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\r\n\t\t\t\t\t\t\tif (mask_ids.length > 0) {\r\n\t\t\t\t\t\t\t\tif ((mask_ids.length == 1) && (mask_ids[0] == -1)) {\r\n\t\t\t\t\t\t\t\t\t// TODO: this object is used as mask\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"_iMaskID\", objectID));\r\n\t\t\t\t\t\t\t\t\t//commandString += \"\\n                obj is used as mask\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// TODO: this object is masked by one or more objects defined by ids in mask-array\r\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                obj is masked by \" + mask_ids.length + \" objects\";\r\n\t\t\t\t\t\t\t\t\tvar maskDOs:DisplayObject[] = [];\r\n\t\t\t\t\t\t\t\t\tfor (var cm:number = 0; cm < mask_ids.length; cm++) {\r\n\t\t\t\t\t\t\t\t\t\tmaskDOs[cm] = timeLineContainer.getPotentialChild(mask_ids[cm]);\r\n\t\t\t\t\t\t\t\t\t\t//commandString += \"\\n                obj is masked by \" + mask_ids[cm];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(objectID, \"_iMasks\", maskDOs));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// todo: handle filters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tconsole.log(\"ERROR: could not find the objectID \", objectID);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 4:\r\n\r\n\t\t\t\t\t\t// Add Sound Command\r\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\r\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\t// TODO: implement sound in timeline\r\n\t\t\t\t\t\t//commandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t//commandString += \"\\n       - Unknown Command Type = \" + commandType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (hasDepthChanges) {\r\n\t\t\t\t// only want to do this once after all children's depth values are updated\r\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\r\n\t\t\t\thasDepthChanges = false;\r\n\t\t\t}\r\n\r\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tif (length_code > 0) {\r\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\r\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\r\n\t\t\t\tframe.addConstructCommand(new ExecuteScriptCommand(frame_code));\r\n\t\t\t\t//traceString += \"\\nframe-code = \" + frame_code;\r\n\t\t\t}\r\n\t\t\t//traceString += commandString;\r\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\r\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\r\n\t\t\t//console.log(traceString);\r\n\t\t\ttimeLineContainer.addFrame(frame);\r\n\r\n\t\t}\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\r\n\t\tthis._blocks[blockID].data = timeLineContainer;\r\n\t\tthis.parseProperties(null);\r\n\t\tthis.parseUserAttributes();\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\r\n\t}\r\n\t//Block ID = 1\r\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\r\n\t{\r\n\r\n\t\tvar geom:Geometry = new Geometry();\r\n\r\n\t\t// Read name and sub count\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t// Read optional properties\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\tvar geoScaleU:number = props.get(1, 1);\r\n\t\tvar geoScaleV:number = props.get(2, 1);\r\n\r\n\t\t// Loop through sub meshes\r\n\t\tvar subs_parsed:number = 0;\r\n\t\twhile (subs_parsed < num_subs) {\r\n\t\t\tvar is_curve_geom:boolean=false;\r\n\t\t\tvar i:number;\r\n\t\t\tvar sm_len:number, sm_end:number;\r\n\t\t\tvar w_indices:Array<number>;\r\n\t\t\tvar weights:Array<number>;\r\n\r\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\r\n\r\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\r\n\t\t\t// Loop through data streams\r\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\r\n\t\t\t\tvar idx:number = 0;\r\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\r\n\r\n\t\t\t\t// Type, field type, length\r\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\r\n\t\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\r\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\r\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 3) {\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 4) {\r\n\r\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 6) {\r\n\t\t\t\t\tw_indices = Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (str_type == 7) {\r\n\r\n\t\t\t\t\tweights = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\r\n\t\t\t\t\tis_curve_geom=true;\r\n\t\t\t\t\tvar idx_pos:number = 0;\r\n\t\t\t\t\tvar idx_curves:number = 0;\r\n\t\t\t\t\tvar idx_uvs:number = 0;\r\n\r\n\t\t\t\t\tvar positions:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\r\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\r\n\r\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\r\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\r\n\t\t\t\t\t\tpositions[idx_pos++] =  this.readNumber(this._accuracyGeo);// type\r\n\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\r\n\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\r\n\t\t\tif(is_curve_geom){\r\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\r\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\r\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\r\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\r\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\r\n\t\t\t\tgeom.addSubGeometry(curve_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a CurveSubGeometry\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar triangle_sub_geom = new TriangleSubGeometry(true);\r\n\t\t\t\tif (weights)\r\n\t\t\t\t\ttriangle_sub_geom.jointsPerVertex = weights.length / (verts.length / 3);\r\n\t\t\t\tif (normals)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (uvs)\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveUVs = false;\r\n\t\t\t\t//triangle_sub_geom.autoDeriveNormals = false;\r\n\t\t\t\tif (true) {\r\n\t\t\t\t\ttriangle_sub_geom.autoDeriveTangents = true;\r\n\t\t\t\t}\r\n\t\t\t\ttriangle_sub_geom.updateIndices(indices);\r\n\t\t\t\ttriangle_sub_geom.updatePositions(verts);\r\n\t\t\t\ttriangle_sub_geom.updateVertexNormals(normals);\r\n\t\t\t\ttriangle_sub_geom.updateUVs(uvs);\r\n\t\t\t\ttriangle_sub_geom.updateVertexTangents(null);\r\n\t\t\t\ttriangle_sub_geom.updateJointWeights(weights);\r\n\t\t\t\ttriangle_sub_geom.updateJointIndices(w_indices);\r\n\r\n\t\t\t\tvar scaleU:number = subProps.get(1, 1);\r\n\t\t\t\tvar scaleV:number = subProps.get(2, 1);\r\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\r\n\r\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\r\n\t\t\t\t\tsetSubUVs = true;\r\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\r\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (setSubUVs)\r\n\t\t\t\t\ttriangle_sub_geom.scaleUV(scaleU, scaleV);\r\n\t\t\t\tgeom.addSubGeometry(triangle_sub_geom);\r\n\t\t\t\tif (this._debug)\r\n\t\t\t\t\tconsole.log(\"Parsed a TriangleSubGeometry\");\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\r\n\t\t\t// when creating meshes (and their material assignments.)\r\n\r\n\t\t\tsubs_parsed++;\r\n\t\t}\r\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\r\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\r\n\t\tthis._blocks[blockID].data = geom;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t//Block ID = 11\r\n\tprivate parsePrimitves(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar prefab:PrefabBase;\r\n\t\tvar primType:number;\r\n\t\tvar subs_parsed:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar bsm:Matrix3D;\r\n\r\n\t\t// Read name and sub count\r\n\t\tname = this.parseVarStr();\r\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\r\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\r\n\r\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\r\n\r\n\t\tswitch (primType) {\r\n\t\t\t// to do, not all properties are set on all primitives\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3:\r\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\r\n\t\t\t\tif (!props.get(701, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\r\n\t\t\t\tif (!props.get(702, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\r\n\t\t\t\tif (!props.get(703, true))\r\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 5:\r\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 7:\r\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tprefab = new PrefabBase();\r\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\r\n\t\t\t//geom.subGeometries;\r\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tprefab.name = name;\r\n\t\tthis._pFinalizeAsset(prefab, name);\r\n\t\tthis._blocks[blockID].data = prefab;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tif ((primType < 0) || (primType > 7)) {\r\n\t\t\t\tprimType = 0;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 22\r\n\tprivate parseContainer(blockID:number):void\r\n\t{\r\n\t\tvar name:string;\r\n\t\tvar par_id:number;\r\n\t\tvar mtx:Matrix3D;\r\n\t\tvar ctr:DisplayObjectContainer;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\r\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\r\n\t\tmtx = this.parseMatrix3D();\r\n\t\tname = this.parseVarStr();\r\n\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tctr = new DisplayObjectContainer();\r\n\t\tctr.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\r\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\r\n\t\t}\r\n\r\n\t\t// in AWD version 2.1 we read the Container properties\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t}\r\n\t\t// in other versions we do not read the Container properties\r\n\t\telse {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\r\n\t\tctr.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\r\n\t\tthis._blocks[blockID].data = ctr;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 23\r\n\tprivate parseMeshInstance(blockID:number):void\r\n\t{\r\n\t\tvar num_materials:number;\r\n\t\tvar materials_parsed:number;\r\n\t\tvar parent:DisplayObjectContainer;\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar geom:Geometry;\r\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [Geometry.assetType])\r\n\r\n\t\tif (returnedArrayGeometry[0]) {\r\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\r\n\t\t} else {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\r\n\t\t\tgeom = new Geometry();\r\n\t\t}\r\n\r\n\t\tthis._blocks[blockID].geoID = data_id;\r\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\r\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar materialNames:Array<string> = new Array<string>();\r\n\t\tmaterials_parsed = 0;\r\n\r\n\t\tvar returnedArrayMaterial:Array<any>;\r\n\r\n\t\twhile (materials_parsed < num_materials) {\r\n\t\t\tvar mat_id:number;\r\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [MaterialBase.assetType])\r\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\r\n\t\t\t}\r\n\r\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\r\n\r\n\t\t\tmaterials.push(m);\r\n\t\t\tmaterialNames.push(m.name);\r\n\r\n\t\t\tmaterials_parsed++;\r\n\t\t}\r\n\r\n\t\tvar mesh:Mesh = new Mesh(geom, null);\r\n\t\tmesh.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(mesh);\r\n\t\t\tparentName = objC.name;\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\t\t}\r\n\r\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\r\n\t\t\tmesh.material = materials[0];\r\n\t\t} else if (materials.length > 1) {\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\r\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\r\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\r\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\r\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\r\n\t\t\tmesh.castsShadows = props.get(5, true);\r\n\t\t} else {\r\n\t\t\tthis.parseProperties(null);\r\n\t\t}\r\n\r\n\t\tmesh.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\r\n\t\tthis._blocks[blockID].data = mesh;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID 31\r\n\tprivate parseSkyboxInstance(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [TextureBase.assetType], \"CubeTexture\");\r\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\r\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\r\n\r\n\t\tthis.parseProperties(null)\r\n\t\tasset.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(asset, name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\r\n\r\n\t}\r\n\r\n\t//Block ID = 41\r\n\tprivate parseLight(blockID:number):void\r\n\t{\r\n\t\tvar light:LightBase;\r\n\t\tvar newShadowMapper:ShadowMapperBase;\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\r\n\t\tvar shadowMapperType:number = props.get(9, 0);\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\r\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\r\n\r\n\t\tif (lightType == 1) {\r\n\t\t\tlight = new PointLight();\r\n\r\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\r\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 4) {\r\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.transform.matrix3D = mtx;\r\n\r\n\t\t}\r\n\r\n\t\tif (lightType == 2) {\r\n\r\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\r\n\r\n\t\t\tif (shadowMapperType > 0) {\r\n\t\t\t\tif (shadowMapperType == 1) {\r\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if (shadowMapperType == 2)\r\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\r\n\t\t\t\t//if (shadowMapperType == 3)\r\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tlight.color = props.get(3, 0xffffff);\r\n\t\tlight.specular = props.get(4, 1.0);\r\n\t\tlight.diffuse = props.get(5, 1.0);\r\n\t\tlight.ambientColor = props.get(7, 0xffffff);\r\n\t\tlight.ambient = props.get(8, 0.0);\r\n\r\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\r\n\t\tif (newShadowMapper) {\r\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\r\n\t\t\t\tif (props.get(10, 1) != 1) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (props.get(10, 2) != 2) {\r\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlight.shadowMapper = newShadowMapper;\r\n\t\t\tlight.castsShadows = true;\r\n\t\t}\r\n\r\n\t\tif (par_id != 0) {\r\n\r\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\r\n\r\n\t\t\tif (returnedArrayParent[0]) {\r\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\r\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\r\n\t\t}\r\n\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\r\n\r\n\t\tthis._blocks[blockID].data = light;\r\n\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\r\n\r\n\t}\r\n\r\n\t//Block ID = 43\r\n\tprivate parseCamera(blockID:number):void\r\n\t{\r\n\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar parentName:string = \"Root (TopLevel)\";\r\n\t\tvar projection:ProjectionBase;\r\n\r\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\r\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\r\n\r\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\r\n\r\n\t\tswitch (projectiontype) {\r\n\t\t\tcase 5001:\r\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5002:\r\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5003:\r\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar camera:Camera = new Camera(projection);\r\n\t\tcamera.transform.matrix3D = mtx;\r\n\r\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\r\n\r\n\t\tif (returnedArrayParent[0]) {\r\n\r\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\r\n\t\t\tobjC.addChild(camera);\r\n\r\n\t\t\tparentName = objC.name;\r\n\r\n\t\t} else if (par_id > 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\r\n\t\t} else {\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\r\n\t\t}\r\n\r\n\t\tcamera.name = name;\r\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\tcamera.extra = this.parseUserAttributes();\r\n\r\n\t\tthis._pFinalizeAsset(camera, name);\r\n\r\n\t\tthis._blocks[blockID].data = camera\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 51\r\n\tprivate parseLightPicker(blockID:number):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\r\n\t\tvar k:number = 0;\r\n\t\tvar lightID:number = 0;\r\n\r\n\t\tvar returnedArrayLight:Array<any>;\r\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\r\n\r\n\t\tfor (k = 0; k < numLights; k++) {\r\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\r\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [LightBase.assetType])\r\n\r\n\t\t\tif (returnedArrayLight[0]) {\r\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\r\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lightsArray.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\treturn; //return without any more parsing for this block\r\n\t\t}\r\n\r\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\r\n\t\tlightPick.name = name;\r\n\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\r\n\r\n\t\tthis._blocks[blockID].data = lightPick\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 81\r\n\tprivate parseMaterial(blockID:number):void\r\n\t{\r\n\t\t// TODO: not used\r\n\t\t////blockLength = block.len;\r\n\t\tvar name:string;\r\n\t\tvar type:number;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar attributes:Object;\r\n\t\tvar finalize:boolean;\r\n\t\tvar num_methods:number;\r\n\t\tvar methods_parsed:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tname = this.parseVarStr();\r\n\t\ttype = this._newBlockBytes.readUnsignedByte();\r\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\t// Read material numerical properties\r\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\r\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\r\n\r\n\t\tmethods_parsed = 0;\r\n\t\twhile (methods_parsed < num_methods) {\r\n\t\t\tvar method_type:number;\r\n\r\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tmethods_parsed += 1;\r\n\t\t}\r\n\t\tvar debugString:string = \"\";\r\n\t\tattributes = this.parseUserAttributes();\r\n\t\tif (type === 1) { // Color material\r\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\tvar color:number;\r\n\t\t\tcolor = props.get(1, 0xffffff);\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t} else {\r\n\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t}\r\n\t\t} else if (type === 2) {\r\n\t\t\tvar tex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\r\n\r\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\r\n\r\n\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t} else {\r\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmat.extra = attributes;\r\n\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\tmat.repeat = props.get(13, false);\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\t\tthis._blocks[blockID].data = mat;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// Block ID = 81 AWD2.1\r\n\tprivate parseMaterial_v1(blockID:number):void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\t\tvar normalTexture:Texture2DBase;\r\n\t\tvar specTexture:Texture2DBase;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\r\n\t\tvar spezialType:number = props.get(4, 0);\r\n\t\tvar debugString:string = \"Parsed Material \";\r\n\r\n\t\tif (spezialType >= 2) {//this is no supported material\r\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (type <= 2) {// Color material\r\n\t\t\tif (this.materialMode == 1)\r\n\t\t\t\tspezialType = 0;\r\n\t\t\telse if (this.materialMode == 2)\r\n\t\t\t\tspezialType = 1;\r\n\r\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\r\n\r\n\t\t\t\tif (type == 1) {// Color material\r\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\r\n\r\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color);\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\r\n\r\n\t\t\t\t\t} else { //\tSinglePassMaterial\r\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (type == 2) {// texture material\r\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\r\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\r\n\r\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\r\n\r\n\t\t\t\t\tmat = new MethodMaterial(texture);\r\n\r\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\r\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t} else {//\tSinglePassMaterial\r\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\r\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\r\n\r\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0])\r\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\r\n\t\t\t\tif (diffuseTexture) {\r\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\r\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tnormalTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\t}\r\n\t\t\t\tif (returnedArray[0]) {\r\n\t\t\t\t\tspecTexture = returnedArray[1];\r\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [LightPickerBase.assetType])\r\n\r\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\r\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmat.smooth = props.get(5, true);\r\n\t\t\t\tmat.mipmap = props.get(6, true);\r\n\t\t\t\tmat.bothSides = props.get(7, false);\r\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\r\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\r\n\t\t\t\tmat.repeat = props.get(13, false);\r\n\r\n\t\t\t\tif (normalTexture)\r\n\t\t\t\t\tmat.normalMap = normalTexture;\r\n\r\n\t\t\t\tif (specTexture)\r\n\t\t\t\t\tmat.specularMap = specTexture;\r\n\r\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\r\n\t\t\t\tmat.ambient = props.get(15, 1.0);\r\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\r\n\t\t\t\tmat.specular = props.get(18, 1.0);\r\n\t\t\t\tmat.gloss = props.get(19, 50);\r\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\r\n\r\n\t\t\t\tvar methods_parsed:number = 0;\r\n\t\t\t\tvar targetID:number;\r\n\r\n\t\t\t\twhile (methods_parsed < num_methods) {\r\n\t\t\t\t\tvar method_type:number;\r\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\t\t\t\tprops = this.parseProperties({\r\n\t\t\t\t\t\t1: AWDParser.BADDR,\r\n\t\t\t\t\t\t2: AWDParser.BADDR,\r\n\t\t\t\t\t\t3: AWDParser.BADDR,\r\n\t\t\t\t\t\t101: this._propsNrType,\r\n\t\t\t\t\t\t102: this._propsNrType,\r\n\t\t\t\t\t\t103: this._propsNrType,\r\n\t\t\t\t\t\t201: AWDParser.UINT32,\r\n\t\t\t\t\t\t202: AWDParser.UINT32,\r\n\t\t\t\t\t\t301: AWDParser.UINT16,\r\n\t\t\t\t\t\t302: AWDParser.UINT16,\r\n\t\t\t\t\t\t401: AWDParser.UINT8,\r\n\t\t\t\t\t\t402: AWDParser.UINT8,\r\n\t\t\t\t\t\t601: AWDParser.COLOR,\r\n\t\t\t\t\t\t602: AWDParser.COLOR,\r\n\t\t\t\t\t\t701: AWDParser.BOOL,\r\n\t\t\t\t\t\t702: AWDParser.BOOL,\r\n\t\t\t\t\t\t801: AWDParser.MTX4x4\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tswitch (method_type) {\r\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [EffectMethodBase.assetType]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\r\n\r\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\r\n\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\r\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\r\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\r\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\r\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\r\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\r\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\r\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\r\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\r\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\r\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\r\n\t\t\t\t\t\t\tif (!mat.normalMap)\r\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\r\n\r\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\r\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\r\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.parseUserAttributes();\r\n\t\t\t\t\tmethods_parsed += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// todo: we should not need this anymore (if using texture-atlas)\r\n\t\telse if ((type>=3)&&(type<=7)){\r\n\t\t\t// if this is a curve material, we create it, finalize it, assign it to block-cache and return and return.\r\n\t\t\tvar color:number = props.get(1, 0xcccccc);\r\n\t\t\tdebugString+=color;\r\n\r\n\t\t\tvar diffuseTexture:Texture2DBase;\r\n\t\t\tvar diffuseTex_addr:number = props.get(2, 0);\r\n\r\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [TextureBase.assetType]);\r\n\r\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\r\n\t\t\t\tdiffuseTexture = DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t}\r\n\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\tdiffuseTexture = returnedArray[1];\r\n\t\t\tvar curve_mat:CurveMaterial = new CurveMaterial(diffuseTexture);\r\n\t\t\t//debugString+= \" alpha = \"+props.get(10, 1.0)+\" \";\r\n\t\t\tdebugString+= \" texture = \"+diffuseTex_addr+\" \";\r\n\t\t\tcurve_mat.bothSides = true;\r\n\t\t\tcurve_mat.preserveAlpha = true;\r\n\t\t\tcurve_mat.alphaBlending = true;\r\n\t\t\tcurve_mat.extra = this.parseUserAttributes();\r\n\t\t\tthis._pFinalizeAsset(<IAsset> curve_mat, name);\r\n\t\t\tthis._blocks[blockID].data = curve_mat;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(debugString);\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\t\tmat.extra = this.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\r\n\r\n\t\tthis._blocks[blockID].data = mat;\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(debugString);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 82\r\n\tprivate parseTexture(blockID:number):void\r\n\t{\r\n\r\n\t\tvar asset:Texture2DBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar data_len:number;\r\n\r\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\r\n\t\t// External\r\n\t\tif (type == 0) {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar url:string;\r\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\r\n\r\n\t\t} else {\r\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\tvar data:ByteArray;\r\n\t\t\tdata = new ByteArray();\r\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t//\r\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\r\n\t\t\t//\r\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\r\n\t\t\t// This gives the browser time to initialise image width / height.\r\n\r\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//Block ID = 83\r\n\tprivate parseCubeTexture(blockID:number):void\r\n\t{\r\n\t\t//blockLength = block.len;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:CubeTextureBase;\r\n\t\tvar i:number;\r\n\r\n\t\tthis._cubeTextures = new Array<any>();\r\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\r\n\r\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\r\n\t\t\tthis._cubeTextures.push(null);\r\n\r\n\t\t\t// External\r\n\t\t\tif (type == 0) {\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar url:string;\r\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tvar data:ByteArray;\r\n\t\t\t\tdata = new ByteArray();\r\n\r\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\r\n\r\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ignore for now\r\n\t\tthis.parseProperties(null);\r\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\r\n\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\r\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 91\r\n\tprivate parseSharedMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar asset:EffectMethodBase;\r\n\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\t\tasset = this.parseSharedMethodList(blockID);\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._blocks[blockID].data = asset;\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\r\n\t\t}\r\n\t}\r\n\r\n\t//Block ID = 92\r\n\tprivate parseShadowMethodBlock(blockID:number):void\r\n\t{\r\n\t\tvar type:number;\r\n\t\tvar data_len:number;\r\n\t\tvar asset:ShadowMethodBase;\r\n\t\tvar shadowLightID:number;\r\n\t\tthis._blocks[blockID].name = this.parseVarStr();\r\n\r\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [LightBase.assetType]);\r\n\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\r\n\r\n\t\tif (!asset)\r\n\t\t\treturn;\r\n\r\n\t\tthis.parseUserAttributes(); // Ignore for now\r\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\r\n\t\tthis._blocks[blockID].data = asset;\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//Block ID = 253\r\n\tprivate parseCommand(blockID:number):void\r\n\t{\r\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\r\n\t\tvar name:string = this.parseVarStr();\r\n\r\n\t\tvar parentObject:DisplayObjectContainer;\r\n\t\tvar targetObject:DisplayObjectContainer;\r\n\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType]);\r\n\r\n\t\tif (returnedArray[0]) {\r\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\r\n\t\t}\r\n\r\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\r\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tswitch (typeCommand) {\r\n\t\t\tcase 1:\r\n\r\n\t\t\t\tvar targetID:number = props.get(1, 0);\r\n\t\t\t\t//var returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [LightBase.assetType, TextureProjector.assetType]); //for no only light is requested!!!!\r\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [LightBase.assetType]); //for no only light is requested!!!!\r\n\r\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = returnedArrayTarget[1];\r\n\r\n\t\t\t\tif (parentObject) {\r\n\t\t\t\t\tparentObject.addChild(targetObject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (targetObject) {\r\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\r\n\r\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\r\n\t\t\ttargetObject.extra = this.parseUserAttributes();\r\n\r\n\t\t}\r\n\t\tthis._blocks[blockID].data = targetObject\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//blockID 255\r\n\tprivate parseMetaData(blockID:number):void\r\n\t{\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\r\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\r\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\r\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\r\n\t\t}\r\n\t}\r\n\r\n\t//blockID 254\r\n\tprivate parseNameSpace(blockID:number):void\r\n\t{\r\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\r\n\t\tvar nameSpaceString:string = this.parseVarStr();\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\r\n\t}\r\n\r\n\t//--Parser UTILS---------------------------------------------------------------------------\r\n\r\n\t// this functions reads and creates a ShadowMethodMethod\r\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar shadowMethod:ShadowMethodBase;\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\r\n\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>\r\n\t\tswitch (methodType) {\r\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\r\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\r\n\t\t\t//\t\t\t\t\t}\r\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 1002: //ShadowNearMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\r\n\t\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\r\n\t\t\t\t\treturn shadowMethod;\r\n\t\t\t\t}\r\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1101: //ShadowFilteredMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1102: //ShadowDitheredMethod\r\n\r\n\r\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1103: //ShadowSoftMethod\r\n\r\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1104: //ShadowHardMethod\r\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\r\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn shadowMethod;\r\n\t}\r\n\r\n\t//Block ID 101\r\n\tprivate parseSkeleton(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar skeleton:Skeleton = new Skeleton();\r\n\t\tthis.parseProperties(null); // Discard properties for now\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint:SkeletonJoint;\r\n\t\t\tvar ibp:Matrix3D;\r\n\t\t\t// Ignore joint id\r\n\t\t\tthis._newBlockBytes.readUnsignedShort();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\r\n\t\t\tjoint.name = this.parseVarStr();\r\n\r\n\t\t\tibp = this.parseMatrix3D();\r\n\t\t\tjoint.inverseBindPose = ibp.rawData;\r\n\t\t\t// Ignore joint props/attributes for now\r\n\t\t\tthis.parseProperties(null);\r\n\t\t\tthis.parseUserAttributes();\r\n\t\t\tskeleton.joints.push(joint);\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\r\n\t\t// Discard attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(skeleton, name);\r\n\t\tthis._blocks[blockID].data = skeleton;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//Block ID = 102\r\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar pose:SkeletonPose = new SkeletonPose();\r\n\r\n\t\tvar joints_parsed:number /*uint*/ = 0;\r\n\t\twhile (joints_parsed < num_joints) {\r\n\t\t\tvar joint_pose:JointPose;\r\n\t\t\tvar has_transform:number /*uint*/;\r\n\t\t\tjoint_pose = new JointPose();\r\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\r\n\t\t\tif (has_transform == 1) {\r\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\r\n\r\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\r\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\r\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\r\n\r\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\r\n\t\t\t}\r\n\t\t\tjoints_parsed++;\r\n\t\t}\r\n\t\t// Skip attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(pose, name);\r\n\t\tthis._blocks[blockID].data = pose;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\r\n\t}\r\n\r\n\t//blockID 103\r\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar frame_dur:number;\r\n\t\tvar pose_addr:number /*uint*/;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tthis.parseProperties(null); // Ignore properties for now\r\n\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar returnedArray:Array<any>;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [SkeletonPose.assetType]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\r\n\t\t\telse\r\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif (clip.frames.length == 0) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Ignore attributes for now\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//Block ID = 111 /  Block ID = 112\r\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\r\n\t{\r\n\t\tvar num_frames:number /*uint*/ = 1;\r\n\t\tvar num_submeshes:number /*uint*/;\r\n\t\tvar frames_parsed:number /*uint*/;\r\n\t\tvar subMeshParsed:number /*uint*/;\r\n\t\tvar frame_dur:number;\r\n\t\tvar x:number;\r\n\t\tvar y:number;\r\n\t\tvar z:number;\r\n\t\tvar str_len:number;\r\n\t\tvar str_end:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar idx:number /*int*/ = 0;\r\n\t\tvar clip:VertexClipNode = new VertexClipNode();\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\t\tvar verts:Array<number>;\r\n\t\tvar num_Streams:number /*int*/ = 0;\r\n\t\tvar streamsParsed:number /*int*/ = 0;\r\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\r\n\t\tvar props:AWDProperties;\r\n\t\tvar thisGeo:Geometry;\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [Geometry.assetType]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\r\n\t\tif (!poseOnly)\r\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\r\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\r\n\t\tstreamsParsed = 0;\r\n\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\r\n\t\t\tstreamsParsed++;\r\n\t\t}\r\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\r\n\r\n\t\tclip.looping = props.get(1, true);\r\n\t\tclip.stitchFinalFrame = props.get(2, false);\r\n\r\n\t\tframes_parsed = 0;\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tsubMeshParsed = 0;\r\n\t\t\twhile (subMeshParsed < num_submeshes) {\r\n\t\t\t\tstreamsParsed = 0;\r\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\r\n\t\t\t\twhile (streamsParsed < num_Streams) {\r\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\r\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\r\n\t\t\t\t\t\tverts = new Array<number>();\r\n\t\t\t\t\t\tidx = 0;\r\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\r\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\r\n\t\t\t\t\t\t\tverts[idx++] = x;\r\n\t\t\t\t\t\t\tverts[idx++] = y;\r\n\t\t\t\t\t\t\tverts[idx++] = z;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\r\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\r\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\r\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\r\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\r\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\r\n\t\t\t\t\t\tsubMeshParsed++;\r\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\r\n\t\t\t\t\tstreamsParsed++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, frame_dur);\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis._pFinalizeAsset(clip, name);\r\n\r\n\t\tthis._blocks[blockID].data = clip;\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\r\n\t}\r\n\r\n\t//BlockID 113\r\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar poseBlockAdress:number /*int*/\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\r\n\t\tvar frames_parsed:number /*uint*/ = 0;\r\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\r\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\r\n\t\twhile (frames_parsed < num_frames) {\r\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AnimationNodeBase.assetType]);\r\n\t\t\tif (!returnedArray[0])\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\r\n\t\t\telse {\r\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\r\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\r\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\r\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\r\n\t\t\t}\r\n\t\t\tframes_parsed++;\r\n\t\t}\r\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\tif (vertexFrames.length > 0) {\r\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\r\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\r\n\r\n\t\t} else if (skeletonFrames.length > 0) {\r\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AnimationNodeBase.assetType]);\r\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\r\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\r\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\r\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\r\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\r\n\t\t\tif (this._debug)\r\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t//BlockID 122\r\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\r\n\t{\r\n\t\tvar targetMesh:Mesh;\r\n\t\tvar animSetBlockAdress:number /*int*/\r\n\t\tvar targetAnimationSet:AnimationSetBase;\r\n\t\tvar outputString:string = \"\";\r\n\t\tvar name:string = this.parseVarStr();\r\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\r\n\r\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\r\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\r\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\r\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\r\n\r\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\r\n\t\tthis.parseUserAttributes();\r\n\t\tthis.parseUserAttributes();\r\n\r\n\t\tvar returnedArray:Array<any>;\r\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\r\n\r\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\r\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [Mesh.assetType]);\r\n\t\t\tif (returnedArray[0])\r\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\r\n\t\t}\r\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AnimationSetBase.assetType]);\r\n\t\tif (!returnedArray[0]) {\r\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\r\n\t\t\treturn\r\n\t\t}\r\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\r\n\t\tvar thisAnimator:AnimatorBase;\r\n\t\tif (type == 1) {\r\n\r\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [Skeleton.assetType]);\r\n\t\t\tif (!returnedArray[0]) {\r\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\r\n\r\n\t\t} else if (type == 2)\r\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\r\n\r\n\t\tthis._pFinalizeAsset(thisAnimator, name);\r\n\t\tthis._blocks[blockID].data = thisAnimator;\r\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\r\n\t\t\tif (type == 1)\r\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\r\n\t\t\tif (type == 2)\r\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\r\n\r\n\t\t}\r\n\t\tif (this._debug)\r\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\r\n\t}\r\n\r\n\t// this functions reads and creates a EffectMethod\r\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\r\n\t{\r\n\r\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\r\n\t\tvar effectMethodReturn:EffectMethodBase;\r\n\r\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\r\n\t\tvar targetID:number;\r\n\t\tvar returnedArray:Array<any>;\r\n\r\n\t\tswitch (methodType) {\r\n\t\t\t// Effect Methods\r\n\t\t\tcase 401: //ColorMatrix\r\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 402: //ColorTransform\r\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\r\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\r\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 403: //EnvMap\r\n\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\tconsole.log('ENV MAP', targetID);\r\n\r\n\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ TextureBase.assetType ], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\r\n\t\t\t\ttargetID = props.get(2, 0);\r\n\t\t\t\tif (targetID > 0) {\r\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\r\n\r\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\r\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 404: //LightMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 406: //RimLightMethod\r\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\r\n\t\t\t\tbreak;\r\n\t\t\tcase 407: //AlphaMaskMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\r\n\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\r\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\r\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\r\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\r\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\r\n\t\t\t//\t\t\t\t\tbreak;\r\n\t\t\tcase 410: //FresnelEnvMapMethod\r\n\t\t\t\ttargetID = props.get(1, 0);\r\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\r\n\t\t\t\tif (!returnedArray[0])\r\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\r\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 411: //FogMethod\r\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tthis.parseUserAttributes();\r\n\t\treturn effectMethodReturn;\r\n\r\n\t}\r\n\r\n\tprivate parseUserAttributes():Object\r\n\t{\r\n\t\tvar attributes:Object;\r\n\t\tvar list_len:number;\r\n\t\tvar attibuteCnt:number;\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\tif (list_len > 0) {\r\n\r\n\t\t\tvar list_end:number;\r\n\r\n\t\t\tattributes = {};\r\n\r\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar ns_id:number;\r\n\t\t\t\tvar attr_key:string;\r\n\t\t\t\tvar attr_type:number;\r\n\t\t\t\tvar attr_len:number;\r\n\t\t\t\tvar attr_val:any;\r\n\r\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\r\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_key = this.parseVarStr();\r\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn attributes;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (attr_type) {\r\n\t\t\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.INT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.BOOL:\r\n\t\t\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.UINT32:\r\n\t\t\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\r\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._debug) {\r\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributes[attr_key] = attr_val;\r\n\t\t\t\tattibuteCnt += 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\tprivate parseProperties(expected:Object):AWDProperties\r\n\t{\r\n\t\tvar list_end:number;\r\n\t\tvar list_len:number;\r\n\t\tvar propertyCnt:number = 0;\r\n\t\tvar props:AWDProperties = new AWDProperties();\r\n\r\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\r\n\t\tlist_end = this._newBlockBytes.position + list_len;\r\n\r\n\t\tif (expected) {\r\n\r\n\t\t\twhile (this._newBlockBytes.position < list_end) {\r\n\t\t\t\tvar len:number;\r\n\t\t\t\tvar key:number;\r\n\t\t\t\tvar type:number;\r\n\r\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\r\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\r\n\r\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\r\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\r\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t\t\t\treturn props;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\r\n\t\t\t\t\ttype = expected[key];\r\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._newBlockBytes.position += len;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpropertyCnt += 1;\r\n\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._newBlockBytes.position = list_end;\r\n\t\t}\r\n\r\n\t\treturn props;\r\n\r\n\t}\r\n\r\n\tprivate parseAttrValue(type:number, len:number):any\r\n\t{\r\n\t\tvar elem_len:number;\r\n\t\tvar read_func:Function;\r\n\r\n\t\tswitch (type) {\r\n\r\n\t\t\tcase AWDParser.BOOL:\r\n\t\t\tcase AWDParser.INT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.INT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT8:\r\n\t\t\t\telem_len = 1;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT16:\r\n\t\t\t\telem_len = 2;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.UINT32:\r\n\t\t\tcase AWDParser.COLOR:\r\n\t\t\tcase AWDParser.BADDR:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT32:\r\n\t\t\t\telem_len = 4;\r\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.FLOAT64:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase AWDParser.AWDSTRING:\r\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\r\n\t\t\tcase AWDParser.VECTOR2x1:\r\n\t\t\tcase AWDParser.VECTOR3x1:\r\n\t\t\tcase AWDParser.VECTOR4x1:\r\n\t\t\tcase AWDParser.MTX3x2:\r\n\t\t\tcase AWDParser.MTX3x3:\r\n\t\t\tcase AWDParser.MTX4x3:\r\n\t\t\tcase AWDParser.MTX4x4:\r\n\t\t\t\telem_len = 8;\r\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif (elem_len < len) {\r\n\t\t\tvar list:Array<any> = [];\r\n\t\t\tvar num_read:number = 0;\r\n\t\t\tvar num_elems:number = len/elem_len;\r\n\r\n\t\t\twhile (num_read < num_elems) {\r\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\r\n\t\t\t\tnum_read++;\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t} else {\r\n\r\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\r\n\t\t\treturn val;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseHeader():void\r\n\t{\r\n\t\tvar flags:number;\r\n\t\tvar body_len:number;\r\n\r\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\r\n\r\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\r\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\r\n\r\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\r\n\r\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\r\n\r\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\r\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\r\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\r\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\r\n\t\t}\r\n\r\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\r\n\r\n\t\t// set storagePrecision types\r\n\t\tthis._geoNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyGeo) {\r\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyMatrix) {\r\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._propsNrType = AWDParser.FLOAT32;\r\n\r\n\t\tif (this._accuracyProps) {\r\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\r\n\t\t}\r\n\r\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\r\n\r\n\t\tif (this._debug) {\r\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\r\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\r\n\t\t}\r\n\r\n\t\t// Check file integrity\r\n\t\tbody_len = this._byteData.readUnsignedInt();\r\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\r\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\r\n\t\t}\r\n\r\n\t}\r\n\t// Helper - functions\r\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\r\n\t{\r\n\t\tif (this._blocks[meshID].data instanceof Mesh)\r\n\t\t\tmeshID = this._blocks[meshID].geoID;\r\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\r\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\r\n\t\tvar geoCnt:number /*int*/ = 0;\r\n\t\tvar ud:Array<number>;\r\n\t\tvar uStride:number /*uint*/;\r\n\t\tvar uOffs:number /*uint*/;\r\n\t\tvar numPoints:number /*uint*/;\r\n\t\tvar i:number /*int*/;\r\n\t\tvar newUvs:Array<number>;\r\n\t\tvar sub_geom:TriangleSubGeometry;\r\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\r\n\t\twhile (geoCnt < geometry.subGeometries.length) {\r\n\t\t\tnewUvs = new Array<number>();\r\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\r\n\t\t\tnumPoints = sub_geom.numVertices;\r\n\t\t\tud = sub_geom.uvs;\r\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\r\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\r\n\t\t\tfor (i = 0; i < numPoints; i++) {\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\r\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\r\n\t\t\t}\r\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\r\n\t\t\tgeoCnt++;\r\n\t\t}\r\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\r\n\t}\r\n\r\n\tprivate parseVarStr():string\r\n\t{\r\n\r\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\r\n\t\treturn this._newBlockBytes.readUTFBytes(len);\r\n\t}\r\n\r\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\r\n\t{\r\n\t\tvar returnArray:Array<any> = new Array<any>();\r\n\t\tvar typeCnt:number = 0;\r\n\t\tif (assetID > 0) {\r\n\t\t\tif (this._blocks[assetID]) {\r\n\t\t\t\tif (this._blocks[assetID].data) {\r\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\r\n\r\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\r\n\r\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\r\n\t\t\t\t\t\t\t//if the right assetType was found\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == TextureBase.assetType) && (extraTypeInfo == \"CubeTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == TextureBase.assetType) && (extraTypeInfo == \"SingleTexture\")) {\r\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\r\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\t\treturn returnArray;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\r\n\t\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == Geometry.assetType) && (IAsset(_blocks[assetID].data).assetType == Mesh.assetType)) {\r\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == Geometry.assetType) && (iasset.assetType == Mesh.assetType)) {\r\n\r\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\r\n\r\n\t\t\t\t\t\t\treturnArray.push(true);\r\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\r\n\t\t\t\t\t\t\treturn returnArray;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttypeCnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\r\n\t\treturnArray.push(false);\r\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\r\n\t\treturn returnArray;\r\n\t}\r\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\r\n\t{\r\n\t\tswitch (true) {\r\n\t\t\tcase (assetType == TextureBase.assetType):\r\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\r\n\t\t\t\t\treturn this.getDefaultCubeTexture();\r\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\r\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\r\n\t\t\t\tbreak;\r\n\t\t\tcase (assetType == MaterialBase.assetType):\r\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate getDefaultCubeTexture():IAsset\r\n\t{\r\n\t\tif (!this._defaultCubeTexture) {\r\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\r\n\r\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\r\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\r\n\t\t}\r\n\r\n\t\treturn <IAsset> this._defaultCubeTexture;\r\n\t}\r\n\r\n\tprivate readNumber(precision:boolean = false):number\r\n\t{\r\n\t\tif (precision)\r\n\t\t\treturn this._newBlockBytes.readDouble();\r\n\t\treturn this._newBlockBytes.readFloat();\r\n\r\n\t}\r\n\r\n\tprivate parseMatrix3D():Matrix3D\r\n\t{\r\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\r\n\t}\r\n\r\n\tprivate parseMatrix32RawData():Array<number>\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\r\n\t\tfor (i = 0; i < 6; i++) {\r\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n\tprivate parseMatrix43RawData():Array<number>\r\n\t{\r\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\r\n\r\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[3] = 0.0;\r\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[7] = 0.0;\r\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[11] = 0.0;\r\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\r\n\t\tmtx_raw[15] = 1.0;\r\n\r\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\r\n\r\n\t\tif (isNaN(mtx_raw[0])) {\r\n\t\t\tmtx_raw[0] = 1;\r\n\t\t\tmtx_raw[1] = 0;\r\n\t\t\tmtx_raw[2] = 0;\r\n\t\t\tmtx_raw[4] = 0;\r\n\t\t\tmtx_raw[5] = 1;\r\n\t\t\tmtx_raw[6] = 0;\r\n\t\t\tmtx_raw[8] = 0;\r\n\t\t\tmtx_raw[9] = 0;\r\n\t\t\tmtx_raw[10] = 1;\r\n\t\t\tmtx_raw[12] = 0;\r\n\t\t\tmtx_raw[13] = 0;\r\n\t\t\tmtx_raw[14] = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn mtx_raw;\r\n\t}\r\n\r\n}\r\n\r\nexport = AWDParser;\r\n\r\nclass AWDBlock\r\n{\r\n\tpublic id:number;\r\n\tpublic name:string;\r\n\tpublic data:any;\r\n\tpublic len:any;\r\n\tpublic geoID:number;\r\n\tpublic extras:Object;\r\n\tpublic bytes:ByteArray;\r\n\tpublic errorMessages:Array<string>;\r\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\r\n\r\n\tconstructor()\r\n\t{\r\n\t}\r\n\r\n\tpublic dispose()\r\n\t{\r\n\r\n\t\tthis.id = null;\r\n\t\tthis.bytes = null;\r\n\t\tthis.errorMessages = null;\r\n\t\tthis.uvsForVertexAnimation = null;\r\n\r\n\t}\r\n\r\n\tpublic addError(errorMsg:string):void\r\n\t{\r\n\t\tif (!this.errorMessages)\r\n\t\t\tthis.errorMessages = new Array<string>();\r\n\r\n\t\tthis.errorMessages.push(errorMsg);\r\n\t}\r\n}\r\n\r\nclass AWDProperties\r\n{\r\n\tpublic set(key:number, value:any):void\r\n\t{\r\n\t\tthis[ key.toString() ] = value;\r\n\t}\r\n\r\n\tpublic get(key:number, fallback:any):any\r\n\t{\r\n\t\tif (this.hasOwnProperty(key.toString())) {\r\n\t\t\treturn this[key.toString()];\r\n\t\t} else {\r\n\t\t\treturn fallback;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BitFlags\r\n{\r\n\tpublic static FLAG1:number = 1;\r\n\tpublic static FLAG2:number = 2;\r\n\tpublic static FLAG3:number = 4;\r\n\tpublic static FLAG4:number = 8;\r\n\tpublic static FLAG5:number = 16;\r\n\tpublic static FLAG6:number = 32;\r\n\tpublic static FLAG7:number = 64;\r\n\tpublic static FLAG8:number = 128;\r\n\tpublic static FLAG9:number = 256;\r\n\tpublic static FLAG10:number = 512;\r\n\tpublic static FLAG11:number = 1024;\r\n\tpublic static FLAG12:number = 2048;\r\n\tpublic static FLAG13:number = 4096;\r\n\tpublic static FLAG14:number = 8192;\r\n\tpublic static FLAG15:number = 16384;\r\n\tpublic static FLAG16:number = 32768;\r\n\r\n\tpublic static test(flags:number, testFlag:number):boolean\r\n\t{\r\n\t\treturn (flags & testFlag) == testFlag;\r\n\t}\r\n}\r\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapData\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\r\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\n\r\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\r\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * MD2Parser provides a parser for the MD2 data type.\r\n */\r\nclass MD2Parser extends ParserBase\r\n{\r\n\tpublic static FPS:number /*int*/ = 6;\r\n\r\n\tprivate _clipNodes:Object = new Object();\r\n\tprivate _byteData:ByteArray;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _parsedHeader:boolean;\r\n\tprivate _parsedUV:boolean;\r\n\tprivate _parsedFaces:boolean;\r\n\tprivate _parsedFrames:boolean;\r\n\r\n\tprivate _ident:number /*uint*/;\r\n\tprivate _version:number /*uint*/;\r\n\tprivate _skinWidth:number /*uint*/;\r\n\tprivate _skinHeight:number /*uint*/;\r\n\t//private _frameSize : number /*uint*/;\r\n\tprivate _numSkins:number /*uint*/;\r\n\tprivate _numVertices:number /*uint*/;\r\n\tprivate _numST:number /*uint*/;\r\n\tprivate _numTris:number /*uint*/;\r\n\t//private _numGlCmds : number /*uint*/;\r\n\tprivate _numFrames:number /*uint*/;\r\n\tprivate _offsetSkins:number /*uint*/;\r\n\tprivate _offsetST:number /*uint*/;\r\n\tprivate _offsetTris:number /*uint*/;\r\n\tprivate _offsetFrames:number /*uint*/;\r\n\t//private _offsetGlCmds : number /*uint*/;\r\n\tprivate _offsetEnd:number /*uint*/;\r\n\r\n\tprivate _uvIndices:Array<number>;\r\n\tprivate _indices:Array<number> /*uint*/;\r\n\tprivate _vertIndices:Array<number>;\r\n\r\n\t// the current subgeom being built\r\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\r\n\tprivate _firstSubGeom:TriangleSubGeometry;\r\n\tprivate _uvs:Array<number>;\r\n\tprivate _finalUV:Array<number>;\r\n\r\n\tprivate _materialNames:Array<string>;\r\n\tprivate _textureType:string;\r\n\tprivate _ignoreTexturePath:boolean;\r\n\tprivate _mesh:Mesh;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate materialFinal:boolean = false;\r\n\tprivate geoCreated:boolean = false;\r\n\r\n\t/**\r\n\t * Creates a new MD2Parser object.\r\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\r\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\r\n\t */\r\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\t\tthis._textureType = textureType;\r\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md2\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.assets.length != 1)\r\n\t\t\treturn;\r\n\r\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\r\n\r\n\t\tif (asset) {\r\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\r\n\r\n\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t//add to the content property\r\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\tmaterial.name = this._mesh.material.name;\r\n\t\t\tthis._mesh.material = material;\r\n\t\t\tthis._pFinalizeAsset(material);\r\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t}\r\n\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\t// apply system default\r\n\t\tif (this.materialMode < 2) {\r\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t} else {\r\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t}\r\n\r\n\t\t//add to the content property\r\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\tthis.materialFinal = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._startedParsing = true;\r\n\r\n\t\t\t// Reset bytearray read position (which may have been\r\n\t\t\t// moved forward by the supportsData() function.)\r\n\t\t\tthis._byteData.position = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\tif (!this._parsedHeader) {\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\r\n\r\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\r\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\r\n\t\t\t\tthis._geometry = new Geometry();\r\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\r\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\r\n\r\n\t\t\t\t// Parse header and decompress body\r\n\t\t\t\tthis.parseHeader();\r\n\t\t\t\tthis.parseMaterialNames();\r\n\t\t\t} else if (!this._parsedUV) {\r\n\t\t\t\tthis.parseUV();\r\n\t\t\t} else if (!this._parsedFaces) {\r\n\t\t\t\tthis.parseFaces();\r\n\t\t\t} else if (!this._parsedFrames) {\r\n\t\t\t\tthis.parseFrames();\r\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t} else if (!this.geoCreated) {\r\n\t\t\t\tthis.geoCreated = true;\r\n\t\t\t\t//create default subgeometry\r\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\r\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\r\n\t\t\t\tthis._mesh.name = \"\";\r\n\t\t\t\tif (this.materialFinal) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\r\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads in all that MD2 Header data that is declared as private variables.\r\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\r\n\t */\r\n\tprivate parseHeader()\r\n\t{\r\n\t\tthis._ident = this._byteData.readInt();\r\n\t\tthis._version = this._byteData.readInt();\r\n\t\tthis._skinWidth = this._byteData.readInt();\r\n\t\tthis._skinHeight = this._byteData.readInt();\r\n\t\t//skip this._frameSize\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numSkins = this._byteData.readInt();\r\n\t\tthis._numVertices = this._byteData.readInt();\r\n\t\tthis._numST = this._byteData.readInt();\r\n\t\tthis._numTris = this._byteData.readInt();\r\n\t\t//skip this._numGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._numFrames = this._byteData.readInt();\r\n\t\tthis._offsetSkins = this._byteData.readInt();\r\n\t\tthis._offsetST = this._byteData.readInt();\r\n\t\tthis._offsetTris = this._byteData.readInt();\r\n\t\tthis._offsetFrames = this._byteData.readInt();\r\n\t\t//skip this._offsetGlCmds\r\n\t\tthis._byteData.readInt();\r\n\t\tthis._offsetEnd = this._byteData.readInt();\r\n\r\n\t\tthis._parsedHeader = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the file names for the materials.\r\n\t */\r\n\tprivate parseMaterialNames()\r\n\t{\r\n\t\tvar url:string;\r\n\t\tvar name:string;\r\n\t\tvar extIndex:number /*int*/;\r\n\t\tvar slashIndex:number /*int*/;\r\n\t\tthis._materialNames = new Array<string>();\r\n\t\tthis._byteData.position = this._offsetSkins;\r\n\r\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\r\n\t\t\tname = this._byteData.readUTFBytes(64);\r\n\t\t\tname = name.replace(regExp, \"\");\r\n\t\t\textIndex = name.lastIndexOf(\".\");\r\n\t\t\tif (this._ignoreTexturePath)\r\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\r\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\r\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\r\n\t\t\t\turl = name + \".\" + this._textureType;\r\n\t\t\t} else {\r\n\t\t\t\turl = name;\r\n\t\t\t}\r\n\r\n\t\t\tthis._materialNames[i] = name;\r\n\r\n\t\t\t// only support 1 skin TODO: really?\r\n\t\t\tif (this.dependencies.length == 0)\r\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\r\n\t\t}\r\n\r\n\t\tif (this._materialNames.length > 0)\r\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\r\n\t\t\tthis.materialFinal = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the uv data for the mesh.\r\n\t */\r\n\tprivate parseUV()\r\n\t{\r\n\t\tvar j:number /*uint*/ = 0;\r\n\r\n\t\tthis._uvs = new Array<number>(this._numST*2);\r\n\t\tthis._byteData.position = this._offsetST;\r\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\r\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\r\n\t\t}\r\n\r\n\t\tthis._parsedUV = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses unique indices for the faces.\r\n\t */\r\n\tprivate parseFaces()\r\n\t{\r\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\r\n\t\tthis._vertIndices = new Array<number>();\r\n\t\tthis._uvIndices = new Array<number>();\r\n\t\tthis._indices = new Array<number>() /*uint*/;\r\n\r\n\t\tthis._byteData.position = this._offsetTris;\r\n\r\n\t\tfor (i = 0; i < this._numTris; i++) {\r\n\t\t\t//collect vertex indices\r\n\t\t\ta = this._byteData.readUnsignedShort();\r\n\t\t\tb = this._byteData.readUnsignedShort();\r\n\t\t\tc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\t//collect uv indices\r\n\t\t\tta = this._byteData.readUnsignedShort();\r\n\t\t\ttb = this._byteData.readUnsignedShort();\r\n\t\t\ttc = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis.addIndex(a, ta);\r\n\t\t\tthis.addIndex(b, tb);\r\n\t\t\tthis.addIndex(c, tc);\r\n\t\t}\r\n\r\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\r\n\t\tthis._finalUV = new Array<number>(len*2);\r\n\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\r\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\r\n\t\t}\r\n\r\n\t\tthis._parsedFaces = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\r\n\t * corresponding vertex and uv data in the correct location.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t */\r\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\r\n\t{\r\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\r\n\r\n\t\tif (index == -1) {\r\n\t\t\tthis._indices.push(this._vertIndices.length);\r\n\t\t\tthis._vertIndices.push(vertexIndex);\r\n\t\t\tthis._uvIndices.push(uvIndex);\r\n\t\t} else\r\n\t\t\tthis._indices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\r\n\t * @param vertexIndex The original index in the vertex list.\r\n\t * @param uvIndex The original index in the uv list.\r\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\r\n\t */\r\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\r\n\r\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\r\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses all the frame geometries.\r\n\t */\r\n\tprivate parseFrames()\r\n\t{\r\n\t\tvar sx:number, sy:number, sz:number;\r\n\t\tvar tx:number, ty:number, tz:number;\r\n\t\tvar geometry:Geometry;\r\n\t\tvar subGeom:TriangleSubGeometry;\r\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\r\n\t\tvar fvertices:Array<number>;\r\n\t\tvar tvertices:Array<number>;\r\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\r\n\t\t//var ch : number /*uint*/;\r\n\t\tvar name:string = \"\";\r\n\t\tvar prevClip:VertexClipNode = null;\r\n\r\n\t\tthis._byteData.position = this._offsetFrames;\r\n\r\n\t\tfor (i = 0; i < this._numFrames; i++) {\r\n\r\n\t\t\ttvertices = new Array<number>();\r\n\t\t\tfvertices = new Array<number>(vertLen*3);\r\n\r\n\t\t\tsx = this._byteData.readFloat();\r\n\t\t\tsy = this._byteData.readFloat();\r\n\t\t\tsz = this._byteData.readFloat();\r\n\r\n\t\t\ttx = this._byteData.readFloat();\r\n\t\t\tty = this._byteData.readFloat();\r\n\t\t\ttz = this._byteData.readFloat();\r\n\r\n\t\t\tname = this.readFrameName();\r\n\r\n\t\t\t// Note, the extra data.position++ in the for loop is there\r\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\r\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\r\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\r\n\r\n\t\t\tk = 0;\r\n\t\t\tfor (j = 0; j < vertLen; j++) {\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\r\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\r\n\t\t\t}\r\n\r\n\t\t\tsubGeom = new TriangleSubGeometry(true);\r\n\r\n\t\t\tif (this._firstSubGeom == null)\r\n\t\t\t\tthis._firstSubGeom = subGeom;\r\n\r\n\t\t\tgeometry = new Geometry();\r\n\t\t\tgeometry.addSubGeometry(subGeom);\r\n\r\n\t\t\tsubGeom.updateIndices(this._indices);\r\n\t\t\tsubGeom.updatePositions(fvertices);\r\n\t\t\tsubGeom.updateUVs(this._finalUV);\r\n\t\t\tsubGeom.vertexNormals;\r\n\t\t\tsubGeom.vertexTangents;\r\n\t\t\tsubGeom.autoDeriveNormals = false;\r\n\t\t\tsubGeom.autoDeriveTangents = false;\r\n\r\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\r\n\r\n\t\t\tif (!clip) {\r\n\t\t\t\t// If another sequence was parsed before this one, starting\r\n\t\t\t\t// a new state means the previous one is complete and can\r\n\t\t\t\t// hence be finalized.\r\n\t\t\t\tif (prevClip) {\r\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclip = new VertexClipNode();\r\n\t\t\t\tclip.name = name;\r\n\t\t\t\tclip.stitchFinalFrame = true;\r\n\r\n\t\t\t\tthis._clipNodes[name] = clip;\r\n\r\n\t\t\t\tprevClip = clip;\r\n\t\t\t}\r\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\r\n\t\t}\r\n\r\n\t\t// Finalize the last state\r\n\t\tif (prevClip) {\r\n\t\t\tthis._pFinalizeAsset(prevClip);\r\n\t\t\tthis._animationSet.addAnimation(prevClip);\r\n\t\t}\r\n\r\n\t\t// Force this._pFinalizeAsset() to decide name\r\n\t\tthis._pFinalizeAsset(this._animationSet);\r\n\r\n\t\tthis._parsedFrames = true;\r\n\t}\r\n\r\n\tprivate readFrameName():string\r\n\t{\r\n\t\tvar name:string = \"\";\r\n\t\tvar k:number /*uint*/ = 0;\r\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\r\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\r\n\r\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\r\n\t\t\t\tname += String.fromCharCode(ch);\r\n\r\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\r\n\t\t\t\tk++;\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n}\r\n\r\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\r\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\r\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\r\n\r\n/**\r\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5AnimParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\r\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\r\n\r\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\r\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\r\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\r\n\tpublic static FRAME_TOKEN:string = \"frame\";\r\n\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _frameRate:number /*int*/;\r\n\tprivate _numFrames:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numAnimatedComponents:number /*int*/;\r\n\r\n\tprivate _hierarchy:Array<HierarchyData>;\r\n\tprivate _bounds:Array<BoundsData>;\r\n\tprivate _frameData:Array<FrameData>;\r\n\tprivate _baseFrameData:Array<BaseFrameData>;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\tprivate _clip:SkeletonClipNode;\r\n\r\n\t/**\r\n\t * Creates a new MD5AnimParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\t\tvar t1:Quaternion = new Quaternion();\r\n\t\tvar t2:Quaternion = new Quaternion();\r\n\r\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\r\n\r\n\t\tthis._rotationQuat.multiply(t2, t1);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tthis._rotationQuat.multiply(t2, t1);\r\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5anim\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"\":\r\n\t\t\t\t\t// can occur at the end of a file\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\r\n\t\t\t\t\tthis._numFrames = this.getNextInt();\r\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\r\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\r\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\r\n\t\t\t\t\tthis._frameRate = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\r\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\r\n\t\t\t\t\tthis.parseHierarchy();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\r\n\t\t\t\t\tthis.parseBounds();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseBaseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\r\n\t\t\t\t\tthis.parseFrame();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis._clip = new SkeletonClipNode();\r\n\t\t\t\tthis.translateClip();\r\n\t\t\t\tthis._pFinalizeAsset(this._clip);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts all key frame data to an SkinnedAnimationSequence.\r\n\t */\r\n\tprivate translateClip():void\r\n\t{\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\r\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a single key frame data to a SkeletonPose.\r\n\t * @param frameData The actual frame data.\r\n\t * @return A SkeletonPose containing the frame data's pose.\r\n\t */\r\n\tprivate translatePose(frameData:FrameData):SkeletonPose\r\n\t{\r\n\t\tvar hierarchy:HierarchyData;\r\n\t\tvar pose:JointPose;\r\n\t\tvar base:BaseFrameData;\r\n\t\tvar flags:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar translate:Vector3D = new Vector3D();\r\n\t\tvar orientation:Quaternion = new Quaternion();\r\n\t\tvar components:Array<number> = frameData.components;\r\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\r\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\r\n\t\t\tj = 0;\r\n\t\t\tpose = new JointPose();\r\n\t\t\thierarchy = this._hierarchy[i];\r\n\t\t\tbase = this._baseFrameData[i];\r\n\t\t\tflags = hierarchy.flags;\r\n\t\t\ttranslate.x = base.position.x;\r\n\t\t\ttranslate.y = base.position.y;\r\n\t\t\ttranslate.z = base.position.z;\r\n\t\t\torientation.x = base.orientation.x;\r\n\t\t\torientation.y = base.orientation.y;\r\n\t\t\torientation.z = base.orientation.z;\r\n\r\n\t\t\tif (flags & 1)\r\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 2)\r\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 4)\r\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 8)\r\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 16)\r\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\r\n\t\t\tif (flags & 32)\r\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\r\n\r\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\r\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\r\n\r\n\t\t\tif (hierarchy.parentIndex < 0) {\r\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\r\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\r\n\t\t\t} else {\r\n\t\t\t\tpose.orientation.copyFrom(orientation);\r\n\t\t\t\tpose.translation.x = translate.x;\r\n\t\t\t\tpose.translation.y = translate.y;\r\n\t\t\t\tpose.translation.z = translate.z;\r\n\t\t\t}\r\n\t\t\tpose.orientation.y = -pose.orientation.y;\r\n\t\t\tpose.orientation.z = -pose.orientation.z;\r\n\t\t\tpose.translation.x = -pose.translation.x;\r\n\r\n\t\t\tjointPoses[i] = pose;\r\n\t\t}\r\n\r\n\t\treturn skelPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's hierarchy data.\r\n\t */\r\n\tprivate parseHierarchy():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:HierarchyData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new HierarchyData();\r\n\t\t\tdata.name = this.parseLiteralstring();\r\n\t\t\tdata.parentIndex = this.getNextInt();\r\n\t\t\tdata.flags = this.getNextInt();\r\n\t\t\tdata.startIndex = this.getNextInt();\r\n\t\t\tthis._hierarchy[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses frame bounds.\r\n\t */\r\n\tprivate parseBounds():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BoundsData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BoundsData();\r\n\t\t\tdata.min = this.parseVector3D();\r\n\t\t\tdata.max = this.parseVector3D();\r\n\t\t\tthis._bounds[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the base frame.\r\n\t */\r\n\tprivate parseBaseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:BaseFrameData;\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar i:number /*int*/ = 0;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new BaseFrameData();\r\n\t\t\tdata.position = this.parseVector3D();\r\n\t\t\tdata.orientation = this.parseQuaternion();\r\n\t\t\tthis._baseFrameData[i++] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single frame.\r\n\t */\r\n\tprivate parseFrame():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar data:FrameData;\r\n\t\tvar token:string;\r\n\t\tvar frameIndex:number /*int*/;\r\n\r\n\t\tframeIndex = this.getNextInt();\r\n\r\n\t\ttoken = this.getNextToken();\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tdata = new FrameData();\r\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\r\n\r\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\r\n\t\t\t\tdata.components[i] = this.getNextNumber();\r\n\r\n\t\t\tthis._frameData[frameIndex] = data;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex == this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = this.getNextNumber();\r\n\t\tquat.z = this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn quat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5AnimParser;\r\n\r\n\r\n/**\r\n *\r\n */\r\nclass BaseFrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic position:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic orientation:Quaternion;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass BoundsData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic min:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic max:Vector3D;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass FrameData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic index:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic components:Array<number>;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass HierarchyData\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic name:string;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic parentIndex:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic flags:number /*int*/;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic startIndex:number /*int*/;\r\n}",
    "import Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\n\r\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\r\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\r\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\r\n\r\n// todo: create animation system, parse skeleton\r\n\r\n/**\r\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\r\n *\r\n * todo: optimize\r\n */\r\nclass MD5MeshParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\r\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\r\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\r\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\r\n\tpublic static COMMENT_TOKEN:string = \"//\";\r\n\tpublic static JOINTS_TOKEN:string = \"joints\";\r\n\tpublic static MESH_TOKEN:string = \"mesh\";\r\n\r\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\r\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\r\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\r\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\r\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\r\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\r\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\r\n\r\n\tprivate _parseIndex:number /*int*/ = 0;\r\n\tprivate _reachedEOF:boolean;\r\n\tprivate _line:number /*int*/ = 0;\r\n\tprivate _charLineIndex:number /*int*/ = 0;\r\n\tprivate _version:number /*int*/;\r\n\tprivate _numJoints:number /*int*/;\r\n\tprivate _numMeshes:number /*int*/;\r\n\r\n\tprivate _mesh:Mesh;\r\n\tprivate _shaders:Array<string>;\r\n\r\n\tprivate _maxJointCount:number /*int*/;\r\n\tprivate _meshData:Array<MeshData>;\r\n\tprivate _bindPoses:Array<Matrix3D>;\r\n\tprivate _geometry:Geometry;\r\n\r\n\tprivate _skeleton:Skeleton;\r\n\tprivate _animationSet:SkeletonAnimationSet;\r\n\r\n\tprivate _rotationQuat:Quaternion;\r\n\r\n\t/**\r\n\t * Creates a new MD5MeshParser object.\r\n\t */\r\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._rotationQuat = new Quaternion();\r\n\r\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\r\n\r\n\t\tif (additionalRotationAxis) {\r\n\t\t\tvar quat:Quaternion = new Quaternion();\r\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\r\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"md5mesh\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar token:string;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\tthis._startedParsing = true;\r\n\t\t}\r\n\r\n\t\twhile (this._pHasTime()) {\r\n\t\t\ttoken = this.getNextToken();\r\n\t\t\tswitch (token) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\r\n\t\t\t\t\tthis._version = this.getNextInt();\r\n\t\t\t\t\tif (this._version != 10)\r\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\r\n\t\t\t\t\tthis.parseCMD();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\r\n\t\t\t\t\tthis._numJoints = this.getNextInt();\r\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\r\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\r\n\t\t\t\t\tthis.parseJoints();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\r\n\t\t\t\t\tthis.parseMesh();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (!this._reachedEOF)\r\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._reachedEOF) {\r\n\t\t\t\tthis.calculateMaxJointCount();\r\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\r\n\r\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\r\n\t\t\t\tthis._geometry = this._mesh.geometry;\r\n\r\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\r\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\r\n\r\n\t\t\t\t//_geometry.animation = _animation;\r\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\r\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\r\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\r\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\r\n\t\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate calculateMaxJointCount():void\r\n\t{\r\n\t\tthis._maxJointCount = 0;\r\n\r\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\r\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\r\n\t\t\tvar meshData:MeshData = this._meshData[i];\r\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\r\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\r\n\r\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\r\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\r\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\r\n\t\t\t\tif (totalJoints > this._maxJointCount)\r\n\t\t\t\t\tthis._maxJointCount = totalJoints;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\r\n\t{\r\n\t\tvar start:number /*int*/ = vertex.startWeight;\r\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\r\n\t\tvar count:number /*int*/ = 0;\r\n\t\tvar weight:number;\r\n\r\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\r\n\t\t\tweight = weights[i].bias;\r\n\t\t\tif (weight == 0)\r\n\t\t\t\t++count;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the skeleton's joints.\r\n\t */\r\n\tprivate parseJoints():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar quat:Quaternion;\r\n\t\tvar i:number /*int*/ = 0;\r\n\t\tvar token:string = this.getNextToken();\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tthis._skeleton = new Skeleton();\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tjoint = new SkeletonJoint();\r\n\t\t\tjoint.name = this.parseLiteralstring();\r\n\t\t\tjoint.parentIndex = this.getNextInt();\r\n\t\t\tpos = this.parseVector3D();\r\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\r\n\t\t\tquat = this.parseQuaternion();\r\n\r\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\r\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\r\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\r\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\r\n\t\t\tinv.invert();\r\n\t\t\tjoint.inverseBindPose = inv.rawData;\r\n\r\n\t\t\tthis._skeleton.joints[i++] = joint;\r\n\r\n\t\t\tch = this.getNextChar();\r\n\r\n\t\t\tif (ch == \"/\") {\r\n\t\t\t\tthis.putBack();\r\n\t\t\t\tch = this.getNextToken();\r\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\tch = this.getNextChar();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (ch != \"}\")\r\n\t\t\t\tthis.putBack();\r\n\t\t} while (ch != \"}\");\r\n\t}\r\n\r\n\t/**\r\n\t * Puts back the last read character into the data stream.\r\n\t */\r\n\tprivate putBack():void\r\n\t{\r\n\t\tthis._parseIndex--;\r\n\t\tthis._charLineIndex--;\r\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the mesh geometry.\r\n\t */\r\n\tprivate parseMesh():void\r\n\t{\r\n\t\tvar token:string = this.getNextToken();\r\n\t\tvar ch:string;\r\n\t\tvar vertexData:Array<VertexData>;\r\n\t\tvar weights:Array<JointData>;\r\n\t\tvar indices:Array<number> /*uint*/;\r\n\r\n\t\tif (token != \"{\")\r\n\t\t\tthis.sendUnknownKeywordError();\r\n\r\n\t\tif (this._shaders == null)\r\n\t\t\tthis._shaders = new Array<string>();\r\n\r\n\t\twhile (ch != \"}\") {\r\n\t\t\tch = this.getNextToken();\r\n\t\t\tswitch (ch) {\r\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\r\n\t\t\t\t\tthis.ignoreLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\r\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\r\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\r\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\r\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\r\n\t\t\t\t\tthis.parseVertex(vertexData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\r\n\t\t\t\t\tthis.parseTri(indices);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\r\n\t\t\t\t\tthis.parseJoint(weights);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._meshData == null)\r\n\t\t\tthis._meshData = new Array<MeshData>();\r\n\r\n\t\tvar i:number /*uint*/ = this._meshData.length;\r\n\t\tthis._meshData[i] = new MeshData();\r\n\t\tthis._meshData[i].vertexData = vertexData;\r\n\t\tthis._meshData[i].weightData = weights;\r\n\t\tthis._meshData[i].indices = indices;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the mesh data to a SkinnedSub instance.\r\n\t * @param vertexData The mesh's vertices.\r\n\t * @param weights The joint weights per vertex.\r\n\t * @param indices The indices for the faces.\r\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\r\n\t */\r\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\r\n\t{\r\n\t\tvar len:number /*int*/ = vertexData.length;\r\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\r\n\t\tvar vertex:VertexData;\r\n\t\tvar weight:JointData;\r\n\t\tvar bindPose:Matrix3D;\r\n\t\tvar pos:Vector3D;\r\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\r\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\r\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\r\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\r\n\t\tvar l:number /*int*/ = 0;\r\n\t\tvar nonZeroWeights:number /*int*/;\r\n\r\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\r\n\t\t\tvertex = vertexData[i];\r\n\t\t\tv1 = vertex.index*3;\r\n\t\t\tv2 = v1 + 1;\r\n\t\t\tv3 = v1 + 2;\r\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\r\n\r\n\t\t\tnonZeroWeights = 0;\r\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\r\n\t\t\t\tweight = weights[vertex.startWeight + j];\r\n\t\t\t\tif (weight.bias > 0) {\r\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\r\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\r\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\r\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\r\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\r\n\r\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\r\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\r\n\t\t\t\t\tjointWeights[l++] = weight.bias;\r\n\t\t\t\t\t++nonZeroWeights;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\r\n\t\t\t\tjointIndices[l] = 0;\r\n\t\t\t\tjointWeights[l++] = 0;\r\n\t\t\t}\r\n\r\n\t\t\tv1 = vertex.index << 1;\r\n\t\t\tuvs[v1++] = vertex.s;\r\n\t\t\tuvs[v1] = vertex.t;\r\n\t\t}\r\n\r\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\r\n\t\tsubGeom.updateIndices(indices);\r\n\t\tsubGeom.updatePositions(vertices);\r\n\t\tsubGeom.updateUVs(uvs);\r\n\t\tsubGeom.updateJointIndices(jointIndices);\r\n\t\tsubGeom.updateJointWeights(jointWeights);\r\n\t\t// cause explicit updates\r\n\t\tsubGeom.vertexNormals;\r\n\t\tsubGeom.vertexTangents;\r\n\t\t// turn auto updates off because they may be animated and set explicitly\r\n\t\tsubGeom.autoDeriveTangents = false;\r\n\t\tsubGeom.autoDeriveNormals = false;\r\n\r\n\t\treturn subGeom;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve the next triplet of vertex indices that form a face.\r\n\t * @param indices The index list in which to store the read data.\r\n\t */\r\n\tprivate parseTri(indices:Array<number> /*uint*/):void\r\n\t{\r\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\r\n\t\tindices[index] = this.getNextInt();\r\n\t\tindices[index + 1] = this.getNextInt();\r\n\t\tindices[index + 2] = this.getNextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a new joint data set for a single joint.\r\n\t * @param weights the target list to contain the weight data.\r\n\t */\r\n\tprivate parseJoint(weights:Array<JointData>):void\r\n\t{\r\n\t\tvar weight:JointData = new JointData();\r\n\t\tweight.index = this.getNextInt();\r\n\t\tweight.joint = this.getNextInt();\r\n\t\tweight.bias = this.getNextNumber();\r\n\t\tweight.pos = this.parseVector3D();\r\n\t\tweights[weight.index] = weight;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the data for a single vertex.\r\n\t * @param vertexData The list to contain the vertex data.\r\n\t */\r\n\tprivate parseVertex(vertexData:Array<VertexData>):void\r\n\t{\r\n\t\tvar vertex:VertexData = new VertexData();\r\n\t\tvertex.index = this.getNextInt();\r\n\t\tthis.parseUV(vertex);\r\n\t\tvertex.startWeight = this.getNextInt();\r\n\t\tvertex.countWeight = this.getNextInt();\r\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\r\n\t\tvertexData[vertex.index] = vertex;\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinate.\r\n\t * @param vertexData The vertexData to contain the UV coordinates.\r\n\t */\r\n\tprivate parseUV(vertexData:VertexData):void\r\n\t{\r\n\t\tvar ch:string = this.getNextToken();\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvertexData.s = this.getNextNumber();\r\n\t\tvertexData.t = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the next token in the data stream.\r\n\t */\r\n\tprivate getNextToken():string\r\n\t{\r\n\t\tvar ch:string;\r\n\t\tvar token:string = \"\";\r\n\r\n\t\twhile (!this._reachedEOF) {\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\r\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\t\tthis.skipWhiteSpace();\r\n\t\t\t\tif (token != \"\")\r\n\t\t\t\t\treturn token;\r\n\t\t\t} else\r\n\t\t\t\ttoken += ch;\r\n\r\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\r\n\t\t\t\treturn token;\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t}\r\n\r\n\t/**\r\n\t * Skips all whitespace in the data stream.\r\n\t */\r\n\tprivate skipWhiteSpace():void\r\n\t{\r\n\t\tvar ch:string;\r\n\r\n\t\tdo\r\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\r\n\r\n\t\tthis.putBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Skips to the next line.\r\n\t */\r\n\tprivate ignoreLine():void\r\n\t{\r\n\t\tvar ch:string;\r\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\r\n\t\t\tch = this.getNextChar();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next single character in the data stream.\r\n\t */\r\n\tprivate getNextChar():string\r\n\t{\r\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\r\n\r\n\t\tif (ch == \"\\n\") {\r\n\t\t\t++this._line;\r\n\t\t\tthis._charLineIndex = 0;\r\n\t\t} else if (ch != \"\\r\")\r\n\t\t\t++this._charLineIndex;\r\n\r\n\t\tif (this._parseIndex >= this._textData.length)\r\n\t\t\tthis._reachedEOF = true;\r\n\r\n\t\treturn ch;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next integer in the data stream.\r\n\t */\r\n\tprivate getNextInt():number /*int*/\r\n\t{\r\n\t\tvar i:number = parseInt(this.getNextToken());\r\n\t\tif (isNaN(i))\r\n\t\t\tthis.sendParseError(\"int type\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next floating point number in the data stream.\r\n\t */\r\n\tprivate getNextNumber():number\r\n\t{\r\n\t\tvar f:number = parseFloat(this.getNextToken());\r\n\t\tif (isNaN(f))\r\n\t\t\tthis.sendParseError(\"float type\");\r\n\t\treturn f;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next 3d vector in the data stream.\r\n\t */\r\n\tprivate parseVector3D():Vector3D\r\n\t{\r\n\t\tvar vec:Vector3D = new Vector3D();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tvec.x = -this.getNextNumber();\r\n\t\tvec.y = this.getNextNumber();\r\n\t\tvec.z = this.getNextNumber();\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\treturn vec;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next quaternion in the data stream.\r\n\t */\r\n\tprivate parseQuaternion():Quaternion\r\n\t{\r\n\t\tvar quat:Quaternion = new Quaternion();\r\n\t\tvar ch:string = this.getNextToken();\r\n\r\n\t\tif (ch != \"(\")\r\n\t\t\tthis.sendParseError(\"(\");\r\n\t\tquat.x = this.getNextNumber();\r\n\t\tquat.y = -this.getNextNumber();\r\n\t\tquat.z = -this.getNextNumber();\r\n\r\n\t\t// quat supposed to be unit length\r\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\r\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\r\n\r\n\t\tif (this.getNextToken() != \")\")\r\n\t\t\tthis.sendParseError(\")\");\r\n\r\n\t\tvar rotQuat:Quaternion = new Quaternion();\r\n\t\trotQuat.multiply(this._rotationQuat, quat);\r\n\t\treturn rotQuat;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses the command line data.\r\n\t */\r\n\tprivate parseCMD():void\r\n\t{\r\n\t\t// just ignore the command line property\r\n\t\tthis.parseLiteralstring();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\r\n\t * by double quotes.\r\n\t */\r\n\tprivate parseLiteralstring():string\r\n\t{\r\n\t\tthis.skipWhiteSpace();\r\n\r\n\t\tvar ch:string = this.getNextChar();\r\n\t\tvar str:string = \"\";\r\n\r\n\t\tif (ch != \"\\\"\")\r\n\t\t\tthis.sendParseError(\"\\\"\");\r\n\r\n\t\tdo {\r\n\t\t\tif (this._reachedEOF)\r\n\t\t\t\tthis.sendEOFError();\r\n\t\t\tch = this.getNextChar();\r\n\t\t\tif (ch != \"\\\"\")\r\n\t\t\t\tstr += ch;\r\n\t\t} while (ch != \"\\\"\");\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an end-of-file error when a premature end of file was encountered.\r\n\t */\r\n\tprivate sendEOFError():void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected end of file\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unexpected token was encountered.\r\n\t * @param expected The token type that was actually expected.\r\n\t */\r\n\tprivate sendParseError(expected:string):void\r\n\t{\r\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\r\n\t}\r\n\r\n\t/**\r\n\t * Throws an error when an unknown keyword was encountered.\r\n\t */\r\n\tprivate sendUnknownKeywordError():void\r\n\t{\r\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\r\n\t}\r\n}\r\n\r\nexport = MD5MeshParser;\r\n\r\n\r\nclass VertexData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic s:number;\r\n\tpublic t:number;\r\n\tpublic startWeight:number /*int*/;\r\n\tpublic countWeight:number /*int*/;\r\n}\r\n\r\nclass JointData\r\n{\r\n\tpublic index:number /*int*/;\r\n\tpublic joint:number /*int*/;\r\n\tpublic bias:number;\r\n\tpublic pos:Vector3D;\r\n}\r\n\r\nclass MeshData\r\n{\r\n\tpublic vertexData:Array<VertexData>;\r\n\tpublic weightData:Array<JointData>;\r\n\tpublic indices:Array<number> /*uint*/;\r\n}",
    "import Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\r\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\n\r\n/**\r\n * Max3DSParser provides a parser for the 3ds data type.\r\n */\r\nclass Max3DSParser extends ParserBase\r\n{\r\n\tprivate _byteData:ByteArray;\r\n\r\n\tprivate _textures:Object;\r\n\tprivate _materials:Object;\r\n\tprivate _unfinalized_objects:Object;\r\n\r\n\tprivate _cur_obj_end:number;\r\n\tprivate _cur_obj:ObjectVO;\r\n\r\n\tprivate _cur_mat_end:number;\r\n\tprivate _cur_mat:MaterialVO;\r\n\tprivate _useSmoothingGroups:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>Max3DSParser</code> object.\r\n\t *\r\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\r\n\t */\r\n\tconstructor(useSmoothingGroups:boolean = true)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\r\n\r\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"3ds\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar ba:ByteArray;\r\n\r\n\t\tba = ParserUtils.toByteArray(data);\r\n\t\tif (ba) {\r\n\t\t\tba.position = 0;\r\n\t\t\tif (ba.readShort() == 0x4d4d)\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\tif (resourceDependency.assets.length == 1) {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\t\t\tif (asset.isAsset(TextureBase)) {\r\n\t\t\t\tvar tex:TextureVO;\r\n\r\n\t\t\t\ttex = this._textures[resourceDependency.id];\r\n\t\t\t\ttex.texture = <Texture2DBase> asset;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\r\n\t{\r\n\t\t// TODO: Implement\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tif (!this._byteData) {\r\n\t\t\tthis._byteData = this._pGetByteData();\r\n\t\t\tthis._byteData.position = 0;\r\n\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\r\n\t\t\t//----------------------------------------------------------------------------\r\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\r\n\t\t\t//----------------------------------------------------------------------------\r\n\r\n\t\t\tthis._textures = {};\r\n\t\t\tthis._materials = {};\r\n\t\t\tthis._unfinalized_objects = {};\r\n\t\t}\r\n\r\n\t\t// TODO: With this construct, the loop will run no-op for as long\r\n\t\t// as there is time once file has finished reading. Consider a nice\r\n\t\t// way to stop loop when byte array is empty, without putting it in\r\n\t\t// the while-conditional, which will prevent finalizations from\r\n\t\t// happening after the last chunk.\r\n\t\twhile (this._pHasTime()) {\r\n\r\n\t\t\t// If we are currently working on an object, and the most recent chunk was\r\n\t\t\t// the last one in that object, finalize the current object.\r\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\r\n\t\t\t\tthis.finalizeCurrentMaterial();\r\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\r\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\r\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\r\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\r\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\r\n\t\t\t\tthis._cur_obj = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\r\n\t\t\t\tvar cid:number /*uint*/;\r\n\t\t\t\tvar len:number /*uint*/;\r\n\t\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\t\tswitch (cid) {\r\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\r\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\r\n\t\t\t\t\tcase 0xB000: // KEYF3DS\r\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\r\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\r\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\r\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\r\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\r\n\t\t\t\t\t\tthis._cur_mat_end = end;\r\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\r\n\t\t\t\t\t\tthis._cur_obj_end = end;\r\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\r\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\r\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\r\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\r\n\t\t\t\t\t\tthis._cur_obj.type = Mesh.assetType;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\r\n\t\t\t\t\t\tthis.parseVertexList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\r\n\t\t\t\t\t\tthis.parseFaceList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\r\n\t\t\t\t\t\tthis.parseUVList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4130: // Face materials\r\n\t\t\t\t\t\tthis.parseFaceMaterialList();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4160: // Transform\r\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\r\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 0x4150: // Smoothing groups\r\n\t\t\t\t\t\tthis.parseSmoothingGroups();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Skip this (unknown) chunk\r\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pause parsing if there were any dependencies found during this\r\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\r\n\t\t\t\t// retrieved at this time.)\r\n\t\t\t\tif (this.dependencies.length) {\r\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// More parsing is required if the entire byte array has not yet\r\n\t\t// been read, or if there is a currently non-finalized object in\r\n\t\t// the pipeline.\r\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\r\n\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t} else {\r\n\t\t\tvar name:string;\r\n\r\n\t\t\t// Finalize any remaining objects before ending.\r\n\t\t\tfor (name in this._unfinalized_objects) {\r\n\t\t\t\tvar obj:DisplayObjectContainer;\r\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\r\n\t\t\t\tif (obj) {\r\n\t\t\t\t\t//add to the content property\r\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\tprivate parseMaterial():MaterialVO\r\n\t{\r\n\t\tvar mat:MaterialVO;\r\n\r\n\t\tmat = new MaterialVO();\r\n\r\n\t\twhile (this._byteData.position < this._cur_mat_end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\t\t\tvar end:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\t\t\tend = this._byteData.position + (len - 6);\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA000: // Material name\r\n\t\t\t\t\tmat.name = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA010: // Ambient color\r\n\t\t\t\t\tmat.ambientColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA020: // Diffuse color\r\n\t\t\t\t\tmat.diffuseColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA030: // Specular color\r\n\t\t\t\t\tmat.specularColor = this.readColor();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\r\n\t\t\t\t\tmat.twoSided = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA200: // Main (color) texture\r\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xA204: // Specular map\r\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position = end;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\t}\r\n\r\n\tprivate parseTexture(end:number /*uint*/):TextureVO\r\n\t{\r\n\t\tvar tex:TextureVO;\r\n\r\n\t\ttex = new TextureVO();\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xA300:\r\n\t\t\t\t\ttex.url = this.readNulTermstring();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// Skip this unknown texture sub-chunk\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._textures[tex.url] = tex;\r\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\r\n\r\n\t\treturn tex;\r\n\t}\r\n\r\n\tprivate parseVertexList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.verts.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar x:number, y:number, z:number;\r\n\r\n\t\t\tx = this._byteData.readFloat();\r\n\t\t\ty = this._byteData.readFloat();\r\n\t\t\tz = this._byteData.readFloat();\r\n\r\n\t\t\tthis._cur_obj.verts[i++] = x;\r\n\t\t\tthis._cur_obj.verts[i++] = z;\r\n\t\t\tthis._cur_obj.verts[i++] = y;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.indices.length;\r\n\t\twhile (i < len) {\r\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\r\n\r\n\t\t\ti0 = this._byteData.readUnsignedShort();\r\n\t\t\ti1 = this._byteData.readUnsignedShort();\r\n\t\t\ti2 = this._byteData.readUnsignedShort();\r\n\r\n\t\t\tthis._cur_obj.indices[i++] = i0;\r\n\t\t\tthis._cur_obj.indices[i++] = i2;\r\n\t\t\tthis._cur_obj.indices[i++] = i1;\r\n\r\n\t\t\t// Skip \"face info\", irrelevant in Away3D\r\n\t\t\tthis._byteData.position += 2;\r\n\t\t}\r\n\r\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\r\n\t}\r\n\r\n\tprivate parseSmoothingGroups():void\r\n\t{\r\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\r\n\t\tvar i:number /*uint*/ = 0;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseUVList():void\r\n\t{\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar len:number /*uint*/;\r\n\t\tvar count:number /*uint*/;\r\n\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\r\n\r\n\t\ti = 0;\r\n\t\tlen = this._cur_obj.uvs.length;\r\n\t\twhile (i < len) {\r\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\r\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate parseFaceMaterialList():void\r\n\t{\r\n\t\tvar mat:string;\r\n\t\tvar count:number /*uint*/;\r\n\t\tvar i:number /*uint*/;\r\n\t\tvar faces:Array<number> /*uint*/;\r\n\r\n\t\tmat = this.readNulTermstring();\r\n\t\tcount = this._byteData.readUnsignedShort();\r\n\r\n\t\tfaces = new Array<number>(count) /*uint*/;\r\n\t\ti = 0;\r\n\t\twhile (i < faces.length)\r\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\r\n\r\n\t\tthis._cur_obj.materials.push(mat);\r\n\t\tthis._cur_obj.materialFaces[mat] = faces;\r\n\t}\r\n\r\n\tprivate parseObjectAnimation(end:number):void\r\n\t{\r\n\t\tvar vo:ObjectVO;\r\n\t\tvar obj:DisplayObjectContainer;\r\n\t\tvar pivot:Vector3D;\r\n\t\tvar name:string;\r\n\t\tvar hier:number /*uint*/;\r\n\r\n\t\t// Pivot defaults to origin\r\n\t\tpivot = new Vector3D;\r\n\r\n\t\twhile (this._byteData.position < end) {\r\n\t\t\tvar cid:number /*uint*/;\r\n\t\t\tvar len:number /*uint*/;\r\n\r\n\t\t\tcid = this._byteData.readUnsignedShort();\r\n\t\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\t\tswitch (cid) {\r\n\t\t\t\tcase 0xb010: // Name/hierarchy\r\n\t\t\t\t\tname = this.readNulTermstring();\r\n\t\t\t\t\tthis._byteData.position += 4;\r\n\t\t\t\t\thier = this._byteData.readShort();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0xb013: // Pivot\r\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\r\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\r\n\t\t// and will be ignored in this version of the parser\r\n\t\t// TODO: Implement containers in 3DS parser.\r\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\r\n\t\t\tvo = this._unfinalized_objects[name];\r\n\t\t\tobj = this.constructObject(vo, pivot);\r\n\r\n\t\t\tif (obj) {\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tdelete this._unfinalized_objects[name];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\r\n\t{\r\n\t\tif (obj.type == Mesh.assetType) {\r\n\t\t\tvar i:number /*uint*/;\r\n\t\t\tvar sub:TriangleSubGeometry;\r\n\t\t\tvar geom:Geometry;\r\n\t\t\tvar mat:MaterialBase;\r\n\t\t\tvar mesh:Mesh;\r\n\t\t\tvar mtx:Matrix3D;\r\n\t\t\tvar vertices:Array<VertexVO>;\r\n\t\t\tvar faces:Array<FaceVO>;\r\n\r\n\t\t\tif (obj.materials.length > 1)\r\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\r\n\r\n\t\t\t// Ignore empty objects\r\n\t\t\tif (!obj.indices || obj.indices.length == 0)\r\n\t\t\t\treturn null;\r\n\r\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\r\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\r\n\r\n\t\t\tthis.prepareData(vertices, faces, obj);\r\n\r\n\t\t\tif (this._useSmoothingGroups)\r\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\r\n\r\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\r\n\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\r\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\r\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\r\n\t\t\t}\r\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\r\n\r\n\t\t\tfor (i = 0; i < faces.length; i++) {\r\n\t\t\t\tobj.indices[i*3] = faces[i].a;\r\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\r\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\r\n\t\t\t}\r\n\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\r\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\r\n\t\t\t\t// will be nonsense and should be skipped.\r\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\r\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\r\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tgeom = new Geometry();\r\n\r\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\r\n\t\t\t// and add them to geometry.\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.updateIndices(obj.indices);\r\n\t\t\tsub.updatePositions(obj.verts);\r\n\t\t\tsub.updateUVs(obj.uvs);\r\n\r\n\t\t\tgeom.addSubGeometry(sub);\r\n\r\n\t\t\tif (obj.materials.length > 0) {\r\n\t\t\t\tvar mname:string;\r\n\t\t\t\tmname = obj.materials[0];\r\n\t\t\t\tmat = this._materials[mname].material;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply pivot translation to geometry if a pivot was\r\n\t\t\t// found while parsing the keyframe chunk earlier.\r\n\t\t\tif (pivot) {\r\n\t\t\t\tif (obj.transform) {\r\n\t\t\t\t\t// If a transform was found while parsing the\r\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\r\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\r\n\t\t\t\t\tdat[12] = 0;\r\n\t\t\t\t\tdat[13] = 0;\r\n\t\t\t\t\tdat[14] = 0;\r\n\t\t\t\t\tmtx = new Matrix3D(dat);\r\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpivot.scaleBy(-1);\r\n\r\n\t\t\t\tmtx = new Matrix3D();\r\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Apply transformation to geometry if a transformation\r\n\t\t\t// was found while parsing the object chunk earlier.\r\n\t\t\tif (obj.transform) {\r\n\t\t\t\tmtx = new Matrix3D(obj.transform);\r\n\t\t\t\tmtx.invert();\r\n\t\t\t\tgeom.applyTransformation(mtx);\r\n\t\t\t}\r\n\r\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\r\n\t\t\t// which will no longer be modified after this point.\r\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\r\n\r\n\t\t\t// Build mesh and return it\r\n\t\t\tmesh = new Mesh(geom, mat);\r\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\r\n\t\t// If reached, unknown\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\r\n\t{\r\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar len:number /*int*/ = obj.verts.length;\r\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\r\n\t\t\tvar v:VertexVO = new VertexVO;\r\n\t\t\tv.x = obj.verts[i++];\r\n\t\t\tv.y = obj.verts[i++];\r\n\t\t\tv.z = obj.verts[i++];\r\n\t\t\tif (obj.uvs) {\r\n\t\t\t\tv.u = obj.uvs[j++];\r\n\t\t\t\tv.v = obj.uvs[j++];\r\n\t\t\t}\r\n\t\t\tvertices[k++] = v;\r\n\t\t}\r\n\t\tlen = obj.indices.length;\r\n\t\tfor (i = 0, k = 0; i < len;) {\r\n\t\t\tvar f:FaceVO = new FaceVO();\r\n\t\t\tf.a = obj.indices[i++];\r\n\t\t\tf.b = obj.indices[i++];\r\n\t\t\tf.c = obj.indices[i++];\r\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\r\n\t\t\tfaces[k++] = f;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\r\n\t{\r\n\t\t// clone vertices according to following rule:\r\n\t\t// clone if vertex's in faces from groups 1+2 and 3\r\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\r\n\r\n\t\tvar i:number /*int*/;\r\n\t\tvar j:number /*int*/;\r\n\t\tvar k:number /*int*/;\r\n\t\tvar l:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar numVerts:number /*uint*/ = vertices.length;\r\n\t\tvar numFaces:number /*uint*/ = faces.length;\r\n\r\n\t\t// extract groups data for vertices\r\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++)\r\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tvar face:FaceVO = faces[i];\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\r\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\r\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\r\n\t\t\t\t\tif ((group & groups[k]) > 0) {\r\n\t\t\t\t\t\tgroup |= groups[k];\r\n\t\t\t\t\t\tgroups.splice(k, 1);\r\n\t\t\t\t\t\tk = groups.length - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tgroups.push(group);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// clone vertices\r\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\r\n\t\tfor (i = 0; i < numVerts; i++) {\r\n\t\t\tif ((len = vGroups[i].length) < 1)\r\n\t\t\t\tcontinue;\r\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\r\n\t\t\tvClones[i] = clones;\r\n\t\t\tclones[0] = i;\r\n\t\t\tvar v0:VertexVO = vertices[i];\r\n\t\t\tfor (j = 1; j < len; j++) {\r\n\t\t\t\tvar v1:VertexVO = new VertexVO;\r\n\t\t\t\tv1.x = v0.x;\r\n\t\t\t\tv1.y = v0.y;\r\n\t\t\t\tv1.z = v0.z;\r\n\t\t\t\tv1.u = v0.u;\r\n\t\t\t\tv1.v = v0.v;\r\n\t\t\t\tclones[j] = vertices.length;\r\n\t\t\t\tvertices.push(v1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tnumVerts = vertices.length;\r\n\r\n\t\tfor (i = 0; i < numFaces; i++) {\r\n\t\t\tface = faces[i];\r\n\t\t\tgroup = face.smoothGroup;\r\n\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\r\n\t\t\t\tgroups = vGroups[k];\r\n\t\t\t\tlen = groups.length;\r\n\t\t\t\tclones = vClones[k];\r\n\t\t\t\tfor (l = 0; l < len; l++) {\r\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\r\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\r\n\t\t\t\t\t\tif (group == 0) {\r\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\r\n\t\t\t\t\t\t\tgroups.splice(l, 1);\r\n\t\t\t\t\t\t\tclones.splice(l, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (j == 0)\r\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\r\n\t\t\t\t\t\t\tface.b = index; else\r\n\t\t\t\t\t\t\tface.c = index;\r\n\t\t\t\t\t\tl = len;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate finalizeCurrentMaterial():void\r\n\t{\r\n\t\tvar mat:MethodMaterial;\r\n\r\n\t\tif (this._cur_mat.colorMap)\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\r\n\t\telse\r\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\r\n\r\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\r\n\t\tmat.specularColor = this._cur_mat.specularColor;\r\n\r\n\t\tif (this.materialMode >= 2)\r\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\r\n\r\n\t\tmat.bothSides = this._cur_mat.twoSided;\r\n\r\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\r\n\r\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\r\n\t\tthis._cur_mat.material = mat;\r\n\r\n\t\tthis._cur_mat = null;\r\n\t}\r\n\r\n\tprivate readNulTermstring():string\r\n\t{\r\n\t\tvar chr:number /*int*/;\r\n\t\tvar str:string = \"\";\r\n\r\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\r\n\t\t\tstr += String.fromCharCode(chr);\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\tprivate readTransform():Array<number>\r\n\t{\r\n\t\tvar data:Array<number>;\r\n\r\n\t\tdata = new Array<number>(16);\r\n\r\n\t\t// X axis\r\n\t\tdata[0] = this._byteData.readFloat(); // X\r\n\t\tdata[2] = this._byteData.readFloat(); // Z\r\n\t\tdata[1] = this._byteData.readFloat(); // Y\r\n\t\tdata[3] = 0;\r\n\r\n\t\t// Z axis\r\n\t\tdata[8] = this._byteData.readFloat(); // X\r\n\t\tdata[10] = this._byteData.readFloat(); // Z\r\n\t\tdata[9] = this._byteData.readFloat(); // Y\r\n\t\tdata[11] = 0;\r\n\r\n\t\t// Y Axis\r\n\t\tdata[4] = this._byteData.readFloat(); // X\r\n\t\tdata[6] = this._byteData.readFloat(); // Z\r\n\t\tdata[5] = this._byteData.readFloat(); // Y\r\n\t\tdata[7] = 0;\r\n\r\n\t\t// Translation\r\n\t\tdata[12] = this._byteData.readFloat(); // X\r\n\t\tdata[14] = this._byteData.readFloat(); // Z\r\n\t\tdata[13] = this._byteData.readFloat(); // Y\r\n\t\tdata[15] = 1;\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate readColor():number /*int*/\r\n\t{\r\n\t\tvar cid:number /*int*/;\r\n\t\tvar len:number /*int*/;\r\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\r\n\r\n\t\tcid = this._byteData.readUnsignedShort();\r\n\t\tlen = this._byteData.readUnsignedInt();\r\n\r\n\t\tswitch (cid) {\r\n\t\t\tcase 0x0010: // Floats\r\n\t\t\t\tr = this._byteData.readFloat()*255;\r\n\t\t\t\tg = this._byteData.readFloat()*255;\r\n\t\t\t\tb = this._byteData.readFloat()*255;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x0011: // 24-bit color\r\n\t\t\t\tr = this._byteData.readUnsignedByte();\r\n\t\t\t\tg = this._byteData.readUnsignedByte();\r\n\t\t\t\tb = this._byteData.readUnsignedByte();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis._byteData.position += (len - 6);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn (r << 16) | (g << 8) | b;\r\n\t}\r\n}\r\n\r\nexport = Max3DSParser;\r\n\r\n/**\r\n *\r\n */\r\nclass FaceVO\r\n{\r\n\tpublic a:number /*int*/;\r\n\tpublic b:number /*int*/;\r\n\tpublic c:number /*int*/;\r\n\tpublic smoothGroup:number /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass MaterialVO\r\n{\r\n\tpublic name:string;\r\n\tpublic ambientColor:number /*int*/;\r\n\tpublic diffuseColor:number /*int*/;\r\n\tpublic specularColor:number /*int*/;\r\n\tpublic twoSided:boolean;\r\n\tpublic colorMap:TextureVO;\r\n\tpublic specularMap:TextureVO;\r\n\tpublic material:MaterialBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass ObjectVO\r\n{\r\n\tpublic name:string;\r\n\tpublic type:string;\r\n\tpublic pivotX:number;\r\n\tpublic pivotY:number;\r\n\tpublic pivotZ:number;\r\n\tpublic transform:Array<number>;\r\n\tpublic verts:Array<number>;\r\n\tpublic indices:Array<number> /*int*/;\r\n\tpublic uvs:Array<number>;\r\n\tpublic materialFaces:Object;\r\n\tpublic materials:Array<string>;\r\n\tpublic smoothingGroups:Array<number> /*int*/;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass TextureVO\r\n{\r\n\tpublic url:string;\r\n\tpublic texture:Texture2DBase;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass VertexVO\r\n{\r\n\tpublic x:number;\r\n\tpublic y:number;\r\n\tpublic z:number;\r\n\tpublic u:number;\r\n\tpublic v:number;\r\n\tpublic normal:Vector3D;\r\n\tpublic tangent:Vector3D;\r\n}",
    "import TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\r\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\r\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\r\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\r\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\r\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\r\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\r\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\r\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\r\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\r\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\r\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\r\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\r\n\r\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\r\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\r\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\r\n\r\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\r\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\r\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\r\n\r\n/**\r\n * OBJParser provides a parser for the OBJ data type.\r\n */\r\nclass OBJParser extends ParserBase\r\n{\r\n\tprivate _textData:string;\r\n\tprivate _startedParsing:boolean;\r\n\tprivate _charIndex:number;\r\n\tprivate _oldIndex:number;\r\n\tprivate _stringLength:number;\r\n\tprivate _currentObject:ObjectGroup;\r\n\tprivate _currentGroup:Group;\r\n\tprivate _currentMaterialGroup:MaterialGroup;\r\n\tprivate _objects:Array<ObjectGroup>;\r\n\tprivate _materialIDs:string[];\r\n\tprivate _materialLoaded:Array<LoadedMaterial>;\r\n\tprivate _materialSpecularData:Array<SpecularData>;\r\n\tprivate _meshes:Array<Mesh>;\r\n\tprivate _lastMtlID:string;\r\n\tprivate _objectIndex:number;\r\n\tprivate _realIndices;\r\n\tprivate _vertexIndex:number;\r\n\tprivate _vertices:Array<Vertex>;\r\n\tprivate _vertexNormals:Array<Vertex>;\r\n\tprivate _uvs:Array<UV>;\r\n\tprivate _scale:number;\r\n\tprivate _mtlLib:boolean;\r\n\tprivate _mtlLibLoaded:boolean = true;\r\n\tprivate _activeMaterialID:string = \"\";\r\n\r\n\t/**\r\n\t * Creates a new OBJParser object.\r\n\t * @param uri The url or id of the data or file to be parsed.\r\n\t * @param extra The holder for extra contextual data that the parser might need.\r\n\t */\r\n\tconstructor(scale:number = 1)\r\n\t{\r\n\t\tsuper(URLLoaderDataFormat.TEXT);\r\n\t\tthis._scale = scale;\r\n\t}\r\n\r\n\t/**\r\n\t * Scaling factor applied directly to vertices data\r\n\t * @param value The scaling factor.\r\n\t */\r\n\tpublic set scale(value:number)\r\n\t{\r\n\t\tthis._scale = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not a given file extension is supported by the parser.\r\n\t * @param extension The file extension of a potential file to be parsed.\r\n\t * @return Whether or not the given file type is supported.\r\n\t */\r\n\tpublic static supportsType(extension:string):boolean\r\n\t{\r\n\t\textension = extension.toLowerCase();\r\n\t\treturn extension == \"obj\";\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether a data block can be parsed by the parser.\r\n\t * @param data The data block to potentially be parsed.\r\n\t * @return Whether or not the given data is supported.\r\n\t */\r\n\tpublic static supportsData(data:any):boolean\r\n\t{\r\n\t\tvar content:string = ParserUtils.toString(data);\r\n\t\tvar hasV:boolean = false;\r\n\t\tvar hasF:boolean = false;\r\n\r\n\t\tif (content) {\r\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\r\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\r\n\t\t}\r\n\r\n\t\treturn hasV && hasF;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == 'mtl') {\r\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\r\n\t\t\tthis.parseMtl(str);\r\n\r\n\t\t} else {\r\n\t\t\tvar asset:IAsset;\r\n\r\n\t\t\tif (resourceDependency.assets.length != 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tasset = resourceDependency.assets[0];\r\n\r\n\t\t\tif (asset.isAsset(TextureBase)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\t\tlm.texture = <Texture2DBase> asset;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0) {\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\r\n\t{\r\n\t\tif (resourceDependency.id == \"mtl\") {\r\n\t\t\tthis._mtlLib = false;\r\n\t\t\tthis._mtlLibLoaded = false;\r\n\t\t} else {\r\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\tlm.materialID = resourceDependency.id;\r\n\t\t\tthis._materialLoaded.push(lm);\r\n\t\t}\r\n\r\n\t\tif (this._meshes.length > 0)\r\n\t\t\tthis.applyMaterial(lm);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pProceedParsing():boolean\r\n\t{\r\n\t\tvar line:string;\r\n\t\tvar creturn:string = String.fromCharCode(10);\r\n\t\tvar trunk;\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._textData = this._pGetTextData();\r\n\t\t\t// Merge linebreaks that are immediately preceeded by\r\n\t\t\t// the \"escape\" backward slash into single lines.\r\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\r\n\t\t}\r\n\r\n\t\tif (this._textData.indexOf(creturn) == -1)\r\n\t\t\tcreturn = String.fromCharCode(13);\r\n\r\n\t\tif (!this._startedParsing) {\r\n\t\t\tthis._startedParsing = true;\r\n\t\t\tthis._vertices = new Array<Vertex>();\r\n\t\t\tthis._vertexNormals = new Array<Vertex>();\r\n\t\t\tthis._materialIDs = new Array<string>();\r\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\r\n\t\t\tthis._meshes = new Array<Mesh>();\r\n\t\t\tthis._uvs = new Array<UV>();\r\n\t\t\tthis._stringLength = this._textData.length;\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\r\n\t\t\tthis._oldIndex = 0;\r\n\t\t\tthis._objects = new Array<ObjectGroup>();\r\n\t\t\tthis._objectIndex = 0;\r\n\t\t}\r\n\r\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\r\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\r\n\r\n\t\t\tif (this._charIndex == -1)\r\n\t\t\t\tthis._charIndex = this._stringLength;\r\n\r\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\r\n\t\t\tline = line.split('\\r').join(\"\");\r\n\t\t\tline = line.replace(\"  \", \" \");\r\n\t\t\ttrunk = line.split(\" \");\r\n\t\t\tthis._oldIndex = this._charIndex + 1;\r\n\t\t\tthis.parseLine(trunk);\r\n\r\n\t\t\t// If whatever was parsed on this line resulted in the\r\n\t\t\t// parsing being paused to retrieve dependencies, break\r\n\t\t\t// here and do not continue parsing until un-paused.\r\n\t\t\tif (this.parsingPaused) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this._charIndex >= this._stringLength) {\r\n\r\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\r\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t\t\t}\r\n\r\n\t\t\tthis.translate();\r\n\t\t\tthis.applyMaterials();\r\n\r\n\t\t\treturn ParserBase.PARSING_DONE;\r\n\t\t}\r\n\r\n\t\treturn ParserBase.MORE_TO_PARSE;\r\n\t}\r\n\r\n\tpublic _pStartParsing(frameLimit:number)\r\n\t{\r\n\t\tsuper._pStartParsing(frameLimit);\r\n\r\n\t\t//create a content object for Loaders\r\n\t\tthis._pContent = new DisplayObjectContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a single line in the OBJ file.\r\n\t */\r\n\tprivate parseLine(trunk)\r\n\t{\r\n\t\tswitch (trunk[0]) {\r\n\r\n\t\t\tcase \"mtllib\":\r\n\r\n\t\t\t\tthis._mtlLib = true;\r\n\t\t\t\tthis._mtlLibLoaded = false;\r\n\t\t\t\tthis.loadMtl(trunk[1]);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"g\":\r\n\r\n\t\t\t\tthis.createGroup(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"o\":\r\n\r\n\t\t\t\tthis.createObject(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"usemtl\":\r\n\r\n\t\t\t\tif (this._mtlLib) {\r\n\r\n\t\t\t\t\tif (!trunk[1])\r\n\t\t\t\t\t\ttrunk[1] = \"def000\";\r\n\r\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\r\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\r\n\r\n\t\t\t\t\tif (this._currentGroup)\r\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"v\":\r\n\r\n\t\t\t\tthis.parseVertex(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vt\":\r\n\r\n\t\t\t\tthis.parseUV(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"vn\":\r\n\r\n\t\t\t\tthis.parseVertexNormal(trunk);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"f\":\r\n\r\n\t\t\t\tthis.parseFace(trunk);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the parsed data into an Away3D scenegraph structure\r\n\t */\r\n\tprivate translate()\r\n\t{\r\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\r\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\r\n\t\t\tvar numGroups:number = groups.length;\r\n\t\t\tvar materialGroups:Array<MaterialGroup>;\r\n\t\t\tvar numMaterialGroups:number;\r\n\t\t\tvar geometry:Geometry;\r\n\t\t\tvar mesh:Mesh;\r\n\r\n\t\t\tvar m:number;\r\n\t\t\tvar sm:number;\r\n\t\t\tvar bmMaterial:MethodMaterial;\r\n\r\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\r\n\t\t\t\tgeometry = new Geometry();\r\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\r\n\t\t\t\tnumMaterialGroups = materialGroups.length;\r\n\r\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\r\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\r\n\r\n\t\t\t\tif (geometry.subGeometries.length == 0)\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// Finalize and force type-based name\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\r\n\r\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\r\n\r\n\t\t\t\t//check for multipass\r\n\t\t\t\tif (this.materialMode >= 2)\r\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\r\n\r\n\t\t\t\tif (this._objects[objIndex].name) {\r\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\r\n\r\n\t\t\t\t} else if (groups[g].name) {\r\n\r\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\r\n\t\t\t\t\tmesh.name = groups[g].name;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No name stored. Use empty string which will force it\r\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\r\n\t\t\t\t\tmesh.name = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._meshes.push(mesh);\r\n\r\n\t\t\t\tif (groups[g].materialID != \"\")\r\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\r\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\r\n\r\n\t\t\t\tif (mesh.subMeshes.length > 1) {\r\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\r\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//add to the content property\r\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\r\n\r\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translates an obj's material group to a subgeometry.\r\n\t * @param materialGroup The material group data to convert.\r\n\t * @param geometry The Geometry to contain the converted SubGeometry.\r\n\t */\r\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\r\n\t{\r\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\r\n\t\tvar face:FaceData;\r\n\t\tvar numFaces:number = faces.length;\r\n\t\tvar numVerts:number;\r\n\t\tvar sub:TriangleSubGeometry;\r\n\r\n\t\tvar vertices:Array<number> = new Array<number>();\r\n\t\tvar uvs:Array<number> = new Array<number>();\r\n\t\tvar normals:Array<number> = new Array<number>();\r\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\r\n\r\n\t\tthis._realIndices = [];\r\n\t\tthis._vertexIndex = 0;\r\n\r\n\t\tvar j:number;\r\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\r\n\r\n\t\t\tface = faces[i];\r\n\t\t\tnumVerts = face.indexIds.length - 1;\r\n\r\n\t\t\tfor (j = 1; j < numVerts; ++j) {\r\n\r\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\r\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (vertices.length > 0) {\r\n\t\t\tsub = new TriangleSubGeometry(true);\r\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\r\n\t\t\tsub.updateIndices(indices);\r\n\t\t\tsub.updatePositions(vertices);\r\n\t\t\tsub.updateVertexNormals(normals);\r\n\t\t\tsub.updateUVs(uvs);\r\n\r\n\t\t\tgeometry.addSubGeometry(sub);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\r\n\t{\r\n\t\tvar index:number;\r\n\t\tvar vertex:Vertex;\r\n\t\tvar vertexNormal:Vertex;\r\n\t\tvar uv:UV;\r\n\r\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\r\n\r\n\t\t\tindex = this._vertexIndex;\r\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\r\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\r\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\r\n\r\n\t\t\tif (face.normalIndices.length > 0) {\r\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\r\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\r\n\t\t\t}\r\n\r\n\t\t\tif (face.uvIndices.length > 0) {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\r\n\t\t\t\t\tuvs.push(uv.u, uv.v);\r\n\r\n\t\t\t\t} catch (e) {\r\n\r\n\t\t\t\t\tswitch (vertexIndex) {\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\tuvs.push(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tuvs.push(.5, 0);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tuvs.push(1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\r\n\t\t}\r\n\r\n\t\tindices.push(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new object group.\r\n\t * @param trunk The data block containing the object tag and its parameters\r\n\t */\r\n\tprivate createObject(trunk)\r\n\t{\r\n\t\tthis._currentGroup = null;\r\n\t\tthis._currentMaterialGroup = null;\r\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentObject.name = trunk[1];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new group.\r\n\t * @param trunk The data block containing the group tag and its parameters\r\n\t */\r\n\tprivate createGroup(trunk)\r\n\t{\r\n\t\tif (!this._currentObject)\r\n\t\t\tthis.createObject(null);\r\n\t\tthis._currentGroup = new Group();\r\n\r\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\r\n\r\n\t\tif (trunk)\r\n\t\t\tthis._currentGroup.name = trunk[1];\r\n\t\tthis._currentObject.groups.push(this._currentGroup);\r\n\r\n\t\tthis.createMaterialGroup(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new material group.\r\n\t * @param trunk The data block containing the material tag and its parameters\r\n\t */\r\n\tprivate createMaterialGroup(trunk)\r\n\t{\r\n\t\tthis._currentMaterialGroup = new MaterialGroup();\r\n\t\tif (trunk)\r\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\r\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex coordinates.\r\n\t * @param trunk The data block containing the vertex tag and its parameters\r\n\t */\r\n\tprivate parseVertex(trunk)\r\n\t{\r\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\r\n\r\n\t\tvar v1:number, v2:number , v3:number;\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\r\n\t\t\tv1 = <number> nTrunk[0];\r\n\t\t\tv2 = <number> nTrunk[1];\r\n\t\t\tv3 = <number> -nTrunk[2];\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\r\n\t\t} else {\r\n\t\t\tv1 = <number> parseFloat(trunk[1]);\r\n\t\t\tv2 = <number> parseFloat(trunk[2]);\r\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\r\n\r\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next uv coordinates.\r\n\t * @param trunk The data block containing the uv tag and its parameters\r\n\t */\r\n\tprivate parseUV(trunk)\r\n\t{\r\n\t\tif (trunk.length > 3) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next vertex normal coordinates.\r\n\t * @param trunk The data block containing the vertex normal tag and its parameters\r\n\t */\r\n\tprivate parseVertexNormal(trunk)\r\n\t{\r\n\t\tif (trunk.length > 4) {\r\n\t\t\tvar nTrunk = [];\r\n\t\t\tvar val:number;\r\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\r\n\t\t\t\tval = parseFloat(trunk[i]);\r\n\t\t\t\tif (!isNaN(val))\r\n\t\t\t\t\tnTrunk.push(val);\r\n\t\t\t}\r\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\r\n\r\n\t\t} else {\r\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the next face's indices.\r\n\t * @param trunk The data block containing the face tag and its parameters\r\n\t */\r\n\tprivate parseFace(trunk)\r\n\t{\r\n\t\tvar len:number = trunk.length;\r\n\t\tvar face:FaceData = new FaceData();\r\n\r\n\t\tif (!this._currentGroup) {\r\n\t\t\tthis.createGroup(null);\r\n\t\t}\r\n\r\n\t\tvar indices;\r\n\t\tfor (var i:number = 1; i < len; ++i) {\r\n\r\n\t\t\tif (trunk[i] == \"\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tindices = trunk[i].split(\"/\");\r\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\r\n\r\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\r\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\r\n\r\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\r\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\r\n\r\n\t\t\tface.indexIds.push(trunk[i]);\r\n\t\t}\r\n\r\n\t\tthis._currentMaterialGroup.faces.push(face);\r\n\t}\r\n\r\n\t/**\r\n\t * This is a hack around negative face coords\r\n\t */\r\n\tprivate parseIndex(index:number, length:number):number\r\n\t{\r\n\t\tif (index < 0)\r\n\t\t\treturn index + length + 1; else\r\n\t\t\treturn index;\r\n\t}\r\n\r\n\tprivate parseMtl(data:string)\r\n\t{\r\n\t\tvar materialDefinitions = data.split('newmtl');\r\n\t\tvar lines;\r\n\t\tvar trunk;\r\n\t\tvar j:number;\r\n\r\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\r\n\t\tvar useSpecular:boolean;\r\n\t\tvar useColor:boolean;\r\n\t\tvar diffuseColor:number;\r\n\t\tvar color:number;\r\n\t\tvar specularColor:number;\r\n\t\tvar specular:number;\r\n\t\tvar alpha:number;\r\n\t\tvar mapkd:string;\r\n\r\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\r\n\r\n\r\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\r\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\r\n\r\n\t\t\tif (lines.length == 1)\r\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\r\n\r\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\r\n\t\t\tspecular = 0;\r\n\t\t\tuseSpecular = false;\r\n\t\t\tuseColor = false;\r\n\t\t\talpha = 1;\r\n\t\t\tmapkd = \"\";\r\n\r\n\t\t\tfor (j = 0; j < lines.length; ++j) {\r\n\r\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\r\n\r\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\r\n\t\t\t\t\ttrunk = lines[j].split(\" \");\r\n\r\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\r\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\r\n\r\n\t\t\t\t\tif (j == 0) {\r\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\r\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch (trunk[0]) {\r\n\r\n\t\t\t\t\t\t\tcase \"Ka\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\r\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ks\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Ns\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\r\n\t\t\t\t\t\t\t\tif (specular == 0)\r\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"Kd\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\r\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\r\n\t\t\t\t\t\t\t\t\tuseColor = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"tr\":\r\n\t\t\t\t\t\t\tcase \"d\":\r\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\r\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase \"map_Kd\":\r\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\r\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (mapkd != \"\") {\r\n\r\n\t\t\t\tif (useSpecular) {\r\n\r\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\r\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\r\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\r\n\r\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\r\n\t\t\t\t\tspecularData.alpha = alpha;\r\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\r\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\r\n\r\n\t\t\t\t\tif (!this._materialSpecularData)\r\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\r\n\r\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\r\n\r\n\t\t\t} else if (useColor && !isNaN(color)) {\r\n\r\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\r\n\t\t\t\tlm.materialID = this._lastMtlID;\r\n\r\n\t\t\t\tif (alpha == 0)\r\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\r\n\r\n\t\t\t\tvar cm:MethodMaterial;\r\n\r\n\t\t\t\tif (this.materialMode < 2) {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\r\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\t\t\t\t\tcolorMat.alpha = alpha;\r\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMat.specular = specular;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcm = new MethodMaterial(color);\r\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\r\n\r\n\r\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\r\n\t\t\t\t\tcolorMultiMat.repeat = true;\r\n\r\n\t\t\t\t\tif (useSpecular) {\r\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\r\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlm.cm = cm;\r\n\r\n\t\t\t\tthis._materialLoaded.push(lm);\r\n\r\n\t\t\t\tif (this._meshes.length > 0)\r\n\t\t\t\t\tthis.applyMaterial(lm);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._mtlLibLoaded = true;\r\n\t}\r\n\r\n\tprivate parseMapKdString(trunk):string\r\n\t{\r\n\t\tvar url:string = \"\";\r\n\t\tvar i:number;\r\n\t\tvar breakflag:boolean;\r\n\r\n\t\tfor (i = 1; i < trunk.length;) {\r\n\t\t\tswitch (trunk[i]) {\r\n\t\t\t\tcase \"-blendu\":\r\n\t\t\t\tcase \"-blendv\":\r\n\t\t\t\tcase \"-cc\":\r\n\t\t\t\tcase \"-clamp\":\r\n\t\t\t\tcase \"-texres\":\r\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-mm\":\r\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-o\":\r\n\t\t\t\tcase \"-s\":\r\n\t\t\t\tcase \"-t\":\r\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreakflag = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (breakflag)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//Reconstruct URL/filename\r\n\t\tfor (i; i < trunk.length; i++) {\r\n\t\t\turl += trunk[i];\r\n\t\t\turl += \" \";\r\n\t\t}\r\n\r\n\t\t//Remove the extraneous space and/or newline from the right side\r\n\t\turl = url.replace(/\\s+$/, \"\");\r\n\r\n\t\treturn url;\r\n\t}\r\n\r\n\tprivate loadMtl(mtlurl:string)\r\n\t{\r\n\t\t// Add raw-data dependency to queue and load dependencies now,\r\n\t\t// which will pause the parsing in the meantime.\r\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\r\n\t\tthis._pPauseAndRetrieveDependencies();//\r\n\t}\r\n\r\n\tprivate applyMaterial(lm:LoadedMaterial)\r\n\t{\r\n\t\tvar decomposeID;\r\n\t\tvar mesh:Mesh;\r\n\t\tvar tm:MethodMaterial;\r\n\t\tvar j:number;\r\n\t\tvar specularData:SpecularData;\r\n\r\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\r\n\t\t\tmesh = this._meshes[i];\r\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\r\n\r\n\t\t\tif (decomposeID[0] == lm.materialID) {\r\n\r\n\t\t\t\tif (lm.cm) {\r\n\t\t\t\t\tif (mesh.material)\r\n\t\t\t\t\t\tmesh.material = null;\r\n\t\t\t\t\tmesh.material = lm.cm;\r\n\r\n\t\t\t\t} else if (lm.texture) {\r\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\r\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.alpha = lm.alpha;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\r\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\r\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\r\n\r\n\t\t\t\t\t\ttm.texture = lm.texture;\r\n\t\t\t\t\t\ttm.color = lm.color;\r\n\t\t\t\t\t\ttm.repeat = true;\r\n\r\n\t\t\t\t\t\tif (lm.specularMethod) {\r\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\r\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\r\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\r\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\r\n\t\t\t\t\t\t\ttm.specularMethod = null;\r\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\r\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\r\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\r\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\r\n\r\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\r\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\r\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\r\n\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\r\n\t\t\t\tthis._meshes.splice(i, 1);\r\n\t\t\t\t--i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lm.cm || tm)\r\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\r\n\t}\r\n\r\n\tprivate applyMaterials()\r\n\t{\r\n\t\tif (this._materialLoaded.length == 0)\r\n\t\t\treturn;\r\n\r\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\r\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\r\n\t}\r\n}\r\n\r\nexport = OBJParser;\r\n\r\nclass ObjectGroup\r\n{\r\n\tpublic name:string;\r\n\tpublic groups:Group[] = new Array<Group>();\r\n}\r\n\r\nclass Group\r\n{\r\n\tpublic name:string;\r\n\tpublic materialID:string;\r\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\r\n}\r\n\r\nclass MaterialGroup\r\n{\r\n\tpublic url:string;\r\n\tpublic faces:FaceData[] = new Array<FaceData>();\r\n}\r\n\r\nclass SpecularData\r\n{\r\n\tpublic materialID:string;\r\n\tpublic basicSpecularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass LoadedMaterial\r\n{\r\n\tpublic materialID:string;\r\n\tpublic texture:Texture2DBase;\r\n\tpublic cm:MaterialBase;\r\n\tpublic specularMethod:SpecularBasicMethod;\r\n\tpublic color:number = 0xFFFFFF;\r\n\tpublic alpha:number = 1;\r\n}\r\n\r\nclass FaceData\r\n{\r\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\r\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\r\n}\r\n\r\n/**\r\n* Texture coordinates value object.\r\n*/\r\nclass UV\r\n{\r\n\tprivate _u:number;\r\n\tprivate _v:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>UV</code> object.\r\n\t *\r\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\r\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\r\n\t */\r\n\tconstructor(u:number = 0, v:number = 0)\r\n\t{\r\n\t\tthis._u = u;\r\n\t\tthis._v = v;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the vertical coordinate of the texture value.\r\n\t */\r\n\tpublic get v():number\r\n\t{\r\n\t\treturn this._v;\r\n\t}\r\n\r\n\tpublic set v(value:number)\r\n\t{\r\n\t\tthis._v = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the horizontal coordinate of the texture value.\r\n\t */\r\n\tpublic get u():number\r\n\t{\r\n\t\treturn this._u;\r\n\t}\r\n\r\n\tpublic set u(value:number)\r\n\t{\r\n\t\tthis._u = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new UV value Object\r\n\t */\r\n\tpublic clone():UV\r\n\t{\r\n\t\treturn new UV(this._u, this._v);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the value object as a string for trace/debug purpose\r\n\t */\r\n\tpublic toString():string\r\n\t{\r\n\t\treturn this._u + \",\" + this._v;\r\n\t}\r\n}\r\n\r\nclass Vertex\r\n{\r\n\tprivate _x:number;\r\n\tprivate _y:number;\r\n\tprivate _z:number;\r\n\tprivate _index:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>Vertex</code> value object.\r\n\t *\r\n\t * @param    x            [optional]    The x value. Defaults to 0.\r\n\t * @param    y            [optional]    The y value. Defaults to 0.\r\n\t * @param    z            [optional]    The z value. Defaults to 0.\r\n\t * @param    index        [optional]    The index value. Defaults is NaN.\r\n\t */\r\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\r\n\t{\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._index = index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the index of value object\r\n\t * @param    ind        The index\r\n\t */\r\n\tpublic set index(ind:number)\r\n\t{\r\n\t\tthis._index = ind;\r\n\t}\r\n\r\n\tpublic get index():number\r\n\t{\r\n\t\treturn this._index;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the x value of the value object\r\n\t * @param    value        The x value\r\n\t */\r\n\tpublic get x():number\r\n\t{\r\n\t\treturn this._x;\r\n\t}\r\n\r\n\tpublic set x(value:number)\r\n\t{\r\n\t\tthis._x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the y value of the value object\r\n\t * @param    value        The y value\r\n\t */\r\n\tpublic get y():number\r\n\t{\r\n\t\treturn this._y;\r\n\t}\r\n\r\n\tpublic set y(value:number)\r\n\t{\r\n\t\tthis._y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * To define/store the z value of the value object\r\n\t * @param    value        The z value\r\n\t */\r\n\tpublic get z():number\r\n\t{\r\n\t\treturn this._z;\r\n\t}\r\n\r\n\tpublic set z(value:number)\r\n\t{\r\n\t\tthis._z = value;\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new Vertex value Object\r\n\t */\r\n\tpublic clone():Vertex\r\n\t{\r\n\t\treturn new Vertex(this._x, this._y, this._z);\r\n\t}\r\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\r\n\r\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\r\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\r\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\r\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\r\n\r\n/**\r\n *\r\n */\r\nclass Parsers\r\n{\r\n\t/**\r\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\r\n\t * enable support for all bundled parsers to the file format auto-detection\r\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\r\n\t *\r\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\r\n\t *\r\n\t * Beware however that this requires all parser classes to be included in the\r\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\r\n\t * file formats are used, SWF file size can be saved by adding the parsers\r\n\t * individually using AssetLibrary.enableParser()\r\n\t *\r\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\r\n\t * the auto-detection mechanisms altogether, while at the same time allowing\r\n\t * any properties that are unique to that parser to be set for that load.\r\n\t *\r\n\t * The bundled parsers are:\r\n\t *\r\n\t * <ul>\r\n\t * <li>AC3D (.ac)</li>\r\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\r\n\t * <li>3DMax (.3ds)</li>\r\n\t * <li>DXF (.dxf)</li>\r\n\t * <li>Quake 2 MD2 models (.md2)</li>\r\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\r\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\r\n\t * <li>Wavefront OBJ (.obj)</li>\r\n\t * <li>Collada (.dae)</li>\r\n\t * <li>Images (.jpg, .png)</li>\r\n\t * </ul>\r\n\t *\r\n\t * @see away.library.AssetLibrary.enableParser\r\n\t */\r\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\r\n\r\n\t/**\r\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\r\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\r\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\r\n\t *\r\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\r\n\t *\r\n\t * @see away.parsers.Parsers.ALL_BUNDLED\r\n\t */\r\n\tpublic static enableAllBundled():void\r\n\t{\r\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\r\n\t}\r\n}\r\n\r\nexport = Parsers;"
  ],
  "sourceRoot": ""
}