{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","awayjs-parsers/lib/AWDParser.ts","awayjs-parsers/lib/MD2Parser.ts","awayjs-parsers/lib/MD5AnimParser.ts","awayjs-parsers/lib/MD5MeshParser.ts","awayjs-parsers/lib/Max3DSParser.ts","awayjs-parsers/lib/OBJParser.ts","awayjs-parsers/lib/Parsers.ts"],"names":[],"mappings":"AAAA,QAAA,QAAA,GAAA,EAAA,EAAA,GAAA,QAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GAAA,CAAA,IAAA,EAAA,GAAA,CAAA,GAAA,GAAA,kBAAA,UAAA,OAAA,KAAA,GAAA,EAAA,MAAA,GAAA,GAAA,EAAA,IAAA,EAAA,MAAA,GAAA,GAAA,EAAA,IAAA,GAAA,GAAA,OAAA,uBAAA,EAAA,IAAA,MAAA,GAAA,KAAA,mBAAA,EAAA,GAAA,GAAA,EAAA,IAAA,WAAA,GAAA,GAAA,GAAA,KAAA,EAAA,QAAA,SAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,MAAA,GAAA,GAAA,QAAA,IAAA,GAAA,GAAA,kBAAA,UAAA,QAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,GAAA,OAAA,KAAA,gCAAA,SAAA,EAAA,kKCCO,EAAc,EAAe,uCAC7B,EAAQ,EAAiB,iCACzB,EAAQ,EAAiB,iCACzB,EAAmB,EAAc,2CACjC,EAAU,EAAgB,kCAC1B,EAAS,EAAgB,qCAEzB,EAAU,EAAgB,sCAC1B,EAAW,EAAgB,uCAG3B,EAAqB,EAAa,qDAClC,EAAsB,EAAa,sDACnC,EAA+B,EAAW,+DAC1C,EAAiB,EAAc,8CAG/B,EAAgB,EAAe,6CAC/B,EAAY,EAAgB,yCAG5B,EAAS,EAAgB,mCAEzB,EAAsB,EAAa,wDACnC,EAAS,EAAgB,qCAEzB,EAAQ,EAAiB,oCAEzB,EAAmB,EAAc,+CACjC,EAAgB,EAAe,gDAC/B,EAAU,EAAgB,0CAC1B,EAAM,EAAiB,sCACvB,EAAI,EAAkB,oCACtB,EAAM,EAAiB,sCAGvB,EAAiB,EAAc,+DAC/B,EAAmB,EAAc,kEACjC,EAAuB,EAAa,sEAEpC,EAAU,EAAgB,yCAC1B,EAAsB,EAAa,qDACnC,EAAmB,EAAc,kDACjC,EAAmB,EAAc,kDACjC,EAAuB,EAAa,sDACpC,EAAoB,EAAc,mDAClC,EAAqB,EAAa,oDAClC,EAAoB,EAAc,mDAIlC,EAAkB,EAAc,sDAChC,EAAc,EAAe,kDAC7B,EAAoB,EAAc,wDAClC,EAAgB,EAAe,oDAC/B,EAAS,EAAgB,kDACzB,EAAQ,EAAiB,iDACzB,EAAY,EAAgB,qDAC5B,EAAa,EAAe,sDAC5B,EAAgB,EAAe,0DAC/B,EAAc,EAAe,wDAC7B,EAAsB,EAAa,yDACnC,EAAc,EAAe,kDAE7B,EAAoB,EAAc,mDAClC,EAAsB,EAAa,qDACnC,EAAmB,EAAc,0DACjC,EAAkB,EAAc,yDAChC,GAAgB,EAAe,uDAC/B,GAAqB,EAAa,4DAClC,GAAqB,EAAa,4DAClC,GAAiB,EAAc,wDAC/B,GAAqB,EAAa,4DAClC,GAAuB,EAAa,8DACpC,GAA0B,EAAY,iEACtC,GAAkB,EAAc,yDAChC,GAAe,EAAe,sDAC9B,GAAyB,EAAY,gEACrC,GAAoB,EAAc,2DAElC,GAAoB,EAAc,2DAClC,GAAuB,EAAa,8DACpC,GAAoB,EAAc,2DAClC,GAAoB,EAAc,2DAElC,GAAqB,EAAa,4DAClC,GAAgB,EAAe,uDAC/B,GAAyB,EAAY,gEACrC,GAAiB,EAAc,wDAC/B,GAAmB,EAAc,0DACjC,GAAgB,EAAe,uDAC/B,GAAgB,EAAe,uDAKhC,GAAS,SAAA,GA4Dd,QA5DK,KA8DJ,EAAA,KAAA,KAAM,EAAoB,cA3DnB,KAAA,QAAiB,EAEjB,KAAA,iBAA0B,EAc1B,KAAA,kBACA,KAAA,gBAAyB,EA4ChC,KAAK,QAAU,GAAI,OACnB,KAAK,QAAQ,GAAK,GAAI,IACtB,KAAK,QAAQ,GAAG,KAAO,KAEvB,KAAK,aAAe,GAAI,OACxB,KAAK,aAAa,KAAK,EAAU,QACjC,KAAK,aAAa,KAAK,EAAU,KACjC,KAAK,aAAa,KAAK,EAAU,OACjC,KAAK,aAAa,KAAK,EAAU,QACjC,KAAK,aAAa,KAAK,EAAU,YACjC,KAAK,aAAa,KAAK,EAAU,OACjC,KAAK,aAAa,KAAK,EAAU,WACjC,KAAK,aAAa,KAAK,EAAU,QACjC,KAAK,aAAa,KAAK,EAAU,OACjC,KAAK,aAAa,KAAK,EAAU,SACjC,KAAK,aAAa,KAAK,EAAU,UACjC,KAAK,aAAa,KAAK,EAAU,QACjC,KAAK,aAAa,KAAK,EAAU,SACjC,KAAK,aAAa,KAAK,EAAU,QACjC,KAAK,aAAa,KAAK,EAAU,QACjC,KAAK,aAAa,KAAK,EAAU,SAEjC,KAAK,cAAgB,GAAI,OACzB,KAAK,cAAc,KAAK,KACxB,KAAK,cAAc,KAAK,KACxB,KAAK,cAAc,KAAK,MACxB,KAAK,cAAc,KAAK,MACxB,KAAK,SAAW,QAkkFlB,MA7pFwB,GAAlB,EAAS,GAmGA,EAAA,aAAd,SAA2B,GAG1B,MADA,GAAY,EAAU,cACF,OAAb,GAQM,EAAA,aAAd,SAA2B,GAE1B,MAAyC,OAAjC,EAAY,SAAS,EAAM,IAM7B,EAAA,UAAA,oBAAP,SAA2B,GAM1B,GAAwC,GAApC,EAAmB,OAAO,OAAa,CAC1C,GAEI,GACA,EACA,EAJA,EAAmC,EAAmB,GAAG,MAAM,KAC/D,EAAqB,EAAmB,EAK5C,IAAiC,GAA7B,EAAmB,SAEtB,EAAwB,EAAmB,OAAO,IACvC,CAIV,EAAQ,KAAK,QAAS,EAAmB,IACzC,EAAM,KAAO,EAIb,EAAM,eAAe,EAAM,KAAM,MAAM,GACvC,EAAM,KAAO,EAAM,KAGnB,KAAK,gBAAyB,GAE1B,KAAK,SACR,QAAQ,IAAI,0CACZ,QAAQ,IAAI,0BAA4B,EAAM,OAKjD,GAAI,EAAmB,OAAS,EAChC,CACC,EAAoC,EAAmB,OAAO,EAE9D,IAAI,GAAiC,CAQrC,IANA,KAAK,cAAe,EAAmB,IAAO,EAAG,iBACjD,KAAK,eAAe,GAAa,KAAK,GAElC,KAAK,QACR,QAAQ,IAAI,8BAAgC,KAAK,eAAe,GAAa,OAAS,wBAEnF,KAAK,eAAe,GAAa,QAAU,KAAK,cAAc,OAAQ,CAEzE,GAAI,GAAW,KAAK,cAAc,GAC9B,EAAW,KAAK,cAAc,GAC9B,EAAW,KAAK,cAAc,GAC9B,EAAW,KAAK,cAAc,GAC9B,EAAW,KAAK,cAAc,GAC9B,EAAW,KAAK,cAAc,EAElC,GAA2B,GAAI,GAAiB,EAAM,EAAM,EAAM,EAAM,EAAM,GAC9E,EAAQ,KAAK,QAAQ,GACrB,EAAM,KAAO,EAIb,EAAM,eAAe,EAAM,KAAM,MAAM,GACvC,EAAM,KAAO,EAAM,KAGnB,KAAK,gBAAyB,GAC1B,KAAK,QACR,QAAQ,IAAI,8BAAgC,EAAM,UAWhD,EAAA,UAAA,2BAAP,aAWO,EAAA,UAAA,wBAAP,SAA+B,EAAuC,GAErE,GAAI,GAAiB,EAAM,IAE3B,IAAI,EAAO,CACV,GAAI,GAAiB,KAAK,QAAQ,SAAS,EAAmB,IAG9D,GAAM,eAAe,EAAM,KAAM,MAAM,GAGxC,GAAI,GAAiB,EAAM,IAI3B,OAFA,GAAM,KAAO,EAEN,GAOD,EAAA,UAAA,iBAAP,WAQC,GALK,KAAK,kBACT,KAAK,UAAY,KAAK,gBACtB,KAAK,iBAAkB,IAGnB,KAAK,eAAgB,CAYzB,OAFA,KAAK,cAEG,KAAK,cAEZ,IAAK,GAAU,QACf,IAAK,GAAU,KACd,KAAK,eAAe,2CACpB,MAED,KAAK,GAAU,aACd,KAAK,MAAQ,KAAK,UA0BpB,KAAK,gBAAiB,EAUvB,GAAI,KAAK,MAAO,CAEf,KAAO,KAAK,MAAM,oBAAsB,IAAM,KAAK,eAElD,KAAK,gBAMN,OAAsC,IAAlC,KAAK,MAAM,qBACd,KAAK,UACG,EAAW,cAEX,EAAW,cAIpB,OAAQ,KAAK,cAEZ,IAAK,GAAU,QACf,IAAK,GAAU,KAEV,KAAK,QACR,QAAQ,IAAI,qEAOf,MAAQ,GAAW,cAMd,EAAA,UAAA,eAAP,SAAsB,GAErB,EAAA,UAAM,eAAc,KAAA,KAAC,GAGrB,KAAK,UAAY,GAAI,IAGd,EAAA,UAAA,QAAR,WAGC,IAAK,GAAI,KAAK,MAAK,QAAS,CAE3B,GAAI,GAAwB,KAAK,QAAS,EAC1C,GAAE,YAMI,EAAA,UAAA,eAAR,WAEC,GAAI,GAGA,EACA,EACA,EACA,EAJA,GAAmB,CAMvB,MAAK,cAAgB,KAAK,MAAM,kBAEhC,EAAK,KAAK,MAAM,mBAChB,EAAO,KAAK,MAAM,mBAClB,EAAQ,KAAK,MAAM,mBACnB,EAAM,KAAK,MAAM,iBAEjB,EAAA,GAAI,GAA2B,GAAS,KAAK,EAAO,GAAS,MAC1B,IAAS,KAAK,EAAO,GAAS,OAE7D,KAAK,oBACR,KAAK,gBAAkB,GAAS,KAAK,EAAO,GAAS,OACrD,KAAK,aAAe,GAAS,KAAK,EAAO,GAAS,OAClD,KAAK,eAAiB,GAAS,KAAK,EAAO,GAAS,OACpD,KAAK,WAAa,EAAU,QAExB,KAAK,eACR,KAAK,WAAa,EAAU,SAG7B,KAAK,cAAgB,EAAU,QAE3B,KAAK,kBACR,KAAK,cAAgB,EAAU,SAGhC,KAAK,aAAe,EAAU,QAE1B,KAAK,iBACR,KAAK,aAAe,EAAU,SAIhC,IAAI,GAAqB,KAAK,MAAM,SAAW,CAE/C,IAAI,EAAM,KAAK,MAAM,oBAGpB,MAFA,MAAK,eAAe,uEACpB,KAAK,MAAM,UAAY,KAAK,MAAM,oBAGnC,MAAK,eAAiB,GAAI,GAG1B,KAAK,MAAM,UAAU,KAAK,eAAgB,EAAG,GAKzC,GACH,KAAK,eAAe,4CAqBrB,KAAK,eAAe,SAAW,EAC/B,EAAQ,GAAI,IACZ,EAAM,IAAM,KAAK,eAAe,SAAW,EAC3C,EAAM,GAAK,KAAK,aAEhB,IAAI,GAAuB,KAAK,eAAe,SAAW,CAc1D,IAZI,GACH,KAAK,eAAe,4CAKjB,KAAK,QACR,QAAQ,IAAI,mBAAqB,KAAK,cAAgB,eAAiB,EAAO,oBAAsB,EAAmB,yBAA2B,KAAK,gBAAkB,2BAA6B,KAAK,aAAe,6BAA+B,KAAK,gBAG/P,KAAK,QAAQ,KAAK,eAAiB,EAEV,GAApB,KAAK,SAAS,IAAiC,GAApB,KAAK,SAAS,GAE7C,OAAQ,GACP,IAAK,IACJ,KAAK,eAAe,KAAK,eACzB,GAAW,CACX,MACD,KAAK,IACJ,KAAK,oBAAoB,KAAK,eAC9B,GAAW,CACX,MACD,KAAK,IACJ,KAAK,WAAW,KAAK,eACrB,GAAW,CACX,MACD,KAAK,IACJ,KAAK,YAAY,KAAK,eACtB,GAAW,CACX,MAOD,KAAK,IACJ,KAAK,iBAAiB,KAAK,eAC3B,GAAW,CACX,MACD,KAAK,IACJ,KAAK,iBAAiB,KAAK,eAC3B,GAAW,CACX,MACD,KAAK,IACJ,KAAK,iBAAiB,KAAK,eAC3B,GAAW,CACX,MACD,KAAK,IACJ,KAAK,uBAAuB,KAAK,eACjC,GAAW,CACX,MACD,KAAK,IACJ,KAAK,uBAAuB,KAAK,eACjC,GAAW,CACX,MACD,KAAK,KACJ,KAAK,uBAAuB,KAAK,eAAe,GAChD,GAAW,CACX,MACD,KAAK,KACJ,KAAK,uBAAuB,KAAK,eACjC,GAAW,CACX,MACD,KAAK,KACJ,KAAK,wBAAwB,KAAK,eAClC,GAAW,CACX,MACD,KAAK,KACJ,KAAK,iBAAiB,KAAK,eAC3B,GAAW,CACX,MACD,KAAK,KACJ,KAAK,aAAa,KAAK,eACvB,GAAW,EAMd,GAAgB,GAAZ,EACH,OAAQ,GAEP,IAAK,GACJ,KAAK,4BAA4B,KAAK,cACtC,MACD,KAAK,IACJ,KAAK,eAAe,KAAK,cACzB,MACD,KAAK,IACJ,KAAK,kBAAkB,KAAK,cAC5B,MACD,KAAK,IACJ,KAAK,cAAc,KAAK,cACxB,MACD,KAAK,IACJ,KAAK,aAAa,KAAK,cACvB,MACD,KAAK,KACJ,KAAK,cAAc,KAAK,cACxB,MACD,KAAK,KACJ,KAAK,kBAAkB,KAAK,cAC5B,MACD,KAAK,KACJ,KAAK,uBAAuB,KAAK,cACjC,MACD,KAAK,KAGL,IAAK,KACJ,KAAK,eAAe,KAAK,cACzB,MACD,KAAK,KACJ,KAAK,cAAc,KAAK,cACxB,MACD,SACK,KAAK,QACR,QAAQ,IAAI,6CAA+C,KAAK,cAAgB,YAAc,EAAM,UAErG,KAAK,eAAe,UAAY,KAM/B,GAAgB,CACpB,IAAI,KAAK,eAAe,UAAY,EAAe,CAClD,GAAI,KAAK,QACJ,EAAM,cACT,KAAO,EAAS,EAAM,cAAc,QACnC,QAAQ,IAAI,sBAAwB,EAAM,cAAc,GAAU,QAClE,GAIC,MAAK,QACR,QAAQ,IAAI,UAGb,IAAI,KAAK,SAER,QAAQ,IAAI,+CAAiD,KAAK,cAAgB,yBAE9E,EAAM,eACT,KAAO,EAAS,EAAM,cAAc,QACnC,QAAQ,IAAI,sBAAwB,EAAM,cAAc,GAAU,QAClE,GAMJ,MAAK,MAAM,SAAW,EACtB,KAAK,eAAiB,MAQf,EAAA,UAAA,4BAAR,SAAoC,GAgBnC,IAbA,GAAI,GAAgB,GAAI,GAGpB,EAAc,KAAK,cACnB,EAAkB,KAAK,eAAe,oBAGtC,EAAsB,KAAK,iBAAiB,EAAE,KAAK,WAAY,EAAE,KAAK,aACtE,EAAmB,EAAM,IAAI,EAAG,GAChC,EAAmB,EAAM,IAAI,EAAG,GAGhC,EAAqB,EACJ,EAAd,GAAwB,CAC9B,GACI,GAAe,EACf,EACA,EACA,CAEJ,GAAS,KAAK,eAAe,kBAC7B,EAAS,KAAK,eAAe,SAAW,CAKxC,QAFI,GAAyB,KAAK,iBAAiB,EAAE,KAAK,WAAY,EAAE,KAAK,aAEtE,KAAK,eAAe,SAAW,GAAQ,CAC7C,GACI,GAAkB,EAAiB,EAAgB,EADnD,EAAa,CAIjB,GAAW,KAAK,eAAe,mBAC/B,EAAY,KAAK,eAAe,mBAChC,EAAU,KAAK,eAAe,kBAC9B,EAAU,KAAK,eAAe,SAAW,CAEzC,IAAI,GAAU,EAAU,CAExB,IAAgB,GAAZ,EAGH,IAFA,GAAI,GAAsB,GAAI,OAEvB,KAAK,eAAe,SAAW,GAErC,EAAI,KAAK,WAAW,KAAK,cACzB,EAAI,KAAK,WAAW,KAAK,cACzB,EAAI,KAAK,WAAW,KAAK,cAEzB,EAAM,KAAS,EACf,EAAM,KAAS,EACf,EAAM,KAAS,MAEV,IAAgB,GAAZ,EAGV,IAFA,GAAI,GAAwB,GAAI,OAEzB,KAAK,eAAe,SAAW,GAErC,EAAQ,KAAS,KAAK,eAAe,wBAGhC,IAAgB,GAAZ,EAEV,IADA,GAAI,GAAoB,GAAI,OACrB,KAAK,eAAe,SAAW,GACrC,EAAI,KAAS,KAAK,WAAW,KAAK,kBAG7B,IAAgB,GAAZ,EAIV,IAFA,GAAI,GAAwB,GAAI,OAEzB,KAAK,eAAe,SAAW,GACrC,EAAQ,KAAS,KAAK,WAAW,KAAK,kBAGjC,IAAgB,GAAZ,EAGV,IAFA,EAAY,QAEL,KAAK,eAAe,SAAW,GACrC,EAAU,KAAiD,EAAxC,KAAK,eAAe,wBAGlC,IAAgB,GAAZ,EAIV,IAFA,EAAU,GAAI,OAEP,KAAK,eAAe,SAAW,GACrC,EAAQ,KAAS,KAAK,WAAW,KAAK,kBAGvC,MAAK,eAAe,SAAW,EAKjC,KAAK,sBAEL,EAAW,GAAI,IAAoB,GAC/B,IACH,EAAS,gBAAkB,EAAQ,QAAQ,EAAM,OAAO,IACrD,IACH,EAAS,mBAAoB,GAC1B,IACH,EAAS,eAAgB,GAC1B,EAAS,cAAc,GACvB,EAAS,gBAAgB,GACzB,EAAS,oBAAoB,GAC7B,EAAS,UAAU,GACnB,EAAS,qBAAqB,MAC9B,EAAS,mBAAmB,GAC5B,EAAS,mBAAmB,EAE5B,IAAI,GAAgB,EAAS,IAAI,EAAG,GAChC,EAAgB,EAAS,IAAI,EAAG,GAChC,GAAoB,GAEnB,GAAa,GAAY,GAAa,KAC1C,GAAY,EACZ,EAAS,EAAU,EACnB,EAAS,EAAU,GAGhB,GACH,EAAS,QAAQ,EAAQ,GAE1B,EAAK,eAAe,GAKpB,KAEiB,GAAb,GAAiC,GAAb,IACxB,EAAK,QAAQ,EAAW,GACzB,KAAK,sBACL,KAAK,gBAAyB,EAAM,GACpC,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,qCAAuC,EAAO,UAAY,EAAS,KAMzE,EAAA,UAAA,eAAR,SAAuB,GAEtB,GAAI,GACA,EACA,EAEA,CAIJ,GAAO,KAAK,cACZ,EAAW,KAAK,eAAe,mBAC/B,EAAQ,KAAK,iBAAiB,IAAI,KAAK,WAAY,IAAI,KAAK,WAAY,IAAI,KAAK,WAAY,IAAI,KAAK,WAAY,IAAI,KAAK,WAAY,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,KAAM,IAAI,EAAU,KAAM,IAAI,EAAU,KAAM,IAAI,EAAU,MAEnR,IAAI,IAAgC,sBAAuB,uBAAwB,sBAAuB,wBAAyB,0BAA2B,uBAAwB,0BAA2B,wBAEjN,QAAQ,GAGP,IAAK,GACJ,EAAS,GAAI,GAAqB,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,KAAK,GAAO,EAAM,IAAI,KAAK,GACvJ,MAED,KAAK,GACJ,EAAS,GAAI,GAAoB,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,KAAK,GACxK,MAED,KAAK,GACJ,EAAS,GAAI,GAAsB,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,KAAK,GAC9G,MAED,KAAK,GACJ,EAAS,GAAI,GAAwB,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAI,GAAM,GAAM,GAChJ,EAAM,IAAI,KAAK,KACO,EAAQ,WAAY,GAC1C,EAAM,IAAI,KAAK,KACO,EAAQ,cAAe,GAC7C,EAAM,IAAI,KAAK,KACO,EAAQ,KAAM,EAEzC,MAED,KAAK,GACJ,EAAS,GAAI,GAAoB,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,KAAK,GAAO,EAAM,IAAI,KAAK,GACtJ,MAED,KAAK,GACJ,EAAS,GAAI,GAAuB,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,KAAK,GACpI,MAED,KAAK,GACJ,EAAS,GAAI,GAAqB,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,IAAK,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,KAAK,GAChI,MAED,SACC,EAAS,GAAI,GACb,QAAQ,IAAI,kCAIY,GAArB,EAAM,IAAI,IAAK,IAAkC,GAArB,EAAM,IAAI,IAAK,GAKhD,KAAK,sBACL,EAAO,KAAO,EACd,KAAK,gBAAgB,EAAQ,GAC7B,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,UACQ,EAAX,GAAkB,EAAW,KACjC,EAAW,GAEZ,QAAQ,IAAI,8BAAgC,EAAO,YAAc,EAAe,MAK1E,EAAA,UAAA,eAAR,SAAuB,GAEtB,GAAI,GACA,EACA,EACA,CAGJ,GAAS,KAAK,eAAe,kBAC7B,EAAM,KAAK,gBACX,EAAO,KAAK,aAEZ,IAAI,GAAoB,iBACxB,GAAM,GAAI,GACV,EAAI,UAAU,SAAW,CAEzB,IAAI,GAA2B,KAAK,aAAa,GAAS,EAAU,UAAW,EAAU,MAAO,EAAU,MAE1G,IAAI,EAAc,GAAI,CACrB,CAAkD,EAAc,GAAI,SAAS,GAC7E,EAAuC,EAAc,GAAI,SAC/C,GAAS,EACnB,KAAK,QAAS,GAAU,SAAS,sDAGP,KAAK,UAAW,SAAS,EAIpD,IAAyB,GAApB,KAAK,SAAS,IAAiC,GAApB,KAAK,SAAS,GAAU,CACvD,GAAI,GAAsB,KAAK,iBAAiB,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,EAAU,OAC9H,GAAI,MAAQ,GAAI,GAAS,EAAM,IAAI,EAAG,GAAI,EAAM,IAAI,EAAG,GAAI,EAAM,IAAI,EAAG,QAIxE,MAAK,gBAAgB,KAItB,GAAI,MAAQ,KAAK,sBAEjB,KAAK,gBAAyB,EAAK,GACnC,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,+BAAiC,EAAO,qBAAuB,IAKrE,EAAA,UAAA,kBAAR,SAA0B,GAEzB,GAAI,GACA,EAOA,EALA,EAAgB,KAAK,eAAe,kBACpC,EAAe,KAAK,gBACpB,EAAc,KAAK,cACnB,EAAoB,kBACpB,EAAiB,KAAK,eAAe,kBAErC,EAAmC,KAAK,aAAa,GAAU,EAAU,UAEzE,GAAsB,GACzB,EAAkB,EAAsB,IAExC,KAAK,QAAQ,GAAS,SAAS,yEAC/B,EAAO,GAAI,IAGZ,KAAK,QAAQ,GAAS,MAAQ,CAC9B,IAAI,GAAgC,GAAI,MACxC,GAAgB,KAAK,eAAe,mBAEpC,IAAI,GAA8B,GAAI,MACtC,GAAmB,CAInB,KAFA,GAAI,GAEsB,EAAnB,GAAkC,CACxC,GAAI,EACJ,GAAS,KAAK,eAAe,kBAC7B,EAAwB,KAAK,aAAa,GAAS,EAAU,YACvD,EAAsB,IAAQ,EAAS,GAC5C,KAAK,QAAQ,GAAS,SAAS,8BAAgC,EAAmB,UAAY,EAAS,mBAGxG,IAAI,GAAgC,EAAsB,EAE1D,GAAU,KAAK,GACf,EAAc,KAAK,EAAE,MAErB,IAGD,GAAI,GAAY,GAAI,GAAK,EAAM,KAC/B,GAAK,UAAU,SAAW,CAE1B,IAAI,GAAiC,KAAK,aAAa,GAAS,EAAU,UAAW,EAAU,MAAO,EAAU,MAEhH,IAAI,EAAoB,GAAI,CAC3B,GAAI,GAAuD,EAAoB,EAC/E,GAAK,SAAS,GACd,EAAa,EAAK,SACR,GAAS,EACnB,KAAK,QAAQ,GAAS,SAAS,yCAGL,KAAK,UAAW,SAAS,EAGpD,IAAI,EAAU,QAAU,GAA8B,GAAzB,EAAK,UAAU,OAC3C,EAAK,SAAW,EAAU,OACpB,IAAI,EAAU,OAAS,EAAG,CAChC,GAAI,EAIJ,KAAK,EAAI,EAAG,EAAI,EAAK,UAAU,OAAQ,IACtC,EAAK,UAAU,GAAG,SAAW,EAAU,KAAK,IAAI,EAAU,OAAS,EAAG,IAGxE,GAAyB,GAApB,KAAK,SAAS,IAAiC,GAApB,KAAK,SAAS,GAAU,CACvD,GAAI,GAAsB,KAAK,iBAAiB,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,EAAU,MAAO,EAAE,EAAU,MACjJ,GAAK,MAAQ,GAAI,GAAiB,EAAM,IAAI,EAAG,GAAY,EAAM,IAAI,EAAG,GAAa,EAAM,IAAI,EAAG,IAClG,EAAK,aAAe,EAAM,IAAI,GAAG,OAEjC,MAAK,gBAAgB,KAGtB,GAAK,MAAQ,KAAK,sBAElB,KAAK,gBAAyB,EAAM,GACpC,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,0BAA4B,EAAO,qBAAuB,EAAa,qBAAuB,EAAK,KAAO,kBAAoB,EAAK,UAAU,OAAS,kBAAoB,EAAc,aAM9L,EAAA,UAAA,oBAAR,SAA4B,GAE3B,GAAI,GAAc,KAAK,cACnB,EAAqB,KAAK,eAAe,kBAEzC,EAAkC,KAAK,aAAa,GAAc,EAAU,SAAU,cACpF,GAAqB,IAAuB,GAAf,GAClC,KAAK,QAAQ,GAAS,SAAS,wCAA0C,EAAc,qBACxF,IAAI,GAAe,GAAI,GAAO,GAAI,GAAkC,EAAqB,IAEzF,MAAK,gBAAgB,MACrB,EAAM,MAAQ,KAAK,sBACnB,KAAK,gBAAgB,EAAO,GAC5B,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,4BAA8B,EAAO,0BAAgD,EAAqB,GAAI,OAKpH,EAAA,UAAA,WAAR,SAAmB,GAElB,GAAI,GACA,EAEA,EAAgB,KAAK,eAAe,kBACpC,EAAe,KAAK,gBACpB,EAAc,KAAK,cACnB,EAAmB,KAAK,eAAe,mBACvC,EAAsB,KAAK,iBAAiB,EAAE,KAAK,aAAc,EAAE,KAAK,aAAc,EAAE,EAAU,MAAO,EAAE,KAAK,aAAc,EAAE,KAAK,aAAc,EAAE,EAAU,KAAM,EAAE,EAAU,MAAO,EAAE,KAAK,aAAc,EAAE,EAAU,MAAO,GAAG,EAAU,MAAO,GAAG,KAAK,aAAc,GAAG,EAAU,OAAQ,GAAG,KAAK,cAAe,GAAG,KAAK,cAAe,GAAG,KAAK,gBACrV,EAA0B,EAAM,IAAI,EAAG,GACvC,EAAoB,kBACpB,GAA4B,wBAAyB,aAAc,oBACnE,GAAmC,kBAAmB,0BAA2B,8BAA+B,sBAAuB,sBAyD3I,IAvDiB,GAAb,IACH,EAAQ,GAAI,GAEE,EAAO,OAAS,EAAM,IAAI,EAAG,KAC7B,EAAO,QAAU,EAAM,IAAI,EAAG,KAExC,EAAmB,GACE,GAApB,IACH,EAAkB,GAAI,IAIxB,EAAM,UAAU,SAAW,GAIX,GAAb,IAEH,EAAQ,GAAI,GAAiB,EAAM,IAAI,GAAI,GAAI,EAAM,IAAI,GAAI,IAAK,EAAM,IAAI,GAAI,IAE5E,EAAmB,GACE,GAApB,IACH,EAAkB,GAAI,KAWzB,EAAM,MAAQ,EAAM,IAAI,EAAG,UAC3B,EAAM,SAAW,EAAM,IAAI,EAAG,GAC9B,EAAM,QAAU,EAAM,IAAI,EAAG,GAC7B,EAAM,aAAe,EAAM,IAAI,EAAG,UAClC,EAAM,QAAU,EAAM,IAAI,EAAG,GAGzB,IACC,YAA2B,GACN,GAApB,EAAM,IAAI,GAAI,KACjB,EAAgB,aAAe,KAAK,cAAc,EAAM,IAAI,GAAI,KAGzC,GAApB,EAAM,IAAI,GAAI,KACjB,EAAgB,aAAe,KAAK,cAAc,EAAM,IAAI,GAAI,KAIlE,EAAM,aAAe,EACrB,EAAM,cAAe,GAGR,GAAV,EAAa,CAEhB,GAAI,GAAiC,KAAK,aAAa,GAAS,EAAU,UAAW,EAAU,MAAO,EAAU,MAE5G,GAAoB,IACG,EAAoB,GAAI,SAAS,GAC3D,EAAuC,EAAoB,GAAI,MAE/D,KAAK,QAAQ,GAAS,SAAS,8CAIN,MAAK,UAAW,SAAS,EAGpD,MAAK,sBAEL,KAAK,gBAA0B,EAAO,GAEtC,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,2BAA6B,EAAO,cAAgB,EAAW,GAAa,oBAAsB,EAAa,0BAA4B,EAAkB,KAKnK,EAAA,UAAA,YAAR,SAAoB,GAGnB,GAII,GAJA,EAAgB,KAAK,eAAe,kBACpC,EAAe,KAAK,gBACpB,EAAc,KAAK,cACnB,EAAoB,iBAGxB,MAAK,eAAe,mBACpB,KAAK,eAAe,WAEpB,IAAI,GAAwB,KAAK,eAAe,YAC5C,EAAsB,KAAK,iBAAiB,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,cAE9H,QAAQ,GACP,IAAK,MACJ,EAAa,GAAI,GAAsB,EAAM,IAAI,IAAK,IACtD,MACD,KAAK,MACJ,EAAa,GAAI,GAAuB,EAAM,IAAI,IAAK,KACvD,MACD,KAAK,MACJ,EAAa,GAAI,GAAgC,EAAM,IAAI,IAAK,MAAO,EAAM,IAAI,IAAK,KAAM,EAAM,IAAI,IAAK,MAAO,EAAM,IAAI,IAAK,KACjI,MACD,SAEC,WADA,SAAQ,IAAI,uBAId,GAAI,GAAgB,GAAI,GAAO,EAC/B,GAAO,UAAU,SAAW,CAE5B,IAAI,GAAiC,KAAK,aAAa,GAAS,EAAU,UAAW,EAAU,MAAO,EAAU,MAEhH,IAAI,EAAoB,GAAI,CAE3B,GAAI,GAAuD,EAAoB,EAC/E,GAAK,SAAS,GAEd,EAAa,EAAK,SAER,GAAS,EACnB,KAAK,QAAQ,GAAS,SAAS,2CAGL,KAAK,UAAW,SAAS,EAGpD,GAAO,KAAO,EACd,EAAQ,KAAK,iBAAiB,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,EAAU,QAC5G,EAAO,MAAQ,GAAI,GAAS,EAAM,IAAI,EAAG,GAAI,EAAM,IAAI,EAAG,GAAI,EAAM,IAAI,EAAG,IAC3E,EAAO,MAAQ,KAAK,sBAEpB,KAAK,gBAAgB,EAAQ,GAE7B,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,4BAA8B,EAAO,wBAA0B,EAAa,oBAAsB,IAMxG,EAAA,UAAA,iBAAR,SAAyB,GAExB,GAMI,GANA,EAAc,KAAK,cACnB,EAAmB,KAAK,eAAe,oBACvC,EAA+B,GAAI,OACnC,EAAW,EACX,EAAiB,EAGjB,EAAiC,GAAI,MAEzC,KAAK,EAAI,EAAO,EAAJ,EAAe,IAC1B,EAAU,KAAK,eAAe,kBAC9B,EAAqB,KAAK,aAAa,GAAU,EAAU,QAEvD,EAAmB,IACtB,EAAY,KAAiB,EAAmB,IAChD,EAAiB,KAAmB,EAAmB,GAAI,OAG3D,KAAK,QAAQ,GAAS,SAAS,6BAA+B,EAAI,UAAY,EAAU,0BAI1F,IAA0B,GAAtB,EAAY,OAGf,MAFA,MAAK,QAAQ,GAAS,SAAS,oEAC/B,MAAK,qBAIN,IAAI,GAA4B,GAAI,GAAkB,EACtD,GAAU,KAAO,EAEjB,KAAK,sBACL,KAAK,gBAAyB,EAAW,GAEzC,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,uCAAyC,EAAO,sBAAwB,EAAiB,aAK/F,EAAA,UAAA,cAAR,SAAsB,MAIjB,GACA,EACA,EACA,EACA,EAEA,EACA,EACA,CAWJ,KATA,EAAO,KAAK,cACZ,EAAO,KAAK,eAAe,mBAC3B,EAAc,KAAK,eAAe,mBAIlC,EAAQ,KAAK,iBAAkB,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,GAAG,KAAK,aAAc,GAAG,EAAU,KAAM,GAAG,KAAK,aAAc,GAAG,EAAU,OAEjJ,EAAiB,EACO,EAAjB,GAA8B,CACpC,GAAI,EAEJ,GAAc,KAAK,eAAe,oBAClC,KAAK,gBAAgB,MACrB,KAAK,sBACL,GAAkB,EAEnB,GAAI,GAAqB,EAEzB,IADA,EAAa,KAAK,sBACL,IAAT,EAAY,CACf,GAAe,+CAAiD,EAAO,MACvE,IAAI,EACJ,GAAQ,EAAM,IAAI,EAAG,UACjB,KAAK,aAAe,EACvB,EAAM,GAAI,GAAuB,EAAO,EAAM,IAAI,GAAI,KAEtD,EAAM,GAAI,GAAuB,GACjC,EAAI,aAAe,EAAqB,gBAEnC,IAAa,IAAT,EAAY,CACtB,GAAI,GAAkB,EAAM,IAAI,EAAG,EAEnC,GAAgB,KAAK,aAAa,GAAW,EAAU,WAEjD,EAAc,IAAQ,EAAW,GACtC,KAAK,QAAQ,GAAS,SAAS,2CAA6C,EAAW,wBAExF,EAAM,GAAI,GAAuC,EAAc,IAE3D,KAAK,aAAe,GACvB,EAAI,cAAgB,EAAM,IAAI,IAAI,GAClC,EAAI,MAAQ,EAAM,IAAI,GAAI,GAC1B,GAAe,wDAA0D,EAAO,sBAAwB,EAAI,OAE5G,EAAI,aAAe,EAAqB,WACxC,GAAe,uDAAyD,EAAO,sBAAwB,EAAI,MAI7G,EAAI,MAAQ,EACZ,EAAI,eAAiB,EAAM,IAAI,GAAI,GACnC,EAAI,OAAS,EAAM,IAAI,IAAI,GAC3B,KAAK,gBAAyB,EAAK,GACnC,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,IAMN,EAAA,UAAA,iBAAR,SAAyB,GAExB,GAAI,GACA,EACA,EACA,EAEA,EAAc,KAAK,cACnB,EAAc,KAAK,eAAe,mBAClC,EAAqB,KAAK,eAAe,mBACzC,EAAsB,KAAK,iBAAiB,EAAE,EAAU,OAAQ,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,EAAE,EAAU,KAAM,EAAE,EAAU,KAAM,EAAE,EAAU,KAAM,EAAE,EAAU,KAAM,EAAE,EAAU,MAAO,GAAG,KAAK,aAAc,GAAG,EAAU,KAAM,GAAG,KAAK,aAAc,GAAG,EAAU,KAAM,GAAG,KAAK,aAAc,GAAG,EAAU,OAAQ,GAAG,EAAU,MAAO,GAAG,KAAK,aAAc,GAAG,KAAK,aAAc,GAAG,EAAU,OAAQ,GAAG,EAAU,MAAO,GAAG,EAAU,QACvc,EAAqB,EAAM,IAAI,EAAG,GAClC,EAAqB,EAEzB,IAAI,GAAe,EAElB,WADA,MAAK,QAAQ,GAAS,SAAS,yBAA2B,EAAc,8DASzE,IALyB,GAArB,KAAK,aACR,EAAc,EACe,GAArB,KAAK,eACb,EAAc,GAEG,EAAd,EAAiB,CAEpB,GAAY,GAAR,EAAW,CACd,GAAI,GAAe,EAAM,IAAI,EAAG,SAEb,IAAf,GACH,EAAM,GAAI,GAAuB,GACjC,EAAI,aAAe,EAAqB,WACxC,GAAe,8CAAgD,EAAO,SAGtE,EAAM,GAAI,GAAuB,EAAO,EAAM,IAAI,GAAI,IACtD,EAAI,cAAgB,EAAM,IAAI,IAAI,GAClC,GAAe,+CAAiD,EAAO,YAGlE,IAAY,GAAR,EAAW,CACrB,GAAI,GAAkB,EAAM,IAAI,EAAG,EACnC,GAAgB,KAAK,aAAa,GAAW,EAAU,WAEjD,EAAc,IAAQ,EAAW,GACtC,KAAK,QAAQ,GAAS,SAAS,2CAA6C,EAAW,qCAExF,IAAI,GAAwB,EAAc,EAE1C,GAAM,GAAI,GAAuB,GAEd,GAAf,GACH,EAAI,aAAe,EAAqB,WAExC,GAAe,uDAAyD,EAAO,sBAAwB,EAAQ,OAE/G,EAAI,MAAQ,EAAM,IAAI,GAAI,GAC1B,EAAI,cAAgB,EAAM,IAAI,IAAI,GAElC,GAAe,wDAA0D,EAAO,sBAAwB,EAAQ,MAIlH,GAAI,GACA,EAAyB,EAAM,IAAI,GAAI,EAE3C,GAAgB,KAAK,aAAa,GAAkB,EAAU,UAExD,EAAc,IAA2B,GAAnB,GAC3B,KAAK,QAAQ,GAAS,SAAS,2CAA6C,EAAkB,sCAG3F,EAAc,KACjB,EAAiB,EAAc,IAE5B,IACH,EAAI,eAAiB,EACrB,GAAe,4BAA8B,EAAe,KAG7D,IAAI,GAAwB,EAAM,IAAI,EAAG,EAEzC,GAAgB,KAAK,aAAa,GAAiB,EAAU,UAEvD,EAAc,IAA0B,GAAlB,GAC3B,KAAK,QAAQ,GAAS,SAAS,0CAA4C,EAAiB,sCAGzF,EAAc,KACjB,EAAgB,EAAc,GAC9B,GAAe,2BAA6B,EAAc,KAG3D,IAAI,GAAsB,EAAM,IAAI,GAAI,EACxC,GAAgB,KAAK,aAAa,GAAe,EAAU,UAErD,EAAc,IAAwB,GAAhB,GAC3B,KAAK,QAAQ,GAAS,SAAS,4CAA8C,EAAe,sCAEzF,EAAc,KACjB,EAAc,EAAc,GAC5B,GAAe,6BAA+B,EAAY,KAG3D,IAAI,GAAyB,EAAM,IAAI,GAAI,EAC3C,GAAgB,KAAK,aAAa,GAAkB,EAAU,gBAExD,EAAc,IAAO,EAC1B,KAAK,QAAQ,GAAS,SAAS,wCAA0C,EAAkB,sCAE3F,EAAI,YAAgC,EAAc,GAInD,EAAI,OAAS,EAAM,IAAI,GAAG,GAC1B,EAAI,OAAS,EAAM,IAAI,GAAG,GAC1B,EAAI,UAAY,EAAM,IAAI,GAAG,GAC7B,EAAI,mBAAqB,EAAM,IAAI,GAAG,GACtC,EAAI,UAAY,KAAK,aAAa,EAAM,IAAI,EAAG,IAC/C,EAAI,OAAS,EAAM,IAAI,IAAI,GAEvB,IACH,EAAI,UAAY,GAEb,IACH,EAAI,YAAc,GAEnB,EAAI,eAAiB,EAAM,IAAI,GAAI,GACnC,EAAI,QAAU,EAAM,IAAI,GAAI,GAC5B,EAAI,aAAe,EAAM,IAAI,GAAI,UACjC,EAAI,SAAW,EAAM,IAAI,GAAI,GAC7B,EAAI,MAAQ,EAAM,IAAI,GAAI,IAC1B,EAAI,cAAgB,EAAM,IAAI,GAAI,SAKlC,KAHA,GACI,GADA,EAAwB,EAGJ,EAAjB,GAA8B,CACpC,GAAI,EAKJ,QAJA,EAAc,KAAK,eAAe,oBAElC,EAAQ,KAAK,iBAAiB,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,KAAM,IAAI,EAAU,KAAM,IAAI,EAAU,SAEtX,GACP,IAAK,KAEJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,iBAElD,EAAc,IAGlB,EAAI,gBAAgB,EAAc,IAElC,GAAe,0BAAgD,EAAc,GAAI,MAJjF,KAAK,QAAQ,GAAS,SAAS,yCAA2C,EAAW,uBAOtF,MAED,KAAK,KAEJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,oBAElD,EAAc,IAGlB,EAAI,aAAe,EAAc,GACjC,GAAe,0BAAgD,EAAc,GAAI,MAHjF,KAAK,QAAQ,GAAS,SAAS,yCAA2C,EAAW,uBAMtF,MAED,KAAK,GACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,SAAU,eAC5D,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,mCAAqC,EAAW,2CAChF,EAAI,cAAgB,GAAI,GAAoB,EAAc,IAC1D,GAAe,yCAA8D,EAAc,GAAI,IAC/F,MAED,KAAK,IACJ,EAAI,cAAgB,GAAI,GACxB,GAAe,uBACf,MACD,KAAK,IACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,UAClD,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,mDAAqD,EAAW,qCAChG,EAAI,cAAgB,GAAI,IAAsB,EAAc,IAC5D,GAAe,2DAA8E,EAAc,GAAI,IAC/G,MACD,KAAK,IACJ,EAAI,cAAgB,GAAI,IAAkB,EAAM,IAAI,IAAK,IACzD,GAAe,sBACf,MACD,KAAK,IACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,UAClD,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,qCAAuC,EAAW,qCAClF,EAAI,cAAgB,GAAI,IAAsB,EAAc,GAAI,KAAK,aAAa,EAAM,IAAI,IAAK,MAAM,EAAO,EAAI,eAClH,GAAe,oDAAuE,EAAc,GAAI,IACxG,MACD,KAAK,IACJ,EAAI,cAAgB,GAAI,IAAiB,EAAM,IAAI,IAAK,GAAI,EAAI,eAC5C,EAAI,cAAe,WAAa,EAAM,IAAI,IAAK,IACnE,GAAe,qBACf,MACD,KAAK,IAMJ,KAED,KAAK,KACJ,EAAI,eAAiB,GAAI,IACzB,GAAe,8BACf,MACD,KAAK,KACJ,EAAI,eAAiB,GAAI,IACzB,GAAe,wBACf,MACD,KAAK,KACJ,EAAI,eAAiB,GAAI,IAAkB,EAAM,IAAI,IAAK,IAAM,EAAI,gBAC/C,EAAI,eAAgB,WAAa,EAAM,IAAI,IAAK,IACrE,GAAe,sBACf,MACD,KAAK,KACJ,EAAI,eAAiB,GAAI,IAAsB,EAAM,IAAI,KAAK,GAAO,EAAI,gBAChD,EAAI,eAAgB,aAAe,EAAM,IAAI,IAAK,GAClD,EAAI,eAAgB,kBAAoB,EAAM,IAAI,IAAK,IAChF,GAAe,0BACf,MACD,KAAK,KACJ,KACD,KAAK,KACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,UAClD,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,6CAA+C,EAAW,uCACrF,EAAI,WACR,KAAK,QAAQ,GAAS,SAAS,yFAEhC,EAAI,UAAY,EAAc,GAC9B,EAAI,aAAe,GAAI,IAAwB,EAAI,UAAW,EAAc,IAC5E,GAAe,4DAA+E,EAAc,GAAI,KAGlH,KAAK,sBACL,GAAkB,GAGpB,EAAI,MAAQ,KAAK,sBACjB,KAAK,gBAAyB,EAAK,GAEnC,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,IAKN,EAAA,UAAA,aAAR,SAAqB,GAGpB,GAAI,EAEJ,MAAK,QAAQ,GAAS,KAAO,KAAK,aAElC,IACI,GADA,EAAc,KAAK,eAAe,kBAMtC,IAHA,KAAK,eAAe,KAAK,cAAc,eAG3B,GAAR,EAAW,CACd,EAAW,KAAK,eAAe,iBAC/B,IAAI,EACJ,GAAM,KAAK,eAAe,aAAa,GACvC,KAAK,gBAAgB,KAAK,cAAc,WAAY,GAAI,GAAW,IAAM,EAAO,MAAM,OAEhF,CACN,EAAW,KAAK,eAAe,iBAE/B,IAAI,EACJ,GAAO,GAAI,GACX,KAAK,eAAe,UAAU,EAAM,EAAG,GAQvC,KAAK,gBAAgB,KAAK,cAAc,WAAY,MAAM,EAAO,EAAY,iBAAiB,IAAO,GAWtG,GALA,KAAK,gBAAgB,MACrB,KAAK,QAAQ,GAAS,OAAS,KAAK,sBACpC,KAAK,iCACL,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,OAAQ,CAChB,GAAI,IAAoC,WAAY,QACpD,SAAQ,IAAI,mBAAqB,EAAmB,GAAQ,yBAMtD,EAAA,UAAA,iBAAR,SAAyB,MAGpB,GACA,EACA,CAEJ,MAAK,cAAgB,GAAI,OACzB,KAAK,eAAgB,KAAK,cAAc,cAExC,IAAI,GAAc,KAAK,eAAe,kBAItC,KAFA,KAAK,QAAQ,GAAS,KAAO,KAAK,cAE7B,EAAI,EAAO,EAAJ,EAAO,IAKlB,GAJA,KAAK,eAAe,KAAK,cAAc,eACvC,KAAK,cAAc,KAAK,MAGZ,GAAR,EAAW,CACd,EAAW,KAAK,eAAe,iBAC/B,IAAI,EACJ,GAAM,KAAK,eAAe,aAAa,GAEvC,KAAK,gBAAgB,KAAK,cAAc,WAAa,IAAM,EAAG,GAAI,GAAW,IAAM,EAAO,MAAM,OAC1F,CAEN,EAAW,KAAK,eAAe,iBAC/B,IAAI,EACJ,GAAO,GAAI,GAEX,KAAK,eAAe,UAAU,EAAM,EAAG,GAEvC,KAAK,gBAAgB,KAAK,cAAc,WAAa,IAAM,EAAG,MAAM,EAAO,EAAY,iBAAiB,IAAO,GAUjH,GALA,KAAK,gBAAgB,MACrB,KAAK,QAAQ,GAAS,OAAS,KAAK,sBACpC,KAAK,iCACL,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,OAAQ,CAChB,GAAI,IAAoC,WAAY,QACpD,SAAQ,IAAI,mBAAqB,EAAmB,GAAQ,8BAKtD,EAAA,UAAA,uBAAR,SAA+B,GAE9B,GAAI,EAEJ,MAAK,QAAQ,GAAS,KAAO,KAAK,cAClC,EAAQ,KAAK,sBAAsB,GACnC,KAAK,sBACL,KAAK,QAAQ,GAAS,KAAO,EAC7B,KAAK,gBAAyB,EAAO,KAAK,QAAQ,GAAS,MAC3D,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,iCAAmC,EAAM,KAAO,WAAa,IAKnE,EAAA,UAAA,uBAAR,SAA+B,GAE9B,GAEI,GACA,CACJ,MAAK,QAAQ,GAAS,KAAO,KAAK,cAElC,EAAgB,KAAK,eAAe,iBACpC,IAAI,GAA2B,KAAK,aAAa,GAAgB,EAAU,OAE3E,OAAK,GAAc,IAKnB,EAAQ,KAAK,sBAAkC,EAAc,GAAI,QAE5D,IAGL,KAAK,sBACL,KAAK,gBAAyB,EAAO,KAAK,QAAQ,GAAS,MAC3D,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,0CAA4C,EAAM,KAAO,aAAe,EAAQ,mBAAkC,EAAc,GAAK,aAdjJ,MAAK,QAAQ,GAAS,SAAS,wCAA0C,EAAgB,wDAoBnF,EAAA,UAAA,aAAR,SAAqB,GAEpB,GAKI,GACA,EALA,GADgE,GAA1C,KAAK,eAAe,mBAC1B,KAAK,eAAe,mBACpC,EAAe,KAAK,gBACpB,EAAc,KAAK,cAKnB,EAA2B,KAAK,aAAa,GAAS,EAAU,UAAW,EAAU,MAAO,EAAU,MAEtG,GAAc,KACjB,EAAwC,EAAc,GAGvD,IACI,IADqB,KAAK,eAAe,YACpB,KAAK,eAAe,aAEzC,EAAsB,KAAK,iBAAiB,EAAE,EAAU,OAE5D,QAAQ,GACP,IAAK,GAEJ,GAAI,GAAkB,EAAM,IAAI,EAAG,GAC/B,EAAiC,KAAK,aAAa,GAAW,EAAU,MAAO,EAAU,mBAE7F,KAAM,EAAoB,IAAoB,GAAZ,EAEjC,WADA,MAAK,QAAQ,GAAS,SAAS,kCAAoC,EAAW,2BAI/E,GAAe,EAAoB,GAE/B,GACH,EAAa,SAAS,GAGvB,EAAa,UAAU,SAAW,EAKhC,IACH,EAAQ,KAAK,iBAAiB,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,KAAK,cAAe,EAAE,EAAU,QAE5G,EAAa,MAAQ,GAAI,GAAS,EAAM,IAAI,EAAG,GAAI,EAAM,IAAI,EAAG,GAAI,EAAM,IAAI,EAAG,IACjF,EAAa,MAAQ,KAAK,uBAG3B,KAAK,QAAQ,GAAS,KAAO,EAEzB,KAAK,QACR,QAAQ,IAAI,kCAAoC,IAM1C,EAAA,UAAA,cAAR,WAEC,GAAI,GAAsB,KAAK,iBAAiB,EAAE,EAAU,OAAQ,EAAE,EAAU,UAAW,EAAE,EAAU,UAAW,EAAE,EAAU,UAAW,EAAE,EAAU,WAEjJ,MAAK,SACR,QAAQ,IAAI,+CAAiD,EAAM,IAAI,EAAG,IAC1E,QAAQ,IAAI,+CAAiD,EAAM,IAAI,EAAG,YAC1E,QAAQ,IAAI,+CAAiD,EAAM,IAAI,EAAG,YAC1E,QAAQ,IAAI,+CAAiD,EAAM,IAAI,EAAG,YAC1E,QAAQ,IAAI,+CAAiD,EAAM,IAAI,EAAG;EAKpE,EAAA,UAAA,eAAR,WAEC,GAAI,GAAY,KAAK,eAAe,mBAChC,EAAyB,KAAK,aAC9B,MAAK,QACR,QAAQ,IAAI,iCAAmC,EAAK,eAAiB,IAM/D,EAAA,UAAA,sBAAR,SAA8B,EAAiB,GAG9C,GACI,GAGA,EACA,EALA,EAAoB,KAAK,eAAe,oBAExC,EAAsB,KAAK,iBAAiB,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,KAAM,IAAI,EAAU,KAAM,IAAI,EAAU,QAIhZ,QAAQ,GAUP,IAAK,MAGJ,GAFA,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,qBAClD,EAAc,GAElB,MADA,MAAK,QAAQ,GAAS,SAAS,6CAA+C,EAAW,2DAClF,CAER,GAAe,GAAI,IAAoC,EAAc,GACrE,MACD,KAAK,MAEJ,EAAe,GAAI,IAAwC,GACnC,EAAc,MAAQ,EAAM,IAAI,IAAK,GACrC,EAAc,QAAU,EAAM,IAAI,IAAK,KAC/D,MAED,KAAK,MAGJ,EAAe,GAAI,IAAwC,EAAgB,EAAM,IAAI,IAAK,IAClE,EAAc,MAAQ,EAAM,IAAI,IAAK,GACrC,EAAc,QAAU,EAAM,IAAI,IAAK,MACvC,EAAc,MAAQ,EAAM,IAAI,IAAK,EAE7D,MACD,KAAK,MAEJ,EAAe,GAAI,IAAoC,EAAgB,EAAM,IAAI,IAAK,IAClE,EAAc,MAAQ,EAAM,IAAI,IAAK,GACrC,EAAc,QAAU,EAAM,IAAI,IAAK,MACvC,EAAc,MAAQ,EAAM,IAAI,IAAK,EAEzD,MACD,KAAK,MACJ,EAAe,GAAI,IAAiB,GAChB,EAAc,MAAQ,EAAM,IAAI,IAAK,GACrC,EAAc,QAAU,EAAM,IAAI,IAAK,MAK7D,MADA,MAAK,sBACE,GAIA,EAAA,UAAA,cAAR,SAAsB,GAErB,GAAI,GAAc,KAAK,cACnB,EAA6B,KAAK,eAAe,oBACjD,EAAoB,GAAI,EAC5B,MAAK,gBAAgB,KAGrB,KADA,GAAI,GAAgC,EACb,EAAhB,GAA4B,CAClC,GAAI,GACA,CAEJ,MAAK,eAAe,oBACpB,EAAQ,GAAI,GACZ,EAAM,YAAc,KAAK,eAAe,oBAAsB,EAC9D,EAAM,KAAO,KAAK,cAElB,EAAM,KAAK,gBACX,EAAM,gBAAkB,EAAI,QAE5B,KAAK,gBAAgB,MACrB,KAAK,sBACL,EAAS,OAAO,KAAK,GACrB,IAID,KAAK,sBACL,KAAK,gBAAgB,EAAU,GAC/B,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,6BAA+B,EAAS,KAAO,yBAA2B,IAIhF,EAAA,UAAA,kBAAR,SAA0B,GAEzB,GAAI,GAAc,KAAK,cACnB,EAA6B,KAAK,eAAe,mBACrD,MAAK,gBAAgB,KAKrB,KAHA,GAAI,GAAoB,GAAI,GAExB,EAAgC,EACb,EAAhB,GAA4B,CAClC,GAAI,GACA,CAGJ,IAFA,EAAa,GAAI,GACjB,EAAgB,KAAK,eAAe,mBACf,GAAjB,EAAoB,CACvB,GAAI,GAAyB,KAAK,uBAE9B,EAAe,GAAI,GAAS,EAChC,GAAW,YAAY,WAAW,GAClC,EAAW,YAAY,SAAS,EAAI,UAEpC,EAAK,WAAW,GAAiB,EAElC,IAGD,KAAK,sBACL,KAAK,gBAAgB,EAAM,GAC3B,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,iCAAmC,EAAK,KAAO,yBAA2B,IAIhF,EAAA,UAAA,uBAAR,SAA+B,GAE9B,GAAI,GACA,EACA,EAAc,KAAK,cACnB,EAAwB,GAAI,GAC5B,EAA6B,KAAK,eAAe,mBACrD,MAAK,gBAAgB,KAIrB,KAFA,GACI,GADA,EAAgC,EAEb,EAAhB,GACN,EAAY,KAAK,eAAe,kBAChC,EAAY,KAAK,eAAe,oBAChC,EAAgB,KAAK,aAAa,GAAY,EAAU,gBACnD,EAAc,GAGlB,EAAK,SAAwB,KAAK,QAAQ,GAAW,KAAM,GAF3D,KAAK,QAAQ,GAAS,SAAS,2CAA6C,EAAgB,UAAY,EAAY,gCAGrH,GAED,OAA0B,IAAtB,EAAK,OAAO,WACf,MAAK,QAAQ,GAAS,SAAS,kEAIhC,KAAK,sBACL,KAAK,gBAAgB,EAAM,GAC3B,KAAK,QAAQ,GAAS,KAAO,OACzB,KAAK,QACR,QAAQ,IAAI,qCAAuC,EAAK,KAAO,yBAA2B,EAAK,OAAO,WAIhG,EAAA,UAAA,uBAAR,SAA+B,EAAyB,GAAA,SAAA,IAAA,GAAA,EAEvD,IACI,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAGA,EACA,EAIA,EAnBA,EAA6B,EAY7B,EAAqB,EACrB,EAAsB,GAAI,GAG1B,EAA6B,EAC7B,EAA+B,EAC/B,EAAoC,GAAI,OAGxC,EAAc,KAAK,cACnB,EAA2B,KAAK,eAAe,kBAC/C,EAA2B,KAAK,aAAa,GAAY,EAAU,UACvE,KAAK,EAAc,GAElB,WADA,MAAK,QAAQ,GAAS,SAAS,6CAA+C,EAAY,6BAG3F,IAAI,GAA2B,KAAK,wBAAwB,EAO5D,KANK,IACJ,EAAa,KAAK,eAAe,qBAElC,EAAgB,KAAK,eAAe,oBACpC,EAAc,KAAK,eAAe,oBAClC,EAAgB,EACO,EAAhB,GACN,EAAY,KAAK,KAAK,eAAe,qBACrC,GAQD,KANA,EAAQ,KAAK,iBAAiB,EAAE,EAAU,KAAM,EAAE,EAAU,OAE5D,EAAK,QAAU,EAAM,IAAI,GAAG,GAC5B,EAAK,iBAAmB,EAAM,IAAI,GAAG,GAErC,EAAgB,EACO,EAAhB,GAA4B,CAIlC,IAHA,EAAY,KAAK,eAAe,oBAChC,EAAW,GAAI,GACf,EAAgB,EACO,EAAhB,GAIN,IAHA,EAAgB,EAChB,EAAU,KAAK,eAAe,kBAC9B,EAAU,KAAK,eAAe,SAAW,EAClB,EAAhB,GAA6B,CACnC,GAAkC,GAA9B,EAAY,GAAqB,CAIpC,IAHA,EAAsB,EAAc,GAAI,cAAc,GAAe,QACrE,EAAQ,GAAI,OACZ,EAAM,EACC,KAAK,eAAe,SAAW,GACrC,EAAI,KAAK,WAAW,KAAK,cACzB,EAAI,KAAK,WAAW,KAAK,cACzB,EAAI,KAAK,WAAW,KAAK,cACzB,EAAM,KAAS,EACf,EAAM,KAAS,EACf,EAAM,KAAS,CAEhB,GAAU,GAAI,IAAoB,GAClC,EAAQ,cAAc,GACtB,EAAQ,gBAAgB,GACxB,EAAQ,UAAU,EAAI,IACtB,EAAQ,oBAAoB,MAC5B,EAAQ,qBAAqB,MAC7B,EAAQ,mBAAoB,EAC5B,EAAQ,oBAAqB,EAC7B,IACA,EAAS,eAAe,OAExB,MAAK,eAAe,SAAW,CAChC,KAGF,EAAK,SAAS,EAAU,GACxB,IAED,KAAK,sBACL,KAAK,gBAAgB,EAAM,GAE3B,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,mCAAqC,EAAK,KAAO,6BAA2C,EAAc,GAAI,KAAO,yBAA2B,EAAK,OAAO,SAIlK,EAAA,UAAA,wBAAR,SAAgC,GAU/B,IARA,GAAI,GAEA,EAAc,KAAK,cACnB,EAA6B,KAAK,eAAe,oBACjD,EAAsB,KAAK,iBAAiB,EAAE,EAAU,SACxD,EAAgC,EAChC,EAAyC,GAAI,OAC7C,EAAqC,GAAI,OACtB,EAAhB,GAA4B,CAClC,EAAkB,KAAK,eAAe,iBACtC,IAAI,GAA2B,KAAK,aAAa,GAAkB,EAAU,gBACxE,GAAc,IAGd,EAAc,YAAc,IAChC,EAAa,KAAK,EAAc,IAC5B,EAAc,YAAc,IAChC,EAAe,KAAK,EAAc,KALlC,KAAK,QAAQ,GAAS,SAAS,2CAA6C,EAAgB,MAAQ,EAAkB,4BAOvH,IAED,GAA4B,GAAvB,EAAa,QAA0C,GAAzB,EAAe,OAEjD,WADA,MAAK,QAAQ,GAAS,SAAS,wEAIhC,IADA,KAAK,sBACD,EAAa,OAAS,EAAG,CAE5B,IAAK,GADD,GAA2C,GAAI,GAC1C,EAAmB,EAAG,EAAI,EAAa,OAAQ,IACvD,EAAsB,aAAa,EAAa,GACjD,MAAK,gBAAgB,EAAuB,GAC5C,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,uCAAyC,EAAO,mBAAqB,EAAsB,WAAW,OAAS,wBAA0B,EAAsB,eAAe,gBAErL,IAAI,EAAe,OAAS,EAAG,CACrC,EAAgB,KAAK,aAAa,GAAkB,EAAU,gBAE9D,KAAK,GADD,GAA+C,GAAI,GAAqB,EAAM,IAAI,EAAG,IAChF,EAAmB,EAAG,EAAI,EAAe,OAAQ,IACzD,EAAwB,aAAa,EAAe,GACrD,MAAK,gBAAgB,EAAyB,GAC9C,KAAK,QAAQ,GAAS,KAAO,EACzB,KAAK,QACR,QAAQ,IAAI,yCAA2C,EAAO,mBAAqB,EAAwB,WAAW,OAAS,wBAA0B,EAAwB,eAAe,cAM3L,EAAA,UAAA,iBAAR,SAAyB,GAExB,GACI,GACA,EAEA,EAAc,KAAK,cACnB,EAAuB,KAAK,eAAe,oBAE3C,EAAsB,KAAK,iBAAiB,EAAE,EAAU,OAE5D,GAAqB,KAAK,eAAe,iBAGzC,KAAK,GAFD,GAAmC,KAAK,eAAe,oBACvD,EAAsC,GAAI,OACrC,EAAmB,EAAO,EAAJ,EAAsB,IACpD,EAAa,KAAK,KAAK,eAAe,kBAEL,MAAK,eAAe,oBACa,GAA1C,KAAK,eAAe,kBAC7C,MAAK,sBACL,KAAK,qBAEL,IAAI,GACA,EAA2B,GAAI,MAEnC,KAAK,EAAI,EAAG,EAAI,EAAa,OAAQ,IACpC,EAAgB,KAAK,aAAa,EAAa,IAAK,EAAU,OAC1D,EAAc,IACjB,EAAa,KAAY,EAAc,GAGzC,IADA,EAAgB,KAAK,aAAa,GAAqB,EAAU,iBAC5D,EAAc,GAElB,WADA,MAAK,QAAQ,GAAS,SAAS,qCAAuC,EAAqB,uBAG5F,GAAwC,EAAc,EACtD,IAAI,EACJ,IAAY,GAAR,EAAW,CAGd,GADA,EAAgB,KAAK,aAAa,EAAM,IAAI,EAAG,IAAK,EAAU,YACzD,EAAc,GAElB,WADA,MAAK,QAAQ,GAAS,SAAS,iCAAmC,EAAM,IAAI,EAAG,GAAK,uBAGrF,GAAe,GAAI,GAAwC,EAA+B,EAAc,QAEtF,IAAR,IACV,EAAe,GAAI,GAAoC,GAIxD,KAFA,KAAK,gBAAgB,EAAc,GACnC,KAAK,QAAQ,GAAS,KAAO,EACxB,EAAI,EAAG,EAAI,EAAa,OAAQ,IACxB,GAAR,IACH,EAAa,GAAG,SAA+B,GACpC,GAAR,IACH,EAAa,GAAG,SAA6B,EAG3C,MAAK,QACR,QAAQ,IAAI,6BAA+B,IAIrC,EAAA,UAAA,sBAAR,SAA8B,GAG7B,GACI,GAGA,EACA,EALA,EAAoB,KAAK,eAAe,oBAGxC,EAAsB,KAAK,iBAAiB,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,EAAE,EAAU,MAAO,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,KAAK,aAAc,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,OAAQ,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,MAAO,IAAI,EAAU,KAAM,IAAI,EAAU,MAIxd,QAAQ,GAEP,IAAK,KACJ,EAAqB,GAAI,IAAwB,EAAM,IAAI,IAAK,GAAI,OAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACnI,MACD,KAAK,KACJ,EAAqB,GAAI,GACzB,IAAI,GAAyB,EAAM,IAAI,IAAK,EACd,GAAoB,eAAiB,GAAI,GAAe,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,GAAM,GAAU,GAAM,IAAS,GAAU,EAAK,IAAiB,IAAT,EAAkB,GAAU,GAAM,IACtP,MACD,KAAK,KAEJ,EAAW,EAAM,IAAI,EAAG,GACxB,QAAQ,IAAI,UAAW,GAGvB,EAAgB,KAAK,aAAa,GAAY,EAAU,SAAW,eAC9D,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,mCAAqC,EAAW,4BAChF,EAAqB,GAAI,IAAqC,EAAc,GAAa,EAAM,IAAI,IAAK,IACxG,EAAW,EAAM,IAAI,EAAG,GACpB,EAAW,IACd,EAAgB,KAAK,aAAa,GAAW,EAAU,UAClD,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,yCAA2C,EAAW,4BAKvF,MACD,KAAK,KACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,UAClD,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,qCAAuC,EAAW,8BAClF,EAAqB,GAAI,IAAqB,EAAc,GAAI,KAAK,aAAa,EAAM,IAAI,IAAK,KACjG,MAQD,KAAK,KACJ,EAAqB,GAAI,IAAqB,EAAM,IAAI,IAAK,UAAW,EAAM,IAAI,IAAK,IAAM,EAAM,IAAI,IAAK,GAC5G,MACD,KAAK,KACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,UAClD,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,0CAA4C,EAAW,+BACvF,EAAqB,GAAI,IAAsB,EAAc,GAAI,EAAM,IAAI,KAAK,GAChF,MAYD,KAAK,KACJ,EAAW,EAAM,IAAI,EAAG,GACxB,EAAgB,KAAK,aAAa,GAAW,EAAU,SAAU,eAC5D,EAAc,IAClB,KAAK,QAAQ,GAAS,SAAS,mCAAqC,EAAW,mCAChF,EAAqB,GAAI,IAA0B,EAAc,GAAI,EAAM,IAAI,IAAK,GACpF,MACD,KAAK,KACJ,EAAqB,GAAI,IAAgB,EAAM,IAAI,IAAK,GAAI,EAAM,IAAI,IAAK,KAAO,EAAM,IAAI,IAAK,UAKnG,MADA,MAAK,sBACE,GAIA,EAAA,UAAA,oBAAR,WAEC,GAAI,GACA,EACA,CAIJ,IAFA,EAAW,KAAK,eAAe,kBAE3B,EAAW,EAAG,CAEjB,GAAI,EAMJ,KAJA,KAEA,EAAW,KAAK,eAAe,SAAW,EAEnC,KAAK,eAAe,SAAW,GAAU,CAC/C,GAAI,GACA,EACA,EACA,EACA,CAQJ,IALA,EAAQ,KAAK,eAAe,mBAC5B,EAAW,KAAK,cAChB,EAAY,KAAK,eAAe,mBAChC,EAAW,KAAK,eAAe,kBAE1B,KAAK,eAAe,SAAW,EAAY,EAG/C,MAFA,SAAQ,IAAI,2CAA6C,EAAc,uCACvE,KAAK,eAAe,SAAW,EACxB,CAGR,QAAQ,GACP,IAAK,GAAU,UACd,EAAW,KAAK,eAAe,aAAa,EAC5C,MACD,KAAK,GAAU,KACd,EAAW,KAAK,eAAe,UAC/B,MACD,KAAK,GAAU,MACd,EAAW,KAAK,eAAe,WAC/B,MACD,KAAK,GAAU,MACd,EAAW,KAAK,eAAe,SAC/B,MACD,KAAK,GAAU,KACf,IAAK,GAAU,MACd,EAAW,KAAK,eAAe,kBAC/B,MACD,KAAK,GAAU,OACd,EAAW,KAAK,eAAe,mBAC/B,MACD,KAAK,GAAU,OACf,IAAK,GAAU,MACd,EAAW,KAAK,eAAe,iBAC/B,MACD,KAAK,GAAU,QACd,EAAW,KAAK,eAAe,WAC/B,MACD,KAAK,GAAU,QACd,EAAW,KAAK,eAAe,YAC/B,MACD,SACC,EAAW,gCAAkC,EAC7C,KAAK,eAAe,UAAY,EAI9B,KAAK,QACR,QAAQ,IAAI,qBAAuB,EAAW,eAAiB,GAGhE,EAAW,GAAY,EACvB,GAAe,GAIjB,MAAO,IAGA,EAAA,UAAA,gBAAR,SAAwB,GAEvB,GAAI,GACA,EACA,EAAqB,EACrB,EAAsB,GAAI,GAK9B,IAHA,EAAW,KAAK,eAAe,kBAC/B,EAAW,KAAK,eAAe,SAAW,EAEtC,EAEH,KAAO,KAAK,eAAe,SAAW,GAAU,CAC/C,GAAI,GACA,EACA,CAKJ,IAHA,EAAM,KAAK,eAAe,oBAC1B,EAAM,KAAK,eAAe,kBAErB,KAAK,eAAe,SAAW,EAAO,EAG1C,MAFA,SAAQ,IAAI,0CAA4C,EAAc,uCACtE,KAAK,eAAe,SAAW,EACxB,CAGJ,GAAS,eAAe,EAAI,aAC/B,EAAO,EAAS,GAChB,EAAM,IAAI,EAAK,KAAK,eAAe,EAAM,KAEzC,KAAK,eAAe,UAAY,EAGjC,GAAe,MAIhB,MAAK,eAAe,SAAW,CAGhC,OAAO,IAIA,EAAA,UAAA,eAAR,SAAuB,EAAa,GAEnC,GAAI,GACA,CAEJ,QAAQ,GAEP,IAAK,GAAU,KACf,IAAK,GAAU,KACd,EAAW,EACX,EAAY,KAAK,eAAe,QAChC,MAED,KAAK,GAAU,MACd,EAAW,EACX,EAAY,KAAK,eAAe,SAChC,MAED,KAAK,GAAU,MACd,EAAW,EACX,EAAY,KAAK,eAAe,OAChC,MAED,KAAK,GAAU,MACd,EAAW,EACX,EAAY,KAAK,eAAe,gBAChC,MAED,KAAK,GAAU,OACd,EAAW,EACX,EAAY,KAAK,eAAe,iBAChC,MAED,KAAK,GAAU,OACf,IAAK,GAAU,MACf,IAAK,GAAU,MACd,EAAW,EACX,EAAY,KAAK,eAAe,eAChC,MAED,KAAK,GAAU,QACd,EAAW,EACX,EAAY,KAAK,eAAe,SAChC,MAED,KAAK,GAAU,QACd,EAAW,EACX,EAAY,KAAK,eAAe,UAChC,MAED,KAAK,GAAU,UACd,MAAO,MAAK,eAAe,aAAa,EAEzC,KAAK,GAAU,UACf,IAAK,GAAU,UACf,IAAK,GAAU,UACf,IAAK,GAAU,OACf,IAAK,GAAU,OACf,IAAK,GAAU,OACf,IAAK,GAAU,OACd,EAAW,EACX,EAAY,KAAK,eAAe,WAKlC,GAAe,EAAX,EAAgB,CAKnB,IAJA,GAAI,MACA,EAAkB,EAClB,EAAmB,EAAI,EAET,EAAX,GACN,EAAK,KAAK,EAAU,MAAM,KAAK,iBAC/B,GAGD,OAAO,GAGP,GAAI,GAAU,EAAU,MAAM,KAAK,eACnC,OAAO,IAID,EAAA,UAAA,YAAR,WAEC,GAAI,GACA,CAEJ,MAAK,UAAU,SAAW,EAE1B,KAAK,SAAS,GAAK,KAAK,UAAU,mBAClC,KAAK,SAAS,GAAK,KAAK,UAAU,mBAElC,EAAQ,KAAK,UAAU,oBAEvB,KAAK,WAAa,GAAS,KAAK,EAAO,GAAS,OAEvB,GAApB,KAAK,SAAS,IAAiC,GAApB,KAAK,SAAS,KAC7C,KAAK,gBAAkB,GAAS,KAAK,EAAO,GAAS,OACrD,KAAK,aAAe,GAAS,KAAK,EAAO,GAAS,OAClD,KAAK,eAAiB,GAAS,KAAK,EAAO,GAAS,QAMrD,KAAK,WAAa,EAAU,QAExB,KAAK,eACR,KAAK,WAAa,EAAU,SAG7B,KAAK,cAAgB,EAAU,QAE3B,KAAK,kBACR,KAAK,cAAgB,EAAU,SAGhC,KAAK,aAAe,EAAU,QAE1B,KAAK,iBACR,KAAK,aAAe,EAAU,SAG/B,KAAK,aAAe,KAAK,UAAU,mBAE/B,KAAK,SACR,QAAQ,IAAI,+BAAiC,KAAK,SAAS,GAAK,MAAQ,KAAK,SAAS,IACtF,QAAQ,IAAI,mCAAqC,KAAK,aAAe,kBAAoB,KAAK,WAAa,yBAA2B,KAAK,gBAAkB,2BAA6B,KAAK,aAAe,6BAA+B,KAAK,iBAInP,EAAW,KAAK,UAAU,kBACrB,KAAK,YAAc,GAAY,KAAK,UAAU,qBAClD,KAAK,eAAe,2DAKd,EAAA,UAAA,wBAAR,SAAgC,GAI/B,GAFI,KAAK,QAAQ,GAAQ,eAAgB,KACzC,EAAS,KAAK,QAAQ,GAAQ,OAC1B,KAAK,QAAQ,GAAQ,sBACxB,MAAO,MAAK,QAAQ,GAAQ,qBAC7B,IAEI,GACA,EACA,EACA,EACA,EACA,EACA,EARA,EAAgC,KAAK,QAAQ,GAAQ,KACrD,EAAwB,CAS5B,KADA,KAAK,QAAQ,GAAQ,sBAAwB,GAAI,OAC1C,EAAS,EAAS,cAAc,QAAQ,CAO9C,IANA,EAAS,GAAI,OACb,EAAiC,EAAS,cAAc,GACxD,EAAY,EAAS,YACrB,EAAK,EAAS,IACd,EAAU,EAAS,UAAU,EAAoB,SACjD,EAAQ,EAAS,UAAU,EAAoB,SAC1C,EAAI,EAAO,EAAJ,EAAe,IAC1B,EAAO,KAAK,EAAG,EAAQ,EAAE,EAAU,IACnC,EAAO,KAAK,EAAG,EAAQ,EAAE,EAAU,GAEpC,MAAK,QAAQ,GAAQ,sBAAsB,KAAK,GAChD,IAED,MAAO,MAAK,QAAQ,GAAQ,uBAGrB,EAAA,UAAA,YAAR,WAGC,GAAI,GAAa,KAAK,eAAe,mBACrC,OAAO,MAAK,eAAe,aAAa,IAGjC,EAAA,UAAA,aAAR,SAAqB,EAAgB,EAA+B,GAAA,SAAA,IAAA,EAAA,gBAEnE,IAAI,GAAyB,GAAI,OAC7B,EAAiB,CACrB,IAAI,EAAU,GACT,KAAK,QAAQ,IACZ,KAAK,QAAQ,GAAS,KACzB,KAAO,EAAU,EAAgB,QAAQ,CAExC,GAAI,GAAyB,KAAK,QAAQ,GAAS,IAEnD,IAAI,EAAO,WAAa,EAAgB,GAAU,CAEjD,GAAK,EAAgB,IAAY,EAAU,SAA8B,eAAjB,GACnD,KAAK,QAAQ,GAAS,eAAgB,GAGzC,MAFA,GAAY,MAAK,GACjB,EAAY,KAAK,KAAK,QAAQ,GAAS,MAChC,CAGT,IAAK,EAAgB,IAAY,EAAU,SAA8B,iBAAjB,EASvD,MAFA,GAAY,MAAK,GACjB,EAAY,KAAK,KAAK,QAAQ,GAAS,MAChC,CARP,IAAI,KAAK,QAAQ,GAAS,eAAgB,GAGzC,MAFA,GAAY,MAAK,GACjB,EAAY,KAAK,KAAK,QAAQ,GAAS,MAChC,EAUV,GAAK,EAAgB,IAAY,EAAU,UAAc,EAAO,WAAa,EAAU,KAAO,CAE7F,GAAI,GAAmB,KAAK,QAAQ,GAAS,IAI7C,OAFA,GAAY,MAAK,GACjB,EAAY,KAAK,EAAK,UACf,EAIR,IAQJ,MAFA,GAAY,MAAK,GACjB,EAAY,KAAK,KAAK,gBAAgB,EAAgB,GAAI,IACnD,GAGA,EAAA,UAAA,gBAAR,SAAwB,EAAkB,GAEzC,QAAQ,GACP,IAAM,IAAa,EAAU,QAC5B,GAAqB,eAAjB,EACH,MAAO,MAAK,uBACb,IAAqB,iBAAjB,EACH,MAAO,MAAK,mBACb,MACD,KAAM,IAAa,EAAU,SAC5B,MAAO,MAAK,qBAMd,MAAO,OAGA,EAAA,UAAA,mBAAR,WAKC,MAHK,MAAK,yBACT,KAAK,uBAAkD,EAAuB,sBAE7D,KAAK,wBAGhB,EAAA,UAAA,kBAAR,WAKC,MAHK,MAAK,kBACT,KAAK,gBAAkB,EAAuB,qBAE/B,KAAK,iBAId,EAAA,UAAA,sBAAR,WAEC,IAAK,KAAK,oBAAqB,CAC9B,GAAI,GAA2B,EAAuB,2BAEtD,MAAK,oBAAsB,GAAI,GAAkB,EAAe,EAAe,EAAe,EAAe,EAAe,GAC5H,KAAK,oBAAoB,KAAO,qBAGjC,MAAgB,MAAK,qBAGd,EAAA,UAAA,WAAR,SAAmB,GAElB,MAFkB,UAAA,IAAA,GAAA,GAEd,EACI,KAAK,eAAe,aACrB,KAAK,eAAe,aAIpB,EAAA,UAAA,cAAR,WAEC,MAAO,IAAI,GAAS,KAAK,yBAGlB,EAAA,UAAA,qBAAR,WAEC,GAAI,GACA,EAAwB,GAAI,OAAc,EAC9C,KAAK,EAAI,EAAO,EAAJ,EAAO,IAClB,EAAQ,GAAK,KAAK,eAAe,WAGlC,OAAO,IAGA,EAAA,UAAA,qBAAR,WAEC,GAAI,GAAwB,GAAI,OAAc,GAqC9C,OAnCA,GAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,EACb,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,EACb,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,GAAK,KAAK,WAAW,KAAK,iBAClC,EAAQ,IAAM,KAAK,WAAW,KAAK,iBACnC,EAAQ,IAAM,EACd,EAAQ,IAAM,KAAK,WAAW,KAAK,iBACnC,EAAQ,IAAM,KAAK,WAAW,KAAK,iBACnC,EAAQ,IAAM,KAAK,WAAW,KAAK,iBACnC,EAAQ,IAAM,EAIV,MAAM,EAAQ,MACjB,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,GAAK,EACb,EAAQ,IAAM,EACd,EAAQ,IAAM,EACd,EAAQ,IAAM,EACd,EAAQ,IAAM,GAIR,GA/nFM,EAAA,qBAA8B,OAC9B,EAAA,aAAsB,EACtB,EAAA,QAAiB,EACjB,EAAA,KAAc,EACd,EAAA,KAAc,EACd,EAAA,MAAe,EACf,EAAA,MAAe,EACf,EAAA,MAAe,EACf,EAAA,OAAgB,EAChB,EAAA,OAAgB,EAChB,EAAA,QAAiB,EACjB,EAAA,QAAiB,EACjB,EAAA,KAAc,GACd,EAAA,MAAe,GACf,EAAA,MAAe,GACf,EAAA,UAAmB,GACnB,EAAA,aAAsB,GACtB,EAAA,UAAmB,GACnB,EAAA,UAAmB,GACnB,EAAA,UAAmB,GACnB,EAAA,OAAgB,GAChB,EAAA,OAAgB,GAChB,EAAA,OAAgB,GAChB,EAAA,OAAgB,GA2mF/B,GA7pFwB,GAiqFlB,GAAQ,WAYb,QAZK,MAiCN,MAjBQ,GAAA,UAAA,QAAP,WAGC,KAAK,GAAK,KACV,KAAK,MAAQ,KACb,KAAK,cAAgB,KACrB,KAAK,sBAAwB,MAIvB,EAAA,UAAA,SAAP,SAAgB,GAEV,KAAK,gBACT,KAAK,cAAgB,GAAI,QAE1B,KAAK,cAAc,KAAK,IAE1B,KAEM,GAAa,WAAnB,QAAM,MAeN,MAbQ,GAAA,UAAA,IAAP,SAAW,EAAY,GAEtB,KAAM,EAAI,YAAe,GAGnB,EAAA,UAAA,IAAP,SAAW,EAAY,GAEtB,MAAI,MAAK,eAAe,EAAI,YACpB,KAAK,EAAI,YAET,GAGV,KAKM,GAAQ,WAAd,QAAM,MAuBN,MAJe,GAAA,KAAd,SAAmB,EAAc,GAEhC,OAAQ,EAAQ,IAAa,GAnBhB,EAAA,MAAe,EACf,EAAA,MAAe,EACf,EAAA,MAAe,EACf,EAAA,MAAe,EACf,EAAA,MAAe,GACf,EAAA,MAAe,GACf,EAAA,MAAe,GACf,EAAA,MAAe,IACf,EAAA,MAAe,IACf,EAAA,OAAgB,IAChB,EAAA,OAAgB,KAChB,EAAA,OAAgB,KAChB,EAAA,OAAgB,KAChB,EAAA,OAAgB,KAChB,EAAA,OAAgB,MAChB,EAAA,OAAgB,MAM/B,IAhFA,GAAA,QAAS,8zIC9vFF,EAAmB,EAAc,2CACjC,EAAU,EAAgB,kCAC1B,EAAU,EAAgB,sCAC1B,EAAW,EAAgB,uCAK3B,EAAsB,EAAa,wDAEnC,EAAQ,EAAiB,oCACzB,EAAmB,EAAc,+CAEjC,EAAI,EAAkB,oCAEtB,EAAc,EAAe,wDAC7B,EAAkB,EAAc,sDAChC,EAAsB,EAAa,yDAEnC,EAAsB,EAAa,qDACnC,EAAoB,EAAc,mDAKnC,EAAS,SAAA,GAsDd,QAtDK,GAsDO,EAA4B,GAA5B,SAAA,IAAA,EAAA,OAA4B,SAAA,IAAA,GAAA,GAEvC,EAAA,KAAA,KAAM,EAAoB,cApDnB,KAAA,WAAoB,GAAI,QA+BxB,KAAA,cAAmC,GAAI,GAWvC,KAAA,eAAwB,EACxB,KAAA,YAAqB,EAU5B,KAAK,aAAe,EACpB,KAAK,mBAAqB,EAsa5B,MAhewB,GAAlB,EAAS,GAkEA,EAAA,aAAd,SAA2B,GAG1B,MADA,GAAY,EAAU,cACF,OAAb,GAQM,EAAA,aAAd,SAA2B,GAE1B,MAAyC,QAAjC,EAAY,SAAS,EAAM,IAM7B,EAAA,UAAA,oBAAP,SAA2B,GAE1B,GAAwC,GAApC,EAAmB,OAAO,OAA9B,CAGA,GAAI,GAAsC,EAAmB,OAAO,EAEpE,IAAI,EAAO,CACV,GAAI,GAAkC,GAAI,GAAuB,EAE7D,MAAK,cAAgB,IACxB,EAAS,aAAe,EAAqB,YAGpB,KAAK,UAAW,SAAS,KAAK,OAExD,EAAS,KAAO,KAAK,MAAM,SAAS,KACpC,KAAK,MAAM,SAAW,EACtB,KAAK,gBAAgB,GACrB,KAAK,gBAAgB,KAAK,MAAM,UAChC,KAAK,gBAAgB,KAAK,OAE3B,KAAK,eAAgB,IAMf,EAAA,UAAA,2BAAP,WAGK,KAAK,aAAe,EACvB,KAAK,MAAM,SAAW,EAAuB,sBAE7C,KAAK,MAAM,SAAW,GAAI,GAAuB,EAAuB,qBAC9C,KAAK,MAAM,SAAU,aAAe,EAAqB,YAI1D,KAAK,UAAW,SAAS,KAAK,OAExD,KAAK,gBAAgB,KAAK,MAAM,UAChC,KAAK,gBAAgB,KAAK,OAC1B,KAAK,eAAgB,GAOf,EAAA,UAAA,iBAAP,WAWC,IATK,KAAK,kBACT,KAAK,UAAY,KAAK,gBACtB,KAAK,iBAAkB,EAIvB,KAAK,UAAU,SAAW,GAGpB,KAAK,aACX,GAAK,KAAK,cAuBH,GAAK,KAAK,UAEV,GAAK,KAAK,aAEV,GAAK,KAAK,cAEV,CAAA,GAAK,KAAe,YAAM,KAAkB,cAClD,MAAO,GAAW,YACP,MAAK,aAChB,KAAK,YAAa,EAElB,KAAK,UAAU,eAAe,KAAK,cAAc,SAEjD,KAAK,MAAM,KAAO,GACd,KAAK,gBAEkB,KAAK,UAAW,SAAS,KAAK,OAExD,KAAK,gBAAgB,KAAK,MAAM,UAChC,KAAK,gBAAgB,KAAK,QAG3B,KAAK,sCAjBL,MAAK,kBAFL,MAAK,iBAFL,MAAK,cAhBL,MAAK,UAAY,GAAI,GACrB,KAAK,MAAQ,GAAI,GAAK,KAAK,UAAW,MAClC,KAAK,aAAe,EACvB,KAAK,MAAM,SAAW,EAAuB,sBAE7C,KAAK,MAAM,SAAW,GAAI,GAAuB,EAAuB,qBAC9C,KAAK,MAAM,SAAU,aAAe,EAAqB,YAOpF,KAAK,cACL,KAAK,oBA2BP,OAAO,GAAW,eAGZ,EAAA,UAAA,eAAP,SAAsB,GAErB,EAAA,UAAM,eAAc,KAAA,KAAC,GAGrB,KAAK,UAAY,GAAI,IAOd,EAAA,UAAA,YAAR,WAEC,KAAK,OAAS,KAAK,UAAU,UAC7B,KAAK,SAAW,KAAK,UAAU,UAC/B,KAAK,WAAa,KAAK,UAAU,UACjC,KAAK,YAAc,KAAK,UAAU,UAElC,KAAK,UAAU,UACf,KAAK,UAAY,KAAK,UAAU,UAChC,KAAK,aAAe,KAAK,UAAU,UACnC,KAAK,OAAS,KAAK,UAAU,UAC7B,KAAK,SAAW,KAAK,UAAU,UAE/B,KAAK,UAAU,UACf,KAAK,WAAa,KAAK,UAAU,UACjC,KAAK,aAAe,KAAK,UAAU,UACnC,KAAK,UAAY,KAAK,UAAU,UAChC,KAAK,YAAc,KAAK,UAAU,UAClC,KAAK,cAAgB,KAAK,UAAU,UAEpC,KAAK,UAAU,UACf,KAAK,WAAa,KAAK,UAAU,UAEjC,KAAK,eAAgB,GAMd,EAAA,UAAA,mBAAR,WAEC,GAAI,GACA,EACA,EACA,CACJ,MAAK,eAAiB,GAAI,OAC1B,KAAK,UAAU,SAAW,KAAK,YAG/B,KAAK,GADD,GAAgB,GAAI,QAAO,oBAAsB,KAC5C,EAAoB,EAAG,EAAI,KAAK,YAAa,EACrD,EAAO,KAAK,UAAU,aAAa,IACnC,EAAO,EAAK,QAAQ,EAAQ,IAC5B,EAAW,EAAK,YAAY,KACxB,KAAK,qBACR,EAAa,EAAK,YAAY,MACW,IAAtC,EAAK,cAAc,QAAQ,SAAuD,IAAtC,EAAK,cAAc,QAAQ,SAC1E,EAAO,EAAK,UAAU,EAAa,EAAG,GACtC,EAAM,EAAO,IAAM,KAAK,cAExB,EAAM,EAGP,KAAK,eAAe,GAAK,EAGO,GAA5B,KAAK,aAAa,QACrB,KAAK,gBAAgB,EAAM,GAAI,GAAW,GAGxC,MAAK,eAAe,OAAS,EAChC,KAAK,MAAM,SAAS,KAAO,KAAK,eAAe,GAC/C,KAAK,eAAgB,GAMf,EAAA,UAAA,QAAR,WAEC,GAAI,GAAoB,CAExB,MAAK,KAAO,GAAI,OAA0B,EAAZ,KAAK,QACnC,KAAK,UAAU,SAAW,KAAK,SAC/B,KAAK,GAAI,GAAoB,EAAG,EAAI,KAAK,OAAQ,IAChD,KAAK,KAAK,KAAO,KAAK,UAAU,YAAY,KAAK,WACjD,KAAK,KAAK,KAAO,KAAK,UAAU,YAAY,KAAK,WAGlD,MAAK,WAAY,GAMV,EAAA,UAAA,WAAR,WAEC,GAAI,GAAmB,EAAmB,EAAmB,EAAoB,EAAoB,EACjG,CAQJ,KANA,KAAK,aAAe,GAAI,OACxB,KAAK,WAAa,GAAI,OACtB,KAAK,SAAW,GAAI,OAEpB,KAAK,UAAU,SAAW,KAAK,YAE1B,EAAI,EAAG,EAAI,KAAK,SAAU,IAE9B,EAAI,KAAK,UAAU,oBACnB,EAAI,KAAK,UAAU,oBACnB,EAAI,KAAK,UAAU,oBAGnB,EAAK,KAAK,UAAU,oBACpB,EAAK,KAAK,UAAU,oBACpB,EAAK,KAAK,UAAU,oBAEpB,KAAK,SAAS,EAAG,GACjB,KAAK,SAAS,EAAG,GACjB,KAAK,SAAS,EAAG,EAGlB,IAAI,GAAsB,KAAK,WAAW,MAG1C,KAFA,KAAK,SAAW,GAAI,OAAkB,EAAJ,GAE7B,EAAI,EAAO,EAAJ,IAAW,EACtB,KAAK,SAAS,GAAK,GAAK,KAAK,KAAK,KAAK,WAAW,IAAM,GACxD,KAAK,UAAU,GAAK,GAAK,GAAK,KAAK,MAAM,KAAK,WAAW,IAAM,GAAK,EAGrE,MAAK,cAAe,GASb,EAAA,UAAA,SAAR,SAAiB,EAA6B,GAE7C,GAAI,GAAuB,KAAK,UAAU,EAAa,EAE1C,KAAT,GACH,KAAK,SAAS,KAAK,KAAK,aAAa,QACrC,KAAK,aAAa,KAAK,GACvB,KAAK,WAAW,KAAK,IAErB,KAAK,SAAS,KAAK,IASb,EAAA,UAAA,UAAR,SAAkB,EAA6B,GAI9C,IAAK,GAFD,GAAsB,KAAK,aAAa,OAEnC,EAAoB,EAAO,EAAJ,IAAW,EAC1C,GAAI,KAAK,aAAa,IAAM,GAAe,KAAK,WAAW,IAAM,EAChE,MAAO,EAGT,OAAO,IAMA,EAAA,UAAA,YAAR,WAEC,GAAI,GAAW,EAAW,EACtB,EAAW,EAAW,EACtB,EACA,EAEA,EACA,EACA,EAAmB,EAAkB,EAHrC,EAA0B,KAAK,aAAa,OAK5C,EAAc,GACd,EAA0B,IAI9B,KAFA,KAAK,UAAU,SAAW,KAAK,cAE1B,EAAI,EAAG,EAAI,KAAK,WAAY,IAAK,CAiBrC,IAfA,EAAY,GAAI,OAChB,EAAY,GAAI,OAAsB,EAAR,GAE9B,EAAK,KAAK,UAAU,YACpB,EAAK,KAAK,UAAU,YACpB,EAAK,KAAK,UAAU,YAEpB,EAAK,KAAK,UAAU,YACpB,EAAK,KAAK,UAAU,YACpB,EAAK,KAAK,UAAU,YAEpB,EAAO,KAAK,gBAIP,EAAI,EAAG,EAAI,KAAK,aAAc,IAAK,KAAK,UAAU,WACtD,EAAU,KAAK,EAAG,KAAK,UAAU,mBAAqB,EAAI,EAAG,KAAK,UAAU,mBAAqB,EAAI,EAAG,KAAK,UAAU,mBAAqB,EAG7I,KADA,EAAI,EACC,EAAI,EAAO,EAAJ,EAAa,IACxB,EAAU,KAAO,EAA+B,EAArB,KAAK,aAAa,IAC7C,EAAU,KAAO,EAA+B,EAArB,KAAK,aAAa,GAAO,GACpD,EAAU,KAAO,EAA+B,EAArB,KAAK,aAAa,GAAO,EAGrD,GAAU,GAAI,IAAoB,GAER,MAAtB,KAAK,gBACR,KAAK,cAAgB,GAEtB,EAAW,GAAI,GACf,EAAS,eAAe,GAExB,EAAQ,cAAc,KAAK,UAC3B,EAAQ,gBAAgB,GACxB,EAAQ,UAAU,KAAK,UACvB,EAAQ,cACR,EAAQ,eACR,EAAQ,mBAAoB,EAC5B,EAAQ,oBAAqB,CAE7B,IAAI,GAAsB,KAAK,WAAW,EAErC,KAIA,IACH,KAAK,gBAAgB,GACrB,KAAK,cAAc,aAAa,IAGjC,EAAO,GAAI,GACX,EAAK,KAAO,EACZ,EAAK,kBAAmB,EAExB,KAAK,WAAW,GAAQ,EAExB,EAAW,GAEZ,EAAK,SAAS,EAAU,IAAK,EAAU,KAIpC,IACH,KAAK,gBAAgB,GACrB,KAAK,cAAc,aAAa,IAIjC,KAAK,gBAAgB,KAAK,eAE1B,KAAK,eAAgB,GAGd,EAAA,UAAA,cAAR,WAIC,IAAK,GAFD,GAAc,GACd,EAAoB,EACf,EAAoB,EAAO,GAAJ,EAAQ,IAAK,CAC5C,GAAI,GAAqB,KAAK,UAAU,kBAEpC,MAAK,MAAM,GAAM,IAAQ,KAAK,MAAM,IAAO,KAAa,GAAL,IACtD,GAAQ,OAAO,aAAa,IAEzB,KAAK,MAAM,IAAO,IAAQ,KAAK,MAAM,IAAO,IAC/C,IAEF,MAAO,IA5dM,EAAA,IAAqB,EA8dpC,GAhewB,EAkexB,GAAmB,QAAV,63BC7fF,EAAU,EAAgB,mCAC1B,EAAQ,EAAiB,iCACzB,EAAmB,EAAc,2CACjC,EAAU,EAAgB,sCAE1B,EAAS,EAAgB,kDACzB,EAAY,EAAgB,qDAC5B,EAAgB,EAAe,0DAOhC,EAAa,SAAA,GAyClB,QAzCK,GAyCO,EAAwC,GAAxC,SAAA,IAAA,EAAA,MAAwC,SAAA,IAAA,EAAA,GAEnD,EAAA,KAAA,KAAM,EAAoB,MAzBnB,KAAA,YAA6B,EAE7B,KAAA,MAAuB,EACvB,KAAA,eAAgC,EAuBvC,KAAK,cAAgB,GAAI,EACzB,IAAI,GAAgB,GAAI,GACpB,EAAgB,GAAI,EAExB,GAAG,cAAc,EAAS,OAAiB,IAAR,KAAK,IACxC,EAAG,cAAc,EAAS,OAAiB,IAAR,KAAK,IAExC,KAAK,cAAc,SAAS,EAAI,GAE5B,IACH,KAAK,cAAc,SAAS,EAAI,GAChC,EAAG,cAAc,EAAwB,GACzC,KAAK,cAAc,SAAS,EAAI,KAAK,gBAihBxC,MAzkB4B,GAAtB,EAAa,GAiEJ,EAAA,aAAd,SAA2B,GAG1B,MADA,GAAY,EAAU,cACF,WAAb,GAQM,EAAA,aAAd,WAEC,OAAO,GAMD,EAAA,UAAA,iBAAP,WAEC,GAAI,EAOJ,KALK,KAAK,kBACT,KAAK,UAAY,KAAK,gBACtB,KAAK,iBAAkB,GAGjB,KAAK,aAAa,CAExB,OADA,EAAQ,KAAK,gBAEZ,IAAK,GAAc,cAClB,KAAK,YACL,MACD,KAAK,GAEJ,KACD,KAAK,GAAc,cAElB,GADA,KAAK,SAAW,KAAK,aACA,IAAjB,KAAK,SACR,KAAM,IAAI,OAAM,sCACjB,MACD,KAAK,GAAc,mBAClB,KAAK,UACL,MACD,KAAK,GAAc,iBAClB,KAAK,WAAa,KAAK,aACvB,KAAK,QAAU,GAAI,OACnB,KAAK,WAAa,GAAI,MACtB,MACD,KAAK,GAAc,iBAClB,KAAK,WAAa,KAAK,aACvB,KAAK,WAAa,GAAI,OAAqB,KAAK,YAChD,KAAK,eAAiB,GAAI,OAAqB,KAAK,WACpD,MACD,KAAK,GAAc,iBAClB,KAAK,WAAa,KAAK,YACvB,MACD,KAAK,GAAc,8BAClB,KAAK,uBAAyB,KAAK,YACnC,MACD,KAAK,GAAc,gBAClB,KAAK,gBACL,MACD,KAAK,GAAc,aAClB,KAAK,aACL,MACD,KAAK,GAAc,iBAClB,KAAK,gBACL,MACD,KAAK,GAAc,YAClB,KAAK,YACL,MACD,SACM,KAAK,aACT,KAAK,0BAGR,GAAI,KAAK,YAIR,MAHA,MAAK,MAAQ,GAAI,GACjB,KAAK,gBACL,KAAK,gBAAgB,KAAK,OACnB,EAAW,aAGpB,MAAO,GAAW,eAMX,EAAA,UAAA,cAAR,WAEC,IAAK,GAAI,GAAmB,EAAG,EAAI,KAAK,aAAc,EACrD,KAAK,MAAM,SAAS,KAAK,cAAc,KAAK,WAAW,IAAK,IAAK,KAAK,aAQhE,EAAA,UAAA,cAAR,SAAsB,GAarB,IAAK,GAXD,GACA,EACA,EACA,EACA,EACA,EAAqB,GAAI,GACzB,EAAyB,GAAI,GAC7B,EAA2B,EAAU,WACrC,EAAwB,GAAI,GAC5B,EAA8B,EAAS,WAElC,EAAmB,EAAG,EAAI,KAAK,aAAc,EAAG,CACxD,EAAI,EACJ,EAAO,GAAI,GACX,EAAY,KAAK,WAAW,GAC5B,EAAO,KAAK,eAAe,GAC3B,EAAQ,EAAU,MAClB,EAAU,EAAI,EAAK,SAAS,EAC5B,EAAU,EAAI,EAAK,SAAS,EAC5B,EAAU,EAAI,EAAK,SAAS,EAC5B,EAAY,EAAI,EAAK,YAAY,EACjC,EAAY,EAAI,EAAK,YAAY,EACjC,EAAY,EAAI,EAAK,YAAY,EAErB,EAAR,IACH,EAAU,EAAI,EAAW,EAAU,WAAc,MACtC,EAAR,IACH,EAAU,EAAI,EAAW,EAAU,WAAc,MACtC,EAAR,IACH,EAAU,EAAI,EAAW,EAAU,WAAc,MACtC,EAAR,IACH,EAAY,EAAI,EAAW,EAAU,WAAc,MACxC,GAAR,IACH,EAAY,EAAI,EAAW,EAAU,WAAc,MACxC,GAAR,IACH,EAAY,EAAI,EAAW,EAAU,WAAc,KAEpD;GAAI,GAAW,EAAI,EAAY,EAAE,EAAY,EAAI,EAAY,EAAE,EAAY,EAAI,EAAY,EAAE,EAAY,CACzG,GAAY,EAAQ,EAAJ,EAAO,GAAK,KAAK,KAAK,GAElC,EAAU,YAAc,GAC3B,EAAK,YAAY,SAAS,KAAK,cAAe,GAC9C,EAAK,YAAc,KAAK,cAAc,YAAY,KAElD,EAAK,YAAY,SAAS,GAC1B,EAAK,YAAY,EAAI,EAAU,EAC/B,EAAK,YAAY,EAAI,EAAU,EAC/B,EAAK,YAAY,EAAI,EAAU,GAEhC,EAAK,YAAY,GAAK,EAAK,YAAY,EACvC,EAAK,YAAY,GAAK,EAAK,YAAY,EACvC,EAAK,YAAY,GAAK,EAAK,YAAY,EAEvC,EAAW,GAAK,EAGjB,MAAO,IAMA,EAAA,UAAA,eAAR,WAEC,GAAI,GACA,EACA,EAAe,KAAK,eACpB,EAAmB,CAEV,MAAT,GACH,KAAK,yBAEN,GACK,MAAK,aACR,KAAK,eACN,EAAO,GAAI,GACX,EAAK,KAAO,KAAK,qBACjB,EAAK,YAAc,KAAK,aACxB,EAAK,MAAQ,KAAK,aAClB,EAAK,WAAa,KAAK,aACvB,KAAK,WAAW,KAAO,EAEvB,EAAK,KAAK,cAEA,KAAN,IACH,KAAK,UACL,EAAK,KAAK,eACN,GAAM,EAAc,eACvB,KAAK,aACN,EAAK,KAAK,eAGD,KAAN,GACH,KAAK,gBAEQ,KAAN,IAMF,EAAA,UAAA,YAAR,WAEC,GAAI,GACA,EACA,EAAe,KAAK,eACpB,EAAmB,CAEV,MAAT,GACH,KAAK,yBAEN,GACK,MAAK,aACR,KAAK,eACN,EAAO,GAAI,GACX,EAAK,IAAM,KAAK,gBAChB,EAAK,IAAM,KAAK,gBAChB,KAAK,QAAQ,KAAO,EAEpB,EAAK,KAAK,cAEA,KAAN,IACH,KAAK,UACL,EAAK,KAAK,eACN,GAAM,EAAc,eACvB,KAAK,aACN,EAAK,KAAK,eAGD,KAAN,GACH,KAAK,gBAEQ,KAAN,IAMF,EAAA,UAAA,eAAR,WAEC,GAAI,GACA,EACA,EAAe,KAAK,eACpB,EAAmB,CAEV,MAAT,GACH,KAAK,yBAEN,GACK,MAAK,aACR,KAAK,eACN,EAAO,GAAI,GACX,EAAK,SAAW,KAAK,gBACrB,EAAK,YAAc,KAAK,kBACxB,KAAK,eAAe,KAAO,EAE3B,EAAK,KAAK,cAEA,KAAN,IACH,KAAK,UACL,EAAK,KAAK,eACN,GAAM,EAAc,eACvB,KAAK,aACN,EAAK,KAAK,eAGD,KAAN,GACH,KAAK,gBAEQ,KAAN,IAMF,EAAA,UAAA,WAAR,WAEC,GAAI,GACA,EACA,EACA,CAEJ,GAAa,KAAK,aAElB,EAAQ,KAAK,eACA,KAAT,GACH,KAAK,yBAEN,GAAG,CACE,KAAK,aACR,KAAK,eACN,EAAO,GAAI,GACX,EAAK,WAAa,GAAI,OAAc,KAAK,uBAEzC,KAAK,GAAI,GAAmB,EAAG,EAAI,KAAK,yBAA0B,EACjE,EAAK,WAAW,GAAK,KAAK,eAE3B,MAAK,WAAW,GAAc,EAE9B,EAAK,KAAK,cAEA,KAAN,IACH,KAAK,UACL,EAAK,KAAK,eACN,GAAM,EAAc,eACvB,KAAK,aACN,EAAK,KAAK,eAGD,KAAN,GACH,KAAK,gBAEQ,KAAN,IAMF,EAAA,UAAA,QAAR,WAEC,KAAK,cACL,KAAK,iBACL,KAAK,YAAc,KAAK,aAAe,KAAK,UAAU,QAM/C,EAAA,UAAA,aAAR,WAKC,IAHA,GAAI,GACA,EAAe,IAEX,KAAK,aAAa,CAEzB,GADA,EAAK,KAAK,cACA,KAAN,GAAmB,MAAN,GAAoB,MAAN,GAAoB,KAAN,GAG5C,GAFI,GAAS,EAAc,eAC1B,KAAK,iBACO,IAAT,EACH,MAAO,OAER,IAAS,CAEV,IAAI,GAAS,EAAc,cAC1B,MAAO,GAGT,MAAO,IAMA,EAAA,UAAA,eAAR,WAEC,GAAI,EAEJ,GACC,GAAK,KAAK,oBAA4B,MAAN,GAAoB,KAAN,GAAmB,MAAN,GAAoB,KAAN,EAE1E,MAAK,WAME,EAAA,UAAA,WAAR,WAGC,IADA,GAAI,IACI,KAAK,aAAqB,MAAN,GAC3B,EAAK,KAAK,eAMJ,EAAA,UAAA,YAAR,WAEC,GAAI,GAAY,KAAK,UAAU,OAAO,KAAK,cAW3C,OATU,MAAN,KACD,KAAK,MACP,KAAK,eAAiB,GACN,MAAN,KACR,KAAK,eAEJ,KAAK,aAAe,KAAK,UAAU,SACtC,KAAK,aAAc,GAEb,GAMA,EAAA,UAAA,WAAR,WAEC,GAAI,GAAW,SAAS,KAAK,eAG7B,OAFI,OAAM,IACT,KAAK,eAAe,YACd,GAMA,EAAA,UAAA,cAAR,WAEC,GAAI,GAAW,WAAW,KAAK,eAG/B,OAFI,OAAM,IACT,KAAK,eAAe,cACd,GAMA,EAAA,UAAA,cAAR,WAEC,GAAI,GAAe,GAAI,GACnB,EAAY,KAAK,cAWrB,OATU,KAAN,GACH,KAAK,eAAe,KACrB,EAAI,EAAI,KAAK,gBACb,EAAI,EAAI,KAAK,gBACb,EAAI,EAAI,KAAK,gBAEc,KAAvB,KAAK,gBACR,KAAK,eAAe,KAEd,GAMA,EAAA,UAAA,gBAAR,WAEC,GAAI,GAAkB,GAAI,GACtB,EAAY,KAAK,cAEX,MAAN,GACH,KAAK,eAAe,KACrB,EAAK,EAAI,KAAK,gBACd,EAAK,EAAI,KAAK,gBACd,EAAK,EAAI,KAAK,mBAGV,GAAW,EAAK,EAAK,EAAE,EAAK,EAAM,EAAK,EAAE,EAAK,EAAM,EAAK,EAAE,EAAK,CAMpE,OALA,GAAK,EAAQ,EAAJ,EAAO,GAAK,KAAK,KAAK,GAEJ,KAAvB,KAAK,gBACR,KAAK,eAAe,KAEd,GAMA,EAAA,UAAA,SAAR,WAGC,KAAK,sBAOE,EAAA,UAAA,mBAAR,WAEC,KAAK,gBAEL,IAAI,GAAY,KAAK,cACjB,EAAa,EAEP,MAAN,GACH,KAAK,eAAe,IAErB,GACK,MAAK,aACR,KAAK,eACN,EAAK,KAAK,cACA,KAAN,IACH,GAAO,SACM,KAAN,EAET,OAAO,IAMA,EAAA,UAAA,aAAR,WAEC,KAAM,IAAI,OAAM,2BAOT,EAAA,UAAA,eAAR,SAAuB,GAEtB,KAAM,IAAI,OAAM,6BAA+B,KAAK,MAAQ,GAAK,eAAiB,KAAK,eAAiB,KAAO,EAAW,kBAAoB,KAAK,UAAU,OAAO,KAAK,YAAc,GAAK,iBAMrL,EAAA,UAAA,wBAAR,WAEC,KAAM,IAAI,OAAM,4BAA8B,KAAK,MAAQ,GAAK,eAAiB,KAAK,eAAiB,OAnkB1F,EAAA,cAAuB,aACvB,EAAA,mBAA4B,cAC5B,EAAA,iBAA0B,YAC1B,EAAA,iBAA0B,YAC1B,EAAA,iBAA0B,YAC1B,EAAA,8BAAuC,wBAEvC,EAAA,gBAAyB,YACzB,EAAA,aAAsB,SACtB,EAAA,iBAA0B,YAC1B,EAAA,YAAqB,QAErB,EAAA,cAAuB,KAyjBtC,GAzkB4B,GAilBtB,EAAa,WAAnB,QAAM,MAWN,MAAA,MAKM,EAAU,WAAhB,QAAM,MAWN,MAAA,MAKM,EAAS,WAAf,QAAM,MAWN,MAAA,MAKM,EAAa,WAAnB,QAAM,MAqBN,MAAA,KA3EA,GAAA,QAAS,ujBCxlBF,EAAU,EAAgB,mCAC1B,EAAQ,EAAiB,iCACzB,EAAmB,EAAc,2CACjC,EAAU,EAAgB,sCAE1B,EAAsB,EAAa,wDACnC,EAAQ,EAAiB,oCACzB,EAAmB,EAAc,+CACjC,EAAI,EAAkB,oCAEtB,EAAoB,EAAc,wDAClC,EAAQ,EAAiB,iDACzB,EAAa,EAAe,sDAS7B,EAAa,SAAA,GA4ClB,QA5CK,GA4CO,EAAwC,GAOnD,GAPW,SAAA,IAAA,EAAA,MAAwC,SAAA,IAAA,EAAA,GAEnD,EAAA,KAAA,KAAM,EAAoB,MA1BnB,KAAA,YAA6B,EAE7B,KAAA,MAAuB,EACvB,KAAA,eAAgC,EAwBvC,KAAK,cAAgB,GAAI,GAEzB,KAAK,cAAc,cAAc,EAAS,OAAiB,IAAR,KAAK,IAEpD,EAAwB,CAC3B,GAAI,GAAkB,GAAI,EAC1B,GAAK,cAAc,EAAwB,GAC3C,KAAK,cAAc,SAAS,KAAK,cAAe,IAokBnD,MA1nB4B,GAAtB,EAAa,GA+DJ,EAAA,aAAd,SAA2B,GAG1B,MADA,GAAY,EAAU,cACF,WAAb,GAQM,EAAA,aAAd,WAEC,OAAO,GAMD,EAAA,UAAA,iBAAP,WAEC,GAAI,EAOJ,KALK,KAAK,kBACT,KAAK,UAAY,KAAK,gBACtB,KAAK,iBAAkB,GAGjB,KAAK,aAAa,CAExB,OADA,EAAQ,KAAK,gBAEZ,IAAK,GAAc,cAClB,KAAK,YACL,MACD,KAAK,GAAc,cAElB,GADA,KAAK,SAAW,KAAK,aACA,IAAjB,KAAK,SACR,KAAM,IAAI,OAAM,sCACjB,MACD,KAAK,GAAc,mBAClB,KAAK,UACL,MACD,KAAK,GAAc,iBAClB,KAAK,WAAa,KAAK,aACvB,KAAK,WAAa,GAAI,OAAgB,KAAK,WAC3C,MACD,KAAK,GAAc,iBAClB,KAAK,WAAa,KAAK,YACvB,MACD,KAAK,GAAc,aAClB,KAAK,aACL,MACD,KAAK,GAAc,WAClB,KAAK,WACL,MACD,SACM,KAAK,aACT,KAAK,0BAGR,GAAI,KAAK,YAAa,CACrB,KAAK,yBACL,KAAK,cAAgB,GAAI,GAAqB,KAAK,gBAEnD,KAAK,MAAQ,GAAI,GAAK,GAAI,GAAY,MACtC,KAAK,UAAY,KAAK,MAAM,QAE5B,KAAK,GAAI,GAAmB,EAAG,EAAI,KAAK,UAAU,SAAU,EAC3D,KAAK,UAAU,eAAe,KAAK,cAAc,KAAK,UAAU,GAAG,WAAY,KAAK,UAAU,GAAG,WAAY,KAAK,UAAU,GAAG,SAYhI,OAN0B,MAAK,UAAW,SAAS,KAAK,OAExD,KAAK,gBAAgB,KAAK,WAC1B,KAAK,gBAAgB,KAAK,OAC1B,KAAK,gBAAgB,KAAK,WAC1B,KAAK,gBAAgB,KAAK,eACnB,EAAW,cAGpB,MAAO,GAAW,eAGZ,EAAA,UAAA,eAAP,SAAsB,GAErB,EAAA,UAAM,eAAc,KAAA,KAAC,GAGrB,KAAK,UAAY,GAAI,IAGd,EAAA,UAAA,uBAAR,WAEC,KAAK,eAAiB,CAGtB,KAAK,GADD,GAA6B,KAAK,UAAU,OACvC,EAAmB,EAAO,EAAJ,IAAmB,EAKjD,IAAK,GAJD,GAAoB,KAAK,UAAU,GACnC,EAA+B,EAAS,WACxC,EAA0B,EAAW,OAEhC,EAAmB,EAAO,EAAJ,IAAgB,EAAG,CACjD,GAAI,GAA6B,KAAK,sBAAsB,EAAW,GAAI,EAAS,YAChF,EAA6B,EAAW,GAAG,YAAc,CACzD,GAAc,KAAK,iBACtB,KAAK,eAAiB,KAKlB,EAAA,UAAA,sBAAR,SAA8B,EAAmB,GAOhD,IAAK,GAFD,GAHA,EAAuB,EAAO,YAC9B,EAAqB,EAAO,YAAc,EAAO,YACjD,EAAuB,EAGlB,EAAmB,EAAW,EAAJ,IAAW,EAC7C,EAAS,EAAQ,GAAG,KACN,GAAV,KACD,CAGJ,OAAO,IAMA,EAAA,UAAA,YAAR,WAEC,GAAI,GACA,EACA,EACA,EACA,EAAmB,EACnB,EAAe,KAAK,cAEX,MAAT,GACH,KAAK,0BAEN,KAAK,UAAY,GAAI,EAErB,GAAG,CACE,KAAK,aACR,KAAK,eACN,EAAQ,GAAI,GACZ,EAAM,KAAO,KAAK,qBAClB,EAAM,YAAc,KAAK,aACzB,EAAM,KAAK,gBACX,EAAM,KAAK,cAAc,YAAY,GACrC,EAAO,KAAK,kBAGZ,KAAK,WAAW,GAAK,EAAK,aAC1B,KAAK,WAAW,GAAG,kBAAkB,EAAI,EAAG,EAAI,EAAG,EAAI,EACvD,IAAI,GAAe,KAAK,WAAW,GAAG,OACtC,GAAI,SACJ,EAAM,gBAAkB,EAAI,QAE5B,KAAK,UAAU,OAAO,KAAO,EAE7B,EAAK,KAAK,cAEA,KAAN,IACH,KAAK,UACL,EAAK,KAAK,eACN,GAAM,EAAc,eACvB,KAAK,aACN,EAAK,KAAK,eAID,KAAN,GACH,KAAK,gBACQ,KAAN,IAMF,EAAA,UAAA,QAAR,WAEC,KAAK,cACL,KAAK,iBACL,KAAK,YAAc,KAAK,aAAe,KAAK,UAAU,QAM/C,EAAA,UAAA,UAAR,WAEC,GACI,GACA,EACA,EACA,EAJA,EAAe,KAAK,cAYxB,KANa,KAAT,GACH,KAAK,0BAEe,MAAjB,KAAK,WACR,KAAK,SAAW,GAAI,QAER,KAAN,GAEN,OADA,EAAK,KAAK,gBAET,IAAK,GAAc,cAClB,KAAK,YACL,MACD,KAAK,GAAc,kBAClB,KAAK,SAAS,KAAK,KAAK,qBACxB,MACD,KAAK,GAAc,qBAClB,EAAa,GAAI,OAAkB,KAAK,aACxC,MACD,KAAK,GAAc,oBAClB,EAAU,GAAI,OAAgC,EAAlB,KAAK,aACjC,MACD,KAAK,GAAc,uBAClB,EAAU,GAAI,OAAiB,KAAK,aACpC,MACD,KAAK,GAAc,gBAClB,KAAK,YAAY,EACjB,MACD,KAAK,GAAc,eAClB,KAAK,SAAS,EACd,MACD,KAAK,GAAc,kBAClB,KAAK,WAAW,GAKG,MAAlB,KAAK,YACR,KAAK,UAAY,GAAI,OAEtB,IAAI,GAAoB,KAAK,UAAU,MACvC,MAAK,UAAU,GAAK,GAAI,GACxB,KAAK,UAAU,GAAG,WAAa,EAC/B,KAAK,UAAU,GAAG,WAAa,EAC/B,KAAK,UAAU,GAAG,QAAU,GAUrB,EAAA,UAAA,cAAR,SAAsB,EAA8B,EAA0B,GAgB7E,IAAK,GAbD,GAAmB,EAAmB,EACtC,EACA,EACA,EACA,EAOA,EAZA,EAAqB,EAAW,OAMhC,EAA8B,GAAI,IAAoB,GACtD,EAAoB,GAAI,OAAkB,EAAJ,GACtC,EAAyB,GAAI,OAAkB,EAAJ,GAC3C,EAA6B,GAAI,OAAc,EAAI,KAAK,gBACxD,EAA6B,GAAI,OAAc,EAAI,KAAK,gBACxD,EAAmB,EAGd,EAAmB,EAAO,EAAJ,IAAW,EAAG,CAC5C,EAAS,EAAW,GACpB,EAAkB,EAAb,EAAO,MACZ,EAAK,EAAK,EACV,EAAK,EAAK,EACV,EAAS,GAAM,EAAS,GAAM,EAAS,GAAM,EAE7C,EAAiB,CACjB,KAAK,GAAI,GAAmB,EAAG,EAAI,EAAO,cAAe,EACxD,EAAS,EAAQ,EAAO,YAAc,GAClC,EAAO,KAAO,IACjB,EAAW,KAAK,WAAW,EAAO,OAClC,EAAM,EAAS,gBAAgB,EAAO,KACtC,EAAS,IAAO,EAAI,EAAE,EAAO,KAC7B,EAAS,IAAO,EAAI,EAAE,EAAO,KAC7B,EAAS,IAAO,EAAI,EAAE,EAAO,KAG7B,EAAa,GAAkB,EAAb,EAAO,MACzB,EAAa,KAAO,EAAO,OACzB,EAIJ,KAAK,EAAI,EAAgB,EAAI,KAAK,iBAAkB,EACnD,EAAa,GAAK,EAClB,EAAa,KAAO,CAGrB,GAAK,EAAO,OAAS,EACrB,EAAI,KAAQ,EAAO,EACnB,EAAI,GAAM,EAAO,EAgBlB,MAbA,GAAQ,gBAAkB,KAAK,eAC/B,EAAQ,cAAc,GACtB,EAAQ,gBAAgB,GACxB,EAAQ,UAAU,GAClB,EAAQ,mBAAmB,GAC3B,EAAQ,mBAAmB,GAE3B,EAAQ,cACR,EAAQ,eAER,EAAQ,oBAAqB,EAC7B,EAAQ,mBAAoB,EAErB,GAOA,EAAA,UAAA,SAAR,SAAiB,GAEhB,GAAI,GAAyC,EAAlB,KAAK,YAChC,GAAQ,GAAS,KAAK,aACtB,EAAQ,EAAQ,GAAK,KAAK,aAC1B,EAAQ,EAAQ,GAAK,KAAK,cAOnB,EAAA,UAAA,WAAR,SAAmB,GAElB,GAAI,GAAmB,GAAI,EAC3B,GAAO,MAAQ,KAAK,aACpB,EAAO,MAAQ,KAAK,aACpB,EAAO,KAAO,KAAK,gBACnB,EAAO,IAAM,KAAK,gBAClB,EAAQ,EAAO,OAAS,GAOjB,EAAA,UAAA,YAAR,SAAoB,GAEnB,GAAI,GAAoB,GAAI,EAC5B,GAAO,MAAQ,KAAK,aACpB,KAAK,QAAQ,GACb,EAAO,YAAc,KAAK,aAC1B,EAAO,YAAc,KAAK,aAE1B,EAAW,EAAO,OAAS,GAOpB,EAAA,UAAA,QAAR,SAAgB,GAEf,GAAI,GAAY,KAAK,cACX,MAAN,GACH,KAAK,eAAe,KACrB,EAAW,EAAI,KAAK,gBACpB,EAAW,EAAI,KAAK,gBAEO,KAAvB,KAAK,gBACR,KAAK,eAAe,MAMd,EAAA,UAAA,aAAR,WAKC,IAHA,GAAI,GACA,EAAe,IAEX,KAAK,aAAa,CAEzB,GADA,EAAK,KAAK,cACA,KAAN,GAAmB,MAAN,GAAoB,MAAN,GAAoB,KAAN,GAG5C,GAFI,GAAS,EAAc,eAC1B,KAAK,iBACO,IAAT,EACH,MAAO,OAER,IAAS,CAEV,IAAI,GAAS,EAAc,cAC1B,MAAO,GAGT,MAAO,IAMA,EAAA,UAAA,eAAR,WAEC,GAAI,EAEJ,GACC,GAAK,KAAK,oBAA4B,MAAN,GAAoB,KAAN,GAAmB,MAAN,GAAoB,KAAN,EAE1E,MAAK,WAME,EAAA,UAAA,WAAR,WAGC,IADA,GAAI,IACI,KAAK,aAAqB,MAAN,GAC3B,EAAK,KAAK,eAMJ,EAAA,UAAA,YAAR,WAEC,GAAI,GAAY,KAAK,UAAU,OAAO,KAAK,cAW3C,OATU,MAAN,KACD,KAAK,MACP,KAAK,eAAiB,GACN,MAAN,KACR,KAAK,eAEJ,KAAK,aAAe,KAAK,UAAU,SACtC,KAAK,aAAc,GAEb,GAMA,EAAA,UAAA,WAAR,WAEC,GAAI,GAAW,SAAS,KAAK,eAG7B,OAFI,OAAM,IACT,KAAK,eAAe,YACd,GAMA,EAAA,UAAA,cAAR,WAEC,GAAI,GAAW,WAAW,KAAK,eAG/B,OAFI,OAAM,IACT,KAAK,eAAe,cACd,GAMA,EAAA,UAAA,cAAR,WAEC,GAAI,GAAe,GAAI,GACnB,EAAY,KAAK,cAWrB,OATU,KAAN,GACH,KAAK,eAAe,KACrB,EAAI,GAAK,KAAK,gBACd,EAAI,EAAI,KAAK,gBACb,EAAI,EAAI,KAAK,gBAEc,KAAvB,KAAK,gBACR,KAAK,eAAe,KAEd,GAMA,EAAA,UAAA,gBAAR,WAEC,GAAI,GAAkB,GAAI,GACtB,EAAY,KAAK,cAEX,MAAN,GACH,KAAK,eAAe,KACrB,EAAK,EAAI,KAAK,gBACd,EAAK,GAAK,KAAK,gBACf,EAAK,GAAK,KAAK,mBAGX,GAAW,EAAI,EAAK,EAAE,EAAK,EAAI,EAAK,EAAE,EAAK,EAAI,EAAK,EAAE,EAAK,CAC/D,GAAK,EAAQ,EAAJ,EAAO,GAAK,KAAK,KAAK,GAEJ,KAAvB,KAAK,gBACR,KAAK,eAAe,IAErB,IAAI,GAAqB,GAAI,EAE7B,OADA,GAAQ,SAAS,KAAK,cAAe,GAC9B,GAMA,EAAA,UAAA,SAAR,WAGC,KAAK,sBAOE,EAAA,UAAA,mBAAR,WAEC,KAAK,gBAEL,IAAI,GAAY,KAAK,cACjB,EAAa,EAEP,MAAN,GACH,KAAK,eAAe,IAErB,GACK,MAAK,aACR,KAAK,eACN,EAAK,KAAK,cACA,KAAN,IACH,GAAO,SACM,KAAN,EAET,OAAO,IAMA,EAAA,UAAA,aAAR,WAEC,KAAM,IAAI,OAAM,2BAOT,EAAA,UAAA,eAAR,SAAuB,GAEtB,KAAM,IAAI,OAAM,6BAA+B,KAAK,MAAQ,GAAK,eAAiB,KAAK,eAAiB,KAAO,EAAW,kBAAoB,KAAK,UAAU,OAAO,KAAK,YAAc,GAAK,iBAMrL,EAAA,UAAA,wBAAR,WAEC,KAAM,IAAI,OAAM,4BAA8B,KAAK,MAAQ,GAAK,eAAiB,KAAK,eAAiB,OApnB1F,EAAA,cAAuB,aACvB,EAAA,mBAA4B,cAC5B,EAAA,iBAA0B,YAC1B,EAAA,iBAA0B,YAC1B,EAAA,cAAuB,KACvB,EAAA,aAAsB,SACtB,EAAA,WAAoB,OAEpB,EAAA,kBAA2B,SAC3B,EAAA,qBAA8B,WAC9B,EAAA,gBAAyB,OACzB,EAAA,oBAA6B,UAC7B,EAAA,eAAwB,MACxB,EAAA,uBAAgC,aAChC,EAAA,kBAA2B,SAwmB1C,GA1nB4B,GA+nBtB,EAAU,WAAhB,QAAM,MAON,MAAA,MAEM,EAAS,WAAf,QAAM,MAMN,MAAA,MAEM,EAAQ,WAAd,QAAM,MAKN,MAAA,KAzBA,GAAA,QAAS,2vBClpBF,EAAQ,EAAiB,iCACzB,EAAQ,EAAiB,iCACzB,EAAS,EAAgB,qCAEzB,EAAmB,EAAc,2CACjC,EAAU,EAAgB,kCAC1B,EAAU,EAAgB,sCAC1B,EAAW,EAAgB,uCAM3B,EAAsB,EAAa,wDACnC,EAAQ,EAAiB,oCACzB,EAAmB,EAAc,+CACjC,EAAI,EAAkB,oCAGtB,EAAsB,EAAa,yDAEnC,EAAsB,EAAa,qDACnC,EAAoB,EAAc,mDAKnC,EAAY,SAAA,GAoBjB,QApBK,GAoBO,GAAA,SAAA,IAAA,GAAA,GAEX,EAAA,KAAA,KAAM,EAAoB,cAE1B,KAAK,oBAAsB,EAkwB7B,MA1xB2B,GAArB,EAAY,GAgCH,EAAA,aAAd,SAA2B,GAG1B,MADA,GAAY,EAAU,cACF,OAAb,GAQM,EAAA,aAAd,SAA2B,GAE1B,GAAI,EAGJ,OADA,GAAK,EAAY,YAAY,GACzB,IACH,EAAG,SAAW,EACQ,OAAlB,EAAG,cACC,GAGF,GAMD,EAAA,UAAA,oBAAP,SAA2B,GAE1B,GAAwC,GAApC,EAAmB,OAAO,OAAa,CAC1C,GAAI,EAGJ,IADA,EAAQ,EAAmB,OAAO,GAC9B,EAAM,WAAa,EAAU,QAAS,CACzC,GAAI,EAEJ,GAAM,KAAK,UAAU,EAAmB,IACxC,EAAI,QAA0B,KAQ1B,EAAA,UAAA,2BAAP,aAQO,EAAA,UAAA,iBAAP,WAsBC,IApBK,KAAK,YACT,KAAK,UAAY,KAAK,gBACtB,KAAK,UAAU,SAAW,EAQ1B,KAAK,aACL,KAAK,cACL,KAAK,yBAQC,KAAK,aAcX,GAVI,KAAK,UAAY,KAAK,UAAU,UAAY,KAAK,aACpD,KAAK,0BACG,KAAK,UAAY,KAAK,UAAU,UAAY,KAAK,eAGzD,KAAK,qBAAqB,KAAK,SAAS,MAAQ,KAAK,SACrD,KAAK,aAAe,OAAO,UAC3B,KAAK,SAAW,MAGb,KAAK,UAAU,oBAAsB,EAAG,CAC3C,GAAI,GACA,EACA,CAMJ,QAJA,EAAM,KAAK,UAAU,oBACrB,EAAM,KAAK,UAAU,kBACrB,EAAM,KAAK,UAAU,UAAY,EAAM,GAE/B,GACP,IAAK,OACL,IAAK,OACL,IAAK,OAMJ,QAGD,KAAK,OACJ,KAAK,aAAe,EACpB,KAAK,SAAW,KAAK,eACrB,MAED,KAAK,OACJ,KAAK,aAAe,EACpB,KAAK,SAAW,GAAI,GACpB,KAAK,SAAS,KAAO,KAAK,oBAC1B,KAAK,SAAS,UAAY,GAAI,OAC9B,KAAK,SAAS,gBACd,MAED,KAAK,OACJ,KAAK,SAAS,KAAO,EAAU,IAC/B,MAED,KAAK,OACJ,KAAK,iBACL,MAED,KAAK,OACJ,KAAK,eACL,MAED,KAAK,OACJ,KAAK,aACL,MAED,KAAK,OACJ,KAAK,uBACL,MAED,KAAK,OACJ,KAAK,SAAS,UAAY,KAAK,eAC/B,MAED,KAAK,OACJ,KAAK,qBAAqB,EAC1B,MAED,KAAK,OACJ,KAAK,sBACL,MAED,SAEC,KAAK,UAAU,UAAa,EAAM,EAOpC,GAAI,KAAK,aAAa,OAAQ,CAC7B,KAAK,gCACL,QAQH,GAAI,KAAK,UAAU,qBAAuB,KAAK,UAAY,KAAK,SAC/D,MAAO,GAAW,aAElB,IAAI,EAGJ,KAAK,IAAQ,MAAK,qBAAsB,CACvC,GAAI,EACJ,GAAM,KAAK,gBAAgB,KAAK,qBAAqB,IACjD,IAEuB,KAAK,UAAW,SAAS,GAEnD,KAAK,gBAAgB,EAAK,IAI5B,MAAO,GAAW,cAIb,EAAA,UAAA,eAAP,SAAsB,GAErB,EAAA,UAAM,eAAc,KAAA,KAAC,GAGrB,KAAK,UAAY,GAAI,IAGd,EAAA,UAAA,cAAR,WAEC,GAAI,EAIJ,KAFA,EAAM,GAAI,GAEH,KAAK,UAAU,SAAW,KAAK,cAAc,CACnD,GAAI,GACA,EACA,CAMJ,QAJA,EAAM,KAAK,UAAU,oBACrB,EAAM,KAAK,UAAU,kBACrB,EAAM,KAAK,UAAU,UAAY,EAAM,GAE/B,GACP,IAAK,OACJ,EAAI,KAAO,KAAK,mBAChB,MAED,KAAK,OACJ,EAAI,aAAe,KAAK,WACxB,MAED,KAAK,OACJ,EAAI,aAAe,KAAK,WACxB,MAED,KAAK,OACJ,EAAI,cAAgB,KAAK,WACzB,MAED,KAAK,OACJ,EAAI,UAAW,CACf,MAED,KAAK,OACJ,EAAI,SAAW,KAAK,aAAa,EACjC,MAED,KAAK,OACJ,EAAI,YAAc,KAAK,aAAa,EACpC,MAED,SACC,KAAK,UAAU,SAAW,GAK7B,MAAO,IAGA,EAAA,UAAA,aAAR,SAAqB,GAEpB,GAAI,EAIJ,KAFA,EAAM,GAAI,GAEH,KAAK,UAAU,SAAW,GAAK,CACrC,GAAI,GACA,CAKJ,QAHA,EAAM,KAAK,UAAU,oBACrB,EAAM,KAAK,UAAU,kBAEb,GACP,IAAK,OACJ,EAAI,IAAM,KAAK,mBACf,MAED,SAEC,KAAK,UAAU,UAAa,EAAM,GAQrC,MAHA,MAAK,UAAU,EAAI,KAAO,EAC1B,KAAK,gBAAgB,EAAI,IAAK,GAAI,GAAW,EAAI,MAE1C,GAGA,EAAA,UAAA,gBAAR,WAEC,GAAI,GACA,EACA,CAOJ,KALA,EAAQ,KAAK,UAAU,oBACvB,KAAK,SAAS,MAAQ,GAAI,OAAoB,EAAN,GAExC,EAAI,EACJ,EAAM,KAAK,SAAS,MAAM,OACf,EAAJ,GAAS,CACf,GAAI,GAAU,EAAU,CAExB,GAAI,KAAK,UAAU,YACnB,EAAI,KAAK,UAAU,YACnB,EAAI,KAAK,UAAU,YAEnB,KAAK,SAAS,MAAM,KAAO,EAC3B,KAAK,SAAS,MAAM,KAAO,EAC3B,KAAK,SAAS,MAAM,KAAO,IAIrB,EAAA,UAAA,cAAR,WAEC,GAAI,GACA,EACA,CAOJ,KALA,EAAQ,KAAK,UAAU,oBACvB,KAAK,SAAS,QAAU,GAAI,OAAoB,EAAN,GAE1C,EAAI,EACJ,EAAM,KAAK,SAAS,QAAQ,OACjB,EAAJ,GAAS,CACf,GAAI,GAAoB,EAAoB,CAE5C,GAAK,KAAK,UAAU,oBACpB,EAAK,KAAK,UAAU,oBACpB,EAAK,KAAK,UAAU,oBAEpB,KAAK,SAAS,QAAQ,KAAO,EAC7B,KAAK,SAAS,QAAQ,KAAO,EAC7B,KAAK,SAAS,QAAQ,KAAO,EAG7B,KAAK,UAAU,UAAY,EAG5B,KAAK,SAAS,gBAAkB,GAAI,OAAc,IAG3C,EAAA,UAAA,qBAAR,WAIC,IAFA,GAAI,GAAsB,KAAK,SAAS,QAAQ,OAAO,EACnD,EAAoB,EACb,EAAJ,GACN,KAAK,SAAS,gBAAgB,GAAK,KAAK,UAAU,kBAClD,KAIM,EAAA,UAAA,YAAR,WAEC,GAAI,GACA,EACA,CAOJ,KALA,EAAQ,KAAK,UAAU,oBACvB,KAAK,SAAS,IAAM,GAAI,OAAoB,EAAN,GAEtC,EAAI,EACJ,EAAM,KAAK,SAAS,IAAI,OACb,EAAJ,GACN,KAAK,SAAS,IAAI,KAAO,KAAK,UAAU,YACxC,KAAK,SAAS,IAAI,KAAO,EAAM,KAAK,UAAU,aAIxC,EAAA,UAAA,sBAAR,WAEC,GAAI,GACA,EACA,EACA,CAOJ,KALA,EAAM,KAAK,oBACX,EAAQ,KAAK,UAAU,oBAEvB,EAAQ,GAAI,OAAc,GAC1B,EAAI,EACG,EAAI,EAAM,QAChB,EAAM,KAAO,KAAK,UAAU,mBAE7B,MAAK,SAAS,UAAU,KAAK,GAC7B,KAAK,SAAS,cAAc,GAAO,GAG5B,EAAA,UAAA,qBAAR,SAA6B,GAE5B,GAAI,GACA,EACA,EACA,EACA,CAKJ,KAFA,EAAQ,GAAI,GAEL,KAAK,UAAU,SAAW,GAAK,CACrC,GAAI,GACA,CAKJ,QAHA,EAAM,KAAK,UAAU,oBACrB,EAAM,KAAK,UAAU,kBAEb,GACP,IAAK,OACJ,EAAO,KAAK,oBACZ,KAAK,UAAU,UAAY,EAC3B,EAAO,KAAK,UAAU,WACtB,MAED,KAAK,OACJ,EAAM,EAAI,KAAK,UAAU,YACzB,EAAM,EAAI,KAAK,UAAU,YACzB,EAAM,EAAI,KAAK,UAAU,WACzB,MAED,SACC,KAAK,UAAU,UAAa,EAAM,GAQzB,YAAR,GAAsB,KAAK,qBAAqB,eAAe,KAClE,EAAK,KAAK,qBAAqB,GAC/B,EAAM,KAAK,gBAAgB,EAAI,GAE3B,IAEuB,KAAK,UAAW,SAAS,GAEnD,KAAK,gBAAgB,EAAK,EAAG,aAIvB,MAAK,qBAAqB,KAI3B,EAAA,UAAA,gBAAR,SAAwB,EAAc,GAErC,GAFqC,SAAA,IAAA,EAAA,MAEjC,EAAI,MAAQ,EAAU,KAAM,CAC/B,GAAI,GACA,EACA,EACA,EACA,EACA,EACA,EACA,CAMJ,IAJI,EAAI,UAAU,OAAS,GAC1B,QAAQ,IAAI,sFAGR,EAAI,SAAiC,GAAtB,EAAI,QAAQ,OAC/B,MAAO,KAWR,KATA,EAAW,GAAI,OAAgB,EAAI,MAAM,OAAO,GAChD,EAAQ,GAAI,OAAc,EAAI,QAAQ,OAAO,GAE7C,KAAK,YAAY,EAAU,EAAO,GAE9B,KAAK,qBACR,KAAK,kBAAkB,EAAU,GAElC,EAAI,MAAQ,GAAI,OAA8B,EAAhB,EAAS,QAClC,EAAI,EAAG,EAAI,EAAS,OAAQ,IAChC,EAAI,MAAQ,EAAF,GAAO,EAAS,GAAG,EAC7B,EAAI,MAAQ,EAAF,EAAM,GAAK,EAAS,GAAG,EACjC,EAAI,MAAQ,EAAF,EAAM,GAAK,EAAS,GAAG,CAIlC,KAFA,EAAI,QAAU,GAAI,OAA2B,EAAb,EAAM,QAEjC,EAAI,EAAG,EAAI,EAAM,OAAQ,IAC7B,EAAI,QAAU,EAAF,GAAO,EAAM,GAAG,EAC5B,EAAI,QAAU,EAAF,EAAM,GAAK,EAAM,GAAG,EAChC,EAAI,QAAU,EAAF,EAAM,GAAK,EAAM,GAAG,CAGjC,IAAI,EAAI,IAKP,IADA,EAAI,IAAM,GAAI,OAA8B,EAAhB,EAAS,QAChC,EAAI,EAAG,EAAI,EAAS,OAAQ,IAChC,EAAI,IAAM,EAAF,GAAO,EAAS,GAAG,EAC3B,EAAI,IAAM,EAAF,EAAM,GAAK,EAAS,GAAG,CAejC,IAXA,EAAO,GAAI,GAIX,EAAM,GAAI,IAAoB,GAC9B,EAAI,cAAc,EAAI,SACtB,EAAI,gBAAgB,EAAI,OACxB,EAAI,UAAU,EAAI,KAElB,EAAK,eAAe,GAEhB,EAAI,UAAU,OAAS,EAAG,CAC7B,GAAI,EACJ,GAAQ,EAAI,UAAU,GACtB,EAAM,KAAK,WAAW,GAAO,SAK9B,GAAI,EAAO,CACV,GAAI,EAAI,UAAW,IAGd,GAAoB,EAAI,UAAU,QACtC,GAAI,IAAM,EACV,EAAI,IAAM,EACV,EAAI,IAAM,EACV,EAAM,GAAI,GAAS,GACnB,EAAQ,EAAI,gBAAgB,GAG7B,EAAM,QAAQ,IAEd,EAAM,GAAI,GACV,EAAI,kBAAkB,EAAM,EAAG,EAAM,EAAG,EAAM,GAC9C,EAAK,oBAAoB,GAkB1B,MAbI,GAAI,YACP,EAAM,GAAI,GAAS,EAAI,WACvB,EAAI,SACJ,EAAK,oBAAoB,IAK1B,KAAK,gBAAgB,EAAM,EAAI,KAAK,OAAO,UAG3C,EAAO,GAAI,GAAK,EAAM,GACtB,EAAK,UAAU,SAAW,GAAI,GAAS,EAAI,WACpC,EAIR,MAAO,OAGA,EAAA,UAAA,YAAR,SAAoB,EAA0B,EAAqB,MAG9D,GACA,EACA,EACA,EAAqB,EAAI,MAAM,MACnC,KAAK,EAAI,EAAG,EAAI,EAAG,EAAI,EAAO,EAAJ,GAAU,CACnC,GAAI,GAAa,GAAI,EACrB,GAAE,EAAI,EAAI,MAAM,KAChB,EAAE,EAAI,EAAI,MAAM,KAChB,EAAE,EAAI,EAAI,MAAM,KACZ,EAAI,MACP,EAAE,EAAI,EAAI,IAAI,KACd,EAAE,EAAI,EAAI,IAAI,MAEf,EAAS,KAAO,EAGjB,IADA,EAAM,EAAI,QAAQ,OACb,EAAI,EAAG,EAAI,EAAO,EAAJ,GAAU,CAC5B,GAAI,GAAW,GAAI,EACnB,GAAE,EAAI,EAAI,QAAQ,KAClB,EAAE,EAAI,EAAI,QAAQ,KAClB,EAAE,EAAI,EAAI,QAAQ,KAClB,EAAE,YAAc,EAAI,gBAAgB,IAAM,EAC1C,EAAM,KAAO,IAIP,EAAA,UAAA,kBAAR,SAA0B,EAA0B,GAMnD,GAAI,GACA,EACA,EACA,EACA,EACA,EAA2B,EAAS,OACpC,EAA2B,EAAM,OAGjC,EAAwC,GAAI,OAAqB,EACrE,KAAK,EAAI,EAAO,EAAJ,EAAc,IACzB,EAAQ,GAAK,GAAI,MAClB,KAAK,EAAI,EAAO,EAAJ,EAAc,IAAK,CAC9B,GAAI,GAAc,EAAM,EACxB,KAAK,EAAI,EAAO,EAAJ,EAAO,IAAK,CACvB,GAAI,GAAgC,EAAc,GAAL,EAAS,EAAK,EAAW,GAAL,EAAS,EAAK,EAAI,EAAK,GACpF,EAAwB,EAAK,WACjC,KAAK,EAAI,EAAO,OAAS,EAAG,GAAK,EAAG,KAC9B,EAAQ,EAAO,IAAM,IACzB,GAAS,EAAO,GAChB,EAAO,OAAO,EAAG,GACjB,EAAI,EAAO,OAAS,EAGtB,GAAO,KAAK,OAIV,GAAwC,GAAI,OAAqB,EACrE,KAAK,EAAI,EAAO,EAAJ,EAAc,IACzB,MAAK,EAAM,EAAQ,GAAG,QAAU,GAAhC,CAEA,GAAI,GAAgC,GAAI,OAAc,EACtD,GAAQ,GAAK,EACb,EAAO,GAAK,CACZ,IAAI,GAAc,EAAS,EAC3B,KAAK,EAAI,EAAO,EAAJ,EAAS,IAAK,CACzB,GAAI,GAAc,GAAI,EACtB,GAAG,EAAI,EAAG,EACV,EAAG,EAAI,EAAG,EACV,EAAG,EAAI,EAAG,EACV,EAAG,EAAI,EAAG,EACV,EAAG,EAAI,EAAG,EACV,EAAO,GAAK,EAAS,OACrB,EAAS,KAAK,IAKhB,IAFA,EAAW,EAAS,OAEf,EAAI,EAAO,EAAJ,EAAc,IAGzB,IAFA,EAAO,EAAM,GACb,EAAQ,EAAK,YACR,EAAI,EAAO,EAAJ,EAAO,IAKlB,IAJA,EAAU,GAAL,EAAS,EAAK,EAAW,GAAL,EAAS,EAAK,EAAI,EAAK,EAChD,EAAS,EAAQ,GACjB,EAAM,EAAO,OACb,EAAS,EAAQ,GACZ,EAAI,EAAO,EAAJ,EAAS,IACpB,GAAe,GAAT,GAA6B,GAAb,EAAO,KAAe,EAAQ,EAAO,IAAM,EAAI,CACpE,GAAI,GAAwB,EAAO,EACtB,IAAT,IAEH,EAAO,OAAO,EAAG,GACjB,EAAO,OAAO,EAAG,IAET,GAAL,EACH,EAAK,EAAI,EAAqB,GAAL,EACzB,EAAK,EAAI,EACT,EAAK,EAAI,EACV,EAAI,IAOD,EAAA,UAAA,wBAAR,WAEC,GAAI,EAGH,GAAM,GAAI,GADP,KAAK,SAAS,SACgB,KAAK,SAAS,SAAS,SAAW,EAAuB,oBAEzD,KAAK,SAAS,cAEhD,EAAI,aAAe,KAAK,SAAS,aACjC,EAAI,cAAgB,KAAK,SAAS,cAE9B,KAAK,cAAgB,IACxB,EAAI,aAAe,EAAqB,YAEzC,EAAI,UAAY,KAAK,SAAS,SAE9B,KAAK,gBAAgB,EAAK,KAAK,SAAS,MAExC,KAAK,WAAW,KAAK,SAAS,MAAQ,KAAK,SAC3C,KAAK,SAAS,SAAW,EAEzB,KAAK,SAAW,MAGT,EAAA,UAAA,kBAAR,WAKC,IAHA,GAAI,GACA,EAAa,IAET,EAAM,KAAK,UAAU,oBAAsB,GAClD,GAAO,OAAO,aAAa,EAE5B,OAAO,IAGA,EAAA,UAAA,cAAR,WAEC,GAAI,EA4BJ,OA1BA,GAAO,GAAI,OAAc,IAGzB,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,GAAK,EAGV,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,IAAM,KAAK,UAAU,YAC1B,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,IAAM,EAGX,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,GAAK,KAAK,UAAU,YACzB,EAAK,GAAK,EAGV,EAAK,IAAM,KAAK,UAAU,YAC1B,EAAK,IAAM,KAAK,UAAU,YAC1B,EAAK,IAAM,KAAK,UAAU,YAC1B,EAAK,IAAM,EAEJ,GAGA,EAAA,UAAA,UAAR,WAEC,GAAI,GACA,EACA,EAAkB,EAAkB,CAKxC,QAHA,EAAM,KAAK,UAAU,oBACrB,EAAM,KAAK,UAAU,kBAEb,GACP,IAAK,IACJ,EAA+B,IAA3B,KAAK,UAAU,YACnB,EAA+B,IAA3B,KAAK,UAAU,YACnB,EAA+B,IAA3B,KAAK,UAAU,WACnB,MACD,KAAK,IACJ,EAAI,KAAK,UAAU,mBACnB,EAAI,KAAK,UAAU,mBACnB,EAAI,KAAK,UAAU,kBACnB,MACD,SACC,KAAK,UAAU,UAAa,EAAM,EAIpC,MAAQ,IAAK,GAAO,GAAK,EAAK,GAEhC,GA1xB2B,GAiyBrB,EAAM,WAAZ,QAAM,MAMN,MAAA,MAKM,EAAU,WAAhB,QAAM,MAUN,MAAA,MAKM,EAAQ,WAAd,QAAM,MAcN,MAAA,MAKM,EAAS,WAAf,QAAM,MAIN,MAAA,MAKM,EAAQ,WAAd,QAAM,MASN,MAAA,KApEA,GAAA,QAAS,w3BCpzBF,EAAS,EAAgB,qCAEzB,EAAmB,EAAc,2CACjC,EAAU,EAAgB,kCAC1B,EAAU,EAAgB,sCAC1B,EAAW,EAAgB,uCAI3B,EAAsB,EAAa,wDACnC,EAAmB,EAAc,+CACjC,EAAQ,EAAiB,oCACzB,EAAI,EAAkB,oCAGtB,EAAsB,EAAa,yDAEnC,EAAsB,EAAa,qDACnC,EAAoB,EAAc,mDAClC,EAAmB,EAAc,0DAKlC,EAAS,SAAA,GAgCd,QAhCK,GAgCO,GAAA,SAAA,IAAA,EAAA,GAEX,EAAA,KAAA,KAAM,EAAoB,MAVnB,KAAA,eAAwB,EACxB,KAAA,kBAA2B,GAUlC,KAAK,OAAS,EA63BhB,MAh6BwB,GAAlB,EAAS,GA0Cd,OAAA,eAAW,EAAA,UAAA,aAAX,SAAiB,GAEhB,KAAK,OAAS,mCAQD,EAAA,aAAd,SAA2B,GAG1B,MADA,GAAY,EAAU,cACF,OAAb,GAQM,EAAA,aAAd,SAA2B,GAE1B,GAAI,GAAiB,EAAY,SAAS,GACtC,GAAe,EACf,GAAe,CAOnB,OALI,KACH,EAAkC,IAA3B,EAAQ,QAAQ,QACvB,EAAkC,IAA3B,EAAQ,QAAQ,SAGjB,GAAQ,GAMT,EAAA,UAAA,oBAAP,SAA2B,GAE1B,GAA6B,OAAzB,EAAmB,GAAa,CACnC,GAAI,GAAa,EAAY,SAAS,EAAmB,KACzD,MAAK,SAAS,OAER,CACN,GAAI,EAEJ,IAAwC,GAApC,EAAmB,OAAO,OAC7B,MAKD,IAFA,EAAQ,EAAmB,OAAO,GAE9B,EAAM,WAAa,EAAU,QAAS,CAEzC,GAAI,GAAoB,GAAI,EAC5B,GAAG,WAAa,EAAmB,GACnC,EAAG,QAA0B,EAE7B,KAAK,gBAAgB,KAAK,GAEtB,KAAK,QAAQ,OAAS,GACzB,KAAK,cAAc,MAShB,EAAA,UAAA,2BAAP,SAAkC,GAEjC,GAA6B,OAAzB,EAAmB,GACtB,KAAK,SAAU,EACf,KAAK,eAAgB,MACf,CACN,GAAI,GAAoB,GAAI,EAC5B,GAAG,WAAa,EAAmB,GACnC,KAAK,gBAAgB,KAAK,GAGvB,KAAK,QAAQ,OAAS,GACzB,KAAK,cAAc,IAMd,EAAA,UAAA,iBAAP,WAEC,GAAI,GAEA,EADA,EAAiB,OAAO,aAAa,GA4BzC,KAzBK,KAAK,kBACT,KAAK,UAAY,KAAK,gBAGtB,KAAK,UAAY,KAAK,UAAU,QAAQ,iBAAkB,MAGpB,IAAnC,KAAK,UAAU,QAAQ,KAC1B,EAAU,OAAO,aAAa,KAE1B,KAAK,kBACT,KAAK,iBAAkB,EACvB,KAAK,UAAY,GAAI,OACrB,KAAK,eAAiB,GAAI,OAC1B,KAAK,aAAe,GAAI,OACxB,KAAK,gBAAkB,GAAI,OAC3B,KAAK,QAAU,GAAI,OACnB,KAAK,KAAO,GAAI,OAChB,KAAK,cAAgB,KAAK,UAAU,OACpC,KAAK,WAAa,KAAK,UAAU,QAAQ,EAAS,GAClD,KAAK,UAAY,EACjB,KAAK,SAAW,GAAI,OACpB,KAAK,aAAe,GAGd,KAAK,WAAa,KAAK,eAAiB,KAAK,aAgBnD,GAfA,KAAK,WAAa,KAAK,UAAU,QAAQ,EAAS,KAAK,WAEhC,IAAnB,KAAK,aACR,KAAK,WAAa,KAAK,eAExB,EAAO,KAAK,UAAU,UAAU,KAAK,UAAW,KAAK,YACrD,EAAO,EAAK,MAAM,MAAM,KAAK,IAC7B,EAAO,EAAK,QAAQ,KAAM,KAC1B,EAAQ,EAAK,MAAM,KACnB,KAAK,UAAY,KAAK,WAAa,EACnC,KAAK,UAAU,GAKX,KAAK,cACR,MAAO,GAAW,aAKpB,OAAI,MAAK,YAAc,KAAK,cAEvB,KAAK,UAAY,KAAK,cAClB,EAAW,eAGnB,KAAK,YACL,KAAK,iBAEE,EAAW,cAGZ,EAAW,eAGZ,EAAA,UAAA,eAAP,SAAsB,GAErB,EAAA,UAAM,eAAc,KAAA,KAAC,GAGrB,KAAK,UAAY,GAAI,IAMd,EAAA,UAAA,UAAR,SAAkB,GAEjB,OAAQ,EAAM,IAEb,IAAK,SAEJ,KAAK,SAAU,EACf,KAAK,eAAgB,EACrB,KAAK,QAAQ,EAAM,GAEnB,MAED,KAAK,IAEJ,KAAK,YAAY,EAEjB,MAED,KAAK,IAEJ,KAAK,aAAa,EAElB,MAED,KAAK,SAEA,KAAK,UAEH,EAAM,KACV,EAAM,GAAK,UAEZ,KAAK,aAAa,KAAK,EAAM,IAC7B,KAAK,kBAAoB,EAAM,GAE3B,KAAK,gBACR,KAAK,cAAc,WAAa,KAAK,mBAGvC,MAED,KAAK,IAEJ,KAAK,YAAY,EAEjB,MAED,KAAK,KAEJ,KAAK,QAAQ,EAEb,MAED,KAAK,KAEJ,KAAK,kBAAkB,EAEvB,MAED,KAAK,IAEJ,KAAK,UAAU,KAQV,EAAA,UAAA,UAAR,WAEC,IAAK,GAAI,GAAkB,EAAG,EAAW,KAAK,SAAS,SAAU,EAYhE,IAAK,GATD,GACA,EACA,EACA,EAEA,EACA,EACA,EATA,EAAsB,KAAK,SAAS,GAAU,OAC9C,EAAmB,EAAO,OAUrB,EAAW,EAAO,EAAJ,IAAiB,EAAG,CAK1C,IAJA,EAAW,GAAI,GACf,EAAiB,EAAO,GAAG,eAC3B,EAAoB,EAAe,OAE9B,EAAI,EAAO,EAAJ,IAAyB,EACpC,KAAK,uBAAuB,EAAe,GAAI,EAEhD,IAAqC,GAAjC,EAAS,cAAc,OAA3B,CAmCA,GA/BA,KAAK,gBAAyB,GAE9B,EAAa,GAAI,GAAuB,EAAuB,qBAG3D,KAAK,cAAgB,IACxB,EAAW,aAAe,EAAqB,YAEhD,EAAO,GAAI,GAAK,EAAU,GAIzB,EAAK,KAFF,KAAK,SAAS,GAAU,KAEf,KAAK,SAAS,GAAU,KAE1B,EAAO,GAAG,KAGR,EAAO,GAAG,KAKV,GAGb,KAAK,QAAQ,KAAK,GAGjB,EAAW,KADgB,IAAxB,EAAO,GAAG,WACK,EAAO,GAAG,WAAa,IAAM,EAAK,KAClC,KAAK,WAAa,IAAM,EAAK,KAE5C,EAAK,UAAU,OAAS,EAC3B,IAAK,EAAK,EAAG,EAAK,EAAK,UAAU,SAAU,EAC1C,EAAK,UAAU,GAAI,SAAW,CAIN,MAAK,UAAW,SAAS,GAEnD,KAAK,gBAAyB,MAUzB,EAAA,UAAA,uBAAR,SAA+B,EAA6B,GAE3D,GACI,GAEA,EACA,EAJA,EAAwB,EAAc,MAEtC,EAAkB,EAAM,OAIxB,EAAyB,GAAI,OAC7B,EAAoB,GAAI,OACxB,EAAwB,GAAI,OAC5B,EAAiC,GAAI,MAEzC,MAAK,gBACL,KAAK,aAAe,CAGpB,KAAK,GADD,GACK,EAAW,EAAO,EAAJ,IAAgB,EAKtC,IAHA,EAAO,EAAM,GACb,EAAW,EAAK,SAAS,OAAS,EAE7B,EAAI,EAAO,EAAJ,IAAgB,EAE3B,KAAK,oBAAoB,EAAM,EAAG,EAAU,EAAK,EAAS,GAC1D,KAAK,oBAAoB,EAAM,EAAG,EAAU,EAAK,EAAS,GAC1D,KAAK,oBAAoB,EAAM,EAAI,EAAG,EAAU,EAAK,EAAS,EAG5D,GAAS,OAAS,IACrB,EAAM,GAAI,IAAoB,GAC9B,EAAI,kBAAoB,EAAQ,QAAQ,GAAQ,EAChD,EAAI,cAAc,GAClB,EAAI,gBAAgB,GACpB,EAAI,oBAAoB,GACxB,EAAI,UAAU,GAEd,EAAS,eAAe,KAIlB,EAAA,UAAA,oBAAR,SAA4B,EAAe,EAAoB,EAAwB,EAAmB,EAAgC,GAEzI,GAAI,GACA,EACA,EACA,CAEJ,IAAK,KAAK,aAAa,EAAK,SAAS,IAmCpC,EAAQ,KAAK,aAAa,EAAK,SAAS,IAAgB,MAvBxD,IAVA,EAAQ,KAAK,aACb,KAAK,aAAa,EAAK,SAAS,MAAkB,KAAK,aACvD,EAAS,KAAK,UAAU,EAAK,cAAc,GAAe,GAC1D,EAAS,KAAK,EAAO,EAAE,KAAK,OAAQ,EAAO,EAAE,KAAK,OAAQ,EAAO,EAAE,KAAK,QAEpE,EAAK,cAAc,OAAS,IAC/B,EAAe,KAAK,eAAe,EAAK,cAAc,GAAe,GACrE,EAAQ,KAAK,EAAa,EAAG,EAAa,EAAG,EAAa,IAGvD,EAAK,UAAU,OAAS,EAE3B,IACC,EAAK,KAAK,KAAK,EAAK,UAAU,GAAe,GAC7C,EAAI,KAAK,EAAG,EAAG,EAAG,GAEjB,MAAO,GAER,OAAQ,GACP,IAAK,GACJ,EAAI,KAAK,EAAG,EACZ,MACD,KAAK,GACJ,EAAI,KAAK,GAAI,EACb,MACD,KAAK,GACJ,EAAI,KAAK,EAAG,IAUjB,EAAQ,KAAK,IAON,EAAA,UAAA,aAAR,SAAqB,GAEpB,KAAK,cAAgB,KACrB,KAAK,sBAAwB,KAC7B,KAAK,SAAS,KAAK,KAAK,eAAiB,GAAI,IAEzC,IACH,KAAK,eAAe,KAAO,EAAM,KAO3B,EAAA,UAAA,YAAR,SAAoB,GAEd,KAAK,gBACT,KAAK,aAAa,MACnB,KAAK,cAAgB,GAAI,GAEzB,KAAK,cAAc,WAAa,KAAK,kBAEjC,IACH,KAAK,cAAc,KAAO,EAAM,IACjC,KAAK,eAAe,OAAO,KAAK,KAAK,eAErC,KAAK,oBAAoB,OAOlB,EAAA,UAAA,oBAAR,SAA4B,GAE3B,KAAK,sBAAwB,GAAI,GAC7B,IACH,KAAK,sBAAsB,IAAM,EAAM,IACxC,KAAK,cAAc,eAAe,KAAK,KAAK,wBAOrC,EAAA,UAAA,YAAR,SAAoB,GAInB,GAAI,GAAW,EAAY,CAC3B,IAAI,EAAM,OAAS,EAAG,CAIrB,IAAK,GAFD,GADA,KAGK,EAAW,EAAG,EAAI,EAAM,SAAU,EAC1C,EAAM,WAAW,EAAM,IAClB,MAAM,IACV,EAAO,KAAK,EAGd,GAAc,EAAO,GACrB,EAAc,EAAO,GACrB,GAAe,EAAO,GACtB,KAAK,UAAU,KAAK,GAAI,GAAO,EAAI,EAAI;KAGvC,GAAc,WAAW,EAAM,IAC/B,EAAc,WAAW,EAAM,IAC/B,GAAe,WAAW,EAAM,IAEhC,KAAK,UAAU,KAAK,GAAI,GAAO,EAAI,EAAI,KASjC,EAAA,UAAA,QAAR,SAAgB,GAEf,GAAI,EAAM,OAAS,EAAG,CAGrB,IAAK,GADD,GADA,KAEK,EAAW,EAAG,EAAI,EAAM,SAAU,EAC1C,EAAM,WAAW,EAAM,IAClB,MAAM,IACV,EAAO,KAAK,EAEd,MAAK,KAAK,KAAK,GAAI,GAAG,EAAO,GAAI,EAAI,EAAO,SAG5C,MAAK,KAAK,KAAK,GAAI,GAAG,WAAW,EAAM,IAAK,EAAI,WAAW,EAAM,OAS3D,EAAA,UAAA,kBAAR,SAA0B,GAEzB,GAAI,EAAM,OAAS,EAAG,CAGrB,IAAK,GADD,GADA,KAEK,EAAW,EAAG,EAAI,EAAM,SAAU,EAC1C,EAAM,WAAW,EAAM,IAClB,MAAM,IACV,EAAO,KAAK,EAEd,MAAK,eAAe,KAAK,GAAI,GAAO,EAAO,GAAI,EAAO,IAAK,EAAO,SAGlE,MAAK,eAAe,KAAK,GAAI,GAAO,WAAW,EAAM,IAAK,WAAW,EAAM,KAAM,WAAW,EAAM,OAQ5F,EAAA,UAAA,UAAR,SAAkB,GAEjB,GAAI,GAAa,EAAM,OACnB,EAAgB,GAAI,EAEnB,MAAK,eACT,KAAK,YAAY,KAIlB,KAAK,GADD,GACK,EAAW,EAAO,EAAJ,IAAW,EAEjB,IAAZ,EAAM,KAIV,EAAU,EAAM,GAAG,MAAM,KACzB,EAAK,cAAc,KAAK,KAAK,WAAW,SAAS,EAAQ,IAAK,KAAK,UAAU,SAEzE,EAAQ,IAAM,OAAO,EAAQ,IAAI,OAAS,GAC7C,EAAK,UAAU,KAAK,KAAK,WAAW,SAAS,EAAQ,IAAK,KAAK,KAAK,SAEjE,EAAQ,IAAM,OAAO,EAAQ,IAAI,OAAS,GAC7C,EAAK,cAAc,KAAK,KAAK,WAAW,SAAS,EAAQ,IAAK,KAAK,eAAe,SAEnF,EAAK,SAAS,KAAK,EAAM,IAG1B,MAAK,sBAAsB,MAAM,KAAK,IAM/B,EAAA,UAAA,WAAR,SAAmB,EAAc,GAEhC,MAAY,GAAR,EACI,EAAQ,EAAS,EACjB,GAGD,EAAA,UAAA,SAAR,SAAiB,GAiBhB,IAAK,GAdD,GACA,EACA,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAbA,EAAsB,EAAK,MAAM,UAe5B,EAAW,EAAG,EAAI,EAAoB,SAAU,EAAG,CAgB3D,IAbA,EAAS,EAAoB,GAAG,MAAM,MAAO,KAAK,IAAI,MAAM,MAGxC,GAAhB,EAAM,SACT,EAAQ,EAAoB,GAAG,MAAM,OAAO,aAAa,MAE1D,EAAe,EAAQ,EAAgB,SACvC,EAAW,EACX,GAAc,EACd,GAAW,EACX,EAAQ,EACR,EAAQ,GAEH,EAAI,EAAG,EAAI,EAAM,SAAU,EAI/B,GAFA,EAAM,GAAK,EAAM,GAAG,QAAQ,OAAQ,IAEJ,KAA5B,EAAM,GAAG,UAAU,EAAG,KAAmB,GAAL,GAAsB,IAAZ,EAAM,IAMvD,GALA,EAAQ,EAAM,GAAG,MAAM,MAEe,GAAlC,OAAO,EAAM,IAAI,WAAW,IAA6C,IAAlC,OAAO,EAAM,IAAI,WAAW,MACtE,EAAM,GAAK,EAAM,GAAG,UAAU,EAAG,EAAM,GAAG,SAElC,GAAL,EACH,KAAK,WAAa,EAAM,KAAK,IAC7B,KAAK,WAAiC,IAAnB,KAAK,WAAmB,SAAW,KAAK,eAI3D,QAAQ,EAAM,IAEb,IAAK,KACA,EAAM,KAAO,MAAM,OAAO,EAAM,MAAQ,EAAM,KAAO,MAAM,OAAO,EAAM,MAAQ,EAAM,KAAO,MAAM,OAAO,EAAM,OACnH,EAAiB,IAAT,EAAM,IAAU,GAAc,IAAT,EAAM,IAAU,EAAa,IAAT,EAAM,GACxD,MAED,KAAK,KACA,EAAM,KAAO,MAAM,OAAO,EAAM,MAAQ,EAAM,KAAO,MAAM,OAAO,EAAM,MAAQ,EAAM,KAAO,MAAM,OAAO,EAAM,OACnH,EAAyB,IAAT,EAAM,IAAU,GAAc,IAAT,EAAM,IAAU,EAAa,IAAT,EAAM,GAC/D,GAAc,EAEf,MAED,KAAK,KACA,EAAM,KAAO,MAAM,OAAO,EAAM,OACnC,EAA4B,KAAjB,OAAO,EAAM,KACT,GAAZ,IACH,GAAc,EACf,MAED,KAAK,KACA,EAAM,KAAO,MAAM,OAAO,EAAM,MAAQ,EAAM,KAAO,MAAM,OAAO,EAAM,MAAQ,EAAM,KAAO,MAAM,OAAO,EAAM,OACnH,EAAwB,IAAT,EAAM,IAAU,GAAc,IAAT,EAAM,IAAU,EAAa,IAAT,EAAM,GAC9D,GAAW,EAEZ,MAED,KAAK,KACL,IAAK,IACA,EAAM,KAAO,MAAM,OAAO,EAAM,OACnC,EAAQ,OAAO,EAAM,IACtB,MAED,KAAK,SACJ,EAAQ,KAAK,iBAAiB,GAC9B,EAAQ,EAAM,QAAQ,MAAO,KAMlC,GAAa,IAAT,EAAa,CAEhB,GAAI,EAAa,CAEhB,EAAsB,GAAI,GAC1B,EAAoB,cAAgB,EACpC,EAAoB,SAAW,CAE/B,IAAI,GAA4B,GAAI,EACpC,GAAa,MAAQ,EACrB,EAAa,oBAAsB,EACnC,EAAa,WAAa,KAAK,WAE1B,KAAK,wBACT,KAAK,sBAAwB,GAAI,QAElC,KAAK,sBAAsB,KAAK,GAIjC,KAAK,gBAAgB,KAAK,WAAY,GAAI,GAAW,QAE/C,IAAI,IAAa,MAAM,GAAQ,CAErC,GAAI,GAAoB,GAAI,EAC5B,GAAG,WAAa,KAAK,WAER,GAAT,GACH,QAAQ,IAAI,yEAA2E,KAAK,WAAa,yCAE1G,IAAI,EAEJ,IAAI,KAAK,aAAe,EAAG,CAC1B,EAAK,GAAI,GAAuB,EAEhC,IAAI,GAA2D,CAE/D,GAAS,MAAQ,EACjB,EAAS,aAAe,EACxB,EAAS,QAAS,EAEd,IACH,EAAS,cAAgB,EACzB,EAAS,SAAW,OAGf,CACN,EAAK,GAAI,GAAuB,GAChC,EAAG,aAAe,EAAqB,UAEvC,IAAI,GAAgE,CAGpE,GAAc,aAAe,EAC7B,EAAc,QAAS,EAEnB,IACH,EAAc,cAAgB,EAC9B,EAAc,SAAW,GAI3B,EAAG,GAAK,EAER,KAAK,gBAAgB,KAAK,GAEtB,KAAK,QAAQ,OAAS,GACzB,KAAK,cAAc,IAKtB,KAAK,eAAgB,GAGd,EAAA,UAAA,iBAAR,SAAyB,GAExB,GACI,GACA,EAFA,EAAa,EAIjB,KAAK,EAAI,EAAG,EAAI,EAAM,QAAS,CAC9B,OAAQ,EAAM,IACb,IAAK,UACL,IAAK,UACL,IAAK,MACL,IAAK,SACL,IAAK,UACJ,GAAK,CACL,MACD,KAAK,MACJ,GAAK,CACL,MACD,KAAK,KACL,IAAK,KACL,IAAK,KACJ,GAAK,CACL,SACD,SACC,GAAY,EAId,GAAI,EACH,MAIF,IAAK,EAAG,EAAI,EAAM,OAAQ,IACzB,GAAO,EAAM,GACb,GAAO,GAMR,OAFA,GAAM,EAAI,QAAQ,OAAQ,KAKnB,EAAA,UAAA,QAAR,SAAgB,GAIf,KAAK,gBAAgB,MAAO,GAAI,GAAW,IAAS,GACpD,KAAK,kCAGE,EAAA,UAAA,cAAR,SAAsB,GAQrB,IAAK,GAND,GACA,EACA,EACA,EACA,EAEK,EAAW,EAAG,EAAI,KAAK,QAAQ,SAAU,EAIjD,GAHA,EAAO,KAAK,QAAQ,GACpB,EAAc,EAAK,SAAS,KAAK,MAAM,KAEnC,EAAY,IAAM,EAAG,WAAY,CAEpC,GAAI,EAAG,GACF,EAAK,WACR,EAAK,SAAW,MACjB,EAAK,SAAW,EAAG,OAEb,IAAI,EAAG,QACb,GAAI,KAAK,aAAe,GAQvB,GAPA,EAA+B,EAAK,SAEpC,EAAG,QAAU,EAAG,QAChB,EAAG,MAAQ,EAAG,MACd,EAAG,MAAQ,EAAG,MACd,EAAG,QAAS,EAER,EAAG,eAMN,EAAG,eAAiB,KACpB,EAAG,eAAiB,EAAG,mBAEjB,IAAI,KAAK,sBAEf,IAAK,EAAI,EAAG,EAAI,KAAK,sBAAsB,SAAU,EAGpD,GAFA,EAAe,KAAK,sBAAsB,GAEtC,EAAa,YAAc,EAAG,WAAY,CAC7C,EAAG,eAAiB,KACpB,EAAG,eAAiB,EAAa,oBACjC,EAAG,MAAQ,EAAa,MACxB,EAAG,MAAQ,EAAa,KACxB,YAYH,IAPA,EAA8B,EAAK,SACnC,EAAG,aAAe,EAAqB,WAEvC,EAAG,QAAU,EAAG,QAChB,EAAG,MAAQ,EAAG,MACd,EAAG,QAAS,EAER,EAAG,eAKN,EAAG,eAAiB,KACpB,EAAG,eAAiB,EAAG,mBACjB,IAAI,KAAK,sBACf,IAAK,EAAI,EAAG,EAAI,KAAK,sBAAsB,SAAU,EAGpD,GAFA,EAAe,KAAK,sBAAsB,GAEtC,EAAa,YAAc,EAAG,WAAY,CAC7C,EAAG,eAAiB,KACpB,EAAG,eAAiB,EAAa,oBACjC,EAAG,MAAQ,EAAa,KAExB,OAQL,EAAK,SAAS,KAAO,EAAY,GAAI,EAAY,GAAK,EAAY,GAClE,KAAK,QAAQ,OAAO,EAAG,KACrB,GAIA,EAAG,IAAM,IACZ,KAAK,gBAAgB,EAAG,IAAM,IAGxB,EAAA,UAAA,eAAR,WAEC,GAAmC,GAA/B,KAAK,gBAAgB,OAGzB,IAAK,GAAI,GAAW,EAAG,EAAI,KAAK,gBAAgB,SAAU,EACzD,KAAK,cAAc,KAAK,gBAAgB,KAE3C,GAh6BwB,GAo6BlB,EAAW,WAAjB,QAAM,KAGE,KAAA,OAAiB,GAAI,OAC7B,MAAA,MAEM,EAAK,WAAX,QAAM,KAIE,KAAA,eAAiC,GAAI,OAC7C,MAAA,MAEM,EAAa,WAAnB,QAAM,KAGE,KAAA,MAAmB,GAAI,OAC/B,MAAA,MAEM,EAAY,WAAlB,QAAM,KAIE,KAAA,MAAe,SACf,KAAA,MAAe,EACvB,MAAA,MAEM,EAAc,WAApB,QAAM,KAME,KAAA,MAAe,SACf,KAAA,MAAe,EACvB,MAAA,MAEM,EAAQ,WAAd,QAAM,KAEE,KAAA,cAAuC,GAAI,OAC3C,KAAA,UAAmC,GAAI,OACvC,KAAA,cAAuC,GAAI,OAC3C,KAAA,SAAoB,GAAI,OAChC,MAAA,MAKM,EAAE,WAWP,QAXK,GAWO,EAAc,GAAd,SAAA,IAAA,EAAA,GAAc,SAAA,IAAA,EAAA,GAEzB,KAAK,GAAK,EACV,KAAK,GAAK,EA4CZ,MAtCC,QAAA,eAAW,EAAA,UAAA,SAAX,WAEC,MAAO,MAAK,QAGb,SAAa,GAEZ,KAAK,GAAK,mCAMX,OAAA,eAAW,EAAA,UAAA,SAAX,WAEC,MAAO,MAAK,QAGb,SAAa,GAEZ,KAAK,GAAK,mCAMJ,EAAA,UAAA,MAAP,WAEC,MAAO,IAAI,GAAG,KAAK,GAAI,KAAK,KAMtB,EAAA,UAAA,SAAP,WAEC,MAAO,MAAK,GAAK,IAAM,KAAK,IAE9B,KAEM,EAAM,WAeX,QAfK,GAeO,EAAc,EAAc,EAAc,GAA1C,SAAA,IAAA,EAAA,GAAc,SAAA,IAAA,EAAA,GAAc,SAAA,IAAA,EAAA,GAAc,SAAA,IAAA,EAAA,GAErD,KAAK,GAAK,EACV,KAAK,GAAK,EACV,KAAK,GAAK,EACV,KAAK,OAAS,EAkEhB,MA3DC,QAAA,eAAW,EAAA,UAAA,aAKX,WAEC,MAAO,MAAK,YAPb,SAAiB,GAEhB,KAAK,OAAS,mCAYf,OAAA,eAAW,EAAA,UAAA,SAAX,WAEC,MAAO,MAAK,QAGb,SAAa,GAEZ,KAAK,GAAK,mCAOX,OAAA,eAAW,EAAA,UAAA,SAAX,WAEC,MAAO,MAAK,QAGb,SAAa,GAEZ,KAAK,GAAK,mCAOX,OAAA,eAAW,EAAA,UAAA,SAAX,WAEC,MAAO,MAAK,QAGb,SAAa,GAEZ,KAAK,GAAK,mCAMJ,EAAA,UAAA,MAAP,WAEC,MAAO,IAAI,GAAO,KAAK,GAAI,KAAK,GAAI,KAAK,KAE3C,IApMA,GAAA,QAAS,ysBC77BT,GAAO,GAAW,EAAgB,uCAE3B,EAAS,EAAgB,gCACzB,EAAY,EAAgB,mCAC5B,EAAS,EAAgB,gCACzB,EAAS,EAAgB,gCAK1B,EAAO,WAAb,QAAM,MAkDN,MAJe,GAAA,iBAAd,WAEC,EAAY,cAAc,EAAQ,cAbrB,EAAA,YAA4B,MAAc,EAAW,EAAc,EAAW,GAe7F,IAEA,GAAiB,QAAR","file":"awayjs-parsers.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-display/lib/base/BlendMode\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\n\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\nimport SkyboxMaterial\t\t\t\t\t= require(\"awayjs-renderergl/lib/materials/SkyboxMaterial\");\n\nimport TriangleMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMaterialMode\");\nimport TriangleMethodMaterial\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMethodMaterial\");\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\n\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = false;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _matrixNrType:number;\n\tprivate _geoNrType:number;\n\tprivate _propsNrType:number;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\n\tprivate _cubeTextures:Array<any>;\n\tprivate _defaultBitmapMaterial:TriangleMethodMaterial;\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\t/**\n\t * Creates a new AWDParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor()\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock();\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\n\t\t\tvar asset:TextureProxyBase;\n\t\t\tvar thisBitmapTexture:Texture2DBase;\n\t\t\tvar block:AWDBlock;\n\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\n\t\t\t{\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\n\t\t\t\tif (asset) {\n\t\t\t\t\tvar mat:TriangleMethodMaterial;\n\t\t\t\t\tvar users:Array<string>;\n\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\n\t\t\t{\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\n\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\n\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\n\t\t\t\tthis._texture_users[ressourceID].push(1);\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\n\t\t\t\t}\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\n\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\n\n\t\t\t\t\tasset = <TextureProxyBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\n\t\t\t\t\tblock = this._blocks[ressourceID];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWDParser.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWDParser.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t{\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t}\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\n\t\t}\n\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate dispose():void\n\t{\n\n\t\tfor (var c in this._blocks) {\n\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\n\t\t\tb.dispose();\n\n\t\t}\n\n\t}\n\n\tprivate parseNextBlock():void\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar assetData:IAsset;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyGeo) {\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyMatrix) {\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyProps) {\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t\t}\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\t\tthis._newBlockBytes = new ByteArray();\n\n\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tthis._newBlockBytes.position = 0;\n\t\tblock = new AWDBlock();\n\t\tblock.len = this._newBlockBytes.position + len;\n\t\tblock.id = this._cur_block_id;\n\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//*/\n\t\t}\n\t\t//*\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\t\t\t\t\t}\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//*/\n\n\t\tvar msgCnt:number = 0;\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\n\t\t\tif (this._debug) {\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(\"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._debug) {\n\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\t//Block ID = 1\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\n\t{\n\n\t\tvar geom:Geometry = new Geometry();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t// Loop through sub meshes\n\t\tvar subs_parsed:number = 0;\n\t\twhile (subs_parsed < num_subs) {\n\t\t\tvar i:number;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar sub_geom:TriangleSubGeometry;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\t// Ignore for now\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t// TODO: Respect stream field type\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t// TODO: Respect stream field type\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 4) {\n\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3; // TODO: Respect stream field type\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 7) {\n\n\t\t\t\t\tweights = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\n\n\t\t\tsub_geom = new TriangleSubGeometry(true);\n\t\t\tif (weights)\n\t\t\t\tsub_geom.jointsPerVertex = weights.length/(verts.length/3);\n\t\t\tif (normals)\n\t\t\t\tsub_geom.autoDeriveNormals = false;\n\t\t\tif (uvs)\n\t\t\t\tsub_geom.autoDeriveUVs = false;\n\t\t\tsub_geom.updateIndices(indices);\n\t\t\tsub_geom.updatePositions(verts);\n\t\t\tsub_geom.updateVertexNormals(normals);\n\t\t\tsub_geom.updateUVs(uvs);\n\t\t\tsub_geom.updateVertexTangents(null);\n\t\t\tsub_geom.updateJointWeights(weights);\n\t\t\tsub_geom.updateJointIndices(w_indices);\n\n\t\t\tvar scaleU:number = subProps.get(1, 1);\n\t\t\tvar scaleV:number = subProps.get(2, 1);\n\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\n\n\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\tsetSubUVs = true;\n\t\t\t\tscaleU = geoScaleU/scaleU;\n\t\t\t\tscaleV = geoScaleV/scaleV;\n\t\t\t}\n\n\t\t\tif (setSubUVs)\n\t\t\t\tsub_geom.scaleUV(scaleU, scaleV);\n\n\t\t\tgeom.addSubGeometry(sub_geom);\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating meshes (and their material assignments.)\n\n\t\t\tsubs_parsed++;\n\t\t}\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\n\t\tthis._blocks[blockID].data = geom;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name + \"| Id = \" + sub_geom.id);\n\t\t}\n\n\t}\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar subs_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\n\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\n\n\t\tswitch (primType) {\n\t\t\t// to do, not all properties are set on all primitives\n\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//geom.subGeometries;\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7)) {\n\t\t\t\tprimType = 0;\n\t\t\t}\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\n\t\t}\n\t}\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar par_id:number;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer;\n\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t}\n\t\t// in other versions we do not read the Container properties\n\t\telse {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t\t}\n\t}\n\n\t// Block ID = 23\n\tprivate parseMeshInstance(blockID:number):void\n\t{\n\t\tvar num_materials:number;\n\t\tvar materials_parsed:number;\n\t\tvar parent:DisplayObjectContainer;\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar geom:Geometry;\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\n\n\t\tif (returnedArrayGeometry[0]) {\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\n\t\t\tgeom = new Geometry();\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tmaterials_parsed = 0;\n\n\t\tvar returnedArrayMaterial:Array<any>;\n\n\t\twhile (materials_parsed < num_materials) {\n\t\t\tvar mat_id:number;\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\n\t\t\t}\n\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\n\n\t\t\tmaterials.push(m);\n\t\t\tmaterialNames.push(m.name);\n\n\t\t\tmaterials_parsed++;\n\t\t}\n\n\t\tvar mesh:Mesh = new Mesh(geom, null);\n\t\tmesh.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\tif (returnedArrayParent[0]) {\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(mesh);\n\t\t\tparentName = objC.name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\t\t}\n\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\tvar i:number;\n\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\n\t\t\tmesh.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [AssetType.TEXTURE], \"CubeTexture\");\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\n\t\tvar asset:Skybox = new Skybox(new SkyboxMaterial(<ImageCubeTexture> returnedArrayCubeTex[1]));\n\n\t\tthis.parseProperties(null)\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\n\n\t}\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number):void\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\n\t\t}\n\n\t\tif (lightType == 2) {\n\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\n\t\t}\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tif (par_id != 0) {\n\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\t\tif (returnedArrayParent[0]) {\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\n\t\t\t}\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\n\t}\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number):void\n\t{\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\tif (returnedArrayParent[0]) {\n\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(camera);\n\n\t\t\tparentName = objC.name;\n\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t\t}\n\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\t\tvar k:number = 0;\n\t\tvar lightID:number = 0;\n\n\t\tvar returnedArrayLight:Array<any>;\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (k = 0; k < numLights; k++) {\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [AssetType.LIGHT])\n\n\t\t\tif (returnedArrayLight[0]) {\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\n\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\n\t\t\t}\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\n\t\t}\n\t}\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number):void\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:TriangleMethodMaterial;\n\t\tvar attributes:Object;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\t\tvar debugString:string = \"\";\n\t\tattributes = this.parseUserAttributes();\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number;\n\t\t\tcolor = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new TriangleMethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new TriangleMethodMaterial(color);\n\t\t\t\tmat.materialMode = TriangleMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar tex_addr:number = props.get(2, 0);\n\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\n\n\t\t\tmat = new TriangleMethodMaterial(<Texture2DBase> returnedArray[1]);\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a TriangleMethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t} else {\n\t\t\t\tmat.materialMode = TriangleMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a TriangleMethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = attributes;\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.repeat = props.get(13, false);\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\n\t\t}\n\t}\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number):void\n\t{\n\t\tvar mat:TriangleMethodMaterial;\n\t\tvar normalTexture:Texture2DBase;\n\t\tvar specTexture:Texture2DBase;\n\t\tvar returnedArray:Array<any>;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"\";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.materialMode == 1)\n\t\t\tspezialType = 0;\n\t\telse if (this.materialMode == 2)\n\t\t\tspezialType = 1;\n\n\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\tif (type == 1) {// Color material\n\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\tmat = new TriangleMethodMaterial(color);\n\t\t\t\t\tmat.materialMode = TriangleMaterialMode.MULTI_PASS;\n\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\tmat = new TriangleMethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t}\n\n\t\t\t} else if (type == 2) {// texture material\n\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\n\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this TriangleMethodMaterial\");\n\n\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\n\n\t\t\t\tmat = new TriangleMethodMaterial(texture);\n\n\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\tmat.materialMode = TriangleMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tdebugString += \"Parsed a TriangleMethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\tdebugString += \"Parsed a TriangleMethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar diffuseTexture:Texture2DBase;\n\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\n\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this TriangleMethodMaterial\");\n\t\t\t}\n\n\t\t\tif (returnedArray[0])\n\t\t\t\tdiffuseTexture = returnedArray[1];\n\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmat.diffuseTexture = diffuseTexture;\n\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\n\t\t\t}\n\n\t\t\tvar normalTex_addr:number = props.get(3, 0);\n\n\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this TriangleMethodMaterial\");\n\t\t\t}\n\n\t\t\tif (returnedArray[0]) {\n\t\t\t\tnormalTexture = returnedArray[1];\n\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\n\t\t\t}\n\n\t\t\tvar specTex_addr:number = props.get(21, 0);\n\t\t\treturnedArray = this.getAssetByID(specTex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this TriangleMethodMaterial\");\n\t\t\t}\n\t\t\tif (returnedArray[0]) {\n\t\t\t\tspecTexture = returnedArray[1];\n\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\n\t\t\t}\n\n\t\t\tvar lightPickerAddr:number = props.get(22, 0);\n\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [AssetType.LIGHT_PICKER])\n\n\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this TriangleMethodMaterial\");\n\t\t\t} else {\n\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\n\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\n\t\t\t}\n\n\t\t\tmat.smooth = props.get(5, true);\n\t\t\tmat.mipmap = props.get(6, true);\n\t\t\tmat.bothSides = props.get(7, false);\n\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\t\t\tmat.repeat = props.get(13, false);\n\n\t\t\tif (normalTexture)\n\t\t\t\tmat.normalMap = normalTexture;\n\n\t\t\tif (specTexture)\n\t\t\t\tmat.specularMap = specTexture;\n\n\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\tmat.ambient = props.get(15, 1.0);\n\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\n\t\t\tmat.specular = props.get(18, 1.0);\n\t\t\tmat.gloss = props.get(19, 50);\n\t\t\tmat.specularColor = props.get(20, 0xffffff);\n\n\t\t\tvar methods_parsed:number = 0;\n\t\t\tvar targetID:number;\n\n\t\t\twhile (methods_parsed < num_methods) {\n\t\t\t\tvar method_type:number;\n\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\tprops = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\n\n\t\t\t\tswitch (method_type) {\n\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\n\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.EFFECTS_METHOD]);\n\n\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\n\n\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\n\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\n\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\n\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\n\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\n\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\n\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\n\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\n\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\n\t\t\t\t\t\tif (!mat.normalMap)\n\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\n\n\t\t\t\t\t\tmat.normalMap = returnedArray[1];\n\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\n\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.parseUserAttributes();\n\t\t\t\tmethods_parsed += 1;\n\t\t\t}\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\t\t}\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number):void\n\t{\n\n\t\tvar asset:Texture2DBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\n\t\t}\n\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number):void\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar asset:CubeTextureBase;\n\t\tvar i:number;\n\n\t\tthis._cubeTextures = new Array<any>();\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\t\t\tthis._cubeTextures.push(null);\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray;\n\t\t\t\tdata = new ByteArray();\n\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\n\t\t}\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number):void\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t\t}\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number):void\n\t{\n\t\tvar type:number;\n\t\tvar data_len:number;\n\t\tvar asset:ShadowMethodBase;\n\t\tvar shadowLightID:number;\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [AssetType.LIGHT]);\n\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\n\t\t\treturn;\n\t\t}\n\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\n\t\t}\n\t}\n\n\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number):void\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar parentObject:DisplayObjectContainer;\n\t\tvar targetObject:DisplayObjectContainer;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\n\t\t}\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\n\t\t\t\tvar targetID:number = props.get(1, 0);\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [AssetType.LIGHT, AssetType.TEXTURE_PROJECTOR]); //for no only light is requested!!!!\n\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttargetObject = returnedArrayTarget[1];\n\n\t\t\t\tif (parentObject) {\n\t\t\t\t\tparentObject.addChild(targetObject);\n\t\t\t\t}\n\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\n\t\t}\n\t\tthis._blocks[blockID].data = targetObject\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t\t}\n\n\t}\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number):void\n\t{\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number):void\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\n\t\t\t\t\treturn shadowMethod;\n\t\t\t\t}\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\n\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\t\t\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t\tjoints_parsed++;\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\t\tthis._blocks[blockID].data = skeleton;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t\tjoints_parsed++;\n\t\t}\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\t\tthis._blocks[blockID].data = pose;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_addr:number /*uint*/;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar returnedArray:Array<any>;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [AssetType.SKELETON_POSE]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\n\t\t\telse\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\n\t{\n\t\tvar num_frames:number /*uint*/ = 1;\n\t\tvar num_submeshes:number /*uint*/;\n\t\tvar frames_parsed:number /*uint*/;\n\t\tvar subMeshParsed:number /*uint*/;\n\t\tvar frame_dur:number;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Array<number> /*uint*/;\n\t\tvar verts:Array<number>;\n\t\tvar num_Streams:number /*int*/ = 0;\n\t\tvar streamsParsed:number /*int*/ = 0;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar thisGeo:Geometry;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [AssetType.GEOMETRY]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\n\t\t\treturn;\n\t\t}\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\n\t\tif (!poseOnly)\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\n\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\n\t\tstreamsParsed = 0;\n\t\twhile (streamsParsed < num_Streams) {\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\t\t\tstreamsParsed++;\n\t\t}\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tframes_parsed = 0;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgeometry = new Geometry();\n\t\t\tsubMeshParsed = 0;\n\t\t\twhile (subMeshParsed < num_submeshes) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\n\t\t\t\t\t\tsubMeshParsed++;\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(geometry, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\n\t{\n\t\tvar poseBlockAdress:number /*int*/\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\n\t\t\telse {\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\n\t\t\t\tvertexFrames.push(returnedArray[1])\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\n\t\t\t\tskeletonFrames.push(returnedArray[1])\n\t\t\t}\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\n\n\t\t}\n\t}\n\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\n\t{\n\t\tvar targetMesh:Mesh;\n\t\tvar animSetBlockAdress:number /*int*/\n\t\tvar targetAnimationSet:AnimationSetBase;\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar returnedArray:Array<any>;\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\n\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [AssetType.MESH]);\n\t\t\tif (returnedArray[0])\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\n\t\t}\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AssetType.ANIMATION_SET]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\n\t\t\treturn\n\t\t}\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1) {\n\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [AssetType.SKELETON]);\n\t\t\tif (!returnedArray[0]) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\n\n\t\t} else if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\tif (type == 2)\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\n\n\t\t}\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\t\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\tconsole.log('ENV MAP', targetID);\n\n\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ AssetType.TEXTURE ], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\n\t\t\t\ttargetID = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE_PROJECTOR]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar attributes:Object;\n\t\tvar list_len:number;\n\t\tvar attibuteCnt:number;\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\n\t\t\tvar list_end:number;\n\n\t\t\tattributes = {};\n\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\t\t\t\tattibuteCnt += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_end:number;\n\t\tvar list_len:number;\n\t\tvar propertyCnt:number = 0;\n\t\tvar props:AWDProperties = new AWDProperties();\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar len:number;\n\t\t\t\tvar key:number;\n\t\t\t\tvar type:number;\n\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\n\t\t\t\tpropertyCnt += 1;\n\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\n\t\tswitch (type) {\n\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_read:number = 0;\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\twhile (num_read < num_elems) {\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\n\t\t\t\tnum_read++;\n\t\t\t}\n\n\t\t\treturn list;\n\t\t} else {\n\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tprivate parseHeader():void\n\t{\n\t\tvar flags:number;\n\t\tvar body_len:number;\n\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\n\t\t// set storagePrecision types\n\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyGeo) {\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyMatrix) {\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyProps) {\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tbody_len = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\t\t}\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\n\t{\n\t\tif (this._blocks[meshID].data instanceof Mesh)\n\t\tmeshID = this._blocks[meshID].geoID;\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\n\t\tvar geoCnt:number /*int*/ = 0;\n\t\tvar ud:Array<number>;\n\t\tvar uStride:number /*uint*/;\n\t\tvar uOffs:number /*uint*/;\n\t\tvar numPoints:number /*uint*/;\n\t\tvar i:number /*int*/;\n\t\tvar newUvs:Array<number>;\n\t\tvar sub_geom:TriangleSubGeometry;\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\n\t\twhile (geoCnt < geometry.subGeometries.length) {\n\t\t\tnewUvs = new Array<number>();\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\n\t\t\tnumPoints = sub_geom.numVertices;\n\t\t\tud = sub_geom.uvs;\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\n\t\t\tfor (i = 0; i < numPoints; i++) {\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\n\t\t\t}\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\n\t\t\tgeoCnt++;\n\t\t}\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t}\n\t\n\tprivate parseVarStr():string\n\t{\n\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\n\t\treturn this._newBlockBytes.readUTFBytes(len);\n\t}\n\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\n\t{\n\t\tvar returnArray:Array<any> = new Array<any>();\n\t\tvar typeCnt:number = 0;\n\t\tif (assetID > 0) {\n\t\t\tif (this._blocks[assetID]) {\n\t\t\t\tif (this._blocks[assetID].data) {\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\n\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\n\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\n\t\t\t\t\t\t\t//if the right assetType was found\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"CubeTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"SingleTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (IAsset(_blocks[assetID].data).assetType == AssetType.MESH)) {\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (iasset.assetType == AssetType.MESH)) {\n\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\n\n\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\n\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttypeCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\n\t\treturnArray.push(false);\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\n\t\treturn returnArray;\n\t}\n\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\n\t{\n\t\tswitch (true) {\n\t\t\tcase (assetType == AssetType.TEXTURE):\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\n\t\t\t\t\treturn this.getDefaultCubeTexture();\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\n\t\t\t\t\treturn this.getDefaultTexture();\n\t\t\t\tbreak;\n\t\t\tcase (assetType == AssetType.MATERIAL):\n\t\t\t\treturn this.getDefaultMaterial()\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getDefaultMaterial():IAsset\n\t{\n\t\tif (!this._defaultBitmapMaterial)\n\t\t\tthis._defaultBitmapMaterial = <TriangleMethodMaterial> DefaultMaterialManager.getDefaultMaterial();\n\n\t\treturn  <IAsset>  this._defaultBitmapMaterial;\n\t}\n\n\tprivate getDefaultTexture():IAsset\n\t{\n\t\tif (!this._defaultTexture)\n\t\t\tthis._defaultTexture = DefaultMaterialManager.getDefaultTexture();\n\n\t\treturn <IAsset> this._defaultTexture;\n\n\t}\n\n\tprivate getDefaultCubeTexture():IAsset\n\t{\n\t\tif (!this._defaultCubeTexture) {\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\n\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\n\t\t}\n\n\t\treturn <IAsset> this._defaultCubeTexture;\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\t\treturn this._newBlockBytes.readFloat();\n\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar i:number;\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n}\n\nexport = AWDParser;\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic data:any;\n\tpublic len:any;\n\tpublic geoID:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\n\n\tconstructor()\n\t{\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any):void\n\t{\n\t\tthis[ key.toString() ] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\tif (this.hasOwnProperty(key.toString())) {\n\t\t\treturn this[key.toString()];\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}","import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport TriangleMethodMaterial\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMethodMaterial\");\nimport TriangleMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMaterialMode\");\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current subgeom being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstSubGeom:TriangleSubGeometry;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _mesh:Mesh;\n\tprivate _geometry:Geometry;\n\n\tprivate materialFinal:boolean = false;\n\tprivate geoCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\n\n\t\tif (asset) {\n\t\t\tvar material:TriangleMethodMaterial = new TriangleMethodMaterial(asset);\n\n\t\t\tif (this.materialMode >= 2)\n\t\t\t\tmaterial.materialMode = TriangleMaterialMode.MULTI_PASS;\n\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\tmaterial.name = this._mesh.material.name;\n\t\t\tthis._mesh.material = material;\n\t\t\tthis._pFinalizeAsset(material);\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t}\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._mesh.material = new TriangleMethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t(<TriangleMethodMaterial> this._mesh.material).materialMode = TriangleMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\tthis._pFinalizeAsset(this._mesh);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._geometry = new Geometry();\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._mesh.material = new TriangleMethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t\t\t(<TriangleMethodMaterial> this._mesh.material).materialMode = TriangleMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.geoCreated) {\n\t\t\t\tthis.geoCreated = true;\n\t\t\t\t//create default subgeometry\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._mesh.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader():void\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames():void\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the mesh.\n\t */\n\tprivate parseUV():void\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces():void\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame geometries.\n\t */\n\tprivate parseFrames():void\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\tsubGeom = new TriangleSubGeometry(true);\n\n\t\t\tif (this._firstSubGeom == null)\n\t\t\t\tthis._firstSubGeom = subGeom;\n\n\t\t\tgeometry = new Geometry();\n\t\t\tgeometry.addSubGeometry(subGeom);\n\n\t\t\tsubGeom.updateIndices(this._indices);\n\t\t\tsubGeom.updatePositions(fvertices);\n\t\t\tsubGeom.updateUVs(this._finalUV);\n\t\t\tsubGeom.vertexNormals;\n\t\t\tsubGeom.vertexTangents;\n\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\tsubGeom.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport = MD2Parser;","import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}","import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _mesh:Mesh;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _meshData:Array<MeshData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _geometry:Geometry;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5mesh\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\n\t\t\t\tthis._geometry = this._mesh.geometry;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\n\n\t\t\t\t//_geometry.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\n\t\t\tvar meshData:MeshData = this._meshData[i];\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = vertex.startWeight;\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh geometry.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar vertexData:Array<VertexData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(vertexData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._meshData == null)\n\t\t\tthis._meshData = new Array<MeshData>();\n\n\t\tvar i:number /*uint*/ = this._meshData.length;\n\t\tthis._meshData[i] = new MeshData();\n\t\tthis._meshData[i].vertexData = vertexData;\n\t\tthis._meshData[i].weightData = weights;\n\t\tthis._meshData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the mesh data to a SkinnedSub instance.\n\t * @param vertexData The mesh's vertices.\n\t * @param weights The joint weights per vertex.\n\t * @param indices The indices for the faces.\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\n\t */\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\n\t{\n\t\tvar len:number /*int*/ = vertexData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar vertex:VertexData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tvertex = vertexData[i];\n\t\t\tv1 = vertex.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\n\t\t\t\tweight = weights[vertex.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = vertex.index << 1;\n\t\t\tuvs[v1++] = vertex.s;\n\t\t\tuvs[v1] = vertex.t;\n\t\t}\n\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\n\t\tsubGeom.updateIndices(indices);\n\t\tsubGeom.updatePositions(vertices);\n\t\tsubGeom.updateUVs(uvs);\n\t\tsubGeom.updateJointIndices(jointIndices);\n\t\tsubGeom.updateJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\tsubGeom.vertexNormals;\n\t\tsubGeom.vertexTangents;\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\tsubGeom.autoDeriveTangents = false;\n\t\tsubGeom.autoDeriveNormals = false;\n\n\t\treturn subGeom;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of vertex indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single vertex.\n\t * @param vertexData The list to contain the vertex data.\n\t */\n\tprivate parseVertex(vertexData:Array<VertexData>):void\n\t{\n\t\tvar vertex:VertexData = new VertexData();\n\t\tvertex.index = this.getNextInt();\n\t\tthis.parseUV(vertex);\n\t\tvertex.startWeight = this.getNextInt();\n\t\tvertex.countWeight = this.getNextInt();\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\n\t\tvertexData[vertex.index] = vertex;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param vertexData The vertexData to contain the UV coordinates.\n\t */\n\tprivate parseUV(vertexData:VertexData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvertexData.s = this.getNextNumber();\n\t\tvertexData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5MeshParser;\n\n\nclass VertexData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass MeshData\n{\n\tpublic vertexData:Array<VertexData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}","import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport TriangleMethodMaterial\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMethodMaterial\");\nimport TriangleMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMaterialMode\");\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = <Texture2DBase> asset;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = AssetType.MESH;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == AssetType.MESH) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleSubGeometry;\n\t\t\tvar geom:Geometry;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar mesh:Mesh;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeom = new Geometry();\n\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\n\t\t\t// and add them to geometry.\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.updateIndices(obj.indices);\n\t\t\tsub.updatePositions(obj.verts);\n\t\t\tsub.updateUVs(obj.uvs);\n\n\t\t\tgeom.addSubGeometry(sub);\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Apply pivot translation to geometry if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\n\t\t\t\t\tdat[12] = 0;\n\t\t\t\t\tdat[13] = 0;\n\t\t\t\t\tdat[14] = 0;\n\t\t\t\t\tmtx = new Matrix3D(dat);\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to geometry if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\n\n\t\t\t// Build mesh and return it\n\t\t\tmesh = new Mesh(geom, mat);\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\n\t\t\treturn mesh;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:TriangleMethodMaterial;\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat = new TriangleMethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\n\t\telse\n\t\t\tmat = new TriangleMethodMaterial(this._cur_mat.ambientColor);\n\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\n\t\tmat.specularColor = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.materialMode = TriangleMaterialMode.MULTI_PASS\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Array<number>\n\t{\n\t\tvar data:Array<number>;\n\n\t\tdata = new Array<number>(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport = Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Array<number>;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Texture2DBase;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}","import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport TriangleMethodMaterial\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMethodMaterial\");\nimport TriangleMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/TriangleMaterialMode\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _meshes:Array<Mesh>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = <Texture2DBase> asset;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._meshes.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._meshes = new Array<Mesh>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar geometry:Geometry;\n\t\t\tvar mesh:Mesh;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:TriangleMethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tgeometry = new Geometry();\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\n\n\t\t\t\tif (geometry.subGeometries.length == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\n\n\t\t\t\tbmMaterial = new TriangleMethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.materialMode = TriangleMaterialMode.MULTI_PASS;\n\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\n\t\t\t\t\tmesh.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tmesh.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._meshes.push(mesh);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\n\n\t\t\t\tif (mesh.subMeshes.length > 1) {\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgeometry.\n\t * @param materialGroup The material group data to convert.\n\t * @param geometry The Geometry to contain the converted SubGeometry.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar sub:TriangleSubGeometry;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\n\t\t\tsub.updateIndices(indices);\n\t\t\tsub.updatePositions(vertices);\n\t\t\tsub.updateVertexNormals(normals);\n\t\t\tsub.updateUVs(uvs);\n\n\t\t\tgeometry.addSubGeometry(sub);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:TriangleMethodMaterial;\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm = new TriangleMethodMaterial(color);\n\n\t\t\t\t\tvar colorMat:TriangleMethodMaterial = <TriangleMethodMaterial> cm;\n\n\t\t\t\t\tcolorMat.alpha = alpha;\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMat.specular = specular;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcm = new TriangleMethodMaterial(color);\n\t\t\t\t\tcm.materialMode = TriangleMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tvar colorMultiMat:TriangleMethodMaterial = <TriangleMethodMaterial> cm;\n\n\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMultiMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar mesh:Mesh;\n\t\tvar tm:TriangleMethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\n\t\t\tmesh = this._meshes[i];\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (mesh.material)\n\t\t\t\t\t\tmesh.material = null;\n\t\t\t\t\tmesh.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm = <TriangleMethodMaterial > mesh.material;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\n\t\t\t\t\t\ttm = <TriangleMethodMaterial> mesh.material;\n\t\t\t\t\t\ttm.materialMode = TriangleMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._meshes.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport = OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Texture2DBase;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}","import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\n\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport = Parsers;"],"sourceRoot":"./"}