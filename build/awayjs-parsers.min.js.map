{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "../index.ts",
    "lib/lib/AWD3ParserUtils/AWD3Utils.ts",
    "lib/lib/AWD3ParserUtils/AWDBlock.ts",
    "lib/AWDParser.ts",
    "lib/MD2Parser.ts",
    "lib/MD5AnimParser.ts",
    "lib/MD5MeshParser.ts",
    "lib/Max3DSParser.ts",
    "lib/OBJParser.ts",
    "lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    1,
    "module",
    "AWDParser_1",
    "AWDParser",
    "default",
    "Max3DSParser_1",
    "Max3DSParser",
    "MD2Parser_1",
    "MD2Parser",
    "MD5AnimParser_1",
    "MD5AnimParser",
    "MD5MeshParser_1",
    "MD5MeshParser",
    "OBJParser_1",
    "OBJParser",
    "Parsers_1",
    "Parsers",
    "awayjs-parsers/lib/AWDParser",
    "awayjs-parsers/lib/MD2Parser",
    "awayjs-parsers/lib/MD5AnimParser",
    "awayjs-parsers/lib/MD5MeshParser",
    "awayjs-parsers/lib/Max3DSParser",
    "awayjs-parsers/lib/OBJParser",
    "awayjs-parsers/lib/Parsers",
    "awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils",
    "AWD3Utils",
    "BLOCKSTATE_FINALIZE",
    "BLOCKSTATE_INVALID",
    "BLOCKSTATE_LOAD_DEPENDENICES",
    "BLOCKSTATE_NO_ASSET",
    "COMPRESSIONMODE_LZMA",
    "UNCOMPRESSED",
    "DEFLATE",
    "LZMA",
    "INT8",
    "INT16",
    "INT32",
    "UINT8",
    "UINT16",
    "UINT32",
    "FLOAT32",
    "FLOAT64",
    "BOOL",
    "COLOR",
    "BADDR",
    "AWDSTRING",
    "AWDBYTEARRAY",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "MTX4x4",
    "Object",
    "defineProperty",
    "value",
    "awayjs-parsers/lib/AWD3ParserUtils/AWDBlock",
    "AWD3Utils_1",
    "AWDBlock",
    "this_id",
    "this_type",
    "this",
    "type",
    "id",
    "state",
    "dependencies_data",
    "Array",
    "dependencies_urls",
    "loaded_dependencies",
    "loaded_dependencies_cnt",
    "prototype",
    "dispose",
    "bytes",
    "errorMessages",
    "uvsForVertexAnimation",
    "addError",
    "errorMsg",
    "push",
    "__extends",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "create",
    "AttributesBuffer_1",
    "Float3Attributes_1",
    "Float2Attributes_1",
    "Byte4Attributes_1",
    "BitmapImageCube_1",
    "BlendMode_1",
    "Sampler2D_1",
    "ColorTransform_1",
    "Matrix3D_1",
    "Vector3D_1",
    "URLLoaderDataFormat_1",
    "URLRequest_1",
    "ParserBase_1",
    "ParserUtils_1",
    "PerspectiveProjection_1",
    "OrthographicProjection_1",
    "OrthographicOffCenterProjection_1",
    "ByteArray_1",
    "DisplayObjectContainer_1",
    "Graphics_1",
    "TriangleElements_1",
    "DirectionalLight_1",
    "PointLight_1",
    "Camera_1",
    "Sprite_1",
    "Billboard_1",
    "Skybox_1",
    "DefaultMaterialManager_1",
    "StaticLightPicker_1",
    "CubeMapShadowMapper_1",
    "DirectionalShadowMapper_1",
    "PrefabBase_1",
    "PrimitiveCapsulePrefab_1",
    "PrimitiveConePrefab_1",
    "PrimitiveCubePrefab_1",
    "PrimitiveCylinderPrefab_1",
    "PrimitivePlanePrefab_1",
    "PrimitiveSpherePrefab_1",
    "PrimitiveTorusPrefab_1",
    "SingleCubeTexture_1",
    "Single2DTexture_1",
    "VertexAnimationSet_1",
    "VertexAnimator_1",
    "SkeletonAnimationSet_1",
    "SkeletonAnimator_1",
    "JointPose_1",
    "Skeleton_1",
    "SkeletonPose_1",
    "SkeletonJoint_1",
    "SkeletonClipNode_1",
    "VertexClipNode_1",
    "MethodMaterialMode_1",
    "MethodMaterial_1",
    "AmbientEnvMapMethod_1",
    "DiffuseDepthMethod_1",
    "DiffuseCelMethod_1",
    "DiffuseGradientMethod_1",
    "DiffuseLightMapMethod_1",
    "DiffuseWrapMethod_1",
    "EffectAlphaMaskMethod_1",
    "EffectColorMatrixMethod_1",
    "EffectColorTransformMethod_1",
    "EffectEnvMapMethod_1",
    "EffectFogMethod_1",
    "EffectFresnelEnvMapMethod_1",
    "EffectLightMapMethod_1",
    "EffectRimLightMethod_1",
    "NormalSimpleWaterMethod_1",
    "ShadowDitheredMethod_1",
    "ShadowFilteredMethod_1",
    "SpecularFresnelMethod_1",
    "ShadowHardMethod_1",
    "SpecularAnisotropicMethod_1",
    "SpecularCelMethod_1",
    "SpecularPhongMethod_1",
    "ShadowNearMethod_1",
    "ShadowSoftMethod_1",
    "BasicMaterial_1",
    "AS2SceneGraphFactory_1",
    "Timeline_1",
    "AssetLibrary_1",
    "Font_1",
    "TextFormat_1",
    "AWDBlock_1",
    "Rectangle_1",
    "Style_1",
    "Matrix_1",
    "MappingMode_1",
    "ElementsType_1",
    "_super",
    "view",
    "ARRAY_BUFFER",
    "_debug",
    "_debugTimers",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_time_all",
    "_time_graphics",
    "_time_graphics_bytes",
    "_time_timeline",
    "_time_fonts",
    "_time_textfields",
    "_time_sounds",
    "_time_textures",
    "_time_materials",
    "_time_sprites",
    "_num_graphics",
    "_num_timeline",
    "_num_fonts",
    "_num_textfields",
    "_num_sounds",
    "_num_textures",
    "_num_materials",
    "_num_sprites",
    "shadowMethodListProperties",
    2,
    3,
    101,
    "PROPERTY_NUMBER",
    102,
    103,
    201,
    202,
    301,
    302,
    401,
    402,
    601,
    602,
    701,
    702,
    801,
    "spritePoseAnimationProperties",
    "sharedMethodListProperties",
    104,
    105,
    106,
    107,
    "_view",
    "_blocks",
    "data",
    "blendModeDic",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "this_block",
    "parseInt",
    "image_asset",
    "_pFinalizeAsset",
    "name",
    "console",
    "log",
    "audio_asset",
    "sub_id",
    "cube_image_asset",
    "width",
    "draw",
    "_isParsing",
    "updateTimers",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "asset",
    "oldName",
    "block",
    "resetAssetPath",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "_pDieWithError",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "isParsed",
    "ns",
    "flags",
    "len",
    "start_timeing",
    "performance",
    "now",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseSpriteLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseMovieClip",
    "parseTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseSpritePoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseGraphics",
    "parseContainer",
    "parseSpriteInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "end_timing",
    "time_delta",
    "blockID",
    "parseVarStr",
    "new_font",
    "getAsset",
    "newfont",
    "undefined",
    "font_style_cnt",
    "font_style_char_cnt",
    "font_style_name",
    "new_font_style",
    "font_style_char",
    "attr_count",
    "sm_len",
    "sm_end",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "get_font_table",
    "set_font_em_size",
    "set_whitespace_width",
    "ascent",
    "readFloat",
    "descent",
    "j",
    "char_width",
    "indices",
    "idx",
    "readUnsignedShort",
    "curveData",
    "vertexBuffer",
    "bufferView",
    "Uint8Array",
    "arraybytes",
    "curve_elements",
    "setPositions",
    "setCustomAttributes",
    "setUVs",
    "setChar",
    "parseProperties",
    "parseUserAttributes",
    "font",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "mat",
    "bothSides",
    "curves",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "format_props",
    "textFormatProperties",
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "tf_align_int",
    "align",
    "indent",
    "leftMargin",
    "rightMargin",
    "leading",
    "material",
    "newTextField",
    "createTextField",
    "text_field_type",
    "textFieldTypes",
    "displayAsPassword",
    "textWidth",
    "Math",
    "abs",
    "textHeight",
    "num_paragraphs",
    "complete_text",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "text_format",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "props",
    "textFieldProperties",
    "selectable",
    "border",
    "extra",
    "billboard",
    "data_id",
    "graphics",
    "geoID",
    "num_materials",
    "materials",
    "materialNames",
    "materials_parsed",
    "getDefaultMaterial",
    "alphaBlending",
    "useColorTransform",
    "sprite",
    "copyTo",
    "count",
    "getGraphicAt",
    "min",
    "sampler",
    "graphic",
    "style",
    "addSamplerAt",
    "getTextureAt",
    "tx",
    "ty",
    "animateUVs",
    "uvMatrix",
    "matrix",
    "parseMatrix32RawData",
    "newMatrix",
    "x",
    "y",
    "height",
    "imageRect",
    "elements",
    "getCustomAtributes",
    "data_len",
    "url",
    "_pAddDependency",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "cmd_asset",
    "new_timeline",
    "new_mc",
    "createMovieClip",
    "num_potential_childs",
    "registerPotentialChild",
    "num_all_display_instances",
    "num_potential_childs_multi_instanced",
    "num_instances",
    "num_potential_sounds",
    "str_cnt",
    "str_data_type",
    "str_counter",
    "keyframes_start_indices_data",
    "new_buffer",
    "Uint16Array",
    "Uint32Array",
    "keyframe_durations",
    "numKeyFrames",
    "frame_command_indices",
    "frame_recipe",
    "command_length_stream",
    "command_index_stream",
    "add_child_stream",
    "remove_child_stream",
    "update_child_stream",
    "update_child_props_indices_stream",
    "update_child_props_length_stream",
    "property_type_stream",
    "property_index_stream",
    "properties_stream_int",
    "lc",
    "float_array_data",
    "properties_stream_f32_mtx_scale_rot",
    "Float32Array",
    "properties_stream_f32_mtx_pos",
    "properties_stream_f32_mtx_all",
    "properties_stream_f32_ct",
    "_labels",
    "string_props_array",
    "properties_stream_strings",
    "frame_index",
    "one_str_len",
    "add_framescript",
    "init",
    "sceneID",
    "fps",
    "movieClipProperties",
    "timeline",
    "numFrames",
    "numElements",
    "graphicsProperties",
    "geoScaleU",
    "geoScaleV",
    "elements_parsed",
    "is_curve_elements",
    "w_indices",
    "weights",
    "elementsProps",
    "elementsProperties",
    "z",
    "verts",
    "readNumber",
    "uvs",
    "normals",
    "addGraphic",
    "triangle_elements",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "setIndices",
    "setNormals",
    "setJointWeights",
    "setJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    "primitiveProperties",
    "TRIANGLE",
    "topClosed",
    "bottomClosed",
    "yUp",
    "primitiveTypes",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "addChild",
    "containerProperties",
    "pivot",
    "isPrefab",
    "isAsset",
    "getNewObject",
    "spriteInstanceProperties",
    "castsShadows",
    "tex",
    "getDefaultImageCube",
    "texture",
    "light",
    "newShadowMapper",
    "lightType",
    "lightProperties",
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    "cameraProperties",
    "camera",
    "cameraPivotProperties",
    "numLights",
    "lightsArray",
    "lightsArrayNames",
    "k",
    "lightPick",
    "finalize",
    "num_methods",
    "methods_parsed",
    "returnedArray",
    "materialProperties",
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "ambientMethod",
    "alpha",
    "alphaThreshold",
    "diffuseImage",
    "normalImage",
    "specImage",
    "material_v1Properties",
    "spezialType",
    "lightPicker",
    "alphaPremultiplied",
    "blendMode",
    "diffuseTexture",
    "normalMethod",
    "specularMethod",
    "strength",
    "diffuseMethod",
    "gloss",
    "method_v1Properties",
    "effectMethod",
    "addEffectMethod",
    "shadowMapMethod",
    "shadowMethod",
    "cubeTexture",
    "smoothness",
    "fresnelPower",
    "normalReflectance",
    "mappingMode",
    "LINEAR_GRADIENT",
    "RADIAL_GRADIENT",
    "basic_mat",
    "byteArrayToImage",
    "parseSharedMethodList",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "numCommands",
    "typeCommand",
    "commandProperties",
    "targetProperties",
    "metaDataProperties",
    "nameSpaceString",
    "methodType",
    "targetID",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "rawData",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_id",
    "clip",
    "num_frames",
    "frames_parsed",
    "addFrame",
    "frames",
    "poseOnly",
    "subSpriteParsed",
    "streamtypes",
    "geo_id",
    "getUVForVertexAnimation",
    "num_subsprites",
    "num_Streams",
    "streamsParsed",
    "looping",
    "stitchFinalFrame",
    "setTangents",
    "vertexAnimationSetProperties",
    "skeletonFrames",
    "vertexFrames",
    "clipNode",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "animatorSetProperties",
    "targetAnimationSet",
    "targetSpritees",
    "targetSpriteLength",
    "activeState",
    "autoplay",
    "thisAnimator",
    "animator",
    "effectMethodReturn",
    "offCol",
    "colorTransform",
    "list_len",
    "list_end",
    "attributes",
    "attibuteCnt",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "readByte",
    "readInt",
    "readDouble",
    "expected",
    "AWDProperties",
    "key",
    "propertyCnt",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "accuracy",
    "GEO_NUMBER",
    "MATRIX_NUMBER",
    "list",
    "num_elems",
    "num_read",
    "_streaming",
    "body_len",
    "spriteID",
    "geoCnt",
    "numVertices",
    "precision",
    "mtx_raw",
    "isNaN",
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    110,
    111,
    303,
    703,
    704,
    11,
    12,
    21,
    22,
    23,
    13,
    15,
    16,
    17,
    18,
    19,
    20,
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-core/lib/attributes/Byte4Attributes",
    "awayjs-core/lib/attributes/Float2Attributes",
    "awayjs-core/lib/attributes/Float3Attributes",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/image/BitmapImageCube",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-core/lib/image/Sampler2D",
    "awayjs-core/lib/library/AssetLibrary",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/Style",
    "awayjs-display/lib/base/Timeline",
    "awayjs-display/lib/display/Billboard",
    "awayjs-display/lib/display/Camera",
    "awayjs-display/lib/display/DirectionalLight",
    "awayjs-display/lib/display/DisplayObjectContainer",
    "awayjs-display/lib/display/PointLight",
    "awayjs-display/lib/display/Skybox",
    "awayjs-display/lib/display/Sprite",
    "awayjs-display/lib/graphics/ElementsType",
    "awayjs-display/lib/graphics/Graphics",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "_animationSet",
    "materialFinal",
    "graphicsCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_sprite",
    "getDefaultImage2D",
    "_pHasTime",
    "_parsedHeader",
    "_graphics",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstElements",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "Quaternion_1",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_elementsData",
    "translateElements",
    "positionData",
    "weightData",
    "_skeleton",
    "numElementsData",
    "elementsData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "start",
    "startWeight",
    "end",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "ElementsData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "positions",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "PositionData",
    "rotQuat",
    "BitmapImage2D_1",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "assetType",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "obj",
    "constructObject",
    "MaterialVO",
    "readColor",
    "diffuseColor",
    "specularColor",
    "twoSided",
    "colorMap",
    "specularMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "vertices",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "scaleBy",
    "applyTransformation",
    "concat",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "getDefaultTexture",
    "chr",
    "g",
    "awayjs-core/lib/image/BitmapImage2D",
    "SpecularBasicMethod_1",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_sprites",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "split",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "m",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertex",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "val",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "Loader_1",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/Loader"
  ],
  "mappings": "AAAAA,QAAA,QAAAC,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,SAAAR,UAAA,YAAAA,OAAA,KAAAO,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAG,EAAA,MAAAA,GAAAH,GAAA,EAAA,IAAAI,GAAA,GAAAC,OAAA,uBAAAL,EAAA,IAAA,MAAAI,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAV,EAAAG,IAAAQ,WAAAZ,GAAAI,GAAA,GAAAS,KAAAF,EAAAC,QAAA,SAAAb,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAC,QAAAb,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAQ,QAAA,GAAAL,SAAAT,UAAA,YAAAA,OAAA,KAAA,GAAAM,GAAA,EAAAA,EAAAF,EAAAY,OAAAV,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAY,GAAA,SAAAjB,EAAAkB,EAAAJ,GCCA,YCDA,IAAAK,GAAAnB,EAAwC,+BAAhCc,GAAAM,UAAAD,EAAAE,OACR,IAAAC,GAAAtB,EAA0C,kCAAlCc,GAAAS,aAAAD,EAAAD,OACR,IAAAG,GAAAxB,EAAwC,+BAAhCc,GAAAW,UAAAD,EAAAH,OACR,IAAAK,GAAA1B,EAA2C,mCAAnCc,GAAAa,cAAAD,EAAAL,OACR,IAAAO,GAAA5B,EAA2C,mCAAnCc,GAAAe,cAAAD,EAAAP,OACR,IAAAS,GAAA9B,EAAwC,+BAAhCc,GAAAiB,UAAAD,EAAAT,OACR,IAAAW,GAAAhC,EAAuC,6BAA/Bc,GAAAmB,QAAAD,EAAAX,UDWLa,+BAA+B,+BAA+BC,+BAA+B,+BAA+BC,mCAAmC,mCAAmCC,mCAAmC,mCAAmCC,kCAAkC,kCAAkCC,+BAA+B,+BAA+BC,6BAA6B,+BAA+BC,gDAAgD,SAASzC,EAAQkB,EAAOJ,GACjhB,YEjBA,IAAA4B,GAAA,WAAA,QAAAA,MACeA,EAAAC,oBAA6B,CAC7BD,GAAAE,mBAA4B,CAC5BF,GAAAG,6BAAsC,CACtCH,GAAAI,oBAA6B,CAC7BJ,GAAAK,qBAA8B,MAC9BL,GAAAM,aAAsB,CACtBN,GAAAO,QAAiB,CACjBP,GAAAQ,KAAc,CACdR,GAAAS,KAAc,CACdT,GAAAU,MAAe,CACfV,GAAAW,MAAe,CACfX,GAAAY,MAAe,CACfZ,GAAAa,OAAgB,CAChBb,GAAAc,OAAgB,CAChBd,GAAAe,QAAiB,CACjBf,GAAAgB,QAAiB,CACjBhB,GAAAiB,KAAc,EACdjB,GAAAkB,MAAe,EACflB,GAAAmB,MAAe,EACfnB,GAAAoB,UAAmB,EACnBpB,GAAAqB,aAAsB,EACtBrB,GAAAsB,UAAmB,EACnBtB,GAAAuB,UAAmB,EACnBvB,GAAAwB,UAAmB,EACnBxB,GAAAyB,OAAgB,EAChBzB,GAAA0B,OAAgB,EAChB1B,GAAA2B,OAAgB,EAChB3B,GAAA4B,OAAgB,EAC/B,OAAA5B,KACA6B,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MFsBA3D,GAAQO,QEtBOqB,OFwBTgC,+CAA+C,SAAS1E,EAAQkB,EAAOJ,GAC7E,YGvDA,IAAA6D,GAAA3E,EAA2B,+CAG3B,IAAA4E,GAAA,WAkBC,QAAAA,GAAYC,EAAgBC,GAE3BC,KAAKC,KAAKF,CACVC,MAAKE,GAAGJ,CACRE,MAAKG,MAAQP,EAAAtD,QAAUsB,mBACvBoC,MAAKI,kBAAkBC,OACvBL,MAAKM,kBAAkBD,OACvB,IAAGN,GAAW,GAAG,CAChBC,KAAKO,oBAAoBF,MAAW,GAErCL,KAAKQ,wBAAwB,EAGvBX,EAAAY,UAAAC,QAAP,WAGCV,KAAKE,GAAK,IACVF,MAAKW,MAAQ,IACbX,MAAKY,cAAgB,IACrBZ,MAAKa,sBAAwB,KAIvBhB,GAAAY,UAAAK,SAAP,SAAgBC,GAEf,IAAKf,KAAKY,cACTZ,KAAKY,cAAgB,GAAIP,MAE1BL,MAAKY,cAAcI,KAAKD,GAE1B,OAAAlB,KACAL,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MH+BA3D,GAAQO,QG/BOuD,IHiCZnC,+CAA+C,iDAAiDP,gCAAgC,SAASlC,EAAQkB,EAAOJ,GAC3J,YACA,IAAIkF,GAAajB,MAAQA,KAAKiB,WAAc,SAAUC,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOtB,KAAKuB,YAAcL,EACnCA,EAAET,UAAYU,IAAM,KAAO3B,OAAOgC,OAAOL,IAAMG,EAAGb,UAAYU,EAAEV,UAAW,GAAIa,II3FnF,IAAAG,GAAAxG,EAAiC,8CAEjC,IAAAyG,GAAAzG,EAAiC,8CACjC,IAAA0G,GAAA1G,EAAiC,8CACjC,IAAA2G,GAAA3G,EAAgC,6CAGhC,IAAA4G,GAAA5G,EAAgC,wCAChC,IAAA6G,GAAA7G,EAA2B,kCAC3B,IAAA8G,GAAA9G,EAA2B,kCAE3B,IAAA+G,GAAA/G,EAA+B,sCAC/B,IAAAgH,GAAAhH,EAA2B,gCAC3B,IAAAiH,GAAAjH,EAA2B,gCAC3B,IAAAkH,GAAAlH,EAAmC,0CACnC,IAAAmH,GAAAnH,EAA4B,iCAE5B,IAAAoH,GAAApH,EAA4B,qCAC5B,IAAAqH,GAAArH,EAA6B,sCAG7B,IAAAsH,GAAAtH,EAAoC,oDACpC,IAAAuH,GAAAvH,EAAqC,qDACrC,IAAAwH,GAAAxH,EAA4C,8DAC5C,IAAAyH,GAAAzH,EAA2B,kCAI3B,IAAA0H,GAAA1H,EAAqC,oDAIrC,IAAA2H,GAAA3H,EAA2B,uCAC3B,IAAA4H,GAAA5H,EAAiC,+CACjC,IAAA6H,GAAA7H,EAAiC,8CACjC,IAAA8H,GAAA9H,EAA4B,wCAC5B,IAAA+H,GAAA/H,EAAyB,oCACzB,IAAAgI,GAAAhI,EAAyB,oCAEzB,IAAAiI,GAAAjI,EAA2B,uCAC3B,IAAAkI,GAAAlI,EAAyB,oCACzB,IAAAmI,GAAAnI,EAAqC,qDAGrC,IAAAoI,GAAApI,EAAiC,8DACjC,IAAAqI,GAAArI,EAAmC,iEACnC,IAAAsI,GAAAtI,EAAsC,qEAGtC,IAAAuI,GAAAvI,EAA4B,wCAE5B,IAAAwI,GAAAxI,EAAqC,oDACrC,IAAAyI,GAAAzI,EAAmC,iDACnC,IAAA0I,GAAA1I,EAAmC,iDACnC,IAAA2I,GAAA3I,EAAsC,qDACtC,IAAA4I,GAAA5I,EAAoC,kDACpC,IAAA6I,GAAA7I,EAAoC,mDACpC,IAAA8I,GAAA9I,EAAoC,kDACpC,IAAA+I,GAAA/I,EAAiC,gDACjC,IAAAgJ,GAAAhJ,EAAgC,8CAKhC,IAAAiJ,GAAAjJ,EAAkC,qDAClC,IAAAkJ,GAAAlJ,EAA+B,iDAC/B,IAAAmJ,GAAAnJ,EAAoC,uDACpC,IAAAoJ,GAAApJ,EAAiC,mDACjC,IAAAqJ,GAAArJ,EAA2B,iDAC3B,IAAAsJ,GAAAtJ,EAA2B,gDAC3B,IAAAuJ,GAAAvJ,EAA8B,oDAC9B,IAAAwJ,GAAAxJ,EAA8B,qDAC9B,IAAAyJ,GAAAzJ,EAAiC,yDACjC,IAAA0J,IAAA1J,EAA+B,uDAG/B,IAAA2J,IAAA3J,EAAkC,gDAClC,IAAA4J,IAAA5J,EAA+B,4CAC/B,IAAA6J,IAAA7J,EAAmC,yDACnC,IAAA8J,IAAA9J,EAAkC,wDAClC,IAAA+J,IAAA/J,EAAiC,sDACjC,IAAAgK,IAAAhK,EAAoC,2DACpC,IAAAiK,IAAAjK,EAAoC,2DACpC,IAAAkK,IAAAlK,EAAiC,uDACjC,IAAAmK,IAAAnK,EAAoC,2DACpC,IAAAoK,IAAApK,EAAsC,6DACtC,IAAAqK,IAAArK,EAAwC,gEACxC,IAAAsK,IAAAtK,EAAkC,wDAClC,IAAAuK,IAAAvK,EAAgC,qDAChC,IAAAwK,IAAAxK,EAAuC,+DACvC,IAAAyK,IAAAzK,EAAoC,0DAEpC,IAAA0K,IAAA1K,EAAoC,0DACpC,IAAA2K,IAAA3K,EAAsC,6DACtC,IAAA4K,IAAA5K,EAAoC,0DACpC,IAAA6K,IAAA7K,EAAoC,0DAGpC,IAAA8K,IAAA9K,EAAoC,2DACpC,IAAA+K,IAAA/K,EAAiC,sDACjC,IAAAgL,IAAAhL,EAAuC,+DACvC,IAAAiL,IAAAjL,EAAiC,uDACjC,IAAAkL,IAAAlL,EAAmC,yDACnC,IAAAmL,IAAAnL,EAAiC,sDACjC,IAAAoL,IAAApL,EAAiC,sDAEjC,IAAAqL,IAAArL,EAA8B,6CAG9B,IAAAsL,IAAAtL,EAAmC,mDAEnC,IAAAuL,IAAAvL,EAA2B,mCAG3B,IAAAwL,IAAAxL,EAA6B,uCAE7B,IAAAyL,IAAAzL,EAAuB,+BAEvB,IAAA0L,IAAA1L,EAA2B,qCAG3B,IAAA2L,IAAA3L,EAA0B,8CAC1B,IAAA4L,IAAA5L,EAA2B,iCAC3B,IAAA6L,IAAA7L,EAAwB,gCACxB,IAAA8L,IAAA9L,EAAyB,8BACzB,IAAA+L,IAAA/L,EAA6B,0CAC7B,IAAAgM,IAAAhM,EAAyB,2CAKzB,IAAAoB,IAAA,SAAA6K,GAAwBjG,EAAA5E,EAAA6K,EAkFvB,SAAA7K,GAAY8K,GAAA,GAAAA,QAAA,GAAgB,CAAhBA,EAAA,KAEXD,EAAAlL,KAAAgE,KAAMmC,EAAA7F,QAAoB8K,aA/EnBpH,MAAAqH,OAAiB,KACjBrH,MAAAsH,aAAuB,IAEvBtH,MAAAuH,gBAA0B,KAW1BvH,MAAAwH,iBACAxH,MAAAyH,eAAyB,KAqCzBzH,MAAA0H,UAAiB,CACjB1H,MAAA2H,eAAsB,CACtB3H,MAAA4H,qBAA4B,CAC5B5H,MAAA6H,eAAsB,CACtB7H,MAAA8H,YAAmB,CACnB9H,MAAA+H,iBAAwB,CACxB/H,MAAAgI,aAAoB,CACpBhI,MAAAiI,eAAsB,CACtBjI,MAAAkI,gBAAuB,CACvBlI,MAAAmI,cAAqB,CACrBnI,MAAAoI,cAAqB,CACrBpI,MAAAqI,cAAqB,CACrBrI,MAAAsI,WAAkB,CAClBtI,MAAAuI,gBAAuB,CACvBvI,MAAAwI,YAAmB,CACnBxI,MAAAyI,cAAqB,CACrBzI,MAAA0I,eAAsB,CACtB1I,MAAA2I,aAAoB,CAixEpB3I,MAAA4I,4BACP1M,EAAEG,EAAUyC,MACZ+J,EAAExM,EAAUyC,MACZgK,EAAEzM,EAAUyC,MACZiK,IAAI1M,EAAU2M,gBACdC,IAAI5M,EAAU2M,gBACdE,IAAI7M,EAAU2M,gBACdG,IAAI9M,EAAUoC,OACd2K,IAAI/M,EAAUoC,OACd4K,IAAIhN,EAAUmC,OACd8K,IAAIjN,EAAUmC,OACd+K,IAAIlN,EAAUkC,MACdiL,IAAInN,EAAUkC,MACdkL,IAAIpN,EAAUwC,MACd6K,IAAIrN,EAAUwC,MACd8K,IAAItN,EAAUuC,KACdgL,IAAIvN,EAAUuC,KACdiL,IAAIxN,EAAUkD,OA0JPS,MAAA8J,+BACP5N,EAAEG,EAAUuC,KACZiK,EAAExM,EAAUuC,KAiLLoB,MAAA+J,4BACP7N,EAAEG,EAAUyC,MACZ+J,EAAExM,EAAUyC,MACZgK,EAAEzM,EAAUyC,MACZiK,IAAI1M,EAAU2M,gBACdC,IAAI5M,EAAU2M,gBACdE,IAAI7M,EAAU2M,gBACdgB,IAAI3N,EAAU2M,gBACdiB,IAAI5N,EAAU2M,gBACdkB,IAAI7N,EAAU2M,gBACdmB,IAAI9N,EAAU2M,gBACdG,IAAI9M,EAAUoC,OACd2K,IAAI/M,EAAUoC,OACd4K,IAAIhN,EAAUmC,OACd8K,IAAIjN,EAAUmC,OACd+K,IAAIlN,EAAUkC,MACdiL,IAAInN,EAAUkC,MACdkL,IAAIpN,EAAUwC,MACd6K,IAAIrN,EAAUwC,MACd8K,IAAItN,EAAUuC,KACdgL,IAAIvN,EAAUuC,KAvnFdoB,MAAKoK,MAAQjD,CACbnH,MAAKqK,QAAU,GAAIhK,MACnBL,MAAKqK,QAAQ,GAAK,GAAIzD,IAAAtK,QAAS,EAAE,IACjC0D,MAAKqK,QAAQ,GAAGC,KAAO,IAEvBtK,MAAKuK,aAAe,GAAIlK,MACxBL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUkO,OACjCxK,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUmO,IACjCzK,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUoO,MACjC1K,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUqO,OACjC3K,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUsO,WACjC5K,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUuO,MACjC7K,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUwO,UACjC9K,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUyO,OACjC/K,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU0O,MACjChL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU2O,QACjCjL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU4O,SACjClL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAUkO,OACjCxK,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU6O,QACjCnL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU8O,OACjCpL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU+O,OACjCrL,MAAKuK,aAAavJ,KAAKc,EAAAxF,QAAU6O,QAEjCnL,MAAKsL,cAAgB,GAAIjL,MACzBL,MAAKsL,cAActK,KAAK,IACxBhB,MAAKsL,cAActK,KAAK,IACxBhB,MAAKsL,cAActK,KAAK,KACxBhB,MAAKsL,cAActK,KAAK,KACxBhB,MAAKuL,SAAWlL,QAQHhE,EAAAmP,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQPpP,GAAAsP,aAAd,SAA2BrB,GAE1B,MAAQhI,GAAAhG,QAAYsP,SAAStB,EAAM,IAAM,MAMnCjO,GAAAoE,UAAAoL,oBAAP,SAA2BC,GAK1B,GAAIA,EAAmBC,OAAO9P,QAAU,EAAG,CAC1C,GAAI+P,GAAsBhM,KAAKqK,QAAQ4B,SAASH,EAAmB5L,IACnE,IAAG8L,EAAW/L,MAAM,GAAG,CACtB,GAAIiM,GAA4CJ,EAAmBC,OAAO,EAC1EC,GAAW1B,KAAO4B,CAGlBlM,MAAKmM,gBAAyBD,EAAaF,EAAWI,KAEtD,IAAIpM,KAAKqH,OACRgF,QAAQC,IAAI,0BAA4BN,EAAWI,UAEhD,IAAGJ,EAAW/L,MAAM,GAAG,CAC3B,GAAIsM,GAAoCT,EAAmBC,OAAO,EAClEC,GAAW1B,KAAOiC,CAIlBvM,MAAKmM,gBAAyBI,EAAaP,EAAWI,KAEtD,IAAIpM,KAAKqH,OACRgF,QAAQC,IAAI,4BAA8BN,EAAWI,UAElD,IAAGJ,EAAW/L,MAAM,GAAG,CAC3B+L,EAAWzL,oBAAoBuL,EAAmBU,QAASV,EAAmBC,OAAO,EACrFC,GAAWxL,yBAEX,IAAIR,KAAKqH,OACRgF,QAAQC,IAAI,8BAAgCR,EAAmBU,OAAS,uBAEzE,IAAGR,EAAWxL,yBAAyB,EAAE,CACxC,GAAIiM,GAAmB,GAAI5K,GAAAvF,QAAgB0P,EAAWzL,oBAAoB,GAAGmM,MAE7E,KAAK,GAAIhR,GAAW,EAAGA,EAAI,EAAGA,IAC7B+Q,EAAiBE,KAAKjR,EAAGsQ,EAAWzL,oBAAoB7E,GAEzDsQ,GAAW1B,KAAOmC,CAClBzM,MAAKmM,gBAAyBM,EAAkBT,EAAWI,KAE3D,IAAIpM,KAAKqH,OACRgF,QAAQC,IAAI,8BAAgCN,EAAWI,OAI1D,GAAIpM,KAAKsH,eAAiBtH,KAAK4M,WAC9B5M,KAAK6M,aAAab,EAAW/L,OAOzB5D,GAAAoE,UAAAqM,2BAAP,SAAkChB,IAW3BzP,GAAAoE,UAAAsM,wBAAP,SAA+BjB,EAAuCkB,GAErE,GAAIC,GAAiBD,EAAMZ,IAE3B,IAAIY,EAAO,CACV,GAAIE,GAAiBlN,KAAKqK,QAAQ4B,SAASH,EAAmB5L,IAG9D8M,GAAMG,eAAeD,EAAMd,KAAM,KAAM,MAGxC,GAAIgB,GAAiBJ,EAAMZ,IAE3BY,GAAMZ,KAAOa,CAEb,OAAOG,GAMD/Q,GAAAoE,UAAA4M,iBAAP,WAEC,IAAKrN,KAAKuH,gBAAiB,CAC1BvH,KAAKsN,UAAYtN,KAAKuN,eACtBvN,MAAKuH,gBAAkB,KAGxB,IAAKvH,KAAKyH,eAAgB,CAUzBzH,KAAKwN,aAEL,QAAQxN,KAAKyN,cACZ,IAAKpR,GAAU6B,QACf,IAAK7B,GAAU8B,KACd6B,KAAK0N,eAAe,2CACpB,MAED,KAAKrR,GAAU4B,aACd+B,KAAK2N,MAAQ3N,KAAKsN,SAClB,OAyBFtN,KAAKyH,eAAiB,KAUvB,GAAIzH,KAAK2N,MAAO,CACf,MAAO3N,KAAK2N,MAAMC,oBAAsB,IAAM5N,KAAK6N,cAClD7N,KAAK8N,gBAIN,IAAI9N,KAAK2N,MAAMC,qBAAuB,EAAG,CACxC5N,KAAKU,SAEL,IAAIV,KAAKsH,aACR+E,QAAQC,IAAI,mBAAmBtM,KAAK0H,UAAY,GAAG,KAClD,gBAAgB1H,KAAKoI,cAAc,MAAMpI,KAAK2H,eAAiB,GAAG,KAClE,sBAAsB3H,KAAKoI,cAAc,MAAMpI,KAAK4H,qBAAuB,GAAG,KAC9E,iBAAiB5H,KAAKqI,cAAc,MAAMrI,KAAK6H,eAAiB,GAAG,KACnE,aAAa7H,KAAKsI,WAAW,MAAMtI,KAAK8H,YAAc,GAAG,KACzD,cAAc9H,KAAKwI,YAAY,MAAMxI,KAAKgI,aAAe,GAAG,KAC5D,YAAYhI,KAAK0I,eAAe,MAAM1I,KAAKkI,gBAAkB,GAAG,KAChE,gBAAgBlI,KAAKyI,cAAc,MAAMzI,KAAKiI,eAAiB,GAAG,KAClE,eAAejI,KAAK2I,aAAa,MAAM3I,KAAKmI,cAAgB,GAAG,KAEjE,OAAQ9F,GAAA/F,QAAWyR,iBACb,CACN,MAAQ1L,GAAA/F,QAAW0R,mBAEd,CAEN,OAAQhO,KAAKyN,cACZ,IAAKpR,GAAU6B,QACf,IAAK7B,GAAU8B,KACd,GAAI6B,KAAKqH,OACRgF,QAAQC,IAAI,oEAEb,OAGF,MAAQjK,GAAA/F,QAAWyR,cAId1R,GAAAoE,UAAAwN,eAAP,SAAsBC,GAGrBlO,KAAKmO,UAAY,GAAIxL,GAAArG,OAErB4K,GAAAzG,UAAMwN,eAAcjS,KAAAgE,KAACkO,GAGd7R,GAAAoE,UAAAC,QAAR,WAEC,IAAK,GAAI0N,KAAKpO,MAAKqK,QAAS,CAC3B,GAAIlJ,GAAwBnB,KAAKqK,QAAQ+D,EACzCjN,GAAET,WAIIrE,GAAAoE,UAAAqN,eAAR,WAEC,GAAIZ,EACJ,IAAImB,GAAmB,KACvB,IAAIC,EACJ,IAAIrO,EACJ,IAAIsO,EACJ,IAAIC,EAEJ,IAAIxO,KAAKsH,aACRtH,KAAKyO,cAAgBC,YAAYC,KAElC3O,MAAK4O,cAAgB5O,KAAK2N,MAAMkB,iBAEhCP,GAAKtO,KAAK2N,MAAMmB,kBAChB7O,GAAOD,KAAK2N,MAAMmB,kBAClBP,GAAQvO,KAAK2N,MAAMmB,kBACnBN,GAAMxO,KAAK2N,MAAMkB,iBAEjB,IAAIE,GAA2BC,GAASC,KAAKV,EAAOS,GAASE,MAC7D,IAAIC,GAA+BH,GAASC,KAAKV,EAAOS,GAASI,MAEjE,IAAIpP,KAAKqP,kBAAmB,CAC3BrP,KAAKsP,gBAAkBN,GAASC,KAAKV,EAAOS,GAASO,MACrDvP,MAAKwP,aAAeR,GAASC,KAAKV,EAAOS,GAASS,MAClDzP,MAAK0P,eAAiBV,GAASC,KAAKV,EAAOS,GAASW,OAGrD,GAAIC,GAAqB5P,KAAK2N,MAAMkC,SAAWrB,CAE/C,IAAIA,EAAMxO,KAAK2N,MAAMC,oBAAqB,CACzC5N,KAAK0N,eAAe,iEACpB1N,MAAK2N,MAAMkC,UAAY7P,KAAK2N,MAAMC,mBAClC,QAMD,GAAImB,EAAkB,CACrB/O,KAAK0N,eAAe,2CACpB1N,MAAK8P,eAAiB,GAAIpN,GAAApG,OAC1B0D,MAAK2N,MAAMoC,UAAU/P,KAAK8P,eAAgB,EAAGtB,EAC7CxO,MAAK8P,eAAeD,SAAW,MAYzB,CACN7P,KAAK8P,eAAiB9P,KAAK2N,MAS5BT,EAAQ,GAAItG,IAAAtK,QAAS0D,KAAK4O,cAAe3O,EACzCiN,GAAMsB,IAAMA,CACZ,IAAIwB,GAAuBhQ,KAAK8P,eAAeD,SAAWrB,CAE1D,IAAIO,EAAkB,CACrB/O,KAAK0N,eAAe,4CAKrB,GAAI1N,KAAKqH,OACRgF,QAAQC,IAAI,mBAAqBtM,KAAK4O,cAAgB,eAAiB3O,EAAO,oBAAsB8O,EAAmB,yBAA2B/O,KAAKsP,gBAAkB,2BAA6BtP,KAAKwP,aAAe,6BAA+BxP,KAAK0P,eAE/P1P,MAAKqK,QAAQrK,KAAK4O,eAAiB1B,CAEnC,IAAKlN,KAAKuL,SAAS,IAAM,GAAOvL,KAAKuL,SAAS,IAAM,EAAI,CAEvD,GAAI0E,GAAU,GAAI1J,IAAAjK,QAAqB0D,KAAKoK,MAE5C,QAAQnK,GACP,IAAK,IACJD,KAAKkQ,wBAAwBlQ,KAAK4O,cAClCP,GAAW,IACX,MACD,KAAK,IACJrO,KAAKmQ,2BAA2BnQ,KAAK4O,cACrCP,GAAW,IACX,MACD,KAAK,MACJrO,KAAKoQ,gBAAgBpQ,KAAK4O,cAAeqB,EACzC5B,GAAW,IACX,MACD,KAAK,KACJrO,KAAKqQ,eAAerQ,KAAK4O,cAAeqB,EACxC5B,GAAW,IACX,MACD,KAAK,KACJrO,KAAKsQ,eAAetQ,KAAK4O,cAAeqB,EACxC5B,GAAW,IACX,MACD,KAAK,KACJrO,KAAKuQ,oBAAoBvQ,KAAK4O,cAC9BP,GAAW,IACX,MACD,KAAK,KACJrO,KAAKwQ,gBAAgBxQ,KAAK4O,cAC1BP,GAAW,IACX,QAIH,GAAKrO,KAAKuL,SAAS,GAAK,GAAMvL,KAAKuL,SAAS,IAAM,GAAOvL,KAAKuL,SAAS,IAAM,EAAK,CACjF,OAAQtL,GACP,IAAK,IACJD,KAAKyQ,eAAezQ,KAAK4O,cACzBP,GAAW,IACX,MACD,KAAK,IACJrO,KAAK0Q,oBAAoB1Q,KAAK4O,cAC9BP,GAAW,IACX,MACD,KAAK,IACJrO,KAAK2Q,WAAW3Q,KAAK4O,cACrBP,GAAW,IACX,MACD,KAAK,IACJrO,KAAK4Q,YAAY5Q,KAAK4O,cACtBP,GAAW,IACX,MAOD,KAAK,IACJrO,KAAK6Q,iBAAiB7Q,KAAK4O,cAC3BP,GAAW,IACX,MACD,KAAK,IACJrO,KAAK8Q,iBAAiB9Q,KAAK4O,cAC3BP,GAAW,IACX,MACD,KAAK,IACJrO,KAAK+Q,iBAAiB/Q,KAAK4O,cAC3BP,GAAW,IACX,MACD,KAAK,IACJrO,KAAKgR,uBAAuBhR,KAAK4O,cACjCP,GAAW,IACX,MACD,KAAK,IACJrO,KAAKiR,uBAAuBjR,KAAK4O,cACjCP,GAAW,IACX,MACD,KAAK,KACJrO,KAAKkR,yBAAyBlR,KAAK4O,cAAe,KAClDP,GAAW,IACX,MACD,KAAK,KACJrO,KAAKkR,yBAAyBlR,KAAK4O,cACnCP,GAAW,IACX,MACD,KAAK,KACJrO,KAAKmR,wBAAwBnR,KAAK4O,cAClCP,GAAW,IACX,MACD,KAAK,KACJrO,KAAKoR,iBAAiBpR,KAAK4O,cAC3BP,GAAW,IACX,MACD,KAAK,KACJrO,KAAKqR,aAAarR,KAAK4O,cACvBP,GAAW,IACX,QAIH,GAAIA,GAAY,MAAO,CACtB,OAAQpO,GACP,IAAK,GACJD,KAAKsR,cAActR,KAAK4O,cACxB,MACD,KAAK,IACJ5O,KAAKuR,eAAevR,KAAK4O,cACzB,MACD,KAAK,IACJ5O,KAAKwR,oBAAoBxR,KAAK4O,cAC9B,MACD,KAAK,IACJ5O,KAAKyR,cAAczR,KAAK4O,cACxB,MACD,KAAK,IACJ5O,KAAK0R,aAAa1R,KAAK4O,cACvB,MACD,KAAK,KACJ5O,KAAK2R,cAAc3R,KAAK4O,cACxB,MACD,KAAK,KACJ5O,KAAK4R,kBAAkB5R,KAAK4O,cAC5B,MACD,KAAK,KACJ5O,KAAK6R,uBAAuB7R,KAAK4O,cACjC,MACD,KAAK,KAGL,IAAK,KACJ5O,KAAK8R,eAAe9R,KAAK4O,cACzB,MACD,KAAK,KACJ5O,KAAK+R,cAAc/R,KAAK4O,cACxB,MACD,SACC,GAAI5O,KAAKqH,OACRgF,QAAQC,IAAI,6CAA+CtM,KAAK4O,cAAgB,YAAcJ,EAAM,SAErGxO,MAAK8P,eAAeD,UAAYrB,CAChC,QAIH,GAAIxO,KAAKqH,OAAQ,CAChB,GAAIrH,KAAK8P,eAAeD,UAAYG,EACnC3D,QAAQC,IAAI,+CAAiDtM,KAAK4O,cAAgB,wBAEnF,IAAI1B,EAAMtM,cAAe,CACxB,GAAI4N,GAAatB,EAAMtM,cAAc3E,MACrC,KAAK,GAAI+V,GAAgB,EAAGA,EAASxD,EAAKwD,IACzC3F,QAAQC,IAAI,sBAAwBY,EAAMtM,cAAcoR,GAAU,QAGpE3F,QAAQC,IAAI,MAGb,GAAItM,KAAKsH,eAAiBtH,KAAK6N,cAC9B7N,KAAK6M,aAAa5M,EAEnBD,MAAK2N,MAAMkC,SAAWD,CACtB5P,MAAK8P,eAAiB,KAGfzT,GAAAoE,UAAAoM,aAAR,SAAqB5M,GAEpB,GAAIgS,GAAavD,YAAYC,KAC7B,IAAIuD,GAAaD,EAAajS,KAAKyO,aACnCzO,MAAK0H,WAAawK,CAElB,IAAIjS,GAAQ,EAAG,CACdD,KAAK2H,gBAAkBuK,CACvBlS,MAAKoI,oBACC,IAAInI,GAAQ,IAAK,CACvBD,KAAK6H,gBAAkBqK,CACvBlS,MAAKqI,oBACC,IAAIpI,GAAQ,IAAK,CACvBD,KAAK8H,aAAeoK,CACpBlS,MAAKsI,iBACC,IAAIrI,GAAQ,IAAK,CACvBD,KAAK+H,kBAAoBmK,CACzBlS,MAAKuI,sBACC,IAAItI,GAAQ,GAAI,CACtBD,KAAKgI,cAAgBkK,CACrBlS,MAAKwI,kBACC,IAAIvI,GAAQ,GAAI,CACtBD,KAAKiI,gBAAkBiK,CACvBlS,MAAKyI,oBACC,IAAIxI,GAAQ,GAAI,CACtBD,KAAKkI,iBAAmBgK,CACxBlS,MAAK0I,qBACC,IAAGzI,GAAM,GAAI,CACnBD,KAAKmI,eAAiB+J,CACtBlS,MAAK2I,gBAQCtM,GAAAoE,UAAA8P,oBAAR,SAA4B4B,GAE3B,GAAI/F,GAAcpM,KAAKoS,aACvBpS,MAAKqK,QAAQ8H,GAAS/F,KAAOA,CAC7B,IAAIiG,GAAoB5L,GAAAnK,QAAagW,SAAStS,KAAKqK,QAAQ8H,GAAS/F,KACpE,IAAImG,GAAkB,KACtB,IAAGF,GAAUG,UAAU,CACtBH,EAAW,GAAI3L,IAAApK,OACfiW,GAAQ,KAET,GAAIE,GAAwBzS,KAAK8P,eAAejB,iBAChD,IAAI6D,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,GAAkB,CACtB,IAAIC,EACJ,IAAIC,EACJ,IAAIC,GAAkBC,EAAiBC,EAAgBC,CACvD,KAAK,GAAI1X,GAAW,EAAGA,EAAI+W,IAAkB/W,EAAG,CAC/CiX,EAAkB3S,KAAKoS,aAKvB,IAAIpS,KAAKqK,QAAQ8H,GAAS/F,MAAM,UAAcuG,GAAiB,eAAgB,CAC9EA,EAAgB,YAGjBC,EAAiBP,EAASgB,eAAeV,EACzCC,GAAeU,iBAAiBtT,KAAK8P,eAAejB,kBACpD+D,GAAeW,qBAAqBvT,KAAK8P,eAAejB,kBACxD+D,GAAeY,OAAOxT,KAAK8P,eAAe2D,WAC1Cb,GAAec,QAAQ1T,KAAK8P,eAAe2D,WAE3Cf,GAAsB1S,KAAK8P,eAAejB,iBAC1C,KAAK,GAAI8E,GAAW,EAAGA,EAAIjB,IAAuBiB,EAAG,CAEpDd,EAAkB7S,KAAK8P,eAAejB,iBACtC,IAAI+E,GAAW5T,KAAK8P,eAAe2D,WACnCV,GAAS/S,KAAK8P,eAAejB,iBAC7BmE,GAAShT,KAAK8P,eAAeD,SAAWkD,CAGxC,OAAO/S,KAAK8P,eAAeD,SAAWmD,EAAQ,CAE7CE,EAAWlT,KAAK8P,eAAehB,kBAC/BmE,GAAYjT,KAAK8P,eAAehB,kBAChCqE,GAAUnT,KAAK8P,eAAejB,iBAC9BuE,GAAUpT,KAAK8P,eAAeD,SAAWsD,CAEzC,IAAID,GAAY,EAAG,CAClB,GAAIW,GAAwB,GAAIxT,MAChC,KAAI,GAAIyT,GAAa,EAAG9T,KAAK8P,eAAeD,SAAWuD,EAASU,IAC/DD,EAAQC,GAAO9T,KAAK8P,eAAeiE,wBAC9B,IAAIb,GAAY,GAAI,CAC1BJ,EAAa,EACb,IAAIkB,GAAsB,GAAItR,GAAApG,QAAU6W,EACxCnT,MAAK8P,eAAeC,UAAUiE,EAAW,EAAGb,OACtC,IAAID,GAAY,GAAI,CAC1BJ,EAAa,EACb,IAAIkB,GAAsB,GAAItR,GAAApG,QAAU6W,EACxCnT,MAAK8P,eAAeC,UAAUiE,EAAW,EAAGb,OACtC,IAAID,GAAY,GAAI,CAC1BJ,EAAa,EACb,IAAIkB,GAAsB,GAAItR,GAAApG,QAAU6W,EACxCnT,MAAK8P,eAAeC,UAAUiE,EAAW,EAAGb,OACtC,CACNnT,KAAK8P,eAAeD,SAAWuD,GAGjC,GAAGY,EAAW,CACb,GAAIC,GAAgC,GAAIxS,GAAAnF,QAAiBwW,EAAYK,EAAUL,EAC/EmB,GAAaC,WAAa,GAAIC,YAAyBH,EAAUI,WAEjE,IAAIC,GAAkC,GAAIxR,GAAAvG,QAAiB2X,EAE3DI,GAAeC,aAAa,GAAI3S,GAAArF,QAAiB2X,GACjD,IAAInB,GAAc,GACjBuB,EAAeE,oBAAoB,SAAU,GAAI7S,GAAApF,QAAiB2X,QAC9D,IAAGnB,GAAc,GACrBuB,EAAeE,oBAAoB,SAAU,GAAI3S,GAAAtF,QAAgB2X,EAAc,OAGhF,IAAInB,GAAc,GACjBuB,EAAeG,OAAO,GAAI7S,GAAArF,QAAiB2X,GAE5CrB,GAAe6B,QAAQ5B,EAAgBjH,WAAYyI,EAAgBT,KAKtE5T,KAAK0U,gBAAgB,KACrB1U,MAAK2U,qBACL,IAAGpC,EAAS,CACXvS,KAAKmM,gBAAwBkG,EAAUjG,GAGxCpM,KAAKqK,QAAQ8H,GAAS7H,KAAO+H,CAE7B,IAAIrS,KAAKqH,OACRgF,QAAQC,IAAI,0BAA4BF,GAelC/P,GAAAoE,UAAA+P,gBAAR,SAAwB2B,GAEvB,GAAI/F,GAAcpM,KAAKoS,aACvBpS,MAAKqK,QAAQ8H,GAAS/F,KAAOA,CAE7B,IAAIwI,GAAmB5U,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAC3E,IAAIqI,GAAyB3S,KAAKoS,aAElC,IAAIyC,GAA2B,GAAIlO,IAAArK,OACnCuY,GAAcC,UAAYF,EAAKxI,IAE/B,IAAI2I,GAAiCH,EAAKvB,eAAeV,EACzD,IAAIoC,GAAY,KAAM,CACrBF,EAAcG,WAAarC,CAC3BkC,GAAcE,WAAaA,EAG5B,GAAIE,GAAoCjV,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAC5F2K,GAAIC,UAAY,IAChBD,GAAIE,OAAS,IACb,IAAIC,GAAuBpV,KAAK8P,eAAehB,kBAC/C,IAAIuG,KACJ,KAAI,GAAIC,GAAe,EAAGA,EAAQF,EAAeE,IAChDD,EAAUC,GAAStV,KAAK8P,eAAe2D,WAExCoB,GAAcQ,UAAYA,CAC1B,IAAIE,GAA6BvV,KAAK0U,gBAAgBrY,EAAUmZ,qBAEhEX,GAAcY,KAAOF,EAAaG,IAAI,EAAE,GACxCb,GAAcc,cAAgBJ,EAAaG,IAAI,EAAE,EAEjDb,GAAce,QAAUL,EAAaG,IAAI,EAAE,KAE3C,IAAIG,GAAsBN,EAAaG,IAAI,EAAE,EAC7C,IAAGG,GAAc,EAAE,CAClBhB,EAAciB,MAAM,YAEhB,IAAGD,GAAc,EAAE,CACvBhB,EAAciB,MAAM,SAErBjB,EAAckB,OAASR,EAAaG,IAAI,EAAE,EAC1Cb,GAAcmB,WAAaT,EAAaG,IAAI,EAAE,EAC9Cb,GAAcoB,YAAcV,EAAaG,IAAI,EAAE,EAC/Cb,GAAcqB,QAAUX,EAAaG,IAAI,GAAG,EAC5Cb,GAAcsB,SAAWlB,CACzBjV,MAAK2U,qBAGL3U,MAAKmM,gBAAyB0I,EAAezI,EAC7CpM,MAAKqK,QAAQ8H,GAAS7H,KAAOuK,CAE7B,IAAI7U,KAAKqH,OACRgF,QAAQC,IAAI,gCAAkCF,EAAO,UAAUwI,EAAKxI,MAe9D/P,GAAAoE,UAAA6P,eAAR,SAAuB6B,EAAgBlC,GAEtC,GAAI7D,GAAcpM,KAAKoS,aACvBpS,MAAKqK,QAAQ8H,GAAS/F,KAAOA,CACvB,IAAIgK,GAAenG,EAAQoG,iBACjC,IAAIC,GAAuBtW,KAAK8P,eAAehB,kBAE/CsH,GAAanW,KAAO5D,EAAUka,eAAeD,EAE7C,IAAGA,GAAmB,EACrBF,EAAaI,kBAAoB,IAGlCJ,GAAaK,UAAYC,KAAKC,IAAI3W,KAAK8P,eAAe2D,YACtD2C,GAAaQ,WAAaF,KAAKC,IAAI3W,KAAK8P,eAAe2D,YACvD,IAAIoD,GAAwB7W,KAAK8P,eAAejB,iBAChD,IAAIiI,GAAuB,EAE3B,KAAI,GAAIC,GAAe,EAAGA,EAAQF,EAAgBE,IAAU,CAE3D,GAAIC,GAAsBhX,KAAK8P,eAAejB,iBAE9C,KAAI,GAAIoI,GAAmB,EAAGA,EAAYD,EAAcC,IAAe,CACtE,GAAIC,GAAsClX,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAC9F,IAAI6M,GAAanX,KAAK8P,eAAejB,iBAErC,IAAIsI,EAAa,EAAG,CACnB,GAAIC,GAAkBpX,KAAK8P,eAAeuH,aAAaF,EAEvDL,IAAiBM,IAMpBhB,EAAakB,WAAWJ,CACxBd,GAAamB,KAAKT,CAIlB,IAAIU,GAAsBxX,KAAK0U,gBAAgBrY,EAAUob,oBACzDrB,GAAasB,WAAaF,EAAM9B,IAAI,EAAG,MACvCU,GAAauB,OAAUH,EAAM9B,IAAI,EAAG,MAMpCU,GAAawB,MAAQ5X,KAAK2U,qBAG1B3U,MAAKmM,gBAAyBiK,EAAchK,EAC5CpM,MAAKqK,QAAQ8H,GAAS7H,KAAO8L,CAE7B,IAAIpW,KAAKqH,OACRgF,QAAQC,IAAI,+BAAiCF,EAAO,aAAe0K,GAI7Dza,GAAAoE,UAAA0P,2BAAR,SAAmCgC,GAGlC,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAI6C,GAAoCjV,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAC5F2K,GAAIC,UAAU,IACd,IAAI2C,GAAsB,GAAI3U,GAAA5G,QAAU2Y,EAGxCjV,MAAK0U,gBAAgB,KAErBmD,GAAUD,MAAQ5X,KAAK2U,qBAEvB3U,MAAKmM,gBAAyB0L,EAAWzL,EAEzCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOuN,CAE7B,IAAI7X,KAAKqH,OACRgF,QAAQC,IAAI,uCAAyCF,EAAO,qBAAuB6I,EAAI7I,MAGjF/P,GAAAoE,UAAAyP,wBAAR,SAAgCiC,GAE/B,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAI0F,GAAiB9X,KAAK8P,eAAejB,iBACzC,IAAIkJ,GAA+B/X,KAAKqK,QAAQyN,GAASxN,IACzDtK,MAAKqK,QAAQ8H,GAAS6F,MAAQF,CAE9B,IAAIG,GAAuBjY,KAAK8P,eAAeiE,mBAC/C,IAAImE,GAAkC,GAAI7X,MAC1C,IAAI8X,GAA8B,GAAI9X,MACtC,IAAI4U,EACJ,KAAK,GAAImD,GAA0B,EAAGA,EAAmBH,EAAeG,IAAoB,CAC3FnD,EAAwBjV,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,MAAQlH,EAAA9G,QAAuB+b,oBAE3GpD,GAAIqD,cAAgB,IACpBrD,GAAIsD,kBAAoB,IACxBL,GAAUE,GAAoBnD,CAC9BkD,GAAcC,GAAoBnD,EAAI7I,KAGvC,GAAIqC,GAAgBC,YAAYC,KAChC,IAAI6J,GAAgB,GAAIvV,GAAA3G,OACxByb,GAASU,OAAOD,EAAOT,SACvB,IAAI9F,GAAavD,YAAYC,KAC7B,IAAIuD,GAAaD,EAAaxD,CAC9BzO,MAAK4H,sBAAwBsK,CAE7B,IAAIgG,EAAUjc,QAAU,GAAKuc,EAAOT,SAASW,OAAS,EAAG,CACxDF,EAAOrC,SAAW+B,EAAU,OACtB,IAAIA,EAAUjc,OAAS,EAAG,CAGhC,IAAK,GAAIP,GAAW,EAAGA,EAAI8c,EAAOT,SAASW,MAAOhd,IACjD8c,EAAOT,SAASY,aAAajd,GAAGya,SAAW+B,EAAUxB,KAAKkC,IAAIV,EAAUjc,OAAS,EAAGP,IAGtF,GAAIgd,GAAe1Y,KAAK8P,eAAeiE,mBAIvC,KAAK,GAAIrY,GAAW,EAAGA,EAAIgd,EAAOhd,IAAK,CACtC,GAAIuE,GAAcD,KAAK8P,eAAehB,kBAEtC,IAAI+J,GAAoB,GAAI9W,GAAAzF,OAC5B,IAAIwc,GAAkBN,EAAOT,SAASY,aAAajd,EACnD,IAAGod,EAAS,CACXA,EAAQC,MAAQ,GAAIjS,IAAAxK,OACpBwc,GAAQC,MAAMC,aAAaH,EAASC,EAAQ3C,SAAS8C,aAAa,IAEnE,GAAIhZ,GAAQ,EAAG,CACd,GAAIiZ,GAAUlZ,KAAK8P,eAAe2D,WAClC,IAAI0F,GAAUnZ,KAAK8P,eAAe2D,WAClC,IAAGqF,EAAS,CACXA,EAAQ3C,SAASiD,WAAa,IAC9BN,GAAQC,MAAMM,SAAW,GAAItS,IAAAzK,QAAO,EAAG,EAAG,EAAG,EAAG4c,EAAIC,QAGjD,IAAIlZ,GAAQ,EAAG,CACnB,GAAIqZ,GAAuBtZ,KAAKuZ,sBAChC,IAAGT,EAAS,CACXA,EAAQ3C,SAASiD,WAAa,IAC9BN,GAAQC,MAAMM,SAAW,GAAItS,IAAAzK,QAAOgd,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,SAG/F,IAAIrZ,GAAQ,EAAG,CACnB,GAAIuZ,GAAmB,GAAIzS,IAAAzK,QAAO0D,KAAK8P,eAAe2D,YAAazT,KAAK8P,eAAe2D,YAAa,EAAG,EAAGzT,KAAK8P,eAAe2D,YAAazT,KAAK8P,eAAe2D,YAC/J,IAAGqF,EAAS,CACXA,EAAQ3C,SAASiD,WAAa,IAC9BN,GAAQC,MAAMM,SAAWG,OAGrB,IAAIvZ,GAAQ,EAAG,CACnB,GAAIwZ,GAAWzZ,KAAK8P,eAAe2D,WACnC,IAAIiG,GAAW1Z,KAAK8P,eAAe2D,WACnC,IAAI/G,GAAe1M,KAAK8P,eAAe2D,WACvC,IAAIkG,GAAgB3Z,KAAK8P,eAAe2D,WACxC,IAAI6F,GAAuBtZ,KAAKuZ,sBAChC,IAAGT,EAAS,CACXD,EAAQe,UAAY,GAAI/S,IAAAvK,QAAUmd,EAAGC,EAAGhN,EAAOiN,EAC/Cb,GAAQ3C,SAASyD,UAAY,IAC7Bd,GAAQ3C,SAASiD,WAAa,IAC9BN,GAAQC,MAAMM,SAAW,GAAItS,IAAAzK,QAAOgd,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAGrG,GAAGR,EAAS,CAEX,GAAIA,EAAQe,SAASC,mBAAmB,UACvChB,EAAQ3C,SAAShB,OAAS,KAG5BnV,KAAK8P,eAAejB,kBAGrB7O,KAAK0U,gBAAgB,KACrB8D,GAAOZ,MAAQ5X,KAAK2U,qBAEpB3U,MAAKmM,gBAAyBqM,EAAQpM,EAEtCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOkO,CAE7B,IAAIxY,KAAKqH,OACRgF,QAAQC,IAAI,oCAAsCF,EAAO,qBAAuB2L,EAAS3L,KAAO,uBAAyBoM,EAAOT,SAASW,MAAQ,kBAAoBP,GAG/J9b,GAAAoE,UAAA2P,gBAAR,SAAwB+B,EAAgBlC,GAIvCjQ,KAAKqK,QAAQ8H,GAAS/F,KAAOpM,KAAKoS,aAElC,IAAInS,GAAcD,KAAK8P,eAAehB,kBACtC,IAAIiL,EAGJ,IAAI9Z,GAAQ,EAAG,CACd8Z,EAAW/Z,KAAK8P,eAAejB,iBAC/B,IAAImL,EACJA,GAAMha,KAAK8P,eAAeuH,aAAa0C,EAEvC/Z,MAAKia,gBAAgBja,KAAK4O,cAAchD,WAAY,GAAIxJ,GAAA9F,QAAW0d,GAAM,MAAO,KAAM,UAChF,CAEND,EAAW/Z,KAAK8P,eAAejB,iBAE/B,IAAIvE,GAAiB,GAAI5H,GAAApG,QAAUyd,EACnC/Z,MAAK8P,eAAeC,UAAUzF,EAAM,EAAGyP,EAIvC/Z,MAAKia,gBAAgBja,KAAK4O,cAAchD,WAAY,KAAM,MAAOtB,EAAM,MAIxEtK,KAAK0U,gBAAgB,KACrB1U,MAAKqK,QAAQ8H,GAAS+H,OAASla,KAAK2U,qBACpC3U,MAAKma,gCAGL,IAAIna,KAAKqH,OACRgF,QAAQC,IAAI,oBAAsB,WAAY,SAASrM,GAAQ,eAQzD5D,GAAAoE,UAAA4P,eAAR,SAAuB8B,EAAgBlC,GAEtC,GAAIvU,EACJ,IAAIiY,EACJ,IAAIyG,EACJ,IAAIC,GAAwB,GAAI7T,IAAAlK,OAChC,IAAIge,GAASrK,EAAQsK,gBAAgBF,EACrC,IAAIjO,GAAOpM,KAAKoS,aAYhB,IAAIoI,GAA8Bxa,KAAK8P,eAAeiE,mBACtD,KAAKrY,EAAI,EAAGA,EAAI8e,EAAsB9e,IAAK,CAC1C0e,EAA4Bpa,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAChF,IAAI8P,GAAa,KAAM,CACtBC,EAAaI,uBAAuBL,OAC9B,CAGN/N,QAAQC,IAAI,+CAId,GAAIoO,GAAmCF,CAEvC,IAAIG,GAAuC3a,KAAK8P,eAAeiE,mBAC/D,KAAKrY,EAAI,EAAGA,EAAIif,EAAsCjf,IAAK,CAC1D0e,EAA4Bpa,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAChF,IAAIsQ,GAAuB5a,KAAK8P,eAAeiE,mBAC/C2G,IAA6BE,CAC7B,IAAIR,GAAa,KAAM,CACtB,IAAKzG,EAAI,EAAGA,EAAIiH,EAAejH,IAC9B0G,EAAaI,uBAAuBL,OAC/B,CACN,IAAKzG,EAAI,EAAGA,EAAIiH,EAAejH,IAAK,CAGnCtH,QAAQC,IAAI,gDAKf,GAAItM,KAAKqH,OACRgF,QAAQC,IAAI,WAAakO,EAAuBG,GAAwC,2CAA6CD,EAA4B,cAGlK,IAAIG,GAAuB7a,KAAK8P,eAAeiE,mBAG/C,IAAI+G,GAAU9a,KAAK8P,eAAehB,kBAClC,IAAIqE,GAAU,CACd,IAAI4H,GAAgB,CACpB,IAAI7H,GAAS,CACb,IAAI8H,GAAY,CAChB,KAAItf,EAAE,EAAGA,EAAEof,EAAQpf,IAAI,CAGtB,GAAGsf,EAAY,EACd9H,EAAS8H,MAET9H,GAAWlT,KAAK8P,eAAehB,kBAEhCiM,GAAgB/a,KAAK8P,eAAehB,kBAEpCqE,GAAUnT,KAAK8P,eAAejB,iBAC9B,IAAGsE,EAAQ,EAAG,CACb,GAAI8H,GAAyC,GAAIvY,GAAApG,QAAU6W,EAC3DnT,MAAK8P,eAAeC,UAAUkL,EAA8B,EAAG9H,EAC/D,IAAI+H,EAEJ,QAAQH,GACP,IAAK,GACJG,EAAa,GAAI/G,YAAyB8G,EAA6B7G,WACvE,MACD,KAAK,GACJ8G,EAAa,GAAIC,aAA0BF,EAA6B7G,WACxE,MACD,KAAK,GACJ8G,EAAa,GAAIE,aAA0BH,EAA6B7G,WACxE,OAEF,OAAQlB,GACP,IAAK,GACJmH,EAAagB,mBAAqBH,CAClCb,GAAaiB,aAAanI,EAAU4H,CACpC,MACD,KAAK,GACJV,EAAakB,sBAAwBL,CACrC,MACD,KAAK,GACJb,EAAamB,aAAeN,CAC5B,MACD,KAAK,GACJb,EAAaoB,sBAAwBP,CACrC,MACD,KAAK,GACJb,EAAaqB,qBAAuBR,CACpC,MACD,KAAK,GACJb,EAAasB,iBAAmBT,CAChC,MACD,KAAK,GACJb,EAAauB,oBAAsBV,CACnC,MACD,KAAK,GACJb,EAAawB,oBAAsBX,CACnC,MACD,KAAK,GACJb,EAAayB,kCAAoCZ,CACjD,MACD,KAAK,GACJb,EAAa0B,iCAAmCb,CAChD,MACD,KAAK,IACJb,EAAa2B,qBAAuBd,CACpC,MACD,KAAK,IACJb,EAAa4B,sBAAwBf,CACrC,MACD,KAAK,IACJb,EAAa6B,sBAAwBhB,CACrC,QAGHF,IAED,GAAImB,GAAU,CACd,IAAIC,EACJtB,GAAU9a,KAAK8P,eAAehB,kBAC9B,KAAIpT,EAAE,EAAGA,EAAEof,EAAQpf,IAAI,CACtBwX,EAAWlT,KAAK8P,eAAehB,kBAC/BqE,GAAUnT,KAAK8P,eAAejB,iBAC9B,QAAOqE,GACN,IAAK,GACJkJ,EAAmB,GAAI1Z,GAAApG,QAAU6W,EACjCnT,MAAK8P,eAAeC,UAAUqM,EAAkB,EAAGjJ,EACnDkH,GAAagC,oCAAoC,GAAIC,cAA2BF,EAAiBhI,WACjG,MACD,KAAK,GACJgI,EAAmB,GAAI1Z,GAAApG,QAAU6W,EACjCnT,MAAK8P,eAAeC,UAAUqM,EAAkB,EAAGjJ,EACnDkH,GAAakC,8BAA8B,GAAID,cAA2BF,EAAiBhI,WAC3F,MACD,KAAK,GACJgI,EAAmB,GAAI1Z,GAAApG,QAAU6W,EACjCnT,MAAK8P,eAAeC,UAAUqM,EAAkB,EAAGjJ,EACnDkH,GAAamC,8BAA8B,GAAIF,cAA2BF,EAAiBhI,WAC3F,MACD,KAAK,GACJgI,EAAmB,GAAI1Z,GAAApG,QAAU6W,EACjCnT,MAAK8P,eAAeC,UAAUqM,EAAkB,EAAGjJ,EACnDkH,GAAaoC,yBAAyB,GAAIH,cAA2BF,EAAiBhI,WACtF,MACD,KAAK,GACJjB,EAAUnT,KAAK8P,eAAeiE,mBAE9B,KAAKoI,EAAK,EAAGA,EAAKhJ,EAASgJ,IAAM,CAChC9B,EAAaqC,QAAQ1c,KAAKoS,eAAiBpS,KAAK8P,eAAeiE,oBAEhE,KACD,KAAK,GACJZ,EAAUnT,KAAK8P,eAAeiE,mBAC9B,IAAI4I,KACJ,KAAKR,EAAK,EAAGA,EAAKhJ,EAASgJ,IAAM,CAChCQ,EAAmB3b,KAAKhB,KAAK8P,eAAeuH,aAAarX,KAAK8P,eAAeiE,sBAE9EsG,EAAauC,0BAA4BD,CACzC,MACD,KAAK,GACJxJ,EAAUnT,KAAK8P,eAAeiE,mBAC9B,KAAKoI,EAAK,EAAGA,EAAKhJ,EAASgJ,IAAM,CAChC,GAAIU,GAAY7c,KAAK8P,eAAeiE,mBACpC,IAAI+I,GAAY9c,KAAK8P,eAAejB,iBAEpCwL,GAAa0C,gBAAgB/c,KAAK8P,eAAeuH,aAAayF,GAAcD,GAE7E,OAGHxC,EAAa2C,MAEb,IAAIC,GAAiB,CACrB,IAAIC,GAAa,EACjBld,MAAK0U,gBAAgBrY,EAAU8gB,oBAC/Bnd,MAAK2U,qBACL3U,MAAKmM,gBAAwBmO,EAAQlO,EAErCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOgQ,CAE7B,IAAIta,KAAKqH,OACRgF,QAAQC,IAAI,6BAA+BF,EAAO,eAAiB6Q,EAAU,iBAAmB3C,EAAO8C,SAASC,WAY1GhhB,GAAAoE,UAAA6Q,cAAR,SAAsBa,GAErB,GAAI4F,GAAoB,GAAInV,GAAAtG,OAG5B,IAAI8P,GAAcpM,KAAKoS,aACvB,IAAIkL,GAAqBtd,KAAK8P,eAAeiE,mBAG7C,IAAIyD,GAAsBxX,KAAK0U,gBAAgBrY,EAAUkhB,mBACzD,IAAIC,GAAmBhG,EAAM9B,IAAI,EAAG,EACpC,IAAI+H,GAAmBjG,EAAM9B,IAAI,EAAG,EAIpC,KAAK,GAAIgI,GAAyB,EAAIA,EAAkBJ,EAAaI,IAAmB,CACvF,GAAIC,GAA0B,KAC9B,IAAI7K,GAAkB,CACtB,IAAIC,GAAeC,CACnB,IAAI4K,EACJ,IAAIC,EAEJ9K,GAAS/S,KAAK8P,eAAejB,iBAC7BmE,GAAShT,KAAK8P,eAAeD,SAAWkD,CAExC,IAAI+K,GAA8B9d,KAAK0U,gBAAgBrY,EAAU0hB,mBAEjE,OAAO/d,KAAK8P,eAAeD,SAAWmD,EAAQ,CAC7C,GAAIc,GAAa,CACjB,IAAIb,GAAkBC,EAAiBC,EAAgBC,CAGvDF,GAAWlT,KAAK8P,eAAehB,kBAC/BmE,GAAYjT,KAAK8P,eAAehB,kBAChCqE,GAAUnT,KAAK8P,eAAejB,iBAC9BuE,GAAUpT,KAAK8P,eAAeD,SAAWsD,CAEzC,IAAIsG,GAAUC,EAAUsE,CAExB,IAAI9K,GAAY,EAAG,CAClB,GAAI+K,GAAsB,GAAI5d,MAE9B,OAAOL,KAAK8P,eAAeD,SAAWuD,EAAS,CAE9CqG,EAAIzZ,KAAKke,WAAWle,KAAKwP,aACzBkK,GAAI1Z,KAAKke,WAAWle,KAAKwP,aACzBwO,GAAIhe,KAAKke,WAAWle,KAAKwP,aAEzByO,GAAMnK,KAAS2F,CACfwE,GAAMnK,KAAS4F,CACfuE,GAAMnK,KAASkK,OAEV,IAAI9K,GAAY,EAAG,CACzB,GAAIW,GAAwB,GAAIxT,MAChC,OAAOL,KAAK8P,eAAeD,SAAWuD,EACrCS,EAAQC,KAAS9T,KAAK8P,eAAeiE,wBAEhC,IAAIb,GAAY,EAAG,CACzB,GAAIiL,GAAoB,GAAI9d,MAC5B,OAAOL,KAAK8P,eAAeD,SAAWuD,EACrC+K,EAAIrK,KAAS9T,KAAKke,WAAWle,KAAKwP,kBAC7B,IAAI0D,GAAY,EAAG,CACzB,GAAIkL,GAAwB,GAAI/d,MAChC,OAAOL,KAAK8P,eAAeD,SAAWuD,EACrCgL,EAAQtK,KAAS9T,KAAKke,WAAWle,KAAKwP,kBACjC,IAAI0D,GAAY,EAAG,CACzB0K,EAAYvd,OACZ,OAAOL,KAAK8P,eAAeD,SAAWuD,EACrCwK,EAAU9J,KAAS9T,KAAK8P,eAAeiE,oBAAoB,MACtD,IAAIb,GAAY,EAAG,CACzB2K,EAAU,GAAIxd,MACd,OAAOL,KAAK8P,eAAeD,SAAWuD,EACrCyK,EAAQ/J,KAAS9T,KAAKke,WAAWle,KAAKwP,kBACjC,IAAI0D,GAAY,EAAG,CACzBlT,KAAK8P,eAAeD,SAAWuD,MACzB,IAAIF,GAAY,EAAG,CACzBlT,KAAK8P,eAAeD,SAAWuD,MACzB,IAAIF,GAAY,GAAI,CAC1ByK,EAAoB,IACpB7K,GAAa,EACb,IAAIkB,GAAsB,GAAItR,GAAApG,QAAU6W,EACxCnT,MAAK8P,eAAeC,UAAUiE,EAAW,EAAGb,OACtC,IAAID,GAAY,GAAI,CAC1ByK,EAAoB,IACpB7K,GAAa,EACb,IAAIkB,GAAsB,GAAItR,GAAApG,QAAU6W,EACxCnT,MAAK8P,eAAeC,UAAUiE,EAAW,EAAGb,OACtC,IAAID,GAAY,GAAI,CAC1ByK,EAAoB,IACpB7K,GAAa,EACb,IAAIkB,GAAsB,GAAItR,GAAApG,QAAU6W,EACxCnT,MAAK8P,eAAeC,UAAUiE,EAAW,EAAGb,OACvC,CACLnT,KAAK8P,eAAeD,SAAWuD,GAIjCpT,KAAK2U,qBAEL,IAAGgJ,EAAkB,CACpB,GAAI1J,GAAgC,GAAIxS,GAAAnF,QAAiBwW,EAAYK,EAAQL,EAC7EmB,GAAaC,WAAa,GAAIC,YAAyBH,EAAUI,WAEjE,IAAIC,GAAkC,GAAIxR,GAAAvG,QAAiB2X,EAE3DI,GAAeC,aAAa,GAAI3S,GAAArF,QAAiB2X,GACjD,IAAGnB,GAAY,GAAG,CACjBuB,EAAeE,oBAAoB,SAAU,GAAI7S,GAAApF,QAAiB2X,QAE9D,IAAGnB,GAAY,GAAG,CACtBuB,EAAeE,oBAAoB,SAAU,GAAI3S,GAAAtF,QAAgB2X,EAAc,QAGhF,GAAGnB,GAAY,GACduB,EAAeG,OAAO,GAAI7S,GAAArF,QAAiB2X,GAE5C8D,GAASsG,WAAWhK,EAEpB,IAAIrU,KAAKqH,OACRgF,QAAQC,IAAI,6CAEP,CACN,GAAIgS,GAAoB,GAAIzb,GAAAvG,QAAiB,GAAImF,GAAAnF,QAEjD,IAAIuhB,EACHS,EAAkBC,gBAAkBV,EAAQ5hB,QAAUgiB,EAAMhiB,OAAS,EAEtE,IAAImiB,EACHE,EAAkBE,kBAAoB,KAEvCF,GAAkBG,mBAAqB,IAEvCH,GAAkBI,WAAW7K,EAC7ByK,GAAkBhK,aAAa2J,EAC/BK,GAAkBK,WAAWP,EAC7BE,GAAkB9J,OAAO2J,EACzBG,GAAkBM,gBAAgBf,EAClCS,GAAkBO,gBAAgBjB,EAElC,IAAIkB,GAAgBhB,EAAcpI,IAAI,EAAG,EACzC,IAAIqJ,GAAgBjB,EAAcpI,IAAI,EAAG,EACzC,IAAIsJ,GAAoB,KAExB,IAAKxB,GAAasB,GAAYrB,GAAasB,EAAS,CACnDC,EAAY,IACZF,GAAStB,EAAYsB,CACrBC,GAAStB,EAAYsB,EAGtB,GAAIC,EACHV,EAAkBW,QAAQH,EAAQC,EAEnChH,GAASsG,WAAWC,EACpB,IAAIte,KAAKqH,OACRgF,QAAQC,IAAI,8BAQf,GAAKkR,GAAa,GAAOC,GAAa,EACrC1F,EAASkH,QAAQzB,EAAWC,EAC7Bzd,MAAK2U,qBACL3U,MAAKmM,gBAAyB4L,EAAU3L,EACxCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOyN,CAE7B,IAAI/X,KAAKqH,OACRgF,QAAQC,IAAI,2BAA6BF,GAoBnC/P,GAAAoE,UAAAgQ,eAAR,SAAuB0B,GAEtB,GAAI/F,EACJ,IAAI8S,EACJ,IAAIC,EACJ,IAAIzB,EACJ,IAAIlG,EACJ,IAAI4H,EAGJhT,GAAOpM,KAAKoS,aACZ+M,GAAWnf,KAAK8P,eAAehB,kBAC/B0I,GAAQxX,KAAK0U,gBAAgBrY,EAAUgjB,oBAGvC,QAAQF,GACP,IAAK,GACJD,EAAS,GAAIrb,GAAAvH,QAAqB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,MAAO8B,EAAM9B,IAAI,IAAK,OACpL,MAED,KAAK,GACJwJ,EAAS,GAAIvb,GAAArH,QAAoB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,MACrM,MAED,KAAK,GACJwJ,EAAS,GAAIpb,GAAAxH,QAAsB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,MAC3I,MAED,KAAK,GACJwJ,EAAS,GAAItb,GAAAtH,QAAwB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,GAAI,KAAM,KAAM,KAClL,KAAK8B,EAAM9B,IAAI,IAAK,MACOwJ,EAAQK,UAAY,KAC/C,KAAK/H,EAAM9B,IAAI,IAAK,MACOwJ,EAAQM,aAAe,KAClD,KAAKhI,EAAM9B,IAAI,IAAK,MACOwJ,EAAQO,IAAM,KAEzC,MAED,KAAK,GACJP,EAAS,GAAIxb,GAAApH,QAAoB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,MAAO8B,EAAM9B,IAAI,IAAK;AACnL,KAED,KAAK,GACJwJ,EAAS,GAAIzb,GAAAnH,QAAuB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,MACjK,MAED,KAAK,GACJwJ,EAAS,GAAInb,GAAAzH,QAAqB,KAAM2K,GAAA3K,QAAagjB,SAAU9H,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,IAAK8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,MAC7J,MAED,SACCwJ,EAAS,GAAI1b,GAAAlH,OACb+P,SAAQC,IAAI,iCACZ,OAGF,GAAKkL,EAAM9B,IAAI,IAAK,IAAM,GAAO8B,EAAM9B,IAAI,IAAK,IAAM,EAAI,EAK1D1V,KAAK2U,qBACLuK,GAAO9S,KAAOA,CACdpM,MAAKmM,gBAAgB+S,EAAQ9S,EAC7BpM,MAAKqK,QAAQ8H,GAAS7H,KAAO4U,CAE7B,IAAIlf,KAAKqH,OAAQ,CAChB,GAAK8X,EAAW,GAAOA,EAAW,EACjCA,EAAW,CAEZ9S,SAAQC,IAAI,8BAAgCF,EAAO,YAAc/P,EAAUqjB,eAAeP,KAWpF9iB,GAAAoE,UAAA8Q,eAAR,SAAuBY,GAEtB,GAAI/F,EACJ,IAAIuT,EACJ,IAAIC,EACJ,IAAIC,GAAyD7f,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAEjHqV,GAAM3f,KAAK8f,eACX1T,GAAOpM,KAAKoS,aAEZ,IAAI2N,GAAoB,iBACxBH,GAAM,GAAIjd,GAAArG,OACVsjB,GAAII,UAAUC,SAAWN,CAEzB,IAAIE,EAAQ,CACXA,EAAOK,SAASN,EAChBG,GAAaF,EAAOzT,SACd,CAEoBpM,KAAKmO,UAAW+R,SAASN,GAIpD,GAAK5f,KAAKuL,SAAS,IAAM,GAAOvL,KAAKuL,SAAS,IAAM,EAAI,CACvD,GAAIiM,GAAsBxX,KAAK0U,gBAAgBrY,EAAU8jB,oBACzDP,GAAIQ,MAAQ,GAAIle,GAAA5F,QAASkb,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,QAClE,CACN1V,KAAK0U,gBAAgB,MAItBkL,EAAIhI,MAAQ5X,KAAK2U,qBAEjB3U,MAAKmM,gBAAyByT,EAAKxT,EACnCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOsV,CAE7B,IAAI5f,KAAKqH,OACRgF,QAAQC,IAAI,+BAAiCF,EAAO,qBAAuB2T,GAWrE1jB,GAAAoE,UAAA+Q,oBAAR,SAA4BW,GAE3B,GAAI0N,GAAyD7f,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACjH,IAAIqV,GAAe3f,KAAK8f,eACxB,IAAI1T,GAAcpM,KAAKoS,aAEvB,IAAI0F,GAAiB9X,KAAK8P,eAAejB,iBACzC,IAAI7B,GAAwBhN,KAAKqK,QAAQyN,GAASxN,IAClD,IAAIyN,EACJ,IAAImH,EACJ,IAAImB,GAAiB,KACrB,IAAIrT,EAAMsT,QAAQ1d,EAAAtG,SAAW,CAC5Byb,EAAsB/K,MAChB,CACNqT,EAAW,IACXnB,GAAsBlS,EAGvBhN,KAAKqK,QAAQ8H,GAAS6F,MAAQF,CAC9B,IAAIG,GAAuBjY,KAAK8P,eAAeiE,mBAC/C,IAAImE,GAAkC,GAAI7X,MAC1C,IAAI8X,GAA8B,GAAI9X,MACtC,IAAI4U,EACJ,KAAK,GAAImD,GAA0B,EAAGA,EAAmBH,EAAeG,IAAoB,CAC3FnD,EAAwBjV,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,MAAQlH,EAAA9G,QAAuB+b,oBAC3GH,GAAUE,GAAoBnD,CAC9BkD,GAAcC,GAAoBnD,EAAI7I,KAGvC,GAAIoM,EAEJ,IAAI6H,EAAU,CACb7H,EAAkB0G,EAAOqB,mBACnB,CACN/H,EAAS,GAAIvV,GAAA3G,OACbyb,GAASU,OAAOD,EAAOT,UAGxBS,EAAOwH,UAAUC,SAAWN,CAE5B,IAAII,GAAoB,iBACxB,IAAIF,EAAQ,CACXA,EAAOK,SAAS1H,EAChBuH,GAAaF,EAAOzT,SACd,CAEoBpM,KAAKmO,UAAW+R,SAAS1H,GAGpD,GAAIN,EAAUjc,QAAU,GAAKuc,EAAOT,SAASW,OAAS,EAAG,CACxDF,EAAOrC,SAAW+B,EAAU,OACtB,IAAIA,EAAUjc,OAAS,EAAG,CAGhC,IAAK,GAAIP,GAAW,EAAGA,EAAI8c,EAAOT,SAASW,MAAOhd,IACjD8c,EAAOT,SAASY,aAAajd,GAAGya,SAAW+B,EAAUxB,KAAKkC,IAAIV,EAAUjc,OAAS,EAAGP,IAEtF,GAAKsE,KAAKuL,SAAS,IAAM,GAAOvL,KAAKuL,SAAS,IAAM,EAAI,CACvD,GAAIiM,GAAsBxX,KAAK0U,gBAAgBrY,EAAUmkB,yBACzDhI,GAAO4H,MAAQ,GAAIle,GAAA5F,QAASkb,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GAC3E8C,GAAOiI,aAAejJ,EAAM9B,IAAI,EAAG,UAC7B,CACN1V,KAAK0U,gBAAgB,MAGtB8D,EAAOZ,MAAQ5X,KAAK2U,qBAEpB3U,MAAKmM,gBAAyBqM,EAAQpM,EACtCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOkO,CAE7B,IAAIxY,KAAKqH,OAAQ,CAChB,GAAIgZ,EACHhU,QAAQC,IAAI,uCAAyCF,EAAO,qBAAuB2T,EAAa,mBAAqBb,EAAO9S,KAAO,uBAAyBoM,EAAOT,SAASW,MAAQ,kBAAoBP,OAExM9L,SAAQC,IAAI,yCAA2CF,EAAO,qBAAuB2T,EAAa,qBAAuBhI,EAAS3L,KAAO,uBAAyBoM,EAAOT,SAASW,MAAQ,kBAAoBP,IAMzM9b,GAAAoE,UAAAiQ,oBAAR,SAA4ByB,GAE3B,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAIpF,GAAe,GAAI7J,GAAA7G,OACvB,IAAIokB,GAAwB,GAAI1c,GAAA1H,QAAoC0D,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,MAAQlH,EAAA9G,QAAuBqkB,sBACvJ3T,GAAM4T,QAAUF,CAEhB1gB,MAAK0U,gBAAgB,KACrB1H,GAAM4K,MAAQ5X,KAAK2U,qBACnB3U,MAAKmM,gBAAgBa,EAAOZ,EAC5BpM,MAAKqK,QAAQ8H,GAAS7H,KAAO0C,CAC7B,IAAIhN,KAAKqH,OACRgF,QAAQC,IAAI,4BAA8BF,EAAO,0BAA4BsU,EAAItU,MAqB3E/P,GAAAoE,UAAAkQ,WAAR,SAAmBwB,GAElB,GAAI0O,EACJ,IAAIC,EAEJ,IAAIjB,GAAyD7f,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACjH,IAAIqV,GAAe3f,KAAK8f,eACxB,IAAI1T,GAAcpM,KAAKoS,aACvB,IAAI2O,GAAmB/gB,KAAK8P,eAAehB,kBAC3C,IAAI0I,GAAsBxX,KAAK0U,gBAAgBrY,EAAU2kB,gBACzD,IAAIC,GAA0BzJ,EAAM9B,IAAI,EAAG,EAC3C,IAAIwL,IAA4B,wBAAyB,aAAc,mBACvE,IAAIC,IAAmC,kBAAmB,0BAA2B,8BAA+B,sBAAuB,sBAE3I,IAAIJ,GAAa,EAAG,CACnBF,EAAQ,GAAI9d,GAAAzG,OAEEukB,GAAOO,OAAS5J,EAAM9B,IAAI,EAAG,IAC7BmL,GAAOQ,QAAU7J,EAAM9B,IAAI,EAAG,IAE5C,IAAIuL,EAAmB,EAAG,CACzB,GAAIA,GAAoB,EAAG,CAC1BH,EAAkB,GAAIxd,GAAAhH,SAIxBukB,EAAMb,UAAUC,SAAWN,EAG5B,GAAIoB,GAAa,EAAG,CACnBF,EAAQ,GAAI/d,GAAAxG,QAAiBkb,EAAM9B,IAAI,GAAI,GAAI8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,GAAI,GAEhF,IAAIuL,EAAmB,EAAG,CACzB,GAAIA,GAAoB,EAAG,CAC1BH,EAAkB,GAAIvd,GAAAjH,UAWzBukB,EAAMS,MAAQ9J,EAAM9B,IAAI,EAAG,SAC3BmL,GAAMU,SAAW/J,EAAM9B,IAAI,EAAG,EAC9BmL,GAAMW,QAAUhK,EAAM9B,IAAI,EAAG,EAC7BmL,GAAMY,aAAejK,EAAM9B,IAAI,EAAG,SAClCmL,GAAMa,QAAUlK,EAAM9B,IAAI,EAAG,EAG7B,IAAIoL,EAAiB,CACpB,GAAIA,YAA2Bxd,GAAAhH,QAAqB,CACnD,GAAIkb,EAAM9B,IAAI,GAAI,IAAM,EACvBoL,EAAgBa,aAAe3hB,KAAKsL,cAAckM,EAAM9B,IAAI,GAAI,QAC3D,CACN,GAAI8B,EAAM9B,IAAI,GAAI,IAAM,EACvBoL,EAAgBa,aAAe3hB,KAAKsL,cAAckM,EAAM9B,IAAI,GAAI,IAGlEmL,EAAMe,aAAed,CACrBD,GAAMJ,aAAe,KAGtB,GAAIV,GAAoB,iBACxB,IAAIF,EAAQ,CACXA,EAAOK,SAASW,EAChBd,GAAaF,EAAOzT,SACd,CAEoBpM,KAAKmO,UAAW+R,SAASW,GAGpD7gB,KAAK2U,qBACL3U,MAAKmM,gBAA0B0U,EAAOzU,EAEtCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOuW,CAE7B,IAAI7gB,KAAKqH,OACRgF,QAAQC,IAAI,2BAA6BF,EAAO,cAAgB8U,EAAWH,GAAa,oBAAsBhB,EAAa,0BAA4BoB,EAAkBF,IAgBnK5kB,GAAAoE,UAAAmQ,YAAR,SAAoBuB,GAEnB,GAAI0N,GAAyD7f,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACjH,IAAIqV,GAAe3f,KAAK8f,eACxB,IAAI1T,GAAcpM,KAAKoS,aACvB,IAAIyP,EAEJ7hB,MAAK8P,eAAehB,kBACpB9O,MAAK8P,eAAegS,WAEpB,IAAIC,GAAwB/hB,KAAK8P,eAAegS,WAChD,IAAItK,GAAsBxX,KAAK0U,gBAAgBrY,EAAU2lB,iBAEzD,QAAQD,GACP,IAAK,MACJF,EAAa,GAAItf,GAAAjG,QAAsBkb,EAAM9B,IAAI,IAAK,IACtD,MACD,KAAK,MACJmM,EAAa,GAAIrf,GAAAlG,QAAuBkb,EAAM9B,IAAI,IAAK,KACvD,MACD,KAAK,MACJmM,EAAa,GAAIpf,GAAAnG,QAAgCkb,EAAM9B,IAAI,KAAM,KAAM8B,EAAM9B,IAAI,IAAK,KAAM8B,EAAM9B,IAAI,KAAM,KAAM8B,EAAM9B,IAAI,IAAK,KACjI,MACD,SACCrJ,QAAQC,IAAI,sBACZ,QAGF,GAAI2V,GAAgB,GAAIjf,GAAA1G,QAAOulB,EAC/BI,GAAOjC,UAAUC,SAAWN,CAE5B,IAAII,GAAoB,iBACxB,IAAIF,EAAQ,CACXA,EAAOK,SAAS+B,EAChBlC,GAAaF,EAAOzT,SACd,CAEoBpM,KAAKmO,UAAW+R,SAAS+B,GAGpDA,EAAO7V,KAAOA,CACdoL,GAAQxX,KAAK0U,gBAAgBrY,EAAU6lB,sBACvCD,GAAO7B,MAAQ,GAAIle,GAAA5F,QAASkb,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GAC3EuM,GAAOrK,MAAQ5X,KAAK2U,qBAEpB3U,MAAKmM,gBAAgB8V,EAAQ7V,EAE7BpM,MAAKqK,QAAQ8H,GAAS7H,KAAO2X,CAE7B,IAAIjiB,KAAKqH,OACRgF,QAAQC,IAAI,4BAA8BF,EAAO,wBAA0ByV,EAAa,oBAAsB9B,GAIxG1jB,GAAAoE,UAAAoQ,iBAAR,SAAyBsB,GAExB,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAI+P,GAAmBniB,KAAK8P,eAAeiE,mBAC3C,IAAIqO,GAA+B,GAAI/hB,MAEvC,IAAIgiB,GAAiC,GAAIhiB,MAEzC,KAAK,GAAIiiB,GAAW,EAAGA,EAAIH,EAAWG,IAAK,CAC1C,GAAIzB,GAA8B7gB,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACtF8X,GAAYphB,KAAK6f,EACjBwB,GAAiBrhB,KAAK6f,EAAMzU,MAG7B,GAAIgW,EAAYnmB,QAAU,EAAG,CAC5B+D,KAAKqK,QAAQ8H,GAASrR,SAAS,+DAC/Bd,MAAK2U,qBACL,QAGD,GAAI4N,GAA4B,GAAIlf,GAAA/G,QAAkB8lB,EACtDG,GAAUnW,KAAOA,CAEjBpM,MAAK2U,qBACL3U,MAAKmM,gBAAyBoW,EAAWnW,EAEzCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOiY,CAE7B,IAAIviB,KAAKqH,OACRgF,QAAQC,IAAI,uCAAyCF,EAAO,sBAAwBiW,GAa9EhmB,GAAAoE,UAAAgR,cAAR,SAAsBU,GAIrB,GAAI/F,EACJ,IAAInM,EACJ,IAAIuX,EACJ,IAAIvC,EACJ,IAAIuN,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAEJvW,GAAOpM,KAAKoS,aACZnS,GAAOD,KAAK8P,eAAehB,kBAC3B2T,GAAcziB,KAAK8P,eAAehB,kBAGlC0I,GAAQxX,KAAK0U,gBAAgBrY,EAAUumB,mBAEvCF,GAAiB,CACjB,OAAOA,EAAiBD,EAAa,CACpC,GAAII,EAEJA,GAAc7iB,KAAK8P,eAAeiE,mBAClC/T,MAAK0U,gBAAgB,KACrB1U,MAAK2U,qBACL+N,IAAkB,EAGnB,GAAII,GAAqB,EACzB,IAAI7iB,IAAS,EAAG,CACf6iB,GAAe,+CAAiD1W,EAAO,MACvE,IAAIkV,GAAe9J,EAAM9B,IAAI,EAAG,SAChC,IAAI1V,KAAK+iB,aAAe,EAAG,CAC1B9N,EAAM,GAAIpQ,IAAAvI,QAAeglB,EAAO9J,EAAM9B,IAAI,GAAI,QACxC,CACNT,EAAM,GAAIpQ,IAAAvI,QAAeglB,EACzBrM,GAAI+N,KAAOpe,GAAAtI,QAAmB2mB,gBAEzB,IAAIhjB,IAAS,EAAG,CACtB,GAAI2gB,GAA0B,GAAI3c,GAAA3H,QAAgC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAEhG2K,GAAM,GAAIpQ,IAAAvI,OACV2Y,GAAIiO,cAActC,QAAUA,CAE5B,IAAI5gB,KAAK+iB,aAAe,EAAG,CAC1B9N,EAAIqD,cAAgBd,EAAM9B,IAAI,GAAI,MAClCT,GAAIkO,MAAQ3L,EAAM9B,IAAI,GAAI,EAC1BoN,IAAe,gDAAkD1W,EAAO,KAAOwU,EAAS,qBAAuBA,EAAQxU,KAAO,QACxH,CACN6I,EAAI+N,KAAOpe,GAAAtI,QAAmB2mB,UAC9BH,IAAe,+CAAiD1W,EAAO,KAAOwU,EAAS,qBAAuBA,EAAQxU,KAAO,KAI/H6I,EAAI2C,MAAQ5X,KAAK2U,qBACjBM,GAAImO,eAAiB5L,EAAM9B,IAAI,GAAI,EACnCT,GAAI8D,MAAMF,QAAU,GAAI9W,GAAAzF,QAAUkb,EAAM9B,IAAI,GAAI,OAEhD1V,MAAKmM,gBAAyB8I,EAAK7I,EAEnCpM,MAAKqK,QAAQ8H,GAAS7H,KAAO2K,CAE7B,IAAIjV,KAAKqH,OACRgF,QAAQC,IAAIwW,GA6CNzmB,GAAAoE,UAAAqQ,iBAAR,SAAyBqB,GAExB,GAAI8C,EACJ,IAAIoO,EACJ,IAAIC,EACJ,IAAIC,EAEJ,IAAInX,GAAcpM,KAAKoS,aACvB,IAAInS,GAAcD,KAAK8P,eAAehB,kBACtC,IAAI2T,GAAqBziB,KAAK8P,eAAehB,kBAC7C,IAAI0I,GAAsBxX,KAAK0U,gBAAgBrY,EAAUmnB,sBACzD,IAAIC,GAAqBjM,EAAM9B,IAAI,EAAG,EACtC,IAAIoN,GAAqB,kBAEzB,IAAIW,GAAe,EAAG,CACrBzjB,KAAKqK,QAAQ8H,GAASrR,SAAS,yBAA2B2iB,EAAc,8DACxE,QAGD,GAAIxjB,GAAQ,EAAG,CACd,GAAID,KAAK+iB,cAAgB,EACxBU,EAAc,MACV,IAAIzjB,KAAK+iB,cAAgB,EAC7BU,EAAc,CAEf,IAAIA,EAAc,EAAG,CAEpB,GAAIxjB,GAAQ,EAAG,CACd,GAAIqhB,GAAe9J,EAAM9B,IAAI,EAAG,SAEhC,IAAI+N,GAAe,EAAG,CACrBxO,EAAM,GAAIpQ,IAAAvI,QAAeglB,EACzBrM,GAAI+N,KAAOpe,GAAAtI,QAAmB2mB,UAC9BH,IAAe,8CAAgD1W,EAAO,WAEhE,CACN6I,EAAM,GAAIpQ,IAAAvI,QAAeglB,EAAO9J,EAAM9B,IAAI,GAAI,GAC9CT,GAAIqD,cAAgBd,EAAM9B,IAAI,GAAI,MAClCoN,IAAe,+CAAiD1W,EAAO,YAGlE,IAAInM,GAAQ,EAAG,CACrB,GAAI2gB,GAA0B,GAAI3c,GAAA3H,QAAgC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAEhG2K,GAAM,GAAIpQ,IAAAvI,OACV2Y,GAAIiO,cAActC,QAAUA,CAE5B,IAAI6C,GAAe,EAAG,CACrBxO,EAAI+N,KAAOpe,GAAAtI,QAAmB2mB,UAE9BH,IAAe,+CAAiD1W,EAAO,KAAOwU,EAAS,qBAAuBA,EAAQxU,KAAO,QACvH,CACN6I,EAAIkO,MAAQ3L,EAAM9B,IAAI,GAAI,EAC1BT,GAAIqD,cAAgBd,EAAM9B,IAAI,GAAI,MAElCoN,IAAe,gDAAkD1W,EAAO,KAAOwU,EAAS,qBAAuBA,EAAQxU,KAAO,KAIhIiX,EAA+BrjB,KAAKqK,QAAQmN,EAAM9B,IAAI,GAAI,IAAIpL,IAC9DgZ,GAA8BtjB,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,IAC5DiZ,GAA4BvjB,KAAKqK,QAAQmN,EAAM9B,IAAI,GAAI,IAAIpL,IAC3D2K,GAAIyO,YAAgC1jB,KAAKqK,QAAQmN,EAAM9B,IAAI,GAAI,IAAIpL,IACnE2K,GAAI8D,MAAMF,QAAU,GAAI9W,GAAAzF,QAAUkb,EAAM9B,IAAI,GAAI,OAAQ8B,EAAM9B,IAAI,EAAG,MAAO8B,EAAM9B,IAAI,EAAG,MACzFT,GAAIC,UAAYsC,EAAM9B,IAAI,EAAG,MAC7BT,GAAI0O,mBAAqBnM,EAAM9B,IAAI,EAAG,MACtCT,GAAI2O,UAAY5jB,KAAKuK,aAAaiN,EAAM9B,IAAI,EAAG,GAE/C,IAAI2N,EAAc,CACjBpO,EAAI4O,eAAiB,GAAI5f,GAAA3H,QAAgB+mB,EACzCP,IAAe,4BAA8BO,EAAajX,KAG3D,GAAIkX,EAAa,CAChBrO,EAAI6O,aAAalD,QAAU,GAAI3c,GAAA3H,QAAgBgnB,EAC/CR,IAAe,2BAA6BQ,EAAYlX,KAGzD,GAAImX,EAAW,CACdtO,EAAI8O,eAAenD,QAAU,GAAI3c,GAAA3H,QAAgBinB,EACjDT,IAAe,6BAA+BS,EAAUnX,KAGzD6I,EAAImO,eAAiB5L,EAAM9B,IAAI,GAAI,EACnCT,GAAIiO,cAAcc,SAAWxM,EAAM9B,IAAI,GAAI,EAC3CT,GAAIgP,cAAc3C,MAAQ9J,EAAM9B,IAAI,GAAI,SACxCT,GAAI8O,eAAeC,SAAWxM,EAAM9B,IAAI,GAAI,EAC5CT,GAAI8O,eAAeG,MAAQ1M,EAAM9B,IAAI,GAAI,GACzCT,GAAI8O,eAAezC,MAAQ9J,EAAM9B,IAAI,GAAI,SAEzC,KAAK,GAAIgN,GAAwB,EAAGA,EAAiBD,EAAaC,IAAkB,CACnF,GAAIG,EACJA,GAAc7iB,KAAK8P,eAAeiE,mBAElCyD,GAAQxX,KAAK0U,gBAAgBrY,EAAU8nB,oBAEvC,QAAQtB,GACP,IAAK,KACJ,GAAIuB,GAAmDpkB,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,IACrF2K,GAAIoP,gBAAgBD,EACpBtB,IAAe,0BAA4BsB,EAAahY,IAExD,MAED,KAAK,KACJ,GAAIkY,GAA4DtkB,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,IAC9F2K,GAAIsP,aAAeD,CACnBxB,IAAe,0BAA4BwB,EAAgBlY,IAE3D,MAED,KAAK,GACJ,GAAIoY,GAAgC,GAAIxgB,GAAA1H,QAAoC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAC1G2K,GAAIiO,cAAgB,GAAIpe,IAAAxI,OACxB2Y,GAAIiO,cAActC,QAAU4D,CAC5B1B,IAAe,yCAA2C0B,EAAYpY,IAEtE,MAED,KAAK,IACJ6I,EAAIgP,cAAgB,GAAIlf,IAAAzI,OACxBwmB,IAAe,uBACf,MACD,KAAK,IACJ,GAAIlC,GAA0B,GAAI3c,GAAA3H,QAAgC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAChG2K,GAAIgP,cAAgB,GAAIhf,IAAA3I,QAAsBskB,EAC9CkC,IAAe,2DAA6DlC,EAAQxU,IACpF,MACD,KAAK,IACJ6I,EAAIgP,cAAgB,GAAI9e,IAAA7I,QAAkBkb,EAAM9B,IAAI,IAAK,GACzDoN,IAAe,sBACf,MACD,KAAK,IACJ,GAAIlC,GAA0B,GAAI3c,GAAA3H,QAAgC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAChG2K,GAAIgP,cAAgB,GAAI/e,IAAA5I,QAAsBskB,EAAS5gB,KAAKuK,aAAaiN,EAAM9B,IAAI,IAAK,KAAM,MAAOT,EAAIgP,cACzGnB,IAAe,oDAAsDlC,EAAQxU,IAC7E,MACD,KAAK,IACJ6I,EAAIgP,cAAgB,GAAIjf,IAAA1I,QAAiBkb,EAAM9B,IAAI,IAAK,GAAIT,EAAIgP,cAC5ChP,GAAIgP,cAAeQ,WAAajN,EAAM9B,IAAI,IAAK,GACnEoN,IAAe,qBACf,MACD,KAAK,IAMJ,KAED,KAAK,KACJ7N,EAAI8O,eAAiB,GAAI9d,IAAA3J,OACzBwmB,IAAe,8BACf,MACD,KAAK,KACJ7N,EAAI8O,eAAiB,GAAI5d,IAAA7J,OACzBwmB,IAAe,wBACf,MACD,KAAK,KACJ7N,EAAI8O,eAAiB,GAAI7d,IAAA5J,QAAkBkb,EAAM9B,IAAI,IAAK,IAAMT,EAAI8O,eAC/C9O,GAAI8O,eAAgBU,WAAajN,EAAM9B,IAAI,IAAK,GACrEoN,IAAe,sBACf,MACD,KAAK,KACJ7N,EAAI8O,eAAiB,GAAIhe,IAAAzJ,QAAsBkb,EAAM9B,IAAI,IAAK,MAAOT,EAAI8O,eAChD9O,GAAI8O,eAAgBW,aAAelN,EAAM9B,IAAI,IAAK,EAClDT,GAAI8O,eAAgBY,kBAAoBnN,EAAM9B,IAAI,IAAK,GAChFoN,IAAe,0BACf,MACD,KAAK,KACJ,KACD,KAAK,KACJ,GAAIlC,GAA0B,GAAI3c,GAAA3H,QAAgC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAChG2K,GAAI6O,aAAe,GAAIle,IAAAtJ,QAA0C2Y,EAAI6O,aAAalD,SAAWA,EAASA,EACtGkC,IAAe,4DAA8DlC,EAAQxU,IACrF,OAEFpM,KAAK2U,4BAKH,IAAK1U,GAAM,GAAKA,GAAM,EAAG,CAE7B,GAAIqhB,GAAe9J,EAAM9B,IAAI,EAAG,SAChCoN,IAAaxB,CACb,IAAIuC,GAAiC,GAAI5f,GAAA3H,QAAgC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KACvG,IAAGrK,GAAM,EAAE,CACV4jB,EAAee,YAAc5d,GAAA1K,QAAYuoB,oBAErC,IAAG5kB,GAAM,EAAE,CACf4jB,EAAee,YAAc5d,GAAA1K,QAAYwoB,gBAE1C,GAAIC,GAA0B,GAAIze,IAAAhK,OAClCyoB,GAAUnE,QAAUiD,CACpBkB,GAAU7P,UAAY,IAEtB6P,GAAUzM,cAAgB,IAC1ByM,GAAUnN,MAAQ5X,KAAK2U,qBACvB3U,MAAKmM,gBAAyB4Y,EAAW3Y,EACzCpM,MAAKqK,QAAQ8H,GAAS7H,KAAOya,CAC7B,IAAI/kB,KAAKqH,OACRgF,QAAQC,IAAIwW,EACb,QAGD7N,EAAI2C,MAAQ5X,KAAK2U,qBACjB3U,MAAKmM,gBAAyB8I,EAAK7I,EAEnCpM,MAAKqK,QAAQ8H,GAAS7H,KAAO2K,CAE7B,IAAIjV,KAAKqH,OACRgF,QAAQC,IAAIwW,GAINzmB,GAAAoE,UAAAiR,aAAR,SAAqBS,GAEpBnS,KAAKqK,QAAQ8H,GAAS/F,KAAOpM,KAAKoS,aAElC,IAAInS,GAAcD,KAAK8P,eAAehB,kBAEtC9O,MAAKwH,eAAexH,KAAK4O,iBAGzB,IAAI3O,GAAQ,EAAG,CACd,GAAI+Z,GAAaha,KAAK8P,eAAeuH,aAAarX,KAAK8P,eAAejB,kBACtE7O,MAAKia,gBAAgBja,KAAK4O,cAAchD,WAAY,GAAIxJ,GAAA9F,QAAW0d,GAAM,MAAO,KAAM,UAEhF,CACN,GAAID,GAAkB/Z,KAAK8P,eAAejB,iBAC1C,IAAIvE,GAAiB,GAAI5H,GAAApG,QAAUyd,EACnC/Z,MAAK8P,eAAeC,UAAUzF,EAAM,EAAGyP,EAQvC/Z,MAAKia,gBAAgBja,KAAK4O,cAAchD,WAAY,KAAM,MAAOtB,EAAM,MAMxEtK,KAAK0U,gBAAgB,KACrB1U,MAAKqK,QAAQ8H,GAAS+H,OAASla,KAAK2U,qBAEpC3U,MAAKma,gCAEL,IAAIna,KAAKqH,OACRgF,QAAQC,IAAI,oBAAsB,WAAY,SAASrM,GAAQ,uBAIzD5D,GAAAoE,UAAAsQ,iBAAR,SAAyBoB,GAGxB,GAAI4H,EACJ,IAAIre,EAEJsE,MAAKwH,eAAgBxH,KAAK4O,iBAE1B,IAAI3O,GAAcD,KAAK8P,eAAehB,kBAEtC9O,MAAKqK,QAAQ8H,GAAS/F,KAAOpM,KAAKoS,aAElC,KAAK1W,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvBsE,KAAKwH,eAAexH,KAAK4O,iBAGzB,IAAI3O,GAAQ,EAAG,CACd8Z,EAAW/Z,KAAK8P,eAAejB,iBAC/B,IAAImL,EACJA,GAAMha,KAAK8P,eAAeuH,aAAa0C,EACvC/Z,MAAKia,gBAAgBja,KAAK4O,cAAchD,WAAY,GAAIxJ,GAAA9F,QAAW0d,GAAM,MAAO,KAAM,KAAMte,OACtF,CAENqe,EAAW/Z,KAAK8P,eAAejB,iBAC/B,IAAIvE,GAAiB,GAAI5H,GAAApG,QAAUyd,EACnC/Z,MAAK8P,eAAeC,UAAUzF,EAAM,EAAGyP,EAEvC/Z,MAAKia,gBAAgBja,KAAK4O,cAAchD,WAAY,KAAM,MAAOtJ,EAAAhG,QAAY0oB,iBAAiB1a,GAAO,KAAM5O,IAK7GsE,KAAK0U,gBAAgB,KACrB1U,MAAKqK,QAAQ8H,GAAS+H,OAASla,KAAK2U,qBACpC3U,MAAKma,gCAEL,IAAIna,KAAKqH,OACRgF,QAAQC,IAAI,oBAAsB,WAAY,SAASrM,GAAQ,4BAIzD5D,GAAAoE,UAAAuQ,uBAAR,SAA+BmB,GAE9B,GAAInF,EAEJhN,MAAKqK,QAAQ8H,GAAS/F,KAAOpM,KAAKoS,aAClCpF,GAAQhN,KAAKilB,sBAAsB9S,EACnCnS,MAAK2U,qBACL3U,MAAKqK,QAAQ8H,GAAS7H,KAAO0C,CAC7BhN,MAAKmM,gBAAyBa,EAAOhN,KAAKqK,QAAQ8H,GAAS/F,KAC3DpM,MAAKqK,QAAQ8H,GAAS7H,KAAO0C,CAE7B,IAAIhN,KAAKqH,OACRgF,QAAQC,IAAI,iCAAmCU,EAAMZ,KAAO,WAAaY,GAInE3Q,GAAAoE,UAAAwQ,uBAAR,SAA+BkB,GAE9BnS,KAAKqK,QAAQ8H,GAAS/F,KAAOpM,KAAKoS,aAClC,IAAIyO,GAA8B7gB,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACtF,IAAI0C,GAAyBhN,KAAKklB,sBAAsBrE,EAAO1O,EAE/D,KAAKnF,EACJ,MAEDhN,MAAK2U,qBACL3U,MAAKmM,gBAAyBa,EAAOhN,KAAKqK,QAAQ8H,GAAS/F,KAC3DpM,MAAKqK,QAAQ8H,GAAS7H,KAAO0C,CAE7B,IAAIhN,KAAKqH,OACRgF,QAAQC,IAAI,0CAA4CU,EAAMZ,KAAO,aAAeY,EAAQ,mBAAoB6T,EAAMzU,MAahH/P,GAAAoE,UAAA4Q,aAAR,SAAqBc,GAEpB,GAAIgT,GAAsBnlB,KAAK8P,eAAehB,oBAAsB,CACpE,IAAIsW,GAA+DplB,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACvH,IAAI+a,EACJ,IAAI1F,GAAe3f,KAAK8f,eACxB,IAAI1T,GAAcpM,KAAKoS,aAEvB,IAAIkT,GAAqBtlB,KAAK8P,eAAegS,WAC7C,IAAIyD,GAAqBvlB,KAAK8P,eAAegS,WAE7C,IAAItK,GAAsBxX,KAAK0U,gBAAgBrY,EAAUmpB,kBAEzD,QAAQD,GACP,IAAK,GACJF,EAAerlB,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,IAC7C+a,GAAarF,UAAUC,SAAWN,CAElC,IAAIyF,EACHA,EAAalF,SAASmF,EAEvB,OAGF,GAAIA,EAAc,CACjB7N,EAAQxX,KAAK0U,gBAAgBrY,EAAUopB,iBAEvCJ,GAAajF,MAAQ,GAAIle,GAAA5F,QAASkb,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GAAI8B,EAAM9B,IAAI,EAAG,GACjF2P,GAAazN,MAAQ5X,KAAK2U,sBAG3B3U,KAAKqK,QAAQ8H,GAAS7H,KAAO+a,CAE7B,IAAIrlB,KAAKqH,OACRgF,QAAQC,IAAI,kCAAoCF,GAW1C/P,GAAAoE,UAAAsR,cAAR,SAAsBI,GAErB,GAAIqF,GAAsBxX,KAAK0U,gBAAgBrY,EAAUqpB,mBAEzD,IAAI1lB,KAAKqH,OAAQ,CAChBgF,QAAQC,IAAI,+CAAiDkL,EAAM9B,IAAI,EAAG,GAC1ErJ,SAAQC,IAAI,+CAAiDkL,EAAM9B,IAAI,EAAG,WAC1ErJ,SAAQC,IAAI,+CAAiDkL,EAAM9B,IAAI,EAAG,WAC1ErJ,SAAQC,IAAI,+CAAiDkL,EAAM9B,IAAI,EAAG,WAC1ErJ,SAAQC,IAAI,+CAAiDkL,EAAM9B,IAAI,EAAG,aAKpErZ,GAAAoE,UAAAqR,eAAR,SAAuBK,GAEtB,GAAIjS,GAAYF,KAAK8P,eAAehB,kBACpC,IAAI6W,GAAyB3lB,KAAKoS,aAElC,IAAIpS,KAAKqH,OACRgF,QAAQC,IAAI,iCAAmCpM,EAAK,eAAiBylB,GAyB/DtpB,GAAAoE,UAAAykB,sBAAR,SAA8BrE,EAAiB1O,GAG9C,GAAIyT,GAAoB5lB,KAAK8P,eAAeiE,mBAC5C,IAAIwQ,EACJ,IAAI/M,GAAsBxX,KAAK0U,gBAAgB1U,KAAK4I,2BAEpD,IAAIid,EACJ,IAAIlD,EACJ,QAAQiD,GAUP,IAAK,MACJrB,EAAe,GAAIne,IAAA9J,QAAoC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KACrF,MACD,KAAK,MACJia,EAAe,GAAIze,IAAAxJ,QAAwCukB,EACnC0D,GAAcpB,MAAQ3L,EAAM9B,IAAI,IAAK,EACrC6O,GAAcuB,QAAUtO,EAAM9B,IAAI,IAAK,KAC/D,MAED,KAAK,MACJ6O,EAAe,GAAI1e,IAAAvJ,QAAwCukB,EAAgBrJ,EAAM9B,IAAI,IAAK,GAClE6O,GAAcpB,MAAQ3L,EAAM9B,IAAI,IAAK,EACrC6O,GAAcuB,QAAUtO,EAAM9B,IAAI,IAAK,KACvC6O,GAAcwB,MAAQvO,EAAM9B,IAAI,IAAK,EAE7D,MACD,KAAK,MACJ6O,EAAe,GAAIle,IAAA/J,QAAoCukB,EAAgBrJ,EAAM9B,IAAI,IAAK,GAClE6O,GAAcpB,MAAQ3L,EAAM9B,IAAI,IAAK,EACrC6O,GAAcuB,QAAUtO,EAAM9B,IAAI,IAAK,KACvC6O,GAAcwB,MAAQvO,EAAM9B,IAAI,IAAK,EAEzD,MACD,KAAK,MACJ6O,EAAe,GAAIve,IAAA1J,QAAiBukB,EAChB0D,GAAcpB,MAAQ3L,EAAM9B,IAAI,IAAK,EACrC6O,GAAcuB,QAAUtO,EAAM9B,IAAI,IAAK,KAC3D,OAGF1V,KAAK2U,qBACL,OAAO4P,GAIAloB,GAAAoE,UAAAkR,cAAR,SAAsBQ,GAErB,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAI4T,GAA6BhmB,KAAK8P,eAAeiE,mBACrD,IAAIkS,GAAoB,GAAI1hB,GAAAjI,OAC5B0D,MAAK0U,gBAAgB,KAErB,KAAK,GAAIwR,GAAuB,EAAGA,EAAgBF,EAAYE,IAAiB,CAC/E,GAAIC,EACJ,IAAIC,EAEJpmB,MAAK8P,eAAeiE,mBACpBoS,GAAQ,GAAI1hB,GAAAnI,OACZ6pB,GAAME,YAAcrmB,KAAK8P,eAAeiE,oBAAsB,CAC9DoS,GAAM/Z,KAAOpM,KAAKoS,aAElBgU,GAAMpmB,KAAK8f,eACXqG,GAAMG,gBAAkBF,EAAIG,OAE5BvmB,MAAK0U,gBAAgB,KACrB1U,MAAK2U,qBACLsR,GAASO,OAAOxlB,KAAKmlB,GAItBnmB,KAAK2U,qBACL3U,MAAKmM,gBAAgB8Z,EAAU7Z,EAE/BpM,MAAKqK,QAAQ8H,GAAS7H,KAAO2b,CAE7B,IAAIjmB,KAAKqH,OACRgF,QAAQC,IAAI,6BAA+B2Z,EAAS7Z,KAAO,yBAA2B8Z,GAIhF7pB,GAAAoE,UAAAmR,kBAAR,SAA0BO,GAEzB,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAI4T,GAA6BhmB,KAAK8P,eAAeiE,mBACrD/T,MAAK0U,gBAAgB,KAErB,IAAI+R,GAAoB,GAAIjiB,GAAAlI,OAE5B,KAAK,GAAI4pB,GAAuB,EAAGA,EAAgBF,EAAYE,IAAiB,CAC/E,GAAIQ,EACJ,IAAIC,EACJD,GAAa,GAAIpiB,GAAAhI,OACjBqqB,GAAgB3mB,KAAK8P,eAAehB,kBACpC,IAAI6X,GAAiB,EAAG,CACvB,GAAIC,GAAwB5mB,KAAK6mB,sBAEjC,IAAIlH,GAAe,GAAI1d,GAAA3F,QAASsqB,EAChCF,GAAWI,YAAYC,WAAWpH,EAClC+G,GAAWM,YAAYC,SAAStH,EAAI9P,SAEpC4W,GAAKS,WAAWhB,GAAiBQ,GAKnC1mB,KAAK2U,qBACL3U,MAAKmM,gBAAgBsa,EAAMra,EAE3BpM,MAAKqK,QAAQ8H,GAAS7H,KAAOmc,CAE7B,IAAIzmB,KAAKqH,OACRgF,QAAQC,IAAI,iCAAmCma,EAAKra,KAAO,yBAA2B8Z,GAIhF7pB,GAAAoE,UAAAoR,uBAAR,SAA+BM,GAE9B,GAAIgV,EACJ,IAAIC,EACJ,IAAIhb,GAAcpM,KAAKoS,aACvB,IAAIiV,GAAwB,GAAI3iB,GAAApI,OAChC,IAAIgrB,GAA6BtnB,KAAK8P,eAAeiE,mBACrD/T,MAAK0U,gBAAgB,KAErB,KAAK,GAAI6S,GAAuB,EAAGA,EAAgBD,EAAYC,IAAiB,CAC/EH,EAAUpnB,KAAK8P,eAAejB,iBAC9BsY,GAAYnnB,KAAK8P,eAAeiE,mBAChCsT,GAAKG,SAAwBxnB,KAAKqK,QAAQ+c,GAAS9c,KAAM6c,GAE1D,GAAIE,EAAKI,OAAOxrB,QAAU,EAAG,CAC5B+D,KAAKqK,QAAQ8H,GAASrR,SAAS,gEAC/B,QAGDd,KAAK2U,qBACL3U,MAAKmM,gBAAgBkb,EAAMjb,EAC3BpM,MAAKqK,QAAQ8H,GAAS7H,KAAO+c,CAE7B,IAAIrnB,KAAKqH,OACRgF,QAAQC,IAAI,qCAAuC+a,EAAKjb,KAAO,yBAA2Bib,EAAKI,OAAOxrB,QAQhGI,GAAAoE,UAAAyQ,yBAAR,SAAiCiB,EAAyBuV,GAAA,GAAAA,QAAA,GAAwB,CAAxBA,EAAA,MAEzD,GAAIC,EACJ,IAAIlO,EACJ,IAAIC,EACJ,IAAIsE,EACJ,IAAI7K,EACJ,IAAIC,EACJ,IAAIyG,EACJ,IAAI/F,GAAqB,CACzB,IAAIuT,GAAsB,GAAI1iB,IAAArI,OAC9B,IAAIuX,EACJ,IAAIoK,EACJ,IAAI2J,GAAoC,GAAIvnB,MAC5C,IAAImX,EACJ,IAAIpL,GAAcpM,KAAKoS,aACvB,IAAIyV,GAAwB7nB,KAAK8P,eAAejB,iBAChD,IAAIkJ,GAA+B/X,KAAKqK,QAAQwd,GAAQvd,IAExD,IAAI6T,GAA0Bne,KAAK8nB,wBAAwBD,EAE3D,IAAIP,IAAsBI,EAAW1nB,KAAK8P,eAAeiE,oBAAsB,CAE/E,IAAIgU,GAAwB/nB,KAAK8P,eAAeiE,mBAChD,IAAIiU,GAAqBhoB,KAAK8P,eAAeiE,mBAC7C,KAAK,GAAIkU,GAAuB,EAAGA,EAAgBD,EAAaC,IAC/DL,EAAY5mB,KAAKhB,KAAK8P,eAAeiE,oBAEtCyD,GAAQxX,KAAK0U,gBAAgB1U,KAAK8J,8BAElCud,GAAKa,QAAU1Q,EAAM9B,IAAI,EAAG,KAC5B2R,GAAKc,iBAAmB3Q,EAAM9B,IAAI,EAAG,MAErC,IAAIyR,EACJ,KAAK,GAAII,GAAuB,EAAGA,EAAgBD,EAAYC,IAAiB,CAC/EJ,EAAYnnB,KAAK8P,eAAeiE,mBAChCgE,GAAW,GAAInV,GAAAtG,OACfqrB,GAAkB,CAClB,OAAOA,EAAkBI,EAAgB,CACxCE,EAAgB,CAChB9U,GAAUnT,KAAK8P,eAAejB,iBAC9BuE,GAAUpT,KAAK8P,eAAeD,SAAWsD,CACzC,OAAO8U,EAAgBD,EAAa,CACnC,GAAIJ,EAAYK,IAAkB,EAAG,CACpCpU,EAAUkE,EAASY,aAAagP,GAAiB9N,SAAShG,OAC1DoK,GAAQ,GAAI5d,MACZyT,GAAM,CACN,OAAO9T,KAAK8P,eAAeD,SAAWuD,EAAS,CAC9CqG,EAAIzZ,KAAKke,WAAWle,KAAKwP,aACzBkK,GAAI1Z,KAAKke,WAAWle,KAAKwP,aACzBwO,GAAIhe,KAAKke,WAAWle,KAAKwP,aACzByO,GAAMnK,KAAS2F,CACfwE,GAAMnK,KAAS4F,CACfuE,GAAMnK,KAASkK,EAEhBnE,EAAW,GAAIhX,GAAAvG,QAAiB,GAAImF,GAAAnF,QACpCud,GAAS6E,WAAW7K,EACpBgG,GAASvF,aAAa2J,EACtBpE,GAASrF,OAAO2J,EAAIwJ,GACpB9N,GAAS8E,WAAW,KACpB9E,GAASuO,YAAY,KACrBvO,GAAS2E,kBAAoB,KAC7B3E,GAAS4E,mBAAqB,KAC9BkJ,IACA5P,GAASsG,WAAWxE,OAEpB7Z,MAAK8P,eAAeD,SAAWuD,CAChC6U,MAGFZ,EAAKG,SAASzP,EAAUoP,GAEzBnnB,KAAK2U,qBACL3U,MAAKmM,gBAAgBkb,EAAMjb,EAE3BpM,MAAKqK,QAAQ8H,GAAS7H,KAAO+c,CAE7B,IAAIrnB,KAAKqH,OACRgF,QAAQC,IAAI,mCAAqC+a,EAAKjb,KAAO,6BAA+B2L,EAAS3L,KAAO,yBAA2Bib,EAAKI,OAAOxrB,QAO7II,GAAAoE,UAAA0Q,wBAAR,SAAgCgB,GAE/B,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAIkV,GAA6BtnB,KAAK8P,eAAeiE,mBACrD,IAAIyD,GAAsBxX,KAAK0U,gBAAgBrY,EAAUgsB,6BACzD,IAAIC,GAAyC,GAAIjoB,MACjD,IAAIkoB,GAAqC,GAAIloB,MAC7C,IAAImoB,EACJ,KAAK,GAAIjB,GAAuB,EAAGA,EAAgBD,EAAYC,IAAiB,CAC/EiB,EAAmCxoB,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IACvF,IAAIke,YAAoB7jB,IAAArI,QACvBisB,EAAavnB,KAAsBwnB,OAC/B,IAAIA,YAAoB9jB,GAAApI,QAC5BgsB,EAAetnB,KAAwBwnB,GAGzC,GAAKD,EAAatsB,QAAU,GAAOqsB,EAAersB,QAAU,EAAI,CAC/D+D,KAAKqK,QAAQ8H,GAASrR,SAAS,wEAC/B,QAGDd,KAAK2U,qBAEL,IAAI4T,EAAatsB,OAAS,EAAG,CAC5B,GAAIwsB,GAA2C,GAAIvkB,GAAA5H,OAEnD,KAAK,GAAIZ,GAAmB,EAAGA,EAAI6sB,EAAatsB,OAAQP,IACvD+sB,EAAsBC,aAAaH,EAAa7sB,GAEjDsE,MAAKmM,gBAAgBsc,EAAuBrc,EAE5CpM,MAAKqK,QAAQ8H,GAAS7H,KAAOme,CAE7B,IAAIzoB,KAAKqH,OACRgF,QAAQC,IAAI,uCAAyCF,EAAO,mBAAqBqc,EAAsBE,WAAW1sB,OAAS,wBAA0BwsB,EAAsBG,oBAEtK,IAAIN,EAAersB,OAAS,EAAG,CACrC,GAAI4sB,GAA+C,GAAIzkB,GAAA9H,QAAqBkb,EAAM9B,IAAI,EAAG,GACzF,KAAK,GAAIha,GAAmB,EAAGA,EAAI4sB,EAAersB,OAAQP,IACzDmtB,EAAwBH,aAAaJ,EAAe5sB,GACrDsE,MAAKmM,gBAAgB0c,EAAyBzc,EAE9CpM,MAAKqK,QAAQ8H,GAAS7H,KAAOue,CAE7B,IAAI7oB,KAAKqH,OACRgF,QAAQC,IAAI,yCAA2CF,EAAO,mBAAqByc,EAAwBF,WAAW1sB,OAAS,wBAA0B4sB,EAAwBD,iBAO5KvsB,GAAAoE,UAAA2Q,iBAAR,SAAyBe,GAExB,GAAI/F,GAAcpM,KAAKoS,aACvB,IAAInS,GAAcD,KAAK8P,eAAeiE,mBACtC,IAAIyD,GAAsBxX,KAAK0U,gBAAgBrY,EAAUysB,sBACzD,IAAIC,GAAyD/oB,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,IAEjH,IAAI0e,GAA+B,GAAI3oB,MACvC,IAAI4oB,GAAqCjpB,KAAK8P,eAAeiE,mBAC7D,KAAK,GAAIrY,GAAmB,EAAGA,EAAIutB,EAAoBvtB,IACtDstB,EAAehoB,KAAchB,KAAKqK,QAAQrK,KAAK8P,eAAejB,mBAAmBvE,KAElF,IAAI4e,GAA8BlpB,KAAK8P,eAAeiE,mBACtD,IAAIoV,GAAqBnpB,KAAK8P,eAAehB,oBAAsB,CACnE9O,MAAK2U,qBACL3U,MAAK2U,qBAEL,IAAIyU,EACJ,IAAInpB,GAAQ,EACXmpB,EAAe,GAAI/kB,GAAA/H,QAAwCysB,EAA+B/oB,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,UACpH,IAAIrK,GAAQ,EAChBmpB,EAAe,GAAIjlB,GAAA7H,QAAoCysB,EAExD/oB,MAAKmM,gBAAgBid,EAAchd,EACnCpM,MAAKqK,QAAQ8H,GAAS7H,KAAO8e,CAE7B,KAAK1tB,EAAI,EAAGA,EAAIstB,EAAe/sB,OAAQP,IAAK,CAC3C,GAAIuE,GAAQ,EACX+oB,EAAettB,GAAG2tB,SAA+BD,MAC7C,IAAInpB,GAAQ,EAChB+oB,EAAettB,GAAG2tB,SAA6BD,EAGjD,GAAIppB,KAAKqH,OACRgF,QAAQC,IAAI,6BAA+BF,GA0BrC/P,GAAAoE,UAAAwkB,sBAAR,SAA8B9S,GAE7B,GAAIyT,GAAoB5lB,KAAK8P,eAAeiE,mBAC5C,IAAIuV,EAEJ,IAAI9R,GAAsBxX,KAAK0U,gBAAgB1U,KAAK+J,2BAEpD,QAAQ6b,GAEP,IAAK,KACJ0D,EAAqB,GAAIjkB,IAAA/I,QAAwBkb,EAAM9B,IAAI,IAAK,GAAIrV,OAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACnI,MACD,KAAK,KACJipB,EAAqB,GAAIhkB,IAAAhJ,OACzB,IAAIitB,GAAyB/R,EAAM9B,IAAI,IAAK,EACd4T,GAAoBE,eAAiB,GAAIxnB,GAAA1F,QAAekb,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,GAAM6T,GAAU,GAAM,IAASA,GAAU,EAAK,IAAQA,EAAS,IAASA,GAAU,GAAM,IACtP,MACD,KAAK,KACJD,EAAqB,GAAI/jB,IAAAjJ,QAAmB,GAAI0H,GAAA1H,QAAoC0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,MAAgBkN,EAAM9B,IAAI,IAAK,GACjJ,IAAImQ,GAAkBrO,EAAM9B,IAAI,EAAG,EACnC,IAAImQ,EAAW,EAAG,EAIlB,KACD,KAAK,KACJyD,EAAqB,GAAI5jB,IAAApJ,QAAqB0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAAMtK,KAAKuK,aAAaiN,EAAM9B,IAAI,IAAK,KACnH,MAQD,KAAK,KACJ4T,EAAqB,GAAI3jB,IAAArJ,QAAqBkb,EAAM9B,IAAI,IAAK,UAAW8B,EAAM9B,IAAI,IAAK,IAAM8B,EAAM9B,IAAI,IAAK,GAC5G,MACD,KAAK,KACJ4T,EAAqB,GAAIlkB,IAAA9I,QAAsB0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAAMkN,EAAM9B,IAAI,IAAK,OAClG,MAYD,KAAK,KACJ4T,EAAqB,GAAI7jB,IAAAnJ,QAA0B0D,KAAKqK,QAAQmN,EAAM9B,IAAI,EAAG,IAAIpL,KAAMkN,EAAM9B,IAAI,IAAK,GACtG,MACD,KAAK,KACJ4T,EAAqB,GAAI9jB,IAAAlJ,QAAgBkb,EAAM9B,IAAI,IAAK,GAAI8B,EAAM9B,IAAI,IAAK,KAAO8B,EAAM9B,IAAI,IAAK,SACjG,OAGF1V,KAAK2U,qBACL,OAAO2U,GAIAjtB,GAAAoE,UAAAkU,oBAAR,WAEC,GAAI8U,GAAkBzpB,KAAK8P,eAAejB,iBAE1C,IAAI4a,EAAW,EAAG,CACjB,GAAIC,GAAkB1pB,KAAK8P,eAAeD,SAAW4Z,CACrD,IAAIE,KAEJ,KAAK,GAAIC,GAAqB,EAAG5pB,KAAK8P,eAAeD,SAAW6Z,EAAUE,IAAe,CACxF,GAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAGJJ,GAAQ7pB,KAAK8P,eAAehB,kBAC5Bgb,GAAW9pB,KAAKoS,aAChB2X,GAAY/pB,KAAK8P,eAAehB,kBAChCkb,GAAWhqB,KAAK8P,eAAejB,iBAE/B,IAAK7O,KAAK8P,eAAeD,SAAWma,EAAYN,EAAU,CACzDrd,QAAQC,IAAI,2CAA6Csd,EAAc,sCACvE5pB,MAAK8P,eAAeD,SAAW6Z,CAC/B,OAAOC,GAGR,OAAQI,GACP,IAAK1tB,GAAU0C,UACdkrB,EAAWjqB,KAAK8P,eAAeuH,aAAa2S,EAC5C,MACD,KAAK3tB,GAAU+B,KACd6rB,EAAWjqB,KAAK8P,eAAeoa,UAC/B,MACD,KAAK7tB,GAAUgC,MACd4rB,EAAWjqB,KAAK8P,eAAegS,WAC/B,MACD,KAAKzlB,GAAUiC,MACd2rB,EAAWjqB,KAAK8P,eAAeqa,SAC/B,MACD,KAAK9tB,GAAUuC,KACf,IAAKvC,GAAUkC,MACd0rB,EAAWjqB,KAAK8P,eAAehB,kBAC/B,MACD,KAAKzS,GAAUmC,OACdyrB,EAAWjqB,KAAK8P,eAAeiE,mBAC/B,MACD,KAAK1X,GAAUoC,OACf,IAAKpC,GAAUyC,MACdmrB,EAAWjqB,KAAK8P,eAAejB,iBAC/B,MACD,KAAKxS,GAAUqC,QACdurB,EAAWjqB,KAAK8P,eAAe2D,WAC/B,MACD,KAAKpX,GAAUsC,QACdsrB,EAAWjqB,KAAK8P,eAAesa,YAC/B,MACD,SACCH,EAAW,gCAAkCF,CAC7C/pB,MAAK8P,eAAeD,UAAYma,CAChC,OAGFL,EAAWG,GAAYG,CAEvB,IAAIjqB,KAAKqH,OACRgF,QAAQC,IAAI,qBAAuBwd,EAAW,eAAiBG,IAIlE,MAAON,GAGAttB,GAAAoE,UAAAiU,gBAAR,SAAwB2V,GAEvB,GAAIZ,GAAkBzpB,KAAK8P,eAAejB,iBAC1C,IAAI2I,GAAsB,GAAI8S,GAC9B,IAAIZ,GAAkB1pB,KAAK8P,eAAeD,SAAW4Z,CAErD,IAAIY,EAAU,CACb,GAAI7b,EACJ,IAAI+b,EACJ,IAAItqB,EAEJ,KAAK,GAAIuqB,GAAqB,EAAGxqB,KAAK8P,eAAeD,SAAW6Z,EAAUc,IAAe,CACxFD,EAAMvqB,KAAK8P,eAAeiE,mBAC1BvF,GAAMxO,KAAK8P,eAAejB,iBAE1B,IAAK7O,KAAK8P,eAAeD,SAAWrB,EAAOkb,EAAU,CACpDrd,QAAQC,IAAI,0CAA4Cke,EAAc,sCACtExqB,MAAK8P,eAAeD,SAAW6Z,CAC/B,OAAOlS,GAGR,GAAI6S,EAASE,GAAM,CAClBtqB,EAAOoqB,EAASE,EAChB/S,GAAMiT,IAAIF,EAAKvqB,KAAK0qB,eAAezqB,EAAMuO,QACnC,CACNxO,KAAK8P,eAAeD,UAAYrB,QAG5B,CACNxO,KAAK8P,eAAeD,SAAW6Z,EAGhC,MAAOlS,GAGAnb,GAAAoE,UAAAiqB,eAAR,SAAuBzqB,EAAauO,GAEnC,GAAImc,EACJ,IAAIC,EACJ,IAAIC,EAEJ,QAAQ5qB,GACP,IAAK5D,GAAUuC,KACf,IAAKvC,GAAU+B,KACdusB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAeoa,QAChC,MAED,KAAK7tB,GAAUgC,MACdssB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAegS,SAChC,MAED,KAAKzlB,GAAUiC,MACdqsB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAeqa,OAChC,MAED,KAAK9tB,GAAUkC,MACdosB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAehB,gBAChC,MAED,KAAKzS,GAAUmC,OACdmsB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAeiE,iBAChC,MAED,KAAK1X,GAAUoC,OACf,IAAKpC,GAAUwC,MACf,IAAKxC,GAAUyC,MACd6rB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAejB,eAChC,MAED,KAAKxS,GAAUqC,QACdisB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAe2D,SAChC,MAED,KAAKpX,GAAUsC,QACdgsB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAesa,UAChC,MAED,KAAK/tB,GAAU0C,UACd,MAAOiB,MAAK8P,eAAeuH,aAAa7I,EAEzC,KAAKnS,GAAU4C,UACf,IAAK5C,GAAU6C,UACf,IAAK7C,GAAU8C,UACf,IAAK9C,GAAU+C,OACf,IAAK/C,GAAUgD,OACf,IAAKhD,GAAUiD,OACf,IAAKjD,GAAUkD,OACdorB,EAAW,CACXC,GAAY5qB,KAAK8P,eAAesa,UAChC,MACD,KAAK/tB,GAAUyuB,WACdD,EAAW7qB,KAAKwP,YACjB,KAAKnT,GAAU0uB,cACdF,EAAW7qB,KAAKsP,eACjB,KAAKjT,GAAU2M,gBACd6hB,EAAW7qB,KAAK0P,cACjB,SACC,GAAImb,EAAU,CACbF,EAAW,CACXC,GAAY5qB,KAAK8P,eAAesa,eAC1B,CACNO,EAAW,CACXC,GAAY5qB,KAAK8P,eAAe2D,WAInC,GAAIkX,EAAWnc,EAAK,CACnB,GAAIwc,KACJ,IAAIC,GAAmBzc,EAAImc,CAE3B,KAAK,GAAIO,GAAkB,EAAGA,EAAWD,EAAWC,IACnDF,EAAKE,GAAYN,EAAU5uB,KAAKgE,KAAK8P,eAEtC,OAAOkb,OACD,CACN,MAAOJ,GAAU5uB,KAAKgE,KAAK8P,iBAIrBzT,GAAAoE,UAAA+M,YAAR,WAECxN,KAAKsN,UAAUuC,SAAW,CAE1B7P,MAAKuL,SAAS,GAAKvL,KAAKsN,UAAUwB,kBAClC9O,MAAKuL,SAAS,GAAKvL,KAAKsN,UAAUwB,kBAElC,IAAIP,GAAevO,KAAKsN,UAAUyG,mBAElC/T,MAAKmrB,WAAanc,GAASC,KAAKV,EAAOS,GAASO,MAGhD,IAAKvP,KAAKuL,SAAS,IAAM,GAAOvL,KAAKuL,SAAS,IAAM,EAAI,CACvDvL,KAAKsP,gBAAkBN,GAASC,KAAKV,EAAOS,GAASS,MACrDzP,MAAKwP,aAAeR,GAASC,KAAKV,EAAOS,GAASW,MAClD3P,MAAK0P,eAAiBV,GAASC,KAAKV,EAAOS,GAASE,OAGrDlP,KAAKyN,aAAezN,KAAKsN,UAAUwB,kBAEnC,IAAI9O,KAAKqH,OAAQ,CAChBgF,QAAQC,IAAI,+BAAiCtM,KAAKuL,SAAS,GAAK,MAAQvL,KAAKuL,SAAS,GACtFc,SAAQC,IAAI,mCAAqCtM,KAAKyN,aAAe,kBAAoBzN,KAAKmrB,WAAa,yBAA2BnrB,KAAKsP,gBAAkB,2BAA6BtP,KAAKwP,aAAe,6BAA+BxP,KAAK0P,gBAInP,GAAI0b,GAAkBprB,KAAKsN,UAAUuB,iBACrC,KAAK7O,KAAKmrB,YAAcC,GAAYprB,KAAKsN,UAAUM,oBAClD5N,KAAK0N,eAAe,0DAIdrR,GAAAoE,UAAAqnB,wBAAR,SAAgCuD,GAE/B,GAAIrrB,KAAKqK,QAAQghB,GAAU/gB,eAAgBrH,GAAA3G,QAC1C+uB,EAAWrrB,KAAKqK,QAAQghB,GAAUrT,KAEnC,IAAIhY,KAAKqK,QAAQghB,GAAUxqB,sBAC1B,MAAOb,MAAKqK,QAAQghB,GAAUxqB,qBAE/B,IAAIkX,GAAgC/X,KAAKqK,QAAQghB,GAAU/gB,IAC3D,IAAIuP,EACJ,IAAIhZ,GAA+Cb,KAAKqK,QAAQghB,GAAUxqB,sBAAwB,GAAIR,MAEtG,IAAImO,GAAauJ,EAASW,KAC1B,KAAK,GAAI4S,GAAe,EAAGA,EAAS9c,EAAK8c,IAAU,CAClDzR,EAA8B9B,EAASY,aAAa2S,GAAQzR,QAC5DhZ,GAAsByqB,GAAUzR,EAASsE,IAAIzI,IAAImE,EAAS0R,aAG3D,MAAOvrB,MAAKqK,QAAQghB,GAAUxqB,sBAGvBxE,GAAAoE,UAAA2R,YAAR,WAEC,MAAOpS,MAAK8P,eAAeuH,aAAarX,KAAK8P,eAAeiE,qBAGrD1X,GAAAoE,UAAAyd,WAAR,SAAmBsN,GAAA,GAAAA,QAAA,GAAyB,CAAzBA,EAAA,MAElB,GAAIA,EACH,MAAOxrB,MAAK8P,eAAesa,YAE5B,OAAOpqB,MAAK8P,eAAe2D,YAGpBpX,GAAAoE,UAAAqf,cAAR,WAEC,MAAO,IAAI7d,GAAA3F,QAAS0D,KAAK6mB,wBAGlBxqB,GAAAoE,UAAA8Y,qBAAR,WAEC,GAAIkS,GAAwB,GAAIprB,OAAc,EAE9C,KAAK,GAAI3E,GAAW,EAAGA,EAAI,EAAGA,IAC7B+vB,EAAQ/vB,GAAKsE,KAAK8P,eAAe2D,WAElC,OAAOgY,GAGApvB,GAAAoE,UAAAomB,qBAAR,WAEC,GAAI4E,GAAuB,GAAInP,cAAa,GAE5CmP,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAK,CACbA,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAK,CACbA,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,GAAKzrB,KAAKke,WAAWle,KAAKsP,gBAClCmc,GAAQ,IAAMzrB,KAAKke,WAAWle,KAAKsP,gBACnCmc,GAAQ,IAAM,CACdA,GAAQ,IAAMzrB,KAAKke,WAAWle,KAAKsP,gBACnCmc,GAAQ,IAAMzrB,KAAKke,WAAWle,KAAKsP,gBACnCmc,GAAQ,IAAMzrB,KAAKke,WAAWle,KAAKsP,gBACnCmc,GAAQ,IAAM,CAId,IAAIC,MAAMD,EAAQ,IAAK,CACtBA,EAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,IAAM,CACdA,GAAQ,IAAM,CACdA,GAAQ,IAAM,CACdA,GAAQ,IAAM,EAGf,MAAOA,GAxjGMpvB,GAAA2B,qBAA8B,MAC9B3B,GAAA4B,aAAsB,CACtB5B,GAAA6B,QAAiB,CACjB7B,GAAA8B,KAAc,CACd9B,GAAA+B,KAAc,CACd/B,GAAAgC,MAAe,CACfhC,GAAAiC,MAAe,CACfjC,GAAAkC,MAAe,CACflC,GAAAmC,OAAgB,CAChBnC,GAAAoC,OAAgB,CAChBpC,GAAAqC,QAAiB,CACjBrC,GAAAsC,QAAiB,CACjBtC,GAAAuC,KAAc,EACdvC,GAAAwC,MAAe,EACfxC,GAAAyC,MAAe,EACfzC,GAAA0C,UAAmB,EACnB1C,GAAA2C,aAAsB,EACtB3C,GAAA4C,UAAmB,EACnB5C,GAAA6C,UAAmB,EACnB7C,GAAA8C,UAAmB,EACnB9C,GAAA+C,OAAgB,EAChB/C,GAAAgD,OAAgB,EAChBhD,GAAAiD,OAAgB,EAChBjD,GAAAkD,OAAgB,EAChBlD,GAAAyuB,WAAoB,EACpBzuB,GAAA0uB,cAAuB,EACvB1uB,GAAA2M,gBAAyB,EA6qBxB3M,GAAAmZ,sBACdtZ,EAAEG,EAAUmC,OACZqK,EAAExM,EAAUqC,QACZoK,EAAEzM,EAAUkC,MACZotB,EAAEtvB,EAAUkC,MACZqtB,EAAEvvB,EAAUkC,MACZstB,EAAExvB,EAAUkC,MACZutB,EAAEzvB,EAAUqC,QACZqtB,EAAE1vB,EAAUqC,QACZstB,EAAE3vB,EAAUqC,QACZutB,GAAG5vB,EAAUqC,QAyDCrC,GAAAob,qBACdvb,EAAEG,EAAUuC,KACZkK,EAAEzM,EAAUuC,KACZ+sB,EAAEtvB,EAAUuC,KACZgtB,EAAEvvB,EAAUuC,KACZktB,EAAEzvB,EAAUkC,MACZwtB,EAAE1vB,EAAUkC,MACZytB,EAAE3vB,EAAUkC,MAEElC,GAAAka,gBAAgC,SAAU,UAAW,QAAS,QAiO9Dla,GAAA8gB,qBACdjhB,EAAEG,EAAUqC,QACZmK,EAAExM,EAAUmC,OACZsK,EAAEzM,EAAUkC,MA2MElC,GAAAkhB,oBACdrhB,EAAEG,EAAUyuB,WACZjiB,EAAExM,EAAUyuB,WAEEzuB,GAAA0hB,oBACd7hB,EAAEG,EAAUyuB,WACZjiB,EAAExM,EAAUyuB,WA+KEzuB,GAAAgjB,qBACdtW,IAAI1M,EAAUyuB,WACd7hB,IAAI5M,EAAUyuB,WACd5hB,IAAI7M,EAAUyuB,WACdoB,IAAI7vB,EAAUyuB,WACdqB,IAAI9vB,EAAUyuB,WACdzhB,IAAIhN,EAAUmC,OACd8K,IAAIjN,EAAUmC,OACd4tB,IAAI/vB,EAAUmC,OACdmL,IAAItN,EAAUuC,KACdgL,IAAIvN,EAAUuC,KACdytB,IAAIhwB,EAAUuC,KACd0tB,IAAIjwB,EAAUuC,KAEAvC,GAAAqjB,gBAAgC,sBAAuB,uBAAwB,sBAAuB,wBAAyB,0BAA2B,uBAAwB,0BAA2B,wBA8E7MrjB,GAAA8jB,qBACdjkB,EAAEG,EAAU0uB,cACZliB,EAAExM,EAAU0uB,cACZjiB,EAAEzM,EAAU0uB,cACZY,EAAEtvB,EAAUkC,MA2CElC,GAAAmkB,0BACdtkB,EAAEG,EAAU0uB,cACZliB,EAAExM,EAAU0uB,cACZjiB,EAAEzM,EAAU0uB,cACZY,EAAEtvB,EAAUkC,MACZqtB,EAAEvvB,EAAUuC,KAkGEvC,GAAA2kB,iBACd9kB,EAAEG,EAAU2M,gBACZH,EAAExM,EAAU2M,gBACZF,EAAEzM,EAAUwC,MACZ8sB,EAAEtvB,EAAU2M,gBACZ4iB,EAAEvvB,EAAU2M,gBACZ6iB,EAAExvB,EAAUuC,KACZktB,EAAEzvB,EAAUwC,MACZktB,EAAE1vB,EAAU2M,gBACZgjB,EAAE3vB,EAAUkC,MACZ0tB,GAAG5vB,EAAUkC,MACbguB,GAAGlwB,EAAU2M,gBACbwjB,GAAGnwB,EAAUmC,OACbiuB,GAAGpwB,EAAU0uB,cACb2B,GAAGrwB,EAAU0uB,cACb4B,GAAGtwB,EAAU0uB,cAsFC1uB,GAAA2lB,kBACdjZ,IAAI1M,EAAU2M,gBACdC,IAAI5M,EAAU2M,gBACdE,IAAI7M,EAAU2M,gBACdgB,IAAI3N,EAAU2M,gBAEA3M,GAAA6lB,uBACdhmB,EAAEG,EAAU0uB,cACZliB,EAAExM,EAAU0uB,cACZjiB,EAAEzM,EAAU0uB,cACZY,EAAEtvB,EAAUkC,MA0FElC,GAAAumB,oBACd1mB,EAAEG,EAAUiC,MACZuK,EAAExM,EAAUyC,MACZmtB,GAAG5vB,EAAU2M,gBACbujB,GAAGlwB,EAAUuC,KACb4tB,GAAGnwB,EAAU2M,gBACb4jB,GAAGvwB,EAAUuC,KAuECvC,GAAAmnB,uBAAgCtnB,EAAEG,EAAUoC,OAC1DoK,EAAExM,EAAUyC,MACZgK,EAAEzM,EAAUyC,MACZ6sB,EAAEtvB,EAAUkC,MACZqtB,EAAEvvB,EAAUuC,KACZitB,EAAExvB,EAAUuC,KACZktB,EAAEzvB,EAAUuC,KACZmtB,EAAE1vB,EAAUuC,KACZotB,EAAE3vB,EAAUkC,MACZ0tB,GAAG5vB,EAAU2M,gBACbujB,GAAGlwB,EAAUuC,KACb4tB,GAAGnwB,EAAU2M,gBACb4jB,GAAGvwB,EAAUuC,KACbiuB,GAAGxwB,EAAU2M,gBACb8jB,GAAGzwB,EAAUoC,OACbsuB,GAAG1wB,EAAUyC,MACbkuB,GAAG3wB,EAAU2M,gBACbikB,GAAG5wB,EAAU2M,gBACbkkB,GAAG7wB,EAAUoC,OACbguB,GAAGpwB,EAAUyC,MACb4tB,GAAGrwB,EAAUyC,MAECzC,GAAA8nB,qBACdjoB,EAAEG,EAAUyC,MACZ+J,EAAExM,EAAUyC,MACZgK,EAAEzM,EAAUyC,MACZiK,IAAI1M,EAAU2M,gBACdC,IAAI5M,EAAU2M,gBACdE,IAAI7M,EAAU2M,gBACdG,IAAI9M,EAAUoC,OACd2K,IAAI/M,EAAUoC,OACd4K,IAAIhN,EAAUmC,OACd8K,IAAIjN,EAAUmC,OACd+K,IAAIlN,EAAUkC,MACdiL,IAAInN,EAAUkC,MACdkL,IAAIpN,EAAUwC,MACd6K,IAAIrN,EAAUwC,MACd8K,IAAItN,EAAUuC,KACdgL,IAAIvN,EAAUuC,KACdiL,IAAIxN,EAAUkD,OA6UAlD,GAAAmpB,mBACdtpB,EAAEG,EAAUyC,MAEEzC,GAAAopB,kBACdvpB,EAAEG,EAAU0uB,cACZliB,EAAExM,EAAU0uB,cACZjiB,EAAEzM,EAAU0uB,cACZY,EAAEtvB,EAAUkC,MAwCElC,GAAAqpB,oBACdxpB,EAAEG,EAAUoC,OACZoK,EAAExM,EAAU0C,UACZ+J,EAAEzM,EAAU0C,UACZ4sB,EAAEtvB,EAAU0C,UACZ6sB,EAAEvvB,EAAU0C,UA6RE1C,GAAAgsB,8BACdnsB,EAAEG,EAAUmC,OAoDEnC,GAAAysB,uBAAgC5sB,EAAEG,EAAUyC,MAic5D,OAAAzC,IAllGwBgG,EAAA/F,QAolGxBkD,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MJveA3D,GAAQO,QIueOD,EAGf,IAAAiuB,IAAA,WAAA,QAAAA,MAEQA,EAAA7pB,UAAAgqB,IAAP,SAAWF,EAAY7qB,GAEtBM,KAAKuqB,GAAO7qB,EAGN4qB,GAAA7pB,UAAAiV,IAAP,SAAW6U,EAAY4C,GAEtB,MAAQntB,MAAKuqB,IAAQ4C,EAEvB,OAAA7C,KAKA,IAAAtb,IAAA,WAAA,QAAAA,MAmBeA,EAAAC,KAAd,SAAmBV,EAAc6e,GAEhC,OAAQ7e,EAAQ6e,IAAaA,EAnBhBpe,GAAAO,MAAe,CACfP,GAAAS,MAAe,CACfT,GAAAW,MAAe,CACfX,GAAAE,MAAe,CACfF,GAAAI,MAAe,EACfJ,GAAAqe,MAAe,EACfre,GAAAse,MAAe,EACfte,GAAAue,MAAe,GACfve,GAAAwe,MAAe,GACfxe,GAAAye,OAAgB,GAChBze,GAAA0e,OAAgB,IAChB1e,GAAA2e,OAAgB,IAChB3e,GAAA4e,OAAgB,IAChB5e,GAAA6e,OAAgB,IAChB7e,GAAA8e,OAAgB,KAChB9e,GAAA+e,OAAgB,KAM/B,OAAA/e,QJzeGgf,8CAA8Cxb,UAAUyb,6CAA6Czb,UAAU0b,8CAA8C1b,UAAU2b,8CAA8C3b,UAAU4b,sCAAsC5b,UAAU6b,8BAA8B7b,UAAU8b,gCAAgC9b,UAAU+b,iCAAiC/b,UAAUgc,gCAAgChc,UAAUic,wCAAwCjc,UAAUkc,kCAAkClc,UAAUmc,kCAAkCnc,UAAUoc,uCAAuCpc,UAAUqc,0CAA0Crc,UAAUsc,iCAAiCtc,UAAUuc,qCAAqCvc,UAAUwc,sCAAsCxc,UAAUyc,8DAA8Dzc;AAAU0c,qDAAqD1c,UAAU2c,oDAAoD3c,UAAU4c,kCAAkC5c,UAAU6c,gCAAgC7c,UAAU8c,mCAAmC9c,UAAU+c,uCAAuC/c,UAAUgd,oCAAoChd,UAAUid,8CAA8Cjd,UAAUkd,oDAAoDld,UAAUmd,wCAAwCnd,UAAUod,oCAAoCpd,UAAUqd,oCAAoCrd,UAAUsd,2CAA2Ctd,UAAUud,uCAAuCvd,UAAUwd,+CAA+Cxd,UAAUyd,qDAAqDzd,UAAU0d,6CAA6C1d,UAAU2d,8DAA8D3d,UAAU4d,iEAAiE5d,UAAU6d,qEAAqE7d,UAAU8d,wCAAwC9d,UAAU+d,oDAAoD/d,UAAUge,iDAAiDhe,UAAUie,iDAAiDje,UAAUke,qDAAqDle,UAAUme,kDAAkDne,UAAUoe,mDAAmDpe,UAAUqe,kDAAkDre,UAAUse,+BAA+Bte,UAAUue,qCAAqCve,UAAUwe,0CAA0Cxe,UAAUye,8CAA8Cze,UAAU0e,gDAAgD1e,UAAU2e,4CAA4C3e,UAAU4e,gDAAgD5e,UAAU6e,yDAAyD7e,UAAU8e,sDAAsD9e,UAAU+e,wDAAwD/e,UAAUgf,2DAA2Dhf,UAAUif,2DAA2Djf,UAAUkf,uDAAuDlf,UAAUmf,2DAA2Dnf,UAAUof,6DAA6Dpf,UAAUqf,gEAAgErf,UAAUsf,wDAAwDtf,UAAUuf,qDAAqDvf,UAAUwf,+DAA+Dxf,UAAUyf,0DAA0Dzf,UAAU0f,0DAA0D1f,UAAU2f,6DAA6D3f,UAAU4f,0DAA0D5f,UAAU6f,0DAA0D7f,UAAU8f,sDAAsD9f,UAAU+f,sDAAsD/f,UAAUggB,sDAAsDhgB,UAAUigB,+DAA+DjgB,UAAUkgB,uDAAuDlgB,UAAUmgB,2DAA2DngB,UAAUogB,yDAAyDpgB,UAAU7S,8CAA8C,8CAA8CkzB,mDAAmDrgB,UAAUsgB,uDAAuDtgB,UAAUugB,mDAAmDvgB,UAAUwgB,qDAAqDxgB,UAAUygB,iDAAiDzgB,UAAU0gB,iDAAiD1gB,UAAU2gB,gDAAgD3gB,UAAU4gB,qDAAqD5gB,UAAU6gB,oDAAoD7gB,UAAU8gB,yDAAyD9gB,UAAU+gB,uDAAuD/gB,YAAYpV,gCAAgC,SAASnC,EAAQkB,EAAOJ,GACtrK,YACA,IAAIkF,GAAajB,MAAQA,KAAKiB,WAAc,SAAUC,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOtB,KAAKuB,YAAcL,EACnCA,EAAET,UAAYU,IAAM,KAAO3B,OAAOgC,OAAOL,IAAMG,EAAGb,UAAYU,EAAEV,UAAW,GAAIa,IK7xFnF,IAAAG,GAAAxG,EAAiC,8CAGjC,IAAAkH,GAAAlH,EAAmC,0CACnC,IAAAmH,GAAAnH,EAA4B,iCAC5B,IAAAoH,GAAApH,EAA4B,qCAC5B,IAAAqH,GAAArH,EAA6B,sCAI7B,IAAA2H,GAAA3H,EAA2B,uCAC3B,IAAA4H,GAAA5H,EAAiC,+CACjC,IAAA0H,GAAA1H,EAAqC,oDAGrC,IAAAgI,GAAAhI,EAAyB,oCACzB,IAAAmI,GAAAnI,EAAqC,qDAGrC,IAAA0J,GAAA1J,EAA+B,uDAC/B,IAAAiJ,GAAAjJ,EAAkC,qDAElC,IAAA4J,GAAA5J,EAA+B,4CAC/B,IAAA2J,GAAA3J,EAAkC,gDAKlC,IAAAyB,GAAA,SAAAwK,GAAwBjG,EAAAvE,EAAAwK,EAsDvB,SAAAxK,GAAY82B,EAA4BC,GAA5B,GAAAD,QAAA,GAA0B,CAA1BA,EAAA,MAA4B,GAAAC,QAAA,GAAgC,CAAhCA,EAAA,KAEvCvsB,EAAAlL,KAAAgE,KAAMmC,EAAA7F,QAAoB8K,aApDnBpH,MAAA0zB,WAAoB,GAAIl0B,OA+BxBQ,MAAA2zB,cAAmC,GAAIzvB,GAAA5H,OAWvC0D,MAAA4zB,cAAwB,KACxB5zB,MAAA6zB,gBAA0B,KAUjC7zB,MAAK8zB,aAAeN,CACpBxzB,MAAK+zB,mBAAqBN,EAQb/2B,EAAA8O,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQP/O,GAAAiP,aAAd,SAA2BrB,GAE1B,MAAQhI,GAAAhG,QAAYsP,SAAStB,EAAM,IAAM,OAMnC5N,GAAA+D,UAAAoL,oBAAP,SAA2BC,GAE1B,GAAIA,EAAmBC,OAAO9P,QAAU,EACvC,MAED,IAAIka,GAA0B,GAAItR,GAAAvI,QAA+BwP,EAAmBC,OAAO,GAE3F,IAAI/L,KAAK+iB,cAAgB,EACxB5M,EAAS6M,KAAOpe,EAAAtI,QAAmB2mB,UAGVjjB,MAAKmO,UAAW+R,SAASlgB,KAAKg0B,QAExD7d,GAAS/J,KAAOpM,KAAKg0B,QAAQ7d,SAAS/J,IACtCpM,MAAKg0B,QAAQ7d,SAAWA,CACxBnW,MAAKmM,gBAAgBgK,EACrBnW,MAAKmM,gBAAgBnM,KAAKg0B,QAAQjc,SAClC/X,MAAKmM,gBAAgBnM,KAAKg0B,QAE1Bh0B,MAAK4zB,cAAgB,KAMfl3B,GAAA+D,UAAAqM,2BAAP,SAAkChB,GAGjC,GAAI9L,KAAK+iB,aAAe,EAAG,CAC1B/iB,KAAKg0B,QAAQ7d,SAAW/S,EAAA9G,QAAuB+b,yBACzC,CACNrY,KAAKg0B,QAAQ7d,SAAW,GAAItR,GAAAvI,QAAe8G,EAAA9G,QAAuB23B,oBAChDj0B,MAAKg0B,QAAQ7d,SAAU6M,KAAOpe,EAAAtI,QAAmB2mB,WAI1CjjB,KAAKmO,UAAW+R,SAASlgB,KAAKg0B,QAExDh0B,MAAKmM,gBAAgBnM,KAAKg0B,QAAQjc,SAClC/X,MAAKmM,gBAAgBnM,KAAKg0B,QAC1Bh0B,MAAK4zB,cAAgB,KAOfl3B,GAAA+D,UAAA4M,iBAAP,WAEC,IAAKrN,KAAKuH,gBAAiB,CAC1BvH,KAAKsN,UAAYtN,KAAKuN,eACtBvN,MAAKuH,gBAAkB,IAIvBvH,MAAKsN,UAAUuC,SAAW,EAG3B,MAAO7P,KAAKk0B,YAAa,CACxB,IAAKl0B,KAAKm0B,cAAe,CAQxBn0B,KAAKg0B,QAAU,GAAI/wB,GAAA3G,OACnB0D,MAAKo0B,UAAYp0B,KAAKg0B,QAAQjc,QAC9B,IAAI/X,KAAK+iB,aAAe,EAAG,CAC1B/iB,KAAKg0B,QAAQ7d,SAAW/S,EAAA9G,QAAuB+b,yBACzC,CACNrY,KAAKg0B,QAAQ7d,SAAW,GAAItR,GAAAvI,QAAe8G,EAAA9G,QAAuB23B,oBAChDj0B,MAAKg0B,QAAQ7d,SAAU6M,KAAOpe,EAAAtI,QAAmB2mB,WAOpEjjB,KAAKwN,aACLxN,MAAKq0B,yBACC,KAAKr0B,KAAKs0B,UAAW,CAC3Bt0B,KAAKu0B,cACC,KAAKv0B,KAAKw0B,aAAc,CAC9Bx0B,KAAKy0B,iBACC,KAAKz0B,KAAK00B,cAAe,CAC/B10B,KAAK20B,kBACC,IAAK30B,KAAoB,iBAAMA,KAAkB,cAAG,CAC1D,MAAOqC,GAAA/F,QAAWyR,iBACZ,KAAK/N,KAAK6zB,gBAAiB,CACjC7zB,KAAK6zB,gBAAkB,IAEvB7zB,MAAKo0B,UAAU/V,WAAWre,KAAK40B,eAAeC,QAE9C70B,MAAKg0B,QAAQ5nB,KAAO,EACpB,IAAIpM,KAAK4zB,cAAe,CAEG5zB,KAAKmO,UAAW+R,SAASlgB,KAAKg0B,QAExDh0B,MAAKmM,gBAAgBnM,KAAKg0B,QAAQjc,SAClC/X,MAAKmM,gBAAgBnM,KAAKg0B,SAG3Bh0B,KAAKma,kCAIP,MAAO9X,GAAA/F,QAAW0R,cAGZtR,GAAA+D,UAAAwN,eAAP,SAAsBC,GAGrBlO,KAAKmO,UAAY,GAAIxL,GAAArG,OAErB4K,GAAAzG,UAAMwN,eAAcjS,KAAAgE,KAACkO,GAOdxR,GAAA+D,UAAA+M,YAAR,WAECxN,KAAK80B,OAAS90B,KAAKsN,UAAU6c,SAC7BnqB,MAAKuL,SAAWvL,KAAKsN,UAAU6c,SAC/BnqB,MAAK+0B,WAAa/0B,KAAKsN,UAAU6c,SACjCnqB,MAAKg1B,YAAch1B,KAAKsN,UAAU6c,SAElCnqB,MAAKsN,UAAU6c,SACfnqB,MAAKi1B,UAAYj1B,KAAKsN,UAAU6c,SAChCnqB,MAAKk1B,aAAel1B,KAAKsN,UAAU6c,SACnCnqB,MAAKm1B,OAASn1B,KAAKsN,UAAU6c,SAC7BnqB,MAAKo1B,SAAWp1B,KAAKsN,UAAU6c,SAE/BnqB,MAAKsN,UAAU6c,SACfnqB,MAAKq1B,WAAar1B,KAAKsN,UAAU6c,SACjCnqB,MAAKs1B,aAAet1B,KAAKsN,UAAU6c,SACnCnqB,MAAKu1B,UAAYv1B,KAAKsN,UAAU6c,SAChCnqB,MAAKw1B,YAAcx1B,KAAKsN,UAAU6c,SAClCnqB,MAAKy1B,cAAgBz1B,KAAKsN,UAAU6c,SAEpCnqB,MAAKsN,UAAU6c,SACfnqB,MAAK01B,WAAa11B,KAAKsN,UAAU6c,SAEjCnqB,MAAKm0B,cAAgB,KAMdz3B,GAAA+D,UAAA4zB,mBAAR,WAEC,GAAIra,EACJ,IAAI5N,EACJ,IAAIupB,EACJ,IAAIC,EACJ51B,MAAK61B,eAAiB,GAAIx1B,MAC1BL,MAAKsN,UAAUuC,SAAW7P,KAAKs1B,YAE/B,IAAIQ,GAAgB,GAAIC,QAAO,oBAAsB,IACrD,KAAK,GAAIr6B,GAAoB,EAAGA,EAAIsE,KAAKi1B,YAAav5B,EAAG,CACxD0Q,EAAOpM,KAAKsN,UAAU+J,aAAa,GACnCjL,GAAOA,EAAK4pB,QAAQF,EAAQ,GAC5BH,GAAWvpB,EAAK6pB,YAAY,IAC5B,IAAIj2B,KAAK+zB,mBACR6B,EAAaxpB,EAAK6pB,YAAY,IAC/B,IAAI7pB,EAAKV,cAAcwqB,QAAQ,UAAY,GAAK9pB,EAAKV,cAAcwqB,QAAQ,UAAY,EAAG,CACzF9pB,EAAOA,EAAK+pB,UAAUP,EAAa,EAAGD,EACtC3b,GAAM5N,EAAO,IAAMpM,KAAK8zB,iBAClB,CACN9Z,EAAM5N,EAGPpM,KAAK61B,eAAen6B,GAAK0Q,CAGzB,IAAIpM,KAAKo2B,aAAan6B,QAAU,EAC/B+D,KAAKia,gBAAgB7N,EAAM,GAAIhK,GAAA9F,QAAW0d,IAG5C,GAAIha,KAAK61B,eAAe55B,OAAS,EAChC+D,KAAKg0B,QAAQ7d,SAAS/J,KAAOpM,KAAK61B,eAAe,OAEjD71B,MAAK4zB,cAAgB,KAMfl3B,GAAA+D,UAAA8zB,QAAR,WAEC,GAAI5gB,GAAoB,CAExB3T,MAAKq2B,KAAO,GAAIh2B,OAAcL,KAAKm1B,OAAO,EAC1Cn1B,MAAKsN,UAAUuC,SAAW7P,KAAKu1B,SAC/B,KAAK,GAAI75B,GAAoB,EAAGA,EAAIsE,KAAKm1B,OAAQz5B,IAAK,CACrDsE,KAAKq2B,KAAK1iB,KAAO3T,KAAKsN,UAAUwU,YAAY9hB,KAAK+0B,UACjD/0B,MAAKq2B,KAAK1iB,KAAO3T,KAAKsN,UAAUwU,YAAY9hB,KAAKg1B,YAGlDh1B,KAAKs0B,UAAY,KAMV53B,GAAA+D,UAAAg0B,WAAR,WAEC,GAAIh5B,GAAmB0F,EAAmBiN,EAAmBkoB,EAAoBC,EAAoBC,CACrG,IAAI96B,EAEJsE,MAAKy2B,aAAe,GAAIp2B,MACxBL,MAAK02B,WAAa,GAAIr2B,MACtBL,MAAK22B,SAAW,GAAIt2B,MAEpBL,MAAKsN,UAAUuC,SAAW7P,KAAKw1B,WAE/B,KAAK95B,EAAI,EAAGA,EAAIsE,KAAKo1B,SAAU15B,IAAK,CAEnCD,EAAIuE,KAAKsN,UAAUyG,mBACnB5S,GAAInB,KAAKsN,UAAUyG,mBACnB3F,GAAIpO,KAAKsN,UAAUyG,mBAGnBuiB,GAAKt2B,KAAKsN,UAAUyG,mBACpBwiB,GAAKv2B,KAAKsN,UAAUyG,mBACpByiB,GAAKx2B,KAAKsN,UAAUyG,mBAEpB/T,MAAK42B,SAASn7B,EAAG66B,EACjBt2B,MAAK42B,SAASz1B,EAAGo1B,EACjBv2B,MAAK42B,SAASxoB,EAAGooB,GAGlB,GAAIhoB,GAAsBxO,KAAK02B,WAAWz6B,MAC1C+D,MAAK62B,SAAW,GAAIx2B,OAAcmO,EAAI,EAEtC,KAAK9S,EAAI,EAAGA,EAAI8S,IAAO9S,EAAG,CACzBsE,KAAK62B,SAASn7B,GAAK,GAAKsE,KAAKq2B,KAAKr2B,KAAK02B,WAAWh7B,IAAM,EACxDsE,MAAK62B,UAAUn7B,GAAK,GAAK,GAAKsE,KAAKq2B,MAAMr2B,KAAK02B,WAAWh7B,IAAM,GAAK,GAGrEsE,KAAKw0B,aAAe,KASb93B,GAAA+D,UAAAm2B,SAAR,SAAiBE,EAA6BC,GAE7C,GAAIC,GAAuBh3B,KAAKi3B,UAAUH,EAAaC,EAEvD,IAAIC,IAAU,EAAG,CAChBh3B,KAAK22B,SAAS31B,KAAKhB,KAAKy2B,aAAax6B,OACrC+D,MAAKy2B,aAAaz1B,KAAK81B,EACvB92B,MAAK02B,WAAW11B,KAAK+1B,OAErB/2B,MAAK22B,SAAS31B,KAAKg2B,GASbt6B,GAAA+D,UAAAw2B,UAAR,SAAkBH,EAA6BC,GAE9C,GAAIvoB,GAAsBxO,KAAKy2B,aAAax6B,MAE5C,KAAK,GAAIP,GAAoB,EAAGA,EAAI8S,IAAO9S,EAAG,CAC7C,GAAIsE,KAAKy2B,aAAa/6B,IAAMo7B,GAAe92B,KAAK02B,WAAWh7B,IAAMq7B,EAChE,MAAOr7B,GAGT,OAAQ,EAMDgB,GAAA+D,UAAAk0B,YAAR,WAEC,GAAIuC,GAAWC,EAAWC,CAC1B,IAAIle,GAAWC,EAAWke,CAC1B,IAAItf,EACJ,IAAI8B,EACJ,IAAIyd,GAA0Bt3B,KAAKy2B,aAAax6B,MAChD,IAAIs7B,EACJ,IAAIC,EACJ,IAAI97B,GAAmBiY,EAAkB2O,CAEzC,IAAIlW,GAAc,EAClB,IAAIqrB,GAA0B,IAE9Bz3B,MAAKsN,UAAUuC,SAAW7P,KAAKy1B,aAE/B,KAAK/5B,EAAI,EAAGA,EAAIsE,KAAKq1B,WAAY35B,IAAK,CAErC87B,EAAY,GAAIn3B,MAChBk3B,GAAY,GAAIl3B,OAAci3B,EAAQ,EAEtCJ,GAAKl3B,KAAKsN,UAAUmG,WACpB0jB,GAAKn3B,KAAKsN,UAAUmG,WACpB2jB,GAAKp3B,KAAKsN,UAAUmG,WAEpByF,GAAKlZ,KAAKsN,UAAUmG,WACpB0F,GAAKnZ,KAAKsN,UAAUmG,WACpB4jB,GAAKr3B,KAAKsN,UAAUmG,WAEpBrH,GAAOpM,KAAK03B,eAIZ,KAAK/jB,EAAI,EAAGA,EAAI3T,KAAKk1B,aAAcvhB,IAAK3T,KAAKsN,UAAUuC,WACtD2nB,EAAUx2B,KAAKk2B,EAAGl3B,KAAKsN,UAAUwB,mBAAqBoK,EAAIie,EAAGn3B,KAAKsN,UAAUwB,mBAAqBqK,EAAIie,EAAGp3B,KAAKsN,UAAUwB,mBAAqBuoB,EAE7I/U,GAAI,CACJ,KAAK3O,EAAI,EAAGA,EAAI2jB,EAAS3jB,IAAK,CAC7B4jB,EAAUjV,KAAOkV,EAAUx3B,KAAKy2B,aAAa9iB,GAAG,EAChD4jB,GAAUjV,KAAOkV,EAAUx3B,KAAKy2B,aAAa9iB,GAAG,EAAI,EACpD4jB,GAAUjV,KAAOkV,EAAUx3B,KAAKy2B,aAAa9iB,GAAG,EAAI,GAGrDkG,EAAW,GAAIhX,GAAAvG,QAAiB,GAAImF,GAAAnF,QAEpC,IAAI0D,KAAK40B,gBAAkB,KAC1B50B,KAAK40B,eAAiB/a,CAEvB9B,GAAW,GAAInV,GAAAtG,OACfyb,GAASsG,WAAWxE,EAEpBA,GAAS6E,WAAW1e,KAAK22B,SACzB9c,GAASvF,aAAaijB,EACtB1d,GAASrF,OAAOxU,KAAK62B,SAErBhd,GAAS8E,WAAW,KACpB9E,GAASuO,YAAY,KAErBvO,GAAS2E,kBAAoB,KAC7B3E,GAAS4E,mBAAqB,KAE9B,IAAI4I,GAAsBrnB,KAAK0zB,WAAWtnB,EAE1C,KAAKib,EAAM,CAIV,GAAIoQ,EAAU,CACbz3B,KAAKmM,gBAAgBsrB,EACrBz3B,MAAK2zB,cAAcjL,aAAa+O,GAGjCpQ,EAAO,GAAI1iB,GAAArI,OACX+qB,GAAKjb,KAAOA,CACZib,GAAKc,iBAAmB,IAExBnoB,MAAK0zB,WAAWtnB,GAAQib,CAExBoQ,GAAWpQ,EAEZA,EAAKG,SAASzP,EAAU,IAAKrb,EAAUi7B,KAIxC,GAAIF,EAAU,CACbz3B,KAAKmM,gBAAgBsrB,EACrBz3B,MAAK2zB,cAAcjL,aAAa+O,GAIjCz3B,KAAKmM,gBAAgBnM,KAAK2zB,cAE1B3zB,MAAK00B,cAAgB,KAGdh4B,GAAA+D,UAAAi3B,cAAR,WAEC,GAAItrB,GAAc,EAClB,IAAIkW,GAAoB,CACxB,KAAK,GAAI3O,GAAoB,EAAGA,EAAI,GAAIA,IAAK,CAC5C,GAAIikB,GAAqB53B,KAAKsN,UAAUwB,kBAExC,IAAI4H,KAAKmhB,MAAMD,GAAM,IAAQlhB,KAAKmhB,MAAMD,IAAO,KAAQtV,GAAK,EAC3DlW,GAAQ0rB,OAAOC,aAAaH,EAE7B,IAAIlhB,KAAKmhB,MAAMD,IAAO,IAAQlhB,KAAKmhB,MAAMD,IAAO,GAC/CtV,IAEF,MAAOlW,GA5dM1P,GAAAi7B,IAAqB,CA8dpC,OAAAj7B,IAhewB2F,EAAA/F,QAkexBkD,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MLiqFA3D,GAAQO,QKjqFOI,ILmqFZsxB,8CAA8Cxb,UAAUqc,0CAA0Crc,UAAUsc,iCAAiCtc,UAAUuc,qCAAqCvc,UAAUwc,sCAAsCxc,UAAUkd,oDAAoDld,UAAUqd,oCAAoCrd,UAAUud,uCAAuCvd,UAAUwd,+CAA+Cxd,UAAUyd,qDAAqDzd,UAAU2e,4CAA4C3e,UAAU4e,gDAAgD5e,UAAUwgB,qDAAqDxgB,UAAU+gB,uDAAuD/gB,YAAYnV,oCAAoC,SAASpC,EAAQkB,EAAOJ,GAC5zB,YACA,IAAIkF,GAAajB,MAAQA,KAAKiB,WAAc,SAAUC,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOtB,KAAKuB,YAAcL,EACnCA,EAAET,UAAYU,IAAM,KAAO3B,OAAOgC,OAAOL,IAAMG,EAAGb,UAAYU,EAAEV,UAAW,GAAIa,IMtqGnF,IAAA02B,GAAA/8B,EAA4B,kCAC5B,IAAAiH,GAAAjH,EAA2B,gCAC3B,IAAAkH,GAAAlH,EAAmC,0CACnC,IAAAoH,GAAApH,EAA4B,qCAE5B,IAAAqJ,GAAArJ,EAA2B,iDAC3B,IAAAuJ,GAAAvJ,EAA8B,oDAC9B,IAAAyJ,GAAAzJ,EAAiC,yDAOjC,IAAA2B,GAAA,SAAAsK,GAA4BjG,EAAArE,EAAAsK,EAyC3B,SAAAtK,GAAYq7B,EAAwCC,GAAxC,GAAAD,QAAA,GAAsC,CAAtCA,EAAA,KAAwC,GAAAC,QAAA,GAAoC,CAApCA,EAAA,EAEnDhxB,EAAAlL,KAAAgE,KAAMmC,EAAA7F,QAAoB67B,KAzBnBn4B,MAAAo4B,YAA6B,CAE7Bp4B,MAAAq4B,MAAuB,CACvBr4B,MAAAs4B,eAAgC,CAuBvCt4B,MAAKu4B,cAAgB,GAAIP,GAAA17B,OACzB,IAAIk8B,GAAgB,GAAIR,GAAA17B,OACxB,IAAIm8B,GAAgB,GAAIT,GAAA17B,OAExBk8B,GAAGE,cAAcx2B,EAAA5F,QAASq8B,QAASjiB,KAAKkiB,GAAG,GAC3CH,GAAGC,cAAcx2B,EAAA5F,QAASu8B,QAASniB,KAAKkiB,GAAG,GAE3C54B,MAAKu4B,cAAcO,SAASL,EAAID,EAEhC,IAAIP,EAAwB,CAC3Bj4B,KAAKu4B,cAAcO,SAASL,EAAID,EAChCA,GAAGE,cAAcT,EAAwBC,EACzCl4B,MAAKu4B,cAAcO,SAASN,EAAIx4B,KAAKu4B,gBASzB37B,EAAA4O,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,UAQP7O,GAAA+O,aAAd,SAA2BrB,GAE1B,MAAO,OAMD1N,GAAA6D,UAAA4M,iBAAP,WAEC,GAAI0rB,EAEJ,KAAK/4B,KAAKuH,gBAAiB,CAC1BvH,KAAKg5B,UAAYh5B,KAAKi5B,eACtBj5B,MAAKuH,gBAAkB,KAGxB,MAAOvH,KAAKk0B,YAAa,CACxB6E,EAAQ/4B,KAAKk5B,cACb,QAAQH,GACP,IAAKn8B,GAAcu8B,cAClBn5B,KAAKo5B,YACL,MACD,KAAK,GAEJ,KACD,KAAKx8B,GAAcy8B,cAClBr5B,KAAKuL,SAAWvL,KAAKs5B,YACrB,IAAIt5B,KAAKuL,UAAY,GACpB,KAAM,IAAI3P,OAAM,sCACjB,MACD,KAAKgB,GAAc28B,mBAClBv5B,KAAKw5B,UACL,MACD,KAAK58B,GAAc68B,iBAClBz5B,KAAKq1B,WAAar1B,KAAKs5B,YACvBt5B,MAAK05B,QAAU,GAAIr5B,MACnBL,MAAK25B,WAAa,GAAIt5B,MACtB,MACD,KAAKzD,GAAcg9B,iBAClB55B,KAAK65B,WAAa75B,KAAKs5B,YACvBt5B,MAAK85B,WAAa,GAAIz5B,OAAqBL,KAAK65B,WAChD75B,MAAK+5B,eAAiB,GAAI15B,OAAqBL,KAAK65B,WACpD,MACD,KAAKj9B,GAAco9B,iBAClBh6B,KAAKi6B,WAAaj6B,KAAKs5B,YACvB,MACD,KAAK18B,GAAcs9B,8BAClBl6B,KAAKm6B,uBAAyBn6B,KAAKs5B,YACnC,MACD,KAAK18B,GAAcw9B,gBAClBp6B,KAAKq6B,gBACL,MACD,KAAKz9B,GAAc09B,aAClBt6B,KAAKu6B,aACL,MACD,KAAK39B,GAAc49B,iBAClBx6B,KAAKy6B,gBACL,MACD,KAAK79B,GAAc89B,YAClB16B,KAAK26B,YACL,MACD,SACC,IAAK36B,KAAK46B,YACT56B,KAAK66B,0BAGR,GAAI76B,KAAK46B,YAAa,CACrB56B,KAAK86B,MAAQ,GAAIp2B,GAAApI,OACjB0D,MAAK+6B,eACL/6B,MAAKmM,gBAAgBnM,KAAK86B,MAC1B,OAAOz4B,GAAA/F,QAAWyR,cAGpB,MAAO1L,GAAA/F,QAAW0R,cAMXpR,GAAA6D,UAAAs6B,cAAR,WAEC,IAAK,GAAIr/B,GAAmB,EAAGA,EAAIsE,KAAKq1B,aAAc35B,EACrDsE,KAAK86B,MAAMtT,SAASxnB,KAAKg7B,cAAch7B,KAAK25B,WAAWj+B,IAAK,IAAKsE,KAAKi6B,YAQhEr9B,GAAA6D,UAAAu6B,cAAR,SAAsBC,GAErB,GAAIC,EACJ,IAAIzU,EACJ,IAAI0U,EACJ,IAAI5sB,EACJ,IAAIoF,EACJ,IAAIynB,GAAqB,GAAIl5B,GAAA5F,OAC7B,IAAIwqB,GAAyB,GAAIkR,GAAA17B,OACjC,IAAI++B,GAA2BJ,EAAUI,UACzC,IAAIC,GAAwB,GAAI92B,GAAAlI,OAChC,IAAI4qB,GAA8BoU,EAASpU,UAE3C,KAAK,GAAIxrB,GAAmB,EAAGA,EAAIsE,KAAK65B,aAAcn+B,EAAG,CACxDiY,EAAI,CACJ8S,GAAO,GAAIniB,GAAAhI,OACX4+B,GAAYl7B,KAAK85B,WAAWp+B,EAC5By/B,GAAOn7B,KAAK+5B,eAAer+B,EAC3B6S,GAAQ2sB,EAAU3sB,KAClB6sB,GAAU3hB,EAAI0hB,EAAKtrB,SAAS4J,CAC5B2hB,GAAU1hB,EAAIyhB,EAAKtrB,SAAS6J,CAC5B0hB,GAAUpd,EAAImd,EAAKtrB,SAASmO,CAC5B8I,GAAYrN,EAAI0hB,EAAKrU,YAAYrN,CACjCqN,GAAYpN,EAAIyhB,EAAKrU,YAAYpN,CACjCoN,GAAY9I,EAAImd,EAAKrU,YAAY9I,CAEjC,IAAIzP,EAAQ,EACX6sB,EAAU3hB,EAAI4hB,EAAWH,EAAUK,WAAc5nB,IAClD,IAAIpF,EAAQ,EACX6sB,EAAU1hB,EAAI2hB,EAAWH,EAAUK,WAAc5nB,IAClD,IAAIpF,EAAQ,EACX6sB,EAAUpd,EAAIqd,EAAWH,EAAUK,WAAc5nB,IAClD,IAAIpF,EAAQ,EACXuY,EAAYrN,EAAI4hB,EAAWH,EAAUK,WAAc5nB,IACpD,IAAIpF,EAAQ,GACXuY,EAAYpN,EAAI2hB,EAAWH,EAAUK,WAAc5nB,IACpD,IAAIpF,EAAQ,GACXuY,EAAY9I,EAAIqd,EAAWH,EAAUK,WAAc5nB,IAEpD,IAAI6nB,GAAW,EAAI1U,EAAYrN,EAAEqN,EAAYrN,EAAIqN,EAAYpN,EAAEoN,EAAYpN,EAAIoN,EAAY9I,EAAE8I,EAAY9I,CACzG8I,GAAY0U,EAAIA,EAAI,EAAG,GAAK9kB,KAAK+kB,KAAKD,EAEtC,IAAIN,EAAU7U,YAAc,EAAG,CAC9BI,EAAKK,YAAYgS,SAAS94B,KAAKu4B,cAAezR,EAC9CL,GAAKO,YAAchnB,KAAKu4B,cAAcmD,YAAYN,OAC5C,CACN3U,EAAKK,YAAYG,SAASH,EAC1BL,GAAKO,YAAYvN,EAAI2hB,EAAU3hB,CAC/BgN,GAAKO,YAAYtN,EAAI0hB,EAAU1hB,CAC/B+M,GAAKO,YAAYhJ,EAAIod,EAAUpd,EAEhCyI,EAAKK,YAAYpN,GAAK+M,EAAKK,YAAYpN,CACvC+M,GAAKK,YAAY9I,GAAKyI,EAAKK,YAAY9I,CACvCyI,GAAKO,YAAYvN,GAAKgN,EAAKO,YAAYvN,CAEvCyN,GAAWxrB,GAAK+qB,EAGjB,MAAO6U,GAMA1+B,GAAA6D,UAAA45B,eAAR,WAEC,GAAIzC,EACJ,IAAIttB,EACJ,IAAIyuB,GAAe/4B,KAAKk5B,cACxB,IAAIx9B,GAAmB,CAEvB,IAAIq9B,GAAS,IACZ/4B,KAAK66B,yBAEN,GAAG,CACF,GAAI76B,KAAK46B,YACR56B,KAAK27B,cACNrxB,GAAO,GAAIsxB,EACXtxB,GAAK8B,KAAOpM,KAAK67B,oBACjBvxB,GAAK+b,YAAcrmB,KAAKs5B,YACxBhvB,GAAKiE,MAAQvO,KAAKs5B,YAClBhvB,GAAKixB,WAAav7B,KAAKs5B,YACvBt5B,MAAK85B,WAAWp+B,KAAO4O,CAEvBstB,GAAK53B,KAAK87B,aAEV,IAAIlE,GAAM,IAAK,CACd53B,KAAK+7B,SACLnE,GAAK53B,KAAKk5B,cACV,IAAItB,GAAMh7B,EAAcu8B,cACvBn5B,KAAKo5B,YACNxB,GAAK53B,KAAK87B,cAGX,GAAIlE,GAAM,IACT53B,KAAK+7B,gBAEEnE,GAAM,KAMRh7B,GAAA6D,UAAA85B,YAAR,WAEC,GAAI3C,EACJ,IAAIttB,EACJ,IAAIyuB,GAAe/4B,KAAKk5B,cACxB,IAAIx9B,GAAmB,CAEvB,IAAIq9B,GAAS,IACZ/4B,KAAK66B,yBAEN,GAAG,CACF,GAAI76B,KAAK46B,YACR56B,KAAK27B,cACNrxB,GAAO,GAAI0xB,EACX1xB,GAAKsO,IAAM5Y,KAAKi8B,eAChB3xB,GAAK4xB,IAAMl8B,KAAKi8B,eAChBj8B,MAAK05B,QAAQh+B,KAAO4O,CAEpBstB,GAAK53B,KAAK87B,aAEV,IAAIlE,GAAM,IAAK,CACd53B,KAAK+7B,SACLnE,GAAK53B,KAAKk5B,cACV,IAAItB,GAAMh7B,EAAcu8B,cACvBn5B,KAAKo5B,YACNxB,GAAK53B,KAAK87B,cAGX,GAAIlE,GAAM,IACT53B,KAAK+7B,gBAEEnE,GAAM,KAMRh7B,GAAA6D,UAAAg6B,eAAR,WAEC,GAAI7C,EACJ,IAAIttB,EACJ,IAAIyuB,GAAe/4B,KAAKk5B,cACxB,IAAIx9B,GAAmB,CAEvB,IAAIq9B,GAAS,IACZ/4B,KAAK66B,yBAEN,GAAG,CACF,GAAI76B,KAAK46B,YACR56B,KAAK27B,cACNrxB,GAAO,GAAI6xB,EACX7xB,GAAKuF,SAAW7P,KAAKi8B,eACrB3xB,GAAKwc,YAAc9mB,KAAKo8B,iBACxBp8B,MAAK+5B,eAAer+B,KAAO4O,CAE3BstB,GAAK53B,KAAK87B,aAEV,IAAIlE,GAAM,IAAK,CACd53B,KAAK+7B,SACLnE,GAAK53B,KAAKk5B,cACV,IAAItB,GAAMh7B,EAAcu8B,cACvBn5B,KAAKo5B,YACNxB,GAAK53B,KAAK87B,cAGX,GAAIlE,GAAM,IACT53B,KAAK+7B,gBAEEnE,GAAM,KAMRh7B,GAAA6D,UAAAk6B,WAAR,WAEC,GAAI/C,EACJ,IAAIttB,EACJ,IAAIyuB,EACJ,IAAIsD,EAEJA,GAAar8B,KAAKs5B,YAElBP,GAAQ/4B,KAAKk5B,cACb,IAAIH,GAAS,IACZ/4B,KAAK66B,yBAEN,GAAG,CACF,GAAI76B,KAAK46B,YACR56B,KAAK27B,cACNrxB,GAAO,GAAIgyB,EACXhyB,GAAK+wB,WAAa,GAAIh7B,OAAcL,KAAKm6B,uBAEzC,KAAK,GAAIz+B,GAAmB,EAAGA,EAAIsE,KAAKm6B,yBAA0Bz+B,EACjE4O,EAAK+wB,WAAW3/B,GAAKsE,KAAKu8B,eAE3Bv8B,MAAK25B,WAAW0C,GAAc/xB,CAE9BstB,GAAK53B,KAAK87B,aAEV,IAAIlE,GAAM,IAAK,CACd53B,KAAK+7B,SACLnE,GAAK53B,KAAKk5B,cACV,IAAItB,GAAMh7B,EAAcu8B,cACvBn5B,KAAKo5B,YACNxB,GAAK53B,KAAK87B,cAGX,GAAIlE,GAAM,IACT53B,KAAK+7B,gBAEEnE,GAAM,KAMRh7B,GAAA6D,UAAAs7B,QAAR,WAEC/7B,KAAKo4B,aACLp4B,MAAKs4B,gBACLt4B,MAAK46B,YAAc56B,KAAKo4B,aAAep4B,KAAKg5B,UAAU/8B,OAM/CW,GAAA6D,UAAAy4B,aAAR,WAEC,GAAItB,EACJ,IAAImB,GAAe,EAEnB,QAAQ/4B,KAAK46B,YAAa,CACzBhD,EAAK53B,KAAK87B,aACV,IAAIlE,GAAM,KAAOA,GAAM,MAAQA,GAAM,MAAQA,GAAM,IAAM,CACxD,GAAImB,GAASn8B,EAAcu8B,cAC1Bn5B,KAAKw8B,gBACN,IAAIzD,GAAS,GACZ,MAAOA,OAERA,IAASnB,CAEV,IAAImB,GAASn8B,EAAcu8B,cAC1B,MAAOJ,GAGT,MAAOA,GAMAn8B,GAAA6D,UAAA+7B,eAAR,WAEC,GAAI5E,EAEJ,GACCA,GAAK53B,KAAK87B,oBAAsBlE,GAAM,MAAQA,GAAM,KAAOA,GAAM,MAAQA,GAAM,IAEhF53B,MAAK+7B,UAMEn/B,GAAA6D,UAAA24B,WAAR,WAEC,GAAIxB,EACJ,QAAQ53B,KAAK46B,aAAehD,GAAM,KACjCA,EAAK53B,KAAK87B,cAMJl/B,GAAA6D,UAAAq7B,YAAR,WAEC,GAAIlE,GAAY53B,KAAKg5B,UAAUyD,OAAOz8B,KAAKo4B,cAE3C,IAAIR,GAAM,KAAM,GACb53B,KAAKq4B,KACPr4B,MAAKs4B,eAAiB,MAChB,IAAIV,GAAM,OACd53B,KAAKs4B,cAER,IAAIt4B,KAAKo4B,aAAep4B,KAAKg5B,UAAU/8B,OACtC+D,KAAK46B,YAAc,IAEpB,OAAOhD,GAMAh7B,GAAA6D,UAAA64B,WAAR,WAEC,GAAI59B,GAAWuQ,SAASjM,KAAKk5B,eAC7B,IAAIxN,MAAMhwB,GACTsE,KAAK08B,eAAe,WACrB,OAAOhhC,GAMAkB,GAAA6D,UAAA87B,cAAR,WAEC,GAAI5gC,GAAWghC,WAAW38B,KAAKk5B,eAC/B,IAAIxN,MAAM/vB,GACTqE,KAAK08B,eAAe,aACrB,OAAO/gC,GAMAiB,GAAA6D,UAAAw7B,cAAR,WAEC,GAAIW,GAAe,GAAI16B,GAAA5F,OACvB,IAAIs7B,GAAY53B,KAAKk5B,cAErB,IAAItB,GAAM,IACT53B,KAAK08B,eAAe,IACrBE,GAAInjB,EAAIzZ,KAAKu8B,eACbK,GAAIljB,EAAI1Z,KAAKu8B,eACbK,GAAI5e,EAAIhe,KAAKu8B,eAEb,IAAIv8B,KAAKk5B,gBAAkB,IAC1Bl5B,KAAK08B,eAAe,IAErB,OAAOE,GAMAhgC,GAAA6D,UAAA27B,gBAAR,WAEC,GAAIS,GAAkB,GAAI7E,GAAA17B,OAC1B,IAAIs7B,GAAY53B,KAAKk5B,cAErB,IAAItB,GAAM,IACT53B,KAAK08B,eAAe,IACrBG,GAAKpjB,EAAIzZ,KAAKu8B,eACdM,GAAKnjB,EAAI1Z,KAAKu8B,eACdM,GAAK7e,EAAIhe,KAAKu8B,eAGd,IAAIphC,GAAW,EAAK0hC,EAAKpjB,EAAEojB,EAAKpjB,EAAMojB,EAAKnjB,EAAEmjB,EAAKnjB,EAAMmjB,EAAK7e,EAAE6e,EAAK7e,CACpE6e,GAAKrB,EAAIrgC,EAAI,EAAG,GAAKub,KAAK+kB,KAAKtgC,EAE/B,IAAI6E,KAAKk5B,gBAAkB,IAC1Bl5B,KAAK08B,eAAe,IAErB,OAAOG,GAMAjgC,GAAA6D,UAAA+4B,SAAR,WAGCx5B,KAAK67B,qBAOEj/B,GAAA6D,UAAAo7B,mBAAR,WAEC77B,KAAKw8B,gBAEL,IAAI5E,GAAY53B,KAAK87B,aACrB,IAAIgB,GAAa,EAEjB,IAAIlF,GAAM,IACT53B,KAAK08B,eAAe,IAErB,GAAG,CACF,GAAI18B,KAAK46B,YACR56B,KAAK27B,cACN/D,GAAK53B,KAAK87B,aACV,IAAIlE,GAAM,IACTkF,GAAOlF,QACAA,GAAM,IAEf,OAAOkF,GAMAlgC,GAAA6D,UAAAk7B,aAAR,WAEC,KAAM,IAAI//B,OAAM,0BAOTgB,GAAA6D,UAAAi8B,eAAR,SAAuBrS,GAEtB,KAAM,IAAIzuB,OAAM,6BAA+BoE,KAAKq4B,MAAQ,GAAK,eAAiBr4B,KAAKs4B,eAAiB,KAAOjO,EAAW,kBAAoBrqB,KAAKg5B,UAAUyD,OAAOz8B,KAAKo4B,YAAc,GAAK,gBAMrLx7B,GAAA6D,UAAAo6B,wBAAR,WAEC,KAAM,IAAIj/B,OAAM,4BAA8BoE,KAAKq4B,MAAQ,GAAK,eAAiBr4B,KAAKs4B,eAAiB,MAnkB1F17B,GAAAy8B,cAAuB,YACvBz8B,GAAA28B,mBAA4B,aAC5B38B,GAAA68B,iBAA0B,WAC1B78B,GAAAg9B,iBAA0B,WAC1Bh9B,GAAAo9B,iBAA0B,WAC1Bp9B,GAAAs9B,8BAAuC,uBAEvCt9B,GAAAw9B,gBAAyB,WACzBx9B,GAAA09B,aAAsB,QACtB19B,GAAA49B,iBAA0B,WAC1B59B,GAAA89B,YAAqB,OAErB99B,GAAAu8B,cAAuB,IAyjBtC,OAAAv8B,IAzkB4ByF,EAAA/F,QA2kB5BkD,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MNgjGA3D,GAAQO,QMhjGOM,CAMf,IAAAu/B,GAAA,WAAA,QAAAA,MAWA,MAAAA,KAKA,IAAAH,GAAA,WAAA,QAAAA,MAWA,MAAAA,KAKA,IAAAM,GAAA,WAAA,QAAAA,MAWA,MAAAA,KAKA,IAAAV,GAAA,WAAA,QAAAA,MAqBA,MAAAA,QNugGGmB,kCAAkCvqB,UAAUgc,gCAAgChc,UAAUqc,0CAA0Crc,UAAUuc,qCAAqCvc,UAAU0gB,iDAAiD1gB,UAAU6gB,oDAAoD7gB,UAAU8gB,yDAAyD9gB,YAAYlV,oCAAoC,SAASrC,EAAQkB,EAAOJ,GACtb,YACA,IAAIkF,GAAajB,MAAQA,KAAKiB,WAAc,SAAUC,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOtB,KAAKuB,YAAcL,EACnCA,EAAET,UAAYU,IAAM,KAAO3B,OAAOgC,OAAOL,IAAMG,EAAGb,UAAYU,EAAEV,UAAW,GAAIa,IOhrHnF,IAAAG,GAAAxG,EAAiC,8CAEjC,IAAA+8B,GAAA/8B,EAA4B,kCAC5B,IAAAiH,GAAAjH,EAA2B,gCAC3B,IAAAkH,GAAAlH,EAAmC,0CACnC,IAAAoH,GAAApH,EAA4B,qCAG5B,IAAA4H,GAAA5H,EAAiC,+CACjC,IAAA0H,GAAA1H,EAAqC,oDACrC,IAAAgI,GAAAhI,EAAyB,oCAEzB,IAAAmJ,GAAAnJ,EAAoC,uDACpC,IAAAsJ,GAAAtJ,EAA2B,gDAC3B,IAAAwJ,GAAAxJ,EAA8B,qDAS9B,IAAA6B,GAAA,SAAAoK,GAA4BjG,EAAAnE,EAAAoK,EA4C3B,SAAApK,GAAYm7B,EAAwCC,GAAxC,GAAAD,QAAA,GAAsC,CAAtCA,EAAA,KAAwC,GAAAC,QAAA,GAAoC,CAApCA,EAAA,EAEnDhxB,EAAAlL,KAAAgE,KAAMmC,EAAA7F,QAAoB67B,KA1BnBn4B,MAAAo4B,YAA6B,CAE7Bp4B,MAAAq4B,MAAuB,CACvBr4B,MAAAs4B,eAAgC,CAwBvCt4B,MAAKu4B,cAAgB,GAAIP,GAAA17B,OAEzB0D,MAAKu4B,cAAcG,cAAcx2B,EAAA5F,QAASq8B,QAASjiB,KAAKkiB,GAAG,GAE3D,IAAIX,EAAwB,CAC3B,GAAI4E,GAAkB,GAAI7E,GAAA17B,OAC1BugC,GAAKnE,cAAcT,EAAwBC,EAC3Cl4B,MAAKu4B,cAAcO,SAAS94B,KAAKu4B,cAAesE,IASpC//B,EAAA0O,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,YAQP3O,GAAA6O,aAAd,SAA2BrB,GAE1B,MAAO,OAMDxN,GAAA2D,UAAA4M,iBAAP,WAEC,GAAI0rB,EAEJ,KAAK/4B,KAAKuH,gBAAiB,CAC1BvH,KAAKg5B,UAAYh5B,KAAKi5B,eACtBj5B,MAAKuH,gBAAkB,KAGxB,MAAOvH,KAAKk0B,YAAa,CACxB6E,EAAQ/4B,KAAKk5B,cACb,QAAQH,GACP,IAAKj8B,GAAcq8B,cAClBn5B,KAAKo5B,YACL,MACD,KAAKt8B,GAAcu8B,cAClBr5B,KAAKuL,SAAWvL,KAAKs5B,YACrB,IAAIt5B,KAAKuL,UAAY,GACpB,KAAM,IAAI3P,OAAM,sCACjB,MACD,KAAKkB,GAAcy8B,mBAClBv5B,KAAKw5B,UACL,MACD,KAAK18B,GAAc88B,iBAClB55B,KAAK65B,WAAa75B,KAAKs5B,YACvBt5B,MAAKg9B,WAAa,GAAI38B,OAAgBL,KAAK65B,WAC3C,MACD,KAAK/8B,GAAcmgC,iBAClBj9B,KAAKk9B,WAAal9B,KAAKs5B,YACvB,MACD,KAAKx8B,GAAcqgC,aAClBn9B,KAAKo9B,aACL,MACD,KAAKtgC,GAAcugC,WAClBr9B,KAAKs9B,WACL,MACD,SACC,IAAKt9B,KAAK46B,YACT56B,KAAK66B,0BAGR,GAAI76B,KAAK46B,YAAa,CACrB56B,KAAKu9B,wBACLv9B,MAAK2zB,cAAgB,GAAIvvB,GAAA9H,QAAqB0D,KAAKw9B,eAEnDx9B,MAAKg0B,QAAU,GAAI/wB,GAAA3G,OACnB0D,MAAKo0B,UAAYp0B,KAAKg0B,QAAQjc,QAE9B,KAAK,GAAIrc,GAAmB,EAAGA,EAAIsE,KAAKy9B,cAAcxhC,SAAUP,EAC/DsE,KAAKo0B,UAAU/V,WAAWre,KAAK09B,kBAAkB19B,KAAKy9B,cAAc/hC,GAAGiiC,aAAc39B,KAAKy9B,cAAc/hC,GAAGkiC,WAAY59B,KAAKy9B,cAAc/hC,GAAGmY,SAMpH7T,MAAKmO,UAAW+R,SAASlgB,KAAKg0B,QAExDh0B,MAAKmM,gBAAgBnM,KAAKo0B,UAC1Bp0B,MAAKmM,gBAAgBnM,KAAKg0B,QAC1Bh0B,MAAKmM,gBAAgBnM,KAAK69B,UAC1B79B,MAAKmM,gBAAgBnM,KAAK2zB,cAC1B,OAAOtxB,GAAA/F,QAAWyR,cAGpB,MAAO1L,GAAA/F,QAAW0R,cAGZlR,GAAA2D,UAAAwN,eAAP,SAAsBC,GAGrBlO,KAAKmO,UAAY,GAAIxL,GAAArG,OAErB4K,GAAAzG,UAAMwN,eAAcjS,KAAAgE,KAACkO,GAGdpR,GAAA2D,UAAA88B,uBAAR,WAECv9B,KAAKw9B,eAAiB,CAEtB,IAAIM,GAAiC99B,KAAKy9B,cAAcxhC,MACxD,KAAK,GAAIP,GAAmB,EAAGA,EAAIoiC,IAAmBpiC,EAAG,CACxD,GAAIqiC,GAA4B/9B,KAAKy9B,cAAc/hC,EACnD,IAAIiiC,GAAmCI,EAAaJ,YACpD,IAAIK,GAA0BL,EAAa1hC,MAE3C,KAAK,GAAI0X,GAAmB,EAAGA,EAAIqqB,IAAYrqB,EAAG,CACjD,GAAIsqB,GAA6Bj+B,KAAKk+B,sBAAsBP,EAAahqB,GAAIoqB,EAAaH,WAC1F,IAAIO,GAA6BR,EAAahqB,GAAGyqB,YAAcH,CAC/D,IAAIE,EAAcn+B,KAAKw9B,eACtBx9B,KAAKw9B,eAAiBW,IAKlBrhC,GAAA2D,UAAAy9B,sBAAR,SAA8BruB,EAAuBgO,GAEpD,GAAIwgB,GAAuBxuB,EAASyuB,WACpC,IAAIC,GAAqB1uB,EAASyuB,YAAczuB,EAASuuB,WACzD,IAAI1lB,GAAuB,CAC3B,IAAI8lB,EAEJ,KAAK,GAAI9iC,GAAmB2iC,EAAO3iC,EAAI6iC,IAAO7iC,EAAG,CAChD8iC,EAAS3gB,EAAQniB,GAAG+iC,IACpB,IAAID,GAAU,IACX9lB,EAGJ,MAAOA,GAMA5b,GAAA2D,UAAA28B,YAAR,WAEC,GAAIxF,EACJ,IAAIzR,EACJ,IAAIuY,EACJ,IAAI7B,EACJ,IAAInhC,GAAmB,CACvB,IAAIq9B,GAAe/4B,KAAKk5B,cAExB,IAAIH,GAAS,IACZ/4B,KAAK66B,yBAEN76B,MAAK69B,UAAY,GAAIt5B,GAAAjI,OAErB,GAAG,CACF,GAAI0D,KAAK46B,YACR56B,KAAK27B,cACNxV,GAAQ,GAAI1hB,GAAAnI,OACZ6pB,GAAM/Z,KAAOpM,KAAK67B,oBAClB1V,GAAME,YAAcrmB,KAAKs5B,YACzBoF,GAAM1+B,KAAKi8B,eACXyC,GAAM1+B,KAAKu4B,cAAcmD,YAAYgD,EACrC7B,GAAO78B,KAAKo8B,iBAGZp8B,MAAKg9B,WAAWthC,GAAKmhC,EAAK8B,YAC1B3+B,MAAKg9B,WAAWthC,GAAGkjC,kBAAkBF,EAAIjlB,EAAGilB,EAAIhlB,EAAGglB,EAAI1gB,EACvD,IAAI6gB,GAAe7+B,KAAKg9B,WAAWthC,GAAGm5B,OACtCgK,GAAIC,QACJ3Y,GAAMG,gBAAkBuY,EAAItY,OAE5BvmB,MAAK69B,UAAUrX,OAAO9qB,KAAOyqB,CAE7ByR,GAAK53B,KAAK87B,aAEV,IAAIlE,GAAM,IAAK,CACd53B,KAAK+7B,SACLnE,GAAK53B,KAAKk5B,cACV,IAAItB,GAAM96B,EAAcq8B,cACvBn5B,KAAKo5B,YACNxB,GAAK53B,KAAK87B,cAIX,GAAIlE,GAAM,IACT53B,KAAK+7B,gBACEnE,GAAM,KAMR96B,GAAA2D,UAAAs7B,QAAR,WAEC/7B,KAAKo4B,aACLp4B,MAAKs4B,gBACLt4B,MAAK46B,YAAc56B,KAAKo4B,aAAep4B,KAAKg5B,UAAU/8B,OAM/Ca,GAAA2D,UAAA68B,UAAR,WAEC,GAAIvE,GAAe/4B,KAAKk5B,cACxB,IAAItB,EACJ,IAAI+F,EACJ,IAAI9f,EACJ,IAAIhK,EAEJ,IAAIklB,GAAS,IACZ/4B,KAAK66B,yBAEN,IAAI76B,KAAK++B,UAAY,KACpB/+B,KAAK++B,SAAW,GAAI1+B,MAErB,OAAOu3B,GAAM,IAAK,CACjBA,EAAK53B,KAAKk5B,cACV,QAAQtB,GACP,IAAK96B,GAAcq8B,cAClBn5B,KAAKo5B,YACL,MACD,KAAKt8B,GAAckiC,kBAClBh/B,KAAK++B,SAAS/9B,KAAKhB,KAAK67B,qBACxB,MACD,KAAK/+B,GAAcmiC,qBAClBtB,EAAe,GAAIt9B,OAAoBL,KAAKs5B,aAC5C,MACD,KAAKx8B,GAAcoiC,oBAClBrrB,EAAU,GAAIxT,OAAcL,KAAKs5B,aAAa,EAC9C,MACD,KAAKx8B,GAAcqiC,uBAClBthB,EAAU,GAAIxd,OAAiBL,KAAKs5B,aACpC,MACD,KAAKx8B,GAAcsiC,gBAClBp/B,KAAKq/B,YAAY1B,EACjB,MACD,KAAK7gC,GAAcwiC,eAClBt/B,KAAKu/B,SAAS1rB,EACd,MACD,KAAK/W,GAAc0iC,kBAClBx/B,KAAKy/B,WAAW5hB,EAChB,QAIH,GAAI7d,KAAKy9B,eAAiB,KACzBz9B,KAAKy9B,cAAgB,GAAIp9B,MAE1B,IAAI3E,GAAoBsE,KAAKy9B,cAAcxhC,MAC3C+D,MAAKy9B,cAAc/hC,GAAK,GAAIgkC,EAC5B1/B,MAAKy9B,cAAc/hC,GAAGiiC,aAAeA,CACrC39B,MAAKy9B,cAAc/hC,GAAGkiC,WAAa/f,CACnC7d,MAAKy9B,cAAc/hC,GAAGmY,QAAUA,EAUzB/W,GAAA2D,UAAAi9B,kBAAR,SAA0BC,EAAkC9f,EAA0BhK,GAErF,GAAIrF,GAAqBmvB,EAAa1hC,MACtC,IAAI0jC,GAAmBC,EAAmBC,CAC1C,IAAIhwB,EACJ,IAAI2uB,EACJ,IAAIsB,EACJ,IAAIpB,EACJ,IAAI7kB,GAA4B,GAAIhX,GAAAvG,QAAiB,GAAImF,GAAAnF,QACzD,IAAI6hB,GAAoB,GAAI9d,OAAcmO,EAAI,EAC9C,IAAIuxB,GAA0B,GAAI1/B,OAAcmO,EAAI,EACpD,IAAIwxB,GAA6B,GAAI3/B,OAAcmO,EAAIxO,KAAKw9B,eAC5D,IAAIyC,GAA6B,GAAI5/B,OAAcmO,EAAIxO,KAAKw9B,eAC5D,IAAI1hC,GAAmB,CACvB,IAAIokC,EAEJ,KAAK,GAAIxkC,GAAmB,EAAGA,EAAI8S,IAAO9S,EAAG,CAC5CmU,EAAW8tB,EAAajiC,EACxBikC,GAAK9vB,EAASmnB,MAAM,CACpB4I,GAAKD,EAAK,CACVE,GAAKF,EAAK,CACVI,GAAUJ,GAAMI,EAAUH,GAAMG,EAAUF,GAAM,CAEhDK,GAAiB,CACjB,KAAK,GAAIvsB,GAAmB,EAAGA,EAAI9D,EAASuuB,cAAezqB,EAAG,CAC7D6qB,EAAS3gB,EAAQhO,EAASyuB,YAAc3qB,EACxC,IAAI6qB,EAAOC,KAAO,EAAG,CACpBqB,EAAW9/B,KAAKg9B,WAAWwB,EAAOrY,MAClCuY,GAAMoB,EAASK,gBAAgB3B,EAAOE,IACtCqB,GAAUJ,IAAOjB,EAAIjlB,EAAE+kB,EAAOC,IAC9BsB,GAAUH,IAAOlB,EAAIhlB,EAAE8kB,EAAOC,IAC9BsB,GAAUF,IAAOnB,EAAI1gB,EAAEwgB,EAAOC,IAG9BuB,GAAalkC,GAAK0iC,EAAOrY,MAAM,CAC/B8Z,GAAankC,KAAO0iC,EAAOC,OACzByB,GAIJ,IAAKvsB,EAAIusB,EAAgBvsB,EAAI3T,KAAKw9B,iBAAkB7pB,EAAG,CACtDqsB,EAAalkC,GAAK,CAClBmkC,GAAankC,KAAO,EAGrB6jC,EAAK9vB,EAASmnB,OAAS,CACvB7Y,GAAIwhB,KAAQ9vB,EAASvU,CACrB6iB,GAAIwhB,GAAM9vB,EAAS1U,EAGpB0e,EAAS0E,gBAAkBve,KAAKw9B,cAChC3jB,GAAS6E,WAAW7K,EACpBgG,GAASvF,aAAayrB,EACtBlmB,GAASrF,OAAO2J,EAChBtE,GAASgF,gBAAgBmhB,EACzBnmB,GAAS+E,gBAAgBqhB,EAEzBpmB,GAAS8E,WAAW,KACpB9E,GAASuO,YAAY,KAErBvO,GAAS4E,mBAAqB,KAC9B5E,GAAS2E,kBAAoB,KAE7B,OAAO3E,GAOA/c,GAAA2D,UAAA8+B,SAAR,SAAiB1rB,GAEhB,GAAImjB,GAAuBh3B,KAAKs5B,aAAa,CAC7CzlB,GAAQmjB,GAASh3B,KAAKs5B,YACtBzlB,GAAQmjB,EAAQ,GAAKh3B,KAAKs5B,YAC1BzlB,GAAQmjB,EAAQ,GAAKh3B,KAAKs5B,aAOnBx8B,GAAA2D,UAAAg/B,WAAR,SAAmB5hB,GAElB,GAAI2gB,GAAmB,GAAI4B,EAC3B5B,GAAOxH,MAAQh3B,KAAKs5B,YACpBkF,GAAOrY,MAAQnmB,KAAKs5B,YACpBkF,GAAOC,KAAOz+B,KAAKu8B,eACnBiC,GAAOE,IAAM1+B,KAAKi8B,eAClBpe,GAAQ2gB,EAAOxH,OAASwH,EAOjB1hC,GAAA2D,UAAA4+B,YAAR,SAAoB1B,GAEnB,GAAI9tB,GAAwB,GAAIwwB,EAChCxwB,GAASmnB,MAAQh3B,KAAKs5B,YACtBt5B,MAAKu0B,QAAQ1kB,EACbA,GAASyuB,YAAct+B,KAAKs5B,YAC5BzpB,GAASuuB,YAAcp+B,KAAKs5B,YAE5BqE,GAAa9tB,EAASmnB,OAASnnB,EAOxB/S,GAAA2D,UAAA8zB,QAAR,SAAgBoJ,GAEf,GAAI/F,GAAY53B,KAAKk5B,cACrB,IAAItB,GAAM,IACT53B,KAAK08B,eAAe,IACrBiB,GAAariC,EAAI0E,KAAKu8B,eACtBoB,GAAaxiC,EAAI6E,KAAKu8B,eAEtB,IAAIv8B,KAAKk5B,gBAAkB,IAC1Bl5B,KAAK08B,eAAe,KAMd5/B,GAAA2D,UAAAy4B,aAAR,WAEC,GAAItB,EACJ,IAAImB,GAAe,EAEnB,QAAQ/4B,KAAK46B,YAAa,CACzBhD,EAAK53B,KAAK87B,aACV,IAAIlE,GAAM,KAAOA,GAAM,MAAQA,GAAM,MAAQA,GAAM,IAAM,CACxD,GAAImB,GAASj8B,EAAcq8B,cAC1Bn5B,KAAKw8B,gBACN,IAAIzD,GAAS,GACZ,MAAOA,OAERA,IAASnB,CAEV,IAAImB,GAASj8B,EAAcq8B,cAC1B,MAAOJ,GAGT,MAAOA,GAMAj8B,GAAA2D,UAAA+7B,eAAR,WAEC,GAAI5E,EAEJ,GACCA,GAAK53B,KAAK87B,oBAAsBlE,GAAM,MAAQA,GAAM,KAAOA,GAAM,MAAQA,GAAM,IAEhF53B,MAAK+7B,UAMEj/B,GAAA2D,UAAA24B,WAAR,WAEC,GAAIxB,EACJ,QAAQ53B,KAAK46B,aAAehD,GAAM,KACjCA,EAAK53B,KAAK87B,cAMJh/B,GAAA2D,UAAAq7B,YAAR,WAEC,GAAIlE,GAAY53B,KAAKg5B,UAAUyD,OAAOz8B,KAAKo4B,cAE3C,IAAIR,GAAM,KAAM,GACb53B,KAAKq4B,KACPr4B,MAAKs4B,eAAiB,MAChB,IAAIV,GAAM,OACd53B,KAAKs4B,cAER,IAAIt4B,KAAKo4B,aAAep4B,KAAKg5B,UAAU/8B,OACtC+D,KAAK46B,YAAc,IAEpB,OAAOhD,GAMA96B,GAAA2D,UAAA64B,WAAR,WAEC,GAAI59B,GAAWuQ,SAASjM,KAAKk5B,eAC7B,IAAIxN,MAAMhwB,GACTsE,KAAK08B,eAAe,WACrB,OAAOhhC,GAMAoB,GAAA2D,UAAA87B,cAAR,WAEC,GAAI5gC,GAAWghC,WAAW38B,KAAKk5B,eAC/B,IAAIxN,MAAM/vB,GACTqE,KAAK08B,eAAe,aACrB,OAAO/gC,GAMAmB,GAAA2D,UAAAw7B,cAAR,WAEC,GAAIW,GAAe,GAAI16B,GAAA5F,OACvB,IAAIs7B,GAAY53B,KAAKk5B,cAErB,IAAItB,GAAM,IACT53B,KAAK08B,eAAe,IACrBE,GAAInjB,GAAKzZ,KAAKu8B,eACdK,GAAIljB,EAAI1Z,KAAKu8B,eACbK,GAAI5e,EAAIhe,KAAKu8B,eAEb,IAAIv8B,KAAKk5B,gBAAkB,IAC1Bl5B,KAAK08B,eAAe,IAErB,OAAOE,GAMA9/B,GAAA2D,UAAA27B,gBAAR,WAEC,GAAIS,GAAkB,GAAI7E,GAAA17B,OAC1B,IAAIs7B,GAAY53B,KAAKk5B,cAErB,IAAItB,GAAM,IACT53B,KAAK08B,eAAe,IACrBG,GAAKpjB,EAAIzZ,KAAKu8B,eACdM,GAAKnjB,GAAK1Z,KAAKu8B,eACfM,GAAK7e,GAAKhe,KAAKu8B,eAGf,IAAIphC,GAAW,EAAI0hC,EAAKpjB,EAAEojB,EAAKpjB,EAAIojB,EAAKnjB,EAAEmjB,EAAKnjB,EAAImjB,EAAK7e,EAAE6e,EAAK7e,CAC/D6e,GAAKrB,EAAIrgC,EAAI,EAAG,GAAKub,KAAK+kB,KAAKtgC,EAE/B,IAAI6E,KAAKk5B,gBAAkB,IAC1Bl5B,KAAK08B,eAAe,IAErB,IAAI4D,GAAqB,GAAItI,GAAA17B,OAC7BgkC,GAAQxH,SAAS94B,KAAKu4B,cAAesE,EACrC,OAAOyD,GAMAxjC,GAAA2D,UAAA+4B,SAAR,WAGCx5B,KAAK67B,qBAOE/+B,GAAA2D,UAAAo7B,mBAAR,WAEC77B,KAAKw8B,gBAEL,IAAI5E,GAAY53B,KAAK87B,aACrB,IAAIgB,GAAa,EAEjB,IAAIlF,GAAM,IACT53B,KAAK08B,eAAe,IAErB,GAAG,CACF,GAAI18B,KAAK46B,YACR56B,KAAK27B,cACN/D,GAAK53B,KAAK87B,aACV,IAAIlE,GAAM,IACTkF,GAAOlF,QACAA,GAAM,IAEf,OAAOkF,GAMAhgC,GAAA2D,UAAAk7B,aAAR,WAEC,KAAM,IAAI//B,OAAM,0BAOTkB,GAAA2D,UAAAi8B,eAAR,SAAuBrS,GAEtB,KAAM,IAAIzuB,OAAM,6BAA+BoE,KAAKq4B,MAAQ,GAAK,eAAiBr4B,KAAKs4B,eAAiB,KAAOjO,EAAW,kBAAoBrqB,KAAKg5B,UAAUyD,OAAOz8B,KAAKo4B,YAAc,GAAK,gBAMrLt7B,GAAA2D,UAAAo6B,wBAAR,WAEC,KAAM,IAAIj/B,OAAM,4BAA8BoE,KAAKq4B,MAAQ,GAAK,eAAiBr4B,KAAKs4B,eAAiB,MApnB1Fx7B,GAAAu8B,cAAuB,YACvBv8B,GAAAy8B,mBAA4B,aAC5Bz8B,GAAA88B,iBAA0B,WAC1B98B,GAAAmgC,iBAA0B,WAC1BngC,GAAAq8B,cAAuB,IACvBr8B,GAAAqgC,aAAsB,QACtBrgC,GAAAugC,WAAoB,MAEpBvgC,GAAAkiC,kBAA2B,QAC3BliC,GAAAmiC,qBAA8B,UAC9BniC,GAAAsiC,gBAAyB,MACzBtiC,GAAAoiC,oBAA6B,SAC7BpiC,GAAAwiC,eAAwB,KACxBxiC,GAAAqiC,uBAAgC,YAChCriC,GAAA0iC,kBAA2B,QAwmB1C,OAAA1iC,IA1nB4BuF,EAAA/F,QA4nB5BkD,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MP6iHA3D,GAAQO,QO7iHOQ,CAGf,IAAAujC,GAAA,WAAA,QAAAA,MAOA,MAAAA,KAEA,IAAAD,GAAA,WAAA,QAAAA,MAMA,MAAAA,KAEA,IAAAV,GAAA,WAAA,QAAAA,MAKA,MAAAA,QPqiHG1R,8CAA8Cxb,UAAUuqB,kCAAkCvqB,UAAUgc,gCAAgChc,UAAUqc,0CAA0Crc,UAAUuc,qCAAqCvc,UAAUkd,oDAAoDld,UAAUqd,oCAAoCrd,UAAUwd,+CAA+Cxd,UAAUsgB,uDAAuDtgB,UAAU2gB,gDAAgD3gB,UAAU4gB,qDAAqD5gB,YAAYjV,mCAAmC,SAAStC,EAAQkB,EAAOJ,GAChpB,YACA,IAAIkF,GAAajB,MAAQA,KAAKiB,WAAc,SAAUC,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOtB,KAAKuB,YAAcL,EACnCA,EAAET,UAAYU,IAAM,KAAO3B,OAAOgC,OAAOL,IAAMG,EAAGb,UAAYU,EAAEV;AAAW,GAAIa,IQttInF,IAAAG,GAAAxG,EAAiC,8CACjC,IAAAslC,GAAAtlC,EAA8B,sCAC9B,IAAAgH,GAAAhH,EAA2B,gCAC3B,IAAAiH,GAAAjH,EAA2B,gCAE3B,IAAAkH,GAAAlH,EAAmC,0CACnC,IAAAmH,GAAAnH,EAA4B,iCAC5B,IAAAoH,GAAApH,EAA4B,qCAC5B,IAAAqH,GAAArH,EAA6B,sCAK7B,IAAA4H,GAAA5H,EAAiC,+CACjC,IAAA0H,GAAA1H,EAAqC,oDACrC,IAAAgI,GAAAhI,EAAyB,oCACzB,IAAAmI,GAAAnI,EAAqC,qDAErC,IAAAgJ,GAAAhJ,EAAgC,8CAEhC,IAAA4J,GAAA5J,EAA+B,4CAC/B,IAAA2J,GAAA3J,EAAkC,gDAKlC,IAAAuB,GAAA,SAAA0K,GAA2BjG,EAAAzE,EAAA0K,EAoB1B,SAAA1K,GAAYgkC,GAAA,GAAAA,QAAA,GAAiC,CAAjCA,EAAA,KAEXt5B,EAAAlL,KAAAgE,KAAMmC,EAAA7F,QAAoB8K,aAE1BpH,MAAKygC,oBAAsBD,EAQdhkC,EAAAgP,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQPjP,GAAAmP,aAAd,SAA2BrB,GAE1B,GAAIo2B,EAEJA,GAAKp+B,EAAAhG,QAAYqkC,YAAYr2B,EAC7B,IAAIo2B,EAAI,CACPA,EAAG7wB,SAAW,CACd,IAAI6wB,EAAG5e,aAAe,MACrB,MAAO,MAGT,MAAO,OAMDtlB,GAAAiE,UAAAoL,oBAAP,SAA2BC,GAE1B,GAAIA,EAAmBC,OAAO9P,QAAU,EAAG,CAC1C,GAAI+Q,EAEJA,GAAQlB,EAAmBC,OAAO,EAClC,IAAIiB,EAAMsT,QAAQigB,EAAAjkC,SAAgB,CACjC,GAAIokB,EAEJA,GAAM1gB,KAAK4gC,UAAU90B,EAAmB5L,GACxCwgB,GAAIE,QAAU,GAAI3c,GAAA3H,QAAgC0Q,KAQ9CxQ,GAAAiE,UAAAqM,2BAAP,SAAkChB,IAQ3BtP,GAAAiE,UAAA4M,iBAAP,WAEC,IAAKrN,KAAKsN,UAAW,CACpBtN,KAAKsN,UAAYtN,KAAKuN,eACtBvN,MAAKsN,UAAUuC,SAAW,CAQ1B7P,MAAK4gC,YACL5gC,MAAK6gC,aACL7gC,MAAK8gC,wBAQN,MAAO9gC,KAAKk0B,YAAa,CAIxB,GAAIl0B,KAAK+gC,UAAY/gC,KAAKsN,UAAUuC,UAAY7P,KAAKghC,aACpDhhC,KAAKihC,8BACD,IAAIjhC,KAAKkhC,UAAYlhC,KAAKsN,UAAUuC,UAAY7P,KAAKmhC,aAAc,CAGvEnhC,KAAK8gC,qBAAqB9gC,KAAKkhC,SAAS90B,MAAQpM,KAAKkhC,QACrDlhC,MAAKmhC,aAAeC,OAAOC,SAC3BrhC,MAAKkhC,SAAW,KAGjB,GAAIlhC,KAAKsN,UAAUM,oBAAsB,EAAG,CAC3C,GAAI0zB,EACJ,IAAI9yB,EACJ,IAAI+vB,EAEJ+C,GAAMthC,KAAKsN,UAAUyG,mBACrBvF,GAAMxO,KAAKsN,UAAUuB,iBACrB0vB,GAAMv+B,KAAKsN,UAAUuC,UAAYrB,EAAM,EAEvC,QAAQ8yB,GACP,IAAK,OACL,IAAK,OACL,IAAK,OAMJ,QAED,KAAK,OACJthC,KAAKghC,aAAezC,CACpBv+B,MAAK+gC,SAAW/gC,KAAKyR,eACrB,MAED,KAAK,OACJzR,KAAKmhC,aAAe5C,CACpBv+B,MAAKkhC,SAAW,GAAIK,EACpBvhC,MAAKkhC,SAAS90B,KAAOpM,KAAKwhC,mBAC1BxhC,MAAKkhC,SAAShpB,UAAY,GAAI7X,MAC9BL,MAAKkhC,SAASO,gBACd,MAED,KAAK,OACJzhC,KAAKkhC,SAASjhC,KAAOgD,EAAA3G,QAAOolC,SAC5B,MAED,KAAK,OACJ1hC,KAAK2hC,iBACL,MAED,KAAK,OACJ3hC,KAAK4hC,eACL,MAED,KAAK,OACJ5hC,KAAK6hC,aACL,MAED,KAAK,OACJ7hC,KAAK8hC,uBACL,MAED,KAAK,OACJ9hC,KAAKkhC,SAASlhB,UAAYhgB,KAAK+hC,eAC/B,MAED,KAAK,OACJ/hC,KAAKgiC,qBAAqBzD,EAC1B,MAED,KAAK,OACJv+B,KAAKiiC,sBACL,MAED,SAECjiC,KAAKsN,UAAUuC,UAAarB,EAAM,CAClC,OAMF,GAAIxO,KAAKo2B,aAAan6B,OAAQ,CAC7B+D,KAAKma,gCACL,SAQH,GAAIna,KAAKsN,UAAUM,qBAAuB5N,KAAKkhC,UAAYlhC,KAAK+gC,SAAU,CACzE,MAAO1+B,GAAA/F,QAAW0R,kBACZ,CACN,GAAI5B,EAGJ,KAAKA,IAAQpM,MAAK8gC,qBAAsB,CACvC,GAAIoB,EACJA,GAAMliC,KAAKmiC,gBAAgBniC,KAAK8gC,qBAAqB10B,GACrD,IAAI81B,EAAK,CAEkBliC,KAAKmO,UAAW+R,SAASgiB,EAEnDliC,MAAKmM,gBAAgB+1B,EAAK91B,IAI5B,MAAO/J,GAAA/F,QAAWyR,cAIbvR,GAAAiE,UAAAwN,eAAP,SAAsBC,GAGrBlO,KAAKmO,UAAY,GAAIxL,GAAArG,OAErB4K,GAAAzG,UAAMwN,eAAcjS,KAAAgE,KAACkO,GAGd1R,GAAAiE,UAAAgR,cAAR,WAEC,GAAIwD,EAEJA,GAAM,GAAImtB,EAEV,OAAOpiC,KAAKsN,UAAUuC,SAAW7P,KAAKghC,aAAc,CACnD,GAAIM,EACJ,IAAI9yB,EACJ,IAAI+vB,EAEJ+C,GAAMthC,KAAKsN,UAAUyG,mBACrBvF,GAAMxO,KAAKsN,UAAUuB,iBACrB0vB,GAAMv+B,KAAKsN,UAAUuC,UAAYrB,EAAM,EAEvC,QAAQ8yB,GACP,IAAK,OACJrsB,EAAI7I,KAAOpM,KAAKwhC,mBAChB,MAED,KAAK,OACJvsB,EAAIwM,aAAezhB,KAAKqiC,WACxB,MAED,KAAK,OACJptB,EAAIqtB,aAAetiC,KAAKqiC,WACxB,MAED,KAAK,OACJptB,EAAIstB,cAAgBviC,KAAKqiC,WACzB,MAED,KAAK,OACJptB,EAAIutB,SAAW,IACf,MAED,KAAK,OACJvtB,EAAIwtB,SAAWziC,KAAK0R,aAAa6sB,EACjC,MAED,KAAK,OACJtpB,EAAIytB,YAAc1iC,KAAK0R,aAAa6sB,EACpC,MAED,SACCv+B,KAAKsN,UAAUuC,SAAW0uB,CAC1B,QAIH,MAAOtpB,GAGAzY,GAAAiE,UAAAiR,aAAR,SAAqB6sB,GAEpB,GAAI7d,EAEJA,GAAM,GAAIiiB,EAEV,OAAO3iC,KAAKsN,UAAUuC,SAAW0uB,EAAK,CACrC,GAAI+C,EACJ,IAAI9yB,EAEJ8yB,GAAMthC,KAAKsN,UAAUyG,mBACrBvF,GAAMxO,KAAKsN,UAAUuB,iBAErB,QAAQyyB,GACP,IAAK,OACJ5gB,EAAI1G,IAAMha,KAAKwhC,mBACf,MAED,SAECxhC,KAAKsN,UAAUuC,UAAarB,EAAM,CAClC,QAIHxO,KAAK4gC,UAAUlgB,EAAI1G,KAAO0G,CAC1B1gB,MAAKia,gBAAgByG,EAAI1G,IAAK,GAAI5X,GAAA9F,QAAWokB,EAAI1G,KAEjD,OAAO0G,GAGAlkB,GAAAiE,UAAAkhC,gBAAR,WAEC,GAAIjmC,EACJ,IAAI8S,EACJ,IAAIkK,EAEJA,GAAQ1Y,KAAKsN,UAAUyG,mBACvB/T,MAAKkhC,SAASjjB,MAAQ,GAAI5d,OAAcqY,EAAM,EAE9Chd,GAAI,CACJ8S,GAAMxO,KAAKkhC,SAASjjB,MAAMhiB,MAC1B,OAAOP,EAAI8S,EAAK,CACf,GAAIiL,GAAUC,EAAUsE,CAExBvE,GAAIzZ,KAAKsN,UAAUmG,WACnBiG,GAAI1Z,KAAKsN,UAAUmG,WACnBuK,GAAIhe,KAAKsN,UAAUmG,WAEnBzT,MAAKkhC,SAASjjB,MAAMviB,KAAO+d,CAC3BzZ,MAAKkhC,SAASjjB,MAAMviB,KAAOsiB,CAC3Bhe,MAAKkhC,SAASjjB,MAAMviB,KAAOge,GAIrBld,GAAAiE,UAAAmhC,cAAR,WAEC,GAAIlmC,EACJ,IAAI8S,EACJ,IAAIkK,EAEJA,GAAQ1Y,KAAKsN,UAAUyG,mBACvB/T,MAAKkhC,SAASrtB,QAAU,GAAIxT,OAAcqY,EAAM,EAEhDhd,GAAI,CACJ8S,GAAMxO,KAAKkhC,SAASrtB,QAAQ5X,MAC5B,OAAOP,EAAI8S,EAAK,CACf,GAAIo0B,GAAoBC,EAAoBC,CAE5CF,GAAK5iC,KAAKsN,UAAUyG,mBACpB8uB,GAAK7iC,KAAKsN,UAAUyG,mBACpB+uB,GAAK9iC,KAAKsN,UAAUyG,mBAEpB/T,MAAKkhC,SAASrtB,QAAQnY,KAAOknC,CAC7B5iC,MAAKkhC,SAASrtB,QAAQnY,KAAOonC,CAC7B9iC,MAAKkhC,SAASrtB,QAAQnY,KAAOmnC,CAG7B7iC,MAAKsN,UAAUuC,UAAY,EAG5B7P,KAAKkhC,SAAS6B,gBAAkB,GAAI1iC,OAAcqY,GAG3Clc,GAAAiE,UAAAwhC,qBAAR,WAEC,GAAIzzB,GAAsBxO,KAAKkhC,SAASrtB,QAAQ5X,OAAO,CACvD,IAAIP,GAAoB,CACxB,OAAOA,EAAI8S,EAAK,CACfxO,KAAKkhC,SAAS6B,gBAAgBrnC,GAAKsE,KAAKsN,UAAUuB,iBAClDnT,MAIMc,GAAAiE,UAAAohC,YAAR,WAEC,GAAInmC,EACJ,IAAI8S,EACJ,IAAIkK,EAEJA,GAAQ1Y,KAAKsN,UAAUyG,mBACvB/T,MAAKkhC,SAAS/iB,IAAM,GAAI9d,OAAcqY,EAAM,EAE5Chd,GAAI,CACJ8S,GAAMxO,KAAKkhC,SAAS/iB,IAAIliB,MACxB,OAAOP,EAAI8S,EAAK,CACfxO,KAAKkhC,SAAS/iB,IAAIziB,KAAOsE,KAAKsN,UAAUmG,WACxCzT,MAAKkhC,SAAS/iB,IAAIziB,KAAO,EAAMsE,KAAKsN,UAAUmG,aAIxCjX,GAAAiE,UAAAqhC,sBAAR,WAEC,GAAI7sB,EACJ,IAAIyD,EACJ,IAAIhd,EACJ,IAAIsnC,EAEJ/tB,GAAMjV,KAAKwhC,mBACX9oB,GAAQ1Y,KAAKsN,UAAUyG,mBAEvBivB,GAAQ,GAAI3iC,OAAcqY,EAC1Bhd,GAAI,CACJ,OAAOA,EAAIsnC,EAAM/mC,OAChB+mC,EAAMtnC,KAAOsE,KAAKsN,UAAUyG,mBAE7B/T,MAAKkhC,SAAShpB,UAAUlX,KAAKiU,EAC7BjV,MAAKkhC,SAASO,cAAcxsB,GAAO+tB,EAG5BxmC,GAAAiE,UAAAuhC,qBAAR,SAA6BzD,GAE5B,GAAI0E,EACJ,IAAIf,EACJ,IAAI9hB,EACJ,IAAIhU,EACJ,IAAI82B,EAGJ9iB,GAAQ,GAAIle,GAAA5F,OAEZ,OAAO0D,KAAKsN,UAAUuC,SAAW0uB,EAAK,CACrC,GAAI+C,EACJ,IAAI9yB,EAEJ8yB,GAAMthC,KAAKsN,UAAUyG,mBACrBvF,GAAMxO,KAAKsN,UAAUuB,iBAErB,QAAQyyB,GACP,IAAK,OACJl1B,EAAOpM,KAAKwhC,mBACZxhC,MAAKsN,UAAUuC,UAAY,CAC3BqzB,GAAOljC,KAAKsN,UAAUwU,WACtB,MAED,KAAK,OACJ1B,EAAM3G,EAAIzZ,KAAKsN,UAAUmG,WACzB2M,GAAMpC,EAAIhe,KAAKsN,UAAUmG,WACzB2M,GAAM1G,EAAI1Z,KAAKsN,UAAUmG,WACzB,MAED,SACCzT,KAAKsN,UAAUuC,UAAarB,EAAM,CAClC,QAOH,GAAIpC,GAAQ,YAAcpM,KAAK8gC,qBAAqBz/B,eAAe+K,GAAO,CACzE62B,EAAKjjC,KAAK8gC,qBAAqB10B,EAC/B81B,GAAMliC,KAAKmiC,gBAAgBc,EAAI7iB,EAE/B,IAAI8hB,EAAK,CAEkBliC,KAAKmO,UAAW+R,SAASgiB,EAEnDliC,MAAKmM,gBAAgB+1B,EAAKe,EAAG72B,YAIvBpM,MAAK8gC,qBAAqB10B,IAI3B5P,GAAAiE,UAAA0hC,gBAAR,SAAwBD,EAAc9hB,GAAA,GAAAA,QAAA,GAAqB,CAArBA,EAAA,KAErC,GAAI8hB,EAAIjiC,MAAQgD,EAAA3G,QAAOolC,UAAW,CACjC,GAAIhmC,EACJ,IAAIynC,EACJ,IAAIprB,EACJ,IAAI9C,EACJ,IAAIuD,EACJ,IAAImH,EACJ,IAAIyjB,EACJ,IAAIJ,EAEJ,IAAId,EAAIhqB,UAAUjc,OAAS,EAC1BoQ,QAAQC,IAAI,sFAGb,KAAK41B,EAAIruB,SAAWquB,EAAIruB,QAAQ5X,QAAU,EACzC,MAAO,KAERmnC,GAAW,GAAI/iC,OAAgB6hC,EAAIjkB,MAAMhiB,OAAO,EAChD+mC,GAAQ,GAAI3iC,OAAc6hC,EAAIruB,QAAQ5X,OAAO,EAE7C+D,MAAKqjC,YAAYD,EAAUJ,EAAOd,EAElC,IAAIliC,KAAKygC,oBACRzgC,KAAKsjC,kBAAkBF,EAAUJ,EAElCd,GAAIjkB,MAAQ,GAAI5d,OAAc+iC,EAASnnC,OAAO,EAC9C,KAAKP,EAAI,EAAGA,EAAI0nC,EAASnnC,OAAQP,IAAK,CACrCwmC,EAAIjkB,MAAMviB,EAAE,GAAK0nC,EAAS1nC,GAAG+d,CAC7ByoB,GAAIjkB,MAAMviB,EAAE,EAAI,GAAK0nC,EAAS1nC,GAAGge,CACjCwoB,GAAIjkB,MAAMviB,EAAE,EAAI,GAAK0nC,EAAS1nC,GAAGsiB,EAElCkkB,EAAIruB,QAAU,GAAIxT,OAAc2iC,EAAM/mC,OAAO,EAE7C,KAAKP,EAAI,EAAGA,EAAIsnC,EAAM/mC,OAAQP,IAAK,CAClCwmC,EAAIruB,QAAQnY,EAAE,GAAKsnC,EAAMtnC,GAAGD,CAC5BymC,GAAIruB,QAAQnY,EAAE,EAAI,GAAKsnC,EAAMtnC,GAAGyF,CAChC+gC,GAAIruB,QAAQnY,EAAE,EAAI,GAAKsnC,EAAMtnC,GAAG0S,EAGjC,GAAI8zB,EAAI/jB,IAAK,CAIZ+jB,EAAI/jB,IAAM,GAAI9d,OAAc+iC,EAASnnC,OAAO,EAC5C,KAAKP,EAAI,EAAGA,EAAI0nC,EAASnnC,OAAQP,IAAK,CACrCwmC,EAAI/jB,IAAIziB,EAAE,GAAK0nC,EAAS1nC,GAAGF,CAC3B0mC,GAAI/jB,IAAIziB,EAAE,EAAI,GAAK0nC,EAAS1nC,GAAG6nC,GAIjC,GAAIrB,EAAIhqB,UAAUjc,OAAS,EAAG,CAC7B,GAAIunC,EACJA,GAAQtB,EAAIhqB,UAAU,EACtBjD,GAAMjV,KAAK6gC,WAAW2C,GAAOrtB,SAI9BqC,EAAS,GAAIvV,GAAA3G,QAAO2Y,EACpBuD,GAAOwH,UAAUC,SAAW,GAAIhe,GAAA3F,QAAS4lC,EAAIliB,UAE7CjI,GAAWS,EAAOT,QAIlBorB,GAAM,GAAItgC,GAAAvG,QAAiB,GAAImF,GAAAnF,QAC/B6mC,GAAIzkB,WAAWwjB,EAAIruB,QACnBsvB,GAAI7uB,aAAa4tB,EAAIjkB,MACrBklB,GAAI3uB,OAAO0tB,EAAI/jB,IAEfpG,GAASsG,WAAW8kB,EAIpB,IAAI/iB,EAAO,CACV,GAAI8hB,EAAIliB,UAAW,CAGlBL,EAAM,GAAI1d,GAAA3F,QAAS4lC,EAAIliB,UACvBL,GAAI4G,QAAQ,IAAM,CAClB5G,GAAI4G,QAAQ,IAAM,CAClB5G,GAAI4G,QAAQ,IAAM,CAClBnG,GAAQT,EAAIwgB,gBAAgB/f,GAG7BA,EAAMqjB,SAAS,EAEf9jB,GAAM,GAAI1d,GAAA3F,OACVqjB,GAAIif,kBAAkBxe,EAAM3G,EAAG2G,EAAM1G,EAAG0G,EAAMpC,EAC9CjG,GAAS2rB,oBAAoB/jB,GAK9B,GAAIuiB,EAAIliB,UAAW,CAClBL,EAAM,GAAI1d,GAAA3F,QAAS4lC,EAAIliB,UACvBL,GAAImf,QACJ/mB,GAAS2rB,oBAAoB/jB,GAK9B3f,KAAKmM,gBAAgB4L,EAAUmqB,EAAI91B,KAAKu3B,OAAO,aAE/C,OAAOnrB,GAIR,MAAO,MAGAhc,GAAAiE,UAAA4iC,YAAR,SAAoBD,EAA0BJ,EAAqBd,GAGlE,GAAIxmC,EACJ,IAAIiY,EACJ,IAAI2O,EACJ,IAAI9T,GAAqB0zB,EAAIjkB,MAAMhiB,MACnC,KAAKP,EAAI,EAAGiY,EAAI,EAAG2O,EAAI,EAAG5mB,EAAI8S,GAAM,CACnC,GAAI+0B,GAAa,GAAIK,EACrBL,GAAE9pB,EAAIyoB,EAAIjkB,MAAMviB,IAChB6nC,GAAE7pB,EAAIwoB,EAAIjkB,MAAMviB,IAChB6nC,GAAEvlB,EAAIkkB,EAAIjkB,MAAMviB,IAChB,IAAIwmC,EAAI/jB,IAAK,CACZolB,EAAE/nC,EAAI0mC,EAAI/jB,IAAIxK,IACd4vB,GAAEA,EAAIrB,EAAI/jB,IAAIxK,KAEfyvB,EAAS9gB,KAAOihB,EAEjB/0B,EAAM0zB,EAAIruB,QAAQ5X,MAClB,KAAKP,EAAI,EAAG4mB,EAAI,EAAG5mB,EAAI8S,GAAM,CAC5B,GAAI7S,GAAW,GAAIkoC,EACnBloC,GAAEF,EAAIymC,EAAIruB,QAAQnY,IAClBC,GAAEwF,EAAI+gC,EAAIruB,QAAQnY,IAClBC,GAAEyS,EAAI8zB,EAAIruB,QAAQnY,IAClBC,GAAEmoC,YAAc5B,EAAIa,gBAAgBzgB,IAAM,CAC1C0gB,GAAM1gB,KAAO3mB,GAIPa,GAAAiE,UAAA6iC,kBAAR,SAA0BF,EAA0BJ,GAMnD,GAAItnC,EACJ,IAAIiY,EACJ,IAAI2O,EACJ,IAAIxmB,EACJ,IAAI0S,EACJ,IAAIwvB,GAA2BoF,EAASnnC,MACxC,IAAI8nC,GAA2Bf,EAAM/mC,MAGrC,IAAI+nC,GAAwC,GAAI3jC,OAAqB29B,EACrE,KAAKtiC,EAAI,EAAGA,EAAIsiC,EAAUtiC,IACzBsoC,EAAQtoC,GAAK,GAAI2E,MAClB,KAAK3E,EAAI,EAAGA,EAAIqoC,EAAUroC,IAAK,CAC9B,GAAIuoC,GAAcjB,EAAMtnC,EACxB,KAAKiY,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvB,GAAIuwB,GAAgCF,EAASrwB,GAAK,EAAIswB,EAAKxoC,EAAMkY,GAAK,EAAIswB,EAAK9iC,EAAI8iC,EAAK71B,EACxF,IAAI+1B,GAAwBF,EAAKH,WACjC,KAAKxhB,EAAI4hB,EAAOjoC,OAAS,EAAGqmB,GAAK,EAAGA,IAAK,CACxC,IAAK6hB,EAAQD,EAAO5hB,IAAM,EAAG,CAC5B6hB,GAASD,EAAO5hB,EAChB4hB,GAAOE,OAAO9hB,EAAG,EACjBA,GAAI4hB,EAAOjoC,OAAS,GAGtBioC,EAAOljC,KAAKmjC,IAId,GAAIE,GAAwC,GAAIhkC,OAAqB29B,EACrE,KAAKtiC,EAAI,EAAGA,EAAIsiC,EAAUtiC,IAAK,CAC9B,IAAK8S,EAAMw1B,EAAQtoC,GAAGO,QAAU,EAC/B,QACD,IAAIqoC,GAAgC,GAAIjkC,OAAcmO,EACtD61B,GAAQ3oC,GAAK4oC,CACbA,GAAO,GAAK5oC,CACZ,IAAI6oC,GAAcnB,EAAS1nC,EAC3B,KAAKiY,EAAI,EAAGA,EAAInF,EAAKmF,IAAK,CACzB,GAAIgsB,GAAc,GAAIiE,EACtBjE,GAAGlmB,EAAI8qB,EAAG9qB,CACVkmB,GAAGjmB,EAAI6qB,EAAG7qB,CACVimB,GAAG3hB,EAAIumB,EAAGvmB,CACV2hB,GAAGnkC,EAAI+oC,EAAG/oC,CACVmkC,GAAG4D,EAAIgB,EAAGhB,CACVe,GAAO3wB,GAAKyvB,EAASnnC,MACrBmnC,GAASpiC,KAAK2+B,IAGhB3B,EAAWoF,EAASnnC,MAEpB,KAAKP,EAAI,EAAGA,EAAIqoC,EAAUroC,IAAK,CAC9BuoC,EAAOjB,EAAMtnC,EACbyoC,GAAQF,EAAKH,WACb,KAAKnwB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvB2O,EAAK3O,GAAK,EAAIswB,EAAKxoC,EAAMkY,GAAK,EAAIswB,EAAK9iC,EAAI8iC,EAAK71B,CAChD81B,GAASF,EAAQ1hB,EACjB9T,GAAM01B,EAAOjoC,MACbqoC,GAASD,EAAQ/hB,EACjB,KAAKxmB,EAAI,EAAGA,EAAI0S,EAAK1S,IAAK,CACzB,GAAMqoC,GAAS,GAAOD,EAAOpoC,IAAM,IAASqoC,EAAQD,EAAOpoC,IAAM,EAAI,CACpE,GAAIk7B,GAAwBsN,EAAOxoC,EACnC,IAAIqoC,GAAS,EAAG,CAEfD,EAAOE,OAAOtoC,EAAG,EACjBwoC,GAAOF,OAAOtoC,EAAG,GAElB,GAAI6X,GAAK,EACRswB,EAAKxoC,EAAIu7B,MAAY,IAAIrjB,GAAK,EAC9BswB,EAAK9iC,EAAI61B,MACTiN,GAAK71B,EAAI4oB,CACVl7B,GAAI0S,MAODhS,GAAAiE,UAAAwgC,wBAAR,WAEC,GAAIhsB,EAEJA,GAAM,GAAIpQ,GAAAvI,QAAe0D,KAAK+gC,SAAStf,aAEvC,IAAIzhB,KAAK+gC,SAAS0B,SACjBxtB,EAAIiO,cAActC,QAAU5gB,KAAK+gC,SAAS0B,SAAS7hB,SAAWxd,EAAA9G,QAAuBkoC,mBAEtFvvB,GAAIgP,cAAc3C,MAAQthB,KAAK+gC,SAASuB,YACxCrtB,GAAI8O,eAAezC,MAAQthB,KAAK+gC,SAASwB,aAEzC,IAAIviC,KAAK+iB,cAAgB,EACxB9N,EAAI+N,KAAOpe,EAAAtI,QAAmB2mB,UAE/BhO,GAAIC,UAAYlV,KAAK+gC,SAASyB,QAE9BxiC,MAAKmM,gBAAgB8I,EAAKjV,KAAK+gC,SAAS30B,KAExCpM,MAAK6gC,WAAW7gC,KAAK+gC,SAAS30B,MAAQpM,KAAK+gC,QAC3C/gC,MAAK+gC,SAAS5qB,SAAWlB,CAEzBjV,MAAK+gC,SAAW,KAGTvkC,GAAAiE,UAAA+gC,kBAAR,WAEC,GAAIiD,EACJ,IAAI3H,GAAa,EAEjB,QAAQ2H,EAAMzkC,KAAKsN,UAAUwB,oBAAsB,EAClDguB,GAAOhF,OAAOC,aAAa0M,EAE5B,OAAO3H,GAGAtgC,GAAAiE,UAAAshC,cAAR,WAEC,GAAIz3B,GAAoB,GAAIgS,cAAa,GAGzChS,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,GAAK,CAGVA,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,IAAMtK,KAAKsN,UAAUmG,WAC1BnJ,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,IAAM,CAGXA,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,GAAKtK,KAAKsN,UAAUmG,WACzBnJ,GAAK,GAAK,CAGVA,GAAK,IAAMtK,KAAKsN,UAAUmG,WAC1BnJ,GAAK,IAAMtK,KAAKsN,UAAUmG,WAC1BnJ,GAAK,IAAMtK,KAAKsN,UAAUmG,WAC1BnJ,GAAK,IAAM,CAEX,OAAOA,GAGA9N,GAAAiE,UAAA4hC,UAAR,WAEC,GAAIf,EACJ,IAAI9yB,EACJ,IAAInT,GAAkBqpC,EAAkBvjC,CAExCmgC,GAAMthC,KAAKsN,UAAUyG,mBACrBvF,GAAMxO,KAAKsN,UAAUuB,iBAErB,QAAQyyB,GACP,IAAK,IACJjmC,EAAI2E,KAAKsN,UAAUmG,YAAY,GAC/BixB,GAAI1kC,KAAKsN,UAAUmG,YAAY,GAC/BtS,GAAInB,KAAKsN,UAAUmG,YAAY,GAC/B,MACD,KAAK,IACJpY,EAAI2E,KAAKsN,UAAUwB,kBACnB41B,GAAI1kC,KAAKsN,UAAUwB,kBACnB3N,GAAInB,KAAKsN,UAAUwB,kBACnB,MACD,SACC9O,KAAKsN,UAAUuC,UAAarB,EAAM,CAClC,OAGF,MAAQnT,IAAK,GAAOqpC,GAAK,EAAKvjC,EAEhC,OAAA3E,IAvxB2B6F,EAAA/F,QAyxB3BkD,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MR2iIA3D,GAAQO,QQ3iIOE,CAKf,IAAAqnC,GAAA,WAAA,QAAAA,MAMA,MAAAA,KAKA,IAAAzB,GAAA,WAAA,QAAAA,MAUA,MAAAA,KAKA,IAAAb,GAAA,WAAA,QAAAA,MAcA,MAAAA,KAKA,IAAAoB,GAAA,WAAA,QAAAA,MAIA,MAAAA,KAKA,IAAAiB,GAAA,WAAA,QAAAA,MASA,MAAAA,QRihIG5V,8CAA8Cxb,UAAU8b,gCAAgC9b,UAAUgc,gCAAgChc,UAAUmyB,sCAAsCnyB,UAAUqc,0CAA0Crc,UAAUsc,iCAAiCtc,UAAUuc,qCAAqCvc,UAAUwc,sCAAsCxc,UAAUkd,oDAAoDld,UAAUqd,oCAAoCrd,UAAUwd,+CAA+Cxd,UAAUyd,qDAAqDzd,UAAUye,8CAA8Cze,UAAU2e,4CAA4C3e,UAAU4e,gDAAgD5e,YAAYhV,gCAAgC,SAASvC,EAAQkB,EAAOJ,GACn0B,YACA,IAAIkF,GAAajB,MAAQA,KAAKiB,WAAc,SAAUC,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOtB,KAAKuB,YAAcL,EACnCA,EAAET,UAAYU,IAAM,KAAO3B,OAAOgC,OAAOL,IAAMG,EAAGb,UAAYU,EAAEV,UAAW,GAAIa,IS74JnF,IAAAS,GAAA9G,EAA0B,kCAC1B,IAAAwG,GAAAxG,EAAiC,8CACjC,IAAAslC,GAAAtlC,EAA8B,sCAK9B,IAAAkH,GAAAlH,EAAmC,0CACnC,IAAAmH,GAAAnH,EAA4B,iCAC5B,IAAAoH,GAAApH,EAA4B,qCAC5B,IAAAqH,GAAArH,EAA6B,sCAI7B,IAAA4H,GAAA5H,EAAiC,+CACjC,IAAA0H,GAAA1H,EAAqC,oDACrC,IAAAgI,GAAAhI,EAAyB,oCACzB,IAAAmI,GAAAnI,EAAqC,qDAErC,IAAAgJ,GAAAhJ,EAAgC,8CAEhC,IAAA4J,GAAA5J,EAA+B,4CAC/B,IAAA2J,GAAA3J,EAAkC,gDAClC,IAAA2pC,GAAA3pC,EAAmC,yDAKnC,IAAA+B,GAAA,SAAAkK,GAAwBjG,EAAAjE,EAAAkK,EAgCvB,SAAAlK,GAAY6nC,GAAA,GAAAA,QAAA,GAAgB,CAAhBA,EAAA,EAEX39B,EAAAlL,KAAAgE,KAAMmC,EAAA7F,QAAoB67B,KAVnBn4B,MAAA8kC,cAAwB,IACxB9kC,MAAA+kC,kBAA2B,EAUlC/kC,MAAKglC,OAASH,EAOfrlC,OAAAC,eAAWzC,EAAAyD,UAAA,ST82JJgqB,IS92JP,SAAiB/qB,GAEhBM,KAAKglC,OAAStlC,GT+2JRulC,WAAY,KACZC,aAAc,MSx2JPloC,GAAAwO,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQPzO,GAAA2O,aAAd,SAA2BrB,GAE1B,GAAI66B,GAAiB7iC,EAAAhG,QAAYsP,SAAStB,EAC1C,IAAI86B,GAAe,KACnB,IAAIC,GAAe,KAEnB,IAAIF,EAAS,CACZC,EAAOD,EAAQjP,QAAQ,UAAY,CACnCmP,GAAOF,EAAQjP,QAAQ,UAAY,EAGpC,MAAOkP,IAAQC,EAMTroC,GAAAyD,UAAAoL,oBAAP,SAA2BC,GAE1B,GAAIA,EAAmB5L,IAAM,MAAO,CACnC,GAAI48B,GAAax6B,EAAAhG,QAAYsP,SAASE,EAAmBxB,KACzDtK,MAAKslC,SAASxI,OAER,CACN,GAAI9vB,EAEJ,IAAIlB,EAAmBC,OAAO9P,QAAU,EAAG,CAC1C,OAGD+Q,EAAQlB,EAAmBC,OAAO,EAElC,IAAIiB,EAAMsT,QAAQigB,EAAAjkC,SAAgB,CAEjC,GAAIipC,GAAoB,GAAIC,EAC5BD,GAAGE,WAAa35B,EAAmB5L,EACnCqlC,GAAG3kB,QAAU,GAAI3c,GAAA3H,QAAgC0Q,EAEjDhN,MAAK0lC,gBAAgB1kC,KAAKukC,EAE1B,IAAIvlC,KAAK2lC,SAAS1pC,OAAS,EAAG,CAC7B+D,KAAK4lC,cAAcL,MAShBvoC,GAAAyD,UAAAqM,2BAAP,SAAkChB,GAEjC,GAAIA,EAAmB5L,IAAM,MAAO,CACnCF,KAAK6lC,QAAU,KACf7lC,MAAK8kC,cAAgB,UACf,CACN,GAAIS,GAAoB,GAAIC,EAC5BD,GAAGE,WAAa35B,EAAmB5L,EACnCF,MAAK0lC,gBAAgB1kC,KAAKukC,GAG3B,GAAIvlC,KAAK2lC,SAAS1pC,OAAS,EAC1B+D,KAAK4lC,cAAcL,GAMdvoC,GAAAyD,UAAA4M,iBAAP,WAEC,GAAIy4B,EACJ,IAAIC,GAAiBjO,OAAOC,aAAa,GACzC,IAAIiO,EAEJ,KAAKhmC,KAAKuH,gBAAiB,CAC1BvH,KAAKg5B,UAAYh5B,KAAKi5B,eAGtBj5B,MAAKg5B,UAAYh5B,KAAKg5B,UAAUhD,QAAQ,iBAAkB,KAG3D,GAAIh2B,KAAKg5B,UAAU9C,QAAQ6P,KAAa,EACvCA,EAAUjO,OAAOC,aAAa,GAE/B,KAAK/3B,KAAKuH,gBAAiB,CAC1BvH,KAAKuH,gBAAkB,IACvBvH,MAAKimC,UAAY,GAAI5lC,MACrBL,MAAKkmC,eAAiB,GAAI7lC,MAC1BL,MAAKmmC,aAAe,GAAI9lC,MACxBL,MAAK0lC,gBAAkB,GAAIrlC,MAC3BL,MAAK2lC,SAAW,GAAItlC,MACpBL,MAAKq2B,KAAO,GAAIh2B,MAChBL,MAAKomC,cAAgBpmC,KAAKg5B,UAAU/8B,MACpC+D,MAAKqmC,WAAarmC,KAAKg5B,UAAU9C,QAAQ6P,EAAS,EAClD/lC,MAAKsmC,UAAY,CACjBtmC,MAAKumC,SAAW,GAAIlmC,MACpBL,MAAKwmC,aAAe,EAGrB,MAAOxmC,KAAKqmC,WAAarmC,KAAKomC,eAAiBpmC,KAAKk0B,YAAa,CAChEl0B,KAAKqmC,WAAarmC,KAAKg5B,UAAU9C,QAAQ6P,EAAS/lC,KAAKsmC,UAEvD,IAAItmC,KAAKqmC,aAAe,EACvBrmC,KAAKqmC,WAAarmC,KAAKomC,aAExBN,GAAO9lC,KAAKg5B,UAAU7C,UAAUn2B,KAAKsmC,UAAWtmC,KAAKqmC,WACrDP,GAAOA,EAAKW,MAAM,MAAMC,KAAK,GAC7BZ,GAAOA,EAAK9P,QAAQ,KAAM,IAC1BgQ,GAAQF,EAAKW,MAAM,IACnBzmC,MAAKsmC,UAAYtmC,KAAKqmC,WAAa,CACnCrmC,MAAK2mC,UAAUX,EAKf,IAAIhmC,KAAK6N,cAAe,CACvB,MAAOxL,GAAA/F,QAAW0R,eAKpB,GAAIhO,KAAKqmC,YAAcrmC,KAAKomC,cAAe,CAE1C,GAAIpmC,KAAK6lC,UAAY7lC,KAAK8kC,cAAe,CACxC,MAAOziC,GAAA/F,QAAW0R,cAGnBhO,KAAKo7B,WACLp7B,MAAK4mC,gBAEL,OAAOvkC,GAAA/F,QAAWyR,aAGnB,MAAO1L,GAAA/F,QAAW0R,cAGZhR,GAAAyD,UAAAwN,eAAP,SAAsBC,GAGrBlO,KAAKmO,UAAY,GAAIxL,GAAArG,OAErB4K,GAAAzG,UAAMwN,eAAcjS,KAAAgE,KAACkO,GAMdlR,GAAAyD,UAAAkmC,UAAR,SAAkBX,GAEjB,OAAQA,EAAM,IAEb,IAAK,SAEJhmC,KAAK6lC,QAAU,IACf7lC,MAAK8kC,cAAgB,KACrB9kC,MAAK6mC,QAAQb,EAAM,GAEnB,MAED,KAAK,IAEJhmC,KAAK8mC,YAAYd,EAEjB,MAED,KAAK,IAEJhmC,KAAK+mC,aAAaf,EAElB,MAED,KAAK,SAEJ,GAAIhmC,KAAK6lC,QAAS,CAEjB,IAAKG,EAAM,GACVA,EAAM,GAAK,QAEZhmC,MAAKmmC,aAAanlC,KAAKglC,EAAM,GAC7BhmC,MAAK+kC,kBAAoBiB,EAAM,EAE/B,IAAIhmC,KAAKgnC,cACRhnC,KAAKgnC,cAAcvB,WAAazlC,KAAK+kC,kBAGvC,KAED,KAAK,IAEJ/kC,KAAKq/B,YAAY2G,EAEjB,MAED,KAAK,KAEJhmC,KAAKu0B,QAAQyR,EAEb,MAED,KAAK,KAEJhmC,KAAKinC,kBAAkBjB,EAEvB,MAED,KAAK,IAEJhmC,KAAKknC,UAAUlB,IAQVhpC,GAAAyD,UAAA26B,UAAR,WAEC,IAAK,GAAI+L,GAAkB,EAAGA,EAAWnnC,KAAKumC,SAAStqC,SAAUkrC,EAAU,CAC1E,GAAIjD,GAAsBlkC,KAAKumC,SAASY,GAAUjD,MAClD,IAAIkD,GAAmBlD,EAAOjoC,MAC9B,IAAIorC,EACJ,IAAIC,EACJ,IAAIvvB,EACJ,IAAIS,EAEJ,IAAI+uB,EACJ,IAAIC,EACJ,IAAIC,EAEJ,KAAK,GAAI/C,GAAW,EAAGA,EAAI0C,IAAa1C,EAAG,CAC1C+C,EAAa,GAAI5iC,GAAAvI,QAAe8G,EAAA9G,QAAuB23B,oBAGvD,IAAIj0B,KAAK+iB,cAAgB,EACxB0kB,EAAWzkB,KAAOpe,EAAAtI,QAAmB2mB,UAEtCzK,GAAS,GAAIvV,GAAA3G,QAAOmrC,EACpB1vB,GAAWS,EAAOT,QAClBsvB,GAAiBnD,EAAOQ,GAAG2C,cAC3BC,GAAoBD,EAAeprC,MAEnC,KAAKsrC,EAAI,EAAGA,EAAID,IAAqBC,EACpCvnC,KAAK0nC,uBAAuBL,EAAeE,GAAIxvB,EAEhD,IAAIA,EAASW,OAAS,EACrB,QAGD1Y,MAAKmM,gBAAyB4L,EAE9B,IAAI/X,KAAKumC,SAASY,GAAU/6B,KAAM,CAEjCoM,EAAOpM,KAAOpM,KAAKumC,SAASY,GAAU/6B,SAEhC,IAAI83B,EAAOQ,GAAGt4B,KAAM,CAG1BoM,EAAOpM,KAAO83B,EAAOQ,GAAGt4B,SAElB,CAGNoM,EAAOpM,KAAO,GAGfpM,KAAK2lC,SAAS3kC,KAAKwX,EAEnB,IAAI0rB,EAAOQ,GAAGe,YAAc,GAC3BgC,EAAWr7B,KAAO83B,EAAOQ,GAAGe,WAAa,IAAMjtB,EAAOpM,SACtDq7B,GAAWr7B,KAAOpM,KAAK2nC,WAAa,IAAMnvB,EAAOpM,IAElD,IAAIoM,EAAOT,SAASW,MAAQ,EAAG,CAC9B,IAAK8uB,EAAK,EAAGA,EAAKhvB,EAAOT,SAASW,QAAS8uB,EAC1ChvB,EAAOT,SAASY,aAAa6uB,GAAIrxB,SAAWsxB,EAIpBznC,KAAKmO,UAAW+R,SAAS1H,EAEnDxY,MAAKmM,gBAAyBqM,KAUzBxb,GAAAyD,UAAAinC,uBAAR,SAA+BE,EAA6B7vB,GAE3D,GAAIirB,GAAwB4E,EAAc5E,KAC1C,IAAIiB,EACJ,IAAIF,GAAkBf,EAAM/mC,MAC5B,IAAI+hC,EACJ,IAAInkB,EAEJ,IAAIupB,GAAyB,GAAI/iC,MACjC,IAAI8d,GAAoB,GAAI9d,MAC5B,IAAI+d,GAAwB,GAAI/d,MAChC,IAAIwT,GAAiC,GAAIxT,MAEzCL,MAAK6nC,eACL7nC,MAAK8nC,aAAe,CAEpB,IAAIn0B,EACJ,KAAK,GAAIjY,GAAW,EAAGA,EAAIqoC,IAAYroC,EAAG,CAEzCuoC,EAAOjB,EAAMtnC,EACbsiC,GAAWiG,EAAK8D,SAAS9rC,OAAS,CAElC,KAAK0X,EAAI,EAAGA,EAAIqqB,IAAYrqB,EAAG,CAE9B3T,KAAKgoC,oBAAoB/D,EAAMtwB,EAAGyvB,EAAUjlB,EAAKtK,EAASuK,EAC1Dpe,MAAKgoC,oBAAoB/D,EAAM,EAAGb,EAAUjlB,EAAKtK,EAASuK,EAC1Dpe,MAAKgoC,oBAAoB/D,EAAMtwB,EAAI,EAAGyvB,EAAUjlB,EAAKtK,EAASuK,IAGhE,GAAIglB,EAASnnC,OAAS,EAAG,CACxB4d,EAAW,GAAIhX,GAAAvG,QAAiB,GAAImF,GAAAnF,QACpCud,GAAS2E,kBAAoBJ,EAAQniB,OAAQ,MAAQ,IACrD4d,GAAS6E,WAAW7K,EACpBgG,GAASvF,aAAa8uB,EACtBvpB,GAAS8E,WAAWP,EACpBvE,GAASrF,OAAO2J,EAEhBpG,GAASsG,WAAWxE,IAId7c,GAAAyD,UAAAunC,oBAAR,SAA4B/D,EAAenN,EAAoBsM,EAAwBjlB,EAAmBtK,EAAgCuK,GAEzI,GAAI4Y,EACJ,IAAIiR,EACJ,IAAIC,EACJ,IAAIC,EAEJ,KAAKnoC,KAAK6nC,aAAa5D,EAAK8D,SAASjR,IAAe,CAEnDE,EAAQh3B,KAAK8nC,YACb9nC,MAAK6nC,aAAa5D,EAAK8D,SAASjR,MAAkB92B,KAAK8nC,YACvDG,GAASjoC,KAAKimC,UAAUhC,EAAKmE,cAActR,GAAe,EAC1DsM,GAASpiC,KAAKinC,EAAOxuB,EAAEzZ,KAAKglC,OAAQiD,EAAOvuB,EAAE1Z,KAAKglC,OAAQiD,EAAOjqB,EAAEhe,KAAKglC,OAExE,IAAIf,EAAKoE,cAAcpsC,OAAS,EAAG,CAClCisC,EAAeloC,KAAKkmC,eAAejC,EAAKoE,cAAcvR,GAAe,EACrE1Y,GAAQpd,KAAKknC,EAAazuB,EAAGyuB,EAAaxuB,EAAGwuB,EAAalqB,GAG3D,GAAIimB,EAAKqE,UAAUrsC,OAAS,EAAG,CAE9B,IACCksC,EAAKnoC,KAAKq2B,KAAK4N,EAAKqE,UAAUxR,GAAe,EAC7C3Y,GAAInd,KAAKmnC,EAAG3sC,EAAG2sC,EAAG5E,GAEjB,MAAOroC,GAER,OAAQ47B,GACP,IAAK,GACJ3Y,EAAInd,KAAK,EAAG,EACZ,MACD,KAAK,GACJmd,EAAInd,KAAK,GAAI,EACb,MACD,KAAK,GACJmd,EAAInd,KAAK,EAAG,UAMV,CACNg2B,EAAQh3B,KAAK6nC,aAAa5D,EAAK8D,SAASjR,IAAgB,EAGzDjjB,EAAQ7S,KAAKg2B,GAONh6B,GAAAyD,UAAAsmC,aAAR,SAAqBf,GAEpBhmC,KAAKgnC,cAAgB,IACrBhnC,MAAKuoC,sBAAwB,IAC7BvoC,MAAKumC,SAASvlC,KAAKhB,KAAKwoC,eAAiB,GAAIC,GAE7C,IAAIzC,EACHhmC,KAAKwoC,eAAep8B,KAAO45B,EAAM,GAO3BhpC,GAAAyD,UAAAqmC,YAAR,SAAoBd,GAEnB,IAAKhmC,KAAKwoC,eACTxoC,KAAK+mC,aAAa,KACnB/mC,MAAKgnC,cAAgB,GAAI0B,EAEzB1oC,MAAKgnC,cAAcvB,WAAazlC,KAAK+kC,iBAErC,IAAIiB,EACHhmC,KAAKgnC,cAAc56B,KAAO45B,EAAM,EACjChmC,MAAKwoC,eAAetE,OAAOljC,KAAKhB,KAAKgnC,cAErChnC,MAAK2oC,oBAAoB,MAOlB3rC,GAAAyD,UAAAkoC,oBAAR,SAA4B3C,GAE3BhmC,KAAKuoC,sBAAwB,GAAIK,EACjC,IAAI5C,EACHhmC,KAAKuoC,sBAAsBvuB,IAAMgsB,EAAM,EACxChmC,MAAKgnC,cAAcK,eAAermC,KAAKhB,KAAKuoC,uBAOrCvrC,GAAAyD,UAAA4+B,YAAR,SAAoB2G,GAInB,GAAIrG,GAAWC,EAAYC,CAC3B,IAAImG,EAAM/pC,OAAS,EAAG,CACrB,GAAI4sC,KACJ,IAAIC,EAEJ,KAAK,GAAIptC,GAAW,EAAGA,EAAIsqC,EAAM/pC,SAAUP,EAAG,CAC7CotC,EAAMnM,WAAWqJ,EAAMtqC,GACvB,KAAKgwB,MAAMod,GACVD,EAAO7nC,KAAK8nC,GAGdnJ,EAAckJ,EAAO,EACrBjJ,GAAciJ,EAAO,EACrBhJ,IAAegJ,EAAO,EACtB7oC,MAAKimC,UAAUjlC,KAAK,GAAI+nC,GAAOpJ,EAAIC,EAAIC,QAEjC,CACNF,EAAchD,WAAWqJ,EAAM,GAC/BpG,GAAcjD,WAAWqJ,EAAM,GAC/BnG,IAAelD,WAAWqJ,EAAM,GAEhChmC,MAAKimC,UAAUjlC,KAAK,GAAI+nC,GAAOpJ,EAAIC,EAAIC,KASjC7iC,GAAAyD,UAAA8zB,QAAR,SAAgByR,GAEf,GAAIA,EAAM/pC,OAAS,EAAG,CACrB,GAAI4sC,KACJ,IAAIC,EACJ,KAAK,GAAIptC,GAAW,EAAGA,EAAIsqC,EAAM/pC,SAAUP,EAAG,CAC7CotC,EAAMnM,WAAWqJ,EAAMtqC,GACvB,KAAKgwB,MAAMod,GACVD,EAAO7nC,KAAK8nC,GAEd9oC,KAAKq2B,KAAKr1B,KAAK,GAAIgoC,GAAGH,EAAO,GAAI,EAAIA,EAAO,SAEtC,CACN7oC,KAAKq2B,KAAKr1B,KAAK,GAAIgoC,GAAGrM,WAAWqJ,EAAM,IAAK,EAAIrJ,WAAWqJ,EAAM,OAS3DhpC,GAAAyD,UAAAwmC,kBAAR,SAA0BjB,GAEzB,GAAIA,EAAM/pC,OAAS,EAAG,CACrB,GAAI4sC,KACJ,IAAIC,EACJ,KAAK,GAAIptC,GAAW,EAAGA,EAAIsqC,EAAM/pC,SAAUP,EAAG,CAC7CotC,EAAMnM,WAAWqJ,EAAMtqC,GACvB,KAAKgwB,MAAMod,GACVD,EAAO7nC,KAAK8nC,GAEd9oC,KAAKkmC,eAAellC,KAAK,GAAI+nC,GAAOF,EAAO,GAAIA,EAAO,IAAKA,EAAO,SAE5D,CACN7oC,KAAKkmC,eAAellC,KAAK,GAAI+nC,GAAOpM,WAAWqJ,EAAM,IAAKrJ,WAAWqJ,EAAM,KAAMrJ,WAAWqJ,EAAM,OAQ5FhpC,GAAAyD,UAAAymC,UAAR,SAAkBlB,GAEjB,GAAIx3B,GAAaw3B,EAAM/pC,MACvB,IAAIgoC,GAAgB,GAAIgF,EAExB,KAAKjpC,KAAKgnC,cAAe,CACxBhnC,KAAK8mC,YAAY,MAGlB,GAAIjzB,EACJ,KAAK,GAAInY,GAAW,EAAGA,EAAI8S,IAAO9S,EAAG,CAEpC,GAAIsqC,EAAMtqC,IAAM,GAAI,CACnB,SAGDmY,EAAUmyB,EAAMtqC,GAAG+qC,MAAM,IACzBxC,GAAKmE,cAAcpnC,KAAKhB,KAAKkpC,WAAWj9B,SAAS4H,EAAQ,IAAK7T,KAAKimC,UAAUhqC,QAE7E,IAAI4X,EAAQ,IAAMikB,OAAOjkB,EAAQ,IAAI5X,OAAS,EAC7CgoC,EAAKqE,UAAUtnC,KAAKhB,KAAKkpC,WAAWj9B,SAAS4H,EAAQ,IAAK7T,KAAKq2B,KAAKp6B,QAErE,IAAI4X,EAAQ,IAAMikB,OAAOjkB,EAAQ,IAAI5X,OAAS,EAC7CgoC,EAAKoE,cAAcrnC,KAAKhB,KAAKkpC,WAAWj9B,SAAS4H,EAAQ,IAAK7T,KAAKkmC,eAAejqC,QAEnFgoC,GAAK8D,SAAS/mC,KAAKglC,EAAMtqC,IAG1BsE,KAAKuoC,sBAAsBvF,MAAMhiC,KAAKijC,GAM/BjnC,GAAAyD,UAAAyoC,WAAR,SAAmBlS,EAAc/6B,GAEhC,GAAI+6B,EAAQ,EACX,MAAOA,GAAQ/6B,EAAS,MACxB,OAAO+6B,GAGDh6B,GAAAyD,UAAA6kC,SAAR,SAAiBh7B,GAEhB,GAAI6+B,GAAsB7+B,EAAKm8B,MAAM,SACrC,IAAI2C,EACJ,IAAIpD,EACJ,IAAIryB,EAEJ,IAAI01B,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIjH,EACJ,IAAIhhB,EACJ,IAAIihB,EACJ,IAAIhhB,EACJ,IAAI4B,EACJ,IAAIqmB,EAEJ,KAAK,GAAI9tC,GAAW,EAAGA,EAAIytC,EAAoBltC,SAAUP,EAAG,CAG3D0tC,EAASD,EAAoBztC,GAAG+qC,MAAM,MAAOC,KAAK,IAAID,MAAM,KAG5D,IAAI2C,EAAMntC,QAAU,EACnBmtC,EAAQD,EAAoBztC,GAAG+qC,MAAM3O,OAAOC,aAAa,IAE1DuK,GAAehhB,EAAQihB,EAAgB,QACvChhB,GAAW,CACX+nB,GAAc,KACdC,GAAW,KACXpmB,GAAQ,CACRqmB,GAAQ,EAER,KAAK71B,EAAI,EAAGA,EAAIy1B,EAAMntC,SAAU0X,EAAG,CAElCy1B,EAAMz1B,GAAKy1B,EAAMz1B,GAAGqiB,QAAQ,OAAQ,GAEpC,IAAIoT,EAAMz1B,GAAGwiB,UAAU,EAAG,IAAM,MAAQxiB,GAAK,GAAKy1B,EAAMz1B,IAAM,IAAK,CAClEqyB,EAAQoD,EAAMz1B,GAAG8yB,MAAM,IAEvB,IAAI3O,OAAOkO,EAAM,IAAIyD,WAAW,IAAM,GAAK3R,OAAOkO,EAAM,IAAIyD,WAAW,IAAM,GAC5EzD,EAAM,GAAKA,EAAM,GAAG7P,UAAU,EAAG6P,EAAM,GAAG/pC,OAE3C,IAAI0X,GAAK,EAAG,CACX3T,KAAK2nC,WAAa3B,EAAMU,KAAK,GAC7B1mC,MAAK2nC,WAAc3nC,KAAK2nC,YAAc,GAAK,SAAW3nC,KAAK2nC,eAErD,CAEN,OAAQ3B,EAAM,IAEb,IAAK,KACJ,GAAIA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,MAAQA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,MAAQA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,KACnH1kB,EAAQ0kB,EAAM,GAAG,KAAO,GAAKA,EAAM,GAAG,KAAO,EAAIA,EAAM,GAAG,GAC3D,MAED,KAAK,KACJ,GAAIA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,MAAQA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,MAAQA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,KAAM,CACzHzD,EAAgByD,EAAM,GAAG,KAAO,GAAKA,EAAM,GAAG,KAAO,EAAIA,EAAM,GAAG,GAClEsD,GAAc,KAEf,KAED,KAAK,KACJ,GAAItD,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,KACnCzkB,EAAW6f,OAAO4E,EAAM,IAAI,IAC7B,IAAIzkB,GAAY,EACf+nB,EAAc,KACf,MAED,KAAK,KACJ,GAAItD,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,MAAQA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,MAAQA,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,KAAM,CACzH1D,EAAe0D,EAAM,GAAG,KAAO,GAAKA,EAAM,GAAG,KAAO,EAAIA,EAAM,GAAG,GACjEuD,GAAW,KAEZ,KAED,KAAK,KACL,IAAK,IACJ,GAAIvD,EAAM,KAAOta,MAAM0V,OAAO4E,EAAM,KACnC7iB,EAAQie,OAAO4E,EAAM,GACtB,MAED,KAAK,SACJwD,EAAQxpC,KAAK0pC,iBAAiB1D,EAC9BwD,GAAQA,EAAMxT,QAAQ,MAAO,QAMlC,GAAIwT,GAAS,GAAI,CAEhB,GAAIF,EAAa,CAEhBD,EAAsB,GAAIzE,GAAAtoC,OAC1B+sC,GAAoB/nB,MAAQihB,CAC5B8G,GAAoBrlB,SAAWzC,CAE/B,IAAIooB,GAA4B,GAAIC,EACpCD,GAAaxmB,MAAQA,CACrBwmB,GAAaN,oBAAsBA,CACnCM,GAAalE,WAAazlC,KAAK2nC,UAE/B,KAAK3nC,KAAK6pC,sBACT7pC,KAAK6pC,sBAAwB,GAAIxpC,MAElCL,MAAK6pC,sBAAsB7oC,KAAK2oC,GAIjC3pC,KAAKia,gBAAgBja,KAAK2nC,WAAY,GAAIvlC,GAAA9F,QAAWktC,QAE/C,IAAID,IAAa7d,MAAMpK,GAAQ,CAErC,GAAIikB,GAAoB,GAAIC,EAC5BD,GAAGE,WAAazlC,KAAK2nC,UAErB,IAAIxkB,GAAS,EACZ9W,QAAQC,IAAI,yEAA2EtM,KAAK2nC,WAAa,2CAE1G,IAAImC,GAAoB,GAAIjlC,GAAAvI,QAAeglB,EAE3C,IAAIthB,KAAK+iB,aAAe,EAAG,CAC1B+mB,EAAG3mB,MAAQA,MACL,CACN2mB,EAAG9mB,KAAOpe,EAAAtI,QAAmB2mB,WAG9B6mB,EAAG7lB,cAAc3C,MAAQghB,CAEzB,IAAIgH,EAAa,CAChBQ,EAAG/lB,eAAezC,MAAQihB,CAC1BuH,GAAG/lB,eAAeC,SAAWzC,EAG9BgkB,EAAGuE,GAAKA,CAER9pC,MAAK0lC,gBAAgB1kC,KAAKukC,EAE1B,IAAIvlC,KAAK2lC,SAAS1pC,OAAS,EAC1B+D,KAAK4lC,cAAcL,IAKtBvlC,KAAK8kC,cAAgB,KAGd9nC,GAAAyD,UAAAipC,iBAAR,SAAyB1D,GAExB,GAAIhsB,GAAa,EACjB,IAAIte,EACJ,IAAIquC,EAEJ,KAAKruC,EAAI,EAAGA,EAAIsqC,EAAM/pC,QAAS,CAC9B,OAAQ+pC,EAAMtqC,IACb,IAAK,UACL,IAAK,UACL,IAAK,MACL,IAAK,SACL,IAAK,UACJA,GAAK,CACL,MACD,KAAK,MACJA,GAAK,CACL,MACD,KAAK,KACL,IAAK,KACL,IAAK,KACJA,GAAK,CACL,SACD,SACCquC,EAAY,IACZ,OAGF,GAAIA,EACH,MAIF,IAAKruC,EAAGA,EAAIsqC,EAAM/pC,OAAQP,IAAK,CAC9Bse,GAAOgsB,EAAMtqC,EACbse,IAAO,IAIRA,EAAMA,EAAIgc,QAAQ,OAAQ,GAE1B,OAAOhc,GAGAhd,GAAAyD,UAAAomC,QAAR,SAAgBmD,GAIfhqC,KAAKia,gBAAgB,MAAO,GAAI7X,GAAA9F,QAAW0tC,GAAS,KACpDhqC,MAAKma,iCAGEnd,GAAAyD,UAAAmlC,cAAR,SAAsBL,GAErB,GAAI0E,EACJ,IAAIzxB,EACJ,IAAI0xB,EACJ,IAAIv2B,EACJ,IAAIg2B,EAEJ,KAAK,GAAIjuC,GAAW,EAAGA,EAAIsE,KAAK2lC,SAAS1pC,SAAUP,EAAG,CACrD8c,EAASxY,KAAK2lC,SAASjqC,EACvBuuC,GAAczxB,EAAOrC,SAAS/J,KAAKq6B,MAAM,IAEzC,IAAIwD,EAAY,IAAM1E,EAAGE,WAAY,CAEpC,GAAIF,EAAGuE,GAAI,CACV,GAAItxB,EAAOrC,SACVqC,EAAOrC,SAAW,IACnBqC,GAAOrC,SAAWovB,EAAGuE,OAEf,IAAIvE,EAAG3kB,QAAS,CACtBspB,EAAuB1xB,EAAOrC,QAE9B+zB,GAAGhnB,cAActC,QAAU2kB,EAAG3kB,OAC9BspB,GAAGnxB,MAAMuI,MAAQikB,EAAGjkB,KACpB4oB,GAAG/mB,MAAQoiB,EAAGpiB,KACd+mB,GAAGnxB,MAAMF,QAAU,GAAI9W,GAAAzF,QAAU,KAEjC,IAAI0D,KAAK+iB,aAAe,EACvBmnB,EAAG/mB,MAAQoiB,EAAGpiB,UAEd+mB,GAAGlnB,KAAOpe,EAAAtI,QAAmB2mB,UAE9B,IAAIsiB,EAAGxhB,eAAgB,CAMtBmmB,EAAGnmB,eAAiB,IACpBmmB,GAAGnmB,eAAiBwhB,EAAGxhB,mBAEjB,IAAI/jB,KAAK6pC,sBAAuB,CAEtC,IAAKl2B,EAAI,EAAGA,EAAI3T,KAAK6pC,sBAAsB5tC,SAAU0X,EAAG,CACvDg2B,EAAe3pC,KAAK6pC,sBAAsBl2B,EAE1C,IAAIg2B,EAAalE,YAAcF,EAAGE,WAAY,CAC7CyE,EAAGnmB,eAAiB,IACpBmmB,GAAGnmB,eAAiB4lB,EAAaN,mBACjCa,GAAGnmB,eAAezC,MAAQqoB,EAAaroB,KACvC4oB,GAAGnmB,eAAeC,SAAW2lB,EAAaxmB,KAC1C,UAMJ3K,EAAOrC,SAAS/J,KAAO69B,EAAY,GAAIA,EAAY,GAAKA,EAAY,EACpEjqC,MAAK2lC,SAASvB,OAAO1oC,EAAG,KACtBA,GAIJ,GAAI6pC,EAAGuE,IAAMI,EACZlqC,KAAKmM,gBAAgBo5B,EAAGuE,IAAMI,GAGxBltC,GAAAyD,UAAAmmC,eAAR,WAEC,GAAI5mC,KAAK0lC,gBAAgBzpC,QAAU,EAClC,MAED,KAAK,GAAIP,GAAW,EAAGA,EAAIsE,KAAK0lC,gBAAgBzpC,SAAUP,EACzDsE,KAAK4lC,cAAc5lC,KAAK0lC,gBAAgBhqC,IAE3C,OAAAsB,IAp3BwBqF,EAAA/F,QAs3BxBkD,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MTgrJA3D,GAAQO,QShrJOU,CAEf,IAAAyrC,GAAA,WAAA,QAAAA,KAGQzoC,KAAAkkC,OAAiB,GAAI7jC,OAC7B,MAAAooC,KAEA,IAAAC,GAAA,WAAA,QAAAA,KAIQ1oC,KAAAqnC,eAAiC,GAAIhnC,OAC7C,MAAAqoC,KAEA,IAAAE,GAAA,WAAA,QAAAA,KAGQ5oC,KAAAgjC,MAAmB,GAAI3iC,OAC/B,MAAAuoC,KAEA,IAAAgB,GAAA,WAAA,QAAAA,KAIQ5pC,KAAAshB,MAAe,QACfthB,MAAAmjB,MAAe,EACvB,MAAAymB,KAEA,IAAApE,GAAA,WAAA,QAAAA,KAMQxlC,KAAAshB,MAAe,QACfthB,MAAAmjB,MAAe,EACvB,MAAAqiB,KAEA,IAAAyD,GAAA,WAAA,QAAAA,KAEQjpC,KAAAooC,cAAuC,GAAI/nC,MAC3CL,MAAAsoC,UAAmC,GAAIjoC,MACvCL,MAAAqoC,cAAuC,GAAIhoC,MAC3CL,MAAA+nC,SAAoB,GAAI1nC,OAChC,MAAA4oC,KAKA,IAAAD,GAAA,WAWC,QAAAA,GAAYxtC,EAAc+nC,GAAd,GAAA/nC,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAA+nC,QAAA,GAAY,CAAZA,EAAA,EAEzBvjC,KAAKmqC,GAAK3uC,CACVwE,MAAKoqC,GAAK7G,EAMX/jC,OAAAC,eAAWupC,EAAAvoC,UAAA,KTwqJJiV,ISxqJP,WAEC,MAAO1V,MAAKoqC,ITyqJN3f,IStqJP,SAAa/qB,GAEZM,KAAKoqC,GAAK1qC,GTuqJJulC,WAAY,KACZC,aAAc,MSlqJrB1lC,QAAAC,eAAWupC,EAAAvoC,UAAA,KTwqJJiV,ISxqJP,WAEC,MAAO1V,MAAKmqC,ITyqJN1f,IStqJP,SAAa/qB,GAEZM,KAAKmqC,GAAKzqC,GTuqJJulC,WAAY,KACZC,aAAc,MSlqJd8D,GAAAvoC,UAAAo0B,MAAP,WAEC,MAAO,IAAImU,GAAGhpC,KAAKmqC,GAAInqC,KAAKoqC,IAMtBpB,GAAAvoC,UAAAmL,SAAP,WAEC,MAAO5L,MAAKmqC,GAAK,IAAMnqC,KAAKoqC,GAE9B,OAAApB,KAEA,IAAAD,GAAA,WAeC,QAAAA,GAAYtvB,EAAcC,EAAcsE,EAAcgZ,GAA1C,GAAAvd,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAC,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAsE,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAgZ,QAAA,GAAgB,CAAhBA,EAAA,EAErDh3B,KAAKqqC,GAAK5wB,CACVzZ,MAAKsqC,GAAK5wB,CACV1Z,MAAKuqC,GAAKvsB,CACVhe,MAAKwqC,OAASxT,EAOfx3B,OAAAC,eAAWspC,EAAAtoC,UAAA,ST6pJJiV,ISxpJP,WAEC,MAAO1V,MAAKwqC,QT6pJN/f,ISpqJP,SAAiBggB,GAEhBzqC,KAAKwqC,OAASC,GTqqJRxF,WAAY,KACZC,aAAc,MS1pJrB1lC,QAAAC,eAAWspC,EAAAtoC,UAAA,KTiqJJiV,ISjqJP,WAEC,MAAO1V,MAAKqqC,ITkqJN5f,IS/pJP,SAAa/qB,GAEZM,KAAKqqC,GAAK3qC,GTgqJJulC,WAAY,KACZC,aAAc,MS1pJrB1lC,QAAAC,eAAWspC,EAAAtoC,UAAA,KTiqJJiV,ISjqJP,WAEC,MAAO1V,MAAKsqC,ITkqJN7f,IS/pJP,SAAa/qB,GAEZM,KAAKsqC,GAAK5qC,GTgqJJulC,WAAY,KACZC,aAAc,MS1pJrB1lC,QAAAC,eAAWspC,EAAAtoC,UAAA,KTiqJJiV,ISjqJP,WAEC,MAAO1V,MAAKuqC,ITkqJN9f,IS/pJP,SAAa/qB,GAEZM,KAAKuqC,GAAK7qC,GTgqJJulC,WAAY,KACZC,aAAc,MS3pJd6D,GAAAtoC,UAAAo0B,MAAP,WAEC,MAAO,IAAIkU,GAAO/oC,KAAKqqC,GAAIrqC,KAAKsqC,GAAItqC,KAAKuqC,IAE3C,OAAAxB,QTkqJG/a,8CAA8Cxb,UAAUmyB,sCAAsCnyB,UAAUmc,kCAAkCnc,UAAUqc,0CAA0Crc,UAAUsc,iCAAiCtc,UAAUuc,qCAAqCvc,UAAUwc,sCAAsCxc,UAAUkd,oDAAoDld,UAAUqd,oCAAoCrd,UAAUwd,+CAA+Cxd,UAAUyd,qDAAqDzd,UAAUye,8CAA8Cze,UAAU2e,4CAA4C3e,UAAU4e,gDAAgD5e,UAAUk4B,yDAAyDl4B,YAAY/U,8BAA8B,SAASxC,EAAQkB,EAAOJ,GAC51B,YUzvLA,IAAA4uC,GAAA1vC,EAAyB,iCAEzB,IAAAmB,GAAAnB,EAA2B,+BAC3B,IAAAsB,GAAAtB,EAA8B,kCAC9B,IAAAwB,GAAAxB,EAA2B,+BAC3B,IAAA8B,GAAA9B,EAA2B,+BAK3B,IAAAiC,GAAA,WAAA,QAAAA,MA8CeA,EAAA0tC,iBAAd,WAECD,EAAAruC,QAAOuuC,cAAc3tC,EAAQ4tC,aAbhB5tC,GAAA4tC,YAA4BzqC,MAAcjE,EAAAE,QAAWC,EAAAD,QAAcG,EAAAH,QAAWS,EAAAT,QAe7F,OAAAY,KAEAsC,QAAAC,eAAA1D,EAAA,cAAA2D,MAAA,MVwvLA3D,GAAQO,QUxvLOY,IV0vLZ6tC,iCAAiCv4B,UAAUrV,+BAA+B,+BAA+BC,+BAA+B,+BAA+BG,kCAAkC,kCAAkCC,+BAA+B,sCAAsC",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\nvar AWDParser_1 = require(\"awayjs-parsers/lib/AWDParser\");\nexports.AWDParser = AWDParser_1.default;\nvar Max3DSParser_1 = require(\"awayjs-parsers/lib/Max3DSParser\");\nexports.Max3DSParser = Max3DSParser_1.default;\nvar MD2Parser_1 = require(\"awayjs-parsers/lib/MD2Parser\");\nexports.MD2Parser = MD2Parser_1.default;\nvar MD5AnimParser_1 = require(\"awayjs-parsers/lib/MD5AnimParser\");\nexports.MD5AnimParser = MD5AnimParser_1.default;\nvar MD5MeshParser_1 = require(\"awayjs-parsers/lib/MD5MeshParser\");\nexports.MD5MeshParser = MD5MeshParser_1.default;\nvar OBJParser_1 = require(\"awayjs-parsers/lib/OBJParser\");\nexports.OBJParser = OBJParser_1.default;\nvar Parsers_1 = require(\"awayjs-parsers/lib/Parsers\");\nexports.Parsers = Parsers_1.default;\n\n},{\"awayjs-parsers/lib/AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"awayjs-parsers/lib/MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"awayjs-parsers/lib/MD5AnimParser\":\"awayjs-parsers/lib/MD5AnimParser\",\"awayjs-parsers/lib/MD5MeshParser\":\"awayjs-parsers/lib/MD5MeshParser\",\"awayjs-parsers/lib/Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"awayjs-parsers/lib/OBJParser\":\"awayjs-parsers/lib/OBJParser\",\"awayjs-parsers/lib/Parsers\":\"awayjs-parsers/lib/Parsers\"}],\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\":[function(require,module,exports){\n\"use strict\";\nvar AWD3Utils = (function () {\n    function AWD3Utils() {\n    }\n    AWD3Utils.BLOCKSTATE_FINALIZE = 0;\n    AWD3Utils.BLOCKSTATE_INVALID = 1;\n    AWD3Utils.BLOCKSTATE_LOAD_DEPENDENICES = 2;\n    AWD3Utils.BLOCKSTATE_NO_ASSET = 3;\n    AWD3Utils.COMPRESSIONMODE_LZMA = \"lzma\";\n    AWD3Utils.UNCOMPRESSED = 0;\n    AWD3Utils.DEFLATE = 1;\n    AWD3Utils.LZMA = 2;\n    AWD3Utils.INT8 = 1;\n    AWD3Utils.INT16 = 2;\n    AWD3Utils.INT32 = 3;\n    AWD3Utils.UINT8 = 4;\n    AWD3Utils.UINT16 = 5;\n    AWD3Utils.UINT32 = 6;\n    AWD3Utils.FLOAT32 = 7;\n    AWD3Utils.FLOAT64 = 8;\n    AWD3Utils.BOOL = 21;\n    AWD3Utils.COLOR = 22;\n    AWD3Utils.BADDR = 23;\n    AWD3Utils.AWDSTRING = 31;\n    AWD3Utils.AWDBYTEARRAY = 32;\n    AWD3Utils.VECTOR2x1 = 41;\n    AWD3Utils.VECTOR3x1 = 42;\n    AWD3Utils.VECTOR4x1 = 43;\n    AWD3Utils.MTX3x2 = 44;\n    AWD3Utils.MTX3x3 = 45;\n    AWD3Utils.MTX4x3 = 46;\n    AWD3Utils.MTX4x4 = 47;\n    return AWD3Utils;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = AWD3Utils;\n\n},{}],\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\":[function(require,module,exports){\n\"use strict\";\nvar AWD3Utils_1 = require(\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\");\nvar AWDBlock = (function () {\n    function AWDBlock(this_id, this_type) {\n        this.type = this_type;\n        this.id = this_id;\n        this.state = AWD3Utils_1.default.BLOCKSTATE_FINALIZE;\n        this.dependencies_data = Array();\n        this.dependencies_urls = Array();\n        if (this_type == 83) {\n            this.loaded_dependencies = Array(6);\n        }\n        this.loaded_dependencies_cnt = 0;\n    }\n    AWDBlock.prototype.dispose = function () {\n        this.id = null;\n        this.bytes = null;\n        this.errorMessages = null;\n        this.uvsForVertexAnimation = null;\n    };\n    AWDBlock.prototype.addError = function (errorMsg) {\n        if (!this.errorMessages)\n            this.errorMessages = new Array();\n        this.errorMessages.push(errorMsg);\n    };\n    return AWDBlock;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = AWDBlock;\n\n},{\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\":\"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\"}],\"awayjs-parsers/lib/AWDParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Float3Attributes_1 = require(\"awayjs-core/lib/attributes/Float3Attributes\");\nvar Float2Attributes_1 = require(\"awayjs-core/lib/attributes/Float2Attributes\");\nvar Byte4Attributes_1 = require(\"awayjs-core/lib/attributes/Byte4Attributes\");\nvar BitmapImageCube_1 = require(\"awayjs-core/lib/image/BitmapImageCube\");\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar PerspectiveProjection_1 = require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nvar OrthographicProjection_1 = require(\"awayjs-core/lib/projections/OrthographicProjection\");\nvar OrthographicOffCenterProjection_1 = require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nvar ByteArray_1 = require(\"awayjs-core/lib/utils/ByteArray\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DirectionalLight_1 = require(\"awayjs-display/lib/display/DirectionalLight\");\nvar PointLight_1 = require(\"awayjs-display/lib/display/PointLight\");\nvar Camera_1 = require(\"awayjs-display/lib/display/Camera\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar Billboard_1 = require(\"awayjs-display/lib/display/Billboard\");\nvar Skybox_1 = require(\"awayjs-display/lib/display/Skybox\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar StaticLightPicker_1 = require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nvar CubeMapShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nvar DirectionalShadowMapper_1 = require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nvar PrefabBase_1 = require(\"awayjs-display/lib/prefabs/PrefabBase\");\nvar PrimitiveCapsulePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nvar PrimitiveConePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nvar PrimitiveCubePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nvar PrimitiveCylinderPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nvar PrimitivePlanePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nvar PrimitiveSpherePrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nvar PrimitiveTorusPrefab_1 = require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\nvar SingleCubeTexture_1 = require(\"awayjs-display/lib/textures/SingleCubeTexture\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nvar VertexAnimator_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nvar SkeletonAnimator_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar AmbientEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nvar DiffuseDepthMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nvar DiffuseCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nvar DiffuseGradientMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nvar DiffuseLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nvar DiffuseWrapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nvar EffectAlphaMaskMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nvar EffectColorMatrixMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nvar EffectColorTransformMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nvar EffectEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nvar EffectFogMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nvar EffectFresnelEnvMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nvar EffectLightMapMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nvar EffectRimLightMethod_1 = require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nvar NormalSimpleWaterMethod_1 = require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nvar ShadowDitheredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nvar ShadowFilteredMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nvar SpecularFresnelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nvar ShadowHardMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nvar SpecularAnisotropicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nvar SpecularCelMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nvar SpecularPhongMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nvar ShadowNearMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nvar ShadowSoftMethod_1 = require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\nvar BasicMaterial_1 = require(\"awayjs-display/lib/materials/BasicMaterial\");\nvar AS2SceneGraphFactory_1 = require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\nvar Timeline_1 = require(\"awayjs-display/lib/base/Timeline\");\nvar AssetLibrary_1 = require(\"awayjs-core/lib/library/AssetLibrary\");\nvar Font_1 = require(\"awayjs-display/lib/text/Font\");\nvar TextFormat_1 = require(\"awayjs-display/lib/text/TextFormat\");\nvar AWDBlock_1 = require(\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\");\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\nvar Style_1 = require(\"awayjs-display/lib/base/Style\");\nvar Matrix_1 = require(\"awayjs-core/lib/geom/Matrix\");\nvar MappingMode_1 = require(\"awayjs-display/lib/textures/MappingMode\");\nvar ElementsType_1 = require(\"awayjs-display/lib/graphics/ElementsType\");\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nvar AWDParser = (function (_super) {\n    __extends(AWDParser, _super);\n    /**\n     * Creates a new AWD3Parserutils object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function AWDParser(view) {\n        if (view === void 0) { view = null; }\n        _super.call(this, URLLoaderDataFormat_1.default.ARRAY_BUFFER);\n        //set to \"true\" to have some console.logs in the Console\n        this._debug = false;\n        this._debugTimers = true;\n        this._startedParsing = false;\n        this._texture_users = {};\n        this._parsed_header = false;\n        this._time_all = 0;\n        this._time_graphics = 0;\n        this._time_graphics_bytes = 0;\n        this._time_timeline = 0;\n        this._time_fonts = 0;\n        this._time_textfields = 0;\n        this._time_sounds = 0;\n        this._time_textures = 0;\n        this._time_materials = 0;\n        this._time_sprites = 0;\n        this._num_graphics = 0;\n        this._num_timeline = 0;\n        this._num_fonts = 0;\n        this._num_textfields = 0;\n        this._num_sounds = 0;\n        this._num_textures = 0;\n        this._num_materials = 0;\n        this._num_sprites = 0;\n        //--Parser UTILS---------------------------------------------------------------------------\n        this.shadowMethodListProperties = {\n            1: AWDParser.BADDR,\n            2: AWDParser.BADDR,\n            3: AWDParser.BADDR,\n            101: AWDParser.PROPERTY_NUMBER,\n            102: AWDParser.PROPERTY_NUMBER,\n            103: AWDParser.PROPERTY_NUMBER,\n            201: AWDParser.UINT32,\n            202: AWDParser.UINT32,\n            301: AWDParser.UINT16,\n            302: AWDParser.UINT16,\n            401: AWDParser.UINT8,\n            402: AWDParser.UINT8,\n            601: AWDParser.COLOR,\n            602: AWDParser.COLOR,\n            701: AWDParser.BOOL,\n            702: AWDParser.BOOL,\n            801: AWDParser.MTX4x4 };\n        this.spritePoseAnimationProperties = {\n            1: AWDParser.BOOL,\n            2: AWDParser.BOOL };\n        this.sharedMethodListProperties = {\n            1: AWDParser.BADDR,\n            2: AWDParser.BADDR,\n            3: AWDParser.BADDR,\n            101: AWDParser.PROPERTY_NUMBER,\n            102: AWDParser.PROPERTY_NUMBER,\n            103: AWDParser.PROPERTY_NUMBER,\n            104: AWDParser.PROPERTY_NUMBER,\n            105: AWDParser.PROPERTY_NUMBER,\n            106: AWDParser.PROPERTY_NUMBER,\n            107: AWDParser.PROPERTY_NUMBER,\n            201: AWDParser.UINT32,\n            202: AWDParser.UINT32,\n            301: AWDParser.UINT16,\n            302: AWDParser.UINT16,\n            401: AWDParser.UINT8,\n            402: AWDParser.UINT8,\n            601: AWDParser.COLOR,\n            602: AWDParser.COLOR,\n            701: AWDParser.BOOL,\n            702: AWDParser.BOOL };\n        this._view = view;\n        this._blocks = new Array();\n        this._blocks[0] = new AWDBlock_1.default(0, 255);\n        this._blocks[0].data = null; // Zero address means null in AWD\n        this.blendModeDic = new Array(); // used to translate ints to blendMode-strings\n        this.blendModeDic.push(BlendMode_1.default.NORMAL);\n        this.blendModeDic.push(BlendMode_1.default.ADD);\n        this.blendModeDic.push(BlendMode_1.default.ALPHA);\n        this.blendModeDic.push(BlendMode_1.default.DARKEN);\n        this.blendModeDic.push(BlendMode_1.default.DIFFERENCE);\n        this.blendModeDic.push(BlendMode_1.default.ERASE);\n        this.blendModeDic.push(BlendMode_1.default.HARDLIGHT);\n        this.blendModeDic.push(BlendMode_1.default.INVERT);\n        this.blendModeDic.push(BlendMode_1.default.LAYER);\n        this.blendModeDic.push(BlendMode_1.default.LIGHTEN);\n        this.blendModeDic.push(BlendMode_1.default.MULTIPLY);\n        this.blendModeDic.push(BlendMode_1.default.NORMAL);\n        this.blendModeDic.push(BlendMode_1.default.OVERLAY);\n        this.blendModeDic.push(BlendMode_1.default.SCREEN);\n        this.blendModeDic.push(BlendMode_1.default.SHADER);\n        this.blendModeDic.push(BlendMode_1.default.OVERLAY);\n        this._depthSizeDic = new Array(); // used to translate ints to depthSize-values\n        this._depthSizeDic.push(256);\n        this._depthSizeDic.push(512);\n        this._depthSizeDic.push(2048);\n        this._depthSizeDic.push(1024);\n        this._version = Array(); // will contain 2 int (major-version, minor-version) for awd-version-check\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    AWDParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"awd\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    AWDParser.supportsData = function (data) {\n        return (ParserUtils_1.default.toString(data, 3) == 'AWD');\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._iResolveDependency = function (resourceDependency) {\n        // this will be called when Dependency has finished loading.\n        // the ressource dependecniy has a id that point to the awd_block waiting for it.\n        //console.log(\"AWDParser resolve dependencies\";\n        if (resourceDependency.assets.length == 1) {\n            var this_block = this._blocks[parseInt(resourceDependency.id)];\n            if (this_block.type == 82) {\n                var image_asset = resourceDependency.assets[0];\n                this_block.data = image_asset; // Store finished asset\n                // Finalize texture asset to dispatch texture event, which was\n                // previously suppressed while the dependency was loaded.\n                this._pFinalizeAsset(image_asset, this_block.name);\n                if (this._debug)\n                    console.log(\"Parsed Texture: Name = \" + this_block.name);\n            }\n            else if (this_block.type == 44) {\n                var audio_asset = resourceDependency.assets[0];\n                this_block.data = audio_asset; // Store finished asset\n                // Finalize texture asset to dispatch texture event, which was\n                // previously suppressed while the dependency was loaded.\n                //console.log(\"Parsing audio \" + this_block.name);\n                this._pFinalizeAsset(audio_asset, this_block.name);\n                if (this._debug)\n                    console.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n            }\n            else if (this_block.type == 83) {\n                this_block.loaded_dependencies[resourceDependency.sub_id] = resourceDependency.assets[0];\n                this_block.loaded_dependencies_cnt++;\n                if (this._debug)\n                    console.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n                if (this_block.loaded_dependencies_cnt == 6) {\n                    var cube_image_asset = new BitmapImageCube_1.default(this_block.loaded_dependencies[0].width);\n                    for (var i = 0; i < 6; i++)\n                        cube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n                    this_block.data = cube_image_asset; // Store finished asset\n                    this._pFinalizeAsset(cube_image_asset, this_block.name);\n                    if (this._debug)\n                        console.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n                }\n            }\n            if (this._debugTimers && !this._isParsing)\n                this.updateTimers(this_block.type);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        //not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n        // this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n    };\n    /**\n     * Resolve a dependency name\n     *\n     * @param resourceDependency The dependency to be resolved.\n     */\n    AWDParser.prototype._iResolveDependencyName = function (resourceDependency, asset) {\n        var oldName = asset.name;\n        if (asset) {\n            var block = this._blocks[parseInt(resourceDependency.id)];\n            // Reset name of texture to the one defined in the AWD file,\n            // as opposed to whatever the image parser came up with.\n            asset.resetAssetPath(block.name, null, true);\n        }\n        var newName = asset.name;\n        asset.name = oldName;\n        return newName;\n    };\n    /**\n     * @inheritDoc\n     */\n    AWDParser.prototype._pProceedParsing = function () {\n        if (!this._startedParsing) {\n            this._byteData = this._pGetByteData(); //getByteData();\n            this._startedParsing = true;\n        }\n        if (!this._parsed_header) {\n            //----------------------------------------------------------------------------\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n            //----------------------------------------------------------------------------\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;\n            //----------------------------------------------------------------------------\n            //----------------------------------------------------------------------------\n            // Parse header and decompress body if needed\n            this.parseHeader();\n            switch (this._compression) {\n                case AWDParser.DEFLATE:\n                case AWDParser.LZMA:\n                    this._pDieWithError('Compressed AWD formats not yet supported');\n                    break;\n                case AWDParser.UNCOMPRESSED:\n                    this._body = this._byteData;\n                    break;\n            }\n            this._parsed_header = true;\n        }\n        if (this._body) {\n            while (this._body.getBytesAvailable() > 0 && !this.parsingPaused)\n                this.parseNextBlock();\n            //----------------------------------------------------------------------------\n            // Return complete status\n            if (this._body.getBytesAvailable() == 0) {\n                this.dispose();\n                if (this._debugTimers)\n                    console.log(\"Parsing total: \" + (this._time_all | 0) + \"ms\", \" | graphics: \" + this._num_graphics + \", \" + (this._time_graphics | 0) + \"ms\", \" | graphics bytes: \" + this._num_graphics + \", \" + (this._time_graphics_bytes | 0) + \"ms\", \" | timelines: \" + this._num_timeline + \", \" + (this._time_timeline | 0) + \"ms\", \" | fonts: \" + this._num_fonts + \", \" + (this._time_fonts | 0) + \"ms\", \" | sounds: \" + this._num_sounds + \", \" + (this._time_sounds | 0) + \"ms\", \" | mats: \" + this._num_materials + \", \" + (this._time_materials | 0) + \"ms\", \" | textures: \" + this._num_textures + \", \" + (this._time_textures | 0) + \"ms\", \" | sprites: \" + this._num_sprites + \", \" + (this._time_sprites | 0) + \"ms\");\n                return ParserBase_1.default.PARSING_DONE;\n            }\n            else {\n                return ParserBase_1.default.MORE_TO_PARSE;\n            }\n        }\n        else {\n            switch (this._compression) {\n                case AWDParser.DEFLATE:\n                case AWDParser.LZMA:\n                    if (this._debug)\n                        console.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n                    break;\n            }\n            // Error - most likely _body not set because we do not support compression.\n            return ParserBase_1.default.PARSING_DONE;\n        }\n    };\n    AWDParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    AWDParser.prototype.dispose = function () {\n        for (var c in this._blocks) {\n            var b = this._blocks[c];\n            b.dispose();\n        }\n    };\n    AWDParser.prototype.parseNextBlock = function () {\n        var block;\n        var isParsed = false;\n        var ns;\n        var type;\n        var flags;\n        var len;\n        //*\n        if (this._debugTimers)\n            this.start_timeing = performance.now();\n        //*/\n        this._cur_block_id = this._body.readUnsignedInt();\n        ns = this._body.readUnsignedByte();\n        type = this._body.readUnsignedByte();\n        flags = this._body.readUnsignedByte();\n        len = this._body.readUnsignedInt();\n        var blockCompression = BitFlags.test(flags, BitFlags.FLAG4);\n        var blockCompressionLZMA = BitFlags.test(flags, BitFlags.FLAG5);\n        if (this._accuracyOnBlocks) {\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n        }\n        var blockEndAll = this._body.position + len;\n        if (len > this._body.getBytesAvailable()) {\n            this._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n            this._body.position += this._body.getBytesAvailable();\n            return;\n        }\n        //----------------------------------------------------------------------------\n        // Compressed AWD Formats not yet supported\n        if (blockCompression) {\n            this._pDieWithError('Compressed AWD formats not yet supported');\n            this._newBlockBytes = new ByteArray_1.default();\n            this._body.readBytes(this._newBlockBytes, 0, len);\n            this._newBlockBytes.position = 0;\n        }\n        else {\n            this._newBlockBytes = this._body;\n        }\n        //----------------------------------------------------------------------------\n        // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n        //----------------------------------------------------------------------------\n        //this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n        //----------------------------------------------------------------------------\n        block = new AWDBlock_1.default(this._cur_block_id, type);\n        block.len = len;\n        var blockEndBlock = this._newBlockBytes.position + len;\n        if (blockCompression) {\n            this._pDieWithError('Compressed AWD formats not yet supported');\n        }\n        if (this._debug)\n            console.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n        this._blocks[this._cur_block_id] = block;\n        if ((this._version[0] == 3) && (this._version[1] == 0)) {\n            // probably should contain some info about the type of animation\n            var factory = new AS2SceneGraphFactory_1.default(this._view);\n            switch (type) {\n                case 24:\n                    this.parseSpriteLibraryBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 25:\n                    this.parseBillBoardLibraryBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 4444:\n                    this.parseAudioBlock(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 133:\n                    this.parseMovieClip(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 134:\n                    this.parseTextField(this._cur_block_id, factory);\n                    isParsed = true;\n                    break;\n                case 135:\n                    this.parseTesselatedFont(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 136:\n                    this.parseTextFormat(this._cur_block_id);\n                    isParsed = true;\n                    break;\n            }\n        }\n        if ((this._version[0] > 2) || ((this._version[0] >= 2) && (this._version[1] >= 1))) {\n            switch (type) {\n                case 11:\n                    this.parsePrimitves(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 31:\n                    this.parseSkyboxInstance(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 41:\n                    this.parseLight(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 42:\n                    this.parseCamera(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                //  case 43:\n                //      parseTextureProjector(_cur_block_id);\n                //      isParsed = true;\n                //      break;\n                case 51:\n                    this.parseLightPicker(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 81:\n                    this.parseMaterial_v1(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 83:\n                    this.parseCubeTexture(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 91:\n                    this.parseSharedMethodBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 92:\n                    this.parseShadowMethodBlock(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 111:\n                    this.parseSpritePoseAnimation(this._cur_block_id, true);\n                    isParsed = true;\n                    break;\n                case 112:\n                    this.parseSpritePoseAnimation(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 113:\n                    this.parseVertexAnimationSet(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 122:\n                    this.parseAnimatorSet(this._cur_block_id);\n                    isParsed = true;\n                    break;\n                case 253:\n                    this.parseCommand(this._cur_block_id);\n                    isParsed = true;\n                    break;\n            }\n        }\n        if (isParsed == false) {\n            switch (type) {\n                case 1:\n                    this.parseGraphics(this._cur_block_id);\n                    break;\n                case 22:\n                    this.parseContainer(this._cur_block_id);\n                    break;\n                case 23:\n                    this.parseSpriteInstance(this._cur_block_id);\n                    break;\n                case 81:\n                    this.parseMaterial(this._cur_block_id);\n                    break;\n                case 82:\n                    this.parseTexture(this._cur_block_id);\n                    break;\n                case 101:\n                    this.parseSkeleton(this._cur_block_id);\n                    break;\n                case 102:\n                    this.parseSkeletonPose(this._cur_block_id);\n                    break;\n                case 103:\n                    this.parseSkeletonAnimation(this._cur_block_id);\n                    break;\n                case 121:\n                //this.parseUVAnimation(this._cur_block_id);\n                //break;\n                case 254:\n                    this.parseNameSpace(this._cur_block_id);\n                    break;\n                case 255:\n                    this.parseMetaData(this._cur_block_id);\n                    break;\n                default:\n                    if (this._debug)\n                        console.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n                    this._newBlockBytes.position += len;\n                    break;\n            }\n        }\n        if (this._debug) {\n            if (this._newBlockBytes.position != blockEndBlock)\n                console.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n            if (block.errorMessages) {\n                var len = block.errorMessages.length;\n                for (var msgCnt = 0; msgCnt < len; msgCnt++)\n                    console.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n            }\n            console.log(\"\\n\");\n        }\n        if (this._debugTimers && !this.parsingPaused)\n            this.updateTimers(type);\n        this._body.position = blockEndAll;\n        this._newBlockBytes = null;\n    };\n    AWDParser.prototype.updateTimers = function (type) {\n        var end_timing = performance.now();\n        var time_delta = end_timing - this.start_timeing;\n        this._time_all += time_delta;\n        if (type == 1) {\n            this._time_graphics += time_delta;\n            this._num_graphics++;\n        }\n        else if (type == 133) {\n            this._time_timeline += time_delta;\n            this._num_timeline++;\n        }\n        else if (type == 135) {\n            this._time_fonts += time_delta;\n            this._num_fonts++;\n        }\n        else if (type == 134) {\n            this._time_textfields += time_delta;\n            this._num_textfields++;\n        }\n        else if (type == 44) {\n            this._time_sounds += time_delta;\n            this._num_sounds++;\n        }\n        else if (type == 82) {\n            this._time_textures += time_delta;\n            this._num_textures++;\n        }\n        else if (type == 81) {\n            this._time_materials += time_delta;\n            this._num_materials++;\n        }\n        else if (type == 24) {\n            this._time_sprites += time_delta;\n            this._num_sprites++;\n        }\n    };\n    //--Parser Blocks---------------------------------------------------------------------------\n    AWDParser.prototype.parseTesselatedFont = function (blockID) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var new_font = AssetLibrary_1.default.getAsset(this._blocks[blockID].name);\n        var newfont = false;\n        if (new_font == undefined) {\n            new_font = new Font_1.default();\n            newfont = true;\n        }\n        var font_style_cnt = this._newBlockBytes.readUnsignedInt();\n        var font_style_char_cnt;\n        var font_style_name;\n        var new_font_style;\n        var font_style_char;\n        var attr_count = 0;\n        var sm_len;\n        var sm_end;\n        var str_ftype, str_type, str_len, str_end;\n        for (var i = 0; i < font_style_cnt; ++i) {\n            font_style_name = this.parseVarStr();\n            // dirty hack for icycle\n            // we use bold chars for non-latin chars, but we use regular for � sign,\n            // so the dirty hack is to merge the regular and the bold style\n            if ((this._blocks[blockID].name == \"Tahoma\") && (font_style_name == \"RegularStyle\")) {\n                font_style_name = \"BoldStyle\";\n            }\n            new_font_style = new_font.get_font_table(font_style_name);\n            new_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n            new_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n            new_font_style.ascent = this._newBlockBytes.readFloat();\n            new_font_style.descent = this._newBlockBytes.readFloat();\n            //console.log(new_font_style.get_whitespace_width());\n            font_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n            for (var j = 0; j < font_style_char_cnt; ++j) {\n                // todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n                font_style_char = this._newBlockBytes.readUnsignedInt();\n                var char_width = this._newBlockBytes.readFloat();\n                sm_len = this._newBlockBytes.readUnsignedInt();\n                sm_end = this._newBlockBytes.position + sm_len;\n                // Loop through data streams\n                while (this._newBlockBytes.position < sm_end) {\n                    // Type, field type, length\n                    str_type = this._newBlockBytes.readUnsignedByte();\n                    str_ftype = this._newBlockBytes.readUnsignedByte();\n                    str_len = this._newBlockBytes.readUnsignedInt();\n                    str_end = this._newBlockBytes.position + str_len;\n                    if (str_type == 2) {\n                        var indices = new Array();\n                        for (var idx = 0; this._newBlockBytes.position < str_end; idx++)\n                            indices[idx] = this._newBlockBytes.readUnsignedShort();\n                    }\n                    else if (str_type == 11) {\n                        attr_count = 20;\n                        var curveData = new ByteArray_1.default(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else if (str_type == 12) {\n                        attr_count = 12;\n                        var curveData = new ByteArray_1.default(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else if (str_type == 10) {\n                        attr_count = 28;\n                        var curveData = new ByteArray_1.default(str_len);\n                        this._newBlockBytes.readBytes(curveData, 0, str_len);\n                    }\n                    else {\n                        this._newBlockBytes.position = str_end;\n                    }\n                }\n                if (curveData) {\n                    var vertexBuffer = new AttributesBuffer_1.default(attr_count, str_len / attr_count);\n                    vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\n                    var curve_elements = new TriangleElements_1.default(vertexBuffer);\n                    curve_elements.setPositions(new Float2Attributes_1.default(vertexBuffer));\n                    if (attr_count == 20)\n                        curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.default(vertexBuffer));\n                    else if (attr_count == 12)\n                        curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.default(vertexBuffer, false));\n                    //add UVs if they exist in the data\n                    if (attr_count == 28)\n                        curve_elements.setUVs(new Float2Attributes_1.default(vertexBuffer));\n                    new_font_style.setChar(font_style_char.toString(), curve_elements, char_width);\n                }\n            }\n        }\n        this.parseProperties(null);\n        this.parseUserAttributes();\n        if (newfont) {\n            this._pFinalizeAsset(new_font, name);\n        }\n        this._blocks[blockID].data = new_font;\n        if (this._debug)\n            console.log(\"Parsed a font: Name = '\" + name);\n    };\n    AWDParser.prototype.parseTextFormat = function (blockID) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var font = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var font_style_name = this.parseVarStr();\n        var newTextFormat = new TextFormat_1.default();\n        newTextFormat.font_name = font.name;\n        var font_table = font.get_font_table(font_style_name);\n        if (font_table != null) {\n            newTextFormat.font_style = font_style_name;\n            newTextFormat.font_table = font_table;\n        }\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mat.bothSides = true;\n        mat.curves = true;\n        var num_uv_values = this._newBlockBytes.readUnsignedByte();\n        var uv_values = [];\n        for (var uvcnt = 0; uvcnt < num_uv_values; uvcnt++)\n            uv_values[uvcnt] = this._newBlockBytes.readFloat();\n        newTextFormat.uv_values = uv_values;\n        var format_props = this.parseProperties(AWDParser.textFormatProperties);\n        newTextFormat.size = format_props.get(1, 12);\n        newTextFormat.letterSpacing = format_props.get(2, 0);\n        //newTextFormat.rotated = format_props.get(3,false);\n        newTextFormat.kerning = format_props.get(4, true);\n        //newTextFormat.baseline_shift = format_props.get(5,1);\n        var tf_align_int = format_props.get(6, 0);\n        if (tf_align_int == 1) {\n            newTextFormat.align = \"right\";\n        }\n        else if (tf_align_int == 2) {\n            newTextFormat.align = \"center\";\n        }\n        newTextFormat.indent = format_props.get(7, 0);\n        newTextFormat.leftMargin = format_props.get(8, 0);\n        newTextFormat.rightMargin = format_props.get(9, 0);\n        newTextFormat.leading = format_props.get(10, 0);\n        newTextFormat.material = mat;\n        this.parseUserAttributes(); // textformat has no extra-properties\n        //newTextFormat.extra =\n        this._pFinalizeAsset(newTextFormat, name);\n        this._blocks[blockID].data = newTextFormat;\n        if (this._debug)\n            console.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \" + font.name);\n    };\n    AWDParser.prototype.parseTextField = function (blockID, factory) {\n        var name = this.parseVarStr();\n        this._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n        var text_field_type = this._newBlockBytes.readUnsignedByte();\n        newTextField.type = AWDParser.textFieldTypes[text_field_type];\n        if (text_field_type == 3)\n            newTextField.displayAsPassword = true;\n        //\n        newTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n        newTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n        var num_paragraphs = this._newBlockBytes.readUnsignedInt();\n        var complete_text = \"\";\n        //console.log(\"num_paragraphs  '\" + num_paragraphs);\n        for (var paracnt = 0; paracnt < num_paragraphs; paracnt++) {\n            var num_textruns = this._newBlockBytes.readUnsignedInt();\n            //console.log(\"num_textruns  '\" + num_textruns);\n            for (var textrun_cnt = 0; textrun_cnt < num_textruns; textrun_cnt++) {\n                var text_format = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n                var txt_length = this._newBlockBytes.readUnsignedInt();\n                //console.log(\"txt_length  '\" + txt_length);\n                if (txt_length > 0) {\n                    var this_txt = this._newBlockBytes.readUTFBytes(txt_length);\n                    //newTextField.appendText(this_txt, text_format);\n                    complete_text += this_txt;\n                }\n            }\n        }\n        newTextField.textFormat = text_format;\n        newTextField.text = complete_text;\n        //newTextField.construct_graphics();\n        // todo: optional matrix etc can be put in properties.\n        var props = this.parseProperties(AWDParser.textFieldProperties);\n        newTextField.selectable = props.get(1, false);\n        newTextField.border = props.get(3, false);\n        //newTextField.renderHTML =  props.get(4, false);\n        //newTextField.scrollable =  props.get(5, false);\n        //newTextField.text_flow =  props.get(7, 0);\n        //newTextField.orientationMode =  props.get(8, 0);\n        //newTextField.line_mode =  props.get(9, 0);\n        newTextField.extra = this.parseUserAttributes();\n        //console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n        this._pFinalizeAsset(newTextField, name);\n        this._blocks[blockID].data = newTextField;\n        if (this._debug)\n            console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n    };\n    // Block ID = 25\n    AWDParser.prototype.parseBillBoardLibraryBlock = function (blockID) {\n        var name = this.parseVarStr();\n        var mat = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mat.bothSides = true;\n        var billboard = new Billboard_1.default(mat);\n        // todo: optional matrix etc can be put in properties.\n        this.parseProperties(null);\n        billboard.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(billboard, name);\n        this._blocks[blockID].data = billboard;\n        if (this._debug)\n            console.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n    };\n    // Block ID = 24\n    AWDParser.prototype.parseSpriteLibraryBlock = function (blockID) {\n        var name = this.parseVarStr();\n        var data_id = this._newBlockBytes.readUnsignedInt();\n        var graphics = this._blocks[data_id].data;\n        this._blocks[blockID].geoID = data_id;\n        var num_materials = this._newBlockBytes.readUnsignedShort();\n        var materials = new Array();\n        var materialNames = new Array();\n        var mat;\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.default.getDefaultMaterial());\n            //mat.preserveAlpha = true;\n            mat.alphaBlending = true;\n            mat.useColorTransform = true;\n            materials[materials_parsed] = mat;\n            materialNames[materials_parsed] = mat.name;\n        }\n        var start_timeing = performance.now();\n        var sprite = new Sprite_1.default();\n        graphics.copyTo(sprite.graphics);\n        var end_timing = performance.now();\n        var time_delta = end_timing - start_timeing;\n        this._time_graphics_bytes += time_delta;\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\n            sprite.material = materials[0];\n        }\n        else if (materials.length > 1) {\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n            // than materials, repeat the last material for all remaining sub-sprites.\n            for (var i = 0; i < sprite.graphics.count; i++)\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n        }\n        var count = this._newBlockBytes.readUnsignedShort();\n        //if(count != sprite.graphics.count)\n        //\tthrow new Error(\"num elements does not match num subsprites\";\n        for (var i = 0; i < count; i++) {\n            var type = this._newBlockBytes.readUnsignedByte();\n            var sampler = new Sampler2D_1.default();\n            var graphic = sprite.graphics.getGraphicAt(i);\n            if (graphic) {\n                graphic.style = new Style_1.default();\n                graphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n            }\n            if (type == 3) {\n                var tx = this._newBlockBytes.readFloat();\n                var ty = this._newBlockBytes.readFloat();\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.default(0, 0, 0, 0, tx, ty);\n                }\n            }\n            else if (type == 4) {\n                var matrix = this.parseMatrix32RawData();\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.default(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n                }\n            }\n            else if (type == 5) {\n                var newMatrix = new Matrix_1.default(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n                if (graphic) {\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = newMatrix;\n                }\n            }\n            else if (type == 6) {\n                var x = this._newBlockBytes.readFloat();\n                var y = this._newBlockBytes.readFloat();\n                var width = this._newBlockBytes.readFloat();\n                var height = this._newBlockBytes.readFloat();\n                var matrix = this.parseMatrix32RawData();\n                if (graphic) {\n                    sampler.imageRect = new Rectangle_1.default(x, y, width, height);\n                    graphic.material.imageRect = true;\n                    graphic.material.animateUVs = true;\n                    graphic.style.uvMatrix = new Matrix_1.default(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n                }\n            }\n            if (graphic) {\n                //check if curves are needed\n                if (graphic.elements.getCustomAtributes(\"curves\"))\n                    graphic.material.curves = true;\n            }\n            // todo: finish optional properties (spreadmode + focalpoint)\n            this._newBlockBytes.readUnsignedInt();\n        }\n        this.parseProperties(null);\n        sprite.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(sprite, name);\n        this._blocks[blockID].data = sprite;\n        if (this._debug)\n            console.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n    };\n    AWDParser.prototype.parseAudioBlock = function (blockID, factory) {\n        //var asset:Audio;todo create asset for audio\n        this._blocks[blockID].name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        var data_len;\n        // External\n        if (type == 0) {\n            data_len = this._newBlockBytes.readUnsignedInt();\n            var url;\n            url = this._newBlockBytes.readUTFBytes(data_len);\n            // todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.default(url), false, null, true);\n        }\n        else {\n            // todo: exporter does not export embed sounds yet\n            data_len = this._newBlockBytes.readUnsignedInt();\n            var data = new ByteArray_1.default(data_len);\n            this._newBlockBytes.readBytes(data, 0, data_len);\n            // todo parse sound from bytes\n            // this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        //this._blocks[blockID].data = asset;todo\n        if (this._debug)\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n    };\n    //Block ID = 4\n    AWDParser.prototype.parseMovieClip = function (blockID, factory) {\n        var i;\n        var j;\n        var cmd_asset;\n        var new_timeline = new Timeline_1.default();\n        var new_mc = factory.createMovieClip(new_timeline);\n        var name = this.parseVarStr();\n        // register list of potential childs\n        // a potential child can be reused on a timeline (added / removed / added)\n        // However, for each potential child, we need to register the max-number of instances that a frame contains\n        // we parse 2 lists of potential-childs:\n        // -\tthe first list contains potential-childs that are only ever instanced once per frame.\n        // -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n        // on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n        // hence we need to be careful to register all objects in correct order.\n        var num_potential_childs = this._newBlockBytes.readUnsignedShort();\n        for (i = 0; i < num_potential_childs; i++) {\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            if (cmd_asset != null) {\n                new_timeline.registerPotentialChild(cmd_asset);\n            }\n            else {\n                //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n                //new_mc.registerPotentialChild(cmd_asset);\n                console.log(\"ERROR when collecting objects for timeline\");\n            }\n        }\n        var num_all_display_instances = num_potential_childs;\n        var num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n        for (i = 0; i < num_potential_childs_multi_instanced; i++) {\n            cmd_asset = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            var num_instances = this._newBlockBytes.readUnsignedShort();\n            num_all_display_instances += num_instances;\n            if (cmd_asset != null) {\n                for (j = 0; j < num_instances; j++)\n                    new_timeline.registerPotentialChild(cmd_asset);\n            }\n            else {\n                for (j = 0; j < num_instances; j++) {\n                    //todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n                    //new_mc.registerPotentialChild(cmd_asset);\n                    console.log(\"ERROR when collecting objects for timeline\");\n                }\n            }\n        }\n        if (this._debug)\n            console.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n        // register list of potential sounds - for now we always have 0 sounds\n        var num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n        var str_cnt = this._newBlockBytes.readUnsignedByte();\n        var str_len = 0;\n        var str_data_type = 0;\n        var str_type = 0;\n        var str_counter = 0;\n        for (i = 0; i < str_cnt; i++) {\n            // the first 6 lists are not optional and always in same order\n            // hence we can get type by incremental counter instead of stored uint8\n            if (str_counter < 6)\n                str_type = str_counter;\n            else\n                str_type = this._newBlockBytes.readUnsignedByte();\n            // get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n            str_data_type = this._newBlockBytes.readUnsignedByte();\n            // size of this stream in byte\n            str_len = this._newBlockBytes.readUnsignedInt();\n            if (str_len > 0) {\n                var keyframes_start_indices_data = new ByteArray_1.default(str_len);\n                this._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n                var new_buffer;\n                //console.log(\"str_data_type = \"+str_type);\n                switch (str_data_type) {\n                    case 1:\n                        new_buffer = new Uint8Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                    case 2:\n                        new_buffer = new Uint16Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                    case 4:\n                        new_buffer = new Uint32Array(keyframes_start_indices_data.arraybytes);\n                        break;\n                }\n                switch (str_type) {\n                    case 0:\n                        new_timeline.keyframe_durations = new_buffer;\n                        new_timeline.numKeyFrames = str_len / str_data_type;\n                        break;\n                    case 1:\n                        new_timeline.frame_command_indices = new_buffer;\n                        break;\n                    case 2:\n                        new_timeline.frame_recipe = new_buffer;\n                        break;\n                    case 3:\n                        new_timeline.command_length_stream = new_buffer;\n                        break;\n                    case 4:\n                        new_timeline.command_index_stream = new_buffer;\n                        break;\n                    case 5:\n                        new_timeline.add_child_stream = new_buffer;\n                        break;\n                    case 6:\n                        new_timeline.remove_child_stream = new_buffer;\n                        break;\n                    case 7:\n                        new_timeline.update_child_stream = new_buffer;\n                        break;\n                    case 8:\n                        new_timeline.update_child_props_indices_stream = new_buffer;\n                        break;\n                    case 9:\n                        new_timeline.update_child_props_length_stream = new_buffer;\n                        break;\n                    case 10:\n                        new_timeline.property_type_stream = new_buffer;\n                        break;\n                    case 11:\n                        new_timeline.property_index_stream = new_buffer;\n                        break;\n                    case 12:\n                        new_timeline.properties_stream_int = new_buffer;\n                        break;\n                }\n            }\n            str_counter++;\n        }\n        var lc = 0;\n        var float_array_data;\n        str_cnt = this._newBlockBytes.readUnsignedByte();\n        for (i = 0; i < str_cnt; i++) {\n            str_type = this._newBlockBytes.readUnsignedByte();\n            str_len = this._newBlockBytes.readUnsignedInt();\n            switch (str_type) {\n                case 0:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_scale_rot = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 1:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_pos = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 2:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_mtx_all = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 3:\n                    float_array_data = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(float_array_data, 0, str_len);\n                    new_timeline.properties_stream_f32_ct = new Float32Array(float_array_data.arraybytes);\n                    break;\n                case 4:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    //console.log(\"start reading labels \"+str_len);\n                    for (lc = 0; lc < str_len; lc++) {\n                        new_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n                    }\n                    break;\n                case 5:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    var string_props_array = [];\n                    for (lc = 0; lc < str_len; lc++) {\n                        string_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n                    }\n                    new_timeline.properties_stream_strings = string_props_array;\n                    break;\n                case 6:\n                    str_len = this._newBlockBytes.readUnsignedShort();\n                    for (lc = 0; lc < str_len; lc++) {\n                        var frame_index = this._newBlockBytes.readUnsignedShort();\n                        var one_str_len = this._newBlockBytes.readUnsignedInt();\n                        //this._newBlockBytes.readUTFBytes(one_str_len);\n                        new_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n                    }\n                    break;\n            }\n        }\n        new_timeline.init();\n        var sceneID = 0;\n        var fps = 25;\n        this.parseProperties(AWDParser.movieClipProperties);\n        this.parseUserAttributes();\n        this._pFinalizeAsset(new_mc, name);\n        this._blocks[blockID].data = new_mc;\n        if (this._debug)\n            console.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\n    };\n    //Block ID = 1\n    AWDParser.prototype.parseGraphics = function (blockID) {\n        var graphics = new Graphics_1.default();\n        // Read name and sub count\n        var name = this.parseVarStr();\n        var numElements = this._newBlockBytes.readUnsignedShort();\n        // Read optional properties\n        var props = this.parseProperties(AWDParser.graphicsProperties);\n        var geoScaleU = props.get(1, 1);\n        var geoScaleV = props.get(2, 1);\n        //console.log(\"numElements \"+numElements);\n        // Loop through sub sprites\n        for (var elements_parsed = 0; elements_parsed < numElements; elements_parsed++) {\n            var is_curve_elements = false;\n            var attr_count = 0;\n            var sm_len, sm_end;\n            var w_indices;\n            var weights;\n            sm_len = this._newBlockBytes.readUnsignedInt();\n            sm_end = this._newBlockBytes.position + sm_len;\n            var elementsProps = this.parseProperties(AWDParser.elementsProperties);\n            // Loop through data streams\n            while (this._newBlockBytes.position < sm_end) {\n                var idx = 0;\n                var str_ftype, str_type, str_len, str_end;\n                // Type, field type, length\n                str_type = this._newBlockBytes.readUnsignedByte();\n                str_ftype = this._newBlockBytes.readUnsignedByte();\n                str_len = this._newBlockBytes.readUnsignedInt();\n                str_end = this._newBlockBytes.position + str_len;\n                var x, y, z;\n                if (str_type == 1) {\n                    var verts = new Array();\n                    while (this._newBlockBytes.position < str_end) {\n                        x = this.readNumber(this._accuracyGeo);\n                        y = this.readNumber(this._accuracyGeo);\n                        z = this.readNumber(this._accuracyGeo);\n                        verts[idx++] = x;\n                        verts[idx++] = y;\n                        verts[idx++] = z;\n                    }\n                }\n                else if (str_type == 2) {\n                    var indices = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        indices[idx++] = this._newBlockBytes.readUnsignedShort();\n                }\n                else if (str_type == 3) {\n                    var uvs = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        uvs[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 4) {\n                    var normals = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        normals[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 6) {\n                    w_indices = Array();\n                    while (this._newBlockBytes.position < str_end)\n                        w_indices[idx++] = this._newBlockBytes.readUnsignedShort() * 3;\n                }\n                else if (str_type == 7) {\n                    weights = new Array();\n                    while (this._newBlockBytes.position < str_end)\n                        weights[idx++] = this.readNumber(this._accuracyGeo);\n                }\n                else if (str_type == 8) {\n                    this._newBlockBytes.position = str_end;\n                }\n                else if (str_type == 9) {\n                    this._newBlockBytes.position = str_end;\n                }\n                else if (str_type == 10) {\n                    is_curve_elements = true;\n                    attr_count = 28;\n                    var curveData = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 11) {\n                    is_curve_elements = true;\n                    attr_count = 20;\n                    var curveData = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else if (str_type == 12) {\n                    is_curve_elements = true;\n                    attr_count = 12;\n                    var curveData = new ByteArray_1.default(str_len);\n                    this._newBlockBytes.readBytes(curveData, 0, str_len);\n                }\n                else {\n                    this._newBlockBytes.position = str_end;\n                }\n            }\n            this.parseUserAttributes(); // Ignore sub-sprite attributes for now\n            if (is_curve_elements) {\n                var vertexBuffer = new AttributesBuffer_1.default(attr_count, str_len / attr_count);\n                vertexBuffer.bufferView = new Uint8Array(curveData.arraybytes);\n                var curve_elements = new TriangleElements_1.default(vertexBuffer);\n                curve_elements.setPositions(new Float2Attributes_1.default(vertexBuffer));\n                if (attr_count == 20) {\n                    curve_elements.setCustomAttributes(\"curves\", new Float3Attributes_1.default(vertexBuffer));\n                }\n                else if (attr_count == 12) {\n                    curve_elements.setCustomAttributes(\"curves\", new Byte4Attributes_1.default(vertexBuffer, false));\n                }\n                if (attr_count == 28)\n                    curve_elements.setUVs(new Float2Attributes_1.default(vertexBuffer));\n                graphics.addGraphic(curve_elements);\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements with curves\");\n            }\n            else {\n                var triangle_elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n                if (weights)\n                    triangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n                if (normals)\n                    triangle_elements.autoDeriveNormals = false;\n                triangle_elements.autoDeriveTangents = true;\n                triangle_elements.setIndices(indices);\n                triangle_elements.setPositions(verts);\n                triangle_elements.setNormals(normals);\n                triangle_elements.setUVs(uvs);\n                triangle_elements.setJointWeights(weights);\n                triangle_elements.setJointIndices(w_indices);\n                var scaleU = elementsProps.get(1, 1);\n                var scaleV = elementsProps.get(2, 1);\n                var setSubUVs = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n                if ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n                    setSubUVs = true;\n                    scaleU = geoScaleU / scaleU;\n                    scaleV = geoScaleV / scaleV;\n                }\n                if (setSubUVs)\n                    triangle_elements.scaleUV(scaleU, scaleV);\n                graphics.addGraphic(triangle_elements);\n                if (this._debug)\n                    console.log(\"Parsed a TriangleElements\");\n            }\n        }\n        if ((geoScaleU != 1) || (geoScaleV != 1))\n            graphics.scaleUV(geoScaleU, geoScaleV);\n        this.parseUserAttributes();\n        this._pFinalizeAsset(graphics, name);\n        this._blocks[blockID].data = graphics;\n        if (this._debug)\n            console.log(\"Parsed Graphics: Name = \" + name);\n    };\n    //Block ID = 11\n    AWDParser.prototype.parsePrimitves = function (blockID) {\n        var name;\n        var prefab;\n        var primType;\n        var elements_parsed;\n        var props;\n        var bsm;\n        // Read name and sub count\n        name = this.parseVarStr();\n        primType = this._newBlockBytes.readUnsignedByte();\n        props = this.parseProperties(AWDParser.primitiveProperties);\n        // to do, not all properties are set on all primitives\n        switch (primType) {\n            case 1:\n                prefab = new PrimitivePlanePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n                break;\n            case 2:\n                prefab = new PrimitiveCubePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n                break;\n            case 3:\n                prefab = new PrimitiveSpherePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n                break;\n            case 4:\n                prefab = new PrimitiveCylinderPrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n                if (!props.get(701, true))\n                    prefab.topClosed = false;\n                if (!props.get(702, true))\n                    prefab.bottomClosed = false;\n                if (!props.get(703, true))\n                    prefab.yUp = false;\n                break;\n            case 5:\n                prefab = new PrimitiveConePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n                break;\n            case 6:\n                prefab = new PrimitiveCapsulePrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n                break;\n            case 7:\n                prefab = new PrimitiveTorusPrefab_1.default(null, ElementsType_1.default.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n                break;\n            default:\n                prefab = new PrefabBase_1.default();\n                console.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n                break;\n        }\n        if ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n        }\n        this.parseUserAttributes();\n        prefab.name = name;\n        this._pFinalizeAsset(prefab, name);\n        this._blocks[blockID].data = prefab;\n        if (this._debug) {\n            if ((primType < 0) || (primType > 7))\n                primType = 0;\n            console.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n        }\n    };\n    // Block ID = 22\n    AWDParser.prototype.parseContainer = function (blockID) {\n        var name;\n        var mtx;\n        var ctr;\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        mtx = this.parseMatrix3D();\n        name = this.parseVarStr();\n        var parentName = \"Root (TopLevel)\";\n        ctr = new DisplayObjectContainer_1.default();\n        ctr.transform.matrix3D = mtx;\n        if (parent) {\n            parent.addChild(ctr);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(ctr);\n        }\n        // in AWD version 2.1 we read the Container properties\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            var props = this.parseProperties(AWDParser.containerProperties);\n            ctr.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n        }\n        else {\n            this.parseProperties(null);\n        }\n        // the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n        ctr.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(ctr, name);\n        this._blocks[blockID].data = ctr;\n        if (this._debug)\n            console.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n    };\n    // Block ID = 23\n    AWDParser.prototype.parseSpriteInstance = function (blockID) {\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var data_id = this._newBlockBytes.readUnsignedInt();\n        var asset = this._blocks[data_id].data;\n        var graphics;\n        var prefab;\n        var isPrefab = false;\n        if (asset.isAsset(Graphics_1.default)) {\n            graphics = asset;\n        }\n        else {\n            isPrefab = true;\n            prefab = asset;\n        }\n        this._blocks[blockID].geoID = data_id;\n        var num_materials = this._newBlockBytes.readUnsignedShort();\n        var materials = new Array();\n        var materialNames = new Array();\n        var mat;\n        for (var materials_parsed = 0; materials_parsed < num_materials; materials_parsed++) {\n            mat = (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.default.getDefaultMaterial());\n            materials[materials_parsed] = mat;\n            materialNames[materials_parsed] = mat.name;\n        }\n        var sprite;\n        if (isPrefab) {\n            sprite = prefab.getNewObject();\n        }\n        else {\n            sprite = new Sprite_1.default();\n            graphics.copyTo(sprite.graphics);\n        }\n        sprite.transform.matrix3D = mtx;\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(sprite);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(sprite);\n        }\n        if (materials.length >= 1 && sprite.graphics.count == 1) {\n            sprite.material = materials[0];\n        }\n        else if (materials.length > 1) {\n            // Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n            // than materials, repeat the last material for all remaining sub-sprites.\n            for (var i = 0; i < sprite.graphics.count; i++)\n                sprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n        }\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            var props = this.parseProperties(AWDParser.spriteInstanceProperties);\n            sprite.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n            sprite.castsShadows = props.get(5, true);\n        }\n        else {\n            this.parseProperties(null);\n        }\n        sprite.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(sprite, name);\n        this._blocks[blockID].data = sprite;\n        if (this._debug) {\n            if (isPrefab)\n                console.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n            else\n                console.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n        }\n    };\n    //Block ID 31\n    AWDParser.prototype.parseSkyboxInstance = function (blockID) {\n        var name = this.parseVarStr();\n        var asset = new Skybox_1.default();\n        var tex = new SingleCubeTexture_1.default(this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager_1.default.getDefaultImageCube());\n        asset.texture = tex;\n        this.parseProperties(null);\n        asset.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(asset, name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n    };\n    //Block ID = 41\n    AWDParser.prototype.parseLight = function (blockID) {\n        var light;\n        var newShadowMapper;\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var lightType = this._newBlockBytes.readUnsignedByte();\n        var props = this.parseProperties(AWDParser.lightProperties);\n        var shadowMapperType = props.get(9, 0);\n        var lightTypes = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n        var shadowMapperTypes = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n        if (lightType == 1) {\n            light = new PointLight_1.default();\n            light.radius = props.get(1, 90000);\n            light.fallOff = props.get(2, 100000);\n            if (shadowMapperType > 0) {\n                if (shadowMapperType == 4) {\n                    newShadowMapper = new CubeMapShadowMapper_1.default();\n                }\n            }\n            light.transform.matrix3D = mtx;\n        }\n        if (lightType == 2) {\n            light = new DirectionalLight_1.default(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n            if (shadowMapperType > 0) {\n                if (shadowMapperType == 1) {\n                    newShadowMapper = new DirectionalShadowMapper_1.default();\n                }\n            }\n        }\n        light.color = props.get(3, 0xffffff);\n        light.specular = props.get(4, 1.0);\n        light.diffuse = props.get(5, 1.0);\n        light.ambientColor = props.get(7, 0xffffff);\n        light.ambient = props.get(8, 0.0);\n        // if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n        if (newShadowMapper) {\n            if (newShadowMapper instanceof CubeMapShadowMapper_1.default) {\n                if (props.get(10, 1) != 1)\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n            }\n            else {\n                if (props.get(10, 2) != 2)\n                    newShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n            }\n            light.shadowMapper = newShadowMapper;\n            light.castsShadows = true;\n        }\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(light);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(light);\n        }\n        this.parseUserAttributes();\n        this._pFinalizeAsset(light, name);\n        this._blocks[blockID].data = light;\n        if (this._debug)\n            console.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n    };\n    //Block ID = 43\n    AWDParser.prototype.parseCamera = function (blockID) {\n        var parent = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var projection;\n        this._newBlockBytes.readUnsignedByte(); //set as active camera\n        this._newBlockBytes.readShort(); //lengthof lenses - not used yet\n        var projectiontype = this._newBlockBytes.readShort();\n        var props = this.parseProperties(AWDParser.cameraProperties);\n        switch (projectiontype) {\n            case 5001:\n                projection = new PerspectiveProjection_1.default(props.get(101, 60));\n                break;\n            case 5002:\n                projection = new OrthographicProjection_1.default(props.get(101, 500));\n                break;\n            case 5003:\n                projection = new OrthographicOffCenterProjection_1.default(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n                break;\n            default:\n                console.log(\"unsupportedLenstype\");\n                return;\n        }\n        var camera = new Camera_1.default(projection);\n        camera.transform.matrix3D = mtx;\n        var parentName = \"Root (TopLevel)\";\n        if (parent) {\n            parent.addChild(camera);\n            parentName = parent.name;\n        }\n        else {\n            //add to the content property\n            this._pContent.addChild(camera);\n        }\n        camera.name = name;\n        props = this.parseProperties(AWDParser.cameraPivotProperties);\n        camera.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n        camera.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(camera, name);\n        this._blocks[blockID].data = camera;\n        if (this._debug)\n            console.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n    };\n    //Block ID = 51\n    AWDParser.prototype.parseLightPicker = function (blockID) {\n        var name = this.parseVarStr();\n        var numLights = this._newBlockBytes.readUnsignedShort();\n        var lightsArray = new Array();\n        var lightsArrayNames = new Array();\n        for (var k = 0; k < numLights; k++) {\n            var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            lightsArray.push(light);\n            lightsArrayNames.push(light.name);\n        }\n        if (lightsArray.length == 0) {\n            this._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n            this.parseUserAttributes();\n            return; //return without any more parsing for this block\n        }\n        var lightPick = new StaticLightPicker_1.default(lightsArray);\n        lightPick.name = name;\n        this.parseUserAttributes();\n        this._pFinalizeAsset(lightPick, name);\n        this._blocks[blockID].data = lightPick;\n        if (this._debug)\n            console.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n    };\n    //Block ID = 81\n    AWDParser.prototype.parseMaterial = function (blockID) {\n        // TODO: not used\n        ////blockLength = block.len;\n        var name;\n        var type;\n        var props;\n        var mat;\n        var finalize;\n        var num_methods;\n        var methods_parsed;\n        var returnedArray;\n        name = this.parseVarStr();\n        type = this._newBlockBytes.readUnsignedByte();\n        num_methods = this._newBlockBytes.readUnsignedByte();\n        // Read material numerical properties\n        props = this.parseProperties(AWDParser.materialProperties);\n        methods_parsed = 0;\n        while (methods_parsed < num_methods) {\n            var method_type;\n            method_type = this._newBlockBytes.readUnsignedShort();\n            this.parseProperties(null);\n            this.parseUserAttributes();\n            methods_parsed += 1;\n        }\n        var debugString = \"\";\n        if (type === 1) {\n            debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n            var color = props.get(1, 0xffffff);\n            if (this.materialMode < 2) {\n                mat = new MethodMaterial_1.default(color, props.get(10, 1.0));\n            }\n            else {\n                mat = new MethodMaterial_1.default(color);\n                mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n            }\n        }\n        else if (type === 2) {\n            var texture = new Single2DTexture_1.default(this._blocks[props.get(2, 0)].data);\n            mat = new MethodMaterial_1.default();\n            mat.ambientMethod.texture = texture;\n            if (this.materialMode < 2) {\n                mat.alphaBlending = props.get(11, false);\n                mat.alpha = props.get(10, 1.0);\n                debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n            }\n            else {\n                mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n            }\n        }\n        mat.extra = this.parseUserAttributes();\n        mat.alphaThreshold = props.get(12, 0.0);\n        mat.style.sampler = new Sampler2D_1.default(props.get(13, false));\n        this._pFinalizeAsset(mat, name);\n        this._blocks[blockID].data = mat;\n        if (this._debug)\n            console.log(debugString);\n    };\n    // Block ID = 81 AWD2.1\n    AWDParser.prototype.parseMaterial_v1 = function (blockID) {\n        var mat;\n        var diffuseImage;\n        var normalImage;\n        var specImage;\n        var name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        var num_methods = this._newBlockBytes.readUnsignedByte();\n        var props = this.parseProperties(AWDParser.material_v1Properties);\n        var spezialType = props.get(4, 0);\n        var debugString = \"Parsed Material \";\n        if (spezialType >= 2) {\n            this._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n            return;\n        }\n        if (type <= 2) {\n            if (this.materialMode == 1)\n                spezialType = 0;\n            else if (this.materialMode == 2)\n                spezialType = 1;\n            if (spezialType < 2) {\n                if (type == 1) {\n                    var color = props.get(1, 0xcccccc); //TODO temporarily swapped so that diffuse color goes to ambient\n                    if (spezialType == 1) {\n                        mat = new MethodMaterial_1.default(color);\n                        mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                        debugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n                    }\n                    else {\n                        mat = new MethodMaterial_1.default(color, props.get(10, 1.0));\n                        mat.alphaBlending = props.get(11, false);\n                        debugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n                    }\n                }\n                else if (type == 2) {\n                    var texture = new Single2DTexture_1.default(this._blocks[props.get(2, 0)].data);\n                    mat = new MethodMaterial_1.default();\n                    mat.ambientMethod.texture = texture;\n                    if (spezialType == 1) {\n                        mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                        debugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n                    }\n                    else {\n                        mat.alpha = props.get(10, 1.0);\n                        mat.alphaBlending = props.get(11, false);\n                        debugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture ? \" | Texture-Name = \" + texture.name : \"\");\n                    }\n                }\n                diffuseImage = this._blocks[props.get(17, 0)].data;\n                normalImage = this._blocks[props.get(3, 0)].data;\n                specImage = this._blocks[props.get(21, 0)].data;\n                mat.lightPicker = this._blocks[props.get(22, 0)].data;\n                mat.style.sampler = new Sampler2D_1.default(props.get(13, false), props.get(5, true), props.get(6, true));\n                mat.bothSides = props.get(7, false);\n                mat.alphaPremultiplied = props.get(8, false);\n                mat.blendMode = this.blendModeDic[props.get(9, 0)];\n                if (diffuseImage) {\n                    mat.diffuseTexture = new Single2DTexture_1.default(diffuseImage);\n                    debugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n                }\n                if (normalImage) {\n                    mat.normalMethod.texture = new Single2DTexture_1.default(normalImage);\n                    debugString += \" | NormalTexture-Name = \" + normalImage.name;\n                }\n                if (specImage) {\n                    mat.specularMethod.texture = new Single2DTexture_1.default(specImage);\n                    debugString += \" | SpecularTexture-Name = \" + specImage.name;\n                }\n                mat.alphaThreshold = props.get(12, 0.0);\n                mat.ambientMethod.strength = props.get(15, 1.0);\n                mat.diffuseMethod.color = props.get(16, 0xffffff);\n                mat.specularMethod.strength = props.get(18, 1.0);\n                mat.specularMethod.gloss = props.get(19, 50);\n                mat.specularMethod.color = props.get(20, 0xffffff);\n                for (var methods_parsed = 0; methods_parsed < num_methods; methods_parsed++) {\n                    var method_type;\n                    method_type = this._newBlockBytes.readUnsignedShort();\n                    props = this.parseProperties(AWDParser.method_v1Properties);\n                    switch (method_type) {\n                        case 999:\n                            var effectMethod = this._blocks[props.get(1, 0)].data;\n                            mat.addEffectMethod(effectMethod);\n                            debugString += \" | EffectMethod-Name = \" + effectMethod.name;\n                            break;\n                        case 998:\n                            var shadowMapMethod = this._blocks[props.get(1, 0)].data;\n                            mat.shadowMethod = shadowMapMethod;\n                            debugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n                            break;\n                        case 1:\n                            var cubeTexture = new SingleCubeTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.ambientMethod = new AmbientEnvMapMethod_1.default();\n                            mat.ambientMethod.texture = cubeTexture;\n                            debugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n                            break;\n                        case 51:\n                            mat.diffuseMethod = new DiffuseDepthMethod_1.default();\n                            debugString += \" | DiffuseDepthMethod\";\n                            break;\n                        case 52:\n                            var texture = new Single2DTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.diffuseMethod = new DiffuseGradientMethod_1.default(texture);\n                            debugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n                            break;\n                        case 53:\n                            mat.diffuseMethod = new DiffuseWrapMethod_1.default(props.get(101, 5));\n                            debugString += \" | DiffuseWrapMethod\";\n                            break;\n                        case 54:\n                            var texture = new Single2DTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.diffuseMethod = new DiffuseLightMapMethod_1.default(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n                            debugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n                            break;\n                        case 55:\n                            mat.diffuseMethod = new DiffuseCelMethod_1.default(props.get(401, 3), mat.diffuseMethod);\n                            mat.diffuseMethod.smoothness = props.get(101, 0.1);\n                            debugString += \" | DiffuseCelMethod\";\n                            break;\n                        case 56:\n                            //\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n                            //\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n                            //\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n                            break;\n                        case 101:\n                            mat.specularMethod = new SpecularAnisotropicMethod_1.default();\n                            debugString += \" | SpecularAnisotropicMethod\";\n                            break;\n                        case 102:\n                            mat.specularMethod = new SpecularPhongMethod_1.default();\n                            debugString += \" | SpecularPhongMethod\";\n                            break;\n                        case 103:\n                            mat.specularMethod = new SpecularCelMethod_1.default(props.get(101, 0.5), mat.specularMethod);\n                            mat.specularMethod.smoothness = props.get(102, 0.1);\n                            debugString += \" | SpecularCelMethod\";\n                            break;\n                        case 104:\n                            mat.specularMethod = new SpecularFresnelMethod_1.default(props.get(701, true), mat.specularMethod);\n                            mat.specularMethod.fresnelPower = props.get(101, 5);\n                            mat.specularMethod.normalReflectance = props.get(102, 0.1);\n                            debugString += \" | SpecularFresnelMethod\";\n                            break;\n                        case 151:\n                            break;\n                        case 152:\n                            var texture = new Single2DTexture_1.default(this._blocks[props.get(1, 0)].data);\n                            mat.normalMethod = new NormalSimpleWaterMethod_1.default(mat.normalMethod.texture || texture, texture);\n                            debugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n                            break;\n                    }\n                    this.parseUserAttributes();\n                }\n            }\n        }\n        else if ((type >= 3) && (type <= 7)) {\n            // if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n            var color = props.get(1, 0xcccccc);\n            debugString += color;\n            var diffuseTexture = new Single2DTexture_1.default(this._blocks[props.get(2, 0)].data);\n            if (type == 5) {\n                diffuseTexture.mappingMode = MappingMode_1.default.LINEAR_GRADIENT;\n            }\n            else if (type == 6) {\n                diffuseTexture.mappingMode = MappingMode_1.default.RADIAL_GRADIENT;\n            }\n            var basic_mat = new BasicMaterial_1.default();\n            basic_mat.texture = diffuseTexture;\n            basic_mat.bothSides = true;\n            //basic_mat.preserveAlpha = true;\n            basic_mat.alphaBlending = true;\n            basic_mat.extra = this.parseUserAttributes();\n            this._pFinalizeAsset(basic_mat, name);\n            this._blocks[blockID].data = basic_mat;\n            if (this._debug)\n                console.log(debugString);\n            return;\n        }\n        mat.extra = this.parseUserAttributes();\n        this._pFinalizeAsset(mat, name);\n        this._blocks[blockID].data = mat;\n        if (this._debug)\n            console.log(debugString);\n    };\n    //Block ID = 82\n    AWDParser.prototype.parseTexture = function (blockID) {\n        this._blocks[blockID].name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedByte();\n        this._texture_users[this._cur_block_id] = [];\n        // External\n        if (type == 0) {\n            var url = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n            this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.default(url), false, null, true);\n        }\n        else {\n            var data_len = this._newBlockBytes.readUnsignedInt();\n            var data = new ByteArray_1.default(data_len);\n            this._newBlockBytes.readBytes(data, 0, data_len);\n            //\n            // AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n            //\n            // Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n            // This gives the browser time to initialise image width / height.\n            this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        if (this._debug)\n            console.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n    };\n    //Block ID = 83\n    AWDParser.prototype.parseCubeTexture = function (blockID) {\n        //blockLength = block.len;\n        var data_len;\n        var i;\n        this._texture_users[this._cur_block_id] = [];\n        var type = this._newBlockBytes.readUnsignedByte();\n        this._blocks[blockID].name = this.parseVarStr();\n        for (i = 0; i < 6; i++) {\n            this._texture_users[this._cur_block_id] = [];\n            // External\n            if (type == 0) {\n                data_len = this._newBlockBytes.readUnsignedInt();\n                var url;\n                url = this._newBlockBytes.readUTFBytes(data_len);\n                this._pAddDependency(this._cur_block_id.toString(), new URLRequest_1.default(url), false, null, true, i);\n            }\n            else {\n                data_len = this._newBlockBytes.readUnsignedInt();\n                var data = new ByteArray_1.default(data_len);\n                this._newBlockBytes.readBytes(data, 0, data_len);\n                this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils_1.default.byteArrayToImage(data), true, i);\n            }\n        }\n        // Ignore for now\n        this.parseProperties(null);\n        this._blocks[blockID].extras = this.parseUserAttributes();\n        this._pPauseAndRetrieveDependencies();\n        if (this._debug)\n            console.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n    };\n    //Block ID = 91\n    AWDParser.prototype.parseSharedMethodBlock = function (blockID) {\n        var asset;\n        this._blocks[blockID].name = this.parseVarStr();\n        asset = this.parseSharedMethodList(blockID);\n        this.parseUserAttributes();\n        this._blocks[blockID].data = asset;\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n    };\n    //Block ID = 92\n    AWDParser.prototype.parseShadowMethodBlock = function (blockID) {\n        this._blocks[blockID].name = this.parseVarStr();\n        var light = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var asset = this.parseShadowMethodList(light, blockID);\n        if (!asset)\n            return;\n        this.parseUserAttributes(); // Ignore for now\n        this._pFinalizeAsset(asset, this._blocks[blockID].name);\n        this._blocks[blockID].data = asset;\n        if (this._debug)\n            console.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n    };\n    //Block ID = 253\n    AWDParser.prototype.parseCommand = function (blockID) {\n        var hasBlocks = (this._newBlockBytes.readUnsignedByte() == 1);\n        var parentObject = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var targetObject;\n        var mtx = this.parseMatrix3D();\n        var name = this.parseVarStr();\n        var numCommands = this._newBlockBytes.readShort();\n        var typeCommand = this._newBlockBytes.readShort();\n        var props = this.parseProperties(AWDParser.commandProperties);\n        switch (typeCommand) {\n            case 1:\n                targetObject = this._blocks[props.get(1, 0)].data;\n                targetObject.transform.matrix3D = mtx;\n                if (parentObject)\n                    parentObject.addChild(targetObject);\n                break;\n        }\n        if (targetObject) {\n            props = this.parseProperties(AWDParser.targetProperties);\n            targetObject.pivot = new Vector3D_1.default(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n            targetObject.extra = this.parseUserAttributes();\n        }\n        this._blocks[blockID].data = targetObject;\n        if (this._debug)\n            console.log(\"Parsed a CommandBlock: Name = '\" + name);\n    };\n    //blockID 255\n    AWDParser.prototype.parseMetaData = function (blockID) {\n        var props = this.parseProperties(AWDParser.metaDataProperties);\n        if (this._debug) {\n            console.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n            console.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n            console.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n            console.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n            console.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n        }\n    };\n    //blockID 254\n    AWDParser.prototype.parseNameSpace = function (blockID) {\n        var id = this._newBlockBytes.readUnsignedByte();\n        var nameSpaceString = this.parseVarStr();\n        if (this._debug)\n            console.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n    };\n    // this functions reads and creates a ShadowMethodMethod\n    AWDParser.prototype.parseShadowMethodList = function (light, blockID) {\n        var methodType = this._newBlockBytes.readUnsignedShort();\n        var shadowMethod;\n        var props = this.parseProperties(this.shadowMethodListProperties);\n        var targetID;\n        var returnedArray;\n        switch (methodType) {\n            //\t\t\t\tcase 1001: //CascadeShadowMapMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n            //\t\t\t\t\tif (!returnedArray[0]) {\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n            //\t\t\t\t\t\treturn shadowMethod;\n            //\t\t\t\t\t}\n            //\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n            //\t\t\t\t\tbreak;\n            case 1002:\n                shadowMethod = new ShadowNearMethod_1.default(this._blocks[props.get(1, 0)].data);\n                break;\n            case 1101:\n                shadowMethod = new ShadowFilteredMethod_1.default(light);\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                break;\n            case 1102:\n                shadowMethod = new ShadowDitheredMethod_1.default(light, props.get(201, 5));\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                shadowMethod.range = props.get(103, 1);\n                break;\n            case 1103:\n                shadowMethod = new ShadowSoftMethod_1.default(light, props.get(201, 5));\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                shadowMethod.range = props.get(103, 1);\n                break;\n            case 1104:\n                shadowMethod = new ShadowHardMethod_1.default(light);\n                shadowMethod.alpha = props.get(101, 1);\n                shadowMethod.epsilon = props.get(102, 0.002);\n                break;\n        }\n        this.parseUserAttributes();\n        return shadowMethod;\n    };\n    //Block ID 101\n    AWDParser.prototype.parseSkeleton = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_joints = this._newBlockBytes.readUnsignedShort();\n        var skeleton = new Skeleton_1.default();\n        this.parseProperties(null); // Discard properties for now\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\n            var joint;\n            var ibp;\n            // Ignore joint id\n            this._newBlockBytes.readUnsignedShort();\n            joint = new SkeletonJoint_1.default();\n            joint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n            joint.name = this.parseVarStr();\n            ibp = this.parseMatrix3D();\n            joint.inverseBindPose = ibp.rawData;\n            // Ignore joint props/attributes for now\n            this.parseProperties(null);\n            this.parseUserAttributes();\n            skeleton.joints.push(joint);\n        }\n        // Discard attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(skeleton, name);\n        this._blocks[blockID].data = skeleton;\n        if (this._debug)\n            console.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n    };\n    //Block ID = 102\n    AWDParser.prototype.parseSkeletonPose = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_joints = this._newBlockBytes.readUnsignedShort();\n        this.parseProperties(null); // Ignore properties for now\n        var pose = new SkeletonPose_1.default();\n        for (var joints_parsed = 0; joints_parsed < num_joints; joints_parsed++) {\n            var joint_pose;\n            var has_transform;\n            joint_pose = new JointPose_1.default();\n            has_transform = this._newBlockBytes.readUnsignedByte();\n            if (has_transform == 1) {\n                var mtx_data = this.parseMatrix43RawData();\n                var mtx = new Matrix3D_1.default(mtx_data);\n                joint_pose.orientation.fromMatrix(mtx);\n                joint_pose.translation.copyFrom(mtx.position);\n                pose.jointPoses[joints_parsed] = joint_pose;\n            }\n        }\n        // Skip attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(pose, name);\n        this._blocks[blockID].data = pose;\n        if (this._debug)\n            console.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n    };\n    //blockID 103\n    AWDParser.prototype.parseSkeletonAnimation = function (blockID /*uint*/) {\n        var frame_dur;\n        var pose_id;\n        var name = this.parseVarStr();\n        var clip = new SkeletonClipNode_1.default();\n        var num_frames = this._newBlockBytes.readUnsignedShort();\n        this.parseProperties(null); // Ignore properties for now\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            pose_id = this._newBlockBytes.readUnsignedInt();\n            frame_dur = this._newBlockBytes.readUnsignedShort();\n            clip.addFrame(this._blocks[pose_id].data, frame_dur);\n        }\n        if (clip.frames.length == 0) {\n            this._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n            return;\n        }\n        // Ignore attributes for now\n        this.parseUserAttributes();\n        this._pFinalizeAsset(clip, name);\n        this._blocks[blockID].data = clip;\n        if (this._debug)\n            console.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n    };\n    //Block ID = 111 /  Block ID = 112\n    AWDParser.prototype.parseSpritePoseAnimation = function (blockID /*uint*/, poseOnly) {\n        if (poseOnly === void 0) { poseOnly = false; }\n        var subSpriteParsed;\n        var x;\n        var y;\n        var z;\n        var str_len;\n        var str_end;\n        var elements;\n        var idx = 0;\n        var clip = new VertexClipNode_1.default();\n        var indices;\n        var verts;\n        var streamtypes = new Array();\n        var props;\n        var name = this.parseVarStr();\n        var geo_id = this._newBlockBytes.readUnsignedInt();\n        var graphics = this._blocks[geo_id].data;\n        var uvs = this.getUVForVertexAnimation(geo_id);\n        var num_frames = (!poseOnly) ? this._newBlockBytes.readUnsignedShort() : 1;\n        var num_subsprites = this._newBlockBytes.readUnsignedShort();\n        var num_Streams = this._newBlockBytes.readUnsignedShort();\n        for (var streamsParsed = 0; streamsParsed < num_Streams; streamsParsed++)\n            streamtypes.push(this._newBlockBytes.readUnsignedShort());\n        props = this.parseProperties(this.spritePoseAnimationProperties);\n        clip.looping = props.get(1, true);\n        clip.stitchFinalFrame = props.get(2, false);\n        var frame_dur;\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            frame_dur = this._newBlockBytes.readUnsignedShort();\n            graphics = new Graphics_1.default();\n            subSpriteParsed = 0;\n            while (subSpriteParsed < num_subsprites) {\n                streamsParsed = 0;\n                str_len = this._newBlockBytes.readUnsignedInt();\n                str_end = this._newBlockBytes.position + str_len;\n                while (streamsParsed < num_Streams) {\n                    if (streamtypes[streamsParsed] == 1) {\n                        indices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\n                        verts = new Array();\n                        idx = 0;\n                        while (this._newBlockBytes.position < str_end) {\n                            x = this.readNumber(this._accuracyGeo);\n                            y = this.readNumber(this._accuracyGeo);\n                            z = this.readNumber(this._accuracyGeo);\n                            verts[idx++] = x;\n                            verts[idx++] = y;\n                            verts[idx++] = z;\n                        }\n                        elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n                        elements.setIndices(indices);\n                        elements.setPositions(verts);\n                        elements.setUVs(uvs[subSpriteParsed]);\n                        elements.setNormals(null);\n                        elements.setTangents(null);\n                        elements.autoDeriveNormals = false;\n                        elements.autoDeriveTangents = false;\n                        subSpriteParsed++;\n                        graphics.addGraphic(elements);\n                    }\n                    else\n                        this._newBlockBytes.position = str_end;\n                    streamsParsed++;\n                }\n            }\n            clip.addFrame(graphics, frame_dur);\n        }\n        this.parseUserAttributes();\n        this._pFinalizeAsset(clip, name);\n        this._blocks[blockID].data = clip;\n        if (this._debug)\n            console.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n    };\n    //BlockID 113\n    AWDParser.prototype.parseVertexAnimationSet = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var num_frames = this._newBlockBytes.readUnsignedShort();\n        var props = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n        var skeletonFrames = new Array();\n        var vertexFrames = new Array();\n        var clipNode;\n        for (var frames_parsed = 0; frames_parsed < num_frames; frames_parsed++) {\n            clipNode = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n            if (clipNode instanceof VertexClipNode_1.default)\n                vertexFrames.push(clipNode);\n            else if (clipNode instanceof SkeletonClipNode_1.default)\n                skeletonFrames.push(clipNode);\n        }\n        if ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n            this._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n            return;\n        }\n        this.parseUserAttributes();\n        if (vertexFrames.length > 0) {\n            var newVertexAnimationSet = new VertexAnimationSet_1.default();\n            for (var i = 0; i < vertexFrames.length; i++)\n                newVertexAnimationSet.addAnimation(vertexFrames[i]);\n            this._pFinalizeAsset(newVertexAnimationSet, name);\n            this._blocks[blockID].data = newVertexAnimationSet;\n            if (this._debug)\n                console.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n        }\n        else if (skeletonFrames.length > 0) {\n            var newSkeletonAnimationSet = new SkeletonAnimationSet_1.default(props.get(1, 4)); //props.get(1,4));\n            for (var i = 0; i < skeletonFrames.length; i++)\n                newSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n            this._pFinalizeAsset(newSkeletonAnimationSet, name);\n            this._blocks[blockID].data = newSkeletonAnimationSet;\n            if (this._debug)\n                console.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n        }\n    };\n    //BlockID 122\n    AWDParser.prototype.parseAnimatorSet = function (blockID /*uint*/) {\n        var name = this.parseVarStr();\n        var type = this._newBlockBytes.readUnsignedShort();\n        var props = this.parseProperties(AWDParser.animatorSetProperties);\n        var targetAnimationSet = this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n        var targetSpritees = new Array();\n        var targetSpriteLength = this._newBlockBytes.readUnsignedShort();\n        for (var i = 0; i < targetSpriteLength; i++)\n            targetSpritees.push(this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n        var activeState = this._newBlockBytes.readUnsignedShort();\n        var autoplay = (this._newBlockBytes.readUnsignedByte() == 1);\n        this.parseUserAttributes();\n        this.parseUserAttributes();\n        var thisAnimator;\n        if (type == 1)\n            thisAnimator = new SkeletonAnimator_1.default(targetAnimationSet, this._blocks[props.get(1, 0)].data);\n        else if (type == 2)\n            thisAnimator = new VertexAnimator_1.default(targetAnimationSet);\n        this._pFinalizeAsset(thisAnimator, name);\n        this._blocks[blockID].data = thisAnimator;\n        for (i = 0; i < targetSpritees.length; i++) {\n            if (type == 1)\n                targetSpritees[i].animator = thisAnimator;\n            else if (type == 2)\n                targetSpritees[i].animator = thisAnimator;\n        }\n        if (this._debug)\n            console.log(\"Parsed a Animator: Name = \" + name);\n    };\n    // this functions reads and creates a EffectMethod\n    AWDParser.prototype.parseSharedMethodList = function (blockID) {\n        var methodType = this._newBlockBytes.readUnsignedShort();\n        var effectMethodReturn;\n        var props = this.parseProperties(this.sharedMethodListProperties);\n        switch (methodType) {\n            // Effect Methods\n            case 401:\n                effectMethodReturn = new EffectColorMatrixMethod_1.default(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n                break;\n            case 402:\n                effectMethodReturn = new EffectColorTransformMethod_1.default();\n                var offCol = props.get(601, 0x00000000);\n                effectMethodReturn.colorTransform = new ColorTransform_1.default(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n                break;\n            case 403:\n                effectMethodReturn = new EffectEnvMapMethod_1.default(new SingleCubeTexture_1.default(this._blocks[props.get(1, 0)].data), props.get(101, 1));\n                var targetID = props.get(2, 0);\n                if (targetID > 0) {\n                }\n                break;\n            case 404:\n                effectMethodReturn = new EffectLightMapMethod_1.default(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n                break;\n            //\t\t\t\tcase 405: //ProjectiveTextureMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n            //\t\t\t\t\tif (!returnedArray[0])\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n            //\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n            //\t\t\t\t\tbreak;\n            case 406:\n                effectMethodReturn = new EffectRimLightMethod_1.default(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n                break;\n            case 407:\n                effectMethodReturn = new EffectAlphaMaskMethod_1.default(this._blocks[props.get(1, 0)].data, props.get(701, false));\n                break;\n            //\t\t\t\tcase 408: //RefractionEnvMapMethod\n            //\t\t\t\t\ttargetID = props.get(1, 0);\n            //\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n            //\t\t\t\t\tif (!returnedArray[0])\n            //\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n            //\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n            //\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n            //\t\t\t\t\tbreak;\n            //\t\t\t\tcase 409: //OutlineMethod\n            //\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n            //\t\t\t\t\tbreak;\n            case 410:\n                effectMethodReturn = new EffectFresnelEnvMapMethod_1.default(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n                break;\n            case 411:\n                effectMethodReturn = new EffectFogMethod_1.default(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n                break;\n        }\n        this.parseUserAttributes();\n        return effectMethodReturn;\n    };\n    AWDParser.prototype.parseUserAttributes = function () {\n        var list_len = this._newBlockBytes.readUnsignedInt();\n        if (list_len > 0) {\n            var list_end = this._newBlockBytes.position + list_len;\n            var attributes = {};\n            for (var attibuteCnt = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n                var ns_id;\n                var attr_key;\n                var attr_type;\n                var attr_len;\n                var attr_val;\n                // TODO: Properly tend to namespaces in attributes\n                ns_id = this._newBlockBytes.readUnsignedByte();\n                attr_key = this.parseVarStr();\n                attr_type = this._newBlockBytes.readUnsignedByte();\n                attr_len = this._newBlockBytes.readUnsignedInt();\n                if ((this._newBlockBytes.position + attr_len) > list_end) {\n                    console.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n                    this._newBlockBytes.position = list_end;\n                    return attributes;\n                }\n                switch (attr_type) {\n                    case AWDParser.AWDSTRING:\n                        attr_val = this._newBlockBytes.readUTFBytes(attr_len);\n                        break;\n                    case AWDParser.INT8:\n                        attr_val = this._newBlockBytes.readByte();\n                        break;\n                    case AWDParser.INT16:\n                        attr_val = this._newBlockBytes.readShort();\n                        break;\n                    case AWDParser.INT32:\n                        attr_val = this._newBlockBytes.readInt();\n                        break;\n                    case AWDParser.BOOL:\n                    case AWDParser.UINT8:\n                        attr_val = this._newBlockBytes.readUnsignedByte();\n                        break;\n                    case AWDParser.UINT16:\n                        attr_val = this._newBlockBytes.readUnsignedShort();\n                        break;\n                    case AWDParser.UINT32:\n                    case AWDParser.BADDR:\n                        attr_val = this._newBlockBytes.readUnsignedInt();\n                        break;\n                    case AWDParser.FLOAT32:\n                        attr_val = this._newBlockBytes.readFloat();\n                        break;\n                    case AWDParser.FLOAT64:\n                        attr_val = this._newBlockBytes.readDouble();\n                        break;\n                    default:\n                        attr_val = 'unimplemented attribute type ' + attr_type;\n                        this._newBlockBytes.position += attr_len;\n                        break;\n                }\n                attributes[attr_key] = attr_val;\n                if (this._debug)\n                    console.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n            }\n        }\n        return attributes;\n    };\n    AWDParser.prototype.parseProperties = function (expected) {\n        var list_len = this._newBlockBytes.readUnsignedInt();\n        var props = new AWDProperties();\n        var list_end = this._newBlockBytes.position + list_len;\n        if (expected) {\n            var len;\n            var key;\n            var type;\n            for (var propertyCnt = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n                key = this._newBlockBytes.readUnsignedShort();\n                len = this._newBlockBytes.readUnsignedInt();\n                if ((this._newBlockBytes.position + len) > list_end) {\n                    console.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n                    this._newBlockBytes.position = list_end;\n                    return props;\n                }\n                if (expected[key]) {\n                    type = expected[key];\n                    props.set(key, this.parseAttrValue(type, len));\n                }\n                else {\n                    this._newBlockBytes.position += len;\n                }\n            }\n        }\n        else {\n            this._newBlockBytes.position = list_end;\n        }\n        return props;\n    };\n    AWDParser.prototype.parseAttrValue = function (type, len) {\n        var elem_len;\n        var read_func;\n        var accuracy;\n        switch (type) {\n            case AWDParser.BOOL:\n            case AWDParser.INT8:\n                elem_len = 1;\n                read_func = this._newBlockBytes.readByte;\n                break;\n            case AWDParser.INT16:\n                elem_len = 2;\n                read_func = this._newBlockBytes.readShort;\n                break;\n            case AWDParser.INT32:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readInt;\n                break;\n            case AWDParser.UINT8:\n                elem_len = 1;\n                read_func = this._newBlockBytes.readUnsignedByte;\n                break;\n            case AWDParser.UINT16:\n                elem_len = 2;\n                read_func = this._newBlockBytes.readUnsignedShort;\n                break;\n            case AWDParser.UINT32:\n            case AWDParser.COLOR:\n            case AWDParser.BADDR:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readUnsignedInt;\n                break;\n            case AWDParser.FLOAT32:\n                elem_len = 4;\n                read_func = this._newBlockBytes.readFloat;\n                break;\n            case AWDParser.FLOAT64:\n                elem_len = 8;\n                read_func = this._newBlockBytes.readDouble;\n                break;\n            case AWDParser.AWDSTRING:\n                return this._newBlockBytes.readUTFBytes(len);\n            case AWDParser.VECTOR2x1:\n            case AWDParser.VECTOR3x1:\n            case AWDParser.VECTOR4x1:\n            case AWDParser.MTX3x2:\n            case AWDParser.MTX3x3:\n            case AWDParser.MTX4x3:\n            case AWDParser.MTX4x4:\n                elem_len = 8;\n                read_func = this._newBlockBytes.readDouble;\n                break;\n            case AWDParser.GEO_NUMBER:\n                accuracy = this._accuracyGeo;\n            case AWDParser.MATRIX_NUMBER:\n                accuracy = this._accuracyMatrix;\n            case AWDParser.PROPERTY_NUMBER:\n                accuracy = this._accuracyProps;\n            default:\n                if (accuracy) {\n                    elem_len = 8;\n                    read_func = this._newBlockBytes.readDouble;\n                }\n                else {\n                    elem_len = 4;\n                    read_func = this._newBlockBytes.readFloat;\n                }\n        }\n        if (elem_len < len) {\n            var list = [];\n            var num_elems = len / elem_len;\n            for (var num_read = 0; num_read < num_elems; num_read++)\n                list[num_read] = read_func.call(this._newBlockBytes);\n            return list;\n        }\n        else {\n            return read_func.call(this._newBlockBytes);\n        }\n    };\n    AWDParser.prototype.parseHeader = function () {\n        this._byteData.position = 3; // Skip magic string and parse version\n        this._version[0] = this._byteData.readUnsignedByte();\n        this._version[1] = this._byteData.readUnsignedByte();\n        var flags = this._byteData.readUnsignedShort(); // Parse bit flags\n        this._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n        // if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n        if ((this._version[0] == 2) && (this._version[1] == 1)) {\n            this._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n            this._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n            this._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n        }\n        this._compression = this._byteData.readUnsignedByte(); // compression\n        if (this._debug) {\n            console.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n            console.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n        }\n        // Check file integrity\n        var body_len = this._byteData.readUnsignedInt();\n        if (!this._streaming && body_len != this._byteData.getBytesAvailable())\n            this._pDieWithError('AWD2 body length does not match header integrity field');\n    };\n    // Helper - functions\n    AWDParser.prototype.getUVForVertexAnimation = function (spriteID /*uint*/) {\n        if (this._blocks[spriteID].data instanceof Sprite_1.default)\n            spriteID = this._blocks[spriteID].geoID;\n        if (this._blocks[spriteID].uvsForVertexAnimation)\n            return this._blocks[spriteID].uvsForVertexAnimation;\n        var graphics = this._blocks[spriteID].data;\n        var elements;\n        var uvsForVertexAnimation = this._blocks[spriteID].uvsForVertexAnimation = new Array();\n        var len = graphics.count;\n        for (var geoCnt = 0; geoCnt < len; geoCnt++) {\n            elements = graphics.getGraphicAt(geoCnt).elements;\n            uvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n        }\n        return this._blocks[spriteID].uvsForVertexAnimation;\n    };\n    AWDParser.prototype.parseVarStr = function () {\n        return this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n    };\n    AWDParser.prototype.readNumber = function (precision) {\n        if (precision === void 0) { precision = false; }\n        if (precision)\n            return this._newBlockBytes.readDouble();\n        return this._newBlockBytes.readFloat();\n    };\n    AWDParser.prototype.parseMatrix3D = function () {\n        return new Matrix3D_1.default(this.parseMatrix43RawData());\n    };\n    AWDParser.prototype.parseMatrix32RawData = function () {\n        var mtx_raw = new Array(6);\n        for (var i = 0; i < 6; i++)\n            mtx_raw[i] = this._newBlockBytes.readFloat();\n        return mtx_raw;\n    };\n    AWDParser.prototype.parseMatrix43RawData = function () {\n        var mtx_raw = new Float32Array(16);\n        mtx_raw[0] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[1] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[2] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[3] = 0.0;\n        mtx_raw[4] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[5] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[6] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[7] = 0.0;\n        mtx_raw[8] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[9] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[10] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[11] = 0.0;\n        mtx_raw[12] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[13] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[14] = this.readNumber(this._accuracyMatrix);\n        mtx_raw[15] = 1.0;\n        //TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n        if (isNaN(mtx_raw[0])) {\n            mtx_raw[0] = 1;\n            mtx_raw[1] = 0;\n            mtx_raw[2] = 0;\n            mtx_raw[4] = 0;\n            mtx_raw[5] = 1;\n            mtx_raw[6] = 0;\n            mtx_raw[8] = 0;\n            mtx_raw[9] = 0;\n            mtx_raw[10] = 1;\n            mtx_raw[12] = 0;\n            mtx_raw[13] = 0;\n            mtx_raw[14] = 0;\n        }\n        return mtx_raw;\n    };\n    AWDParser.COMPRESSIONMODE_LZMA = \"lzma\";\n    AWDParser.UNCOMPRESSED = 0;\n    AWDParser.DEFLATE = 1;\n    AWDParser.LZMA = 2;\n    AWDParser.INT8 = 1;\n    AWDParser.INT16 = 2;\n    AWDParser.INT32 = 3;\n    AWDParser.UINT8 = 4;\n    AWDParser.UINT16 = 5;\n    AWDParser.UINT32 = 6;\n    AWDParser.FLOAT32 = 7;\n    AWDParser.FLOAT64 = 8;\n    AWDParser.BOOL = 21;\n    AWDParser.COLOR = 22;\n    AWDParser.BADDR = 23;\n    AWDParser.AWDSTRING = 31;\n    AWDParser.AWDBYTEARRAY = 32;\n    AWDParser.VECTOR2x1 = 41;\n    AWDParser.VECTOR3x1 = 42;\n    AWDParser.VECTOR4x1 = 43;\n    AWDParser.MTX3x2 = 44;\n    AWDParser.MTX3x3 = 45;\n    AWDParser.MTX4x3 = 46;\n    AWDParser.MTX4x4 = 47;\n    AWDParser.GEO_NUMBER = 48;\n    AWDParser.MATRIX_NUMBER = 49;\n    AWDParser.PROPERTY_NUMBER = 50;\n    AWDParser.textFormatProperties = {\n        1: AWDParser.UINT16,\n        2: AWDParser.FLOAT32,\n        3: AWDParser.UINT8,\n        4: AWDParser.UINT8,\n        5: AWDParser.UINT8,\n        6: AWDParser.UINT8,\n        7: AWDParser.FLOAT32,\n        8: AWDParser.FLOAT32,\n        9: AWDParser.FLOAT32,\n        10: AWDParser.FLOAT32 }; //line spacing\n    AWDParser.textFieldProperties = {\n        1: AWDParser.BOOL,\n        3: AWDParser.BOOL,\n        4: AWDParser.BOOL,\n        5: AWDParser.BOOL,\n        7: AWDParser.UINT8,\n        8: AWDParser.UINT8,\n        9: AWDParser.UINT8 };\n    AWDParser.textFieldTypes = [\"static\", \"dynamic\", \"input\", \"input\"];\n    AWDParser.movieClipProperties = {\n        1: AWDParser.FLOAT32,\n        2: AWDParser.UINT16,\n        3: AWDParser.UINT8 }; // scripting-language right now its always as2\n    AWDParser.graphicsProperties = {\n        1: AWDParser.GEO_NUMBER,\n        2: AWDParser.GEO_NUMBER };\n    AWDParser.elementsProperties = {\n        1: AWDParser.GEO_NUMBER,\n        2: AWDParser.GEO_NUMBER };\n    AWDParser.primitiveProperties = {\n        101: AWDParser.GEO_NUMBER,\n        102: AWDParser.GEO_NUMBER,\n        103: AWDParser.GEO_NUMBER,\n        110: AWDParser.GEO_NUMBER,\n        111: AWDParser.GEO_NUMBER,\n        301: AWDParser.UINT16,\n        302: AWDParser.UINT16,\n        303: AWDParser.UINT16,\n        701: AWDParser.BOOL,\n        702: AWDParser.BOOL,\n        703: AWDParser.BOOL,\n        704: AWDParser.BOOL };\n    AWDParser.primitiveTypes = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n    AWDParser.containerProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    AWDParser.spriteInstanceProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8,\n        5: AWDParser.BOOL };\n    AWDParser.lightProperties = {\n        1: AWDParser.PROPERTY_NUMBER,\n        2: AWDParser.PROPERTY_NUMBER,\n        3: AWDParser.COLOR,\n        4: AWDParser.PROPERTY_NUMBER,\n        5: AWDParser.PROPERTY_NUMBER,\n        6: AWDParser.BOOL,\n        7: AWDParser.COLOR,\n        8: AWDParser.PROPERTY_NUMBER,\n        9: AWDParser.UINT8,\n        10: AWDParser.UINT8,\n        11: AWDParser.PROPERTY_NUMBER,\n        12: AWDParser.UINT16,\n        21: AWDParser.MATRIX_NUMBER,\n        22: AWDParser.MATRIX_NUMBER,\n        23: AWDParser.MATRIX_NUMBER };\n    AWDParser.cameraProperties = {\n        101: AWDParser.PROPERTY_NUMBER,\n        102: AWDParser.PROPERTY_NUMBER,\n        103: AWDParser.PROPERTY_NUMBER,\n        104: AWDParser.PROPERTY_NUMBER };\n    AWDParser.cameraPivotProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    // (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n    AWDParser.materialProperties = {\n        1: AWDParser.INT32,\n        2: AWDParser.BADDR,\n        10: AWDParser.PROPERTY_NUMBER,\n        11: AWDParser.BOOL,\n        12: AWDParser.PROPERTY_NUMBER,\n        13: AWDParser.BOOL };\n    AWDParser.material_v1Properties = { 1: AWDParser.UINT32,\n        2: AWDParser.BADDR,\n        3: AWDParser.BADDR,\n        4: AWDParser.UINT8,\n        5: AWDParser.BOOL,\n        6: AWDParser.BOOL,\n        7: AWDParser.BOOL,\n        8: AWDParser.BOOL,\n        9: AWDParser.UINT8,\n        10: AWDParser.PROPERTY_NUMBER,\n        11: AWDParser.BOOL,\n        12: AWDParser.PROPERTY_NUMBER,\n        13: AWDParser.BOOL,\n        15: AWDParser.PROPERTY_NUMBER,\n        16: AWDParser.UINT32,\n        17: AWDParser.BADDR,\n        18: AWDParser.PROPERTY_NUMBER,\n        19: AWDParser.PROPERTY_NUMBER,\n        20: AWDParser.UINT32,\n        21: AWDParser.BADDR,\n        22: AWDParser.BADDR };\n    AWDParser.method_v1Properties = {\n        1: AWDParser.BADDR,\n        2: AWDParser.BADDR,\n        3: AWDParser.BADDR,\n        101: AWDParser.PROPERTY_NUMBER,\n        102: AWDParser.PROPERTY_NUMBER,\n        103: AWDParser.PROPERTY_NUMBER,\n        201: AWDParser.UINT32,\n        202: AWDParser.UINT32,\n        301: AWDParser.UINT16,\n        302: AWDParser.UINT16,\n        401: AWDParser.UINT8,\n        402: AWDParser.UINT8,\n        601: AWDParser.COLOR,\n        602: AWDParser.COLOR,\n        701: AWDParser.BOOL,\n        702: AWDParser.BOOL,\n        801: AWDParser.MTX4x4 };\n    AWDParser.commandProperties = {\n        1: AWDParser.BADDR };\n    AWDParser.targetProperties = {\n        1: AWDParser.MATRIX_NUMBER,\n        2: AWDParser.MATRIX_NUMBER,\n        3: AWDParser.MATRIX_NUMBER,\n        4: AWDParser.UINT8 };\n    AWDParser.metaDataProperties = {\n        1: AWDParser.UINT32,\n        2: AWDParser.AWDSTRING,\n        3: AWDParser.AWDSTRING,\n        4: AWDParser.AWDSTRING,\n        5: AWDParser.AWDSTRING };\n    AWDParser.vertexAnimationSetProperties = {\n        1: AWDParser.UINT16 };\n    AWDParser.animatorSetProperties = { 1: AWDParser.BADDR };\n    return AWDParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = AWDParser;\nvar AWDProperties = (function () {\n    function AWDProperties() {\n    }\n    AWDProperties.prototype.set = function (key, value) {\n        this[key] = value;\n    };\n    AWDProperties.prototype.get = function (key, fallback) {\n        return (this[key] || fallback);\n    };\n    return AWDProperties;\n}());\n/**\n *\n */\nvar BitFlags = (function () {\n    function BitFlags() {\n    }\n    BitFlags.test = function (flags, testFlag) {\n        return (flags & testFlag) == testFlag;\n    };\n    BitFlags.FLAG1 = 1;\n    BitFlags.FLAG2 = 2;\n    BitFlags.FLAG3 = 4;\n    BitFlags.FLAG4 = 8;\n    BitFlags.FLAG5 = 16;\n    BitFlags.FLAG6 = 32;\n    BitFlags.FLAG7 = 64;\n    BitFlags.FLAG8 = 128;\n    BitFlags.FLAG9 = 256;\n    BitFlags.FLAG10 = 512;\n    BitFlags.FLAG11 = 1024;\n    BitFlags.FLAG12 = 2048;\n    BitFlags.FLAG13 = 4096;\n    BitFlags.FLAG14 = 8192;\n    BitFlags.FLAG15 = 16384;\n    BitFlags.FLAG16 = 32768;\n    return BitFlags;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/attributes/Byte4Attributes\":undefined,\"awayjs-core/lib/attributes/Float2Attributes\":undefined,\"awayjs-core/lib/attributes/Float3Attributes\":undefined,\"awayjs-core/lib/geom/ColorTransform\":undefined,\"awayjs-core/lib/geom/Matrix\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImageCube\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/library/AssetLibrary\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-core/lib/projections/OrthographicOffCenterProjection\":undefined,\"awayjs-core/lib/projections/OrthographicProjection\":undefined,\"awayjs-core/lib/projections/PerspectiveProjection\":undefined,\"awayjs-core/lib/utils/ByteArray\":undefined,\"awayjs-display/lib/base/Style\":undefined,\"awayjs-display/lib/base/Timeline\":undefined,\"awayjs-display/lib/display/Billboard\":undefined,\"awayjs-display/lib/display/Camera\":undefined,\"awayjs-display/lib/display/DirectionalLight\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/PointLight\":undefined,\"awayjs-display/lib/display/Skybox\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/ElementsType\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/materials/BasicMaterial\":undefined,\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\":undefined,\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\":undefined,\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\":undefined,\"awayjs-display/lib/prefabs/PrefabBase\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveConePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\":undefined,\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\":undefined,\"awayjs-display/lib/text/Font\":undefined,\"awayjs-display/lib/text/TextFormat\":undefined,\"awayjs-display/lib/textures/MappingMode\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-display/lib/textures/SingleCubeTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFogMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\":undefined,\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\":undefined,\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\":undefined,\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\":undefined,\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\":\"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\",\"awayjs-player/lib/factories/AS2SceneGraphFactory\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimator\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimator\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/MD2Parser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar Graphics_1 = require(\"awayjs-display/lib/graphics/Graphics\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar VertexClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nvar VertexAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nvar MD2Parser = (function (_super) {\n    __extends(MD2Parser, _super);\n    /**\n     * Creates a new MD2Parser object.\n     * @param textureType The extension of the texture (e.g. jpg/png/...)\n     * @param ignoreTexturePath If true, the path of the texture is ignored\n     */\n    function MD2Parser(textureType, ignoreTexturePath) {\n        if (textureType === void 0) { textureType = \"jpg\"; }\n        if (ignoreTexturePath === void 0) { ignoreTexturePath = true; }\n        _super.call(this, URLLoaderDataFormat_1.default.ARRAY_BUFFER);\n        this._clipNodes = new Object();\n        // the current elements being built\n        this._animationSet = new VertexAnimationSet_1.default();\n        this.materialFinal = false;\n        this.graphicsCreated = false;\n        this._textureType = textureType;\n        this._ignoreTexturePath = ignoreTexturePath;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD2Parser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md2\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD2Parser.supportsData = function (data) {\n        return (ParserUtils_1.default.toString(data, 4) == 'IDP2');\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length != 1)\n            return;\n        var material = new MethodMaterial_1.default(resourceDependency.assets[0]);\n        if (this.materialMode >= 2)\n            material.mode = MethodMaterialMode_1.default.MULTI_PASS;\n        //add to the content property\n        this._pContent.addChild(this._sprite);\n        material.name = this._sprite.material.name;\n        this._sprite.material = material;\n        this._pFinalizeAsset(material);\n        this._pFinalizeAsset(this._sprite.graphics);\n        this._pFinalizeAsset(this._sprite);\n        this.materialFinal = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        // apply system default\n        if (this.materialMode < 2) {\n            this._sprite.material = DefaultMaterialManager_1.default.getDefaultMaterial();\n        }\n        else {\n            this._sprite.material = new MethodMaterial_1.default(DefaultMaterialManager_1.default.getDefaultImage2D());\n            this._sprite.material.mode = MethodMaterialMode_1.default.MULTI_PASS;\n        }\n        //add to the content property\n        this._pContent.addChild(this._sprite);\n        this._pFinalizeAsset(this._sprite.graphics);\n        this._pFinalizeAsset(this._sprite);\n        this.materialFinal = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD2Parser.prototype._pProceedParsing = function () {\n        if (!this._startedParsing) {\n            this._byteData = this._pGetByteData();\n            this._startedParsing = true;\n            // Reset bytearray read position (which may have been\n            // moved forward by the supportsData() function.)\n            this._byteData.position = 0;\n        }\n        while (this._pHasTime()) {\n            if (!this._parsedHeader) {\n                //----------------------------------------------------------------------------\n                // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n                //----------------------------------------------------------------------------\n                //this._byteData.endian = Endian.LITTLE_ENDIAN;\n                // TODO: Create a sprite only when encountered (if it makes sense\n                // for this file format) and return it using this._pFinalizeAsset()\n                this._sprite = new Sprite_1.default();\n                this._graphics = this._sprite.graphics;\n                if (this.materialMode < 2) {\n                    this._sprite.material = DefaultMaterialManager_1.default.getDefaultMaterial();\n                }\n                else {\n                    this._sprite.material = new MethodMaterial_1.default(DefaultMaterialManager_1.default.getDefaultImage2D());\n                    this._sprite.material.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                }\n                //_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n                //_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\n                // Parse header and decompress body\n                this.parseHeader();\n                this.parseMaterialNames();\n            }\n            else if (!this._parsedUV) {\n                this.parseUV();\n            }\n            else if (!this._parsedFaces) {\n                this.parseFaces();\n            }\n            else if (!this._parsedFrames) {\n                this.parseFrames();\n            }\n            else if ((this.graphicsCreated) && (this.materialFinal)) {\n                return ParserBase_1.default.PARSING_DONE;\n            }\n            else if (!this.graphicsCreated) {\n                this.graphicsCreated = true;\n                //create default subgraphics\n                this._graphics.addGraphic(this._firstElements.clone());\n                // Force name to be chosen by this._pFinalizeAsset()\n                this._sprite.name = \"\";\n                if (this.materialFinal) {\n                    //add to the content property\n                    this._pContent.addChild(this._sprite);\n                    this._pFinalizeAsset(this._sprite.graphics);\n                    this._pFinalizeAsset(this._sprite);\n                }\n                this._pPauseAndRetrieveDependencies();\n            }\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    MD2Parser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    /**\n     * Reads in all that MD2 Header data that is declared as private variables.\n     * I know its a lot, and it looks ugly, but only way to do it in Flash\n     */\n    MD2Parser.prototype.parseHeader = function () {\n        this._ident = this._byteData.readInt();\n        this._version = this._byteData.readInt();\n        this._skinWidth = this._byteData.readInt();\n        this._skinHeight = this._byteData.readInt();\n        //skip this._frameSize\n        this._byteData.readInt();\n        this._numSkins = this._byteData.readInt();\n        this._numVertices = this._byteData.readInt();\n        this._numST = this._byteData.readInt();\n        this._numTris = this._byteData.readInt();\n        //skip this._numGlCmds\n        this._byteData.readInt();\n        this._numFrames = this._byteData.readInt();\n        this._offsetSkins = this._byteData.readInt();\n        this._offsetST = this._byteData.readInt();\n        this._offsetTris = this._byteData.readInt();\n        this._offsetFrames = this._byteData.readInt();\n        //skip this._offsetGlCmds\n        this._byteData.readInt();\n        this._offsetEnd = this._byteData.readInt();\n        this._parsedHeader = true;\n    };\n    /**\n     * Parses the file names for the materials.\n     */\n    MD2Parser.prototype.parseMaterialNames = function () {\n        var url;\n        var name;\n        var extIndex;\n        var slashIndex;\n        this._materialNames = new Array();\n        this._byteData.position = this._offsetSkins;\n        var regExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n        for (var i = 0; i < this._numSkins; ++i) {\n            name = this._byteData.readUTFBytes(64);\n            name = name.replace(regExp, \"\");\n            extIndex = name.lastIndexOf(\".\");\n            if (this._ignoreTexturePath)\n                slashIndex = name.lastIndexOf(\"/\");\n            if (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n                name = name.substring(slashIndex + 1, extIndex);\n                url = name + \".\" + this._textureType;\n            }\n            else {\n                url = name;\n            }\n            this._materialNames[i] = name;\n            // only support 1 skin TODO: really?\n            if (this.dependencies.length == 0)\n                this._pAddDependency(name, new URLRequest_1.default(url));\n        }\n        if (this._materialNames.length > 0)\n            this._sprite.material.name = this._materialNames[0];\n        else\n            this.materialFinal = true;\n    };\n    /**\n     * Parses the uv data for the sprite.\n     */\n    MD2Parser.prototype.parseUV = function () {\n        var j = 0;\n        this._uvs = new Array(this._numST * 2);\n        this._byteData.position = this._offsetST;\n        for (var i = 0; i < this._numST; i++) {\n            this._uvs[j++] = this._byteData.readShort() / this._skinWidth;\n            this._uvs[j++] = this._byteData.readShort() / this._skinHeight;\n        }\n        this._parsedUV = true;\n    };\n    /**\n     * Parses unique indices for the faces.\n     */\n    MD2Parser.prototype.parseFaces = function () {\n        var a /*uint*/, b /*uint*/, c /*uint*/, ta /*uint*/, tb /*uint*/, tc;\n        var i;\n        this._vertIndices = new Array();\n        this._uvIndices = new Array();\n        this._indices = new Array() /*uint*/;\n        this._byteData.position = this._offsetTris;\n        for (i = 0; i < this._numTris; i++) {\n            //collect vertex indices\n            a = this._byteData.readUnsignedShort();\n            b = this._byteData.readUnsignedShort();\n            c = this._byteData.readUnsignedShort();\n            //collect uv indices\n            ta = this._byteData.readUnsignedShort();\n            tb = this._byteData.readUnsignedShort();\n            tc = this._byteData.readUnsignedShort();\n            this.addIndex(a, ta);\n            this.addIndex(b, tb);\n            this.addIndex(c, tc);\n        }\n        var len = this._uvIndices.length;\n        this._finalUV = new Array(len * 2);\n        for (i = 0; i < len; ++i) {\n            this._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n            this._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n        }\n        this._parsedFaces = true;\n    };\n    /**\n     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n     * corresponding vertex and uv data in the correct location.\n     * @param vertexIndex The original index in the vertex list.\n     * @param uvIndex The original index in the uv list.\n     */\n    MD2Parser.prototype.addIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\n        var index = this.findIndex(vertexIndex, uvIndex);\n        if (index == -1) {\n            this._indices.push(this._vertIndices.length);\n            this._vertIndices.push(vertexIndex);\n            this._uvIndices.push(uvIndex);\n        }\n        else\n            this._indices.push(index);\n    };\n    /**\n     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n     * @param vertexIndex The original index in the vertex list.\n     * @param uvIndex The original index in the uv list.\n     * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n     */\n    MD2Parser.prototype.findIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {\n        var len = this._vertIndices.length;\n        for (var i = 0; i < len; ++i) {\n            if (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n                return i;\n        }\n        return -1;\n    };\n    /**\n     * Parses all the frame elements.\n     */\n    MD2Parser.prototype.parseFrames = function () {\n        var sx, sy, sz;\n        var tx, ty, tz;\n        var graphics;\n        var elements;\n        var vertLen = this._vertIndices.length;\n        var fvertices;\n        var tvertices;\n        var i /*uint*/, j /*int*/, k;\n        //var ch : number /*uint*/;\n        var name = \"\";\n        var prevClip = null;\n        this._byteData.position = this._offsetFrames;\n        for (i = 0; i < this._numFrames; i++) {\n            tvertices = new Array();\n            fvertices = new Array(vertLen * 3);\n            sx = this._byteData.readFloat();\n            sy = this._byteData.readFloat();\n            sz = this._byteData.readFloat();\n            tx = this._byteData.readFloat();\n            ty = this._byteData.readFloat();\n            tz = this._byteData.readFloat();\n            name = this.readFrameName();\n            // Note, the extra data.position++ in the for loop is there\n            // to skip over a byte that holds the \"vertex normal index\"\n            for (j = 0; j < this._numVertices; j++, this._byteData.position++)\n                tvertices.push(sx * this._byteData.readUnsignedByte() + tx, sy * this._byteData.readUnsignedByte() + ty, sz * this._byteData.readUnsignedByte() + tz);\n            k = 0;\n            for (j = 0; j < vertLen; j++) {\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3];\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 2];\n                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 1];\n            }\n            elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n            if (this._firstElements == null)\n                this._firstElements = elements;\n            graphics = new Graphics_1.default();\n            graphics.addGraphic(elements);\n            elements.setIndices(this._indices);\n            elements.setPositions(fvertices);\n            elements.setUVs(this._finalUV);\n            // cause explicit updates\n            elements.setNormals(null);\n            elements.setTangents(null);\n            // turn auto updates off because they may be animated and set explicitly\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            var clip = this._clipNodes[name];\n            if (!clip) {\n                // If another sequence was parsed before this one, starting\n                // a new state means the previous one is complete and can\n                // hence be finalized.\n                if (prevClip) {\n                    this._pFinalizeAsset(prevClip);\n                    this._animationSet.addAnimation(prevClip);\n                }\n                clip = new VertexClipNode_1.default();\n                clip.name = name;\n                clip.stitchFinalFrame = true;\n                this._clipNodes[name] = clip;\n                prevClip = clip;\n            }\n            clip.addFrame(graphics, 1000 / MD2Parser.FPS);\n        }\n        // Finalize the last state\n        if (prevClip) {\n            this._pFinalizeAsset(prevClip);\n            this._animationSet.addAnimation(prevClip);\n        }\n        // Force this._pFinalizeAsset() to decide name\n        this._pFinalizeAsset(this._animationSet);\n        this._parsedFrames = true;\n    };\n    MD2Parser.prototype.readFrameName = function () {\n        var name = \"\";\n        var k = 0;\n        for (var j = 0; j < 16; j++) {\n            var ch = this._byteData.readUnsignedByte();\n            if (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n                name += String.fromCharCode(ch);\n            if (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n                k++;\n        }\n        return name;\n    };\n    MD2Parser.FPS = 6;\n    return MD2Parser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MD2Parser;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/Graphics\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-renderergl/lib/animators/VertexAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":undefined}],\"awayjs-parsers/lib/MD5AnimParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar JointPose_1 = require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nvar SkeletonClipNode_1 = require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nvar MD5AnimParser = (function (_super) {\n    __extends(MD5AnimParser, _super);\n    /**\n     * Creates a new MD5AnimParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function MD5AnimParser(additionalRotationAxis, additionalRotationRadians) {\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\n        _super.call(this, URLLoaderDataFormat_1.default.TEXT);\n        this._parseIndex = 0;\n        this._line = 0;\n        this._charLineIndex = 0;\n        this._rotationQuat = new Quaternion_1.default();\n        var t1 = new Quaternion_1.default();\n        var t2 = new Quaternion_1.default();\n        t1.fromAxisAngle(Vector3D_1.default.X_AXIS, -Math.PI * .5);\n        t2.fromAxisAngle(Vector3D_1.default.Y_AXIS, -Math.PI * .5);\n        this._rotationQuat.multiply(t2, t1);\n        if (additionalRotationAxis) {\n            this._rotationQuat.multiply(t2, t1);\n            t1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n            this._rotationQuat.multiply(t1, this._rotationQuat);\n        }\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD5AnimParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md5anim\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD5AnimParser.supportsData = function (data) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD5AnimParser.prototype._pProceedParsing = function () {\n        var token;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            this._startedParsing = true;\n        }\n        while (this._pHasTime()) {\n            token = this.getNextToken();\n            switch (token) {\n                case MD5AnimParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case \"\":\n                    // can occur at the end of a file\n                    break;\n                case MD5AnimParser.VERSION_TOKEN:\n                    this._version = this.getNextInt();\n                    if (this._version != 10)\n                        throw new Error(\"Unknown version number encountered!\");\n                    break;\n                case MD5AnimParser.COMMAND_LINE_TOKEN:\n                    this.parseCMD();\n                    break;\n                case MD5AnimParser.NUM_FRAMES_TOKEN:\n                    this._numFrames = this.getNextInt();\n                    this._bounds = new Array();\n                    this._frameData = new Array();\n                    break;\n                case MD5AnimParser.NUM_JOINTS_TOKEN:\n                    this._numJoints = this.getNextInt();\n                    this._hierarchy = new Array(this._numJoints);\n                    this._baseFrameData = new Array(this._numJoints);\n                    break;\n                case MD5AnimParser.FRAME_RATE_TOKEN:\n                    this._frameRate = this.getNextInt();\n                    break;\n                case MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n                    this._numAnimatedComponents = this.getNextInt();\n                    break;\n                case MD5AnimParser.HIERARCHY_TOKEN:\n                    this.parseHierarchy();\n                    break;\n                case MD5AnimParser.BOUNDS_TOKEN:\n                    this.parseBounds();\n                    break;\n                case MD5AnimParser.BASE_FRAME_TOKEN:\n                    this.parseBaseFrame();\n                    break;\n                case MD5AnimParser.FRAME_TOKEN:\n                    this.parseFrame();\n                    break;\n                default:\n                    if (!this._reachedEOF)\n                        this.sendUnknownKeywordError();\n            }\n            if (this._reachedEOF) {\n                this._clip = new SkeletonClipNode_1.default();\n                this.translateClip();\n                this._pFinalizeAsset(this._clip);\n                return ParserBase_1.default.PARSING_DONE;\n            }\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    /**\n     * Converts all key frame data to an SkinnedAnimationSequence.\n     */\n    MD5AnimParser.prototype.translateClip = function () {\n        for (var i = 0; i < this._numFrames; ++i)\n            this._clip.addFrame(this.translatePose(this._frameData[i]), 1000 / this._frameRate);\n    };\n    /**\n     * Converts a single key frame data to a SkeletonPose.\n     * @param frameData The actual frame data.\n     * @return A SkeletonPose containing the frame data's pose.\n     */\n    MD5AnimParser.prototype.translatePose = function (frameData) {\n        var hierarchy;\n        var pose;\n        var base;\n        var flags;\n        var j;\n        var translate = new Vector3D_1.default();\n        var orientation = new Quaternion_1.default();\n        var components = frameData.components;\n        var skelPose = new SkeletonPose_1.default();\n        var jointPoses = skelPose.jointPoses;\n        for (var i = 0; i < this._numJoints; ++i) {\n            j = 0;\n            pose = new JointPose_1.default();\n            hierarchy = this._hierarchy[i];\n            base = this._baseFrameData[i];\n            flags = hierarchy.flags;\n            translate.x = base.position.x;\n            translate.y = base.position.y;\n            translate.z = base.position.z;\n            orientation.x = base.orientation.x;\n            orientation.y = base.orientation.y;\n            orientation.z = base.orientation.z;\n            if (flags & 1)\n                translate.x = components[hierarchy.startIndex + (j++)];\n            if (flags & 2)\n                translate.y = components[hierarchy.startIndex + (j++)];\n            if (flags & 4)\n                translate.z = components[hierarchy.startIndex + (j++)];\n            if (flags & 8)\n                orientation.x = components[hierarchy.startIndex + (j++)];\n            if (flags & 16)\n                orientation.y = components[hierarchy.startIndex + (j++)];\n            if (flags & 32)\n                orientation.z = components[hierarchy.startIndex + (j++)];\n            var w = 1 - orientation.x * orientation.x - orientation.y * orientation.y - orientation.z * orientation.z;\n            orientation.w = w < 0 ? 0 : -Math.sqrt(w);\n            if (hierarchy.parentIndex < 0) {\n                pose.orientation.multiply(this._rotationQuat, orientation);\n                pose.translation = this._rotationQuat.rotatePoint(translate);\n            }\n            else {\n                pose.orientation.copyFrom(orientation);\n                pose.translation.x = translate.x;\n                pose.translation.y = translate.y;\n                pose.translation.z = translate.z;\n            }\n            pose.orientation.y = -pose.orientation.y;\n            pose.orientation.z = -pose.orientation.z;\n            pose.translation.x = -pose.translation.x;\n            jointPoses[i] = pose;\n        }\n        return skelPose;\n    };\n    /**\n     * Parses the skeleton's hierarchy data.\n     */\n    MD5AnimParser.prototype.parseHierarchy = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new HierarchyData();\n            data.name = this.parseLiteralstring();\n            data.parentIndex = this.getNextInt();\n            data.flags = this.getNextInt();\n            data.startIndex = this.getNextInt();\n            this._hierarchy[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses frame bounds.\n     */\n    MD5AnimParser.prototype.parseBounds = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new BoundsData();\n            data.min = this.parseVector3D();\n            data.max = this.parseVector3D();\n            this._bounds[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses the base frame.\n     */\n    MD5AnimParser.prototype.parseBaseFrame = function () {\n        var ch;\n        var data;\n        var token = this.getNextToken();\n        var i = 0;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new BaseFrameData();\n            data.position = this.parseVector3D();\n            data.orientation = this.parseQuaternion();\n            this._baseFrameData[i++] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Parses a single frame.\n     */\n    MD5AnimParser.prototype.parseFrame = function () {\n        var ch;\n        var data;\n        var token;\n        var frameIndex;\n        frameIndex = this.getNextInt();\n        token = this.getNextToken();\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            data = new FrameData();\n            data.components = new Array(this._numAnimatedComponents);\n            for (var i = 0; i < this._numAnimatedComponents; ++i)\n                data.components[i] = this.getNextNumber();\n            this._frameData[frameIndex] = data;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5AnimParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Puts back the last read character into the data stream.\n     */\n    MD5AnimParser.prototype.putBack = function () {\n        this._parseIndex--;\n        this._charLineIndex--;\n        this._reachedEOF = this._parseIndex >= this._textData.length;\n    };\n    /**\n     * Gets the next token in the data stream.\n     */\n    MD5AnimParser.prototype.getNextToken = function () {\n        var ch;\n        var token = \"\";\n        while (!this._reachedEOF) {\n            ch = this.getNextChar();\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n                if (token != MD5AnimParser.COMMENT_TOKEN)\n                    this.skipWhiteSpace();\n                if (token != \"\")\n                    return token;\n            }\n            else\n                token += ch;\n            if (token == MD5AnimParser.COMMENT_TOKEN)\n                return token;\n        }\n        return token;\n    };\n    /**\n     * Skips all whitespace in the data stream.\n     */\n    MD5AnimParser.prototype.skipWhiteSpace = function () {\n        var ch;\n        do\n            ch = this.getNextChar();\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n        this.putBack();\n    };\n    /**\n     * Skips to the next line.\n     */\n    MD5AnimParser.prototype.ignoreLine = function () {\n        var ch;\n        while (!this._reachedEOF && ch != \"\\n\")\n            ch = this.getNextChar();\n    };\n    /**\n     * Retrieves the next single character in the data stream.\n     */\n    MD5AnimParser.prototype.getNextChar = function () {\n        var ch = this._textData.charAt(this._parseIndex++);\n        if (ch == \"\\n\") {\n            ++this._line;\n            this._charLineIndex = 0;\n        }\n        else if (ch != \"\\r\")\n            ++this._charLineIndex;\n        if (this._parseIndex == this._textData.length)\n            this._reachedEOF = true;\n        return ch;\n    };\n    /**\n     * Retrieves the next integer in the data stream.\n     */\n    MD5AnimParser.prototype.getNextInt = function () {\n        var i = parseInt(this.getNextToken());\n        if (isNaN(i))\n            this.sendParseError(\"int type\");\n        return i;\n    };\n    /**\n     * Retrieves the next floating point number in the data stream.\n     */\n    MD5AnimParser.prototype.getNextNumber = function () {\n        var f = parseFloat(this.getNextToken());\n        if (isNaN(f))\n            this.sendParseError(\"float type\");\n        return f;\n    };\n    /**\n     * Retrieves the next 3d vector in the data stream.\n     */\n    MD5AnimParser.prototype.parseVector3D = function () {\n        var vec = new Vector3D_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        vec.x = this.getNextNumber();\n        vec.y = this.getNextNumber();\n        vec.z = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return vec;\n    };\n    /**\n     * Retrieves the next quaternion in the data stream.\n     */\n    MD5AnimParser.prototype.parseQuaternion = function () {\n        var quat = new Quaternion_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        quat.x = this.getNextNumber();\n        quat.y = this.getNextNumber();\n        quat.z = this.getNextNumber();\n        // quat supposed to be unit length\n        var t = 1 - (quat.x * quat.x) - (quat.y * quat.y) - (quat.z * quat.z);\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return quat;\n    };\n    /**\n     * Parses the command line data.\n     */\n    MD5AnimParser.prototype.parseCMD = function () {\n        // just ignore the command line property\n        this.parseLiteralstring();\n    };\n    /**\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n     * by double quotes.\n     */\n    MD5AnimParser.prototype.parseLiteralstring = function () {\n        this.skipWhiteSpace();\n        var ch = this.getNextChar();\n        var str = \"\";\n        if (ch != \"\\\"\")\n            this.sendParseError(\"\\\"\");\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            ch = this.getNextChar();\n            if (ch != \"\\\"\")\n                str += ch;\n        } while (ch != \"\\\"\");\n        return str;\n    };\n    /**\n     * Throws an end-of-file error when a premature end of file was encountered.\n     */\n    MD5AnimParser.prototype.sendEOFError = function () {\n        throw new Error(\"Unexpected end of file\");\n    };\n    /**\n     * Throws an error when an unexpected token was encountered.\n     * @param expected The token type that was actually expected.\n     */\n    MD5AnimParser.prototype.sendParseError = function (expected) {\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n    };\n    /**\n     * Throws an error when an unknown keyword was encountered.\n     */\n    MD5AnimParser.prototype.sendUnknownKeywordError = function () {\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n    };\n    MD5AnimParser.VERSION_TOKEN = \"MD5Version\";\n    MD5AnimParser.COMMAND_LINE_TOKEN = \"commandline\";\n    MD5AnimParser.NUM_FRAMES_TOKEN = \"numFrames\";\n    MD5AnimParser.NUM_JOINTS_TOKEN = \"numJoints\";\n    MD5AnimParser.FRAME_RATE_TOKEN = \"frameRate\";\n    MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN = \"numAnimatedComponents\";\n    MD5AnimParser.HIERARCHY_TOKEN = \"hierarchy\";\n    MD5AnimParser.BOUNDS_TOKEN = \"bounds\";\n    MD5AnimParser.BASE_FRAME_TOKEN = \"baseframe\";\n    MD5AnimParser.FRAME_TOKEN = \"frame\";\n    MD5AnimParser.COMMENT_TOKEN = \"//\";\n    return MD5AnimParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MD5AnimParser;\n/**\n *\n */\nvar BaseFrameData = (function () {\n    function BaseFrameData() {\n    }\n    return BaseFrameData;\n}());\n/**\n *\n */\nvar BoundsData = (function () {\n    function BoundsData() {\n    }\n    return BoundsData;\n}());\n/**\n *\n */\nvar FrameData = (function () {\n    function FrameData() {\n    }\n    return FrameData;\n}());\n/**\n *\n */\nvar HierarchyData = (function () {\n    function HierarchyData() {\n    }\n    return HierarchyData;\n}());\n\n},{\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-renderergl/lib/animators/data/JointPose\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonPose\":undefined,\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":undefined}],\"awayjs-parsers/lib/MD5MeshParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar SkeletonAnimationSet_1 = require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nvar Skeleton_1 = require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nvar SkeletonJoint_1 = require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n// todo: create animation system, parse skeleton\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nvar MD5MeshParser = (function (_super) {\n    __extends(MD5MeshParser, _super);\n    /**\n     * Creates a new MD5MeshParser object.\n     */\n    function MD5MeshParser(additionalRotationAxis, additionalRotationRadians) {\n        if (additionalRotationAxis === void 0) { additionalRotationAxis = null; }\n        if (additionalRotationRadians === void 0) { additionalRotationRadians = 0; }\n        _super.call(this, URLLoaderDataFormat_1.default.TEXT);\n        this._parseIndex = 0;\n        this._line = 0;\n        this._charLineIndex = 0;\n        this._rotationQuat = new Quaternion_1.default();\n        this._rotationQuat.fromAxisAngle(Vector3D_1.default.X_AXIS, -Math.PI * .5);\n        if (additionalRotationAxis) {\n            var quat = new Quaternion_1.default();\n            quat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n            this._rotationQuat.multiply(this._rotationQuat, quat);\n        }\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    MD5MeshParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"md5sprite\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    MD5MeshParser.supportsData = function (data) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    MD5MeshParser.prototype._pProceedParsing = function () {\n        var token;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            this._startedParsing = true;\n        }\n        while (this._pHasTime()) {\n            token = this.getNextToken();\n            switch (token) {\n                case MD5MeshParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case MD5MeshParser.VERSION_TOKEN:\n                    this._version = this.getNextInt();\n                    if (this._version != 10)\n                        throw new Error(\"Unknown version number encountered!\");\n                    break;\n                case MD5MeshParser.COMMAND_LINE_TOKEN:\n                    this.parseCMD();\n                    break;\n                case MD5MeshParser.NUM_JOINTS_TOKEN:\n                    this._numJoints = this.getNextInt();\n                    this._bindPoses = new Array(this._numJoints);\n                    break;\n                case MD5MeshParser.NUM_MESHES_TOKEN:\n                    this._numMeshes = this.getNextInt();\n                    break;\n                case MD5MeshParser.JOINTS_TOKEN:\n                    this.parseJoints();\n                    break;\n                case MD5MeshParser.MESH_TOKEN:\n                    this.parseMesh();\n                    break;\n                default:\n                    if (!this._reachedEOF)\n                        this.sendUnknownKeywordError();\n            }\n            if (this._reachedEOF) {\n                this.calculateMaxJointCount();\n                this._animationSet = new SkeletonAnimationSet_1.default(this._maxJointCount);\n                this._sprite = new Sprite_1.default();\n                this._graphics = this._sprite.graphics;\n                for (var i = 0; i < this._elementsData.length; ++i)\n                    this._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\n                //_graphics.animation = _animation;\n                //\t\t\t\t\t_sprite.animationController = _animationController;\n                //add to the content property\n                this._pContent.addChild(this._sprite);\n                this._pFinalizeAsset(this._graphics);\n                this._pFinalizeAsset(this._sprite);\n                this._pFinalizeAsset(this._skeleton);\n                this._pFinalizeAsset(this._animationSet);\n                return ParserBase_1.default.PARSING_DONE;\n            }\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    MD5MeshParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    MD5MeshParser.prototype.calculateMaxJointCount = function () {\n        this._maxJointCount = 0;\n        var numElementsData = this._elementsData.length;\n        for (var i = 0; i < numElementsData; ++i) {\n            var elementsData = this._elementsData[i];\n            var positionData = elementsData.positionData;\n            var numVerts = positionData.length;\n            for (var j = 0; j < numVerts; ++j) {\n                var zeroWeights = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\n                var totalJoints = positionData[j].countWeight - zeroWeights;\n                if (totalJoints > this._maxJointCount)\n                    this._maxJointCount = totalJoints;\n            }\n        }\n    };\n    MD5MeshParser.prototype.countZeroWeightJoints = function (position, weights) {\n        var start = position.startWeight;\n        var end = position.startWeight + position.countWeight;\n        var count = 0;\n        var weight;\n        for (var i = start; i < end; ++i) {\n            weight = weights[i].bias;\n            if (weight == 0)\n                ++count;\n        }\n        return count;\n    };\n    /**\n     * Parses the skeleton's joints.\n     */\n    MD5MeshParser.prototype.parseJoints = function () {\n        var ch;\n        var joint;\n        var pos;\n        var quat;\n        var i = 0;\n        var token = this.getNextToken();\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        this._skeleton = new Skeleton_1.default();\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            joint = new SkeletonJoint_1.default();\n            joint.name = this.parseLiteralstring();\n            joint.parentIndex = this.getNextInt();\n            pos = this.parseVector3D();\n            pos = this._rotationQuat.rotatePoint(pos);\n            quat = this.parseQuaternion();\n            // todo: check if this is correct, or maybe we want to actually store it as quats?\n            this._bindPoses[i] = quat.toMatrix3D();\n            this._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n            var inv = this._bindPoses[i].clone();\n            inv.invert();\n            joint.inverseBindPose = inv.rawData;\n            this._skeleton.joints[i++] = joint;\n            ch = this.getNextChar();\n            if (ch == \"/\") {\n                this.putBack();\n                ch = this.getNextToken();\n                if (ch == MD5MeshParser.COMMENT_TOKEN)\n                    this.ignoreLine();\n                ch = this.getNextChar();\n            }\n            if (ch != \"}\")\n                this.putBack();\n        } while (ch != \"}\");\n    };\n    /**\n     * Puts back the last read character into the data stream.\n     */\n    MD5MeshParser.prototype.putBack = function () {\n        this._parseIndex--;\n        this._charLineIndex--;\n        this._reachedEOF = this._parseIndex >= this._textData.length;\n    };\n    /**\n     * Parses the mesh graphics.\n     */\n    MD5MeshParser.prototype.parseMesh = function () {\n        var token = this.getNextToken();\n        var ch;\n        var positionData;\n        var weights;\n        var indices;\n        if (token != \"{\")\n            this.sendUnknownKeywordError();\n        if (this._shaders == null)\n            this._shaders = new Array();\n        while (ch != \"}\") {\n            ch = this.getNextToken();\n            switch (ch) {\n                case MD5MeshParser.COMMENT_TOKEN:\n                    this.ignoreLine();\n                    break;\n                case MD5MeshParser.MESH_SHADER_TOKEN:\n                    this._shaders.push(this.parseLiteralstring());\n                    break;\n                case MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n                    positionData = new Array(this.getNextInt());\n                    break;\n                case MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n                    indices = new Array(this.getNextInt() * 3) /*uint*/;\n                    break;\n                case MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n                    weights = new Array(this.getNextInt());\n                    break;\n                case MD5MeshParser.MESH_VERT_TOKEN:\n                    this.parseVertex(positionData);\n                    break;\n                case MD5MeshParser.MESH_TRI_TOKEN:\n                    this.parseTri(indices);\n                    break;\n                case MD5MeshParser.MESH_WEIGHT_TOKEN:\n                    this.parseJoint(weights);\n                    break;\n            }\n        }\n        if (this._elementsData == null)\n            this._elementsData = new Array();\n        var i = this._elementsData.length;\n        this._elementsData[i] = new ElementsData();\n        this._elementsData[i].positionData = positionData;\n        this._elementsData[i].weightData = weights;\n        this._elementsData[i].indices = indices;\n    };\n    /**\n     * Converts the sprite data to a SkinnedSub instance.\n     * @param positionData The sprite's positions.\n     * @param weights The joint weights per position.\n     * @param indices The indices for the faces.\n     * @return A TriangleElements instance containing all elements data for the current sprite.\n     */\n    MD5MeshParser.prototype.translateElements = function (positionData, weights, indices /*uint*/) {\n        var len = positionData.length;\n        var v1 /*int*/, v2 /*int*/, v3;\n        var position;\n        var weight;\n        var bindPose;\n        var pos;\n        var elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n        var uvs = new Array(len * 2);\n        var positions = new Array(len * 3);\n        var jointIndices = new Array(len * this._maxJointCount);\n        var jointWeights = new Array(len * this._maxJointCount);\n        var l = 0;\n        var nonZeroWeights;\n        for (var i = 0; i < len; ++i) {\n            position = positionData[i];\n            v1 = position.index * 3;\n            v2 = v1 + 1;\n            v3 = v1 + 2;\n            positions[v1] = positions[v2] = positions[v3] = 0;\n            nonZeroWeights = 0;\n            for (var j = 0; j < position.countWeight; ++j) {\n                weight = weights[position.startWeight + j];\n                if (weight.bias > 0) {\n                    bindPose = this._bindPoses[weight.joint];\n                    pos = bindPose.transformVector(weight.pos);\n                    positions[v1] += pos.x * weight.bias;\n                    positions[v2] += pos.y * weight.bias;\n                    positions[v3] += pos.z * weight.bias;\n                    // indices need to be multiplied by 3 (amount of matrix registers)\n                    jointIndices[l] = weight.joint * 3;\n                    jointWeights[l++] = weight.bias;\n                    ++nonZeroWeights;\n                }\n            }\n            for (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n                jointIndices[l] = 0;\n                jointWeights[l++] = 0;\n            }\n            v1 = position.index << 1;\n            uvs[v1++] = position.s;\n            uvs[v1] = position.t;\n        }\n        elements.jointsPerVertex = this._maxJointCount;\n        elements.setIndices(indices);\n        elements.setPositions(positions);\n        elements.setUVs(uvs);\n        elements.setJointIndices(jointIndices);\n        elements.setJointWeights(jointWeights);\n        // cause explicit updates\n        elements.setNormals(null);\n        elements.setTangents(null);\n        // turn auto updates off because they may be animated and set explicitly\n        elements.autoDeriveTangents = false;\n        elements.autoDeriveNormals = false;\n        return elements;\n    };\n    /**\n     * Retrieve the next triplet of position indices that form a face.\n     * @param indices The index list in which to store the read data.\n     */\n    MD5MeshParser.prototype.parseTri = function (indices /*uint*/) {\n        var index = this.getNextInt() * 3;\n        indices[index] = this.getNextInt();\n        indices[index + 1] = this.getNextInt();\n        indices[index + 2] = this.getNextInt();\n    };\n    /**\n     * Reads a new joint data set for a single joint.\n     * @param weights the target list to contain the weight data.\n     */\n    MD5MeshParser.prototype.parseJoint = function (weights) {\n        var weight = new JointData();\n        weight.index = this.getNextInt();\n        weight.joint = this.getNextInt();\n        weight.bias = this.getNextNumber();\n        weight.pos = this.parseVector3D();\n        weights[weight.index] = weight;\n    };\n    /**\n     * Reads the data for a single position.\n     * @param positionData The list to contain the position data.\n     */\n    MD5MeshParser.prototype.parseVertex = function (positionData) {\n        var position = new PositionData();\n        position.index = this.getNextInt();\n        this.parseUV(position);\n        position.startWeight = this.getNextInt();\n        position.countWeight = this.getNextInt();\n        //\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\n        positionData[position.index] = position;\n    };\n    /**\n     * Reads the next uv coordinate.\n     * @param positionData The positionData to contain the UV coordinates.\n     */\n    MD5MeshParser.prototype.parseUV = function (positionData) {\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        positionData.s = this.getNextNumber();\n        positionData.t = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n    };\n    /**\n     * Gets the next token in the data stream.\n     */\n    MD5MeshParser.prototype.getNextToken = function () {\n        var ch;\n        var token = \"\";\n        while (!this._reachedEOF) {\n            ch = this.getNextChar();\n            if (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n                if (token != MD5MeshParser.COMMENT_TOKEN)\n                    this.skipWhiteSpace();\n                if (token != \"\")\n                    return token;\n            }\n            else\n                token += ch;\n            if (token == MD5MeshParser.COMMENT_TOKEN)\n                return token;\n        }\n        return token;\n    };\n    /**\n     * Skips all whitespace in the data stream.\n     */\n    MD5MeshParser.prototype.skipWhiteSpace = function () {\n        var ch;\n        do\n            ch = this.getNextChar();\n        while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n        this.putBack();\n    };\n    /**\n     * Skips to the next line.\n     */\n    MD5MeshParser.prototype.ignoreLine = function () {\n        var ch;\n        while (!this._reachedEOF && ch != \"\\n\")\n            ch = this.getNextChar();\n    };\n    /**\n     * Retrieves the next single character in the data stream.\n     */\n    MD5MeshParser.prototype.getNextChar = function () {\n        var ch = this._textData.charAt(this._parseIndex++);\n        if (ch == \"\\n\") {\n            ++this._line;\n            this._charLineIndex = 0;\n        }\n        else if (ch != \"\\r\")\n            ++this._charLineIndex;\n        if (this._parseIndex >= this._textData.length)\n            this._reachedEOF = true;\n        return ch;\n    };\n    /**\n     * Retrieves the next integer in the data stream.\n     */\n    MD5MeshParser.prototype.getNextInt = function () {\n        var i = parseInt(this.getNextToken());\n        if (isNaN(i))\n            this.sendParseError(\"int type\");\n        return i;\n    };\n    /**\n     * Retrieves the next floating point number in the data stream.\n     */\n    MD5MeshParser.prototype.getNextNumber = function () {\n        var f = parseFloat(this.getNextToken());\n        if (isNaN(f))\n            this.sendParseError(\"float type\");\n        return f;\n    };\n    /**\n     * Retrieves the next 3d vector in the data stream.\n     */\n    MD5MeshParser.prototype.parseVector3D = function () {\n        var vec = new Vector3D_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        vec.x = -this.getNextNumber();\n        vec.y = this.getNextNumber();\n        vec.z = this.getNextNumber();\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        return vec;\n    };\n    /**\n     * Retrieves the next quaternion in the data stream.\n     */\n    MD5MeshParser.prototype.parseQuaternion = function () {\n        var quat = new Quaternion_1.default();\n        var ch = this.getNextToken();\n        if (ch != \"(\")\n            this.sendParseError(\"(\");\n        quat.x = this.getNextNumber();\n        quat.y = -this.getNextNumber();\n        quat.z = -this.getNextNumber();\n        // quat supposed to be unit length\n        var t = 1 - quat.x * quat.x - quat.y * quat.y - quat.z * quat.z;\n        quat.w = t < 0 ? 0 : -Math.sqrt(t);\n        if (this.getNextToken() != \")\")\n            this.sendParseError(\")\");\n        var rotQuat = new Quaternion_1.default();\n        rotQuat.multiply(this._rotationQuat, quat);\n        return rotQuat;\n    };\n    /**\n     * Parses the command line data.\n     */\n    MD5MeshParser.prototype.parseCMD = function () {\n        // just ignore the command line property\n        this.parseLiteralstring();\n    };\n    /**\n     * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n     * by double quotes.\n     */\n    MD5MeshParser.prototype.parseLiteralstring = function () {\n        this.skipWhiteSpace();\n        var ch = this.getNextChar();\n        var str = \"\";\n        if (ch != \"\\\"\")\n            this.sendParseError(\"\\\"\");\n        do {\n            if (this._reachedEOF)\n                this.sendEOFError();\n            ch = this.getNextChar();\n            if (ch != \"\\\"\")\n                str += ch;\n        } while (ch != \"\\\"\");\n        return str;\n    };\n    /**\n     * Throws an end-of-file error when a premature end of file was encountered.\n     */\n    MD5MeshParser.prototype.sendEOFError = function () {\n        throw new Error(\"Unexpected end of file\");\n    };\n    /**\n     * Throws an error when an unexpected token was encountered.\n     * @param expected The token type that was actually expected.\n     */\n    MD5MeshParser.prototype.sendParseError = function (expected) {\n        throw new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n    };\n    /**\n     * Throws an error when an unknown keyword was encountered.\n     */\n    MD5MeshParser.prototype.sendUnknownKeywordError = function () {\n        throw new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n    };\n    MD5MeshParser.VERSION_TOKEN = \"MD5Version\";\n    MD5MeshParser.COMMAND_LINE_TOKEN = \"commandline\";\n    MD5MeshParser.NUM_JOINTS_TOKEN = \"numJoints\";\n    MD5MeshParser.NUM_MESHES_TOKEN = \"numMeshes\";\n    MD5MeshParser.COMMENT_TOKEN = \"//\";\n    MD5MeshParser.JOINTS_TOKEN = \"joints\";\n    MD5MeshParser.MESH_TOKEN = \"mesh\";\n    MD5MeshParser.MESH_SHADER_TOKEN = \"shader\";\n    MD5MeshParser.MESH_NUM_VERTS_TOKEN = \"numverts\";\n    MD5MeshParser.MESH_VERT_TOKEN = \"vert\";\n    MD5MeshParser.MESH_NUM_TRIS_TOKEN = \"numtris\";\n    MD5MeshParser.MESH_TRI_TOKEN = \"tri\";\n    MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN = \"numweights\";\n    MD5MeshParser.MESH_WEIGHT_TOKEN = \"weight\";\n    return MD5MeshParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = MD5MeshParser;\nvar PositionData = (function () {\n    function PositionData() {\n    }\n    return PositionData;\n}());\nvar JointData = (function () {\n    function JointData() {\n    }\n    return JointData;\n}());\nvar ElementsData = (function () {\n    function ElementsData() {\n    }\n    return ElementsData;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":undefined,\"awayjs-renderergl/lib/animators/data/Skeleton\":undefined,\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":undefined}],\"awayjs-parsers/lib/Max3DSParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nvar Max3DSParser = (function (_super) {\n    __extends(Max3DSParser, _super);\n    /**\n     * Creates a new <code>Max3DSParser</code> object.\n     *\n     * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n     */\n    function Max3DSParser(useSmoothingGroups) {\n        if (useSmoothingGroups === void 0) { useSmoothingGroups = true; }\n        _super.call(this, URLLoaderDataFormat_1.default.ARRAY_BUFFER);\n        this._useSmoothingGroups = useSmoothingGroups;\n    }\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    Max3DSParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"3ds\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    Max3DSParser.supportsData = function (data) {\n        var ba;\n        ba = ParserUtils_1.default.toByteArray(data);\n        if (ba) {\n            ba.position = 0;\n            if (ba.readShort() == 0x4d4d)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.assets.length == 1) {\n            var asset;\n            asset = resourceDependency.assets[0];\n            if (asset.isAsset(BitmapImage2D_1.default)) {\n                var tex;\n                tex = this._textures[resourceDependency.id];\n                tex.texture = new Single2DTexture_1.default(asset);\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        // TODO: Implement\n    };\n    /**\n     * @inheritDoc\n     */\n    Max3DSParser.prototype._pProceedParsing = function () {\n        if (!this._byteData) {\n            this._byteData = this._pGetByteData();\n            this._byteData.position = 0;\n            //----------------------------------------------------------------------------\n            // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n            //----------------------------------------------------------------------------\n            //this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n            //----------------------------------------------------------------------------\n            this._textures = {};\n            this._materials = {};\n            this._unfinalized_objects = {};\n        }\n        // TODO: With this construct, the loop will run no-op for as long\n        // as there is time once file has finished reading. Consider a nice\n        // way to stop loop when byte array is empty, without putting it in\n        // the while-conditional, which will prevent finalizations from\n        // happening after the last chunk.\n        while (this._pHasTime()) {\n            // If we are currently working on an object, and the most recent chunk was\n            // the last one in that object, finalize the current object.\n            if (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n                this.finalizeCurrentMaterial();\n            else if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n                // Can't finalize at this point, because we have to wait until the full\n                // animation section has been parsed for any potential pivot definitions\n                this._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n                this._cur_obj_end = Number.MAX_VALUE /*uint*/;\n                this._cur_obj = null;\n            }\n            if (this._byteData.getBytesAvailable() > 0) {\n                var cid;\n                var len;\n                var end;\n                cid = this._byteData.readUnsignedShort();\n                len = this._byteData.readUnsignedInt();\n                end = this._byteData.position + (len - 6);\n                switch (cid) {\n                    case 0x4D4D: // MAIN3DS\n                    case 0x3D3D: // EDIT3DS\n                    case 0xB000:\n                        // This types are \"container chunks\" and contain only\n                        // sub-chunks (no data on their own.) This means that\n                        // there is nothing more to parse at this point, and\n                        // instead we should progress to the next chunk, which\n                        // will be the first sub-chunk of this one.\n                        continue;\n                    case 0xAFFF:\n                        this._cur_mat_end = end;\n                        this._cur_mat = this.parseMaterial();\n                        break;\n                    case 0x4000:\n                        this._cur_obj_end = end;\n                        this._cur_obj = new ObjectVO();\n                        this._cur_obj.name = this.readNulTermstring();\n                        this._cur_obj.materials = new Array();\n                        this._cur_obj.materialFaces = {};\n                        break;\n                    case 0x4100:\n                        this._cur_obj.type = Sprite_1.default.assetType;\n                        break;\n                    case 0x4110:\n                        this.parseVertexList();\n                        break;\n                    case 0x4120:\n                        this.parseFaceList();\n                        break;\n                    case 0x4140:\n                        this.parseUVList();\n                        break;\n                    case 0x4130:\n                        this.parseFaceMaterialList();\n                        break;\n                    case 0x4160:\n                        this._cur_obj.transform = this.readTransform();\n                        break;\n                    case 0xB002:\n                        this.parseObjectAnimation(end);\n                        break;\n                    case 0x4150:\n                        this.parseSmoothingGroups();\n                        break;\n                    default:\n                        // Skip this (unknown) chunk\n                        this._byteData.position += (len - 6);\n                        break;\n                }\n                // Pause parsing if there were any dependencies found during this\n                // iteration (i.e. if there are any dependencies that need to be\n                // retrieved at this time.)\n                if (this.dependencies.length) {\n                    this._pPauseAndRetrieveDependencies();\n                    break;\n                }\n            }\n        }\n        // More parsing is required if the entire byte array has not yet\n        // been read, or if there is a currently non-finalized object in\n        // the pipeline.\n        if (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n            return ParserBase_1.default.MORE_TO_PARSE;\n        }\n        else {\n            var name;\n            // Finalize any remaining objects before ending.\n            for (name in this._unfinalized_objects) {\n                var obj;\n                obj = this.constructObject(this._unfinalized_objects[name]);\n                if (obj) {\n                    //add to the content property\n                    this._pContent.addChild(obj);\n                    this._pFinalizeAsset(obj, name);\n                }\n            }\n            return ParserBase_1.default.PARSING_DONE;\n        }\n    };\n    Max3DSParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    Max3DSParser.prototype.parseMaterial = function () {\n        var mat;\n        mat = new MaterialVO();\n        while (this._byteData.position < this._cur_mat_end) {\n            var cid;\n            var len;\n            var end;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            end = this._byteData.position + (len - 6);\n            switch (cid) {\n                case 0xA000:\n                    mat.name = this.readNulTermstring();\n                    break;\n                case 0xA010:\n                    mat.ambientColor = this.readColor();\n                    break;\n                case 0xA020:\n                    mat.diffuseColor = this.readColor();\n                    break;\n                case 0xA030:\n                    mat.specularColor = this.readColor();\n                    break;\n                case 0xA081:\n                    mat.twoSided = true;\n                    break;\n                case 0xA200:\n                    mat.colorMap = this.parseTexture(end);\n                    break;\n                case 0xA204:\n                    mat.specularMap = this.parseTexture(end);\n                    break;\n                default:\n                    this._byteData.position = end;\n                    break;\n            }\n        }\n        return mat;\n    };\n    Max3DSParser.prototype.parseTexture = function (end /*uint*/) {\n        var tex;\n        tex = new TextureVO();\n        while (this._byteData.position < end) {\n            var cid;\n            var len;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            switch (cid) {\n                case 0xA300:\n                    tex.url = this.readNulTermstring();\n                    break;\n                default:\n                    // Skip this unknown texture sub-chunk\n                    this._byteData.position += (len - 6);\n                    break;\n            }\n        }\n        this._textures[tex.url] = tex;\n        this._pAddDependency(tex.url, new URLRequest_1.default(tex.url));\n        return tex;\n    };\n    Max3DSParser.prototype.parseVertexList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.verts = new Array(count * 3);\n        i = 0;\n        len = this._cur_obj.verts.length;\n        while (i < len) {\n            var x, y, z;\n            x = this._byteData.readFloat();\n            y = this._byteData.readFloat();\n            z = this._byteData.readFloat();\n            this._cur_obj.verts[i++] = x;\n            this._cur_obj.verts[i++] = z;\n            this._cur_obj.verts[i++] = y;\n        }\n    };\n    Max3DSParser.prototype.parseFaceList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.indices = new Array(count * 3) /*uint*/;\n        i = 0;\n        len = this._cur_obj.indices.length;\n        while (i < len) {\n            var i0 /*uint*/, i1 /*uint*/, i2;\n            i0 = this._byteData.readUnsignedShort();\n            i1 = this._byteData.readUnsignedShort();\n            i2 = this._byteData.readUnsignedShort();\n            this._cur_obj.indices[i++] = i0;\n            this._cur_obj.indices[i++] = i2;\n            this._cur_obj.indices[i++] = i1;\n            // Skip \"face info\", irrelevant in Away3D\n            this._byteData.position += 2;\n        }\n        this._cur_obj.smoothingGroups = new Array(count) /*uint*/;\n    };\n    Max3DSParser.prototype.parseSmoothingGroups = function () {\n        var len = this._cur_obj.indices.length / 3;\n        var i = 0;\n        while (i < len) {\n            this._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n            i++;\n        }\n    };\n    Max3DSParser.prototype.parseUVList = function () {\n        var i;\n        var len;\n        var count;\n        count = this._byteData.readUnsignedShort();\n        this._cur_obj.uvs = new Array(count * 2);\n        i = 0;\n        len = this._cur_obj.uvs.length;\n        while (i < len) {\n            this._cur_obj.uvs[i++] = this._byteData.readFloat();\n            this._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n        }\n    };\n    Max3DSParser.prototype.parseFaceMaterialList = function () {\n        var mat;\n        var count;\n        var i;\n        var faces;\n        mat = this.readNulTermstring();\n        count = this._byteData.readUnsignedShort();\n        faces = new Array(count) /*uint*/;\n        i = 0;\n        while (i < faces.length)\n            faces[i++] = this._byteData.readUnsignedShort();\n        this._cur_obj.materials.push(mat);\n        this._cur_obj.materialFaces[mat] = faces;\n    };\n    Max3DSParser.prototype.parseObjectAnimation = function (end) {\n        var vo;\n        var obj;\n        var pivot;\n        var name;\n        var hier;\n        // Pivot defaults to origin\n        pivot = new Vector3D_1.default;\n        while (this._byteData.position < end) {\n            var cid;\n            var len;\n            cid = this._byteData.readUnsignedShort();\n            len = this._byteData.readUnsignedInt();\n            switch (cid) {\n                case 0xb010:\n                    name = this.readNulTermstring();\n                    this._byteData.position += 4;\n                    hier = this._byteData.readShort();\n                    break;\n                case 0xb013:\n                    pivot.x = this._byteData.readFloat();\n                    pivot.z = this._byteData.readFloat();\n                    pivot.y = this._byteData.readFloat();\n                    break;\n                default:\n                    this._byteData.position += (len - 6);\n                    break;\n            }\n        }\n        // If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n        // and will be ignored in this version of the parser\n        // TODO: Implement containers in 3DS parser.\n        if (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n            vo = this._unfinalized_objects[name];\n            obj = this.constructObject(vo, pivot);\n            if (obj) {\n                //add to the content property\n                this._pContent.addChild(obj);\n                this._pFinalizeAsset(obj, vo.name);\n            }\n            delete this._unfinalized_objects[name];\n        }\n    };\n    Max3DSParser.prototype.constructObject = function (obj, pivot) {\n        if (pivot === void 0) { pivot = null; }\n        if (obj.type == Sprite_1.default.assetType) {\n            var i;\n            var sub;\n            var graphics;\n            var mat;\n            var sprite;\n            var mtx;\n            var vertices;\n            var faces;\n            if (obj.materials.length > 1)\n                console.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\n            // Ignore empty objects\n            if (!obj.indices || obj.indices.length == 0)\n                return null;\n            vertices = new Array(obj.verts.length / 3);\n            faces = new Array(obj.indices.length / 3);\n            this.prepareData(vertices, faces, obj);\n            if (this._useSmoothingGroups)\n                this.applySmoothGroups(vertices, faces);\n            obj.verts = new Array(vertices.length * 3);\n            for (i = 0; i < vertices.length; i++) {\n                obj.verts[i * 3] = vertices[i].x;\n                obj.verts[i * 3 + 1] = vertices[i].y;\n                obj.verts[i * 3 + 2] = vertices[i].z;\n            }\n            obj.indices = new Array(faces.length * 3) /*uint*/;\n            for (i = 0; i < faces.length; i++) {\n                obj.indices[i * 3] = faces[i].a;\n                obj.indices[i * 3 + 1] = faces[i].b;\n                obj.indices[i * 3 + 2] = faces[i].c;\n            }\n            if (obj.uvs) {\n                // If the object had UVs to start with, use UVs generated by\n                // smoothing group splitting algorithm. Otherwise those UVs\n                // will be nonsense and should be skipped.\n                obj.uvs = new Array(vertices.length * 2);\n                for (i = 0; i < vertices.length; i++) {\n                    obj.uvs[i * 2] = vertices[i].u;\n                    obj.uvs[i * 2 + 1] = vertices[i].v;\n                }\n            }\n            if (obj.materials.length > 0) {\n                var mname;\n                mname = obj.materials[0];\n                mat = this._materials[mname].material;\n            }\n            // Build sprite and return it\n            sprite = new Sprite_1.default(mat);\n            sprite.transform.matrix3D = new Matrix3D_1.default(obj.transform);\n            graphics = sprite.graphics;\n            // Construct elements (potentially splitting buffers)\n            // and add them to graphics.\n            sub = new TriangleElements_1.default(new AttributesBuffer_1.default());\n            sub.setIndices(obj.indices);\n            sub.setPositions(obj.verts);\n            sub.setUVs(obj.uvs);\n            graphics.addGraphic(sub);\n            // Apply pivot translation to graphics if a pivot was\n            // found while parsing the keyframe chunk earlier.\n            if (pivot) {\n                if (obj.transform) {\n                    // If a transform was found while parsing the\n                    // object chunk, use it to find the local pivot vector\n                    mtx = new Matrix3D_1.default(obj.transform);\n                    mtx.rawData[12] = 0;\n                    mtx.rawData[13] = 0;\n                    mtx.rawData[14] = 0;\n                    pivot = mtx.transformVector(pivot);\n                }\n                pivot.scaleBy(-1);\n                mtx = new Matrix3D_1.default();\n                mtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n                graphics.applyTransformation(mtx);\n            }\n            // Apply transformation to graphics if a transformation\n            // was found while parsing the object chunk earlier.\n            if (obj.transform) {\n                mtx = new Matrix3D_1.default(obj.transform);\n                mtx.invert();\n                graphics.applyTransformation(mtx);\n            }\n            // Final transform applied to graphics. Finalize the graphics,\n            // which will no longer be modified after this point.\n            this._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n            return sprite;\n        }\n        // If reached, unknown\n        return null;\n    };\n    Max3DSParser.prototype.prepareData = function (vertices, faces, obj) {\n        // convert raw ObjectVO's data to structured VertexVO and FaceVO\n        var i;\n        var j;\n        var k;\n        var len = obj.verts.length;\n        for (i = 0, j = 0, k = 0; i < len;) {\n            var v = new VertexVO;\n            v.x = obj.verts[i++];\n            v.y = obj.verts[i++];\n            v.z = obj.verts[i++];\n            if (obj.uvs) {\n                v.u = obj.uvs[j++];\n                v.v = obj.uvs[j++];\n            }\n            vertices[k++] = v;\n        }\n        len = obj.indices.length;\n        for (i = 0, k = 0; i < len;) {\n            var f = new FaceVO();\n            f.a = obj.indices[i++];\n            f.b = obj.indices[i++];\n            f.c = obj.indices[i++];\n            f.smoothGroup = obj.smoothingGroups[k] || 0;\n            faces[k++] = f;\n        }\n    };\n    Max3DSParser.prototype.applySmoothGroups = function (vertices, faces) {\n        // clone vertices according to following rule:\n        // clone if vertex's in faces from groups 1+2 and 3\n        // don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n        var i;\n        var j;\n        var k;\n        var l;\n        var len;\n        var numVerts = vertices.length;\n        var numFaces = faces.length;\n        // extract groups data for vertices\n        var vGroups = new Array(numVerts);\n        for (i = 0; i < numVerts; i++)\n            vGroups[i] = new Array() /*uint*/;\n        for (i = 0; i < numFaces; i++) {\n            var face = faces[i];\n            for (j = 0; j < 3; j++) {\n                var groups = vGroups[(j == 0) ? face.a : ((j == 1) ? face.b : face.c)];\n                var group = face.smoothGroup;\n                for (k = groups.length - 1; k >= 0; k--) {\n                    if ((group & groups[k]) > 0) {\n                        group |= groups[k];\n                        groups.splice(k, 1);\n                        k = groups.length - 1;\n                    }\n                }\n                groups.push(group);\n            }\n        }\n        // clone vertices\n        var vClones = new Array(numVerts);\n        for (i = 0; i < numVerts; i++) {\n            if ((len = vGroups[i].length) < 1)\n                continue;\n            var clones = new Array(len);\n            vClones[i] = clones;\n            clones[0] = i;\n            var v0 = vertices[i];\n            for (j = 1; j < len; j++) {\n                var v1 = new VertexVO;\n                v1.x = v0.x;\n                v1.y = v0.y;\n                v1.z = v0.z;\n                v1.u = v0.u;\n                v1.v = v0.v;\n                clones[j] = vertices.length;\n                vertices.push(v1);\n            }\n        }\n        numVerts = vertices.length;\n        for (i = 0; i < numFaces; i++) {\n            face = faces[i];\n            group = face.smoothGroup;\n            for (j = 0; j < 3; j++) {\n                k = (j == 0) ? face.a : ((j == 1) ? face.b : face.c);\n                groups = vGroups[k];\n                len = groups.length;\n                clones = vClones[k];\n                for (l = 0; l < len; l++) {\n                    if (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n                        var index = clones[l];\n                        if (group == 0) {\n                            // vertex is unique if no smoothGroup found\n                            groups.splice(l, 1);\n                            clones.splice(l, 1);\n                        }\n                        if (j == 0)\n                            face.a = index;\n                        else if (j == 1)\n                            face.b = index;\n                        else\n                            face.c = index;\n                        l = len;\n                    }\n                }\n            }\n        }\n    };\n    Max3DSParser.prototype.finalizeCurrentMaterial = function () {\n        var mat;\n        mat = new MethodMaterial_1.default(this._cur_mat.ambientColor);\n        if (this._cur_mat.colorMap)\n            mat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager_1.default.getDefaultTexture();\n        mat.diffuseMethod.color = this._cur_mat.diffuseColor;\n        mat.specularMethod.color = this._cur_mat.specularColor;\n        if (this.materialMode >= 2)\n            mat.mode = MethodMaterialMode_1.default.MULTI_PASS;\n        mat.bothSides = this._cur_mat.twoSided;\n        this._pFinalizeAsset(mat, this._cur_mat.name);\n        this._materials[this._cur_mat.name] = this._cur_mat;\n        this._cur_mat.material = mat;\n        this._cur_mat = null;\n    };\n    Max3DSParser.prototype.readNulTermstring = function () {\n        var chr;\n        var str = \"\";\n        while ((chr = this._byteData.readUnsignedByte()) > 0)\n            str += String.fromCharCode(chr);\n        return str;\n    };\n    Max3DSParser.prototype.readTransform = function () {\n        var data = new Float32Array(16);\n        // X axis\n        data[0] = this._byteData.readFloat(); // X\n        data[2] = this._byteData.readFloat(); // Z\n        data[1] = this._byteData.readFloat(); // Y\n        data[3] = 0;\n        // Z axis\n        data[8] = this._byteData.readFloat(); // X\n        data[10] = this._byteData.readFloat(); // Z\n        data[9] = this._byteData.readFloat(); // Y\n        data[11] = 0;\n        // Y Axis\n        data[4] = this._byteData.readFloat(); // X\n        data[6] = this._byteData.readFloat(); // Z\n        data[5] = this._byteData.readFloat(); // Y\n        data[7] = 0;\n        // Translation\n        data[12] = this._byteData.readFloat(); // X\n        data[14] = this._byteData.readFloat(); // Z\n        data[13] = this._byteData.readFloat(); // Y\n        data[15] = 1;\n        return data;\n    };\n    Max3DSParser.prototype.readColor = function () {\n        var cid;\n        var len;\n        var r /*int*/, g /*int*/, b;\n        cid = this._byteData.readUnsignedShort();\n        len = this._byteData.readUnsignedInt();\n        switch (cid) {\n            case 0x0010:\n                r = this._byteData.readFloat() * 255;\n                g = this._byteData.readFloat() * 255;\n                b = this._byteData.readFloat() * 255;\n                break;\n            case 0x0011:\n                r = this._byteData.readUnsignedByte();\n                g = this._byteData.readUnsignedByte();\n                b = this._byteData.readUnsignedByte();\n                break;\n            default:\n                this._byteData.position += (len - 6);\n                break;\n        }\n        return (r << 16) | (g << 8) | b;\n    };\n    return Max3DSParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Max3DSParser;\n/**\n *\n */\nvar FaceVO = (function () {\n    function FaceVO() {\n    }\n    return FaceVO;\n}());\n/**\n *\n */\nvar MaterialVO = (function () {\n    function MaterialVO() {\n    }\n    return MaterialVO;\n}());\n/**\n *\n */\nvar ObjectVO = (function () {\n    function ObjectVO() {\n    }\n    return ObjectVO;\n}());\n/**\n *\n */\nvar TextureVO = (function () {\n    function TextureVO() {\n    }\n    return TextureVO;\n}());\n/**\n *\n */\nvar VertexVO = (function () {\n    function VertexVO() {\n    }\n    return VertexVO;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined}],\"awayjs-parsers/lib/OBJParser\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Sampler2D_1 = require(\"awayjs-core/lib/image/Sampler2D\");\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar URLLoaderDataFormat_1 = require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nvar URLRequest_1 = require(\"awayjs-core/lib/net/URLRequest\");\nvar ParserBase_1 = require(\"awayjs-core/lib/parsers/ParserBase\");\nvar ParserUtils_1 = require(\"awayjs-core/lib/parsers/ParserUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DisplayObjectContainer_1 = require(\"awayjs-display/lib/display/DisplayObjectContainer\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar MethodMaterial_1 = require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nvar MethodMaterialMode_1 = require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nvar SpecularBasicMethod_1 = require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nvar OBJParser = (function (_super) {\n    __extends(OBJParser, _super);\n    /**\n     * Creates a new OBJParser object.\n     * @param uri The url or id of the data or file to be parsed.\n     * @param extra The holder for extra contextual data that the parser might need.\n     */\n    function OBJParser(scale) {\n        if (scale === void 0) { scale = 1; }\n        _super.call(this, URLLoaderDataFormat_1.default.TEXT);\n        this._mtlLibLoaded = true;\n        this._activeMaterialID = \"\";\n        this._scale = scale;\n    }\n    Object.defineProperty(OBJParser.prototype, \"scale\", {\n        /**\n         * Scaling factor applied directly to vertices data\n         * @param value The scaling factor.\n         */\n        set: function (value) {\n            this._scale = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Indicates whether or not a given file extension is supported by the parser.\n     * @param extension The file extension of a potential file to be parsed.\n     * @return Whether or not the given file type is supported.\n     */\n    OBJParser.supportsType = function (extension) {\n        extension = extension.toLowerCase();\n        return extension == \"obj\";\n    };\n    /**\n     * Tests whether a data block can be parsed by the parser.\n     * @param data The data block to potentially be parsed.\n     * @return Whether or not the given data is supported.\n     */\n    OBJParser.supportsData = function (data) {\n        var content = ParserUtils_1.default.toString(data);\n        var hasV = false;\n        var hasF = false;\n        if (content) {\n            hasV = content.indexOf(\"\\nv \") != -1;\n            hasF = content.indexOf(\"\\nf \") != -1;\n        }\n        return hasV && hasF;\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._iResolveDependency = function (resourceDependency) {\n        if (resourceDependency.id == 'mtl') {\n            var str = ParserUtils_1.default.toString(resourceDependency.data);\n            this.parseMtl(str);\n        }\n        else {\n            var asset;\n            if (resourceDependency.assets.length != 1) {\n                return;\n            }\n            asset = resourceDependency.assets[0];\n            if (asset.isAsset(BitmapImage2D_1.default)) {\n                var lm = new LoadedMaterial();\n                lm.materialID = resourceDependency.id;\n                lm.texture = new Single2DTexture_1.default(asset);\n                this._materialLoaded.push(lm);\n                if (this._sprites.length > 0) {\n                    this.applyMaterial(lm);\n                }\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._iResolveDependencyFailure = function (resourceDependency) {\n        if (resourceDependency.id == \"mtl\") {\n            this._mtlLib = false;\n            this._mtlLibLoaded = false;\n        }\n        else {\n            var lm = new LoadedMaterial();\n            lm.materialID = resourceDependency.id;\n            this._materialLoaded.push(lm);\n        }\n        if (this._sprites.length > 0)\n            this.applyMaterial(lm);\n    };\n    /**\n     * @inheritDoc\n     */\n    OBJParser.prototype._pProceedParsing = function () {\n        var line;\n        var creturn = String.fromCharCode(10);\n        var trunk;\n        if (!this._startedParsing) {\n            this._textData = this._pGetTextData();\n            // Merge linebreaks that are immediately preceeded by\n            // the \"escape\" backward slash into single lines.\n            this._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n        }\n        if (this._textData.indexOf(creturn) == -1)\n            creturn = String.fromCharCode(13);\n        if (!this._startedParsing) {\n            this._startedParsing = true;\n            this._vertices = new Array();\n            this._vertexNormals = new Array();\n            this._materialIDs = new Array();\n            this._materialLoaded = new Array();\n            this._sprites = new Array();\n            this._uvs = new Array();\n            this._stringLength = this._textData.length;\n            this._charIndex = this._textData.indexOf(creturn, 0);\n            this._oldIndex = 0;\n            this._objects = new Array();\n            this._objectIndex = 0;\n        }\n        while (this._charIndex < this._stringLength && this._pHasTime()) {\n            this._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n            if (this._charIndex == -1)\n                this._charIndex = this._stringLength;\n            line = this._textData.substring(this._oldIndex, this._charIndex);\n            line = line.split('\\r').join(\"\");\n            line = line.replace(\"  \", \" \");\n            trunk = line.split(\" \");\n            this._oldIndex = this._charIndex + 1;\n            this.parseLine(trunk);\n            // If whatever was parsed on this line resulted in the\n            // parsing being paused to retrieve dependencies, break\n            // here and do not continue parsing until un-paused.\n            if (this.parsingPaused) {\n                return ParserBase_1.default.MORE_TO_PARSE;\n            }\n        }\n        if (this._charIndex >= this._stringLength) {\n            if (this._mtlLib && !this._mtlLibLoaded) {\n                return ParserBase_1.default.MORE_TO_PARSE;\n            }\n            this.translate();\n            this.applyMaterials();\n            return ParserBase_1.default.PARSING_DONE;\n        }\n        return ParserBase_1.default.MORE_TO_PARSE;\n    };\n    OBJParser.prototype._pStartParsing = function (frameLimit) {\n        //create a content object for Loaders\n        this._pContent = new DisplayObjectContainer_1.default();\n        _super.prototype._pStartParsing.call(this, frameLimit);\n    };\n    /**\n     * Parses a single line in the OBJ file.\n     */\n    OBJParser.prototype.parseLine = function (trunk) {\n        switch (trunk[0]) {\n            case \"mtllib\":\n                this._mtlLib = true;\n                this._mtlLibLoaded = false;\n                this.loadMtl(trunk[1]);\n                break;\n            case \"g\":\n                this.createGroup(trunk);\n                break;\n            case \"o\":\n                this.createObject(trunk);\n                break;\n            case \"usemtl\":\n                if (this._mtlLib) {\n                    if (!trunk[1])\n                        trunk[1] = \"def000\";\n                    this._materialIDs.push(trunk[1]);\n                    this._activeMaterialID = trunk[1];\n                    if (this._currentGroup)\n                        this._currentGroup.materialID = this._activeMaterialID;\n                }\n                break;\n            case \"v\":\n                this.parseVertex(trunk);\n                break;\n            case \"vt\":\n                this.parseUV(trunk);\n                break;\n            case \"vn\":\n                this.parseVertexNormal(trunk);\n                break;\n            case \"f\":\n                this.parseFace(trunk);\n        }\n    };\n    /**\n     * Converts the parsed data into an Away3D scenegraph structure\n     */\n    OBJParser.prototype.translate = function () {\n        for (var objIndex = 0; objIndex < this._objects.length; ++objIndex) {\n            var groups = this._objects[objIndex].groups;\n            var numGroups = groups.length;\n            var materialGroups;\n            var numMaterialGroups;\n            var graphics;\n            var sprite;\n            var m;\n            var sm;\n            var bmMaterial;\n            for (var g = 0; g < numGroups; ++g) {\n                bmMaterial = new MethodMaterial_1.default(DefaultMaterialManager_1.default.getDefaultImage2D());\n                //check for multipass\n                if (this.materialMode >= 2)\n                    bmMaterial.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                sprite = new Sprite_1.default(bmMaterial);\n                graphics = sprite.graphics;\n                materialGroups = groups[g].materialGroups;\n                numMaterialGroups = materialGroups.length;\n                for (m = 0; m < numMaterialGroups; ++m)\n                    this.translateMaterialGroup(materialGroups[m], graphics);\n                if (graphics.count == 0)\n                    continue;\n                // Finalize and force type-based name\n                this._pFinalizeAsset(graphics); //, \"\");\n                if (this._objects[objIndex].name) {\n                    // this is a full independent object ('o' tag in OBJ file)\n                    sprite.name = this._objects[objIndex].name;\n                }\n                else if (groups[g].name) {\n                    // this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\n                    sprite.name = groups[g].name;\n                }\n                else {\n                    // No name stored. Use empty string which will force it\n                    // to be overridden by finalizeAsset() to type default.\n                    sprite.name = \"\";\n                }\n                this._sprites.push(sprite);\n                if (groups[g].materialID != \"\")\n                    bmMaterial.name = groups[g].materialID + \"~\" + sprite.name;\n                else\n                    bmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\n                if (sprite.graphics.count > 1) {\n                    for (sm = 1; sm < sprite.graphics.count; ++sm)\n                        sprite.graphics.getGraphicAt(sm).material = bmMaterial;\n                }\n                //add to the content property\n                this._pContent.addChild(sprite);\n                this._pFinalizeAsset(sprite);\n            }\n        }\n    };\n    /**\n     * Translates an obj's material group to a subgraphics.\n     * @param materialGroup The material group data to convert.\n     * @param graphics The Graphics to contain the converted Elements.\n     */\n    OBJParser.prototype.translateMaterialGroup = function (materialGroup, graphics) {\n        var faces = materialGroup.faces;\n        var face;\n        var numFaces = faces.length;\n        var numVerts;\n        var elements;\n        var vertices = new Array();\n        var uvs = new Array();\n        var normals = new Array();\n        var indices = new Array();\n        this._realIndices = [];\n        this._vertexIndex = 0;\n        var j;\n        for (var i = 0; i < numFaces; ++i) {\n            face = faces[i];\n            numVerts = face.indexIds.length - 1;\n            for (j = 1; j < numVerts; ++j) {\n                this.translateVertexData(face, j, vertices, uvs, indices, normals);\n                this.translateVertexData(face, 0, vertices, uvs, indices, normals);\n                this.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n            }\n        }\n        if (vertices.length > 0) {\n            elements = new TriangleElements_1.default(new AttributesBuffer_1.default());\n            elements.autoDeriveNormals = normals.length ? false : true;\n            elements.setIndices(indices);\n            elements.setPositions(vertices);\n            elements.setNormals(normals);\n            elements.setUVs(uvs);\n            graphics.addGraphic(elements);\n        }\n    };\n    OBJParser.prototype.translateVertexData = function (face, vertexIndex, vertices, uvs, indices /*uint*/, normals) {\n        var index;\n        var vertex;\n        var vertexNormal;\n        var uv;\n        if (!this._realIndices[face.indexIds[vertexIndex]]) {\n            index = this._vertexIndex;\n            this._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n            vertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n            vertices.push(vertex.x * this._scale, vertex.y * this._scale, vertex.z * this._scale);\n            if (face.normalIndices.length > 0) {\n                vertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n                normals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n            }\n            if (face.uvIndices.length > 0) {\n                try {\n                    uv = this._uvs[face.uvIndices[vertexIndex] - 1];\n                    uvs.push(uv.u, uv.v);\n                }\n                catch (e) {\n                    switch (vertexIndex) {\n                        case 0:\n                            uvs.push(0, 1);\n                            break;\n                        case 1:\n                            uvs.push(.5, 0);\n                            break;\n                        case 2:\n                            uvs.push(1, 1);\n                    }\n                }\n            }\n        }\n        else {\n            index = this._realIndices[face.indexIds[vertexIndex]] - 1;\n        }\n        indices.push(index);\n    };\n    /**\n     * Creates a new object group.\n     * @param trunk The data block containing the object tag and its parameters\n     */\n    OBJParser.prototype.createObject = function (trunk) {\n        this._currentGroup = null;\n        this._currentMaterialGroup = null;\n        this._objects.push(this._currentObject = new ObjectGroup());\n        if (trunk)\n            this._currentObject.name = trunk[1];\n    };\n    /**\n     * Creates a new group.\n     * @param trunk The data block containing the group tag and its parameters\n     */\n    OBJParser.prototype.createGroup = function (trunk) {\n        if (!this._currentObject)\n            this.createObject(null);\n        this._currentGroup = new Group();\n        this._currentGroup.materialID = this._activeMaterialID;\n        if (trunk)\n            this._currentGroup.name = trunk[1];\n        this._currentObject.groups.push(this._currentGroup);\n        this.createMaterialGroup(null);\n    };\n    /**\n     * Creates a new material group.\n     * @param trunk The data block containing the material tag and its parameters\n     */\n    OBJParser.prototype.createMaterialGroup = function (trunk) {\n        this._currentMaterialGroup = new MaterialGroup();\n        if (trunk)\n            this._currentMaterialGroup.url = trunk[1];\n        this._currentGroup.materialGroups.push(this._currentMaterialGroup);\n    };\n    /**\n     * Reads the next vertex coordinates.\n     * @param trunk The data block containing the vertex tag and its parameters\n     */\n    OBJParser.prototype.parseVertex = function (trunk) {\n        //for the very rare cases of other delimiters/charcodes seen in some obj files\n        var v1, v2, v3;\n        if (trunk.length > 4) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            v1 = nTrunk[0];\n            v2 = nTrunk[1];\n            v3 = -nTrunk[2];\n            this._vertices.push(new Vertex(v1, v2, v3));\n        }\n        else {\n            v1 = parseFloat(trunk[1]);\n            v2 = parseFloat(trunk[2]);\n            v3 = -parseFloat(trunk[3]);\n            this._vertices.push(new Vertex(v1, v2, v3));\n        }\n    };\n    /**\n     * Reads the next uv coordinates.\n     * @param trunk The data block containing the uv tag and its parameters\n     */\n    OBJParser.prototype.parseUV = function (trunk) {\n        if (trunk.length > 3) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            this._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n        }\n        else {\n            this._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n        }\n    };\n    /**\n     * Reads the next vertex normal coordinates.\n     * @param trunk The data block containing the vertex normal tag and its parameters\n     */\n    OBJParser.prototype.parseVertexNormal = function (trunk) {\n        if (trunk.length > 4) {\n            var nTrunk = [];\n            var val;\n            for (var i = 1; i < trunk.length; ++i) {\n                val = parseFloat(trunk[i]);\n                if (!isNaN(val))\n                    nTrunk.push(val);\n            }\n            this._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n        }\n        else {\n            this._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n        }\n    };\n    /**\n     * Reads the next face's indices.\n     * @param trunk The data block containing the face tag and its parameters\n     */\n    OBJParser.prototype.parseFace = function (trunk) {\n        var len = trunk.length;\n        var face = new FaceData();\n        if (!this._currentGroup) {\n            this.createGroup(null);\n        }\n        var indices;\n        for (var i = 1; i < len; ++i) {\n            if (trunk[i] == \"\") {\n                continue;\n            }\n            indices = trunk[i].split(\"/\");\n            face.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n            if (indices[1] && String(indices[1]).length > 0)\n                face.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n            if (indices[2] && String(indices[2]).length > 0)\n                face.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n            face.indexIds.push(trunk[i]);\n        }\n        this._currentMaterialGroup.faces.push(face);\n    };\n    /**\n     * This is a hack around negative face coords\n     */\n    OBJParser.prototype.parseIndex = function (index, length) {\n        if (index < 0)\n            return index + length + 1;\n        else\n            return index;\n    };\n    OBJParser.prototype.parseMtl = function (data) {\n        var materialDefinitions = data.split('newmtl');\n        var lines;\n        var trunk;\n        var j;\n        var basicSpecularMethod;\n        var useSpecular;\n        var useColor;\n        var diffuseColor;\n        var color;\n        var specularColor;\n        var specular;\n        var alpha;\n        var mapkd;\n        for (var i = 0; i < materialDefinitions.length; ++i) {\n            lines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n            //lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n            if (lines.length == 1)\n                lines = materialDefinitions[i].split(String.fromCharCode(13));\n            diffuseColor = color = specularColor = 0xFFFFFF;\n            specular = 0;\n            useSpecular = false;\n            useColor = false;\n            alpha = 1;\n            mapkd = \"\";\n            for (j = 0; j < lines.length; ++j) {\n                lines[j] = lines[j].replace(/\\s+$/, \"\");\n                if (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n                    trunk = lines[j].split(\" \");\n                    if (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n                        trunk[0] = trunk[0].substring(1, trunk[0].length);\n                    if (j == 0) {\n                        this._lastMtlID = trunk.join(\"\");\n                        this._lastMtlID = (this._lastMtlID == \"\") ? \"def000\" : this._lastMtlID;\n                    }\n                    else {\n                        switch (trunk[0]) {\n                            case \"Ka\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n                                    color = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                break;\n                            case \"Ks\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n                                    specularColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                    useSpecular = true;\n                                }\n                                break;\n                            case \"Ns\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\n                                    specular = Number(trunk[1]) * 0.001;\n                                if (specular == 0)\n                                    useSpecular = false;\n                                break;\n                            case \"Kd\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n                                    diffuseColor = trunk[1] * 255 << 16 | trunk[2] * 255 << 8 | trunk[3] * 255;\n                                    useColor = true;\n                                }\n                                break;\n                            case \"tr\":\n                            case \"d\":\n                                if (trunk[1] && !isNaN(Number(trunk[1])))\n                                    alpha = Number(trunk[1]);\n                                break;\n                            case \"map_Kd\":\n                                mapkd = this.parseMapKdString(trunk);\n                                mapkd = mapkd.replace(/\\\\/g, \"/\");\n                        }\n                    }\n                }\n            }\n            if (mapkd != \"\") {\n                if (useSpecular) {\n                    basicSpecularMethod = new SpecularBasicMethod_1.default();\n                    basicSpecularMethod.color = specularColor;\n                    basicSpecularMethod.strength = specular;\n                    var specularData = new SpecularData();\n                    specularData.alpha = alpha;\n                    specularData.basicSpecularMethod = basicSpecularMethod;\n                    specularData.materialID = this._lastMtlID;\n                    if (!this._materialSpecularData)\n                        this._materialSpecularData = new Array();\n                    this._materialSpecularData.push(specularData);\n                }\n                this._pAddDependency(this._lastMtlID, new URLRequest_1.default(mapkd));\n            }\n            else if (useColor && !isNaN(color)) {\n                var lm = new LoadedMaterial();\n                lm.materialID = this._lastMtlID;\n                if (alpha == 0)\n                    console.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\n                var cm = new MethodMaterial_1.default(color);\n                if (this.materialMode < 2) {\n                    cm.alpha = alpha;\n                }\n                else {\n                    cm.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                }\n                cm.diffuseMethod.color = diffuseColor;\n                if (useSpecular) {\n                    cm.specularMethod.color = specularColor;\n                    cm.specularMethod.strength = specular;\n                }\n                lm.cm = cm;\n                this._materialLoaded.push(lm);\n                if (this._sprites.length > 0)\n                    this.applyMaterial(lm);\n            }\n        }\n        this._mtlLibLoaded = true;\n    };\n    OBJParser.prototype.parseMapKdString = function (trunk) {\n        var url = \"\";\n        var i;\n        var breakflag;\n        for (i = 1; i < trunk.length;) {\n            switch (trunk[i]) {\n                case \"-blendu\":\n                case \"-blendv\":\n                case \"-cc\":\n                case \"-clamp\":\n                case \"-texres\":\n                    i += 2; //Skip ahead 1 attribute\n                    break;\n                case \"-mm\":\n                    i += 3; //Skip ahead 2 attributes\n                    break;\n                case \"-o\":\n                case \"-s\":\n                case \"-t\":\n                    i += 4; //Skip ahead 3 attributes\n                    continue;\n                default:\n                    breakflag = true;\n                    break;\n            }\n            if (breakflag)\n                break;\n        }\n        //Reconstruct URL/filename\n        for (i; i < trunk.length; i++) {\n            url += trunk[i];\n            url += \" \";\n        }\n        //Remove the extraneous space and/or newline from the right side\n        url = url.replace(/\\s+$/, \"\");\n        return url;\n    };\n    OBJParser.prototype.loadMtl = function (mtlurl) {\n        // Add raw-data dependency to queue and load dependencies now,\n        // which will pause the parsing in the meantime.\n        this._pAddDependency('mtl', new URLRequest_1.default(mtlurl), true);\n        this._pPauseAndRetrieveDependencies(); //\n    };\n    OBJParser.prototype.applyMaterial = function (lm) {\n        var decomposeID;\n        var sprite;\n        var tm;\n        var j;\n        var specularData;\n        for (var i = 0; i < this._sprites.length; ++i) {\n            sprite = this._sprites[i];\n            decomposeID = sprite.material.name.split(\"~\");\n            if (decomposeID[0] == lm.materialID) {\n                if (lm.cm) {\n                    if (sprite.material)\n                        sprite.material = null;\n                    sprite.material = lm.cm;\n                }\n                else if (lm.texture) {\n                    tm = sprite.material;\n                    tm.ambientMethod.texture = lm.texture;\n                    tm.style.color = lm.color;\n                    tm.alpha = lm.alpha;\n                    tm.style.sampler = new Sampler2D_1.default(true);\n                    if (this.materialMode < 2)\n                        tm.alpha = lm.alpha;\n                    else\n                        tm.mode = MethodMaterialMode_1.default.MULTI_PASS;\n                    if (lm.specularMethod) {\n                        // By setting the specularMethod property to null before assigning\n                        // the actual method instance, we avoid having the properties of\n                        // the new method being overridden with the settings from the old\n                        // one, which is default behavior of the setter.\n                        tm.specularMethod = null;\n                        tm.specularMethod = lm.specularMethod;\n                    }\n                    else if (this._materialSpecularData) {\n                        for (j = 0; j < this._materialSpecularData.length; ++j) {\n                            specularData = this._materialSpecularData[j];\n                            if (specularData.materialID == lm.materialID) {\n                                tm.specularMethod = null; // Prevent property overwrite (see above)\n                                tm.specularMethod = specularData.basicSpecularMethod;\n                                tm.specularMethod.color = specularData.color;\n                                tm.specularMethod.strength = specularData.alpha;\n                                break;\n                            }\n                        }\n                    }\n                }\n                sprite.material.name = decomposeID[1] ? decomposeID[1] : decomposeID[0];\n                this._sprites.splice(i, 1);\n                --i;\n            }\n        }\n        if (lm.cm || tm)\n            this._pFinalizeAsset(lm.cm || tm);\n    };\n    OBJParser.prototype.applyMaterials = function () {\n        if (this._materialLoaded.length == 0)\n            return;\n        for (var i = 0; i < this._materialLoaded.length; ++i)\n            this.applyMaterial(this._materialLoaded[i]);\n    };\n    return OBJParser;\n}(ParserBase_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = OBJParser;\nvar ObjectGroup = (function () {\n    function ObjectGroup() {\n        this.groups = new Array();\n    }\n    return ObjectGroup;\n}());\nvar Group = (function () {\n    function Group() {\n        this.materialGroups = new Array();\n    }\n    return Group;\n}());\nvar MaterialGroup = (function () {\n    function MaterialGroup() {\n        this.faces = new Array();\n    }\n    return MaterialGroup;\n}());\nvar SpecularData = (function () {\n    function SpecularData() {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n    }\n    return SpecularData;\n}());\nvar LoadedMaterial = (function () {\n    function LoadedMaterial() {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n    }\n    return LoadedMaterial;\n}());\nvar FaceData = (function () {\n    function FaceData() {\n        this.vertexIndices = new Array();\n        this.uvIndices = new Array();\n        this.normalIndices = new Array();\n        this.indexIds = new Array(); // used for real index lookups\n    }\n    return FaceData;\n}());\n/**\n* Texture coordinates value object.\n*/\nvar UV = (function () {\n    /**\n     * Creates a new <code>UV</code> object.\n     *\n     * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n     * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n     */\n    function UV(u, v) {\n        if (u === void 0) { u = 0; }\n        if (v === void 0) { v = 0; }\n        this._u = u;\n        this._v = v;\n    }\n    Object.defineProperty(UV.prototype, \"v\", {\n        /**\n         * Defines the vertical coordinate of the texture value.\n         */\n        get: function () {\n            return this._v;\n        },\n        set: function (value) {\n            this._v = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UV.prototype, \"u\", {\n        /**\n         * Defines the horizontal coordinate of the texture value.\n         */\n        get: function () {\n            return this._u;\n        },\n        set: function (value) {\n            this._u = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * returns a new UV value Object\n     */\n    UV.prototype.clone = function () {\n        return new UV(this._u, this._v);\n    };\n    /**\n     * returns the value object as a string for trace/debug purpose\n     */\n    UV.prototype.toString = function () {\n        return this._u + \",\" + this._v;\n    };\n    return UV;\n}());\nvar Vertex = (function () {\n    /**\n     * Creates a new <code>Vertex</code> value object.\n     *\n     * @param    x            [optional]    The x value. Defaults to 0.\n     * @param    y            [optional]    The y value. Defaults to 0.\n     * @param    z            [optional]    The z value. Defaults to 0.\n     * @param    index        [optional]    The index value. Defaults is NaN.\n     */\n    function Vertex(x, y, z, index) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        if (index === void 0) { index = 0; }\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._index = index;\n    }\n    Object.defineProperty(Vertex.prototype, \"index\", {\n        get: function () {\n            return this._index;\n        },\n        /**\n         * To define/store the index of value object\n         * @param    ind        The index\n         */\n        set: function (ind) {\n            this._index = ind;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"x\", {\n        /**\n         * To define/store the x value of the value object\n         * @param    value        The x value\n         */\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"y\", {\n        /**\n         * To define/store the y value of the value object\n         * @param    value        The y value\n         */\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Vertex.prototype, \"z\", {\n        /**\n         * To define/store the z value of the value object\n         * @param    value        The z value\n         */\n        get: function () {\n            return this._z;\n        },\n        set: function (value) {\n            this._z = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * returns a new Vertex value Object\n     */\n    Vertex.prototype.clone = function () {\n        return new Vertex(this._x, this._y, this._z);\n    };\n    return Vertex;\n}());\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-core/lib/image/Sampler2D\":undefined,\"awayjs-core/lib/net/URLLoaderDataFormat\":undefined,\"awayjs-core/lib/net/URLRequest\":undefined,\"awayjs-core/lib/parsers/ParserBase\":undefined,\"awayjs-core/lib/parsers/ParserUtils\":undefined,\"awayjs-display/lib/display/DisplayObjectContainer\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-methodmaterials/lib/MethodMaterial\":undefined,\"awayjs-methodmaterials/lib/MethodMaterialMode\":undefined,\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\":undefined}],\"awayjs-parsers/lib/Parsers\":[function(require,module,exports){\n\"use strict\";\nvar Loader_1 = require(\"awayjs-core/lib/library/Loader\");\nvar AWDParser_1 = require(\"awayjs-parsers/lib/AWDParser\");\nvar Max3DSParser_1 = require(\"awayjs-parsers/lib/Max3DSParser\");\nvar MD2Parser_1 = require(\"awayjs-parsers/lib/MD2Parser\");\nvar OBJParser_1 = require(\"awayjs-parsers/lib/OBJParser\");\n/**\n *\n */\nvar Parsers = (function () {\n    function Parsers() {\n    }\n    /**\n     * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n     * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n     * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n     *\n     * See notes about file size in the documentation for the ALL_BUNDLED constant.\n     *\n     * @see away.parsers.Parsers.ALL_BUNDLED\n     */\n    Parsers.enableAllBundled = function () {\n        Loader_1.default.enableParsers(Parsers.ALL_BUNDLED);\n    };\n    /**\n     * A list of all parsers that come bundled with Away3D. Use this to quickly\n     * enable support for all bundled parsers to the file format auto-detection\n     * feature, using any of the enableParsers() methods on loaders, e.g.:\n     *\n     * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n     *\n     * Beware however that this requires all parser classes to be included in the\n     * SWF file, which will add 50-100 kb to the file. When only a limited set of\n     * file formats are used, SWF file size can be saved by adding the parsers\n     * individually using AssetLibrary.enableParser()\n     *\n     * A third way is to specify a parser for each loaded file, thereby bypassing\n     * the auto-detection mechanisms altogether, while at the same time allowing\n     * any properties that are unique to that parser to be set for that load.\n     *\n     * The bundled parsers are:\n     *\n     * <ul>\n     * <li>AC3D (.ac)</li>\n     * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n     * <li>3DMax (.3ds)</li>\n     * <li>DXF (.dxf)</li>\n     * <li>Quake 2 MD2 models (.md2)</li>\n     * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n     * <li>Doom 3 MD5 sprites (.md5sprite)</li>\n     * <li>Wavefront OBJ (.obj)</li>\n     * <li>Collada (.dae)</li>\n     * <li>Images (.jpg, .png)</li>\n     * </ul>\n     *\n     * @see away.library.AssetLibrary.enableParser\n     */\n    Parsers.ALL_BUNDLED = Array(AWDParser_1.default, Max3DSParser_1.default, MD2Parser_1.default, OBJParser_1.default);\n    return Parsers;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Parsers;\n\n},{\"awayjs-core/lib/library/Loader\":undefined,\"awayjs-parsers/lib/AWDParser\":\"awayjs-parsers/lib/AWDParser\",\"awayjs-parsers/lib/MD2Parser\":\"awayjs-parsers/lib/MD2Parser\",\"awayjs-parsers/lib/Max3DSParser\":\"awayjs-parsers/lib/Max3DSParser\",\"awayjs-parsers/lib/OBJParser\":\"awayjs-parsers/lib/OBJParser\"}]},{},[1])\n\n",
    "export {default as AWDParser}\t\t\t\t\t\tfrom \"awayjs-parsers/lib/AWDParser\";\nexport {default as Max3DSParser}\t\t\t\t\tfrom \"awayjs-parsers/lib/Max3DSParser\";\nexport {default as MD2Parser}\t\t\t\t\t\tfrom \"awayjs-parsers/lib/MD2Parser\";\nexport {default as MD5AnimParser}\t\t\t\t\tfrom \"awayjs-parsers/lib/MD5AnimParser\";\nexport {default as MD5MeshParser}\t\t\t\t\tfrom \"awayjs-parsers/lib/MD5MeshParser\";\nexport {default as OBJParser}\t\t\t\t\t\tfrom \"awayjs-parsers/lib/OBJParser\";\nexport {default as Parsers}\t\t\t\t\t\t\tfrom \"awayjs-parsers/lib/Parsers\";",
    "\nclass AWD3Utils {\n\tpublic static BLOCKSTATE_FINALIZE:number = 0;\n\tpublic static BLOCKSTATE_INVALID:number = 1;\n\tpublic static BLOCKSTATE_LOAD_DEPENDENICES:number = 2;\n\tpublic static BLOCKSTATE_NO_ASSET:number = 3;\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n}\nexport default AWD3Utils;",
    "import ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\nimport AWD3Utils\t\t\t\t\t\tfrom \"awayjs-parsers/lib/AWD3ParserUtils/AWD3Utils\";\n\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic type:number;\n\tpublic data:any;\n\tpublic dependencies_data:Array<ByteArray>;\n\tpublic dependencies_urls:Array<string>;\n\tpublic loaded_dependencies:Array<any>;\n\tpublic loaded_dependencies_cnt:number;\n\tpublic len:number;\n\tpublic geoID:number;\n\tpublic state:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Float32Array>;\n\n\tconstructor(this_id:number, this_type:number)\n\t{\n\t\tthis.type=this_type;\n\t\tthis.id=this_id;\n\t\tthis.state = AWD3Utils.BLOCKSTATE_FINALIZE;\n\t\tthis.dependencies_data=Array<any>();\n\t\tthis.dependencies_urls=Array<string>();\n\t\tif(this_type==83){\n\t\t\tthis.loaded_dependencies=Array<any>(6);\n\t\t}\n\t\tthis.loaded_dependencies_cnt=0;\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\nexport default AWDBlock;",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport Short3Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Short3Attributes\";\nimport Float3Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Float3Attributes\";\nimport Float2Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Float2Attributes\";\nimport Byte4Attributes\t\t\t\t\tfrom \"awayjs-core/lib/attributes/Byte4Attributes\";\n\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport BitmapImageCube\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImageCube\";\nimport BlendMode\t\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\nimport Sampler2D\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\nimport WaveAudio\t\t\t\t\t\tfrom \"awayjs-core/lib/audio/WaveAudio\";\nimport ColorTransform\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport IAsset\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport ProjectionBase\t\t\t\t\tfrom \"awayjs-core/lib/projections/ProjectionBase\";\nimport PerspectiveProjection\t\t\tfrom \"awayjs-core/lib/projections/PerspectiveProjection\";\nimport OrthographicProjection\t\t\tfrom \"awayjs-core/lib/projections/OrthographicProjection\";\nimport OrthographicOffCenterProjection\tfrom \"awayjs-core/lib/projections/OrthographicOffCenterProjection\";\nimport ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\nimport Point\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\n\nimport AnimationNodeBase\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport View\t\t\t\t\t\t\t\tfrom \"awayjs-display/lib/View\";\nimport DisplayObject\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport LightBase\t\t\t\t\t\tfrom \"awayjs-display/lib/display/LightBase\";\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DirectionalLight\t\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\nimport PointLight\t\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\nimport Camera\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport TextField\t\t\t\t\t\tfrom \"awayjs-display/lib/display/TextField\";\nimport Billboard\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\nimport Skybox\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport MaterialBase\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport LightPickerBase\t\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/LightPickerBase\";\nimport StaticLightPicker\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/StaticLightPicker\";\nimport CubeMapShadowMapper\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\";\nimport DirectionalShadowMapper\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\";\nimport ShadowMapperBase\t\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\";\n\nimport PrefabBase\t\t\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrefabBase\";\nimport PrimitivePrefabBase\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePrefabBase\";\nimport PrimitiveCapsulePrefab\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\";\nimport PrimitiveConePrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveConePrefab\";\nimport PrimitiveCubePrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCubePrefab\";\nimport PrimitiveCylinderPrefab\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\";\nimport PrimitivePlanePrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitivePlanePrefab\";\nimport PrimitiveSpherePrefab\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\";\nimport PrimitiveTorusPrefab\t\t\t\tfrom \"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\";\nimport SingleCubeTexture\t\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\nimport TextureBase\t\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport AnimationSetBase\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimationSetBase\";\nimport AnimatorBase\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/AnimatorBase\";\nimport VertexAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\nimport VertexAnimator\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimator\";\nimport SkeletonAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\nimport SkeletonAnimator\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimator\";\nimport JointPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\nimport Skeleton\t\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\nimport SkeletonPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\nimport SkeletonJoint\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\nimport SkeletonClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\nimport VertexClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\nimport AnimationClipNodeBase\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\";\n\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport AmbientEnvMapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\";\nimport DiffuseDepthMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\";\nimport DiffuseCelMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\";\nimport DiffuseGradientMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\";\nimport DiffuseLightMapMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\";\nimport DiffuseWrapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\";\nimport EffectAlphaMaskMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\";\nimport EffectColorMatrixMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\";\nimport EffectColorTransformMethod\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\";\nimport EffectEnvMapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\";\nimport EffectFogMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFogMethod\";\nimport EffectFresnelEnvMapMethod\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\";\nimport EffectLightMapMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\";\nimport EffectMethodBase\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectMethodBase\";\nimport EffectRimLightMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\";\nimport NormalSimpleWaterMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\";\nimport ShadowDitheredMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\";\nimport ShadowFilteredMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\";\nimport ShadowMapMethodBase\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\";\nimport ShadowMethodBase\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowMethodBase\";\nimport SpecularFresnelMethod\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\";\nimport ShadowHardMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowHardMethod\";\nimport SpecularAnisotropicMethod\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\";\nimport SpecularCelMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularCelMethod\";\nimport SpecularPhongMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\";\nimport ShadowNearMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowNearMethod\";\nimport ShadowSoftMethod\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\";\n\nimport BasicMaterial\t\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\n\nimport ITimelineSceneGraphFactory \tfrom \"awayjs-display/lib/factories/ITimelineSceneGraphFactory\";\nimport AS2SceneGraphFactory \t\tfrom \"awayjs-player/lib/factories/AS2SceneGraphFactory\";\nimport MovieClip \t\t\t\t\tfrom \"awayjs-display/lib/display/MovieClip\";\nimport Timeline\t\t\t \t\t\tfrom \"awayjs-display/lib/base/Timeline\";\n\n\nimport AssetLibrary\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetLibrary\";\n\nimport Font\t\t\t\t\t\t\tfrom \"awayjs-display/lib/text/Font\";\nimport TesselatedFontTable\t\t\tfrom \"awayjs-display/lib/text/TesselatedFontTable\";\nimport TextFormat\t\t\t\t\tfrom \"awayjs-display/lib/text/TextFormat\";\nimport TextFieldType\t\t\t\tfrom \"awayjs-display/lib/text/TextFieldType\";\n\nimport AWDBlock\t\t\t\t\t\tfrom \"awayjs-parsers/lib/AWD3ParserUtils/AWDBlock\";\nimport Rectangle \t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\nimport Style \t\t\t\t\t\tfrom \"awayjs-display/lib/base/Style\";\nimport Matrix \t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport MappingMode \t\t\t\t\tfrom \"awayjs-display/lib/textures/MappingMode\";\nimport ElementsType from \"awayjs-display/lib/graphics/ElementsType\";\nimport Graphic from \"awayjs-display/lib/graphics/Graphic\";\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\tprivate _view:View;\n\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = false;\n\tprivate _debugTimers:boolean = true;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\tpublic static GEO_NUMBER:number = 48;\n\tpublic static MATRIX_NUMBER:number = 49;\n\tpublic static PROPERTY_NUMBER:number = 50;\n\t\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\tprivate start_timeing:number;\n\tprivate _time_all:number=0;\n\tprivate _time_graphics:number=0;\n\tprivate _time_graphics_bytes:number=0;\n\tprivate _time_timeline:number=0;\n\tprivate _time_fonts:number=0;\n\tprivate _time_textfields:number=0;\n\tprivate _time_sounds:number=0;\n\tprivate _time_textures:number=0;\n\tprivate _time_materials:number=0;\n\tprivate _time_sprites:number=0;\n\tprivate _num_graphics:number=0;\n\tprivate _num_timeline:number=0;\n\tprivate _num_fonts:number=0;\n\tprivate _num_textfields:number=0;\n\tprivate _num_sounds:number=0;\n\tprivate _num_textures:number=0;\n\tprivate _num_materials:number=0;\n\tprivate _num_sprites:number=0;\n\n\n\t/**\n\t * Creates a new AWD3Parserutils object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(view:View = null)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._view = view;\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock(0,255);\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the ressource dependecniy has a id that point to the awd_block waiting for it.\n\t\t//console.log(\"AWDParser resolve dependencies\";\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar this_block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\tif(this_block.type==82){\n\t\t\t\tvar image_asset:BitmapImage2D = <BitmapImage2D> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = image_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\tthis._pFinalizeAsset(<IAsset> image_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed Texture: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==44){\n\t\t\t\tvar audio_asset:WaveAudio = <WaveAudio> resourceDependency.assets[0];\n\t\t\t\tthis_block.data = audio_asset; // Store finished asset\n\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t//console.log(\"Parsing audio \" + this_block.name);\n\t\t\t\tthis._pFinalizeAsset(<IAsset> audio_asset, this_block.name);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed WaveAudio: Name = \" + this_block.name);\n\t\t\t}\n\t\t\telse if(this_block.type==83){\n\t\t\t\tthis_block.loaded_dependencies[resourceDependency.sub_id]= resourceDependency.assets[0];\n\t\t\t\tthis_block.loaded_dependencies_cnt++;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + resourceDependency.sub_id + \" / 6 for Cubetexture\");\n\n\t\t\t\tif(this_block.loaded_dependencies_cnt==6){\n\t\t\t\t\tvar cube_image_asset = new BitmapImageCube(this_block.loaded_dependencies[0].width);\n\n\t\t\t\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\t\t\t\tcube_image_asset.draw(i, this_block.loaded_dependencies[i]);\n\n\t\t\t\t\tthis_block.data = cube_image_asset; // Store finished asset\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> cube_image_asset, this_block.name);\n\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + this_block.name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._debugTimers && !this._isParsing)\n\t\t\t\tthis.updateTimers(this_block.type);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWD3Parserutils.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWD3Parserutils.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\n\t\t\t\tif (this._debugTimers)\n\t\t\t\t\tconsole.log(\"Parsing total: \"+(this._time_all | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics: \"+this._num_graphics+\", \"+(this._time_graphics | 0)+\"ms\",\n\t\t\t\t\t\t\" | graphics bytes: \"+this._num_graphics+\", \"+(this._time_graphics_bytes | 0)+\"ms\",\n\t\t\t\t\t\t\" | timelines: \"+this._num_timeline+\", \"+(this._time_timeline | 0)+\"ms\",\n\t\t\t\t\t\t\" | fonts: \"+this._num_fonts+\", \"+(this._time_fonts | 0)+\"ms\",\n\t\t\t\t\t\t\" | sounds: \"+this._num_sounds+\", \"+(this._time_sounds | 0)+\"ms\",\n\t\t\t\t\t\t\" | mats: \"+this._num_materials+\", \"+(this._time_materials | 0)+\"ms\",\n\t\t\t\t\t\t\" | textures: \"+this._num_textures+\", \"+(this._time_textures | 0)+\"ms\",\n\t\t\t\t\t\t\" | sprites: \"+this._num_sprites+\", \"+(this._time_sprites | 0)+\"ms\");\n\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate dispose()\n\t{\n\t\tfor (var c in this._blocks) {\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[c];\n\t\t\tb.dispose();\n\t\t}\n\t}\n\n\tprivate parseNextBlock()\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n//*\n\t\tif (this._debugTimers)\n\t\t\tthis.start_timeing = performance.now();\n//*/\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\tthis._newBlockBytes = new ByteArray();\n\t\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\t\t\tthis._newBlockBytes.position = 0;\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWD3Parserutils.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t} else {\n\t\t\tthis._newBlockBytes = this._body;\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tblock = new AWDBlock(this._cur_block_id, type);\n\t\tblock.len = len;\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory(this._view);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 24:\n\t\t\t\t\tthis.parseSpriteLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 25:\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4444:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseMovieClip(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 134:\n\t\t\t\t\tthis.parseTextField(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 135:\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 136:\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseSpritePoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseGraphics(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseSpriteInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug)\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tif (this._newBlockBytes.position != blockEndBlock)\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\tif (block.errorMessages) {\n\t\t\t\tvar len:number = block.errorMessages.length;\n\t\t\t\tfor (var msgCnt:number = 0; msgCnt < len; msgCnt++)\n\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t}\n\n\t\t\tconsole.log(\"\\n\");\n\t\t}\n\n\t\tif (this._debugTimers && !this.parsingPaused)\n\t\t\tthis.updateTimers(type);\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\t}\n\n\tprivate updateTimers(type:number)\n\t{\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - this.start_timeing;\n\t\tthis._time_all += time_delta;\n\n\t\tif (type == 1) {\n\t\t\tthis._time_graphics += time_delta;\n\t\t\tthis._num_graphics++;\n\t\t} else if (type == 133) {\n\t\t\tthis._time_timeline += time_delta;\n\t\t\tthis._num_timeline++;\n\t\t} else if (type == 135) {\n\t\t\tthis._time_fonts += time_delta;\n\t\t\tthis._num_fonts++;\n\t\t} else if (type == 134) {\n\t\t\tthis._time_textfields += time_delta;\n\t\t\tthis._num_textfields++;\n\t\t} else if (type == 44) {\n\t\t\tthis._time_sounds += time_delta;\n\t\t\tthis._num_sounds++;\n\t\t} else if (type == 82) {\n\t\t\tthis._time_textures += time_delta;\n\t\t\tthis._num_textures++;\n\t\t} else if (type == 81) {\n\t\t\tthis._time_materials += time_delta;\n\t\t\tthis._num_materials++;\n\t\t} else if(type==24) {\n\t\t\tthis._time_sprites += time_delta;\n\t\t\tthis._num_sprites++;\n\t\t}\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\n\tprivate parseTesselatedFont(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\tvar new_font:Font=<Font>AssetLibrary.getAsset(this._blocks[blockID].name);\n\t\tvar newfont:Boolean = false;\n\t\tif(new_font==undefined){\n\t\t\tnew_font = new Font();\n\t\t\tnewfont=true;\n\t\t}\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar font_style_char_cnt:number;\n\t\tvar font_style_name:string;\n\t\tvar new_font_style:TesselatedFontTable;\n\t\tvar font_style_char:number;\n\t\tvar attr_count:number=0;\n\t\tvar sm_len:number;\n\t\tvar sm_end:number;\n\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\n\t\t\tfont_style_name = this.parseVarStr();\n\n\t\t\t// dirty hack for icycle\n\t\t\t// we use bold chars for non-latin chars, but we use regular for � sign,\n\t\t\t// so the dirty hack is to merge the regular and the bold style\n\t\t\tif((this._blocks[blockID].name==\"Tahoma\") && (font_style_name==\"RegularStyle\")){\n\t\t\t\tfont_style_name=\"BoldStyle\";\n\t\t\t}\n\n\t\t\tnew_font_style = new_font.get_font_table(font_style_name);\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.set_whitespace_width(this._newBlockBytes.readUnsignedInt());\n\t\t\tnew_font_style.ascent=this._newBlockBytes.readFloat();\n\t\t\tnew_font_style.descent=this._newBlockBytes.readFloat();\n\t\t\t//console.log(new_font_style.get_whitespace_width());\n\t\t\tfont_style_char_cnt = this._newBlockBytes.readUnsignedInt();\n\t\t\tfor (var j:number = 0; j < font_style_char_cnt; ++j) {\n\t\t\t\t// todo: this is basically a simplified version of the elements-parsing done in parseGraphics. Make a parseElements() instead (?)\n\t\t\t\tfont_style_char = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar char_width=this._newBlockBytes.readFloat();\n\t\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\t\t// Loop through data streams\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\t\t// Type, field type, length\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\t\tif (str_type == 2) {//face indices positions\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\t\tfor(var idx:number = 0; this._newBlockBytes.position < str_end; idx++)\n\t\t\t\t\t\t\tindices[idx] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 20;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (position + curvedata)\n\t\t\t\t\t\tattr_count = 12;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (position + curvedata + uv)\n\t\t\t\t\t\tattr_count = 28;\n\t\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(curveData) {\n\t\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len / attr_count);\n\t\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\t\tif (attr_count == 20)\n\t\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\t\t\t\t\telse if(attr_count == 12)\n\t\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\n\n\t\t\t\t\t//add UVs if they exist in the data\n\t\t\t\t\tif (attr_count == 28)\n\t\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\t\tnew_font_style.setChar(font_style_char.toString(), curve_elements, char_width);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tif(newfont) {\n\t\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\n\t\t}\n\n\t\tthis._blocks[blockID].data = new_font;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\n\t}\n\n\tprivate static textFormatProperties:Object = {\n\t\t1:AWDParser.UINT16,\t\t//fontsize\n\t\t2:AWDParser.FLOAT32,\t\t//letterspacing\n\t\t3:AWDParser.UINT8,\t\t//rotated\n\t\t4:AWDParser.UINT8,\t\t//auto-kerning\n\t\t5:AWDParser.UINT8,\t\t//baselineshift\n\t\t6:AWDParser.UINT8,\t\t//align\n\t\t7:AWDParser.FLOAT32,\t\t//intent\n\t\t8:AWDParser.FLOAT32,\t\t//left margin\n\t\t9:AWDParser.FLOAT32,\t\t//right margin\n\t\t10:AWDParser.FLOAT32};\t//line spacing\n\n\tprivate parseTextFormat(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\n\t\tvar font:Font = <Font> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar font_style_name:string = this.parseVarStr();\n\n\t\tvar newTextFormat:TextFormat = new TextFormat();\n\t\tnewTextFormat.font_name = font.name;\n\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\n\t\tif (font_table!=null) {\n\t\t\tnewTextFormat.font_style = font_style_name;\n\t\t\tnewTextFormat.font_table = font_table;\n\t\t}\n\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides = true;\n\t\tmat.curves = true;\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar uv_values:Array<number> = [];\n\t\tfor(var uvcnt:number = 0; uvcnt < num_uv_values; uvcnt++)\n\t\t\tuv_values[uvcnt] = this._newBlockBytes.readFloat();\n\n\t\tnewTextFormat.uv_values = uv_values;\n\t\tvar format_props:AWDProperties = this.parseProperties(AWDParser.textFormatProperties);\n\n\t\tnewTextFormat.size = format_props.get(1,12);\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\n\t\t//newTextFormat.rotated = format_props.get(3,false);\n\t\tnewTextFormat.kerning = format_props.get(4,true);\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\n\t\tvar tf_align_int:number = format_props.get(6,0);\n\t\tif(tf_align_int==1){\n\t\t\tnewTextFormat.align=\"right\";\n\t\t}\n\t\telse if(tf_align_int==2){\n\t\t\tnewTextFormat.align=\"center\";\n\t\t}\n\t\tnewTextFormat.indent = format_props.get(7,0);\n\t\tnewTextFormat.leftMargin = format_props.get(8,0);\n\t\tnewTextFormat.rightMargin = format_props.get(9,0);\n\t\tnewTextFormat.leading = format_props.get(10,0);\n\t\tnewTextFormat.material = mat;\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\n\t\t//newTextFormat.extra =\n\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\n\t\tthis._blocks[blockID].data = newTextFormat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\n\t}\n\n\tprivate static textFieldProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t3:AWDParser.BOOL,\n\t\t4:AWDParser.BOOL,\n\t\t5:AWDParser.BOOL,\n\t\t7:AWDParser.UINT8,\n\t\t8:AWDParser.UINT8,\n\t\t9:AWDParser.UINT8};\n\n\tprivate static textFieldTypes:Array<string> = [\"static\", \"dynamic\", \"input\", \"input\"];\n\n\n\tprivate parseTextField(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n        var newTextField = factory.createTextField();\n\t\tvar text_field_type:number=this._newBlockBytes.readUnsignedByte();\n\n\t\tnewTextField.type = AWDParser.textFieldTypes[text_field_type];\n\n\t\tif(text_field_type == 3)\n\t\t\tnewTextField.displayAsPassword = true;\n\n\t\t//\n\t\tnewTextField.textWidth = Math.abs(this._newBlockBytes.readFloat());\n\t\tnewTextField.textHeight = Math.abs(this._newBlockBytes.readFloat());\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar complete_text:string = \"\";\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\n\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\n\t\t\t\tvar text_format:TextFormat = <TextFormat> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\n\t\t\t\tif (txt_length > 0) {\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\n\t\t\t\t\tcomplete_text += this_txt;\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//newTextField.closeParagraph();\n\t\t}\n\t\tnewTextField.textFormat=text_format;\n\t\tnewTextField.text=complete_text;\n\t\t//newTextField.construct_graphics();\n\t\t// todo: optional matrix etc can be put in properties.\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.textFieldProperties);\n\t\tnewTextField.selectable = props.get(1, false);\n\t\tnewTextField.border =  props.get(3, false);\n\t\t//newTextField.renderHTML =  props.get(4, false);\n\t\t//newTextField.scrollable =  props.get(5, false);\n\t\t//newTextField.text_flow =  props.get(7, 0);\n\t\t//newTextField.orientationMode =  props.get(8, 0);\n\t\t//newTextField.line_mode =  props.get(9, 0);\n\t\tnewTextField.extra = this.parseUserAttributes();\n\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\n\t\tthis._blocks[blockID].data = newTextField;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t}\n\n\t// Block ID = 25\n\tprivate parseBillBoardLibraryBlock(blockID:number)\n\t{\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar mat:BasicMaterial = <BasicMaterial> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tmat.bothSides=true;\n\t\tvar billboard:Billboard = new Billboard(mat);\n\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tbillboard.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\n\n\t\tthis._blocks[blockID].data = billboard;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n\t}\n\t// Block ID = 24\n\tprivate parseSpriteLibraryBlock(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[data_id].data;\n\t\tthis._blocks[blockID].geoID = data_id;\n\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\t//mat.preserveAlpha = true;\n\t\t\tmat.alphaBlending = true;\n\t\t\tmat.useColorTransform = true;\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar start_timeing = performance.now();\n\t\tvar sprite:Sprite = new Sprite();\n\t\tgraphics.copyTo(sprite.graphics);\n\t\tvar end_timing = performance.now();\n\t\tvar time_delta = end_timing - start_timeing;\n\t\tthis._time_graphics_bytes += time_delta;\n\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\n\t\t\tsprite.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\n\t\tvar count:number = this._newBlockBytes.readUnsignedShort();\n\t\t//if(count != sprite.graphics.count)\n\t\t//\tthrow new Error(\"num elements does not match num subsprites\";\n\n\t\tfor (var i:number = 0; i < count; i++) {\n\t\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\t\tvar sampler:Sampler2D = new Sampler2D();\n\t\t\tvar graphic:Graphic = sprite.graphics.getGraphicAt(i);\n\t\t\tif(graphic) {\n\t\t\t\tgraphic.style = new Style();\n\t\t\t\tgraphic.style.addSamplerAt(sampler, graphic.material.getTextureAt(0));\n\t\t\t}\n\t\t\tif (type == 3) {// solid color fill - need tx and ty\n\t\t\t\tvar tx:number=this._newBlockBytes.readFloat();\n\t\t\t\tvar ty:number=this._newBlockBytes.readFloat();\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(0, 0, 0, 0, tx, ty);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type == 4) {// texture fill - need full matrix\n\t\t\t\tvar matrix:Array<number> = this.parseMatrix32RawData();\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type == 5) {// linear gradient fill - need a, c , tx and ty\n\t\t\t\tvar newMatrix:Matrix = new Matrix(this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat(), 0, 0, this._newBlockBytes.readFloat(), this._newBlockBytes.readFloat());\n\t\t\t\tif(graphic) {\n\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\tgraphic.style.uvMatrix = newMatrix;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\telse if (type == 6) {// radial gradient fill - need image rectangle + full transform\n\t\t\t\t\tvar x:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar y:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar width:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar height:number = this._newBlockBytes.readFloat();\n\t\t\t\t\tvar matrix:Array<number> = this.parseMatrix32RawData();\n\t\t\t\t\tif(graphic) {\n\t\t\t\t\t\tsampler.imageRect = new Rectangle(x, y, width, height);\n\t\t\t\t\t\tgraphic.material.imageRect = true;\n\t\t\t\t\t\tgraphic.material.animateUVs = true;\n\t\t\t\t\t\tgraphic.style.uvMatrix = new Matrix(matrix[0], matrix[2], matrix[1], matrix[3], matrix[4], matrix[5]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif(graphic) {\n\t\t\t\t//check if curves are needed\n\t\t\t\tif (graphic.elements.getCustomAtributes(\"curves\"))\n\t\t\t\t\tgraphic.material.curves = true;\n\t\t\t}\n\t\t\t// todo: finish optional properties (spreadmode + focalpoint)\n\t\t\tthis._newBlockBytes.readUnsignedInt();\n\t\t}\n\n\t\tthis.parseProperties(null);\n\t\tsprite.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\n\n\t\tthis._blocks[blockID].data = sprite;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Library-Sprite: Name = '\" + name + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t}\n\n\tprivate parseAudioBlock(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Audio file\");\n\t}\n\n\tprivate static movieClipProperties:Object = {\n\t\t1:AWDParser.FLOAT32,\t//fps\n\t\t2:AWDParser.UINT16,\t\t// sceneID if not present or 0, mc is no scene\n\t\t3:AWDParser.UINT8};\t\t// scripting-language right now its always as2\n\t//Block ID = 4\n\tprivate parseMovieClip(blockID:number, factory:ITimelineSceneGraphFactory)\n\t{\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar cmd_asset:DisplayObject;\n\t\tvar new_timeline:Timeline = new Timeline();\n\t\tvar new_mc = factory.createMovieClip(new_timeline);\n\t\tvar name = this.parseVarStr();\n\n\t\t// register list of potential childs\n\t\t// a potential child can be reused on a timeline (added / removed / added)\n\t\t// However, for each potential child, we need to register the max-number of instances that a frame contains\n\t\t// we parse 2 lists of potential-childs:\n\t\t// -\tthe first list contains potential-childs that are only ever instanced once per frame.\n\t\t// -\tthe second list contains potential-childs that are instanced multiple times on some frames.\n\n\t\t// on registering a child, the child gets a incremental-id assigned. This is the id, that the commands are using to access the childs.\n\t\t// hence we need to be careful to register all objects in correct order.\n\n\t\tvar num_potential_childs:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\n\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t}\n\t\t}\n\n\t\tvar num_all_display_instances:number = num_potential_childs;\n\n\t\tvar num_potential_childs_multi_instanced = this._newBlockBytes.readUnsignedShort();\n\t\tfor (i = 0; i < num_potential_childs_multi_instanced; i++) {\n\t\t\tcmd_asset = <DisplayObject> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tvar num_instances:number = this._newBlockBytes.readUnsignedShort();\n\t\t\tnum_all_display_instances += num_instances;\n\t\t\tif (cmd_asset != null) {\n\t\t\t\tfor (j = 0; j < num_instances; j++)\n\t\t\t\t\tnew_timeline.registerPotentialChild(cmd_asset);\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < num_instances; j++) {\n\t\t\t\t\t//todo: register a default display object on timeline, so we do not mess up the incremental obj-id\n\t\t\t\t\t//new_mc.registerPotentialChild(cmd_asset);\n\t\t\t\t\tconsole.log(\"ERROR when collecting objects for timeline\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed \" + (num_potential_childs + num_potential_childs_multi_instanced) + \" potential childs. They will be used by \" + num_all_display_instances + \" instances.\");\n\n\t\t// register list of potential sounds - for now we always have 0 sounds\n\t\tvar num_potential_sounds = this._newBlockBytes.readUnsignedShort();\n\n\n\t\tvar str_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tvar str_len = 0;\n\t\tvar str_data_type = 0;\n\t\tvar str_type=0;\n\t\tvar str_counter=0;\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\t// the first 6 lists are not optional and always in same order\n\t\t\t// hence we can get type by incremental counter instead of stored uint8\n\t\t\tif(str_counter<6)\n\t\t\t\tstr_type=str_counter;\n\t\t\telse\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// get the data type for this stream (1:UINT8 - 2:UINT16 - 3:UINT32)\n\t\t\tstr_data_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t// size of this stream in byte\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tif(str_len>0) {\n\t\t\t\tvar keyframes_start_indices_data:ByteArray = new ByteArray(str_len);\n\t\t\t\tthis._newBlockBytes.readBytes(keyframes_start_indices_data, 0, str_len);\n\t\t\t\tvar new_buffer:ArrayBufferView;\n\t\t\t\t//console.log(\"str_data_type = \"+str_type);\n\t\t\t\tswitch (str_data_type) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_buffer = new Uint8Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_buffer = new Uint16Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_buffer = new Uint32Array(<ArrayBuffer> keyframes_start_indices_data.arraybytes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tswitch (str_type) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tnew_timeline.keyframe_durations = new_buffer;\n\t\t\t\t\t\tnew_timeline.numKeyFrames=str_len / str_data_type;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnew_timeline.frame_command_indices = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tnew_timeline.frame_recipe = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tnew_timeline.command_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tnew_timeline.command_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tnew_timeline.add_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tnew_timeline.remove_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tnew_timeline.update_child_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tnew_timeline.update_child_props_indices_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tnew_timeline.update_child_props_length_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tnew_timeline.property_type_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 11:\n\t\t\t\t\t\tnew_timeline.property_index_stream = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\tnew_timeline.properties_stream_int = new_buffer;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr_counter++;\n\t\t}\n\t\tvar lc:number=0;\n\t\tvar float_array_data:ByteArray;\n\t\tstr_cnt = this._newBlockBytes.readUnsignedByte();\n\t\tfor(i=0; i<str_cnt;i++){\n\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tswitch(str_type) {\n\t\t\t\tcase 0://mtx_scale\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_scale_rot=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1://mtx_pos\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_pos=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2://mtx_all\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_mtx_all=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3://ct\n\t\t\t\t\tfloat_array_data = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(float_array_data, 0, str_len);\n\t\t\t\t\tnew_timeline.properties_stream_f32_ct=new Float32Array(<ArrayBuffer> float_array_data.arraybytes);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4://labels\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t//console.log(\"start reading labels \"+str_len);\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tnew_timeline._labels[this.parseVarStr()] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5://name_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tvar string_props_array:Array<string>=[];\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tstring_props_array.push(this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort()));\n\t\t\t\t\t}\n\t\t\t\t\tnew_timeline.properties_stream_strings = string_props_array;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6://script_stream\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\tfor (lc = 0; lc < str_len; lc++) {\n\t\t\t\t\t\tvar frame_index=this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tvar one_str_len=this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t//this._newBlockBytes.readUTFBytes(one_str_len);\n\t\t\t\t\t\tnew_timeline.add_framescript(this._newBlockBytes.readUTFBytes(one_str_len), frame_index);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnew_timeline.init();\n\n\t\tvar sceneID:number = 0;\n\t\tvar fps:number = 25;\n\t\tthis.parseProperties(AWDParser.movieClipProperties);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset>new_mc, name);\n\n\t\tthis._blocks[blockID].data = new_mc;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| sceneID = \" + sceneID + \"| numFrames = \" + new_mc.timeline.numFrames);\n\t}\n\n\tprivate static graphicsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\tprivate static elementsProperties:Object = {\n\t\t1:AWDParser.GEO_NUMBER,\n\t\t2:AWDParser.GEO_NUMBER};\n\n\t//Block ID = 1\n\tprivate parseGraphics(blockID:number)\n\t{\n\t\tvar graphics:Graphics = new Graphics();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numElements:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.graphicsProperties);\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t//console.log(\"numElements \"+numElements);\n\t\t// Loop through sub sprites\n\t\tfor (var elements_parsed:number = 0;  elements_parsed < numElements; elements_parsed++) {\n\t\t\tvar is_curve_elements:boolean=false;\n\t\t\tvar attr_count:number=0;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\tvar elementsProps:AWDProperties = this.parseProperties(AWDParser.elementsProperties);\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 4) {\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t} else if (str_type == 7) {\n\t\t\t\t\tweights = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end)\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 7 x float32 (2d pos + uv + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 28;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 20;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t} else if (str_type == 12) {// combined vertex2D stream 5 x float32 (2d pos + curvedata)\n\t\t\t\t\tis_curve_elements = true;\n\t\t\t\t\tattr_count = 12;\n\t\t\t\t\tvar curveData:ByteArray = new ByteArray(str_len);\n\t\t\t\t\tthis._newBlockBytes.readBytes(curveData, 0, str_len);\n\t\t\t\t}else {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-sprite attributes for now\n\n\t\t\tif(is_curve_elements){\n\t\t\t\tvar vertexBuffer:AttributesBuffer = new AttributesBuffer(attr_count, str_len/attr_count);\n\t\t\t\tvertexBuffer.bufferView = new Uint8Array(<ArrayBuffer> curveData.arraybytes);\n\n\t\t\t\tvar curve_elements:TriangleElements = new TriangleElements(vertexBuffer);\n\n\t\t\t\tcurve_elements.setPositions(new Float2Attributes(vertexBuffer));\n\t\t\t\tif(attr_count==20){\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Float3Attributes(vertexBuffer));\n\t\t\t\t}\n\t\t\t\telse if(attr_count==12){\n\t\t\t\t\tcurve_elements.setCustomAttributes(\"curves\", new Byte4Attributes(vertexBuffer, false));\n\t\t\t\t}\n\n\t\t\t\tif(attr_count==28)\n\t\t\t\t\tcurve_elements.setUVs(new Float2Attributes(vertexBuffer));\n\n\t\t\t\tgraphics.addGraphic(curve_elements);\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements with curves\");\n\n\t\t\t} else {\n\t\t\t\tvar triangle_elements = new TriangleElements(new AttributesBuffer());\n\n\t\t\t\tif (weights)\n\t\t\t\t\ttriangle_elements.jointsPerVertex = weights.length / (verts.length / 3);\n\n\t\t\t\tif (normals)\n\t\t\t\t\ttriangle_elements.autoDeriveNormals = false;\n\n\t\t\t\ttriangle_elements.autoDeriveTangents = true;\n\n\t\t\t\ttriangle_elements.setIndices(indices);\n\t\t\t\ttriangle_elements.setPositions(verts);\n\t\t\t\ttriangle_elements.setNormals(normals);\n\t\t\t\ttriangle_elements.setUVs(uvs);\n\t\t\t\ttriangle_elements.setJointWeights(weights);\n\t\t\t\ttriangle_elements.setJointIndices(w_indices);\n\n\t\t\t\tvar scaleU:number = elementsProps.get(1, 1);\n\t\t\t\tvar scaleV:number = elementsProps.get(2, 1);\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the graphics\n\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\t\tsetSubUVs = true;\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\n\t\t\t\t}\n\n\t\t\t\tif (setSubUVs)\n\t\t\t\t\ttriangle_elements.scaleUV(scaleU, scaleV);\n\n\t\t\t\tgraphics.addGraphic(triangle_elements);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleElements\");\n\t\t\t}\n\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating sprites (and their material assignments.)\n\t\t}\n\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgraphics.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> graphics, name);\n\t\tthis._blocks[blockID].data = graphics;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed Graphics: Name = \" + name);\n\t}\n\n\tprivate static primitiveProperties:Object = {\n\t\t101:AWDParser.GEO_NUMBER,\n\t\t102:AWDParser.GEO_NUMBER,\n\t\t103:AWDParser.GEO_NUMBER,\n\t\t110:AWDParser.GEO_NUMBER,\n\t\t111:AWDParser.GEO_NUMBER,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t303:AWDParser.UINT16,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t703:AWDParser.BOOL,\n\t\t704:AWDParser.BOOL};\n\n\tprivate static primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"];\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number)\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar elements_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties(AWDParser.primitiveProperties);\n\n\t\t// to do, not all properties are set on all primitives\n\t\tswitch (primType) {\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(null, ElementsType.TRIANGLE, props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(null, ElementsType.TRIANGLE, props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//graphics.elements;\n\t\t\t//graphics.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7))\n\t\t\t\tprimType = 0;\n\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + AWDParser.primitiveTypes[primType]);\n\t\t}\n\t}\n\n\tprivate static containerProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number)\n\t{\n\t\tvar name:string;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tif (parent) {\n\t\t\tparent.addChild(ctr);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.containerProperties);\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t} else {// in other versions we do not read the Container properties\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t}\n\n\tprivate static spriteInstanceProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL};\n\n\t// Block ID = 23\n\tprivate parseSpriteInstance(blockID:number)\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar asset:IAsset = <IAsset> this._blocks[data_id].data;\n\t\tvar graphics:Graphics;\n\t\tvar prefab:PrefabBase;\n\t\tvar isPrefab:boolean=false;\n\t\tif (asset.isAsset(Graphics)) {\n\t\t\tgraphics = <Graphics> asset;\n\t\t} else {\n\t\t\tisPrefab = true;\n\t\t\tprefab = <PrefabBase> asset;\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar num_materials:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar materials:Array<MethodMaterial> = new Array<MethodMaterial>();\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tvar mat:MethodMaterial;\n\t\tfor (var materials_parsed:number = 0; materials_parsed < num_materials; materials_parsed++) {\n\t\t\tmat = <MethodMaterial> (this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultMaterial());\n\t\t\tmaterials[materials_parsed] = mat;\n\t\t\tmaterialNames[materials_parsed] = mat.name;\n\t\t}\n\n\t\tvar sprite:Sprite;\n\n\t\tif (isPrefab) {\n\t\t\tsprite = <Sprite> prefab.getNewObject()\n\t\t} else {\n\t\t\tsprite = new Sprite();\n\t\t\tgraphics.copyTo(sprite.graphics);\n\t\t}\n\n\t\tsprite.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(sprite);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\n\t\t}\n\n\t\tif (materials.length >= 1 && sprite.graphics.count == 1) {\n\t\t\tsprite.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\t// Assign each sub-sprite in the sprite a material from the list. If more sub-sprites\n\t\t\t// than materials, repeat the last material for all remaining sub-sprites.\n\t\t\tfor (var i:number = 0; i < sprite.graphics.count; i++)\n\t\t\t\tsprite.graphics.getGraphicAt(i).material = materials[Math.min(materials.length - 1, i)];\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties(AWDParser.spriteInstanceProperties);\n\t\t\tsprite.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\tsprite.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tsprite.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> sprite, name);\n\t\tthis._blocks[blockID].data = sprite;\n\n\t\tif (this._debug) {\n\t\t\tif (isPrefab)\n\t\t\t\tconsole.log(\"Parsed a Sprite for Prefab: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Prefab-Name = \" + prefab.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t\telse\n\t\t\t\tconsole.log(\"Parsed a Sprite for Graphics: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Graphics-Name = \" + graphics.name + \" | Graphics-Count = \" + sprite.graphics.count + \" | Mat-Names = \" + materialNames);\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar asset:Skybox = new Skybox();\n\t\tvar tex:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[this._newBlockBytes.readUnsignedInt()].data || DefaultMaterialManager.getDefaultImageCube());\n\t\tasset.texture = tex;\n\n\t\tthis.parseProperties(null);\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + tex.name);\n\t}\n\n\tprivate static lightProperties:Object = {\n\t\t1:AWDParser.PROPERTY_NUMBER,\n\t\t2:AWDParser.PROPERTY_NUMBER,\n\t\t3:AWDParser.COLOR,\n\t\t4:AWDParser.PROPERTY_NUMBER,\n\t\t5:AWDParser.PROPERTY_NUMBER,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.COLOR,\n\t\t8:AWDParser.PROPERTY_NUMBER,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.UINT8,\n\t\t11:AWDParser.PROPERTY_NUMBER,\n\t\t12:AWDParser.UINT16,\n\t\t21:AWDParser.MATRIX_NUMBER,\n\t\t22:AWDParser.MATRIX_NUMBER,\n\t\t23:AWDParser.MATRIX_NUMBER};\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number)\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.lightProperties);\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\t\t}\n\n\t\tif (lightType == 2) {\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\t\t}\n\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2)\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(light);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\t}\n\n\tprivate static cameraProperties:Object = {\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER};\n\n\tprivate static cameraPivotProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number)\n\t{\n\t\tvar parent:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.cameraProperties);\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tif (parent) {\n\t\t\tparent.addChild(camera);\n\t\t\tparentName = parent.name;\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties(AWDParser.cameraPivotProperties);\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (var k:number = 0; k < numLights; k++) {\n\t\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tlightsArray.push(light);\n\t\t\tlightsArrayNames.push(light.name);\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames);\n\t}\n\n\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\tprivate static materialProperties:Object = {\n\t\t1:AWDParser.INT32,\n\t\t2:AWDParser.BADDR,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL};\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number)\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\tprops = this.parseProperties(AWDParser.materialProperties);\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\n\t\tvar debugString:string = \"\";\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\tmat = new MethodMaterial();\n\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = this.parseUserAttributes();\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.style.sampler = new Sampler2D(props.get(13, false));\n\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\t\n\tprivate static material_v1Properties:Object = {1:AWDParser.UINT32,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t4:AWDParser.UINT8,\n\t\t5:AWDParser.BOOL,\n\t\t6:AWDParser.BOOL,\n\t\t7:AWDParser.BOOL,\n\t\t8:AWDParser.BOOL,\n\t\t9:AWDParser.UINT8,\n\t\t10:AWDParser.PROPERTY_NUMBER,\n\t\t11:AWDParser.BOOL,\n\t\t12:AWDParser.PROPERTY_NUMBER,\n\t\t13:AWDParser.BOOL,\n\t\t15:AWDParser.PROPERTY_NUMBER,\n\t\t16:AWDParser.UINT32,\n\t\t17:AWDParser.BADDR,\n\t\t18:AWDParser.PROPERTY_NUMBER,\n\t\t19:AWDParser.PROPERTY_NUMBER,\n\t\t20:AWDParser.UINT32,\n\t\t21:AWDParser.BADDR,\n\t\t22:AWDParser.BADDR};\n\n\tprivate static method_v1Properties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4};\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number)\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar diffuseImage:BitmapImage2D;\n\t\tvar normalImage:BitmapImage2D;\n\t\tvar specImage:BitmapImage2D;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.material_v1Properties);\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\n\t\t\t\t\tmat = new MethodMaterial();\n\t\t\t\t\tmat.ambientMethod.texture = texture;\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"'\" + (texture? \" | Texture-Name = \" + texture.name : \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdiffuseImage = <BitmapImage2D> this._blocks[props.get(17, 0)].data;\n\t\t\t\tnormalImage = <BitmapImage2D> this._blocks[props.get(3, 0)].data;\n\t\t\t\tspecImage = <BitmapImage2D> this._blocks[props.get(21, 0)].data;\n\t\t\t\tmat.lightPicker = <LightPickerBase> this._blocks[props.get(22, 0)].data;\n\t\t\t\tmat.style.sampler = new Sampler2D(props.get(13, false), props.get(5, true), props.get(6, true));\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\n\t\t\t\tif (diffuseImage) {\n\t\t\t\t\tmat.diffuseTexture = new Single2DTexture(diffuseImage);\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (normalImage) {\n\t\t\t\t\tmat.normalMethod.texture = new Single2DTexture(normalImage);\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalImage.name;\n\t\t\t\t}\n\n\t\t\t\tif (specImage) {\n\t\t\t\t\tmat.specularMethod.texture = new Single2DTexture(specImage);\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specImage.name;\n\t\t\t\t}\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambientMethod.strength = props.get(15, 1.0);\n\t\t\t\tmat.diffuseMethod.color = props.get(16, 0xffffff);\n\t\t\t\tmat.specularMethod.strength = props.get(18, 1.0);\n\t\t\t\tmat.specularMethod.gloss = props.get(19, 50);\n\t\t\t\tmat.specularMethod.color = props.get(20, 0xffffff);\n\n\t\t\t\tfor (var methods_parsed:number = 0; methods_parsed < num_methods; methods_parsed++) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties(AWDParser.method_v1Properties);\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\t\t\t\t\t\t\tvar effectMethod:EffectMethodBase = <EffectMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.addEffectMethod(effectMethod);\n\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + effectMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\t\t\t\t\t\t\tvar shadowMapMethod:ShadowMapMethodBase = <ShadowMapMethodBase> this._blocks[props.get(1, 0)].data;\n\t\t\t\t\t\t\tmat.shadowMethod = shadowMapMethod;\n\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + shadowMapMethod.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\tvar cubeTexture:SingleCubeTexture = new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod();\n\t\t\t\t\t\t\tmat.ambientMethod.texture = cubeTexture;\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + cubeTexture.name;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(texture);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(texture, this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\tvar texture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(1, 0)].data);\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(<Single2DTexture> mat.normalMethod.texture || texture, texture);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + texture.name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: we should not need this anymore (if using texture-atlas)\n\t\telse if ((type>=3)&&(type<=7)){\n\t\t\t// if this is a basic material, we create it, finalize it, assign it to block-cache and return.\n\t\t\tvar color:number = props.get(1, 0xcccccc);\n\t\t\tdebugString+=color;\n\t\t\tvar diffuseTexture:Single2DTexture = new Single2DTexture(<BitmapImage2D> this._blocks[props.get(2, 0)].data);\n\t\t\tif(type==5){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.LINEAR_GRADIENT;\n\t\t\t}\n\t\t\telse if(type==6){\n\t\t\t\tdiffuseTexture.mappingMode = MappingMode.RADIAL_GRADIENT;\n\t\t\t}\n\t\t\tvar basic_mat:BasicMaterial = new BasicMaterial();\n\t\t\tbasic_mat.texture = diffuseTexture;\n\t\t\tbasic_mat.bothSides = true;\n\t\t\t//basic_mat.preserveAlpha = true;\n\t\t\tbasic_mat.alphaBlending = true;\n\t\t\tbasic_mat.extra = this.parseUserAttributes();\n\t\t\tthis._pFinalizeAsset(<IAsset> basic_mat, name);\n\t\t\tthis._blocks[blockID].data = basic_mat;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(debugString);\n\t\t\treturn;\n\t\t\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(debugString);\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number)\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tvar url:string = this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedInt());\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tvar data_len:number = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWD3Parserutils - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing a \" + [\"external\", \"embed\"][type] + \" Bitmap for Texture\");\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number)\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar i:number;\n\n\t\tthis._texture_users[ this._cur_block_id ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id] = [];\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true, i);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray = new ByteArray(data_len);\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true, i);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Start parsing 6 \" + [\"external\", \"embed\"][type] + \" Bitmaps for CubeTexture\");\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number)\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number)\n\t{\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tvar light:LightBase = <LightBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar asset:ShadowMethodBase = this.parseShadowMethodList(light, blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", light.name);\n\t}\n\n\tprivate static commandProperties:Object = {\n\t\t1:AWDParser.BADDR};\n\n\tprivate static targetProperties:Object = {\n\t\t1:AWDParser.MATRIX_NUMBER,\n\t\t2:AWDParser.MATRIX_NUMBER,\n\t\t3:AWDParser.MATRIX_NUMBER,\n\t\t4:AWDParser.UINT8};\n\t\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number)\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar parentObject:DisplayObjectContainer = <DisplayObjectContainer> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\tvar targetObject:DisplayObjectContainer;\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.commandProperties);\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\t\t\t\ttargetObject = this._blocks[props.get(1, 0)].data;\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tif (parentObject)\n\t\t\t\t\tparentObject.addChild(targetObject);\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties(AWDParser.targetProperties);\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\t\t}\n\n\t\tthis._blocks[blockID].data = targetObject;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t}\n\t\n\tprivate static metaDataProperties:Object = {\n\t\t1:AWDParser.UINT32,\n\t\t2:AWDParser.AWDSTRING,\n\t\t3:AWDParser.AWDSTRING,\n\t\t4:AWDParser.AWDSTRING,\n\t\t5:AWDParser.AWDSTRING};\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number)\n\t{\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.metaDataProperties);\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number)\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\tprivate shadowMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL,\n\t\t801:AWDParser.MTX4x4}\n\t\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties(this.shadowMethodListProperties);\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> this._blocks[props.get(1, 0)].data);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\n\t\tthis._blocks[blockID].data = skeleton;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tfor (var joints_parsed:number = 0; joints_parsed < num_joints; joints_parsed++) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Float32Array = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t}\n\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\n\t\tthis._blocks[blockID].data = pose;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/)\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_id:number;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tpose_id = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_id].data, frame_dur);\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\t\n\tprivate spritePoseAnimationProperties:Object = {\n\t\t1:AWDParser.BOOL,\n\t\t2:AWDParser.BOOL};\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseSpritePoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false)\n\t{\n\t\tvar subSpriteParsed:number /*uint*/;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar elements:TriangleElements;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Short3Attributes;\n\t\tvar verts:Array<number>;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geo_id:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar graphics:Graphics = <Graphics> this._blocks[geo_id].data;\n\n\t\tvar uvs:Array<Float32Array> = this.getUVForVertexAnimation(geo_id);\n\n\t\tvar num_frames:number = (!poseOnly)? this._newBlockBytes.readUnsignedShort() : 1;\n\n\t\tvar num_subsprites:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar num_Streams:number = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var streamsParsed:number = 0; streamsParsed < num_Streams; streamsParsed++)\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\n\t\tprops = this.parseProperties(this.spritePoseAnimationProperties);\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tvar frame_dur:number;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgraphics = new Graphics();\n\t\t\tsubSpriteParsed = 0;\n\t\t\twhile (subSpriteParsed < num_subsprites) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = graphics.getGraphicAt(subSpriteParsed).elements.indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\t\t\t\telements.setIndices(indices);\n\t\t\t\t\t\telements.setPositions(verts);\n\t\t\t\t\t\telements.setUVs(uvs[subSpriteParsed]);\n\t\t\t\t\t\telements.setNormals(null);\n\t\t\t\t\t\telements.setTangents(null);\n\t\t\t\t\t\telements.autoDeriveNormals = false;\n\t\t\t\t\t\telements.autoDeriveTangents = false;\n\t\t\t\t\t\tsubSpriteParsed++;\n\t\t\t\t\t\tgraphics.addGraphic(elements);\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(graphics, frame_dur);\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Graphics-Name = \" + graphics.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\tprivate static vertexAnimationSetProperties:Object = {\n\t\t1:AWDParser.UINT16};\n\t\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.vertexAnimationSetProperties);\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\tvar clipNode:AnimationClipNodeBase;\n\t\tfor (var frames_parsed:number = 0; frames_parsed < num_frames; frames_parsed++) {\n\t\t\tclipNode = <AnimationClipNodeBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\t\t\tif (clipNode instanceof VertexClipNode)\n\t\t\t\tvertexFrames.push(<VertexClipNode> clipNode);\n\t\t\telse if (clipNode instanceof SkeletonClipNode)\n\t\t\t\tskeletonFrames.push(<SkeletonClipNode> clipNode);\n\t\t}\n\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames);\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames);\n\t\t}\n\t}\n\n\tprivate static animatorSetProperties:Object = {1:AWDParser.BADDR};\n\t\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/)\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties(AWDParser.animatorSetProperties);\n\t\tvar targetAnimationSet:AnimationSetBase = <AnimationSetBase> this._blocks[this._newBlockBytes.readUnsignedInt()].data;\n\n\t\tvar targetSpritees:Array<Sprite> = new Array<Sprite>();\n\t\tvar targetSpriteLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tfor (var i:number /*int*/ = 0; i < targetSpriteLength; i++)\n\t\t\ttargetSpritees.push(<Sprite> this._blocks[this._newBlockBytes.readUnsignedInt()].data);\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1)\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> this._blocks[props.get(1, 0)].data);\n\t\telse if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\n\t\tfor (i = 0; i < targetSpritees.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetSpritees[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\telse if (type == 2)\n\t\t\t\ttargetSpritees[i].animator = (<VertexAnimator> thisAnimator);\n\t\t}\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\tprivate sharedMethodListProperties:Object = {\n\t\t1:AWDParser.BADDR,\n\t\t2:AWDParser.BADDR,\n\t\t3:AWDParser.BADDR,\n\t\t101:AWDParser.PROPERTY_NUMBER,\n\t\t102:AWDParser.PROPERTY_NUMBER,\n\t\t103:AWDParser.PROPERTY_NUMBER,\n\t\t104:AWDParser.PROPERTY_NUMBER,\n\t\t105:AWDParser.PROPERTY_NUMBER,\n\t\t106:AWDParser.PROPERTY_NUMBER,\n\t\t107:AWDParser.PROPERTY_NUMBER,\n\t\t201:AWDParser.UINT32,\n\t\t202:AWDParser.UINT32,\n\t\t301:AWDParser.UINT16,\n\t\t302:AWDParser.UINT16,\n\t\t401:AWDParser.UINT8,\n\t\t402:AWDParser.UINT8,\n\t\t601:AWDParser.COLOR,\n\t\t602:AWDParser.COLOR,\n\t\t701:AWDParser.BOOL,\n\t\t702:AWDParser.BOOL};\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties(this.sharedMethodListProperties);\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(new SingleCubeTexture(<BitmapImageCube> this._blocks[props.get(1, 0)].data), <number> props.get(101, 1));\n\t\t\t\tvar targetID:number = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <TextureBase> this._blocks[targetID].data;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(this._blocks[props.get(1, 0)].data, this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(this._blocks[props.get(1, 0)].data, props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(this._blocks[props.get(1, 0)].data, props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\t\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\t\t\tvar attributes:Object = {};\n\n\t\t\tfor (var attibuteCnt:number = 0; this._newBlockBytes.position < list_end; attibuteCnt++) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_len:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar props:AWDProperties = new AWDProperties();\n\t\tvar list_end:number = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\t\t\tvar len:number;\n\t\t\tvar key:number;\n\t\t\tvar type:number;\n\n\t\t\tfor (var propertyCnt:number = 0; this._newBlockBytes.position < list_end; propertyCnt++) {\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected[key]) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\t\tvar accuracy:boolean;\n\n\t\tswitch (type) {\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\t\t\tcase AWDParser.GEO_NUMBER:\n\t\t\t\taccuracy = this._accuracyGeo;\n\t\t\tcase AWDParser.MATRIX_NUMBER:\n\t\t\t\taccuracy = this._accuracyMatrix;\n\t\t\tcase AWDParser.PROPERTY_NUMBER:\n\t\t\t\taccuracy = this._accuracyProps;\n\t\t\tdefault:\n\t\t\t\tif (accuracy) {\n\t\t\t\t\telem_len = 8;\n\t\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\t} else {\n\t\t\t\t\telem_len = 4;\n\t\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\t}\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\tfor (var num_read:number = 0; num_read < num_elems; num_read++)\n\t\t\t\tlist[num_read] = read_func.call(this._newBlockBytes);\n\n\t\t\treturn list;\n\t\t} else {\n\t\t\treturn read_func.call(this._newBlockBytes);\n\t\t}\n\t}\n\n\tprivate parseHeader()\n\t{\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tvar flags:number = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Graphics-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tvar body_len:number = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable())\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(spriteID:number /*uint*/):Array<Float32Array>\n\t{\n\t\tif (this._blocks[spriteID].data instanceof Sprite)\n\t\t\tspriteID = this._blocks[spriteID].geoID;\n\n\t\tif (this._blocks[spriteID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\n\n\t\tvar graphics:Graphics = (<Graphics> this._blocks[spriteID].data);\n\t\tvar elements:TriangleElements;\n\t\tvar uvsForVertexAnimation:Array<ArrayBufferView> = this._blocks[spriteID].uvsForVertexAnimation = new Array<Float32Array>();\n\n\t\tvar len:number = graphics.count;\n\t\tfor (var geoCnt:number= 0; geoCnt < len; geoCnt++) {\n\t\t\telements = <TriangleElements> graphics.getGraphicAt(geoCnt).elements;\n\t\t\tuvsForVertexAnimation[geoCnt] = elements.uvs.get(elements.numVertices);\n\t\t}\n\n\t\treturn this._blocks[spriteID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\t\treturn this._newBlockBytes.readUTFBytes(this._newBlockBytes.readUnsignedShort());\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\n\t\treturn this._newBlockBytes.readFloat();\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\n\t\tfor (var i:number = 0; i < 6; i++)\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Float32Array\n\t{\n\t\tvar mtx_raw:Float32Array = new Float32Array(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n}\n\nexport default AWDParser;\n\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any)\n\t{\n\t\tthis[key] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\treturn (this[key] || fallback);\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport DisplayObject\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport Camera\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport VertexClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/VertexClipNode\";\nimport VertexAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/VertexAnimationSet\";\n\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current elements being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstElements:TriangleElements;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _sprite:Sprite;\n\tprivate _graphics:Graphics;\n\n\tprivate materialFinal:boolean = false;\n\tprivate graphicsCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar material:MethodMaterial = new MethodMaterial(<BitmapImage2D> resourceDependency.assets[0]);\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\tmaterial.name = this._sprite.material.name;\n\t\tthis._sprite.material = material;\n\t\tthis._pFinalizeAsset(material);\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\tthis._pFinalizeAsset(this._sprite);\n\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\tthis._pFinalizeAsset(this._sprite);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a sprite only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._sprite = new Sprite();\n\t\t\t\tthis._graphics = this._sprite.graphics;\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._sprite.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._sprite.material = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\t\t\t\t\t(<MethodMaterial> this._sprite.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_graphics.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_sprite.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.graphicsCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.graphicsCreated) {\n\t\t\t\tthis.graphicsCreated = true;\n\t\t\t\t//create default subgraphics\n\t\t\t\tthis._graphics.addGraphic(this._firstElements.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._sprite.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite.graphics);\n\t\t\t\t\tthis._pFinalizeAsset(this._sprite);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader()\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames()\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._sprite.material.name = this._materialNames[0];\n\t\telse\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the sprite.\n\t */\n\tprivate parseUV()\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces()\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final sprite corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame elements.\n\t */\n\tprivate parseFrames()\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar graphics:Graphics;\n\t\tvar elements:TriangleElements;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\n\t\t\tif (this._firstElements == null)\n\t\t\t\tthis._firstElements = elements;\n\n\t\t\tgraphics = new Graphics();\n\t\t\tgraphics.addGraphic(elements);\n\n\t\t\telements.setIndices(this._indices);\n\t\t\telements.setPositions(fvertices);\n\t\t\telements.setUVs(this._finalUV);\n\t\t\t// cause explicit updates\n\t\t\telements.setNormals(null);\n\t\t\telements.setTangents(null);\n\t\t\t// turn auto updates off because they may be animated and set explicitly\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(graphics, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport default MD2Parser;",
    "import Quaternion\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\n\nimport JointPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/JointPose\";\nimport SkeletonPose\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonPose\";\nimport SkeletonClipNode\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\";\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport default MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Quaternion\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\n\nimport SkeletonAnimationSet\t\t\t\tfrom \"awayjs-renderergl/lib/animators/SkeletonAnimationSet\";\nimport Skeleton\t\t\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/Skeleton\";\nimport SkeletonJoint\t\t\t\t\tfrom \"awayjs-renderergl/lib/animators/data/SkeletonJoint\";\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the graphics of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _sprite:Sprite;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _elementsData:Array<ElementsData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _graphics:Graphics;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5sprite\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._sprite = new Sprite();\n\t\t\t\tthis._graphics = this._sprite.graphics;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._elementsData.length; ++i)\n\t\t\t\t\tthis._graphics.addGraphic(this.translateElements(this._elementsData[i].positionData, this._elementsData[i].weightData, this._elementsData[i].indices));\n\n\t\t\t\t//_graphics.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_sprite.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._sprite);\n\n\t\t\t\tthis._pFinalizeAsset(this._graphics);\n\t\t\t\tthis._pFinalizeAsset(this._sprite);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numElementsData:number /*int*/ = this._elementsData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numElementsData; ++i) {\n\t\t\tvar elementsData:ElementsData = this._elementsData[i];\n\t\t\tvar positionData:Array<PositionData> = elementsData.positionData;\n\t\t\tvar numVerts:number /*int*/ = positionData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(positionData[j], elementsData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = positionData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(position:PositionData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = position.startWeight;\n\t\tvar end:number /*int*/ = position.startWeight + position.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh graphics.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar positionData:Array<PositionData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tpositionData = new Array<PositionData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(positionData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._elementsData == null)\n\t\t\tthis._elementsData = new Array<ElementsData>();\n\n\t\tvar i:number /*uint*/ = this._elementsData.length;\n\t\tthis._elementsData[i] = new ElementsData();\n\t\tthis._elementsData[i].positionData = positionData;\n\t\tthis._elementsData[i].weightData = weights;\n\t\tthis._elementsData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the sprite data to a SkinnedSub instance.\n\t * @param positionData The sprite's positions.\n\t * @param weights The joint weights per position.\n\t * @param indices The indices for the faces.\n\t * @return A TriangleElements instance containing all elements data for the current sprite.\n\t */\n\tprivate translateElements(positionData:Array<PositionData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleElements\n\t{\n\t\tvar len:number /*int*/ = positionData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar position:PositionData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar positions:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tposition = positionData[i];\n\t\t\tv1 = position.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tpositions[v1] = positions[v2] = positions[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < position.countWeight; ++j) {\n\t\t\t\tweight = weights[position.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tpositions[v1] += pos.x*weight.bias;\n\t\t\t\t\tpositions[v2] += pos.y*weight.bias;\n\t\t\t\t\tpositions[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = position.index << 1;\n\t\t\tuvs[v1++] = position.s;\n\t\t\tuvs[v1] = position.t;\n\t\t}\n\n\t\telements.jointsPerVertex = this._maxJointCount;\n\t\telements.setIndices(indices);\n\t\telements.setPositions(positions);\n\t\telements.setUVs(uvs);\n\t\telements.setJointIndices(jointIndices);\n\t\telements.setJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\telements.setNormals(null);\n\t\telements.setTangents(null);\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\telements.autoDeriveTangents = false;\n\t\telements.autoDeriveNormals = false;\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of position indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single position.\n\t * @param positionData The list to contain the position data.\n\t */\n\tprivate parseVertex(positionData:Array<PositionData>):void\n\t{\n\t\tvar position:PositionData = new PositionData();\n\t\tposition.index = this.getNextInt();\n\t\tthis.parseUV(position);\n\t\tposition.startWeight = this.getNextInt();\n\t\tposition.countWeight = this.getNextInt();\n\t\t//\t\t\tif (position.countWeight > _maxJointCount) _maxJointCount = position.countWeight;\n\t\tpositionData[position.index] = position;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param positionData The positionData to contain the UV coordinates.\n\t */\n\tprivate parseUV(positionData:PositionData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tpositionData.s = this.getNextNumber();\n\t\tpositionData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport default MD5MeshParser;\n\n\nclass PositionData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass ElementsData\n{\n\tpublic positionData:Array<PositionData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport IAsset\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\nimport ByteArray\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport MaterialBase\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = new Single2DTexture(<BitmapImage2D> asset);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = Sprite.assetType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == Sprite.assetType) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleElements;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar sprite:Sprite;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per sprite at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Build sprite and return it\n\t\t\tsprite = new Sprite(mat);\n\t\t\tsprite.transform.matrix3D = new Matrix3D(obj.transform);\n\n\t\t\tgraphics = sprite.graphics;\n\n\t\t\t// Construct elements (potentially splitting buffers)\n\t\t\t// and add them to graphics.\n\t\t\tsub = new TriangleElements(new AttributesBuffer());\n\t\t\tsub.setIndices(obj.indices);\n\t\t\tsub.setPositions(obj.verts);\n\t\t\tsub.setUVs(obj.uvs);\n\n\t\t\tgraphics.addGraphic(sub);\n\n\t\t\t// Apply pivot translation to graphics if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\t\tmtx.rawData[12] = 0;\n\t\t\t\t\tmtx.rawData[13] = 0;\n\t\t\t\t\tmtx.rawData[14] = 0;\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to graphics if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgraphics.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to graphics. Finalize the graphics,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(graphics, obj.name.concat('_graphics'));\n\n\t\t\treturn sprite;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat.ambientMethod.texture = this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture();\n\n\t\tmat.diffuseMethod.color = this._cur_mat.diffuseColor;\n\t\tmat.specularMethod.color = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Float32Array\n\t{\n\t\tvar data:Float32Array = new Float32Array(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport default Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Float32Array;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Single2DTexture;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import Sampler2D\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\nimport AttributesBuffer\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport BitmapImage2D\t\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport Matrix3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport Quaternion\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport Vector3D\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport IAsset\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport URLLoaderDataFormat\t\t\t\tfrom \"awayjs-core/lib/net/URLLoaderDataFormat\";\nimport URLRequest\t\t\t\t\t\tfrom \"awayjs-core/lib/net/URLRequest\";\nimport ParserBase\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserBase\";\nimport ParserUtils\t\t\t\t\t\tfrom \"awayjs-core/lib/parsers/ParserUtils\";\nimport ResourceDependency\t\t\t\tfrom \"awayjs-core/lib/parsers/ResourceDependency\";\n\nimport Graphics\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport TriangleElements\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport DisplayObjectContainer\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport Sprite\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport DefaultMaterialManager\t\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport MaterialBase\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport Single2DTexture\t\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport MethodMaterial\t\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterial\";\nimport MethodMaterialMode\t\t\t\tfrom \"awayjs-methodmaterials/lib/MethodMaterialMode\";\nimport SpecularBasicMethod\t\t\t\tfrom \"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\";\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _sprites:Array<Sprite>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.isAsset(BitmapImage2D)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = new Single2DTexture(<BitmapImage2D> asset);\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._sprites.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._sprites.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._sprites = new Array<Sprite>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\n\t\tsuper._pStartParsing(frameLimit);\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar graphics:Graphics;\n\t\t\tvar sprite:Sprite;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultImage2D());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tsprite = new Sprite(bmMaterial);\n\t\t\t\tgraphics = sprite.graphics;\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], graphics);\n\n\t\t\t\tif (graphics.count == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> graphics);//, \"\");\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tsprite.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual sprite object names ('g' tag in OBJ file)\n\t\t\t\t\tsprite.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tsprite.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._sprites.push(sprite);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + sprite.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + sprite.name;\n\n\t\t\t\tif (sprite.graphics.count > 1) {\n\t\t\t\t\tfor (sm = 1; sm < sprite.graphics.count; ++sm)\n\t\t\t\t\t\tsprite.graphics.getGraphicAt(sm).material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(sprite);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> sprite);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgraphics.\n\t * @param materialGroup The material group data to convert.\n\t * @param graphics The Graphics to contain the converted Elements.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, graphics:Graphics)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar elements:TriangleElements;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\telements = new TriangleElements(new AttributesBuffer());\n\t\t\telements.autoDeriveNormals = normals.length? false : true;\n\t\t\telements.setIndices(indices);\n\t\t\telements.setPositions(vertices);\n\t\t\telements.setNormals(normals);\n\t\t\telements.setUVs(uvs);\n\n\t\t\tgraphics.addGraphic(elements);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.color = specularColor;\n\t\t\t\t\tbasicSpecularMethod.strength = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", sprite(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial = new MethodMaterial(color);\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm.alpha = alpha;\n\t\t\t\t} else {\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\tcm.diffuseMethod.color = diffuseColor;\n\n\t\t\t\tif (useSpecular) {\n\t\t\t\t\tcm.specularMethod.color = specularColor;\n\t\t\t\t\tcm.specularMethod.strength = specular;\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._sprites.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar sprite:Sprite;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._sprites.length; ++i) {\n\t\t\tsprite = this._sprites[i];\n\t\t\tdecomposeID = sprite.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (sprite.material)\n\t\t\t\t\t\tsprite.material = null;\n\t\t\t\t\tsprite.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\ttm = <MethodMaterial > sprite.material;\n\n\t\t\t\t\ttm.ambientMethod.texture = lm.texture;\n\t\t\t\t\ttm.style.color = lm.color;\n\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\ttm.style.sampler = new Sampler2D(true);\n\n\t\t\t\t\tif (this.materialMode < 2) // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\telse\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\ttm.specularMethod.color = specularData.color;\n\t\t\t\t\t\t\t\ttm.specularMethod.strength = specularData.alpha;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsprite.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._sprites.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport default OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Single2DTexture;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import Loader\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/Loader\";\n\nimport AWDParser\t\t\t\t\t\tfrom \"awayjs-parsers/lib/AWDParser\";\nimport Max3DSParser\t\t\t\t\t\tfrom \"awayjs-parsers/lib/Max3DSParser\";\nimport MD2Parser\t\t\t\t\t\tfrom \"awayjs-parsers/lib/MD2Parser\";\nimport OBJParser\t\t\t\t\t\tfrom \"awayjs-parsers/lib/OBJParser\";\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 sprites (.md5sprite)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, LoaderSession, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport default Parsers;"
  ],
  "sourceRoot": ""
}