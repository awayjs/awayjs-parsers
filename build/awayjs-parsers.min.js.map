{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "Geometry",
    "CurveSubGeometry",
    "TriangleSubGeometry",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "TextureBase",
    "ByteArray",
    "AnimationNodeBase",
    "DisplayObjectContainer",
    "LightBase",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "TextField",
    "Billboard",
    "Skybox",
    "DefaultMaterialManager",
    "MaterialBase",
    "LightPickerBase",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "AnimationSetBase",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectMethodBase",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "ShadowMapMethodBase",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "CurveMaterial",
    "BasicMaterial",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildCommand",
    "UpdatePropertyCommand",
    "RemoveChildCommand",
    "ApplyAS2DepthsCommand",
    "Font",
    "TextFormat",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseMeshLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseTimeLine",
    "paresTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "font_style_cnt",
    "new_font",
    "font_style_name",
    "new_font_style",
    "get_font_table",
    "set_font_em_size",
    "font_style_char_cnt",
    "font_style_char",
    "sm_len",
    "sm_end",
    "idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "indices",
    "readUnsignedShort",
    "idx_pos",
    "idx_curves",
    "idx_uvs",
    "positions",
    "curveData",
    "uvs",
    "readNumber",
    "curve_sub_geom",
    "updateIndices",
    "updatePositions",
    "updateCurves",
    "updateUVs",
    "set_subgeo_for_char",
    "parseProperties",
    "parseUserAttributes",
    "font_id",
    "returnArrayFont",
    "getAssetByID",
    "assetType",
    "font",
    "addError",
    "newTextFormat",
    "font_name",
    "font_table",
    "font_style",
    "data_id",
    "returnedArrayMaterial",
    "bothSides",
    "num_uv_values",
    "uv_values",
    "uvcnt",
    "uv_value",
    "readFloat",
    "format_props",
    1,
    "UINT16",
    2,
    3,
    "UINT8",
    4,
    5,
    "size",
    "get",
    "letterSpacing",
    "kerning",
    "material",
    "newTextField",
    "num_paragraphs",
    "complete_text",
    "text_format",
    "paracnt",
    "num_textruns",
    "textrun_cnt",
    "format_id",
    "textFormatArray",
    "txt_length",
    "this_txt",
    "readUTFBytes",
    "textFormat",
    "text",
    "extra",
    "billboard",
    "num_materials",
    "materials_parsed",
    "geom",
    "returnedArrayGeometry",
    "geoID",
    "materials",
    "materialNames",
    "mat_id",
    "m",
    "mesh",
    "subMeshes",
    "Math",
    "min",
    "data_len",
    "url",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "k",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "ms_per_frame",
    "numFrames",
    "objectIDMap",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "labelType",
    "label",
    "numCommands",
    "hasDepthChanges",
    "commandString",
    "objectID",
    "resourceID",
    "commandType",
    "valid_command",
    "instanceID",
    "instanceName",
    "cmd_asset",
    "registerPotentialChild",
    "addConstructCommand",
    "props",
    6,
    "UINT32",
    "mask_id_nums",
    "mask_ids",
    "mi_cnt",
    "matrix_2d",
    "colortransform",
    "blendmode",
    "visibilty",
    "depth",
    "mask",
    "thisMatrix",
    "rawData",
    "blendmode_string",
    "cm",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_curve_geom",
    "w_indices",
    "weights",
    "subProps",
    "x",
    "y",
    "z",
    "verts",
    "normals",
    "addSubGeometry",
    "triangle_sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateVertexNormals",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "returnedArray",
    "obj",
    "addChild",
    "pivot",
    "returnedArrayParent",
    "objC",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    7,
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "lightPicker",
    "smooth",
    "mipmap",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "addEffectMethod",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "getDefaultTexture",
    "curve_mat",
    "preserveAlpha",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "thisAnimator",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "sub_geom",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/data/BlendMode",
    "undefined",
    "awayjs-core/lib/data/CurveSubGeometry",
    "awayjs-core/lib/data/Geometry",
    "awayjs-core/lib/data/TriangleSubGeometry",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/textures/TextureBase",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/animators/nodes/AnimationNodeBase",
    "awayjs-display/lib/base/LightBase",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Billboard",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/entities/TextField",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/CurveMaterial",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-display/lib/materials/lightpickers/LightPickerBase",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-display/lib/text/TextFormat",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/timeline/TimelineKeyFrame",
    "awayjs-player/lib/timeline/commands/AddChildCommand",
    "awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/timeline/commands/RemoveChildCommand",
    "awayjs-player/lib/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/AnimationSetBase",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "isAsset",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "g",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "AAAAA,QAAA,QAAAC,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,SAAAR,UAAA,YAAAA,OAAA,KAAAO,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAG,EAAA,MAAAA,GAAAH,GAAA,EAAA,IAAAI,GAAA,GAAAC,OAAA,uBAAAL,EAAA,IAAA,MAAAI,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAV,EAAAG,IAAAQ,WAAAZ,GAAAI,GAAA,GAAAS,KAAAF,EAAAC,QAAA,SAAAb,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAC,QAAAb,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAQ,QAAA,GAAAL,SAAAT,UAAA,YAAAA,OAAA,KAAA,GAAAM,GAAA,EAAAA,EAAAF,EAAAY,OAAAV,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAY,gCAAA,SAAAjB,EAAAkB,EAAAJ,GCCA,GAAIK,GAAYC,KAAKD,WAAa,SAAUE,EAAGC,GAC3C,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCI,EAAGE,UAAYL,EAAEK,SACjBN,GAAEM,UAAY,GAAIF,GCJtB,IAAOG,GAAS5B,EAAgB,iCAChC,IAAO6B,GAAQ7B,EAAiB,gCAEhC,IAAO8B,GAAgB9B,EAAe,wCACtC,IAAO+B,GAAmB/B,EAAc,2CACxC,IAAOgC,GAAchC,EAAe,sCACpC,IAAOiC,GAAQjC,EAAiB,gCAChC,IAAOkC,GAAQlC,EAAiB,gCAChC,IAAOmC,GAAmBnC,EAAc,0CACxC,IAAOoC,GAAUpC,EAAgB,iCAEjC,IAAOqC,GAAUrC,EAAgB,qCACjC,IAAOsC,GAAWtC,EAAgB,sCAGlC,IAAOuC,GAAqBvC,EAAa,oDACzC,IAAOwC,GAAsBxC,EAAa,qDAC1C,IAAOyC,GAA+BzC,EAAW,8DACjD,IAAO0C,GAAiB1C,EAAc,6CAGtC,IAAO2C,GAAgB3C,EAAe,4CACtC,IAAO4C,GAAY5C,EAAgB,wCAEnC,IAAO6C,GAAW7C,EAAgB,uCAClC,IAAO8C,GAAS9C,EAAgB,kCAEhC,IAAO+C,GAAiB/C,EAAc,uDACtC,IAAOgD,GAAsBhD,EAAa,uDAE1C,IAAOiD,GAASjD,EAAgB,oCAChC,IAAOkD,GAAgBlD,EAAe,+CACtC,IAAOmD,GAAUnD,EAAgB,yCACjC,IAAOoD,GAAMpD,EAAiB,qCAC9B,IAAOqD,GAAIrD,EAAkB,mCAC7B,IAAOsD,GAAStD,EAAgB,wCAChC,IAAOuD,GAASvD,EAAgB,wCAChC,IAAOwD,GAAMxD,EAAiB,qCAC9B,IAAOyD,GAAsBzD,EAAa,qDAC1C,IAAO0D,GAAY1D,EAAgB,4CACnC,IAAO2D,GAAe3D,EAAe,4DACrC,IAAO4D,GAAiB5D,EAAc,8DACtC,IAAO6D,GAAmB7D,EAAc,iEACxC,IAAO8D,GAAuB9D,EAAa,qEAE3C,IAAO+D,GAAU/D,EAAgB,wCACjC,IAAOgE,GAAsBhE,EAAa,oDAC1C,IAAOiE,GAAmBjE,EAAc,iDACxC,IAAOkE,GAAmBlE,EAAc,iDACxC,IAAOmE,GAAuBnE,EAAa,qDAC3C,IAAOoE,GAAoBpE,EAAc,kDACzC,IAAOqE,GAAqBrE,EAAa,mDACzC,IAAOsE,GAAoBtE,EAAc,kDAEzC,IAAOuE,GAAgBvE,EAAe,mDAEtC,IAAOwE,GAAkBxE,EAAc,qDACvC,IAAOyE,GAAczE,EAAe,iDACpC,IAAO0E,GAAoB1E,EAAc,uDACzC,IAAO2E,GAAgB3E,EAAe,mDACtC,IAAO4E,GAAS5E,EAAgB,iDAChC,IAAO6E,GAAQ7E,EAAiB,gDAChC,IAAO8E,IAAY9E,EAAgB,oDACnC,IAAO+E,IAAa/E,EAAe,qDACnC,IAAOgF,IAAgBhF,EAAe,yDACtC,IAAOiF,IAAcjF,EAAe,uDAEpC,IAAOkF,IAAkBlF,EAAc,gDACvC,IAAOmF,IAAcnF,EAAe,4CACpC,IAAOoF,IAAmBpF,EAAc,yDACxC,IAAOqF,IAAkBrF,EAAc,wDACvC,IAAOsF,IAAgBtF,EAAe,sDACtC,IAAOuF,IAAqBvF,EAAa,2DACzC,IAAOwF,IAAqBxF,EAAa,2DACzC,IAAOyF,IAAiBzF,EAAc,uDACtC,IAAO0F,IAAqB1F,EAAa,2DACzC,IAAO2F,IAAuB3F,EAAa,6DAC3C,IAAO4F,IAA0B5F,EAAY,gEAC7C,IAAO6F,IAAkB7F,EAAc,wDACvC,IAAO8F,IAAe9F,EAAe,qDACrC,IAAO+F,IAAyB/F,EAAY,+DAC5C,IAAOgG,IAAoBhG,EAAc,0DACzC,IAAOiG,IAAgBjG,EAAe,sDACtC,IAAOkG,IAAoBlG,EAAc,0DACzC,IAAOmG,IAAuBnG,EAAa,6DAC3C,IAAOoG,IAAoBpG,EAAc,0DACzC,IAAOqG,IAAoBrG,EAAc,0DACzC,IAAOsG,IAAmBtG,EAAc,yDAExC,IAAOuG,IAAqBvG,EAAa,2DACzC,IAAOwG,IAAgBxG,EAAe,sDACtC,IAAOyG,IAAyBzG,EAAY,+DAC5C,IAAO0G,IAAiB1G,EAAc,uDACtC,IAAO2G,IAAmB3G,EAAc,yDACxC,IAAO4G,IAAgB5G,EAAe,sDACtC,IAAO6G,IAAgB7G,EAAe,sDAEtC,IAAO8G,IAAa9G,EAAe,6CACnC,IAAO+G,IAAa/G,EAAe,6CAGnC,IAAOgH,IAAoBhH,EAAa,mDAExC,IAAOiH,IAAgBjH,EAAc,8CACrC,IAAOkH,IAAelH,EAAe,sDACrC,IAAOmH,IAAqBnH,EAAa,4DACzC,IAAOoH,IAAkBpH,EAAc,yDACvC,IAAOqH,IAAqBrH,EAAY,4DAExC,IAAOsH,IAAItH,EAAiB,+BAE5B,IAAOuH,IAAUvH,EAAa,qCDV9B,ICcMwH,IAAS,SAAAC,GAAStG,EAAlBqG,EAASC,EA6Dd,SA7DKD,KA+DJC,EAAA1G,KAAAK,KAAMe,EAAoBuF,aA5DnBtG,MAAAuG,OAAiB,IAEjBvG,MAAAwG,gBAA0B,KAc1BxG,MAAAyG,iBACAzG,MAAA0G,eAAyB,KA6ChC1G,MAAK2G,QAAU,GAAIC,MACnB5G,MAAK2G,QAAQ,GAAK,GAAIE,GACtB7G,MAAK2G,QAAQ,GAAGG,KAAO,IAEvB9G,MAAK+G,aAAe,GAAIH,MACxB5G,MAAK+G,aAAaC,KAAKxG,EAAUyG,OACjCjH,MAAK+G,aAAaC,KAAKxG,EAAU0G,IACjClH,MAAK+G,aAAaC,KAAKxG,EAAU2G,MACjCnH,MAAK+G,aAAaC,KAAKxG,EAAU4G,OACjCpH,MAAK+G,aAAaC,KAAKxG,EAAU6G,WACjCrH,MAAK+G,aAAaC,KAAKxG,EAAU8G,MACjCtH,MAAK+G,aAAaC,KAAKxG,EAAU+G,UACjCvH,MAAK+G,aAAaC,KAAKxG,EAAUgH,OACjCxH,MAAK+G,aAAaC,KAAKxG,EAAUiH,MACjCzH,MAAK+G,aAAaC,KAAKxG,EAAUkH,QACjC1H,MAAK+G,aAAaC,KAAKxG,EAAUmH,SACjC3H,MAAK+G,aAAaC,KAAKxG,EAAUyG,OACjCjH,MAAK+G,aAAaC,KAAKxG,EAAUoH,QACjC5H,MAAK+G,aAAaC,KAAKxG,EAAUqH,OACjC7H,MAAK+G,aAAaC,KAAKxG,EAAUsH,OACjC9H,MAAK+G,aAAaC,KAAKxG,EAAUoH,QAEjC5H,MAAK+H,cAAgB,GAAInB,MACzB5G,MAAK+H,cAAcf,KAAK,IACxBhH,MAAK+H,cAAcf,KAAK,IACxBhH,MAAK+H,cAAcf,KAAK,KACxBhH,MAAK+H,cAAcf,KAAK,KACxBhH,MAAKgI,SAAWpB,QAQHR,EAAA6B,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQP9B,GAAAgC,aAAd,SAA2BtB,GAE1B,MAAQ5F,GAAYmH,SAASvB,EAAM,IAAM,MAMnCV,GAAA7F,UAAA+H,oBAAP,SAA2BC,GAM1B,GAAIA,EAAmBC,OAAO5I,QAAU,EAAG,CAC1C,GAAI6I,GAAmCF,EAAmBG,GAAGC,MAAM,IACnE,IAAIC,GAAqBH,EAAmB,EAC5C,IAAII,EACJ,IAAIC,EACJ,IAAIC,EAEJ,IAAIN,EAAmB7I,QAAU,EACjC,CACCiJ,EAAwBN,EAAmBC,OAAO,EAClD,IAAIK,EAAO,CACV,GAAIG,EACJ,IAAIC,EAEJF,GAAQ/I,KAAK2G,QAAS4B,EAAmBG,GACzCK,GAAMjC,KAAO+B,CAIbA,GAAMK,eAAeH,EAAMI,KAAM,KAAM,KACvCJ,GAAMI,KAAON,EAAMM,IAGnBnJ,MAAKoJ,gBAAyBP,EAE9B,IAAI7I,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,yCACZD,SAAQC,IAAI,0BAA4BP,EAAMI,QAKjD,GAAIV,EAAmB7I,OAAS,EAChC,CACCkJ,EAAoCP,EAAmBC,OAAO,EAE9D,IAAIe,GAAiCT,CAErC9I,MAAKwJ,cAAef,EAAmB,IAAOc,EAAGE,gBACjDzJ,MAAKyG,eAAemC,GAAa5B,KAAK,EAEtC,IAAIhH,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,8BAAgCtJ,KAAKyG,eAAemC,GAAahJ,OAAS,wBAEvF,GAAII,KAAKyG,eAAemC,GAAahJ,QAAUI,KAAKwJ,cAAc5J,OAAQ,CAEzE,GAAI8J,GAAW1J,KAAKwJ,cAAc,EAClC,IAAIG,GAAW3J,KAAKwJ,cAAc,EAClC,IAAII,GAAW5J,KAAKwJ,cAAc,EAClC,IAAIK,GAAW7J,KAAKwJ,cAAc,EAClC,IAAIM,GAAW9J,KAAKwJ,cAAc,EAClC,IAAIO,GAAW/J,KAAKwJ,cAAc,EAElCX,GAAsB,GAAItH,GAAiBmI,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,EACzEhB,GAAQ/I,KAAK2G,QAAQiC,EACrBG,GAAMjC,KAAO+B,CAIbA,GAAMK,eAAeH,EAAMI,KAAM,KAAM,KACvCJ,GAAMI,KAAON,EAAMM,IAGnBnJ,MAAKoJ,gBAAyBP,EAC9B,IAAI7I,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,8BAAgCP,EAAMI,UAWhD/C,GAAA7F,UAAAyJ,2BAAP,SAAkCzB,IAW3BnC,GAAA7F,UAAA0J,wBAAP,SAA+B1B,EAAuCM,GAErE,GAAIqB,GAAiBrB,EAAMM,IAE3B,IAAIN,EAAO,CACV,GAAIE,GAAiB/I,KAAK2G,QAAQwD,SAAS5B,EAAmBG,IAG9DG,GAAMK,eAAeH,EAAMI,KAAM,KAAM,MAGxC,GAAIiB,GAAiBvB,EAAMM,IAE3BN,GAAMM,KAAOe,CAEb,OAAOE,GAODhE,GAAA7F,UAAA8J,iBAAP,WAGC,IAAKrK,KAAKwG,gBAAiB,CAC1BxG,KAAKsK,UAAYtK,KAAKuK,eACtBvK,MAAKwG,gBAAkB,KAGxB,IAAKxG,KAAK0G,eAAgB,CAUzB1G,KAAKwK,aAEL,QAAQxK,KAAKyK,cAEZ,IAAKrE,GAAUsE,QACf,IAAKtE,GAAUuE,KACd3K,KAAK4K,eAAe,2CACpB,MAED,KAAKxE,GAAUyE,aACd7K,KAAK8K,MAAQ9K,KAAKsK,SAClB,OAyBFtK,KAAK0G,eAAiB,KAUvB,GAAI1G,KAAK8K,MAAO,CAEf,MAAO9K,KAAK8K,MAAMC,oBAAsB,IAAM/K,KAAKgL,cACnD,CACChL,KAAKiL,iBAMN,GAAIjL,KAAK8K,MAAMC,qBAAuB,EAAG,CACxC/K,KAAKkL,SACL,OAAQjK,GAAWkK,iBACb,CACN,MAAQlK,GAAWmK,mBAEd,CAEN,OAAQpL,KAAKyK,cAEZ,IAAKrE,GAAUsE,QACf,IAAKtE,GAAUuE,KAEd,GAAI3K,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,qEAGb,MAIF,MAAQrI,GAAWkK,cAMd/E,GAAA7F,UAAA8K,eAAP,SAAsBC,GAErBjF,EAAA9F,UAAM8K,eAAc1L,KAAAK,KAACsL,EAGrBtL,MAAKuL,UAAY,GAAI3J,GAGdwE,GAAA7F,UAAA2K,QAAR,WAGC,IAAK,GAAIM,KAAKxL,MAAK2G,QAAS,CAE3B,GAAIzG,GAAwBF,KAAK2G,QAAS6E,EAC1CtL,GAAEgL,WAMI9E,GAAA7F,UAAA0K,eAAR,WAEC,GAAIlC,EACJ,IAAI0C,EACJ,IAAIC,GAAmB,KACvB,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAEJ9L,MAAK+L,cAAgB/L,KAAK8K,MAAMkB,iBAEhCL,GAAK3L,KAAK8K,MAAMmB,kBAChBL,GAAO5L,KAAK8K,MAAMmB,kBAClBJ,GAAQ7L,KAAK8K,MAAMmB,kBACnBH,GAAM9L,KAAK8K,MAAMkB,iBAEjB,IAAIE,GAA2BC,GAASC,KAAKP,EAAOM,GAASE,MAC7D,IAAIC,GAA+BH,GAASC,KAAKP,EAAOM,GAASI,MAEjE,IAAIvM,KAAKwM,kBAAmB,CAC3BxM,KAAKyM,gBAAkBN,GAASC,KAAKP,EAAOM,GAASO,MACrD1M,MAAK2M,aAAeR,GAASC,KAAKP,EAAOM,GAASS,MAClD5M,MAAK6M,eAAiBV,GAASC,KAAKP,EAAOM,GAASW,MACpD9M,MAAK+M,WAAa3G,EAAU4G,OAE5B,IAAIhN,KAAK2M,aAAc,CACtB3M,KAAK+M,WAAa3G,EAAU6G,QAG7BjN,KAAKkN,cAAgB9G,EAAU4G,OAE/B,IAAIhN,KAAKyM,gBAAiB,CACzBzM,KAAKkN,cAAgB9G,EAAU6G,QAGhCjN,KAAKmN,aAAe/G,EAAU4G,OAE9B,IAAIhN,KAAK6M,eAAgB,CACxB7M,KAAKmN,aAAe/G,EAAU6G,SAIhC,GAAIG,GAAqBpN,KAAK8K,MAAMuC,SAAWvB,CAE/C,IAAIA,EAAM9L,KAAK8K,MAAMC,oBAAqB,CACzC/K,KAAK4K,eAAe,iEACpB5K,MAAK8K,MAAMuC,UAAYrN,KAAK8K,MAAMC,mBAClC,QAED/K,KAAKsN,eAAiB,GAAI5L,EAG1B1B,MAAK8K,MAAMyC,UAAUvN,KAAKsN,eAAgB,EAAGxB,EAK7C,IAAII,EAAkB,CACrBlM,KAAK4K,eAAe,4CAqBrB5K,KAAKsN,eAAeD,SAAW,CAC/BtE,GAAQ,GAAIlC,GACZkC,GAAM+C,IAAM9L,KAAKsN,eAAeD,SAAWvB,CAC3C/C,GAAML,GAAK1I,KAAK+L,aAEhB,IAAIyB,GAAuBxN,KAAKsN,eAAeD,SAAWvB,CAE1D,IAAII,EAAkB,CACrBlM,KAAK4K,eAAe,4CAKrB,GAAI5K,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,mBAAqBtJ,KAAK+L,cAAgB,eAAiBH,EAAO,oBAAsBM,EAAmB,yBAA2BlM,KAAKyM,gBAAkB,2BAA6BzM,KAAK2M,aAAe,6BAA+B3M,KAAK6M,gBAG/P7M,KAAK2G,QAAQ3G,KAAK+L,eAAiBhD,CAEnC,IAAK/I,KAAKgI,SAAS,IAAM,GAAOhI,KAAKgI,SAAS,IAAM,EAAI,CD9L9C,GCgMLyF,GAAU,GAAI7H,GAElB,QAAQgG,GACP,IAAK,IACJ5L,KAAK0N,sBAAsB1N,KAAK+L,cAChCL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAK2N,2BAA2B3N,KAAK+L,cACrCL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAK4N,gBAAgB5N,KAAK+L,cAAe0B,EACzC/B,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK6N,cAAc7N,KAAK+L,cAAe0B,EACvC/B,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK8N,eAAe9N,KAAK+L,cACzBL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK+N,oBAAoB/N,KAAK+L,cAC9BL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAKgO,gBAAgBhO,KAAK+L,cAC1BL,GAAW,IACX,QAGH,GAAK1L,KAAKgI,SAAS,GAAK,GAAMhI,KAAKgI,SAAS,IAAM,GAAOhI,KAAKgI,SAAS,IAAM,EAAK,CAEjF,OAAQ4D,GACP,IAAK,IACJ5L,KAAKiO,eAAejO,KAAK+L,cACzBL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKkO,oBAAoBlO,KAAK+L,cAC9BL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKmO,WAAWnO,KAAK+L,cACrBL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKoO,YAAYpO,KAAK+L,cACtBL,GAAW,IACX,MAOD,KAAK,IACJ1L,KAAKqO,iBAAiBrO,KAAK+L,cAC3BL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKsO,iBAAiBtO,KAAK+L,cAC3BL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKuO,iBAAiBvO,KAAK+L,cAC3BL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKwO,uBAAuBxO,KAAK+L,cACjCL,GAAW,IACX,MACD,KAAK,IACJ1L,KAAKyO,uBAAuBzO,KAAK+L,cACjCL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK0O,uBAAuB1O,KAAK+L,cAAe,KAChDL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK0O,uBAAuB1O,KAAK+L,cACjCL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK2O,wBAAwB3O,KAAK+L,cAClCL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK4O,iBAAiB5O,KAAK+L,cAC3BL,GAAW,IACX,MACD,KAAK,KACJ1L,KAAK6O,aAAa7O,KAAK+L,cACvBL,GAAW,IACX,QAKH,GAAIA,GAAY,MAAO,CACtB,OAAQE,GAEP,IAAK,GACJ5L,KAAK8O,4BAA4B9O,KAAK+L,cACtC,MACD,KAAK,IACJ/L,KAAK+O,eAAe/O,KAAK+L,cACzB,MACD,KAAK,IACJ/L,KAAKgP,kBAAkBhP,KAAK+L,cAC5B,MACD,KAAK,IACJ/L,KAAKiP,cAAcjP,KAAK+L,cACxB,MACD,KAAK,IACJ/L,KAAKkP,aAAalP,KAAK+L,cACvB,MACD,KAAK,KACJ/L,KAAKmP,cAAcnP,KAAK+L,cACxB,MACD,KAAK,KACJ/L,KAAKoP,kBAAkBpP,KAAK+L,cAC5B,MACD,KAAK,KACJ/L,KAAKqP,uBAAuBrP,KAAK+L,cACjC,MACD,KAAK,KAGL,IAAK,KACJ/L,KAAKsP,eAAetP,KAAK+L,cACzB,MACD,KAAK,KACJ/L,KAAKuP,cAAcvP,KAAK+L,cACxB,MACD,SACC,GAAI/L,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,6CAA+CtJ,KAAK+L,cAAgB,YAAcD,EAAM,UAErG9L,KAAKsN,eAAeD,UAAYvB,CAChC,QDxMG,GC6MF0D,GAAgB,CACpB,IAAIxP,KAAKsN,eAAeD,UAAYG,EAAe,CAClD,GAAIxN,KAAKuG,OAAQ,CAChB,GAAIwC,EAAM0G,cAAe,CACxB,MAAOD,EAASzG,EAAM0G,cAAc7P,OAAQ,CAC3CyJ,QAAQC,IAAI,sBAAwBP,EAAM0G,cAAcD,GAAU,OAClEA,OAIH,GAAIxP,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,WAEP,CACN,GAAItJ,KAAKuG,OAAQ,CAEhB8C,QAAQC,IAAI,+CAAiDtJ,KAAK+L,cAAgB,wBAElF,IAAIhD,EAAM0G,cAAe,CACxB,MAAOD,EAASzG,EAAM0G,cAAc7P,OAAQ,CAC3CyJ,QAAQC,IAAI,sBAAwBP,EAAM0G,cAAcD,GAAU,OAClEA,QAMJxP,KAAK8K,MAAMuC,SAAWD,CACtBpN,MAAKsN,eAAiB,KAQflH,GAAA7F,UAAAwN,oBAAR,SAA4B2B,GAC3B,GAAIvG,GAAcnJ,KAAK2P,aACvB3P,MAAK2G,QAAQ+I,GAASvG,KAAOA,CDlNvB,ICoNFyG,GAAwB5P,KAAKsN,eAAetB,iBDlN1C,ICoNF6D,GAAc,GAAI3J,GACtB,KAAK,GAAI7G,GAAW,EAAGA,EAAIuQ,IAAkBvQ,EAAG,CAC/C,GAAIyQ,GAAyB9P,KAAK2P,aDlNzB,ICoNLI,GAAmCF,EAASG,eAAeF,EAC/DC,GAAeE,iBAAiBjQ,KAAKsN,eAAetB,kBDlN3C,ICoNLkE,GAA6BlQ,KAAKsN,eAAetB,iBAErD,KAAK,GAAI3M,GAAW,EAAGA,EAAI6Q,IAAuB7Q,EAAG,CAEpD,GAAI8Q,GAAyBnQ,KAAKsN,eAAetB,iBDnNrC,ICsNRoE,GAAgBpQ,KAAKsN,eAAetB,iBACxC,IAAIqE,GAAgBrQ,KAAKsN,eAAeD,SAAW+C,CAKnD,OAAOpQ,KAAKsN,eAAeD,SAAWgD,EAAQ,CAC7C,GAAIC,GAAa,CACjB,IAAIC,GAAkBC,EAAiBC,EAAgBC,CAGvDF,GAAWxQ,KAAKsN,eAAerB,kBAC/BsE,GAAYvQ,KAAKsN,eAAerB,kBAChCwE,GAAUzQ,KAAKsN,eAAetB,iBAC9B0E,GAAU1Q,KAAKsN,eAAeD,SAAWoD,CAEzC,IAAID,GAAY,EAAG,CAClB,GAAIG,GAAwB,GAAI/J,MAEhC,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9CC,EAAQL,KAAStQ,KAAKsN,eAAesD,yBAEhC,IAAIJ,GAAY,GAAI,CAC1B,GAAIK,GAAiB,CACrB,IAAIC,GAAoB,CACxB,IAAIC,GAAiB,CAErB,IAAIC,GAA0B,GAAIpK,MAClC,IAAIqK,GAA0B,GAAIrK,MAClC,IAAIsK,GAAoB,GAAItK,MAE5B,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAE9CM,EAAUH,KAAa7Q,KAAKmR,WAAWnR,KAAK2M,aAC5CqE,GAAUH,KAAa7Q,KAAKmR,WAAWnR,KAAK2M,aAC5CqE,GAAUH,KAAa7Q,KAAKmR,WAAWnR,KAAK2M,aAE5CsE,GAAUH,KAAgB9Q,KAAKmR,WAAWnR,KAAK2M,aAC/CsE,GAAUH,KAAgB9Q,KAAKmR,WAAWnR,KAAK2M,aAE/CuE,GAAIH,KAAa/Q,KAAKmR,WAAWnR,KAAK2M,aACtCuE,GAAIH,KAAa/Q,KAAKmR,WAAWnR,KAAK2M,mBAGnC,CACJ3M,KAAKsN,eAAeD,SAAWqD,GD7NrB,GCiORU,GAAkC,GAAI1Q,GAAiB,KAC3D0Q,GAAeC,cAAcV,EAC7BS,GAAeE,gBAAgBN,EAC/BI,GAAeG,aAAaN,EAC5BG,GAAeI,UAAUN,EACzBnB,GAAe0B,oBAAoBtB,EAAgB9H,WAAY+I,GAEhE/H,QAAQC,IAAI,uBAIbtJ,KAAK0R,gBAAgB,KACrB1R,MAAK2R,qBACL3R,MAAKoJ,gBAAwByG,EAAU1G,EACvCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO+I,CAC7B,IAAI7P,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,0BAA4BH,IAKlC/C,GAAA7F,UAAAyN,gBAAR,SAAwB0B,GACvB,GAAIvG,GAAcnJ,KAAK2P,aACvB3P,MAAK2G,QAAQ+I,GAASvG,KAAOA,CDlOvB,ICoOFyI,GAAiB5R,KAAKsN,eAAetB,iBDlOnC,ICoOF8D,GAAyB9P,KAAK2P,aDlO5B,ICoOFkC,GAA6B7R,KAAK8R,aAAaF,GAAU1L,GAAK6L,WAClE,IAAIC,EACJ,IAAIH,EAAgB,GAAI,CACvBG,EAAcH,EAAgB,OACxB,CACN7R,KAAK2G,QAAQ+I,GAASuC,SAAS,sEAC/BD,GAAO,GAAI9L,IAEZ,GAAIgM,GAA2B,GAAI/L,GACnC+L,GAAcC,UAAYH,EAAK7I,IAC/B,IAAIiJ,GAAiCJ,EAAKhC,eAAeF,EACzD,IAAGsC,GAAY,KAAK,CACnBF,EAAcG,WAAavC,CAC3BoC,GAAcE,WAAaA,EAG5B,GAAIE,GAAiBtS,KAAKsN,eAAetB,iBDlOnC,ICoOFhD,EACJ,IAAIuJ,GAAmCvS,KAAK8R,aAAaQ,GAAUhQ,EAAayP,WAEhF,IAAIQ,EAAsB,GAAI,CAC7BvJ,EAAsBuJ,EAAsB,OACtC,CACNvS,KAAK2G,QAAQ+I,GAASuC,SAAS,gFAC/BjJ,GAAM,GAAIrD,IAEXqD,EAAIwJ,UAAU,IAEd,IAAIC,GAAuBzS,KAAKsN,eAAerB,kBDnOzC,ICqOFyG,KACJ,KAAI,GAAIC,GAAa,EAAGA,EAAMF,EAAeE,IAAQ,CACpD,GAAIC,GAAgB5S,KAAKsN,eAAeuF,WACxCH,GAAU1L,KAAK4L,GAGhBV,EAAcQ,UAAUA,CACxB,IAAII,GAA6B9S,KAAK0R,iBAAiBqB,EAAE3M,EAAU4M,OAAQC,EAAE7M,EAAU4M,OAAQE,EAAE9M,EAAU+M,MAAMC,EAAEhN,EAAU+M,MAAME,EAAEjN,EAAU+M,OAE/IjB,GAAcoB,KAAOR,EAAaS,IAAI,EAAE,GACxCrB,GAAcsB,cAAgBV,EAAaS,IAAI,EAAE,EAEjDrB,GAAcuB,QAAUX,EAAaS,IAAI,EAAE,KAE3CrB,GAAcwB,SAAW1K,CACzBhJ,MAAK2R,qBAGL3R,MAAKoJ,gBAAyB8I,EAAe/I,EAC7CnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOoL,CAE7B,IAAIlS,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,gCAAkCH,EAAO,UAAU6I,EAAK7I,OAK9D/C,GAAA7F,UAAAuN,eAAR,SAAuB4B,GACtB,GAAIvG,GAAcnJ,KAAK2P,aACvB3P,MAAK2G,QAAQ+I,GAASvG,KAAOA,CDzOvB,IC2OFwK,GAAyB,GAAIzR,EACjC,IAAI0R,GAAwB5T,KAAKsN,eAAetB,iBAChD,IAAI6H,GAAuB,EDzOrB,IC2OFC,EACJ,KAAI,GAAIC,GAAe,EAAGA,EAAQH,EAAgBG,IAAU,CAE3D,GAAIC,GAAsBhU,KAAKsN,eAAetB,iBAE9C,KAAI,GAAIiI,GAAmB,EAAGA,EAAYD,EAAcC,IAAe,CAEtE,GAAIC,GAAmBlU,KAAKsN,eAAetB,iBD5O/B,IC8ORmI,GAA6BnU,KAAK8R,aAAaoC,GAAY/N,GAAW4L,WAC1E,IAAIoC,EAAgB,GAAI,CACvBL,EAA2BK,EAAgB,OACrC,CACNnU,KAAK2G,QAAQ+I,GAASuC,SAAS,6EAC/B6B,GAAc,GAAI3N,ID1OP,GC6ORiO,GAAapU,KAAKsN,eAAetB,iBAErC,IAAIoI,EAAa,EAAG,CACnB,GAAIC,GAAkBrU,KAAKsN,eAAegH,aAAaF,EAEvDP,IAAeQ,IAMlBV,EAAaY,WAAWT,CACxBH,GAAaa,KAAKX,CAGlB7T,MAAK0R,gBAAgB,KAErBiC,GAAac,MAAQzU,KAAK2R,qBAG1B3R,MAAKoJ,gBAAyBuK,EAAcxK,EAC5CnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO6M,CAE7B,IAAI3T,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,+BAAiCH,EAAO,aAAe0K,IAM7DzN,GAAA7F,UAAAoN,2BAAR,SAAmC+B,GAElC,GAAIvG,GAAcnJ,KAAK2P,aAEvB,IAAI2C,GAAiBtS,KAAKsN,eAAetB,iBACzC,IAAIhD,EACJ,IAAIuJ,GAAmCvS,KAAK8R,aAAaQ,GAAUhQ,EAAayP,WAEhF,IAAIQ,EAAsB,GAAI,CAC7BvJ,EAAsBuJ,EAAsB,OACtC,CACNvS,KAAK2G,QAAQ+I,GAASuC,SAAS,6EAC/BjJ,GAAM,GAAIrD,IAEXqD,EAAIwJ,UAAU,IACd,IAAIkC,GAAsB,GAAIvS,GAAU6G,EAGxChJ,MAAK0R,gBAAgB,KAErBgD,GAAUD,MAAQzU,KAAK2R,qBAEvB3R,MAAKoJ,gBAAyBsL,EAAWvL,EACzCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO4N,CAE7B,IAAI1U,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,uCAAyCH,EAAO,qBAAuBH,EAAIG,OAIjF/C,GAAA7F,UAAAmN,sBAAR,SAA8BgC,GAC7B,GAAIiF,EACJ,IAAIC,EAEJ,IAAIzL,GAAcnJ,KAAK2P,aAEvB,IAAI2C,GAAiBtS,KAAKsN,eAAetB,iBACzC,IAAI6I,EACJ,IAAIC,GAAmC9U,KAAK8R,aAAaQ,GAAU7R,EAASsR,WAE5E,IAAI+C,EAAsB,GAAI,CAC7BD,EAAkBC,EAAsB,OAClC,CACN9U,KAAK2G,QAAQ+I,GAASuC,SAAS,wEAC/B4C,GAAO,GAAIpU,GAGZT,KAAK2G,QAAQ+I,GAASqF,MAAQzC,CAC9B,IAAI0C,GAAgC,GAAIpO,MACxC+N,GAAgB3U,KAAKsN,eAAesD,mBAEpC,IAAIqE,GAA8B,GAAIrO,MACtCgO,GAAmB,CAEnB,IAAIrC,EAEJ,OAAOqC,EAAmBD,EAAe,CACxC,GAAIO,EACJA,GAASlV,KAAKsN,eAAetB,iBAC7BuG,GAAwBvS,KAAK8R,aAAaoD,GAAS5S,EAAayP,WAChE,KAAMQ,EAAsB,IAAQ2C,EAAS,EAAI,CAChDlV,KAAK2G,QAAQ+I,GAASuC,SAAS,8BAAgC2C,EAAmB,UAAYM,EAAS,oBAGxG,GAAIC,GAAgC5C,EAAsB,EAE1DyC,GAAUhO,KAAKmO,EACfF,GAAcjO,KAAKmO,EAAEhM,KAErByL,KAGD,GAAIQ,GAAY,GAAInT,GAAK4S,EAAM,KAG/B,IAAIG,EAAUpV,QAAU,GAAKwV,EAAKC,UAAUzV,QAAU,EAAG,CACxDwV,EAAK1B,SAAWsB,EAAU,OACpB,IAAIA,EAAUpV,OAAS,EAAG,CAChC,GAAIP,EAIJ,KAAKA,EAAI,EAAGA,EAAI+V,EAAKC,UAAUzV,OAAQP,IAAK,CAC3C+V,EAAKC,UAAUhW,GAAGqU,SAAWsB,EAAUM,KAAKC,IAAIP,EAAUpV,OAAS,EAAGP,KAGxEW,KAAK0R,gBAAgB,KACrB0D,GAAKX,MAAQzU,KAAK2R,qBAElB3R,MAAKoJ,gBAAyBgM,EAAMjM,EACpCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOsO,CAE7B,IAAIpV,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,kCAAoCH,EAAO,qBAAuB0L,EAAK1L,KAAO,kBAAoBiM,EAAKC,UAAUzV,OAAS,kBAAoBqV,EAAc5M,aAGlKjC,GAAA7F,UAAAqN,gBAAR,SAAwB8B,EAAgBjC,GAIvCzN,KAAK2G,QAAQ+I,GAASvG,KAAOnJ,KAAK2P,aAElC,IAAI/D,GAAc5L,KAAKsN,eAAerB,kBACtC,IAAIuJ,EAKJ,IAAI5J,GAAQ,EAAG,CACd4J,EAAWxV,KAAKsN,eAAetB,iBAC/B,IAAIyJ,EACJA,GAAMzV,KAAKsN,eAAegH,aAAakB,EAGvCnM,SAAQC,IAAI,eAAemM,OAErB,CAEND,EAAWxV,KAAKsN,eAAetB,iBAE/B,IAAIlF,EACJA,GAAO,GAAIpF,EACX1B,MAAKsN,eAAeC,UAAUzG,EAAM,EAAG0O,GASxCxV,KAAK0R,gBAAgB,KACrB1R,MAAK2G,QAAQ+I,GAASgG,OAAS1V,KAAK2R,qBACpC3R,MAAK2V,gCAGL,IAAI3V,KAAKuG,OAAQ,CAChB,GAAIqP,IAAoC,WAAY,QACpDvM,SAAQC,IAAI,mBAAqBsM,EAAmBhK,GAAQ,gBAKtDxF,GAAA7F,UAAAsN,cAAR,SAAsB6B,EAAgBjC,GAErC,GAAIpO,EACJ,IAAIwW,EACJ,IAAIC,EACJ,IAAIC,GAAoBtI,EAAQuI,iBAChC,IAAI7M,GAAOnJ,KAAK2P,aAChB,IAAIsG,KAAYjW,KAAKsN,eAAerB,kBACpC,IAAIiK,GAAUlW,KAAKsN,eAAerB,kBAClC,IAAIkK,GAAanW,KAAKsN,eAAeuF,WACrC,IAAIuD,GAAe,IAAOD,CAC1B,IAAIE,GAAYrW,KAAKsN,eAAesD,mBACpC,IAAI0F,KAKJ,IAAItW,KAAKuG,OACR8C,QAAQC,IAAI,6BAA+BH,EAAO,eAAiB8M,EAAU,eAAiBC,EAAU,iBAAmBG,EAE5H,IAAIE,GAAgB,CACpB,KAAKlX,EAAI,EAAGA,EAAIgX,EAAWhX,IAAK,CAE/B,GAAImX,GAAQ,GAAI3Q,GAChB,IAAI4Q,GAAc,WAAapX,CD3RtB,IC6RLqX,GAAgB1W,KAAKsN,eAAetB,kBAAoBoK,CAC5DI,GAAMG,aAAaJ,EAAeG,EAClCH,IAAiBG,CAEjBD,IAAe,cAAgBC,CAE/B,IAAIE,GAAY5W,KAAKsN,eAAesD,mBACpC,KAAKiF,EAAI,EAAGA,EAAIe,EAAWf,IAAK,CAC/B,GAAIgB,GAAY7W,KAAKsN,eAAerB,kBACpC,IAAI6K,GAAQ9W,KAAK2P,aAGjB8G,IAAe,kBAAoBK,EAAQ,kBAAoBD,EAGhE,GAAIE,GAAc/W,KAAKsN,eAAesD,mBACtC6F,IAAe,oBAAsBM,CACrC,IAAIC,GAAkB,KACtB,IAAIC,GAAgB,EACpB,KAAKpB,EAAI,EAAGA,EAAIkB,EAAalB,IAAK,CACjC,GAAIqB,EACJ,IAAIC,EACJ,IAAIC,GAAcpX,KAAKsN,eAAesD,mBAQtC,QAAQwG,GAEP,IAAK,GACL,IAAK,GACJ,GAAIC,GAAwB,KAC5BH,GAAWlX,KAAKsN,eAAetB,iBAC/B,IAAIsL,GAAa,CACjB,IAAIF,GAAe,EAAG,CAErBD,EAAanX,KAAKsN,eAAetB,iBACjC,IAAIuL,GAAevX,KAAK2P,aDpSH,ICuSjB6H,GAAyCxX,KAAK2G,QAAQwQ,GAAYrQ,IACtE,IAAI0Q,GAAa,KAAM,CACtBF,EAAavB,EAAkB0B,uBAAuBD,EACtDlB,GAAYY,GAAYI,CACxBd,GAAMkB,oBAAoB,GAAI5R,IAAgBwR,GAE9C,IAAIC,EAAa3X,OAAQ,CACxB4W,EAAMkB,oBAAoB,GAAI3R,IAAsBuR,EAAY,OAAQC,GACxEN,IAAiB,oCAAsCM,EAExDF,EAAgB,IAChBJ,IAAiB,gCAAkCE,EAAa,mBAAqBD,MAEjF,CACJD,GAAiB,iCAAmCC,EAAW,gCAAkCC,OAG9F,IAAIC,GAAe,EAAG,CAC1BE,EAAahB,EAAYY,EACzBG,GAAgB,IAChBJ,IAAiB,gCAAkCC,ED9RlC,GCwSdS,GAAsB3X,KAAK0R,iBAC9BqB,EAAG/S,KAAKkN,cACR+F,EAAGjT,KAAKkN,cACRgG,EAAGlT,KAAKmN,aACRiG,EAAGhN,EAAU+M,MACbE,EAAGjN,EAAU+M,MACbyE,EAAGxR,EAAUyR,QDpSI,ICwSdC,GAAsB9X,KAAKsN,eAAetB,iBAC9C,IAAI+L,GAAyB,GAAInR,MACjC,KAAK,GAAIoR,GAAgB,EAAGA,EAASF,EAAcE,IAAU,CAC5DD,EAAS/Q,KAAKhH,KAAKsN,eAAetB,mBAEnC,GAAIqL,EAAe,CAElB,GAAIY,GAAyBN,EAAMpE,IAAI,KDvSlB,ICySjB2E,GAA8BP,EAAMpE,IAAI,KAC5C,IAAI4E,GAAmBR,EAAMpE,IAAI,GAAI,EACrC,IAAI6E,GAAmBT,EAAMpE,IAAI,GAAI,EACrC,IAAI8E,GAAeV,EAAMpE,IAAI,GAAI,EACjC,IAAI+E,GAAqBX,EAAMpE,IAAI,KAKnC0D,IAAiB,sCAAwCgB,EAAUrY,MACnE,IAAIqY,EAAUrY,QAAU,EAAG,CAC1B,GAAI2Y,GAAa,GAAI1X,EACrB0X,GAAWlL,SAAW,GAAIvM,GAASmX,EAAU,GAAIA,EAAU,GAAI,EAE/DM,GAAWC,QAAQ,GAAKP,EAAU,EAClCM,GAAWC,QAAQ,GAAKP,EAAU,EAClCM,GAAWC,QAAQ,GAAKP,EAAU,EAClCM,GAAWC,QAAQ,GAAKP,EAAU,EAClCzB,GAAMkB,oBAAoB,GAAI3R,IAAsBuR,EAAY,aAAciB,GAE9EtB,IAAiB,sCAAwCgB,EAG1D,GAAIC,EAAetY,QAAU,GAAI,CAEhCqX,GAAiB,mCAAqCiB,EAIvD,GAAIC,GAAa,EAAG,CACnB,GAAIM,GAA0BzY,KAAK+G,aAAaoR,EAEhDlB,IAAiB,iCAAmCwB,EAGrD,GAAIL,GAAa,EAAG,CACnB,GAAIA,GAAa,EAChB5B,EAAMkB,oBAAoB,GAAI3R,IAAsBuR,EAAY,UAAW,YAE3Ed,GAAMkB,oBAAoB,GAAI3R,IAAsBuR,EAAY,UAAW,OAG7E,GAAIe,GAAS,EAAG,CACfpB,GAAiB,6BAA+BoB,CAChD7B,GAAMkB,oBAAoB,GAAI3R,IAAsBuR,EAAY,aAAce,GAC9ErB,GAAkB,KAInB,GAAIe,EAASnY,OAAS,EAAG,CACxB,GAAImY,EAASnY,QAAQ,GAAKmY,EAAS,IAAI,EAAG,CAEzCd,GAAiB,4CAEd,CAEHA,GAAiB,sCAAsCc,EAASnY,OAAO,UACvE,KAAK,GAAI8Y,GAAY,EAAGA,EAAKX,EAASnY,OAAQ8Y,IAAM,CACnDzB,GAAiB,sCAAsCc,EAASW,MAMpE,KAED,KAAK,GAGJxB,EAAWlX,KAAKsN,eAAetB,iBAC/B,IAAIsL,GAAahB,EAAYY,EAC7BV,GAAMkB,oBAAoB,GAAI1R,IAAmBsR,GACjDL,IAAiB,qCAAuCC,CACxD,MAED,KAAK,GAIJA,EAAWlX,KAAKsN,eAAetB,iBAC/BmL,GAAanX,KAAKsN,eAAetB,iBAEjCiL,IAAiB,oCAAsCE,EAAW9O,WAAa,mBAAqB6O,EAAS7O,UAC7G,MAED,SAEC4O,GAAiB,qCAAuCG,CACxD,QAKH,GAAIJ,EAAiB,CAEpBR,EAAMkB,oBAAoB,GAAIzR,IAC9B+Q,GAAkB,MAGnB,GAAI2B,GAAc3Y,KAAKsN,eAAetB,iBACtC,IAAI2M,EAAc,EAAG,CDrTR,GCuTRC,GAAa5Y,KAAKsN,eAAegH,aAAaqE,EAElDlC,IAAe,kBAAoBmC,EAEpCnC,GAAeQ,CAEfjX,MAAKsN,eAAetB,iBACpB3C,SAAQC,IAAImN,EACZV,GAAkB8C,SAASrC,GAI5BxW,KAAKoJ,gBAAwB2M,EAAmB5M,EAChDnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOiP,CAC7B/V,MAAK0R,gBAAgB,KACrB1R,MAAK2R,sBAGEvL,GAAA7F,UAAAuO,4BAAR,SAAoCY,GAGnC,GAAImF,GAAgB,GAAIpU,EDzTlB,IC4TF0I,GAAcnJ,KAAK2P,aACvB,IAAImJ,GAAkB9Y,KAAKsN,eAAesD,mBD1TpC,IC6TF+G,GAAsB3X,KAAK0R,iBAAiBqB,EAAE/S,KAAK+M,WAAYkG,EAAEjT,KAAK+M,YAC1E,IAAIgM,GAAmBpB,EAAMpE,IAAI,EAAG,EACpC,IAAIyF,GAAmBrB,EAAMpE,IAAI,EAAG,ED3T9B,IC8TF0F,GAAqB,CACzB,OAAOA,EAAcH,EAAU,CAC9B,GAAII,GAAsB,KAC1B,IAAI7Z,EACJ,IAAI+Q,GAAeC,CACnB,IAAI8I,EACJ,IAAIC,EAEJhJ,GAASpQ,KAAKsN,eAAetB,iBAC7BqE,GAASrQ,KAAKsN,eAAeD,SAAW+C,CAExC,IAAIiJ,GAAyBrZ,KAAK0R,iBAAiBqB,EAAE/S,KAAK+M,WAAYkG,EAAEjT,KAAK+M,YAE7E,OAAO/M,KAAKsN,eAAeD,SAAWgD,EAAQ,CAC7C,GAAIC,GAAa,CACjB,IAAIC,GAAkBC,EAAiBC,EAAgBC,CAGvDF,GAAWxQ,KAAKsN,eAAerB,kBAC/BsE,GAAYvQ,KAAKsN,eAAerB,kBAChCwE,GAAUzQ,KAAKsN,eAAetB,iBAC9B0E,GAAU1Q,KAAKsN,eAAeD,SAAWoD,CAEzC,IAAI6I,GAAUC,EAAUC,CAExB,IAAIhJ,GAAY,EAAG,CAClB,GAAIiJ,GAAsB,GAAI7S,MAE9B,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAE9C4I,EAAItZ,KAAKmR,WAAWnR,KAAK2M,aACzB4M,GAAIvZ,KAAKmR,WAAWnR,KAAK2M,aACzB6M,GAAIxZ,KAAKmR,WAAWnR,KAAK2M,aAEzB8M,GAAMnJ,KAASgJ,CACfG,GAAMnJ,KAASiJ,CACfE,GAAMnJ,KAASkJ,OAEV,IAAIhJ,GAAY,EAAG,CACzB,GAAIG,GAAwB,GAAI/J,MAEhC,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9CC,EAAQL,KAAStQ,KAAKsN,eAAesD,yBAGhC,IAAIJ,GAAY,EAAG,CACzB,GAAIU,GAAoB,GAAItK,MAC5B,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9CQ,EAAIZ,KAAStQ,KAAKmR,WAAWnR,KAAK2M,mBAG7B,IAAI6D,GAAY,EAAG,CAEzB,GAAIkJ,GAAwB,GAAI9S,MAEhC,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9CgJ,EAAQpJ,KAAStQ,KAAKmR,WAAWnR,KAAK2M,mBAGjC,IAAI6D,GAAY,EAAG,CACzB2I,EAAYvS,OAEZ,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9CyI,EAAU7I,KAAStQ,KAAKsN,eAAesD,oBAAoB,OAGtD,IAAIJ,GAAY,EAAG,CAEzB4I,EAAU,GAAIxS,MAEd,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9C0I,EAAQ9I,KAAStQ,KAAKmR,WAAWnR,KAAK2M,mBAEjC,IAAI6D,GAAY,EAAG,CACzBxQ,KAAKsN,eAAeD,SAAWqD,MACzB,IAAIF,GAAY,EAAG,CACzBxQ,KAAKsN,eAAeD,SAAWqD,MACzB,IAAIF,GAAY,GAAI,CAC1B0I,EAAc,IACd,IAAIrI,GAAiB,CACrB,IAAIC,GAAoB,CACxB,IAAIC,GAAiB,CAErB,IAAIC,GAA0B,GAAIpK,MAClC,IAAIqK,GAA0B,GAAIrK,MAClC,IAAIsK,GAAoB,GAAItK,MAE5B,OAAO5G,KAAKsN,eAAeD,SAAWqD,EAAS,CAE9CM,EAAUH,KAAa7Q,KAAKmR,WAAWnR,KAAK2M,aAC5CqE,GAAUH,KAAa7Q,KAAKmR,WAAWnR,KAAK2M,aAC5CqE,GAAUH,KAAc7Q,KAAKmR,WAAWnR,KAAK2M,aAE7CsE,GAAUH,KAAgB9Q,KAAKmR,WAAWnR,KAAK2M,aAC/CsE,GAAUH,KAAgB9Q,KAAKmR,WAAWnR,KAAK2M,aAE/CuE,GAAIH,KAAa/Q,KAAKmR,WAAWnR,KAAK2M,aACtCuE,GAAIH,KAAa/Q,KAAKmR,WAAWnR,KAAK2M,mBAGnC,CACJ3M,KAAKsN,eAAeD,SAAWqD,GAKjC1Q,KAAK2R,qBACL,IAAGuH,EAAc,CAChB,GAAI9H,GAAkC,GAAI1Q,GAAiB,KAC3D0Q,GAAeC,cAAcV,EAC7BS,GAAeE,gBAAgBN,EAC/BI,GAAeG,aAAaN,EAC5BG,GAAeI,UAAUN,EACzB2D,GAAK8E,eAAevI,EACpB,IAAIpR,KAAKuG,OACR8C,QAAQC,IAAI,iCAET,CACJ,GAAIsQ,GAAoB,GAAIjZ,GAAoB,KAChD,IAAIyY,EACHQ,EAAkBC,gBAAkBT,EAAQxZ,QAAU6Z,EAAM7Z,OAAS,EACtE,IAAI8Z,EACHE,EAAkBE,kBAAoB,KACvC,IAAI5I,EACH0I,EAAkBG,cAAgB,KAEnC,IAAI,KAAM,CACTH,EAAkBI,mBAAqB,KAExCJ,EAAkBvI,cAAcV,EAChCiJ,GAAkBtI,gBAAgBmI,EAClCG,GAAkBK,oBAAoBP,EACtCE,GAAkBpI,UAAUN,EAC5B0I,GAAkBM,qBAAqB,KACvCN,GAAkBO,mBAAmBf,EACrCQ,GAAkBQ,mBAAmBjB,EAErC,IAAIkB,GAAgBhB,EAAS9F,IAAI,EAAG,EACpC,IAAI+G,GAAgBjB,EAAS9F,IAAI,EAAG,EACpC,IAAIgH,GAAoB,KAExB,IAAKxB,GAAasB,GAAYrB,GAAasB,EAAS,CACnDC,EAAY,IACZF,GAAStB,EAAYsB,CACrBC,GAAStB,EAAYsB,EAGtB,GAAIC,EACHX,EAAkBY,QAAQH,EAAQC,EACnCzF,GAAK8E,eAAeC,EACpB,IAAI5Z,KAAKuG,OACR8C,QAAQC,IAAI,gCAOd2P,IAED,GAAKF,GAAa,GAAOC,GAAa,EACrCnE,EAAK2F,QAAQzB,EAAWC,EACzBhZ,MAAK2R,qBACL3R,MAAKoJ,gBAAyByL,EAAM1L,EACpCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO+N,CAE7B,IAAI7U,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,qCAAuCH,IAO7C/C,GAAA7F,UAAA0N,eAAR,SAAuByB,GAEtB,GAAIvG,EACJ,IAAIsR,EACJ,IAAIC,EACJ,IAAIzB,EACJ,IAAItB,EACJ,IAAIgD,EAGJxR,GAAOnJ,KAAK2P,aACZ+K,GAAW1a,KAAKsN,eAAerB,kBAC/B0L,GAAQ3X,KAAK0R,iBAAiBkJ,IAAI5a,KAAK+M,WAAY8N,IAAI7a,KAAK+M,WAAY+N,IAAI9a,KAAK+M,WAAYgO,IAAI/a,KAAK+M,WAAYiO,IAAIhb,KAAK+M,WAAYkO,IAAI7U,EAAU4M,OAAQkI,IAAI9U,EAAU4M,OAAQmI,IAAI/U,EAAU4M,OAAQoI,IAAIhV,EAAUiV,KAAMC,IAAIlV,EAAUiV,KAAME,IAAInV,EAAUiV,KAAMG,IAAIpV,EAAUiV,MAEnR,IAAII,IAAgC,sBAAuB,uBAAwB,sBAAuB,wBAAyB,0BAA2B,uBAAwB,0BAA2B,wBAEjN,QAAQf,GAGP,IAAK,GACJD,EAAS,GAAIzX,GAAqB2U,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,MAAOoE,EAAMpE,IAAI,IAAK,OACvJ,MAED,KAAK,GACJkH,EAAS,GAAI3X,GAAoB6U,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,MACxK,MAED,KAAK,GACJkH,EAAS,GAAIxX,GAAsB0U,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,MAC9G,MAED,KAAK,GACJkH,EAAS,GAAI1X,GAAwB4U,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,GAAI,KAAM,KAAM,KACrJ,KAAKoE,EAAMpE,IAAI,IAAK,MACOkH,EAAQiB,UAAY,KAC/C,KAAK/D,EAAMpE,IAAI,IAAK,MACOkH,EAAQkB,aAAe,KAClD,KAAKhE,EAAMpE,IAAI,IAAK,MACOkH,EAAQmB,IAAM,KAEzC,MAED,KAAK,GACJnB,EAAS,GAAI5X,GAAoB8U,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,MAAOoE,EAAMpE,IAAI,IAAK,MACtJ,MAED,KAAK,GACJkH,EAAS,GAAI7X,GAAuB+U,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,MACpI,MAED,KAAK,GACJkH,EAAS,GAAIvX,GAAqByU,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,IAAKoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,MAChI,MAED,SACCkH,EAAS,GAAI9X,EACb0G,SAAQC,IAAI,iCACZ,OAGF,GAAKqO,EAAMpE,IAAI,IAAK,IAAM,GAAOoE,EAAMpE,IAAI,IAAK,IAAM,EAAI,EAK1DvT,KAAK2R,qBACL8I,GAAOtR,KAAOA,CACdnJ,MAAKoJ,gBAAgBqR,EAAQtR,EAC7BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO2T,CAE7B,IAAIza,KAAKuG,OAAQ,CAChB,GAAKmU,EAAW,GAAOA,EAAW,EAAI,CACrCA,EAAW,EAEZrR,QAAQC,IAAI,8BAAgCH,EAAO,YAAcsS,EAAef,KAK1EtU,GAAA7F,UAAAwO,eAAR,SAAuBW,GAEtB,GAAIvG,EACJ,IAAI0S,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAEJH,GAAS7b,KAAKsN,eAAetB,iBAC7B8P,GAAM9b,KAAKic,eACX9S,GAAOnJ,KAAK2P,aAEZ,IAAIuM,GAAoB,iBACxBH,GAAM,GAAIna,EACVma,GAAII,UAAUC,SAAWN,CAEzB,IAAIO,GAA2Brc,KAAK8R,aAAa+J,GAASja,EAAuBmQ,UAAWlQ,EAAUkQ,UAAW9P,EAAK8P,WAEtH,IAAIsK,EAAc,GAAI,CACrB,GAAIC,GAA8CD,EAAc,GAAIE,SAASR,EAC7EG,GAAuCG,EAAc,GAAIlT,SACnD,IAAI0S,EAAS,EAAG,CACtB7b,KAAK2G,QAAS+I,GAAUuC,SAAS,0DAC3B,CAEoBjS,KAAKuL,UAAWgR,SAASR,GAIpD,GAAK/b,KAAKgI,SAAS,IAAM,GAAOhI,KAAKgI,SAAS,IAAM,EAAI,CACvD,GAAI2P,GAAsB3X,KAAK0R,iBAAiBqB,EAAE/S,KAAKkN,cAAe+F,EAAEjT,KAAKkN,cAAegG,EAAElT,KAAKkN,cAAekG,EAAEhN,EAAU+M,OAC9H4I,GAAIS,MAAQ,GAAI1b,GAAS6W,EAAMpE,IAAI,EAAG,GAAIoE,EAAMpE,IAAI,EAAG,GAAIoE,EAAMpE,IAAI,EAAG,QAGpE,CACJvT,KAAK0R,gBAAgB,MAItBqK,EAAItH,MAAQzU,KAAK2R,qBAEjB3R,MAAKoJ,gBAAyB2S,EAAK5S,EACnCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOiV,CAE7B,IAAI/b,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,+BAAiCH,EAAO,qBAAuB+S,IAKrE9V,GAAA7F,UAAAyO,kBAAR,SAA0BU,GAEzB,GAAIiF,EACJ,IAAIC,EACJ,IAAIoH,EACJ,IAAIH,GAAgB7b,KAAKsN,eAAetB,iBACxC,IAAI8P,GAAe9b,KAAKic,eACxB,IAAI9S,GAAcnJ,KAAK2P,aACvB,IAAIuM,GAAoB,iBACxB,IAAI5J,GAAiBtS,KAAKsN,eAAetB,iBACzC,IAAI6I,EACJ,IAAIC,GAAmC9U,KAAK8R,aAAaQ,GAAU7R,EAASsR,WAE5E,IAAI+C,EAAsB,GAAI,CAC7BD,EAAkBC,EAAsB,OAClC,CACN9U,KAAK2G,QAAQ+I,GAASuC,SAAS,wEAC/B4C,GAAO,GAAIpU,GAGZT,KAAK2G,QAAQ+I,GAASqF,MAAQzC,CAC9B,IAAI0C,GAAgC,GAAIpO,MACxC+N,GAAgB3U,KAAKsN,eAAesD,mBAEpC,IAAIqE,GAA8B,GAAIrO,MACtCgO,GAAmB,CAEnB,IAAIrC,EAEJ,OAAOqC,EAAmBD,EAAe,CACxC,GAAIO,EACJA,GAASlV,KAAKsN,eAAetB,iBAC7BuG,GAAwBvS,KAAK8R,aAAaoD,GAAS5S,EAAayP,WAChE,KAAMQ,EAAsB,IAAQ2C,EAAS,EAAI,CAChDlV,KAAK2G,QAAQ+I,GAASuC,SAAS,8BAAgC2C,EAAmB,UAAYM,EAAS,oBAGxG,GAAIC,GAAgC5C,EAAsB,EAE1DyC,GAAUhO,KAAKmO,EACfF,GAAcjO,KAAKmO,EAAEhM,KAErByL,KAGD,GAAIQ,GAAY,GAAInT,GAAK4S,EAAM,KAC/BO,GAAK+G,UAAUC,SAAWN,CAE1B,IAAIW,GAAiCzc,KAAK8R,aAAa+J,GAASja,EAAuBmQ,UAAWlQ,EAAUkQ,UAAW9P,EAAK8P,WAE5H,IAAI0K,EAAoB,GAAI,CAC3B,GAAIC,GAAuDD,EAAoB,EAC/EC,GAAKH,SAASnH,EACd8G,GAAaQ,EAAKvT,SACZ,IAAI0S,EAAS,EAAG,CACtB7b,KAAK2G,QAAQ+I,GAASuC,SAAS,6CACzB,CAEoBjS,KAAKuL,UAAWgR,SAASnH,GAGpD,GAAIJ,EAAUpV,QAAU,GAAKwV,EAAKC,UAAUzV,QAAU,EAAG,CACxDwV,EAAK1B,SAAWsB,EAAU,OACpB,IAAIA,EAAUpV,OAAS,EAAG,CAChC,GAAIP,EAIJ,KAAKA,EAAI,EAAGA,EAAI+V,EAAKC,UAAUzV,OAAQP,IAAK,CAC3C+V,EAAKC,UAAUhW,GAAGqU,SAAWsB,EAAUM,KAAKC,IAAIP,EAAUpV,OAAS,EAAGP,KAGxE,GAAKW,KAAKgI,SAAS,IAAM,GAAOhI,KAAKgI,SAAS,IAAM,EAAI,CACvD,GAAI2P,GAAsB3X,KAAK0R,iBAAiBqB,EAAE/S,KAAKkN,cAAe+F,EAAEjT,KAAKkN,cAAegG,EAAElT,KAAKkN,cAAekG,EAAEhN,EAAU+M,MAAOE,EAAEjN,EAAUiV,MACjJjG,GAAKoH,MAAQ,GAAI1b,GAAiB6W,EAAMpE,IAAI,EAAG,GAAYoE,EAAMpE,IAAI,EAAG,GAAaoE,EAAMpE,IAAI,EAAG,GAClG6B,GAAKuH,aAAehF,EAAMpE,IAAI,EAAG,UAC3B,CACNvT,KAAK0R,gBAAgB,MAGtB0D,EAAKX,MAAQzU,KAAK2R,qBAElB3R,MAAKoJ,gBAAyBgM,EAAMjM,EACpCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOsO,CAE7B,IAAIpV,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,0BAA4BH,EAAO,qBAAuB+S,EAAa,qBAAuBrH,EAAK1L,KAAO,kBAAoBiM,EAAKC,UAAUzV,OAAS,kBAAoBqV,EAAc5M,aAM9LjC,GAAA7F,UAAA2N,oBAAR,SAA4BwB,GAE3B,GAAIvG,GAAcnJ,KAAK2P,aACvB,IAAIiN,GAAqB5c,KAAKsN,eAAetB,iBAE7C,IAAI6Q,GAAkC7c,KAAK8R,aAAa8K,GAAcnb,EAAYsQ,WAAY,cAC9F,KAAM8K,EAAqB,IAAQD,GAAe,EACjD5c,KAAK2G,QAAQ+I,GAASuC,SAAS,wCAA0C2K,EAAc,qBACxF,IAAI/T,GAAe,GAAIzG,GAA0Bya,EAAqB,GAEtE7c,MAAK0R,gBAAgB,KACrB7I,GAAM4L,MAAQzU,KAAK2R,qBACnB3R,MAAKoJ,gBAAgBP,EAAOM,EAC5BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO+B,CAC7B,IAAI7I,KAAKuG,OACR8C,QAAQC,IAAI,4BAA8BH,EAAO,0BAAgD0T,EAAqB,GAAI1T,MAKpH/C,GAAA7F,UAAA4N,WAAR,SAAmBuB,GAElB,GAAIoN,EACJ,IAAIC,EAEJ,IAAIlB,GAAgB7b,KAAKsN,eAAetB,iBACxC,IAAI8P,GAAe9b,KAAKic,eACxB,IAAI9S,GAAcnJ,KAAK2P,aACvB,IAAIqN,GAAmBhd,KAAKsN,eAAerB,kBAC3C,IAAI0L,GAAsB3X,KAAK0R,iBAAiBqB,EAAE/S,KAAKmN,aAAc8F,EAAEjT,KAAKmN,aAAc+F,EAAE9M,EAAU6W,MAAO7J,EAAEpT,KAAKmN,aAAckG,EAAErT,KAAKmN,aAAcyK,EAAExR,EAAUiV,KAAM6B,EAAE9W,EAAU6W,MAAOE,EAAEnd,KAAKmN,aAAciQ,EAAEhX,EAAU+M,MAAOkK,GAAGjX,EAAU+M,MAAOmK,GAAGtd,KAAKmN,aAAcoQ,GAAGnX,EAAU4M,OAAQwK,GAAGxd,KAAKkN,cAAeuQ,GAAGzd,KAAKkN,cAAewQ,GAAG1d,KAAKkN,eACzV,IAAIyQ,GAA0BhG,EAAMpE,IAAI,EAAG,EAC3C,IAAI2I,GAAoB,iBACxB,IAAI0B,IAA4B,wBAAyB,aAAc,mBACvE,IAAIC,IAAmC,kBAAmB,0BAA2B,8BAA+B,sBAAuB,sBAE3I,IAAIb,GAAa,EAAG,CACnBF,EAAQ,GAAI/a,EAEE+a,GAAOgB,OAASnG,EAAMpE,IAAI,EAAG,IAC7BuJ,GAAOiB,QAAUpG,EAAMpE,IAAI,EAAG,IAE5C,IAAIoK,EAAmB,EAAG,CACzB,GAAIA,GAAoB,EAAG,CAC1BZ,EAAkB,GAAIta,IAIxBqa,EAAMX,UAAUC,SAAWN,EAI5B,GAAIkB,GAAa,EAAG,CAEnBF,EAAQ,GAAIhb,GAAiB6V,EAAMpE,IAAI,GAAI,GAAIoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,GAAI,GAEhF,IAAIoK,EAAmB,EAAG,CACzB,GAAIA,GAAoB,EAAG,CAC1BZ,EAAkB,GAAIra,KAWzBoa,EAAMkB,MAAQrG,EAAMpE,IAAI,EAAG,SAC3BuJ,GAAMmB,SAAWtG,EAAMpE,IAAI,EAAG,EAC9BuJ,GAAMoB,QAAUvG,EAAMpE,IAAI,EAAG,EAC7BuJ,GAAMqB,aAAexG,EAAMpE,IAAI,EAAG,SAClCuJ,GAAMsB,QAAUzG,EAAMpE,IAAI,EAAG,EAG7B,IAAIwJ,EAAiB,CACpB,GAAIA,YAA2Bta,GAAqB,CACnD,GAAIkV,EAAMpE,IAAI,GAAI,IAAM,EAAG,CAC1BwJ,EAAgBsB,aAAere,KAAK+H,cAAc4P,EAAMpE,IAAI,GAAI,SAE3D,CACN,GAAIoE,EAAMpE,IAAI,GAAI,IAAM,EAAG,CAC1BwJ,EAAgBsB,aAAere,KAAK+H,cAAc4P,EAAMpE,IAAI,GAAI,KAIlEuJ,EAAMwB,aAAevB,CACrBD,GAAMH,aAAe,KAGtB,GAAId,GAAU,EAAG,CAEhB,GAAIY,GAAiCzc,KAAK8R,aAAa+J,GAASja,EAAuBmQ,UAAWlQ,EAAUkQ,UAAW9P,EAAK8P,WAE5H,IAAI0K,EAAoB,GAAI,CACDA,EAAoB,GAAIF,SAASO,EAC3DZ,GAAuCO,EAAoB,GAAItT,SACzD,CACNnJ,KAAK2G,QAAQ+I,GAASuC,SAAS,+CAE1B,CAEoBjS,KAAKuL,UAAWgR,SAASO,GAGpD9c,KAAK2R,qBAEL3R,MAAKoJ,gBAA0B0T,EAAO3T,EAEtCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOgW,CAE7B,IAAI9c,KAAKuG,OACR8C,QAAQC,IAAI,2BAA6BH,EAAO,cAAgByU,EAAWZ,GAAa,oBAAsBd,EAAa,0BAA4B2B,EAAkBF;CAKnKvX,GAAA7F,UAAA6N,YAAR,SAAoBsB,GAGnB,GAAImM,GAAgB7b,KAAKsN,eAAetB,iBACxC,IAAI8P,GAAe9b,KAAKic,eACxB,IAAI9S,GAAcnJ,KAAK2P,aACvB,IAAIuM,GAAoB,iBACxB,IAAIqC,EAEJve,MAAKsN,eAAerB,kBACpBjM,MAAKsN,eAAekR,WAEpB,IAAIC,GAAwBze,KAAKsN,eAAekR,WAChD,IAAI7G,GAAsB3X,KAAK0R,iBAAiBkJ,IAAI5a,KAAKmN,aAAc0N,IAAI7a,KAAKmN,aAAc2N,IAAI9a,KAAKmN,aAAcuR,IAAI1e,KAAKmN,cAE9H,QAAQsR,GACP,IAAK,MACJF,EAAa,GAAIpd,GAAsBwW,EAAMpE,IAAI,IAAK,IACtD,MACD,KAAK,MACJgL,EAAa,GAAInd,GAAuBuW,EAAMpE,IAAI,IAAK,KACvD,MACD,KAAK,MACJgL,EAAa,GAAIld,GAAgCsW,EAAMpE,IAAI,KAAM,KAAMoE,EAAMpE,IAAI,IAAK,KAAMoE,EAAMpE,IAAI,KAAM,KAAMoE,EAAMpE,IAAI,IAAK,KACjI,MACD,SACClK,QAAQC,IAAI,sBACZ,QAGF,GAAIqV,GAAgB,GAAI3c,GAAOuc,EAC/BI,GAAOxC,UAAUC,SAAWN,CAE5B,IAAIW,GAAiCzc,KAAK8R,aAAa+J,GAASja,EAAuBmQ,UAAWlQ,EAAUkQ,UAAW9P,EAAK8P,WAE5H,IAAI0K,EAAoB,GAAI,CAE3B,GAAIC,GAAuDD,EAAoB,EAC/EC,GAAKH,SAASoC,EAEdzC,GAAaQ,EAAKvT,SAEZ,IAAI0S,EAAS,EAAG,CACtB7b,KAAK2G,QAAQ+I,GAASuC,SAAS,+CACzB,CAEoBjS,KAAKuL,UAAWgR,SAASoC,GAGpDA,EAAOxV,KAAOA,CACdwO,GAAQ3X,KAAK0R,iBAAiBqB,EAAE/S,KAAKkN,cAAe+F,EAAEjT,KAAKkN,cAAegG,EAAElT,KAAKkN,cAAekG,EAAEhN,EAAU+M,OAC5GwL,GAAOnC,MAAQ,GAAI1b,GAAS6W,EAAMpE,IAAI,EAAG,GAAIoE,EAAMpE,IAAI,EAAG,GAAIoE,EAAMpE,IAAI,EAAG,GAC3EoL,GAAOlK,MAAQzU,KAAK2R,qBAEpB3R,MAAKoJ,gBAAgBuV,EAAQxV,EAE7BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO6X,CAE7B,IAAI3e,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,4BAA8BH,EAAO,wBAA0BoV,EAAa,oBAAsBrC,IAMxG9V,GAAA7F,UAAA8N,iBAAR,SAAyBqB,GAExB,GAAIvG,GAAcnJ,KAAK2P,aACvB,IAAIiP,GAAmB5e,KAAKsN,eAAesD,mBAC3C,IAAIiO,GAA+B,GAAIjY,MACvC,IAAIkP,GAAW,CACf,IAAIgJ,GAAiB,CAErB,IAAIC,EACJ,IAAIC,GAAiC,GAAIpY,MAEzC,KAAKkP,EAAI,EAAGA,EAAI8I,EAAW9I,IAAK,CAC/BgJ,EAAU9e,KAAKsN,eAAetB,iBAC9B+S,GAAqB/e,KAAK8R,aAAagN,GAAUjd,EAAUkQ,WAE3D,IAAIgN,EAAmB,GAAI,CAC1BF,EAAY7X,KAAiB+X,EAAmB,GAChDC,GAAiBhY,KAAmB+X,EAAmB,GAAI5V,UAErD,CACNnJ,KAAK2G,QAAQ+I,GAASuC,SAAS,6BAA+B6D,EAAI,UAAYgJ,EAAU,4BAI1F,GAAID,EAAYjf,QAAU,EAAG,CAC5BI,KAAK2G,QAAQ+I,GAASuC,SAAS,+DAC/BjS,MAAK2R,qBACL,QAGD,GAAIsN,GAA4B,GAAIzc,GAAkBqc,EACtDI,GAAU9V,KAAOA,CAEjBnJ,MAAK2R,qBACL3R,MAAKoJ,gBAAyB6V,EAAW9V,EAEzCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOmY,CAC7B,IAAIjf,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,uCAAyCH,EAAO,sBAAwB6V,EAAiB3W,aAK/FjC,GAAA7F,UAAA0O,cAAR,SAAsBS,GD1bf,GC8bFvG,EACJ,IAAIyC,EACJ,IAAI+L,EACJ,IAAI3O,EACJ,IAAIkW,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIhD,EAEJlT,GAAOnJ,KAAK2P,aACZ/D,GAAO5L,KAAKsN,eAAerB,kBAC3BmT,GAAcpf,KAAKsN,eAAerB,kBAIlC0L,GAAQ3X,KAAK0R,iBAAkBqB,EAAE3M,EAAUkZ,MAAOrM,EAAE7M,EAAUmZ,MAAOlC,GAAGrd,KAAKmN,aAAcmQ,GAAGlX,EAAUiV,KAAMkC,GAAGvd,KAAKmN,aAAcqS,GAAGpZ,EAAUiV,MAEjJgE,GAAiB,CACjB,OAAOA,EAAiBD,EAAa,CACpC,GAAIK,EAEJA,GAAczf,KAAKsN,eAAesD,mBAClC5Q,MAAK0R,gBAAgB,KACrB1R,MAAK2R,qBACL0N,IAAkB,EAEnB,GAAIK,GAAqB,EACzBR,GAAalf,KAAK2R,qBAClB,IAAI/F,IAAS,EAAG,CACf8T,GAAe,+CAAiDvW,EAAO,MACvE,IAAI6U,EACJA,GAAQrG,EAAMpE,IAAI,EAAG,SACrB,IAAIvT,KAAK2f,aAAe,EAAG,CAC1B3W,EAAM,GAAIjF,IAAeia,EAAOrG,EAAMpE,IAAI,GAAI,QACxC,CACNvK,EAAM,GAAIjF,IAAeia,EACzBhV,GAAI4W,KAAO9b,GAAmB+b,gBAEzB,IAAIjU,IAAS,EAAG,CACtB,GAAIkU,GAAkBnI,EAAMpE,IAAI,EAAG,EAEnC8I,GAAgBrc,KAAK8R,aAAagO,GAAWre,EAAYsQ,WAEzD,KAAMsK,EAAc,IAAQyD,EAAW,EACtC9f,KAAK2G,QAAQ+I,GAASuC,SAAS,2CAA6C6N,EAAW,uBAExF9W,GAAM,GAAIjF,IAA+BsY,EAAc,GAEvD,IAAIrc,KAAK2f,aAAe,EAAG,CAC1B3W,EAAI+W,cAAgBpI,EAAMpE,IAAI,GAAI,MAClCvK,GAAIgX,MAAQrI,EAAMpE,IAAI,GAAI,EAC1BmM,IAAe,gDAAkDvW,EAAO,sBAAwBH,EAAIG,SAC9F,CACNH,EAAI4W,KAAO9b,GAAmB+b,UAC9BH,IAAe,+CAAiDvW,EAAO,sBAAwBH,EAAIG,MAIrGH,EAAIyL,MAAQyK,CACZlW,GAAIiX,eAAiBtI,EAAMpE,IAAI,GAAI,EACnCvK,GAAIkX,OAASvI,EAAMpE,IAAI,GAAI,MAC3BvT,MAAKoJ,gBAAyBJ,EAAKG,EACnCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOkC,CAE7B,IAAIhJ,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAIoW,IAMNtZ,GAAA7F,UAAA+N,iBAAR,SAAyBoB,GAExB,GAAI1G,EACJ,IAAImX,EACJ,IAAIC,EACJ,IAAI/D,EAEJ,IAAIlT,GAAcnJ,KAAK2P,aACvB,IAAI/D,GAAc5L,KAAKsN,eAAerB,kBACtC,IAAImT,GAAqBpf,KAAKsN,eAAerB,kBAC7C,IAAI0L,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUyR,OAAQ5E,EAAE7M,EAAUmZ,MAAOrM,EAAE9M,EAAUmZ,MAAOnM,EAAEhN,EAAU+M,MAAOE,EAAEjN,EAAUiV,KAAMzD,EAAExR,EAAUiV,KAAM6B,EAAE9W,EAAUiV,KAAM8B,EAAE/W,EAAUiV,KAAM+B,EAAEhX,EAAU+M,MAAOkK,GAAGrd,KAAKmN,aAAcmQ,GAAGlX,EAAUiV,KAAMkC,GAAGvd,KAAKmN,aAAcqS,GAAGpZ,EAAUiV,KAAMgF,GAAGrgB,KAAKmN,aAAcmT,GAAGla,EAAUyR,OAAQ0I,GAAGna,EAAUmZ,MAAOiB,GAAGxgB,KAAKmN,aAAcsT,GAAGzgB,KAAKmN,aAAcuT,GAAGta,EAAUyR,OAAQ2F,GAAGpX,EAAUmZ,MAAO9B,GAAGrX,EAAUmZ,OAC3c,IAAIoB,GAAqBhJ,EAAMpE,IAAI,EAAG,EACtC,IAAImM,GAAqB,kBAEzB,IAAIiB,GAAe,EAAG,CACrB3gB,KAAK2G,QAAQ+I,GAASuC,SAAS,yBAA2B0O,EAAc,8DACxE,QAGD,GAAI/U,GAAQ,EAAG,CACd,GAAI5L,KAAK2f,cAAgB,EACxBgB,EAAc,MACV,IAAI3gB,KAAK2f,cAAgB,EAC7BgB,EAAc,CAEf,IAAIA,EAAc,EAAG,CAEpB,GAAI/U,GAAQ,EAAG,CACd,GAAIoS,GAAerG,EAAMpE,IAAI,EAAG,SAEhC,IAAIoN,GAAe,EAAG,CACrB3X,EAAM,GAAIjF,IAAeia,EACzBhV,GAAI4W,KAAO9b,GAAmB+b,UAC9BH,IAAe,8CAAgDvW,EAAO,WAEhE,CACNH,EAAM,GAAIjF,IAAeia,EAAOrG,EAAMpE,IAAI,GAAI,GAC9CvK,GAAI+W,cAAgBpI,EAAMpE,IAAI,GAAI,MAClCmM,IAAe,+CAAiDvW,EAAO,YAGlE,IAAIyC,GAAQ,EAAG,CACrB,GAAIkU,GAAkBnI,EAAMpE,IAAI,EAAG,EACnC8I,GAAgBrc,KAAK8R,aAAagO,GAAWre,EAAYsQ,WAEzD,KAAMsK,EAAc,IAAQyD,EAAW,EACtC9f,KAAK2G,QAAQ+I,GAASuC,SAAS,2CAA6C6N,EAAW,6BAExF,IAAIc,GAAwBvE,EAAc,EAE1CrT,GAAM,GAAIjF,IAAe6c,EAEzB,IAAID,GAAe,EAAG,CACrB3X,EAAI4W,KAAO9b,GAAmB+b,UAE9BH,IAAe,+CAAiDvW,EAAO,sBAAwByX,EAAQzX,SACjG,CACNH,EAAIgX,MAAQrI,EAAMpE,IAAI,GAAI,EAC1BvK,GAAI+W,cAAgBpI,EAAMpE,IAAI,GAAI,MAElCmM,IAAe,gDAAkDvW,EAAO,sBAAwByX,EAAQzX,MAI1G,GAAI0X,EACJ,IAAIC,GAAyBnJ,EAAMpE,IAAI,GAAI,EAE3C8I,GAAgBrc,KAAK8R,aAAagP,GAAkBrf,EAAYsQ,WAEhE,KAAMsK,EAAc,IAAQyE,GAAmB,EAAI,CAClD9gB,KAAK2G,QAAQ+I,GAASuC,SAAS,2CAA6C6O,EAAkB,8BAG/F,GAAIzE,EAAc,GACjBwE,EAAiBxE,EAAc,EAEhC,IAAIwE,EAAgB,CACnB7X,EAAI6X,eAAiBA,CACrBnB,IAAe,4BAA8BmB,EAAe1X,KAG7D,GAAI4X,GAAwBpJ,EAAMpE,IAAI,EAAG,EAEzC8I,GAAgBrc,KAAK8R,aAAaiP,GAAiBtf,EAAYsQ,WAE/D,KAAMsK,EAAc,IAAQ0E,GAAkB,EAAI,CACjD/gB,KAAK2G,QAAQ+I,GAASuC,SAAS,0CAA4C8O,EAAiB,8BAG7F,GAAI1E,EAAc,GAAI,CACrB8D,EAAgB9D,EAAc,EAC9BqD,IAAe,2BAA6BS,EAAchX,KAG3D,GAAI6X,GAAsBrJ,EAAMpE,IAAI,GAAI,EACxC8I,GAAgBrc,KAAK8R,aAAakP,GAAevf,EAAYsQ,WAE7D,KAAMsK,EAAc,IAAQ2E,GAAgB,EAAI,CAC/ChhB,KAAK2G,QAAQ+I,GAASuC,SAAS,4CAA8C+O,EAAe,8BAE7F,GAAI3E,EAAc,GAAI,CACrB+D,EAAc/D,EAAc,EAC5BqD,IAAe,6BAA+BU,EAAYjX,KAG3D,GAAI8X,GAAyBtJ,EAAMpE,IAAI,GAAI,EAC3C8I,GAAgBrc,KAAK8R,aAAamP,GAAkB1e,EAAgBwP,WAEpE,KAAMsK,EAAc,IAAO,EAAmB,CAC7Crc,KAAK2G,QAAQ+I,GAASuC,SAAS,wCAA0CgP,EAAkB,kCACrF,CACNjY,EAAIkY,YAAgC7E,EAAc,GAInDrT,EAAImY,OAASxJ,EAAMpE,IAAI,EAAG,KAC1BvK,GAAIoY,OAASzJ,EAAMpE,IAAI,EAAG,KAC1BvK,GAAIwJ,UAAYmF,EAAMpE,IAAI,EAAG,MAC7BvK,GAAIqY,mBAAqB1J,EAAMpE,IAAI,EAAG,MACtCvK,GAAIsY,UAAYthB,KAAK+G,aAAa4Q,EAAMpE,IAAI,EAAG,GAC/CvK,GAAIkX,OAASvI,EAAMpE,IAAI,GAAI,MAE3B,IAAI4M,EACHnX,EAAIuY,UAAYpB,CAEjB,IAAIC,EACHpX,EAAIwY,YAAcpB,CAEnBpX,GAAIiX,eAAiBtI,EAAMpE,IAAI,GAAI,EACnCvK,GAAIoV,QAAUzG,EAAMpE,IAAI,GAAI,EAC5BvK,GAAIyY,aAAe9J,EAAMpE,IAAI,GAAI,SACjCvK,GAAIiV,SAAWtG,EAAMpE,IAAI,GAAI,EAC7BvK,GAAI0Y,MAAQ/J,EAAMpE,IAAI,GAAI,GAC1BvK,GAAI2Y,cAAgBhK,EAAMpE,IAAI,GAAI,SAElC,IAAI8L,GAAwB,CAC5B,IAAIuC,EAEJ,OAAOvC,EAAiBD,EAAa,CACpC,GAAIK,EACJA,GAAczf,KAAKsN,eAAesD,mBAElC+G,GAAQ3X,KAAK0R,iBACZqB,EAAG3M,EAAUmZ,MACbtM,EAAG7M,EAAUmZ,MACbrM,EAAG9M,EAAUmZ,MACb3E,IAAK5a,KAAKmN,aACV0N,IAAK7a,KAAKmN,aACV2N,IAAK9a,KAAKmN,aACV0U,IAAKzb,EAAUyR,OACfiK,IAAK1b,EAAUyR,OACfoD,IAAK7U,EAAU4M,OACfkI,IAAK9U,EAAU4M,OACf+O,IAAK3b,EAAU+M,MACf6O,IAAK5b,EAAU+M,MACf8O,IAAK7b,EAAU6W,MACfiF,IAAK9b,EAAU6W,MACf7B,IAAKhV,EAAUiV,KACfC,IAAKlV,EAAUiV,KACf8G,IAAK/b,EAAUgc,QAGhB,QAAQ3C,GACP,IAAK,KAEJmC,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAW/c,GAAiBkN,WAE9D,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,yCAA2C2P,EAAW,4BAC/E,CACN5Y,EAAIqZ,gBAAgBhG,EAAc,GAElCqD,IAAe,0BAAgDrD,EAAc,GAAIlT,KAGlF,KAED,KAAK,KAEJyY,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAW1c,GAAoB6M,WAEjE,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,yCAA2C2P,EAAW,4BAC/E,CACN5Y,EAAIsZ,aAAejG,EAAc,EACjCqD,IAAe,0BAAgDrD,EAAc,GAAIlT,KAGlF,KAED,KAAK,GACJyY,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WAAY,cACrE,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,mCAAqC2P,EAAW,0CAChF5Y,GAAIuZ,cAAgB,GAAIve,IAAoBqY,EAAc,GAC1DqD,IAAe,yCAA8DrD,EAAc,GAAIlT,IAC/F,MAED,KAAK,IACJH,EAAIwZ,cAAgB,GAAIve,GACxByb,IAAe,uBACf,MACD,KAAK,IACJkC,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WACzD,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,mDAAqD2P,EAAW,oCAChG5Y,GAAIwZ,cAAgB,GAAIre,IAAsBkY,EAAc,GAC5DqD,IAAe,2DAA8ErD,EAAc,GAAIlT,IAC/G,MACD,KAAK,IACJH,EAAIwZ,cAAgB,GAAIne,IAAkBsT,EAAMpE,IAAI,IAAK,GACzDmM,IAAe,sBACf,MACD,KAAK,IACJkC,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WACzD,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,qCAAuC2P,EAAW,oCAClF5Y,GAAIwZ,cAAgB,GAAIpe,IAAsBiY,EAAc,GAAIrc,KAAK+G,aAAa4Q,EAAMpE,IAAI,IAAK,KAAM,MAAOvK,EAAIwZ,cAClH9C,IAAe,oDAAuErD,EAAc,GAAIlT,IACxG,MACD,KAAK,IACJH,EAAIwZ,cAAgB,GAAIte,IAAiByT,EAAMpE,IAAI,IAAK,GAAIvK,EAAIwZ,cAC5CxZ,GAAIwZ,cAAeC,WAAa9K,EAAMpE,IAAI,IAAK,GACnEmM,IAAe,qBACf,MACD,KAAK,IAMJ,KAED,KAAK,KACJ1W,EAAI0Z,eAAiB,GAAIrd,GACzBqa,IAAe,8BACf,MACD,KAAK,KACJ1W,EAAI0Z,eAAiB,GAAInd,GACzBma,IAAe,wBACf,MACD,KAAK,KACJ1W,EAAI0Z,eAAiB,GAAIpd,IAAkBqS,EAAMpE,IAAI,IAAK,IAAMvK,EAAI0Z,eAC/C1Z,GAAI0Z,eAAgBD,WAAa9K,EAAMpE,IAAI,IAAK,GACrEmM,IAAe,sBACf,MACD,KAAK,KACJ1W,EAAI0Z,eAAiB,GAAIvd,IAAsBwS,EAAMpE,IAAI,IAAK,MAAOvK,EAAI0Z,eAChD1Z,GAAI0Z,eAAgBC,aAAehL,EAAMpE,IAAI,IAAK,EAClDvK,GAAI0Z,eAAgBE,kBAAoBjL,EAAMpE,IAAI,IAAK,GAChFmM,IAAe,0BACf,MACD,KAAK,KACJ,KACD,KAAK,KACJkC,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WACzD,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,6CAA+C2P,EAAW,sCAC1F,KAAK5Y,EAAIuY,UACRvhB,KAAK2G,QAAQ+I,GAASuC,SAAS,wFAEhCjJ,GAAIuY,UAAYlF,EAAc,EAC9BrT,GAAI6Z,aAAe,GAAI9d,IAAwBiE,EAAIuY,UAAWlF,EAAc,GAC5EqD,IAAe,4DAA+ErD,EAAc,GAAIlT,IAChH,OAEFnJ,KAAK2R,qBACL0N,IAAkB,QAKhB,IAAKzT,GAAM,GAAKA,GAAM,EAAG,CDtfpB,GCwfLoS,GAAerG,EAAMpE,IAAI,EAAG,SAChCmM,IAAa1B,CAEb,IAAI6C,EACJ,IAAIC,GAAyBnJ,EAAMpE,IAAI,EAAG,EAE1C8I,GAAgBrc,KAAK8R,aAAagP,GAAkBrf,EAAYsQ,WAEhE,KAAMsK,EAAc,IAAQyE,GAAmB,EAAI,CAClD9gB,KAAK2G,QAAQ+I,GAASuC,SAAS,2CAA6C6O,EAAkB,6BAC9FD,GAAiBxe,EAAuBygB,oBAGzC,GAAIzG,EAAc,GACjBwE,EAAiBxE,EAAc,EAChC,IAAI0G,GAA0B,GAAIrd,IAAcmb,EAEhDnB,IAAc,cAAcoB,EAAgB,GAC5CiC,GAAUvQ,UAAY,IACtBuQ,GAAUC,cAAgB,IAC1BD,GAAUhD,cAAgB,IAC1BgD,GAAUtO,MAAQzU,KAAK2R,qBACvB3R,MAAKoJ,gBAAyB2Z,EAAW5Z,EACzCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOic,CAC7B,IAAI/iB,KAAKuG,OACR8C,QAAQC,IAAIoW,EACb,QAGD1W,EAAIyL,MAAQzU,KAAK2R,qBACjB3R,MAAKoJ,gBAAyBJ,EAAKG,EAEnCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOkC,CAC7B,IAAIhJ,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAIoW,IAKNtZ,GAAA7F,UAAA2O,aAAR,SAAqBQ,GAGpB,GAAI7G,EAEJ7I,MAAK2G,QAAQ+I,GAASvG,KAAOnJ,KAAK2P,aAElC,IAAI/D,GAAc5L,KAAKsN,eAAerB,kBACtC,IAAIuJ,EAEJxV,MAAKyG,eAAezG,KAAK+L,cAAc1D,cAGvC,IAAIuD,GAAQ,EAAG,CACd4J,EAAWxV,KAAKsN,eAAetB,iBAC/B,IAAIyJ,EACJA,GAAMzV,KAAKsN,eAAegH,aAAakB,EACvCxV,MAAKijB,gBAAgBjjB,KAAK+L,cAAc1D,WAAY,GAAIrH,GAAWyU,GAAM,MAAO,KAAM,UAEhF,CACND,EAAWxV,KAAKsN,eAAetB,iBAE/B,IAAIlF,EACJA,GAAO,GAAIpF,EACX1B,MAAKsN,eAAeC,UAAUzG,EAAM,EAAG0O,EAQvCxV,MAAKijB,gBAAgBjjB,KAAK+L,cAAc1D,WAAY,KAAM,MAAOnH,EAAYgiB,iBAAiBpc,GAAO,MAMtG9G,KAAK0R,gBAAgB,KACrB1R,MAAK2G,QAAQ+I,GAASgG,OAAS1V,KAAK2R,qBACpC3R,MAAK2V,gCACL3V,MAAK2G,QAAQ+I,GAAS5I,KAAO+B,CAE7B,IAAI7I,KAAKuG,OAAQ,CAChB,GAAIqP,IAAoC,WAAY,QACpDvM,SAAQC,IAAI,mBAAqBsM,EAAmBhK,GAAQ,wBAMtDxF,GAAA7F,UAAAgO,iBAAR,SAAyBmB,GD5gBlB,GC+gBF8F,EACJ,IAAI3M,EACJ,IAAIxJ,EAEJW,MAAKwJ,cAAgB,GAAI5C,MACzB5G,MAAKyG,eAAgBzG,KAAK+L,cAAc1D,cAExC,IAAIuD,GAAc5L,KAAKsN,eAAerB,kBAEtCjM,MAAK2G,QAAQ+I,GAASvG,KAAOnJ,KAAK2P,aAElC,KAAKtQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvBW,KAAKyG,eAAezG,KAAK+L,cAAc1D,cACvCrI,MAAKwJ,cAAcxC,KAAK,KAGxB,IAAI4E,GAAQ,EAAG,CACd4J,EAAWxV,KAAKsN,eAAetB,iBAC/B,IAAIyJ,EACJA,GAAMzV,KAAKsN,eAAegH,aAAakB,EAEvCxV,MAAKijB,gBAAgBjjB,KAAK+L,cAAc1D,WAAa,IAAMhJ,EAAG,GAAI2B,GAAWyU,GAAM,MAAO,KAAM,UAC1F,CAEND,EAAWxV,KAAKsN,eAAetB,iBAC/B,IAAIlF,EACJA,GAAO,GAAIpF,EAEX1B,MAAKsN,eAAeC,UAAUzG,EAAM,EAAG0O,EAEvCxV,MAAKijB,gBAAgBjjB,KAAK+L,cAAc1D,WAAa,IAAMhJ,EAAG,KAAM,MAAO6B,EAAYgiB,iBAAiBpc,GAAO,OAKjH9G,KAAK0R,gBAAgB,KACrB1R,MAAK2G,QAAQ+I,GAASgG,OAAS1V,KAAK2R,qBACpC3R,MAAK2V,gCACL3V,MAAK2G,QAAQ+I,GAAS5I,KAAO+B,CAE7B,IAAI7I,KAAKuG,OAAQ,CAChB,GAAIqP,IAAoC,WAAY,QACpDvM,SAAQC,IAAI,mBAAqBsM,EAAmBhK,GAAQ,6BAKtDxF,GAAA7F,UAAAiO,uBAAR,SAA+BkB,GAE9B,GAAI7G,EAEJ7I,MAAK2G,QAAQ+I,GAASvG,KAAOnJ,KAAK2P,aAClC9G,GAAQ7I,KAAKmjB,sBAAsBzT,EACnC1P,MAAK2R,qBACL3R,MAAK2G,QAAQ+I,GAAS5I,KAAO+B,CAC7B7I,MAAKoJ,gBAAyBP,EAAO7I,KAAK2G,QAAQ+I,GAASvG,KAC3DnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO+B,CAE7B,IAAI7I,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,iCAAmCT,EAAMM,KAAO,WAAaN,IAKnEzC,GAAA7F,UAAAkO,uBAAR,SAA+BiB,GAE9B,GAAI9D,EACJ,IAAI4J,EACJ,IAAI3M,EACJ,IAAIua,EACJpjB,MAAK2G,QAAQ+I,GAASvG,KAAOnJ,KAAK2P,aAElCyT,GAAgBpjB,KAAKsN,eAAetB,iBACpC,IAAIqQ,GAA2Brc,KAAK8R,aAAasR,GAAgBvhB,EAAUkQ,WAE3E,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,wCAA0CmR,EAAgB,sDACzF,QAGDva,EAAQ7I,KAAKqjB,sBAAkChH,EAAc,GAAI3M,EAEjE,KAAK7G,EACJ,MAED7I,MAAK2R,qBACL3R,MAAKoJ,gBAAyBP,EAAO7I,KAAK2G,QAAQ+I,GAASvG,KAC3DnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO+B,CAE7B,IAAI7I,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,0CAA4CT,EAAMM,KAAO,aAAeN,EAAQ,mBAAkCwT,EAAc,GAAKlT,OAM3I/C,GAAA7F,UAAAsO,aAAR,SAAqBa,GAEpB,GAAI4T,GAAsBtjB,KAAKsN,eAAerB,oBAAsB,CACpE,IAAI4P,GAAgB7b,KAAKsN,eAAetB,iBACxC,IAAI8P,GAAe9b,KAAKic,eACxB,IAAI9S,GAAcnJ,KAAK2P,aAEvB,IAAI4T,EACJ,IAAIC,EAEJ,IAAInH,GAA2Brc,KAAK8R,aAAa+J,GAASja,EAAuBmQ,UAAWlQ,EAAUkQ,UAAW9P,EAAK8P,WAEtH,IAAIsK,EAAc,GAAI,CACrBkH,EAAwClH,EAAc,GAGvD,GAAItF,GAAqB/W,KAAKsN,eAAekR,WAC7C,IAAIiF,GAAqBzjB,KAAKsN,eAAekR,WAE7C,IAAI7G,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUmZ,OAE5D,QAAQkE,GACP,IAAK,GAEJ,GAAI7B,GAAkBjK,EAAMpE,IAAI,EAAG,ED7iBvB,IC+iBRmQ,GAAiC1jB,KAAK8R,aAAa8P,GAAW/f,EAAUkQ,WAE5E,KAAM2R,EAAoB,IAAQ9B,GAAY,EAAI,CACjD5hB,KAAK2G,QAAQ+I,GAASuC,SAAS,kCAAoC2P,EAAW,2BAC9E,QAGD4B,EAAeE,EAAoB,EAEnC,IAAIH,EAAc,CACjBA,EAAahH,SAASiH,GAGvBA,EAAarH,UAAUC,SAAWN,CAElC,OAGF,GAAI0H,EAAc,CACjB7L,EAAQ3X,KAAK0R,iBAAiBqB,EAAE/S,KAAKkN,cAAe+F,EAAEjT,KAAKkN,cAAegG,EAAElT,KAAKkN,cAAekG,EAAEhN,EAAU+M,OAE5GqQ,GAAahH,MAAQ,GAAI1b,GAAS6W,EAAMpE,IAAI,EAAG,GAAIoE,EAAMpE,IAAI,EAAG,GAAIoE,EAAMpE,IAAI,EAAG,GACjFiQ,GAAa/O,MAAQzU,KAAK2R,sBAG3B3R,KAAK2G,QAAQ+I,GAAS5I,KAAO0c,CAE7B,IAAIxjB,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,kCAAoCH,IAM1C/C,GAAA7F,UAAAgP,cAAR,SAAsBG,GAErB,GAAIiI,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUyR,OAAQ5E,EAAE7M,EAAUud,UAAWzQ,EAAE9M,EAAUud,UAAWvQ,EAAEhN,EAAUud,UAAWtQ,EAAEjN,EAAUud,WAErJ,IAAI3jB,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,+CAAiDqO,EAAMpE,IAAI,EAAG,GAC1ElK,SAAQC,IAAI,+CAAiDqO,EAAMpE,IAAI,EAAG,WAC1ElK,SAAQC,IAAI,+CAAiDqO,EAAMpE,IAAI,EAAG,WAC1ElK,SAAQC,IAAI,+CAAiDqO,EAAMpE,IAAI,EAAG,WAC1ElK,SAAQC,IAAI,+CAAiDqO,EAAMpE,IAAI,EAAG,aAKpEnN,GAAA7F,UAAA+O,eAAR,SAAuBI,GAEtB,GAAIhH,GAAY1I,KAAKsN,eAAerB,kBACpC,IAAI2X,GAAyB5jB,KAAK2P,aAClC,IAAI3P,KAAKuG,OACR8C,QAAQC,IAAI,iCAAmCZ,EAAK,eAAiBkb,GAM/Dxd,GAAA7F,UAAA8iB,sBAAR,SAA8BvG,EAAiBpN,GAG9C,GAAImU,GAAoB7jB,KAAKsN,eAAesD,mBAC5C,IAAI0R,EACJ,IAAI3K,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUmZ,MAAOtM,EAAE7M,EAAUmZ,MAAOrM,EAAE9M,EAAUmZ,MAAO3E,IAAI5a,KAAKmN,aAAc0N,IAAI7a,KAAKmN,aAAc2N,IAAI9a,KAAKmN,aAAc0U,IAAIzb,EAAUyR,OAAQiK,IAAI1b,EAAUyR,OAAQoD,IAAI7U,EAAU4M,OAAQkI,IAAI9U,EAAU4M,OAAQ+O,IAAI3b,EAAU+M,MAAO6O,IAAI5b,EAAU+M,MAAO8O,IAAI7b,EAAU6W,MAAOiF,IAAI9b,EAAU6W,MAAO7B,IAAIhV,EAAUiV,KAAMC,IAAIlV,EAAUiV,KAAM8G,IAAI/b,EAAUgc,QAEhZ,IAAIR,EACJ,IAAIvF,EACJ,QAAQwH,GAUP,IAAK,MACJjC,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAW1c,GAAoB6M,WACjE,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,6CAA+C2P,EAAW,0DACzF,OAAOU,GAERA,EAAe,GAAI9c,IAAoC6W,EAAc,GACrE,MACD,KAAK,MAEJiG,EAAe,GAAIrd,IAAwC6X,EACnCwF,GAActC,MAAQrI,EAAMpE,IAAI,IAAK,EACrC+O,GAAcwB,QAAUnM,EAAMpE,IAAI,IAAK,KAC/D,MAED,KAAK,MAGJ+O,EAAe,GAAItd,IAAwC8X,EAAgBnF,EAAMpE,IAAI,IAAK,GAClE+O,GAActC,MAAQrI,EAAMpE,IAAI,IAAK,EACrC+O,GAAcwB,QAAUnM,EAAMpE,IAAI,IAAK,KACvC+O,GAAcyB,MAAQpM,EAAMpE,IAAI,IAAK,EAE7D,MACD,KAAK,MAEJ+O,EAAe,GAAI7c,IAAoCqX,EAAgBnF,EAAMpE,IAAI,IAAK,GAClE+O,GAActC,MAAQrI,EAAMpE,IAAI,IAAK,EACrC+O,GAAcwB,QAAUnM,EAAMpE,IAAI,IAAK,KACvC+O,GAAcyB,MAAQpM,EAAMpE,IAAI,IAAK,EAEzD,MACD,KAAK,MACJ+O,EAAe,GAAIld,IAAiB0X,EAChBwF,GAActC,MAAQrI,EAAMpE,IAAI,IAAK,EACrC+O,GAAcwB,QAAUnM,EAAMpE,IAAI,IAAK,KAC3D,OAGFvT,KAAK2R,qBACL,OAAO2Q,GAIAlc,GAAA7F,UAAA4O,cAAR,SAAsBO,GAErB,GAAIvG,GAAcnJ,KAAK2P,aACvB,IAAIqU,GAA6BhkB,KAAKsN,eAAesD,mBACrD,IAAIqT,GAAoB,GAAIxgB,EAC5BzD,MAAK0R,gBAAgB,KAErB,IAAIwS,GAAgC,CACpC,OAAOA,EAAgBF,EAAY,CAClC,GAAIG,EACJ,IAAIC,EAEJpkB,MAAKsN,eAAesD,mBACpBuT,GAAQ,GAAIxgB,GACZwgB,GAAME,YAAcrkB,KAAKsN,eAAesD,oBAAsB,CAC9DuT,GAAMhb,KAAOnJ,KAAK2P,aAElByU,GAAMpkB,KAAKic,eACXkI,GAAMG,gBAAkBF,EAAI5L,OAE5BxY,MAAK0R,gBAAgB,KACrB1R,MAAK2R,qBACLsS,GAASM,OAAOvd,KAAKmd,EACrBD,KAIDlkB,KAAK2R,qBACL3R,MAAKoJ,gBAAgB6a,EAAU9a,EAC/BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOmd,CAC7B,IAAIjkB,KAAKuG,OACR8C,QAAQC,IAAI,6BAA+B2a,EAAS9a,KAAO,yBAA2B+a,GAIhF9d,GAAA7F,UAAA6O,kBAAR,SAA0BM,GAEzB,GAAIvG,GAAcnJ,KAAK2P,aACvB,IAAIqU,GAA6BhkB,KAAKsN,eAAesD,mBACrD5Q,MAAK0R,gBAAgB,KAErB,IAAI8S,GAAoB,GAAI9gB,GAE5B,IAAIwgB,GAAgC,CACpC,OAAOA,EAAgBF,EAAY,CAClC,GAAIS,EACJ,IAAIC,EACJD,GAAa,GAAIjhB,EACjBkhB,GAAgB1kB,KAAKsN,eAAerB,kBACpC,IAAIyY,GAAiB,EAAG,CACvB,GAAIC,GAAyB3kB,KAAK4kB,sBAElC,IAAI9I,GAAe,GAAIjb,GAAS8jB,EAChCF,GAAWI,YAAYC,WAAWhJ,EAClC2I,GAAWM,YAAYC,SAASlJ,EAAIzO,SAEpCmX,GAAKS,WAAWf,GAAiBO,EAElCP,IAGDlkB,KAAK2R,qBACL3R,MAAKoJ,gBAAgBob,EAAMrb,EAC3BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO0d,CAC7B,IAAIxkB,KAAKuG,OACR8C,QAAQC,IAAI,iCAAmCkb,EAAKrb,KAAO,yBAA2B+a,GAIhF9d,GAAA7F,UAAA8O,uBAAR,SAA+BK,GAE9B,GAAIwV,EACJ,IAAIC,EACJ,IAAIhc,GAAcnJ,KAAK2P,aACvB,IAAIyV,GAAwB,GAAIxhB,GAChC,IAAIyhB,GAA6BrlB,KAAKsN,eAAesD,mBACrD5Q,MAAK0R,gBAAgB,KAErB,IAAI4T,GAAgC,CACpC,IAAIjJ,EACJ,OAAOiJ,EAAgBD,EAAY,CAClCF,EAAYnlB,KAAKsN,eAAetB,iBAChCkZ,GAAYllB,KAAKsN,eAAesD,mBAChCyL,GAAgBrc,KAAK8R,aAAaqT,GAAYzhB,GAAaqO,WAC3D,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,2CAA6CqT,EAAgB,UAAYH,EAAY,oCAEpHC,GAAKvM,SAAwB7Y,KAAK2G,QAAQwe,GAAWre,KAAMoe,EAC5DI,KAED,GAAIF,EAAKG,OAAO3lB,QAAU,EAAG,CAC5BI,KAAK2G,QAAQ+I,GAASuC,SAAS,gEAC/B,QAGDjS,KAAK2R,qBACL3R,MAAKoJ,gBAAgBgc,EAAMjc,EAC3BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOse,CAC7B,IAAIplB,KAAKuG,OACR8C,QAAQC,IAAI,qCAAuC8b,EAAKjc,KAAO,yBAA2Bic,EAAKG,OAAO3lB,QAIhGwG,GAAA7F,UAAAmO,uBAAR,SAA+BgB,EAAyB8V,GAAA,GAAAA,QAAA,GAAwB,CAAxBA,EAAA,MAEvD,GAAIH,GAA6B,CACjC,IAAII,EACJ,IAAIH,EACJ,IAAII,EACJ,IAAIR,EACJ,IAAI5L,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAI/I,EACJ,IAAIC,EACJ,IAAIiV,EACJ,IAAIC,EACJ,IAAItV,GAAqB,CACzB,IAAI8U,GAAsB,GAAIvhB,GAC9B,IAAI8M,EACJ,IAAI8I,EACJ,IAAIoM,GAA6B,CACjC,IAAIC,GAA+B,CACnC,IAAIC,GAAoC,GAAInf,MAC5C,IAAI+Q,EACJ,IAAIqO,EACJ,IAAI7c,GAAcnJ,KAAK2P,aACvB,IAAIsW,GAA2BjmB,KAAKsN,eAAetB,iBACnD,IAAIqQ,GAA2Brc,KAAK8R,aAAamU,GAAYxlB,EAASsR,WACtE,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,6CAA+CgU,EAAY,6BAC1F,QAED,GAAI/U,GAA2BlR,KAAKkmB,wBAAwBD,EAC5D,KAAKT,EACJH,EAAarlB,KAAKsN,eAAesD,mBAElC6U,GAAgBzlB,KAAKsN,eAAesD,mBACpCiV,GAAc7lB,KAAKsN,eAAesD,mBAClCkV,GAAgB,CAChB,OAAOA,EAAgBD,EAAa,CACnCE,EAAY/e,KAAKhH,KAAKsN,eAAesD,oBACrCkV,KAEDnO,EAAQ3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUiV,KAAMpI,EAAE7M,EAAUiV,MAE5D+J,GAAKe,QAAUxO,EAAMpE,IAAI,EAAG,KAC5B6R,GAAKgB,iBAAmBzO,EAAMpE,IAAI,EAAG,MAErC+R,GAAgB,CAChB,OAAOA,EAAgBD,EAAY,CAClCH,EAAYllB,KAAKsN,eAAesD,mBAChC+U,GAAW,GAAIllB,EACfilB,GAAgB,CAChB,OAAOA,EAAgBD,EAAe,CACrCK,EAAgB,CAChBrV,GAAUzQ,KAAKsN,eAAetB,iBAC9B0E,GAAU1Q,KAAKsN,eAAeD,SAAWoD,CACzC,OAAOqV,EAAgBD,EAAa,CACnC,GAAIE,EAAYD,IAAkB,EAAG,CACpCnV,EAAsB0L,EAAc,GAAIgK,cAAcX,GAAe/U,OACrE8I,GAAQ,GAAI7S,MACZ0J,GAAM,CACN,OAAOtQ,KAAKsN,eAAeD,SAAWqD,EAAS,CAC9C4I,EAAItZ,KAAKmR,WAAWnR,KAAK2M,aACzB4M,GAAIvZ,KAAKmR,WAAWnR,KAAK2M,aACzB6M,GAAIxZ,KAAKmR,WAAWnR,KAAK2M,aACzB8M,GAAMnJ,KAASgJ,CACfG,GAAMnJ,KAASiJ,CACfE,GAAMnJ,KAASkJ,EAEhBoM,EAAU,GAAIjlB,GAAoB,KAClCilB,GAAQvU,cAAcV,EACtBiV,GAAQtU,gBAAgBmI,EACxBmM,GAAQpU,UAAUN,EAAIwU,GACtBE,GAAQ3L,oBAAoB,KAC5B2L,GAAQ1L,qBAAqB,KAC7B0L,GAAQ9L,kBAAoB,KAC5B8L,GAAQ5L,mBAAqB,KAC7B0L,IACAC,GAAShM,eAAeiM,OAExB5lB,MAAKsN,eAAeD,SAAWqD,CAChCoV,MAGFV,EAAKvM,SAAS8M,EAAUT,EACxBI,KAEDtlB,KAAK2R,qBACL3R,MAAKoJ,gBAAgBgc,EAAMjc,EAE3BnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOse,CAC7B,IAAIplB,KAAKuG,OACR8C,QAAQC,IAAI,mCAAqC8b,EAAKjc,KAAO,6BAA2CkT,EAAc,GAAIlT,KAAO,yBAA2Bic,EAAKG,OAAO3lB,QAIlKwG,GAAA7F,UAAAoO,wBAAR,SAAgCe,GAE/B,GAAI4W,EACJ,IAAIC,GAAsB,EAC1B,IAAIpd,GAAcnJ,KAAK2P,aACvB,IAAI0V,GAA6BrlB,KAAKsN,eAAesD,mBACrD,IAAI+G,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAU4M,QAC5D,IAAIsS,GAAgC,CACpC,IAAIkB,GAAyC,GAAI5f,MACjD,IAAI6f,GAAqC,GAAI7f,MAC7C,OAAO0e,EAAgBD,EAAY,CAClCiB,EAAkBtmB,KAAKsN,eAAetB,iBACtC,IAAIqQ,GAA2Brc,KAAK8R,aAAawU,GAAkB3kB,EAAkBoQ,WACrF,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,2CAA6CqT,EAAgB,MAAQgB,EAAkB,gCAClH,CACJ,GAAIjK,EAAc,YAAcxY,IAC/B4iB,EAAazf,KAAKqV,EAAc,GACjC,IAAIA,EAAc,YAAczY,IAC/B4iB,EAAexf,KAAKqV,EAAc,IAEpCiJ,IAED,GAAKmB,EAAa7mB,QAAU,GAAO4mB,EAAe5mB,QAAU,EAAI,CAC/DI,KAAK2G,QAAQ+I,GAASuC,SAAS,wEAC/B,QAEDjS,KAAK2R,qBACL,IAAI8U,EAAa7mB,OAAS,EAAG,CAC5B,GAAI8mB,GAA2C,GAAItjB,EACnD,KAAK,GAAI/D,GAAmB,EAAGA,EAAIonB,EAAa7mB,OAAQP,IACvDqnB,EAAsBC,aAAaF,EAAapnB,GACjDW,MAAKoJ,gBAAgBsd,EAAuBvd,EAC5CnJ,MAAK2G,QAAQ+I,GAAS5I,KAAO4f,CAC7B,IAAI1mB,KAAKuG,OACR8C,QAAQC,IAAI,uCAAyCH,EAAO,mBAAqBud,EAAsBE,WAAWhnB,OAAS,wBAA0B8mB,EAAsBG,eAAexe,gBAErL,IAAIme,EAAe5mB,OAAS,EAAG,CACrCyc,EAAgBrc,KAAK8R,aAAawU,GAAkB3kB,EAAkBoQ,WACtE,IAAI+U,GAA+C,GAAIxjB,GAAqBqU,EAAMpE,IAAI,EAAG,GACzF,KAAK,GAAIlU,GAAmB,EAAGA,EAAImnB,EAAe5mB,OAAQP,IACzDynB,EAAwBH,aAAaH,EAAennB,GACrDW,MAAKoJ,gBAAgB0d,EAAyB3d,EAC9CnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOggB,CAC7B,IAAI9mB,KAAKuG,OACR8C,QAAQC,IAAI,yCAA2CH,EAAO,mBAAqB2d,EAAwBF,WAAWhnB,OAAS,wBAA0BknB,EAAwBD,eAAexe,aAM3LjC,GAAA7F,UAAAqO,iBAAR,SAAyBc,GAExB,GAAIqX,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIV,GAAsB,EAC1B,IAAIpd,GAAcnJ,KAAK2P,aACvB,IAAI/D,GAAuB5L,KAAKsN,eAAesD,mBAE/C,IAAI+G,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUmZ,OAE5DyH,GAAqBhnB,KAAKsN,eAAetB,iBACzC,IAAIkb,GAAmClnB,KAAKsN,eAAesD,mBAC3D,IAAIuW,GAAsC,GAAIvgB,MAC9C,KAAK,GAAIvH,GAAmB,EAAGA,EAAI6nB,EAAkB7nB,IACpD8nB,EAAangB,KAAKhH,KAAKsN,eAAetB,kBAEvC,IAAIob,GAA8BpnB,KAAKsN,eAAesD,mBACtD,IAAIyW,GAAqBrnB,KAAKsN,eAAerB,oBAAsB,CACnEjM,MAAK2R,qBACL3R,MAAK2R,qBAEL,IAAI0K,EACJ,IAAIiL,GAA2B,GAAI1gB,MAEnC,KAAKvH,EAAI,EAAGA,EAAI8nB,EAAavnB,OAAQP,IAAK,CACzCgd,EAAgBrc,KAAK8R,aAAaqV,EAAa9nB,IAAK4C,EAAK8P,WACzD,IAAIsK,EAAc,GACjBiL,EAAatgB,KAAYqV,EAAc,IAEzCA,EAAgBrc,KAAK8R,aAAakV,GAAqB7jB,EAAiB4O,WACxE,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,qCAAuC+U,EAAqB,uBAC3F,QAEDC,EAAwC5K,EAAc,EACtD,IAAIkL,EACJ,IAAI3b,GAAQ,EAAG,CAEdyQ,EAAgBrc,KAAK8R,aAAa6F,EAAMpE,IAAI,EAAG,IAAK9P,EAASsO,WAC7D,KAAKsK,EAAc,GAAI,CACtBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,iCAAmC0F,EAAMpE,IAAI,EAAG,GAAK,uBACpF,QAEDgU,EAAe,GAAIhkB,GAAwC0jB,EAA+B5K,EAAc,QAElG,IAAIzQ,GAAQ,EAClB2b,EAAe,GAAIlkB,GAAoC4jB,EAExDjnB,MAAKoJ,gBAAgBme,EAAcpe,EACnCnJ,MAAK2G,QAAQ+I,GAAS5I,KAAOygB,CAC7B,KAAKloB,EAAI,EAAGA,EAAIioB,EAAa1nB,OAAQP,IAAK,CACzC,GAAIuM,GAAQ,EACX0b,EAAajoB,GAAGmoB,SAA+BD,CAChD,IAAI3b,GAAQ,EACX0b,EAAajoB,GAAGmoB,SAA6BD,EAG/C,GAAIvnB,KAAKuG,OACR8C,QAAQC,IAAI,6BAA+BH,GAIrC/C,GAAA7F,UAAA4iB,sBAAR,SAA8BzT,GAG7B,GAAImU,GAAoB7jB,KAAKsN,eAAesD,mBAC5C,IAAI6W,EAEJ,IAAI9P,GAAsB3X,KAAK0R,iBAAiBqB,EAAE3M,EAAUmZ,MAAOtM,EAAE7M,EAAUmZ,MAAOrM,EAAE9M,EAAUmZ,MAAO3E,IAAI5a,KAAKmN,aAAc0N,IAAI7a,KAAKmN,aAAc2N,IAAI9a,KAAKmN,aAAcuR,IAAI1e,KAAKmN,aAAcua,IAAI1nB,KAAKmN,aAAcwa,IAAI3nB,KAAKmN,aAAcya,IAAI5nB,KAAKmN,aAAc0U,IAAIzb,EAAUyR,OAAQiK,IAAI1b,EAAUyR,OAAQoD,IAAI7U,EAAU4M,OAAQkI,IAAI9U,EAAU4M,OAAQ+O,IAAI3b,EAAU+M,MAAO6O,IAAI5b,EAAU+M,MAAO8O,IAAI7b,EAAU6W,MAAOiF,IAAI9b,EAAU6W,MAAO7B,IAAIhV,EAAUiV,KAAMC,IAAIlV,EAAUiV,MACxd,IAAIuG,EACJ,IAAIvF,EAEJ,QAAQwH,GAEP,IAAK,KACJ4D,EAAqB,GAAIljB,IAAwBoT,EAAMpE,IAAI,IAAK,GAAI3M,OAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACnI,MACD,KAAK,KACJ6gB,EAAqB,GAAIjjB,GACzB,IAAIqjB,GAAyBlQ,EAAMpE,IAAI,IAAK,EACdkU,GAAoBK,eAAiB,GAAIlnB,GAAe+W,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,GAAMsU,GAAU,GAAM,IAASA,GAAU,EAAK,IAAQA,EAAS,IAASA,GAAU,GAAM,IACtP,MACD,KAAK,KAEJjG,EAAWjK,EAAMpE,IAAI,EAAG,EACxBlK,SAAQC,IAAI,UAAWsY,EAGvBvF,GAAgBrc,KAAK8R,aAAa8P,GAAYngB,EAAYsQ,WAAa,cACvE,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,mCAAqC2P,EAAW,2BAChF6F,GAAqB,GAAIhjB,IAAqC4X,EAAc,GAAa1E,EAAMpE,IAAI,IAAK,GACxGqO,GAAWjK,EAAMpE,IAAI,EAAG,EACxB,IAAIqO,EAAW,EAAG,CACjBvF,EAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WACzD,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,yCAA2C2P,EAAW,4BAKvF,KACD,KAAK,KACJA,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WACzD,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,qCAAuC2P,EAAW,6BAClF6F,GAAqB,GAAI7iB,IAAqByX,EAAc,GAAIrc,KAAK+G,aAAa4Q,EAAMpE,IAAI,IAAK,KACjG,MAQD,KAAK,KACJkU,EAAqB,GAAI3iB,IAAqB6S,EAAMpE,IAAI,IAAK,UAAWoE,EAAMpE,IAAI,IAAK,IAAMoE,EAAMpE,IAAI,IAAK,GAC5G,MACD,KAAK,KACJqO,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WACzD,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,0CAA4C2P,EAAW,8BACvF6F,GAAqB,GAAInjB,IAAsB+X,EAAc,GAAI1E,EAAMpE,IAAI,IAAK,OAChF,MAYD,KAAK,KACJqO,EAAWjK,EAAMpE,IAAI,EAAG,EACxB8I,GAAgBrc,KAAK8R,aAAa8P,GAAWngB,EAAYsQ,WAAY,cACrE,KAAKsK,EAAc,GAClBrc,KAAK2G,QAAQ+I,GAASuC,SAAS,mCAAqC2P,EAAW,kCAChF6F,GAAqB,GAAI9iB,IAA0B0X,EAAc,GAAI1E,EAAMpE,IAAI,IAAK,GACpF,MACD,KAAK,KACJkU,EAAqB,GAAI/iB,IAAgBiT,EAAMpE,IAAI,IAAK,GAAIoE,EAAMpE,IAAI,IAAK,KAAOoE,EAAMpE,IAAI,IAAK,SACjG,OAGFvT,KAAK2R,qBACL,OAAO8V,GAIArhB,GAAA7F,UAAAoR,oBAAR,WAEC,GAAIuN,EACJ,IAAI6I,EACJ,IAAIC,EAEJD,GAAW/nB,KAAKsN,eAAetB,iBAE/B,IAAI+b,EAAW,EAAG,CAEjB,GAAIE,EAEJ/I,KAEA+I,GAAWjoB,KAAKsN,eAAeD,SAAW0a,CAE1C,OAAO/nB,KAAKsN,eAAeD,SAAW4a,EAAU,CAC/C,GAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAGJJ,GAAQloB,KAAKsN,eAAerB,kBAC5Bkc,GAAWnoB,KAAK2P,aAChByY,GAAYpoB,KAAKsN,eAAerB,kBAChCoc,GAAWroB,KAAKsN,eAAetB,iBAE/B,IAAKhM,KAAKsN,eAAeD,SAAWgb,EAAYJ,EAAU,CACzD5e,QAAQC,IAAI,2CAA6C0e,EAAc,sCACvEhoB,MAAKsN,eAAeD,SAAW4a,CAC/B,OAAO/I,GAGR,OAAQkJ,GACP,IAAKhiB,GAAUud,UACd2E,EAAWtoB,KAAKsN,eAAegH,aAAa+T,EAC5C,MACD,KAAKjiB,GAAUmiB,KACdD,EAAWtoB,KAAKsN,eAAekb,UAC/B,MACD,KAAKpiB,GAAUqiB,MACdH,EAAWtoB,KAAKsN,eAAekR,WAC/B,MACD,KAAKpY,GAAUkZ,MACdgJ,EAAWtoB,KAAKsN,eAAeob,SAC/B,MACD,KAAKtiB,GAAUiV,KACf,IAAKjV,GAAU+M,MACdmV,EAAWtoB,KAAKsN,eAAerB,kBAC/B,MACD,KAAK7F,GAAU4M,OACdsV,EAAWtoB,KAAKsN,eAAesD,mBAC/B,MACD,KAAKxK,GAAUyR,OACf,IAAKzR,GAAUmZ,MACd+I,EAAWtoB,KAAKsN,eAAetB,iBAC/B,MACD,KAAK5F,GAAU4G,QACdsb,EAAWtoB,KAAKsN,eAAeuF,WAC/B,MACD,KAAKzM,GAAU6G,QACdqb,EAAWtoB,KAAKsN,eAAeqb,YAC/B,MACD,SACCL,EAAW,gCAAkCF,CAC7CpoB,MAAKsN,eAAeD,UAAYgb,CAChC,OAGF,GAAIroB,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,qBAAuB6e,EAAW,eAAiBG,GAGhEpJ,EAAWiJ,GAAYG,CACvBN,IAAe,GAIjB,MAAO9I,GAGA9Y,GAAA7F,UAAAmR,gBAAR,SAAwBkX,GAEvB,GAAIX,EACJ,IAAIF,EACJ,IAAIc,GAAqB,CACzB,IAAIlR,GAAsB,GAAImR,GAE9Bf,GAAW/nB,KAAKsN,eAAetB,iBAC/Bic,GAAWjoB,KAAKsN,eAAeD,SAAW0a,CAE1C,IAAIa,EAAU,CAEb,MAAO5oB,KAAKsN,eAAeD,SAAW4a,EAAU,CAC/C,GAAInc,EACJ,IAAIid,EACJ,IAAInd,EAEJmd,GAAM/oB,KAAKsN,eAAesD,mBAC1B9E,GAAM9L,KAAKsN,eAAetB,iBAE1B,IAAKhM,KAAKsN,eAAeD,SAAWvB,EAAOmc,EAAU,CACpD5e,QAAQC,IAAI,0CAA4Cuf,EAAc,sCACtE7oB,MAAKsN,eAAeD,SAAW4a,CAC/B,OAAOtQ,GAGR,GAAIiR,EAASxoB,eAAe2oB,EAAI1gB,YAAa,CAC5CuD,EAAOgd,EAASG,EAChBpR,GAAMqR,IAAID,EAAK/oB,KAAKipB,eAAerd,EAAME,QACnC,CACN9L,KAAKsN,eAAeD,UAAYvB,EAGjC+c,GAAe,OAGV,CACN7oB,KAAKsN,eAAeD,SAAW4a,EAGhC,MAAOtQ,GAIAvR,GAAA7F,UAAA0oB,eAAR,SAAuBrd,EAAaE,GAEnC,GAAIod,EACJ,IAAIC,EAEJ,QAAQvd,GAEP,IAAKxF,GAAUiV,KACf,IAAKjV,GAAUmiB,KACdW,EAAW,CACXC,GAAYnpB,KAAKsN,eAAekb,QAChC,MAED,KAAKpiB,GAAUqiB,MACdS,EAAW,CACXC,GAAYnpB,KAAKsN,eAAekR,SAChC,MAED,KAAKpY,GAAUkZ,MACd4J,EAAW,CACXC,GAAYnpB,KAAKsN,eAAeob,OAChC,MAED,KAAKtiB,GAAU+M,MACd+V,EAAW,CACXC,GAAYnpB,KAAKsN,eAAerB,gBAChC,MAED,KAAK7F,GAAU4M,OACdkW,EAAW,CACXC,GAAYnpB,KAAKsN,eAAesD,iBAChC,MAED,KAAKxK,GAAUyR,OACf,IAAKzR,GAAU6W,MACf,IAAK7W,GAAUmZ,MACd2J,EAAW,CACXC,GAAYnpB,KAAKsN,eAAetB,eAChC,MAED,KAAK5F,GAAU4G,QACdkc,EAAW,CACXC,GAAYnpB,KAAKsN,eAAeuF,SAChC,MAED,KAAKzM,GAAU6G,QACdic,EAAW,CACXC,GAAYnpB,KAAKsN,eAAeqb,UAChC,MAED,KAAKviB,GAAUud,UACd,MAAO3jB,MAAKsN,eAAegH,aAAaxI,EAEzC,KAAK1F,GAAUgjB,UACf,IAAKhjB,GAAUijB,UACf,IAAKjjB,GAAUkjB,UACf,IAAKljB,GAAUmjB,OACf,IAAKnjB,GAAUojB,OACf,IAAKpjB,GAAUqjB,OACf,IAAKrjB,GAAUgc,OACd8G,EAAW,CACXC,GAAYnpB,KAAKsN,eAAeqb,UAChC,OAIF,GAAIO,EAAWpd,EAAK,CACnB,GAAI4d,KACJ,IAAIC,GAAkB,CACtB,IAAIC,GAAmB9d,EAAIod,CAE3B,OAAOS,EAAWC,EAAW,CAC5BF,EAAK1iB,KAAKmiB,EAAUU,MAAM7pB,KAAKsN,gBAC/Bqc,KAGD,MAAOD,OACD,CAEN,GAAII,GAAUX,EAAUU,MAAM7pB,KAAKsN,eACnC,OAAOwc,IAID1jB,GAAA7F,UAAAiK,YAAR,WAEC,GAAIqB,EACJ,IAAIke,EAEJ/pB,MAAKsK,UAAU+C,SAAW,CAE1BrN,MAAKgI,SAAS,GAAKhI,KAAKsK,UAAU2B,kBAClCjM,MAAKgI,SAAS,GAAKhI,KAAKsK,UAAU2B,kBAElCJ,GAAQ7L,KAAKsK,UAAUsG,mBAEvB5Q,MAAKgqB,WAAa7d,GAASC,KAAKP,EAAOM,GAASO,MAEhD,IAAK1M,KAAKgI,SAAS,IAAM,GAAOhI,KAAKgI,SAAS,IAAM,EAAI,CACvDhI,KAAKyM,gBAAkBN,GAASC,KAAKP,EAAOM,GAASS,MACrD5M,MAAK2M,aAAeR,GAASC,KAAKP,EAAOM,GAASW,MAClD9M,MAAK6M,eAAiBV,GAASC,KAAKP,EAAOM,GAASE,OAMrDrM,KAAK+M,WAAa3G,EAAU4G,OAE5B,IAAIhN,KAAK2M,aAAc,CACtB3M,KAAK+M,WAAa3G,EAAU6G,QAG7BjN,KAAKkN,cAAgB9G,EAAU4G,OAE/B,IAAIhN,KAAKyM,gBAAiB,CACzBzM,KAAKkN,cAAgB9G,EAAU6G,QAGhCjN,KAAKmN,aAAe/G,EAAU4G,OAE9B,IAAIhN,KAAK6M,eAAgB,CACxB7M,KAAKmN,aAAe/G,EAAU6G,QAG/BjN,KAAKyK,aAAezK,KAAKsK,UAAU2B,kBAEnC,IAAIjM,KAAKuG,OAAQ,CAChB8C,QAAQC,IAAI,+BAAiCtJ,KAAKgI,SAAS,GAAK,MAAQhI,KAAKgI,SAAS,GACtFqB,SAAQC,IAAI,mCAAqCtJ,KAAKyK,aAAe,kBAAoBzK,KAAKgqB,WAAa,yBAA2BhqB,KAAKyM,gBAAkB,2BAA6BzM,KAAK2M,aAAe,6BAA+B3M,KAAK6M,gBAInPkd,EAAW/pB,KAAKsK,UAAU0B,iBAC1B,KAAKhM,KAAKgqB,YAAcD,GAAY/pB,KAAKsK,UAAUS,oBAAqB,CACvE/K,KAAK4K,eAAe,2DAKdxE,GAAA7F,UAAA2lB,wBAAR,SAAgC+D,GAE/B,GAAIjqB,KAAK2G,QAAQsjB,GAAQnjB,eAAgB7E,GACxCgoB,EAASjqB,KAAK2G,QAAQsjB,GAAQlV,KAC/B,IAAI/U,KAAK2G,QAAQsjB,GAAQC,sBACxB,MAAOlqB,MAAK2G,QAAQsjB,GAAQC,qBAC7B,IAAIvE,GAAgC3lB,KAAK2G,QAAQsjB,GAAQnjB,IACzD,IAAIqjB,GAAwB,CAC5B,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIlrB,EACJ,IAAImrB,EACJ,IAAIC,EACJzqB,MAAK2G,QAAQsjB,GAAQC,sBAAwB,GAAItjB,MACjD,OAAOujB,EAASxE,EAASU,cAAczmB,OAAQ,CAC9C4qB,EAAS,GAAI5jB,MACb6jB,GAAiC9E,EAASU,cAAc8D,EACxDI,GAAYE,EAASC,WACrBN,GAAKK,EAASvZ,GACdmZ,GAAUI,EAASE,UAAUhqB,EAAoBiqB,QACjDN,GAAQG,EAASI,UAAUlqB,EAAoBiqB,QAC/C,KAAKvrB,EAAI,EAAGA,EAAIkrB,EAAWlrB,IAAK,CAC/BmrB,EAAOxjB,KAAKojB,EAAGE,EAAQjrB,EAAEgrB,EAAU,GACnCG,GAAOxjB,KAAKojB,EAAGE,EAAQjrB,EAAEgrB,EAAU,IAEpCrqB,KAAK2G,QAAQsjB,GAAQC,sBAAsBljB,KAAKwjB,EAChDL,KAED,MAAOnqB,MAAK2G,QAAQsjB,GAAQC,sBAGrB9jB,GAAA7F,UAAAoP,YAAR,WAGC,GAAI7D,GAAa9L,KAAKsN,eAAesD,mBACrC,OAAO5Q,MAAKsN,eAAegH,aAAaxI,GAGjC1F,GAAA7F,UAAAuR,aAAR,SAAqBgZ,EAAgBC,EAA+BC,GAAA,GAAAA,QAAA,GAAsC,CAAtCA,EAAA,gBAEnE,GAAIC,GAAyB,GAAIrkB,MACjC,IAAIskB,GAAiB,CACrB,IAAIJ,EAAU,EAAG,CAChB,GAAI9qB,KAAK2G,QAAQmkB,GAAU,CAC1B,GAAI9qB,KAAK2G,QAAQmkB,GAAShkB,KAAM,CAC/B,MAAOokB,EAAUH,EAAgBnrB,OAAQ,CAExC,GAAIurB,GAAyBnrB,KAAK2G,QAAQmkB,GAAShkB,IAEnD,IAAIqkB,EAAOpZ,WAAagZ,EAAgBG,GAAU,CAEjD,GAAKH,EAAgBG,IAAYzpB,EAAYsQ,WAAeiZ,GAAiB,cAAgB,CAC5F,GAAIhrB,KAAK2G,QAAQmkB,GAAShkB,eAAgBvF,GAAkB,CAC3D0pB,EAAYjkB,KAAK,KACjBikB,GAAYjkB,KAAKhH,KAAK2G,QAAQmkB,GAAShkB,KACvC,OAAOmkB,IAGT,GAAKF,EAAgBG,IAAYzpB,EAAYsQ,WAAeiZ,GAAiB,gBAAkB,CAC9F,GAAIhrB,KAAK2G,QAAQmkB,GAAShkB,eAAgBtF,GAAc,CACvDypB,EAAYjkB,KAAK,KACjBikB,GAAYjkB,KAAKhH,KAAK2G,QAAQmkB,GAAShkB,KACvC,OAAOmkB,QAEF,CACNA,EAAYjkB,KAAK,KACjBikB,GAAYjkB,KAAKhH,KAAK2G,QAAQmkB,GAAShkB,KACvC,OAAOmkB,IAKT,GAAKF,EAAgBG,IAAYzqB,EAASsR,WAAeoZ,EAAOpZ,WAAa9P,EAAK8P,UAAY,CAE7F,GAAIqD,GAAmBpV,KAAK2G,QAAQmkB,GAAShkB,IAE7CmkB,GAAYjkB,KAAK,KACjBikB,GAAYjkB,KAAKoO,EAAKuQ,SACtB,OAAOsF,GAIRC,OAMJD,EAAYjkB,KAAK,MACjBikB,GAAYjkB,KAAKhH,KAAKorB,gBAAgBL,EAAgB,GAAIC,GAC1D,OAAOC,GAEA7kB,GAAA7F,UAAA6qB,gBAAR,SAAwBrZ,EAAkBiZ,GAEzC,OAAQ,MACP,IAAMjZ,IAAatQ,EAAYsQ,UAC9B,GAAIiZ,GAAiB,cACpB,MAAOhrB,MAAKqrB,uBACb,IAAIL,GAAiB,gBACpB,MAAO3oB,GAAuBygB,mBAC/B,MACD,KAAM/Q,IAAazP,EAAayP,UAC/B,MAAO1P,GAAuBipB,oBAC9B,MACD,SACC,MAGF,MAAO,MAGAllB,GAAA7F,UAAA8qB,sBAAR,WAEC,IAAKrrB,KAAKurB,oBAAqB,CAC9B,GAAIC,GAA2BnpB,EAAuBopB,2BAEtDzrB,MAAKurB,oBAAsB,GAAIjqB,GAAkBkqB,EAAeA,EAAeA,EAAeA,EAAeA,EAAeA,EAC5HxrB,MAAKurB,oBAAoBpiB,KAAO,qBAGjC,MAAgBnJ,MAAKurB,oBAGdnlB,GAAA7F,UAAA4Q,WAAR,SAAmBua,GAAA,GAAAA,QAAA,GAAyB,CAAzBA,EAAA,MAElB,GAAIA,EACH,MAAO1rB,MAAKsN,eAAeqb,YAC5B,OAAO3oB,MAAKsN,eAAeuF,YAIpBzM,GAAA7F,UAAA0b,cAAR,WAEC,MAAO,IAAIpb,GAASb,KAAK4kB,wBAGlBxe,GAAA7F,UAAAorB,qBAAR,WAEC,GAAItsB,EACJ,IAAIusB,GAAwB,GAAIhlB,OAAc,EAC9C,KAAKvH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvBusB,EAAQvsB,GAAKW,KAAKsN,eAAeuF,YAGlC,MAAO+Y,GAGAxlB,GAAA7F,UAAAqkB,qBAAR,WAEC,GAAIgH,GAAwB,GAAIhlB,OAAc,GAE9CglB,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK,CACbA,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK,CACbA,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,GAAK5rB,KAAKmR,WAAWnR,KAAKyM,gBAClCmf,GAAQ,IAAM5rB,KAAKmR,WAAWnR,KAAKyM,gBACnCmf,GAAQ,IAAM,CACdA,GAAQ,IAAM5rB,KAAKmR,WAAWnR,KAAKyM,gBACnCmf,GAAQ,IAAM5rB,KAAKmR,WAAWnR,KAAKyM,gBACnCmf,GAAQ,IAAM5rB,KAAKmR,WAAWnR,KAAKyM,gBACnCmf,GAAQ,IAAM,CAId,IAAIC,MAAMD,EAAQ,IAAK,CACtBA,EAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,GAAK,CACbA,GAAQ,IAAM,CACdA,GAAQ,IAAM,CACdA,GAAQ,IAAM,CACdA,GAAQ,IAAM,EAIf,MAAOA,GAj0GMxlB,GAAA0lB,qBAA8B,MAC9B1lB,GAAAyE,aAAsB,CACtBzE,GAAAsE,QAAiB,CACjBtE,GAAAuE,KAAc,CACdvE,GAAAmiB,KAAc,CACdniB,GAAAqiB,MAAe,CACfriB,GAAAkZ,MAAe,CACflZ,GAAA+M,MAAe,CACf/M,GAAA4M,OAAgB,CAChB5M,GAAAyR,OAAgB,CAChBzR,GAAA4G,QAAiB,CACjB5G,GAAA6G,QAAiB,CACjB7G,GAAAiV,KAAc,EACdjV,GAAA6W,MAAe,EACf7W,GAAAmZ,MAAe,EACfnZ,GAAAud,UAAmB,EACnBvd,GAAA2lB,aAAsB,EACtB3lB,GAAAgjB,UAAmB,EACnBhjB,GAAAijB,UAAmB,EACnBjjB,GAAAkjB,UAAmB,EACnBljB,GAAAmjB,OAAgB,EAChBnjB,GAAAojB,OAAgB,EAChBpjB,GAAAqjB,OAAgB,EAChBrjB,GAAAgc,OAAgB,EA6yG/B,OAAAhc,IA/1GwBnF,EAm2GxB,IAAM4F,IAAQ,WAYb,QAZKA,MAgBEA,EAAAtG,UAAA2K,QAAP,WAGClL,KAAK0I,GAAK,IACV1I,MAAKgsB,MAAQ,IACbhsB,MAAKyP,cAAgB,IACrBzP,MAAKkqB,sBAAwB,KAIvBrjB,GAAAtG,UAAA0R,SAAP,SAAgBga,GAEf,IAAKjsB,KAAKyP,cACTzP,KAAKyP,cAAgB,GAAI7I,MAE1B5G,MAAKyP,cAAczI,KAAKilB,GAE1B,OAAAplB,KAEA,IAAMiiB,IAAa,WAAnB,QAAMA,MAEEA,EAAAvoB,UAAAyoB,IAAP,SAAWD,EAAYmD,GAEtBlsB,KAAM+oB,EAAI1gB,YAAe6jB,EAGnBpD,GAAAvoB,UAAAgT,IAAP,SAAWwV,EAAYoD,GAEtB,GAAInsB,KAAKI,eAAe2oB,EAAI1gB,YAAa,CACxC,MAAOrI,MAAK+oB,EAAI1gB,gBACV,CACN,MAAO8jB,IAGV,OAAArD,KDtuBA,IC2uBM3c,IAAQ,WAAd,QAAMA,MAmBSA,EAAAC,KAAd,SAAmBP,EAAcugB,GAEhC,OAAQvgB,EAAQugB,IAAaA,EAnBhBjgB,GAAAO,MAAe,CACfP,GAAAS,MAAe,CACfT,GAAAW,MAAe,CACfX,GAAAE,MAAe,CACfF,GAAAI,MAAe,EACfJ,GAAAkgB,MAAe,EACflgB,GAAAmgB,MAAe,EACfngB,GAAAogB,MAAe,GACfpgB,GAAAqgB,MAAe,GACfrgB,GAAAsgB,OAAgB,GAChBtgB,GAAAugB,OAAgB,IAChBvgB,GAAAwgB,OAAgB,IAChBxgB,GAAAygB,OAAgB,IAChBzgB,GAAA0gB,OAAgB,IAChB1gB,GAAA2gB,OAAgB,KAChB3gB,GAAA4gB,OAAgB,KAM/B,OAAA5gB,KAhFArM,GAAAJ,QAAS0G,KDvpBN4mB,iCAAiCC,UAAUC,wCAAwCD,UAAUE,gCAAgCF,UAAUG,2CAA2CH,UAAUI,sCAAsCJ,UAAUK,gCAAgCL,UAAUM,gCAAgCN,UAAUO,0CAA0CP,UAAUQ,iCAAiCR,UAAUS,qCAAqCT,UAAUU,sCAAsCV,UAAUW,8DAA8DX,UAAUY,qDAAqDZ,UAAUa,oDAAoDb,UAAUc,6CAA6Cd,UAAUe,4CAA4Cf,UAAUgB,wCAAwChB,UAAUiB,uCAAuCjB,UAAUkB,kCAAkClB,UAAUmB,uDAAuDnB,UAAUoB,oCAAoCpB,UAAUqB,uDAAuDrB,UAAUsB,wCAAwCtB,UAAUuB,qCAAqCvB,UAAUwB,+CAA+CxB,UAAUyB,mCAAmCzB,UAAU0B,yCAAyC1B,UAAU2B,qCAAqC3B,UAAU4B,wCAAwC5B,UAAU6B,qDAAqD7B,UAAU8B,6CAA6C9B,UAAU+B,6CAA6C/B,UAAUgC,4CAA4ChC,UAAUiC,4DAA4DjC,UAAUkC,8DAA8DlC,UAAUmC,iEAAiEnC,UAAUoC,qEAAqEpC,UAAUqC,wCAAwCrC,UAAUsC,oDAAoDtC,UAAUuC,iDAAiDvC,UAAUwC,iDAAiDxC,UAAUyC,qDAAqDzC,UAAU0C,kDAAkD1C,UAAU2C,mDAAmD3C,UAAU4C,kDAAkD5C,UAAU6C,+BAA+B7C,UAAU8C,qCAAqC9C,UAAU+C,4CAA4C/C,UAAUgD,gDAAgDhD,UAAUiD,yDAAyDjD,UAAUkD,sDAAsDlD,UAAUmD,wDAAwDnD,UAAUoD,2DAA2DpD,UAAUqD,2DAA2DrD,UAAUsD,uDAAuDtD,UAAUuD,2DAA2DvD,UAAUwD,6DAA6DxD,UAAUyD,gEAAgEzD,UAAU0D,wDAAwD1D,UAAU2D,qDAAqD3D,UAAU4D,+DAA+D5D,UAAU6D,0DAA0D7D,UAAU8D,sDAAsD9D,UAAU+D,0DAA0D/D,UAAUgE,6DAA6DhE,UAAUiE,0DAA0DjE,UAAUkE,0DAA0DlE,UAAUmE,sDAAsDnE,UAAUoE,yDAAyDpE,UAAUqE,sDAAsDrE,UAAUsE,sDAAsDtE,UAAUuE,+DAA+DvE,UAAUwE,uDAAuDxE,UAAUyE,2DAA2DzE,UAAU0E,yDAAyD1E,UAAU2E,mDAAmD3E,UAAU4E,8CAA8C5E,UAAU6E,sDAAsD7E,UAAU8E,4DAA4D9E,UAAU+E,yDAAyD/E,UAAUgF,4DAA4DhF,UAAUiF,mDAAmDjF,UAAUkF,uDAAuDlF,UAAUmF,mDAAmDnF,UAAUoF,qDAAqDpF,UAAUqF,iDAAiDrF,UAAUsF,iDAAiDtF,UAAUuF,gDAAgDvF,UAAUwF,qDAAqDxF,UAAUyF,oDAAoDzF,UAAU0F,yDAAyD1F,UAAU2F,uDAAuD3F,YAAY4F,gCAAgC,SAASj0B,EAAQkB,EAAOJ,GAC/7K,GAAIK,GAAYC,KAAKD,WAAa,SAAUE,EAAGC,GAC3C,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD;QAASE,KAAOL,KAAKM,YAAcL,EACnCI,EAAGE,UAAYL,EAAEK,SACjBN,GAAEM,UAAY,GAAIF,GEl0FtB,IAAOI,GAAQ7B,EAAiB,gCAChC,IAAO+B,GAAmB/B,EAAc,2CAExC,IAAOmC,GAAmBnC,EAAc,0CACxC,IAAOoC,GAAUpC,EAAgB,iCACjC,IAAOqC,GAAUrC,EAAgB,qCACjC,IAAOsC,GAAWtC,EAAgB,sCAKlC,IAAOgD,GAAsBhD,EAAa,uDAG1C,IAAOqD,GAAIrD,EAAkB,mCAC7B,IAAOyD,GAAsBzD,EAAa,qDAE1C,IAAOiF,GAAcjF,EAAe,uDACpC,IAAOwE,GAAkBxE,EAAc,qDAEvC,IAAOmF,GAAcnF,EAAe,4CACpC,IAAOkF,GAAkBlF,EAAc,gDF+zFvC,IE1zFMk0B,GAAS,SAAAzsB,GAAStG,EAAlB+yB,EAASzsB,EAsDd,SAtDKysB,GAsDOC,EAA4BC,GAA5B,GAAAD,QAAA,GAA0B,CAA1BA,EAAA,MAA4B,GAAAC,QAAA,GAAgC,CAAhCA,EAAA,KAEvC3sB,EAAA1G,KAAAK,KAAMe,EAAoBuF,aApDnBtG,MAAAizB,WAAoB,GAAIC,OA+BxBlzB,MAAAmzB,cAAmC,GAAI/vB,EAWvCpD,MAAAozB,cAAwB,KACxBpzB,MAAAqzB,WAAqB,KAU5BrzB,MAAKszB,aAAeP,CACpB/yB,MAAKuzB,mBAAqBP,EAQbF,EAAA7qB,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQP4qB,GAAA1qB,aAAd,SAA2BtB,GAE1B,MAAQ5F,GAAYmH,SAASvB,EAAM,IAAM,OAMnCgsB,GAAAvyB,UAAA+H,oBAAP,SAA2BC,GAE1B,GAAIA,EAAmBC,OAAO5I,QAAU,EACvC,MAED,IAAIiJ,GAAsCN,EAAmBC,OAAO,EAEpE,IAAIK,EAAO,CACV,GAAI6K,GAA0B,GAAI3P,GAAe8E,EAEjD,IAAI7I,KAAK2f,cAAgB,EACxBjM,EAASkM,KAAO9b,EAAmB+b,UAGV7f,MAAKuL,UAAWgR,SAASvc,KAAKwzB,MAExD9f,GAASvK,KAAOnJ,KAAKwzB,MAAM9f,SAASvK,IACpCnJ,MAAKwzB,MAAM9f,SAAWA,CACtB1T,MAAKoJ,gBAAgBsK,EACrB1T,MAAKoJ,gBAAgBpJ,KAAKwzB,MAAM7N,SAChC3lB,MAAKoJ,gBAAgBpJ,KAAKwzB,OAE3BxzB,KAAKozB,cAAgB,KAMfN,GAAAvyB,UAAAyJ,2BAAP,SAAkCzB,GAGjC,GAAIvI,KAAK2f,aAAe,EAAG,CAC1B3f,KAAKwzB,MAAM9f,SAAWrR,EAAuBipB,yBACvC,CACNtrB,KAAKwzB,MAAM9f,SAAW,GAAI3P,GAAe1B,EAAuBygB,oBAC9C9iB,MAAKwzB,MAAM9f,SAAUkM,KAAO9b,EAAmB+b,WAIxC7f,KAAKuL,UAAWgR,SAASvc,KAAKwzB,MAExDxzB,MAAKoJ,gBAAgBpJ,KAAKwzB,MAAM7N,SAChC3lB,MAAKoJ,gBAAgBpJ,KAAKwzB,MAC1BxzB,MAAKozB,cAAgB,KAOfN,GAAAvyB,UAAA8J,iBAAP,WAEC,IAAKrK,KAAKwG,gBAAiB,CAC1BxG,KAAKsK,UAAYtK,KAAKuK,eACtBvK,MAAKwG,gBAAkB,IAIvBxG,MAAKsK,UAAU+C,SAAW,EAG3B,MAAOrN,KAAKyzB,YAAa,CACxB,IAAKzzB,KAAK0zB,cAAe,CAQxB1zB,KAAK2zB,UAAY,GAAIlzB,EACrBT,MAAKwzB,MAAQ,GAAIvxB,GAAKjC,KAAK2zB,UAAW,KACtC,IAAI3zB,KAAK2f,aAAe,EAAG,CAC1B3f,KAAKwzB,MAAM9f,SAAWrR,EAAuBipB,yBACvC,CACNtrB,KAAKwzB,MAAM9f,SAAW,GAAI3P,GAAe1B,EAAuBygB,oBAC9C9iB,MAAKwzB,MAAM9f,SAAUkM,KAAO9b,EAAmB+b,WAOlE7f,KAAKwK,aACLxK,MAAK4zB,yBACC,KAAK5zB,KAAK6zB,UAAW,CAC3B7zB,KAAK8zB,cACC,KAAK9zB,KAAK+zB,aAAc,CAC9B/zB,KAAKg0B,iBACC,KAAKh0B,KAAKi0B,cAAe,CAC/Bj0B,KAAKk0B,kBACC,IAAKl0B,KAAe,YAAMA,KAAkB,cAAG,CACrD,MAAOiB,GAAWkK,iBACZ,KAAKnL,KAAKqzB,WAAY,CAC5BrzB,KAAKqzB,WAAa,IAElBrzB,MAAK2zB,UAAUha,eAAe3Z,KAAKm0B,cAAcC,QAEjDp0B,MAAKwzB,MAAMrqB,KAAO,EAClB,IAAInJ,KAAKozB,cAAe,CAEGpzB,KAAKuL,UAAWgR,SAASvc,KAAKwzB,MAExDxzB,MAAKoJ,gBAAgBpJ,KAAKwzB,MAAM7N,SAChC3lB,MAAKoJ,gBAAgBpJ,KAAKwzB,OAG3BxzB,KAAK2V,kCAIP,MAAO1U,GAAWmK,cAGZ0nB,GAAAvyB,UAAA8K,eAAP,SAAsBC,GAErBjF,EAAA9F,UAAM8K,eAAc1L,KAAAK,KAACsL,EAGrBtL,MAAKuL,UAAY,GAAI3J,GAOdkxB,GAAAvyB,UAAAiK,YAAR,WAECxK,KAAKq0B,OAASr0B,KAAKsK,UAAUoe,SAC7B1oB,MAAKgI,SAAWhI,KAAKsK,UAAUoe,SAC/B1oB,MAAKs0B,WAAat0B,KAAKsK,UAAUoe,SACjC1oB,MAAKu0B,YAAcv0B,KAAKsK,UAAUoe,SAElC1oB,MAAKsK,UAAUoe,SACf1oB,MAAKw0B,UAAYx0B,KAAKsK,UAAUoe,SAChC1oB,MAAKy0B,aAAez0B,KAAKsK,UAAUoe,SACnC1oB,MAAK00B,OAAS10B,KAAKsK,UAAUoe,SAC7B1oB,MAAK20B,SAAW30B,KAAKsK,UAAUoe,SAE/B1oB,MAAKsK,UAAUoe,SACf1oB,MAAK40B,WAAa50B,KAAKsK,UAAUoe,SACjC1oB,MAAK60B,aAAe70B,KAAKsK,UAAUoe,SACnC1oB,MAAK80B,UAAY90B,KAAKsK,UAAUoe,SAChC1oB,MAAK+0B,YAAc/0B,KAAKsK,UAAUoe,SAClC1oB,MAAKg1B,cAAgBh1B,KAAKsK,UAAUoe,SAEpC1oB,MAAKsK,UAAUoe,SACf1oB,MAAKi1B,WAAaj1B,KAAKsK,UAAUoe,SAEjC1oB,MAAK0zB,cAAgB,KAMdZ,GAAAvyB,UAAAqzB,mBAAR,WAEC,GAAIne,EACJ,IAAItM,EACJ,IAAI+rB,EACJ,IAAIC,EACJn1B,MAAKo1B,eAAiB,GAAIxuB,MAC1B5G,MAAKsK,UAAU+C,SAAWrN,KAAK60B,YAE/B,IAAIQ,GAAgB,GAAIC,QAAO,oBAAsB,IACrD,KAAK,GAAIj2B,GAAoB,EAAGA,EAAIW,KAAKw0B,YAAan1B,EAAG,CACxD8J,EAAOnJ,KAAKsK,UAAUgK,aAAa,GACnCnL,GAAOA,EAAKosB,QAAQF,EAAQ,GAC5BH,GAAW/rB,EAAKqsB,YAAY,IAC5B,IAAIx1B,KAAKuzB,mBACR4B,EAAahsB,EAAKqsB,YAAY,IAC/B,IAAIrsB,EAAKhB,cAAcstB,QAAQ,UAAY,GAAKtsB,EAAKhB,cAAcstB,QAAQ,UAAY,EAAG,CACzFtsB,EAAOA,EAAKusB,UAAUP,EAAa,EAAGD,EACtCzf,GAAMtM,EAAO,IAAMnJ,KAAKszB,iBAClB,CACN7d,EAAMtM,EAGPnJ,KAAKo1B,eAAe/1B,GAAK8J,CAGzB,IAAInJ,KAAK21B,aAAa/1B,QAAU,EAC/BI,KAAKijB,gBAAgB9Z,EAAM,GAAInI,GAAWyU,IAG5C,GAAIzV,KAAKo1B,eAAex1B,OAAS,EAChCI,KAAKwzB,MAAM9f,SAASvK,KAAOnJ,KAAKo1B,eAAe,OAC/Cp1B,MAAKozB,cAAgB,KAMfN,GAAAvyB,UAAAuzB,QAAR,WAEC,GAAIje,GAAoB,CAExB7V,MAAK41B,KAAO,GAAIhvB,OAAc5G,KAAK00B,OAAO,EAC1C10B,MAAKsK,UAAU+C,SAAWrN,KAAK80B,SAC/B,KAAK,GAAIz1B,GAAoB,EAAGA,EAAIW,KAAK00B,OAAQr1B,IAAK,CACrDW,KAAK41B,KAAK/f,KAAO7V,KAAKsK,UAAUkU,YAAYxe,KAAKs0B,UACjDt0B,MAAK41B,KAAK/f,KAAO7V,KAAKsK,UAAUkU,YAAYxe,KAAKu0B,YAGlDv0B,KAAK6zB,UAAY,KAMVf,GAAAvyB,UAAAyzB,WAAR,WAEC,GAAI50B,GAAmBc,EAAmBsL,EAAmBqqB,EAAoBC,EAAoBC,CACrG,IAAI12B,EAEJW,MAAKg2B,aAAe,GAAIpvB,MACxB5G,MAAKi2B,WAAa,GAAIrvB,MACtB5G,MAAKk2B,SAAW,GAAItvB,MAEpB5G,MAAKsK,UAAU+C,SAAWrN,KAAK+0B,WAE/B,KAAK11B,EAAI,EAAGA,EAAIW,KAAK20B,SAAUt1B,IAAK,CAEnCD,EAAIY,KAAKsK,UAAUsG,mBACnB1Q,GAAIF,KAAKsK,UAAUsG,mBACnBpF,GAAIxL,KAAKsK,UAAUsG,mBAGnBilB,GAAK71B,KAAKsK,UAAUsG,mBACpBklB,GAAK91B,KAAKsK,UAAUsG,mBACpBmlB,GAAK/1B,KAAKsK,UAAUsG,mBAEpB5Q,MAAKm2B,SAAS/2B,EAAGy2B,EACjB71B,MAAKm2B,SAASj2B,EAAG41B,EACjB91B,MAAKm2B,SAAS3qB,EAAGuqB,GAGlB,GAAIjqB,GAAsB9L,KAAKi2B,WAAWr2B,MAC1CI,MAAKo2B,SAAW,GAAIxvB,OAAckF,EAAI,EAEtC,KAAKzM,EAAI,EAAGA,EAAIyM,IAAOzM,EAAG,CACzBW,KAAKo2B,SAAS/2B,GAAK,GAAKW,KAAK41B,KAAK51B,KAAKi2B,WAAW52B,IAAM,EACxDW,MAAKo2B,UAAU/2B,GAAK,GAAK,GAAKW,KAAK41B,MAAM51B,KAAKi2B,WAAW52B,IAAM,GAAK,GAGrEW,KAAK+zB,aAAe,KASbjB,GAAAvyB,UAAA41B,SAAR,SAAiBE,EAA6BC,GAE7C,GAAIC,GAAuBv2B,KAAKw2B,UAAUH,EAAaC,EAEvD,IAAIC,IAAU,EAAG,CAChBv2B,KAAKk2B,SAASlvB,KAAKhH,KAAKg2B,aAAap2B,OACrCI,MAAKg2B,aAAahvB,KAAKqvB,EACvBr2B,MAAKi2B,WAAWjvB,KAAKsvB,OAErBt2B,MAAKk2B,SAASlvB,KAAKuvB,GASbzD,GAAAvyB,UAAAi2B,UAAR,SAAkBH,EAA6BC,GAE9C,GAAIxqB,GAAsB9L,KAAKg2B,aAAap2B,MAE5C,KAAK,GAAIP,GAAoB,EAAGA,EAAIyM,IAAOzM,EAAG,CAC7C,GAAIW,KAAKg2B,aAAa32B,IAAMg3B,GAAer2B,KAAKi2B,WAAW52B,IAAMi3B,EAChE,MAAOj3B,GAGT,OAAQ,EAMDyzB,GAAAvyB,UAAA2zB,YAAR,WAEC,GAAIuC,GAAWC,EAAWC,CAC1B,IAAIptB,GAAWqtB,EAAWC,CAC1B,IAAIlR,EACJ,IAAIC,EACJ,IAAIkR,GAA0B92B,KAAKg2B,aAAap2B,MAChD,IAAIm3B,EACJ,IAAIC,EACJ,IAAI33B,GAAmBwW,EAAkBC,CFguFnC,IE9tFF3M,GAAc,EAClB,IAAI8tB,GAA0B,IAE9Bj3B,MAAKsK,UAAU+C,SAAWrN,KAAKg1B,aAE/B,KAAK31B,EAAI,EAAGA,EAAIW,KAAK40B,WAAYv1B,IAAK,CAErC23B,EAAY,GAAIpwB,MAChBmwB,GAAY,GAAInwB,OAAckwB,EAAQ,EAEtCL,GAAKz2B,KAAKsK,UAAUuI,WACpB6jB,GAAK12B,KAAKsK,UAAUuI,WACpB8jB,GAAK32B,KAAKsK,UAAUuI,WAEpBtJ,GAAKvJ,KAAKsK,UAAUuI,WACpB+jB,GAAK52B,KAAKsK,UAAUuI,WACpBgkB,GAAK72B,KAAKsK,UAAUuI,WAEpB1J,GAAOnJ,KAAKk3B,eAIZ,KAAKrhB,EAAI,EAAGA,EAAI7V,KAAKy0B,aAAc5e,IAAK7V,KAAKsK,UAAU+C,WACtD2pB,EAAUhwB,KAAKyvB,EAAGz2B,KAAKsK,UAAU2B,mBAAqB1C,EAAImtB,EAAG12B,KAAKsK,UAAU2B,mBAAqB2qB,EAAID,EAAG32B,KAAKsK,UAAU2B,mBAAqB4qB,EAE7I/gB,GAAI,CACJ,KAAKD,EAAI,EAAGA,EAAIihB,EAASjhB,IAAK,CAC7BkhB,EAAUjhB,KAAOkhB,EAAUh3B,KAAKg2B,aAAangB,GAAG,EAChDkhB,GAAUjhB,KAAOkhB,EAAUh3B,KAAKg2B,aAAangB,GAAG,EAAI,EACpDkhB,GAAUjhB,KAAOkhB,EAAUh3B,KAAKg2B,aAAangB,GAAG,EAAI,GAGrD+P,EAAU,GAAIjlB,GAAoB,KAElC,IAAIX,KAAKm0B,eAAiB,KACzBn0B,KAAKm0B,cAAgBvO,CAEtBD,GAAW,GAAIllB,EACfklB,GAAShM,eAAeiM,EAExBA,GAAQvU,cAAcrR,KAAKk2B,SAC3BtQ,GAAQtU,gBAAgBylB,EACxBnR,GAAQpU,UAAUxR,KAAKo2B,SACvBxQ,GAAQuR,aACRvR,GAAQwR,cACRxR,GAAQ9L,kBAAoB,KAC5B8L,GAAQ5L,mBAAqB,KAE7B,IAAIoL,GAAsBplB,KAAKizB,WAAW9pB,EAE1C,KAAKic,EAAM,CAIV,GAAI6R,EAAU,CACbj3B,KAAKoJ,gBAAgB6tB,EACrBj3B,MAAKmzB,cAAcxM,aAAasQ,GAGjC7R,EAAO,GAAIvhB,EACXuhB,GAAKjc,KAAOA,CACZic,GAAKgB,iBAAmB,IAExBpmB,MAAKizB,WAAW9pB,GAAQic,CAExB6R,GAAW7R,EAEZA,EAAKvM,SAAS8M,EAAU,IAAKmN,EAAUuE,KAIxC,GAAIJ,EAAU,CACbj3B,KAAKoJ,gBAAgB6tB,EACrBj3B,MAAKmzB,cAAcxM,aAAasQ,GAIjCj3B,KAAKoJ,gBAAgBpJ,KAAKmzB,cAE1BnzB,MAAKi0B,cAAgB,KAGdnB,GAAAvyB,UAAA22B,cAAR,WAEC,GAAI/tB,GAAc,EAClB,IAAI2M,GAAoB,CACxB,KAAK,GAAID,GAAoB,EAAGA,EAAI,GAAIA,IAAK,CAC5C,GAAIyhB,GAAqBt3B,KAAKsK,UAAU2B,kBAExC,IAAIqJ,KAAKiiB,MAAMD,GAAM,IAAQhiB,KAAKiiB,MAAMD,IAAO,KAAQxhB,GAAK,EAC3D3M,GAAQquB,OAAOC,aAAaH,EAE7B,IAAIhiB,KAAKiiB,MAAMD,IAAO,IAAQhiB,KAAKiiB,MAAMD,IAAO,GAC/CxhB,IAEF,MAAO3M,GA5dM2pB,GAAAuE,IAAqB,CA8dpC,OAAAvE,IAhewB7xB,EAkexBnB,GAAmBJ,QAAVozB,IFwsFN3F,gCAAgCF,UAAUG,2CAA2CH,UAAUO,0CAA0CP,UAAUQ,iCAAiCR,UAAUS,qCAAqCT,UAAUU,sCAAsCV,UAAUqB,uDAAuDrB,UAAUyB,mCAAmCzB,UAAU6B,qDAAqD7B,UAAU+C,4CAA4C/C,UAAUgD,gDAAgDhD,UAAUoF,qDAAqDpF,UAAU2F,uDAAuD3F,YAAYyK,oCAAoC,SAAS94B,EAAQkB,EAAOJ,GAC3vB,GAAIK,GAAYC,KAAKD,WAAa,SAAUE,EAAGC,GAC3C,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCI,EAAGE,UAAYL,EAAEK,SACjBN,GAAEM,UAAY,GAAIF,GG1sGtB,IAAOs3B,GAAU/4B,EAAgB,kCACjC,IAAOkC,GAAQlC,EAAiB,gCAChC,IAAOmC,GAAmBnC,EAAc,0CACxC,IAAOqC,GAAUrC,EAAgB,qCAEjC,IAAO4E,GAAS5E,EAAgB,iDAChC,IAAO8E,GAAY9E,EAAgB,oDACnC,IAAOgF,GAAgBhF,EAAe,yDHitGtC,IG1sGMg5B,GAAa,SAAAvxB,GAAStG,EAAtB63B,EAAavxB,EAyClB,SAzCKuxB,GAyCOC,EAAwCC,GAAxC,GAAAD,QAAA,GAAsC,CAAtCA,EAAA,KAAwC,GAAAC,QAAA,GAAoC,CAApCA,EAAA,EAEnDzxB,EAAA1G,KAAAK,KAAMe,EAAoBg3B,KAzBnB/3B,MAAAg4B,YAA6B,CAE7Bh4B,MAAAi4B,MAAuB,CACvBj4B,MAAAk4B,eAAgC,CAuBvCl4B,MAAKm4B,cAAgB,GAAIR,EACzB,IAAIS,GAAgB,GAAIT,EACxB,IAAIU,GAAgB,GAAIV,EAExBS,GAAGE,cAAcx3B,EAASy3B,QAASjjB,KAAKkjB,GAAG,GAC3CH,GAAGC,cAAcx3B,EAAS23B,QAASnjB,KAAKkjB,GAAG,GAE3Cx4B,MAAKm4B,cAAcO,SAASL,EAAID,EAEhC,IAAIP,EAAwB,CAC3B73B,KAAKm4B,cAAcO,SAASL,EAAID,EAChCA,GAAGE,cAAcT,EAAwBC,EACzC93B,MAAKm4B,cAAcO,SAASN,EAAIp4B,KAAKm4B,gBASzBP,EAAA3vB,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,UAQP0vB,GAAAxvB,aAAd,SAA2BtB,GAE1B,MAAO,OAMD8wB,GAAAr3B,UAAA8J,iBAAP,WAEC,GAAIsuB,EAEJ,KAAK34B,KAAKwG,gBAAiB,CAC1BxG,KAAK44B,UAAY54B,KAAK64B,eACtB74B,MAAKwG,gBAAkB,KAGxB,MAAOxG,KAAKyzB,YAAa,CACxBkF,EAAQ34B,KAAK84B,cACb,QAAQH,GACP,IAAKf,GAAcmB,cAClB/4B,KAAKg5B,YACL,MACD,KAAK,GAEJ,KACD,KAAKpB,GAAcqB,cAClBj5B,KAAKgI,SAAWhI,KAAKk5B,YACrB,IAAIl5B,KAAKgI,UAAY,GACpB,KAAM,IAAIzI,OAAM,sCACjB,MACD,KAAKq4B,GAAcuB,mBAClBn5B,KAAKo5B,UACL,MACD,KAAKxB,GAAcyB,iBAClBr5B,KAAK40B,WAAa50B,KAAKk5B,YACvBl5B,MAAKs5B,QAAU,GAAI1yB,MACnB5G,MAAKu5B,WAAa,GAAI3yB,MACtB,MACD,KAAKgxB,GAAc4B,iBAClBx5B,KAAKy5B,WAAaz5B,KAAKk5B,YACvBl5B,MAAK05B,WAAa,GAAI9yB,OAAqB5G,KAAKy5B,WAChDz5B,MAAK25B,eAAiB,GAAI/yB,OAAqB5G,KAAKy5B,WACpD,MACD,KAAK7B,GAAcgC,iBAClB55B,KAAK65B,WAAa75B,KAAKk5B,YACvB,MACD,KAAKtB,GAAckC,8BAClB95B,KAAK+5B,uBAAyB/5B,KAAKk5B,YACnC,MACD,KAAKtB,GAAcoC,gBAClBh6B,KAAKi6B,gBACL,MACD,KAAKrC,GAAcsC,aAClBl6B,KAAKm6B,aACL,MACD,KAAKvC,GAAcwC,iBAClBp6B,KAAKq6B,gBACL,MACD,KAAKzC,GAAc0C,YAClBt6B,KAAKu6B,YACL,MACD,SACC,IAAKv6B,KAAKw6B,YACTx6B,KAAKy6B,0BAGR,GAAIz6B,KAAKw6B,YAAa,CACrBx6B,KAAK06B,MAAQ,GAAI92B,EACjB5D,MAAK26B,eACL36B,MAAKoJ,gBAAgBpJ,KAAK06B,MAC1B,OAAOz5B,GAAWkK,cAGpB,MAAOlK,GAAWmK,cAMXwsB,GAAAr3B,UAAAo6B,cAAR,WAEC,IAAK,GAAIt7B,GAAmB,EAAGA,EAAIW,KAAK40B,aAAcv1B,EACrDW,KAAK06B,MAAM7hB,SAAS7Y,KAAK46B,cAAc56B,KAAKu5B,WAAWl6B,IAAK,IAAKW,KAAK65B,YAQhEjC,GAAAr3B,UAAAq6B,cAAR,SAAsBC,GAErB,GAAIC,EACJ,IAAItW,EACJ,IAAIuW,EACJ,IAAIlvB,EACJ,IAAIgK,EACJ,IAAImlB,GAAqB,GAAIl6B,EAC7B,IAAI+jB,GAAyB,GAAI8S,EACjC,IAAIsD,GAA2BJ,EAAUI,UACzC,IAAIC,GAAwB,GAAIx3B,EAChC,IAAIuhB,GAA8BiW,EAASjW,UAE3C,KAAK,GAAI5lB,GAAmB,EAAGA,EAAIW,KAAKy5B,aAAcp6B,EAAG,CACxDwW,EAAI,CACJ2O,GAAO,GAAIhhB,EACXs3B,GAAY96B,KAAK05B,WAAWr6B,EAC5B07B,GAAO/6B,KAAK25B,eAAet6B,EAC3BwM,GAAQivB,EAAUjvB,KAClBmvB,GAAU1hB,EAAIyhB,EAAK1tB,SAASiM,CAC5B0hB,GAAUzhB,EAAIwhB,EAAK1tB,SAASkM,CAC5ByhB,GAAUxhB,EAAIuhB,EAAK1tB,SAASmM,CAC5BqL,GAAYvL,EAAIyhB,EAAKlW,YAAYvL,CACjCuL,GAAYtL,EAAIwhB,EAAKlW,YAAYtL,CACjCsL,GAAYrL,EAAIuhB,EAAKlW,YAAYrL,CAEjC,IAAI3N,EAAQ,EACXmvB,EAAU1hB,EAAI2hB,EAAWH,EAAUK,WAActlB,IAClD,IAAIhK,EAAQ,EACXmvB,EAAUzhB,EAAI0hB,EAAWH,EAAUK,WAActlB,IAClD,IAAIhK,EAAQ,EACXmvB,EAAUxhB,EAAIyhB,EAAWH,EAAUK,WAActlB,IAClD,IAAIhK,EAAQ,EACXgZ,EAAYvL,EAAI2hB,EAAWH,EAAUK,WAActlB,IACpD,IAAIhK,EAAQ,GACXgZ,EAAYtL,EAAI0hB,EAAWH,EAAUK,WAActlB,IACpD,IAAIhK,EAAQ,GACXgZ,EAAYrL,EAAIyhB,EAAWH,EAAUK,WAActlB,IAEpD,IAAIulB,GAAW,EAAIvW,EAAYvL,EAAEuL,EAAYvL,EAAIuL,EAAYtL,EAAEsL,EAAYtL,EAAIsL,EAAYrL,EAAEqL,EAAYrL,CACzGqL,GAAYuW,EAAIA,EAAI,EAAG,GAAK9lB,KAAK+lB,KAAKD,EAEtC,IAAIN,EAAUzW,YAAc,EAAG,CAC9BG,EAAKK,YAAY6T,SAAS14B,KAAKm4B,cAAetT,EAC9CL,GAAKO,YAAc/kB,KAAKm4B,cAAcmD,YAAYN,OAC5C,CACNxW,EAAKK,YAAYG,SAASH,EAC1BL,GAAKO,YAAYzL,EAAI0hB,EAAU1hB,CAC/BkL,GAAKO,YAAYxL,EAAIyhB,EAAUzhB,CAC/BiL,GAAKO,YAAYvL,EAAIwhB,EAAUxhB,EAEhCgL,EAAKK,YAAYtL,GAAKiL,EAAKK,YAAYtL,CACvCiL,GAAKK,YAAYrL,GAAKgL,EAAKK,YAAYrL,CACvCgL,GAAKO,YAAYzL,GAAKkL,EAAKO,YAAYzL,CAEvC2L,GAAW5lB,GAAKmlB,EAGjB,MAAO0W,GAMAtD,GAAAr3B,UAAA05B,eAAR,WAEC,GAAI3C,EACJ,IAAIxwB,EACJ,IAAI6xB,GAAe34B,KAAK84B,cACxB,IAAIz5B,GAAmB,CAEvB,IAAIs5B,GAAS,IACZ34B,KAAKy6B,yBAEN,GAAG,CACF,GAAIz6B,KAAKw6B,YACRx6B,KAAKu7B,cACNz0B,GAAO,GAAI00B,EACX10B,GAAKqC,KAAOnJ,KAAKy7B,oBACjB30B,GAAKud,YAAcrkB,KAAKk5B,YACxBpyB,GAAK+E,MAAQ7L,KAAKk5B,YAClBpyB,GAAKq0B,WAAan7B,KAAKk5B,YACvBl5B,MAAK05B,WAAWr6B,KAAOyH,CAEvBwwB,GAAKt3B,KAAK07B,aAEV,IAAIpE,GAAM,IAAK,CACdt3B,KAAK27B,SACLrE,GAAKt3B,KAAK84B,cACV,IAAIxB,GAAMM,EAAcmB,cACvB/4B,KAAKg5B,YACN1B,GAAKt3B,KAAK07B,cAGX,GAAIpE,GAAM,IACTt3B,KAAK27B,gBAEErE,GAAM,KAMRM,GAAAr3B,UAAA45B,YAAR,WAEC,GAAI7C,EACJ,IAAIxwB,EACJ,IAAI6xB,GAAe34B,KAAK84B,cACxB,IAAIz5B,GAAmB,CAEvB,IAAIs5B,GAAS,IACZ34B,KAAKy6B,yBAEN,GAAG,CACF,GAAIz6B,KAAKw6B,YACRx6B,KAAKu7B,cACNz0B,GAAO,GAAI80B,EACX90B,GAAKyO,IAAMvV,KAAK67B,eAChB/0B,GAAKg1B,IAAM97B,KAAK67B,eAChB77B,MAAKs5B,QAAQj6B,KAAOyH,CAEpBwwB,GAAKt3B,KAAK07B,aAEV,IAAIpE,GAAM,IAAK,CACdt3B,KAAK27B,SACLrE,GAAKt3B,KAAK84B,cACV,IAAIxB,GAAMM,EAAcmB,cACvB/4B,KAAKg5B,YACN1B,GAAKt3B,KAAK07B,cAGX,GAAIpE,GAAM,IACTt3B,KAAK27B,gBAEErE,GAAM,KAMRM,GAAAr3B,UAAA85B,eAAR,WAEC,GAAI/C,EACJ,IAAIxwB,EACJ,IAAI6xB,GAAe34B,KAAK84B,cACxB,IAAIz5B,GAAmB,CAEvB,IAAIs5B,GAAS,IACZ34B,KAAKy6B,yBAEN,GAAG,CACF,GAAIz6B,KAAKw6B,YACRx6B,KAAKu7B,cACNz0B,GAAO,GAAIi1B,EACXj1B,GAAKuG,SAAWrN,KAAK67B,eACrB/0B,GAAK+d,YAAc7kB,KAAKg8B,iBACxBh8B,MAAK25B,eAAet6B,KAAOyH,CAE3BwwB,GAAKt3B,KAAK07B,aAEV,IAAIpE,GAAM,IAAK,CACdt3B,KAAK27B,SACLrE,GAAKt3B,KAAK84B,cACV,IAAIxB,GAAMM,EAAcmB,cACvB/4B,KAAKg5B,YACN1B,GAAKt3B,KAAK07B,cAGX,GAAIpE,GAAM,IACTt3B,KAAK27B,gBAEErE,GAAM,KAMRM,GAAAr3B,UAAAg6B,WAAR,WAEC,GAAIjD,EACJ,IAAIxwB,EACJ,IAAI6xB,EACJ,IAAIsD,EAEJA,GAAaj8B,KAAKk5B,YAElBP,GAAQ34B,KAAK84B,cACb,IAAIH,GAAS,IACZ34B,KAAKy6B,yBAEN,GAAG,CACF,GAAIz6B,KAAKw6B,YACRx6B,KAAKu7B,cACNz0B,GAAO,GAAIo1B,EACXp1B,GAAKm0B,WAAa,GAAIr0B,OAAc5G,KAAK+5B,uBAEzC,KAAK,GAAI16B,GAAmB,EAAGA,EAAIW,KAAK+5B,yBAA0B16B,EACjEyH,EAAKm0B,WAAW57B,GAAKW,KAAKm8B,eAE3Bn8B,MAAKu5B,WAAW0C,GAAcn1B,CAE9BwwB,GAAKt3B,KAAK07B,aAEV,IAAIpE,GAAM,IAAK,CACdt3B,KAAK27B,SACLrE,GAAKt3B,KAAK84B,cACV,IAAIxB,GAAMM,EAAcmB,cACvB/4B,KAAKg5B,YACN1B,GAAKt3B,KAAK07B,cAGX,GAAIpE,GAAM,IACTt3B,KAAK27B,gBAEErE,GAAM,KAMRM,GAAAr3B,UAAAo7B,QAAR,WAEC37B,KAAKg4B,aACLh4B,MAAKk4B,gBACLl4B,MAAKw6B,YAAcx6B,KAAKg4B,aAAeh4B,KAAK44B,UAAUh5B,OAM/Cg4B,GAAAr3B,UAAAu4B,aAAR,WAEC,GAAIxB,EACJ,IAAIqB,GAAe,EAEnB,QAAQ34B,KAAKw6B,YAAa,CACzBlD,EAAKt3B,KAAK07B,aACV,IAAIpE,GAAM,KAAOA,GAAM,MAAQA,GAAM,MAAQA,GAAM,IAAM,CACxD,GAAIqB,GAASf,EAAcmB,cAC1B/4B,KAAKo8B,gBACN,IAAIzD,GAAS,GACZ,MAAOA,OAERA,IAASrB,CAEV,IAAIqB,GAASf,EAAcmB,cAC1B,MAAOJ,GAGT,MAAOA,GAMAf,GAAAr3B,UAAA67B,eAAR,WAEC,GAAI9E,EAEJ,GACCA,GAAKt3B,KAAK07B,oBAAsBpE,GAAM,MAAQA,GAAM,KAAOA,GAAM,MAAQA,GAAM,IAEhFt3B,MAAK27B,UAME/D,GAAAr3B,UAAAy4B,WAAR,WAEC,GAAI1B,EACJ,QAAQt3B,KAAKw6B,aAAelD,GAAM,KACjCA,EAAKt3B,KAAK07B,cAMJ9D,GAAAr3B,UAAAm7B,YAAR,WAEC,GAAIpE,GAAYt3B,KAAK44B,UAAUyD,OAAOr8B,KAAKg4B,cAE3C,IAAIV,GAAM,KAAM,GACbt3B,KAAKi4B,KACPj4B,MAAKk4B,eAAiB,MAChB,IAAIZ,GAAM,OACdt3B,KAAKk4B,cAER,IAAIl4B,KAAKg4B,aAAeh4B,KAAK44B,UAAUh5B,OACtCI,KAAKw6B,YAAc,IAEpB,OAAOlD,GAMAM,GAAAr3B,UAAA24B,WAAR,WAEC,GAAI75B,GAAW8K,SAASnK,KAAK84B,eAC7B,IAAIjN,MAAMxsB,GACTW,KAAKs8B,eAAe,WACrB,OAAOj9B,GAMAu4B,GAAAr3B,UAAA47B,cAAR,WAEC,GAAI78B,GAAWi9B,WAAWv8B,KAAK84B,eAC/B,IAAIjN,MAAMvsB,GACTU,KAAKs8B,eAAe,aACrB,OAAOh9B,GAMAs4B,GAAAr3B,UAAAs7B,cAAR,WAEC,GAAIW,GAAe,GAAI17B,EACvB,IAAIw2B,GAAYt3B,KAAK84B,cAErB,IAAIxB,GAAM,IACTt3B,KAAKs8B,eAAe,IACrBE,GAAIljB,EAAItZ,KAAKm8B,eACbK,GAAIjjB,EAAIvZ,KAAKm8B,eACbK,GAAIhjB,EAAIxZ,KAAKm8B,eAEb,IAAIn8B,KAAK84B,gBAAkB,IAC1B94B,KAAKs8B,eAAe,IAErB,OAAOE,GAMA5E,GAAAr3B,UAAAy7B,gBAAR,WAEC,GAAIS,GAAkB,GAAI9E,EAC1B,IAAIL,GAAYt3B,KAAK84B,cAErB,IAAIxB,GAAM,IACTt3B,KAAKs8B,eAAe,IACrBG,GAAKnjB,EAAItZ,KAAKm8B,eACdM,GAAKljB,EAAIvZ,KAAKm8B,eACdM,GAAKjjB,EAAIxZ,KAAKm8B,eH0lGR,IGvlGFr9B,GAAW,EAAK29B,EAAKnjB,EAAEmjB,EAAKnjB,EAAMmjB,EAAKljB,EAAEkjB,EAAKljB,EAAMkjB,EAAKjjB,EAAEijB,EAAKjjB,CACpEijB,GAAKrB,EAAIt8B,EAAI,EAAG,GAAKwW,KAAK+lB,KAAKv8B,EAE/B,IAAIkB,KAAK84B,gBAAkB,IAC1B94B,KAAKs8B,eAAe,IAErB,OAAOG,GAMA7E,GAAAr3B,UAAA64B,SAAR,WAGCp5B,KAAKy7B,qBAOE7D,GAAAr3B,UAAAk7B,mBAAR,WAECz7B,KAAKo8B,gBAEL,IAAI9E,GAAYt3B,KAAK07B,aACrB,IAAIgB,GAAa,EAEjB,IAAIpF,GAAM,IACTt3B,KAAKs8B,eAAe,IAErB,GAAG,CACF,GAAIt8B,KAAKw6B,YACRx6B,KAAKu7B,cACNjE,GAAKt3B,KAAK07B,aACV,IAAIpE,GAAM,IACToF,GAAOpF,QACAA,GAAM,IAEf,OAAOoF,GAMA9E,GAAAr3B,UAAAg7B,aAAR,WAEC,KAAM,IAAIh8B,OAAM,0BAOTq4B,GAAAr3B,UAAA+7B,eAAR,SAAuB1T,GAEtB,KAAM,IAAIrpB,OAAM,6BAA+BS,KAAKi4B,MAAQ,GAAK,eAAiBj4B,KAAKk4B,eAAiB,KAAOtP,EAAW,kBAAoB5oB,KAAK44B,UAAUyD,OAAOr8B,KAAKg4B,YAAc,GAAK,gBAMrLJ,GAAAr3B,UAAAk6B,wBAAR,WAEC,KAAM,IAAIl7B,OAAM,4BAA8BS,KAAKi4B,MAAQ,GAAK,eAAiBj4B,KAAKk4B,eAAiB,MAnkB1FN,GAAAqB,cAAuB,YACvBrB,GAAAuB,mBAA4B,aAC5BvB,GAAAyB,iBAA0B,WAC1BzB,GAAA4B,iBAA0B,WAC1B5B,GAAAgC,iBAA0B,WAC1BhC,GAAAkC,8BAAuC,uBAEvClC,GAAAoC,gBAAyB,WACzBpC,GAAAsC,aAAsB,QACtBtC,GAAAwC,iBAA0B,WAC1BxC,GAAA0C,YAAqB,OAErB1C,GAAAmB,cAAuB,IAyjBtC,OAAAnB,IAzkB4B32B,EHgqH5B,IG/kGM86B,GAAa,WAAnB,QAAMA,MAWN,MAAAA,KH4kGA,IGvkGMH,GAAU,WAAhB,QAAMA,MAWN,MAAAA,KHokGA,IG/jGMM,GAAS,WAAf,QAAMA,MAWN,MAAAA,KH4jGA,IGvjGMV,GAAa,WAAnB,QAAMA,MAqBN,MAAAA,KA3EA17B,GAAAJ,QAASk4B,IHqnGN+E,kCAAkC1P,UAAUM,gCAAgCN,UAAUO,0CAA0CP,UAAUS,qCAAqCT,UAAUsF,iDAAiDtF,UAAUyF,oDAAoDzF,UAAU0F,yDAAyD1F,YAAY2P,oCAAoC,SAASh+B,EAAQkB,EAAOJ,GACtb,GAAIK,GAAYC,KAAKD,WAAa,SAAUE,EAAGC,GAC3C,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCI,EAAGE,UAAYL,EAAEK,SACjBN,GAAEM,UAAY,GAAIF,GIntHtB,IAAOI,GAAQ7B,EAAiB,gCAChC,IAAO+B,GAAmB/B,EAAc,2CAExC,IAAO+4B,GAAU/4B,EAAgB,kCACjC,IAAOkC,GAAQlC,EAAiB,gCAChC,IAAOmC,GAAmBnC,EAAc,0CACxC,IAAOqC,GAAUrC,EAAgB,qCAEjC,IAAOgD,GAAsBhD,EAAa,uDAC1C,IAAOqD,GAAIrD,EAAkB,mCAE7B,IAAO0E,GAAoB1E,EAAc,uDACzC,IAAO6E,GAAQ7E,EAAiB,gDAChC,IAAO+E,GAAa/E,EAAe,qDJytHnC,IIhtHMi+B,GAAa,SAAAx2B,GAAStG,EAAtB88B,EAAax2B,EA4ClB,SA5CKw2B,GA4COhF,EAAwCC,GAAxC,GAAAD,QAAA,GAAsC,CAAtCA,EAAA,KAAwC,GAAAC,QAAA,GAAoC,CAApCA,EAAA,EAEnDzxB,EAAA1G,KAAAK,KAAMe,EAAoBg3B,KA1BnB/3B,MAAAg4B,YAA6B,CAE7Bh4B,MAAAi4B,MAAuB,CACvBj4B,MAAAk4B,eAAgC,CAwBvCl4B,MAAKm4B,cAAgB,GAAIR,EAEzB33B,MAAKm4B,cAAcG,cAAcx3B,EAASy3B,QAASjjB,KAAKkjB,GAAG,GAE3D,IAAIX,EAAwB,CAC3B,GAAI4E,GAAkB,GAAI9E,EAC1B8E,GAAKnE,cAAcT,EAAwBC,EAC3C93B,MAAKm4B,cAAcO,SAAS14B,KAAKm4B,cAAesE,IASpCI,EAAA50B,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,UAQP20B,GAAAz0B,aAAd,SAA2BtB,GAE1B,MAAO,OAMD+1B,GAAAt8B,UAAA8J,iBAAP,WAEC,GAAIsuB,EAEJ,KAAK34B,KAAKwG,gBAAiB,CAC1BxG,KAAK44B,UAAY54B,KAAK64B,eACtB74B,MAAKwG,gBAAkB,KAGxB,MAAOxG,KAAKyzB,YAAa,CACxBkF,EAAQ34B,KAAK84B,cACb,QAAQH,GACP,IAAKkE,GAAc9D,cAClB/4B,KAAKg5B,YACL,MACD,KAAK6D,GAAc5D,cAClBj5B,KAAKgI,SAAWhI,KAAKk5B,YACrB,IAAIl5B,KAAKgI,UAAY,GACpB,KAAM,IAAIzI,OAAM,sCACjB,MACD,KAAKs9B,GAAc1D,mBAClBn5B,KAAKo5B,UACL,MACD,KAAKyD,GAAcrD,iBAClBx5B,KAAKy5B,WAAaz5B,KAAKk5B,YACvBl5B,MAAK88B,WAAa,GAAIl2B,OAAgB5G,KAAKy5B,WAC3C,MACD,KAAKoD,GAAcE,iBAClB/8B,KAAKg9B,WAAah9B,KAAKk5B,YACvB,MACD,KAAK2D,GAAcI,aAClBj9B,KAAKk9B,aACL,MACD,KAAKL,GAAcM,WAClBn9B,KAAKo9B,WACL,MACD,SACC,IAAKp9B,KAAKw6B,YACTx6B,KAAKy6B,0BAGR,GAAIz6B,KAAKw6B,YAAa,CACrBx6B,KAAKq9B,wBACLr9B,MAAKmzB,cAAgB,GAAI7vB,GAAqBtD,KAAKs9B,eAEnDt9B,MAAKwzB,MAAQ,GAAIvxB,GAAK,GAAIxB,GAAY,KACtCT,MAAK2zB,UAAY3zB,KAAKwzB,MAAM7N,QAE5B,KAAK,GAAItmB,GAAmB,EAAGA,EAAIW,KAAKu9B,UAAU39B,SAAUP,EAC3DW,KAAK2zB,UAAUha,eAAe3Z,KAAKw9B,cAAcx9B,KAAKu9B,UAAUl+B,GAAGo+B,WAAYz9B,KAAKu9B,UAAUl+B,GAAGq+B,WAAY19B,KAAKu9B,UAAUl+B,GAAGsR,SAMtG3Q,MAAKuL,UAAWgR,SAASvc,KAAKwzB,MAExDxzB,MAAKoJ,gBAAgBpJ,KAAK2zB,UAC1B3zB,MAAKoJ,gBAAgBpJ,KAAKwzB,MAC1BxzB,MAAKoJ,gBAAgBpJ,KAAK29B,UAC1B39B,MAAKoJ,gBAAgBpJ,KAAKmzB,cAC1B,OAAOlyB,GAAWkK,cAGpB,MAAOlK,GAAWmK,cAGZyxB,GAAAt8B,UAAA8K,eAAP,SAAsBC,GAErBjF,EAAA9F,UAAM8K,eAAc1L,KAAAK,KAACsL,EAGrBtL,MAAKuL,UAAY,GAAI3J,GAGdi7B,GAAAt8B,UAAA88B,uBAAR,WAECr9B,KAAKs9B,eAAiB,CAEtB,IAAIM,GAA6B59B,KAAKu9B,UAAU39B,MAChD,KAAK,GAAIP,GAAmB,EAAGA,EAAIu+B,IAAev+B,EAAG,CACpD,GAAIw+B,GAAoB79B,KAAKu9B,UAAUl+B,EACvC,IAAIo+B,GAA+BI,EAASJ,UAC5C,IAAIK,GAA0BL,EAAW79B,MAEzC,KAAK,GAAIiW,GAAmB,EAAGA,EAAIioB,IAAYjoB,EAAG,CACjD,GAAIkoB,GAA6B/9B,KAAKg+B,sBAAsBP,EAAW5nB,GAAIgoB,EAASH,WACpF,IAAIO,GAA6BR,EAAW5nB,GAAGqoB,YAAcH,CAC7D,IAAIE,EAAcj+B,KAAKs9B,eACtBt9B,KAAKs9B,eAAiBW,IAKlBpB,GAAAt8B,UAAAy9B,sBAAR,SAA8BG,EAAmB/kB,GAEhD,GAAIglB,GAAuBD,EAAOE,WAClC,IAAIC,GAAqBH,EAAOE,YAAcF,EAAOD,WACrD,IAAIK,GAAuB,CAC3B,IAAIC,EAEJ,KAAK,GAAIn/B,GAAmB++B,EAAO/+B,EAAIi/B,IAAOj/B,EAAG,CAChDm/B,EAASplB,EAAQ/Z,GAAGo/B,IACpB,IAAID,GAAU,IACXD,EAGJ,MAAOA,GAMA1B,GAAAt8B,UAAA28B,YAAR,WAEC,GAAI5F,EACJ,IAAInT,EACJ,IAAIua,EACJ,IAAIjC,EACJ,IAAIp9B,GAAmB,CACvB,IAAIs5B,GAAe34B,KAAK84B,cAExB,IAAIH,GAAS,IACZ34B,KAAKy6B,yBAENz6B,MAAK29B,UAAY,GAAIl6B,EAErB,GAAG,CACF,GAAIzD,KAAKw6B,YACRx6B,KAAKu7B,cACNpX,GAAQ,GAAIxgB,EACZwgB,GAAMhb,KAAOnJ,KAAKy7B,oBAClBtX,GAAME,YAAcrkB,KAAKk5B,YACzBwF,GAAM1+B,KAAK67B,eACX6C,GAAM1+B,KAAKm4B,cAAcmD,YAAYoD,EACrCjC,GAAOz8B,KAAKg8B,iBAGZh8B,MAAK88B,WAAWz9B,GAAKo9B,EAAKkC,YAC1B3+B,MAAK88B,WAAWz9B,GAAGu/B,kBAAkBF,EAAIplB,EAAGolB,EAAInlB,EAAGmlB,EAAIllB,EACvD,IAAIqlB,GAAe7+B,KAAK88B,WAAWz9B,GAAG+0B,OACtCyK,GAAIC,QACJ3a,GAAMG,gBAAkBua,EAAIrmB,OAE5BxY,MAAK29B,UAAUpZ,OAAOllB,KAAO8kB,CAE7BmT,GAAKt3B,KAAK07B,aAEV,IAAIpE,GAAM,IAAK,CACdt3B,KAAK27B,SACLrE,GAAKt3B,KAAK84B,cACV,IAAIxB,GAAMuF,EAAc9D,cACvB/4B,KAAKg5B,YACN1B,GAAKt3B,KAAK07B,cAIX,GAAIpE,GAAM,IACTt3B,KAAK27B,gBACErE,GAAM,KAMRuF,GAAAt8B,UAAAo7B,QAAR,WAEC37B,KAAKg4B,aACLh4B,MAAKk4B,gBACLl4B,MAAKw6B,YAAcx6B,KAAKg4B,aAAeh4B,KAAK44B,UAAUh5B,OAM/Ci9B,GAAAt8B,UAAA68B,UAAR,WAEC,GAAIzE,GAAe34B,KAAK84B,cACxB,IAAIxB,EACJ,IAAImG,EACJ,IAAIrkB,EACJ,IAAIzI,EAEJ,IAAIgoB,GAAS,IACZ34B,KAAKy6B,yBAEN,IAAIz6B,KAAK++B,UAAY,KACpB/+B,KAAK++B,SAAW,GAAIn4B,MAErB,OAAO0wB,GAAM,IAAK,CACjBA,EAAKt3B,KAAK84B,cACV,QAAQxB,GACP,IAAKuF,GAAc9D,cAClB/4B,KAAKg5B,YACL,MACD,KAAK6D,GAAcmC,kBAClBh/B,KAAK++B,SAAS/3B,KAAKhH,KAAKy7B,qBACxB,MACD,KAAKoB,GAAcoC,qBAClBxB,EAAa,GAAI72B,OAAkB5G,KAAKk5B,aACxC,MACD,KAAK2D,GAAcqC,oBAClBvuB,EAAU,GAAI/J,OAAc5G,KAAKk5B,aAAa,EAC9C,MACD,KAAK2D,GAAcsC,uBAClB/lB,EAAU,GAAIxS,OAAiB5G,KAAKk5B,aACpC,MACD,KAAK2D,GAAcuC,gBAClBp/B,KAAKq/B,YAAY5B,EACjB,MACD,KAAKZ,GAAcyC,eAClBt/B,KAAKu/B,SAAS5uB,EACd,MACD,KAAKksB,GAAc2C,kBAClBx/B,KAAKy/B,WAAWrmB,EAChB,QAIH,GAAIpZ,KAAKu9B,WAAa,KACrBv9B,KAAKu9B,UAAY,GAAI32B,MAEtB,IAAIvH,GAAoBW,KAAKu9B,UAAU39B,MACvCI,MAAKu9B,UAAUl+B,GAAK,GAAIqgC,EACxB1/B,MAAKu9B,UAAUl+B,GAAGo+B,WAAaA,CAC/Bz9B,MAAKu9B,UAAUl+B,GAAGq+B,WAAatkB,CAC/BpZ,MAAKu9B,UAAUl+B,GAAGsR,QAAUA,EAUrBksB,GAAAt8B,UAAAi9B,cAAR,SAAsBC,EAA8BrkB,EAA0BzI,GAE7E,GAAI7E,GAAqB2xB,EAAW79B,MACpC,IAAI+/B,GAAmBC,EAAmBC,CAC1C,IAAI1B,EACJ,IAAIK,EACJ,IAAIsB,EACJ,IAAIpB,EACJ,IAAI9Y,GAA8B,GAAIjlB,GAAoB,KAC1D,IAAIuQ,GAAoB,GAAItK,OAAckF,EAAI,EAC9C,IAAIi0B,GAAyB,GAAIn5B,OAAckF,EAAI,EACnD,IAAIk0B,GAA6B,GAAIp5B,OAAckF,EAAI9L,KAAKs9B,eAC5D,IAAI2C,GAA6B,GAAIr5B,OAAckF,EAAI9L,KAAKs9B,eAC5D,IAAI79B,GAAmB,CACvB,IAAIygC,EAEJ,KAAK,GAAI7gC,GAAmB,EAAGA,EAAIyM,IAAOzM,EAAG,CAC5C8+B,EAASV,EAAWp+B,EACpBsgC,GAAKxB,EAAO5H,MAAM,CAClBqJ,GAAKD,EAAK,CACVE,GAAKF,EAAK,CACVI,GAASJ,GAAMI,EAASH,GAAMG,EAASF,GAAM,CAE7CK,GAAiB,CACjB,KAAK,GAAIrqB,GAAmB,EAAGA,EAAIsoB,EAAOD,cAAeroB,EAAG,CAC3D2oB,EAASplB,EAAQ+kB,EAAOE,YAAcxoB,EACtC,IAAI2oB,EAAOC,KAAO,EAAG,CACpBqB,EAAW9/B,KAAK88B,WAAW0B,EAAOra,MAClCua,GAAMoB,EAASK,gBAAgB3B,EAAOE,IACtCqB,GAASJ,IAAOjB,EAAIplB,EAAEklB,EAAOC,IAC7BsB,GAASH,IAAOlB,EAAInlB,EAAEilB,EAAOC,IAC7BsB,GAASF,IAAOnB,EAAIllB,EAAEglB,EAAOC,IAG7BuB,GAAavgC,GAAK++B,EAAOra,MAAM,CAC/B8b,GAAaxgC,KAAO++B,EAAOC,OACzByB,GAIJ,IAAKrqB,EAAIqqB,EAAgBrqB,EAAI7V,KAAKs9B,iBAAkBznB,EAAG,CACtDmqB,EAAavgC,GAAK,CAClBwgC,GAAaxgC,KAAO,EAGrBkgC,EAAKxB,EAAO5H,OAAS,CACrBrlB,GAAIyuB,KAAQxB,EAAOl/B,CACnBiS,GAAIyuB,GAAMxB,EAAOr/B,EAGlB8mB,EAAQ/L,gBAAkB7Z,KAAKs9B,cAC/B1X,GAAQvU,cAAcV,EACtBiV,GAAQtU,gBAAgByuB,EACxBna,GAAQpU,UAAUN,EAClB0U,GAAQxL,mBAAmB4lB,EAC3Bpa,GAAQzL,mBAAmB8lB,EAE3Bra,GAAQuR,aACRvR,GAAQwR,cAERxR,GAAQ5L,mBAAqB,KAC7B4L,GAAQ9L,kBAAoB,KAE5B,OAAO8L,GAOAiX,GAAAt8B,UAAAg/B,SAAR,SAAiB5uB,GAEhB,GAAI4lB,GAAuBv2B,KAAKk5B,aAAa,CAC7CvoB,GAAQ4lB,GAASv2B,KAAKk5B,YACtBvoB,GAAQ4lB,EAAQ,GAAKv2B,KAAKk5B,YAC1BvoB,GAAQ4lB,EAAQ,GAAKv2B,KAAKk5B,aAOnB2D,GAAAt8B,UAAAk/B,WAAR,SAAmBrmB,GAElB,GAAIolB,GAAmB,GAAI4B,EAC3B5B,GAAOjI,MAAQv2B,KAAKk5B,YACpBsF,GAAOra,MAAQnkB,KAAKk5B,YACpBsF,GAAOC,KAAOz+B,KAAKm8B,eACnBqC,GAAOE,IAAM1+B,KAAK67B,eAClBziB,GAAQolB,EAAOjI,OAASiI,EAOjB3B,GAAAt8B,UAAA8+B,YAAR,SAAoB5B,GAEnB,GAAIU,GAAoB,GAAIkC,EAC5BlC,GAAO5H,MAAQv2B,KAAKk5B,YACpBl5B,MAAK8zB,QAAQqK,EACbA,GAAOE,YAAcr+B,KAAKk5B,YAC1BiF,GAAOD,YAAcl+B,KAAKk5B,YAE1BuE,GAAWU,EAAO5H,OAAS4H,EAOpBtB,GAAAt8B,UAAAuzB,QAAR,SAAgB2J,GAEf,GAAInG,GAAYt3B,KAAK84B,cACrB,IAAIxB,GAAM,IACTt3B,KAAKs8B,eAAe,IACrBmB,GAAWx+B,EAAIe,KAAKm8B,eACpBsB,GAAW3+B,EAAIkB,KAAKm8B,eAEpB,IAAIn8B,KAAK84B,gBAAkB,IAC1B94B,KAAKs8B,eAAe,KAMdO,GAAAt8B,UAAAu4B,aAAR,WAEC,GAAIxB,EACJ,IAAIqB,GAAe,EAEnB,QAAQ34B,KAAKw6B,YAAa,CACzBlD,EAAKt3B,KAAK07B,aACV,IAAIpE,GAAM,KAAOA,GAAM,MAAQA,GAAM,MAAQA,GAAM,IAAM,CACxD,GAAIqB,GAASkE,EAAc9D,cAC1B/4B,KAAKo8B,gBACN,IAAIzD,GAAS,GACZ,MAAOA,OAERA,IAASrB,CAEV,IAAIqB,GAASkE,EAAc9D,cAC1B,MAAOJ,GAGT,MAAOA,GAMAkE,GAAAt8B,UAAA67B,eAAR,WAEC,GAAI9E,EAEJ,GACCA,GAAKt3B,KAAK07B,oBAAsBpE,GAAM,MAAQA,GAAM,KAAOA,GAAM,MAAQA,GAAM,IAEhFt3B,MAAK27B,UAMEkB,GAAAt8B,UAAAy4B,WAAR,WAEC,GAAI1B,EACJ,QAAQt3B,KAAKw6B,aAAelD,GAAM,KACjCA,EAAKt3B,KAAK07B,cAMJmB,GAAAt8B,UAAAm7B,YAAR,WAEC,GAAIpE,GAAYt3B,KAAK44B,UAAUyD,OAAOr8B,KAAKg4B,cAE3C,IAAIV,GAAM,KAAM,GACbt3B,KAAKi4B,KACPj4B,MAAKk4B,eAAiB,MAChB,IAAIZ,GAAM,OACdt3B,KAAKk4B,cAER,IAAIl4B,KAAKg4B,aAAeh4B,KAAK44B,UAAUh5B,OACtCI,KAAKw6B,YAAc,IAEpB,OAAOlD,GAMAuF,GAAAt8B,UAAA24B,WAAR,WAEC,GAAI75B,GAAW8K,SAASnK,KAAK84B,eAC7B,IAAIjN,MAAMxsB,GACTW,KAAKs8B,eAAe,WACrB,OAAOj9B,GAMAw9B,GAAAt8B,UAAA47B,cAAR,WAEC,GAAI78B,GAAWi9B,WAAWv8B,KAAK84B,eAC/B,IAAIjN,MAAMvsB,GACTU,KAAKs8B,eAAe,aACrB,OAAOh9B,GAMAu9B,GAAAt8B,UAAAs7B,cAAR,WAEC,GAAIW,GAAe,GAAI17B,EACvB,IAAIw2B,GAAYt3B,KAAK84B,cAErB,IAAIxB,GAAM,IACTt3B,KAAKs8B,eAAe,IACrBE,GAAIljB,GAAKtZ,KAAKm8B,eACdK,GAAIjjB,EAAIvZ,KAAKm8B,eACbK,GAAIhjB,EAAIxZ,KAAKm8B,eAEb,IAAIn8B,KAAK84B,gBAAkB,IAC1B94B,KAAKs8B,eAAe,IAErB,OAAOE,GAMAK,GAAAt8B,UAAAy7B,gBAAR,WAEC,GAAIS,GAAkB,GAAI9E,EAC1B,IAAIL,GAAYt3B,KAAK84B,cAErB,IAAIxB,GAAM,IACTt3B,KAAKs8B,eAAe,IACrBG,GAAKnjB,EAAItZ,KAAKm8B,eACdM,GAAKljB,GAAKvZ,KAAKm8B,eACfM,GAAKjjB,GAAKxZ,KAAKm8B,eJqlHT,IIllHFr9B,GAAW,EAAI29B,EAAKnjB,EAAEmjB,EAAKnjB,EAAImjB,EAAKljB,EAAEkjB,EAAKljB,EAAIkjB,EAAKjjB,EAAEijB,EAAKjjB,CAC/DijB,GAAKrB,EAAIt8B,EAAI,EAAG,GAAKwW,KAAK+lB,KAAKv8B,EAE/B,IAAIkB,KAAK84B,gBAAkB,IAC1B94B,KAAKs8B,eAAe,IAErB,IAAIgE,GAAqB,GAAI3I,EAC7B2I,GAAQ5H,SAAS14B,KAAKm4B,cAAesE,EACrC,OAAO6D,GAMAzD,GAAAt8B,UAAA64B,SAAR,WAGCp5B,KAAKy7B,qBAOEoB,GAAAt8B,UAAAk7B,mBAAR,WAECz7B,KAAKo8B,gBAEL,IAAI9E,GAAYt3B,KAAK07B,aACrB,IAAIgB,GAAa,EAEjB,IAAIpF,GAAM,IACTt3B,KAAKs8B,eAAe,IAErB,GAAG,CACF,GAAIt8B,KAAKw6B,YACRx6B,KAAKu7B,cACNjE,GAAKt3B,KAAK07B,aACV,IAAIpE,GAAM,IACToF,GAAOpF,QACAA,GAAM,IAEf,OAAOoF,GAMAG,GAAAt8B,UAAAg7B,aAAR,WAEC,KAAM,IAAIh8B,OAAM,0BAOTs9B,GAAAt8B,UAAA+7B,eAAR,SAAuB1T,GAEtB,KAAM,IAAIrpB,OAAM,6BAA+BS,KAAKi4B,MAAQ,GAAK,eAAiBj4B,KAAKk4B,eAAiB,KAAOtP,EAAW,kBAAoB5oB,KAAK44B,UAAUyD,OAAOr8B,KAAKg4B,YAAc,GAAK,gBAMrL6E,GAAAt8B,UAAAk6B,wBAAR,WAEC,KAAM,IAAIl7B,OAAM,4BAA8BS,KAAKi4B,MAAQ,GAAK,eAAiBj4B,KAAKk4B,eAAiB,MApnB1F2E,GAAA5D,cAAuB,YACvB4D,GAAA1D,mBAA4B,aAC5B0D,GAAArD,iBAA0B,WAC1BqD,GAAAE,iBAA0B,WAC1BF,GAAA9D,cAAuB,IACvB8D,GAAAI,aAAsB,QACtBJ,GAAAM,WAAoB,MAEpBN,GAAAmC,kBAA2B,QAC3BnC,GAAAoC,qBAA8B,UAC9BpC,GAAAuC,gBAAyB,MACzBvC,GAAAqC,oBAA6B,SAC7BrC,GAAAyC,eAAwB,KACxBzC,GAAAsC,uBAAgC,YAChCtC,GAAA2C,kBAA2B,QAwmB1C,OAAA3C,IA1nB4B57B,EA+nB5B,IAAMo/B,GAAU,WAAhB,QAAMA,MAON,MAAAA,KAEA,IAAMD,GAAS,WAAf,QAAMA,MAMN,MAAAA,KAEA,IAAMV,GAAQ,WAAd,QAAMA,MAKN,MAAAA,KAzBA5/B,GAAAJ,QAASm9B,IJkmHN1P,gCAAgCF,UAAUG,2CAA2CH,UAAU0P,kCAAkC1P,UAAUM,gCAAgCN,UAAUO,0CAA0CP,UAAUS,qCAAqCT,UAAUqB,uDAAuDrB,UAAUyB,mCAAmCzB,UAAUkF,uDAAuDlF,UAAUuF,gDAAgDvF,UAAUwF,qDAAqDxF,YAAYsT,mCAAmC,SAAS3hC,EAAQkB,EAAOJ,GAChoB,GAAIK,GAAYC,KAAKD,WAAa,SAAUE,EAAGC,GAC3C,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCI,EAAGE,UAAYL,EAAEK,SACjBN,GAAEM,UAAY,GAAIF,GKzvItB,IAAOI,GAAQ7B,EAAiB,gCAChC,IAAO+B,GAAmB/B,EAAc,2CACxC,IAAOiC,GAAQjC,EAAiB,gCAChC,IAAOkC,GAAQlC,EAAiB,gCAEhC,IAAOmC,GAAmBnC,EAAc,0CACxC,IAAOoC,GAAUpC,EAAgB,iCACjC,IAAOqC,GAAUrC,EAAgB,qCACjC,IAAOsC,GAAWtC,EAAgB,sCAGlC,IAAO6C,GAAW7C,EAAgB,uCAGlC,IAAOgD,GAAsBhD,EAAa,uDAC1C,IAAOqD,GAAIrD,EAAkB,mCAC7B,IAAOyD,GAAsBzD,EAAa,qDAG1C,IAAOmF,GAAcnF,EAAe,4CACpC,IAAOkF,GAAkBlF,EAAc,gDLwvIvC,IKnvIM4hC,GAAY,SAAAn6B,GAAStG,EAArBygC,EAAYn6B,EAoBjB,SApBKm6B,GAoBOC,GAAA,GAAAA,QAAA,GAAiC,CAAjCA,EAAA,KAEXp6B,EAAA1G,KAAAK,KAAMe,EAAoBuF,aAE1BtG,MAAK0gC,oBAAsBD,EAQdD,EAAAv4B,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQPs4B,GAAAp4B,aAAd,SAA2BtB,GAE1B,GAAI65B,EAEJA,GAAKz/B,EAAY0/B,YAAY95B,EAC7B,IAAI65B,EAAI,CACPA,EAAGtzB,SAAW,CACd,IAAIszB,EAAGniB,aAAe,MACrB,MAAO,MAGT,MAAO,OAMDgiB,GAAAjgC,UAAA+H,oBAAP,SAA2BC,GAE1B,GAAIA,EAAmBC,OAAO5I,QAAU,EAAG,CAC1C,GAAIiJ,EAEJA,GAAQN,EAAmBC,OAAO,EAClC,IAAIK,EAAMg4B,QAAQp/B,GAAc,CAC/B,GAAIq/B,EAEJA,GAAM9gC,KAAK+gC,UAAUx4B,EAAmBG,GACxCo4B,GAAIlgB,QAA0B/X,IAQ1B23B,GAAAjgC,UAAAyJ,2BAAP,SAAkCzB,IAQ3Bi4B,GAAAjgC,UAAA8J,iBAAP,WAEC,IAAKrK,KAAKsK,UAAW,CACpBtK,KAAKsK,UAAYtK,KAAKuK,eACtBvK,MAAKsK,UAAU+C,SAAW,CAQ1BrN,MAAK+gC,YACL/gC,MAAKghC,aACLhhC,MAAKihC,wBAQN,MAAOjhC,KAAKyzB,YAAa,CAIxB,GAAIzzB,KAAKkhC,UAAYlhC,KAAKsK,UAAU+C,UAAYrN,KAAKmhC,aACpDnhC,KAAKohC,8BACD,IAAIphC,KAAKqhC,UAAYrhC,KAAKsK,UAAU+C,UAAYrN,KAAKshC,aAAc,CAGvEthC,KAAKihC,qBAAqBjhC,KAAKqhC,SAASl4B,MAAQnJ,KAAKqhC,QACrDrhC,MAAKshC,aAAeC,OAAOC,SAC3BxhC,MAAKqhC,SAAW,KAGjB,GAAIrhC,KAAKsK,UAAUS,oBAAsB,EAAG,CAC3C,GAAI02B,EACJ,IAAI31B,EACJ,IAAIwyB,EAEJmD,GAAMzhC,KAAKsK,UAAUsG,mBACrB9E,GAAM9L,KAAKsK,UAAU0B,iBACrBsyB,GAAMt+B,KAAKsK,UAAU+C,UAAYvB,EAAM,EAEvC,QAAQ21B,GACP,IAAK,OACL,IAAK,OACL,IAAK,OAMJ,QACA,MAED,KAAK,OACJzhC,KAAKmhC,aAAe7C,CACpBt+B,MAAKkhC,SAAWlhC,KAAKiP,eACrB,MAED,KAAK,OACJjP,KAAKshC,aAAehD,CACpBt+B,MAAKqhC,SAAW,GAAIK,EACpB1hC,MAAKqhC,SAASl4B,KAAOnJ,KAAK2hC,mBAC1B3hC,MAAKqhC,SAASrsB,UAAY,GAAIpO,MAC9B5G,MAAKqhC,SAASO,gBACd,MAED,KAAK,OACJ5hC,KAAKqhC,SAASz1B,KAAO3J,EAAK8P,SAC1B,MAED,KAAK,OACJ/R,KAAK6hC,iBACL,MAED,KAAK,OACJ7hC,KAAK8hC,eACL,MAED,KAAK,OACJ9hC,KAAK+hC,aACL,MAED,KAAK,OACJ/hC,KAAKgiC,uBACL,MAED,KAAK,OACJhiC,KAAKqhC,SAASllB,UAAYnc,KAAKiiC,eAC/B,MAED,KAAK,OACJjiC,KAAKkiC,qBAAqB5D,EAC1B,MAED,KAAK,OACJt+B,KAAKmiC,sBACL,MAED,SAECniC,KAAKsK,UAAU+C,UAAavB,EAAM,CAClC,OAMF,GAAI9L,KAAK21B,aAAa/1B,OAAQ,CAC7BI,KAAK2V,gCACL,SAQH,GAAI3V,KAAKsK,UAAUS,qBAAuB/K,KAAKqhC,UAAYrhC,KAAKkhC,SAAU,CACzE,MAAOjgC,GAAWmK,kBACZ,CACN,GAAIjC,EAGJ,KAAKA,IAAQnJ,MAAKihC,qBAAsB,CACvC,GAAI3kB,EACJA,GAAMtc,KAAKoiC,gBAAgBpiC,KAAKihC,qBAAqB93B,GACrD,IAAImT,EAAK,CAEkBtc,KAAKuL,UAAWgR,SAASD,EAEnDtc,MAAKoJ,gBAAgBkT,EAAKnT,IAI5B,MAAOlI,GAAWkK,cAIbq1B,GAAAjgC,UAAA8K,eAAP,SAAsBC,GAErBjF,EAAA9F,UAAM8K,eAAc1L,KAAAK,KAACsL,EAGrBtL,MAAKuL,UAAY,GAAI3J,GAGd4+B,GAAAjgC,UAAA0O,cAAR,WAEC,GAAIjG,EAEJA,GAAM,GAAIq5B,EAEV,OAAOriC,KAAKsK,UAAU+C,SAAWrN,KAAKmhC,aAAc,CACnD,GAAIM,EACJ,IAAI31B,EACJ,IAAIwyB,EAEJmD,GAAMzhC,KAAKsK,UAAUsG,mBACrB9E,GAAM9L,KAAKsK,UAAU0B,iBACrBsyB,GAAMt+B,KAAKsK,UAAU+C,UAAYvB,EAAM,EAEvC,QAAQ21B,GACP,IAAK,OACJz4B,EAAIG,KAAOnJ,KAAK2hC,mBAChB,MAED,KAAK,OACJ34B,EAAImV,aAAene,KAAKsiC,WACxB,MAED,KAAK,OACJt5B,EAAIyY,aAAezhB,KAAKsiC,WACxB,MAED,KAAK,OACJt5B,EAAI2Y,cAAgB3hB,KAAKsiC,WACzB,MAED,KAAK,OACJt5B,EAAIu5B,SAAW,IACf,MAED,KAAK,OACJv5B,EAAIw5B,SAAWxiC,KAAKkP,aAAaovB,EACjC,MAED,KAAK,OACJt1B,EAAIwY,YAAcxhB,KAAKkP,aAAaovB,EACpC,MAED,SACCt+B,KAAKsK,UAAU+C,SAAWixB,CAC1B,QAIH,MAAOt1B,GAGAw3B,GAAAjgC,UAAA2O,aAAR,SAAqBovB,GAEpB,GAAIwC,EAEJA,GAAM,GAAI2B,EAEV,OAAOziC,KAAKsK,UAAU+C,SAAWixB,EAAK,CACrC,GAAImD,EACJ,IAAI31B,EAEJ21B,GAAMzhC,KAAKsK,UAAUsG,mBACrB9E,GAAM9L,KAAKsK,UAAU0B,iBAErB,QAAQy1B,GACP,IAAK,OACJX,EAAIrrB,IAAMzV,KAAK2hC,mBACf,MAED,SAEC3hC,KAAKsK,UAAU+C,UAAavB,EAAM,CAClC,QAIH9L,KAAK+gC,UAAUD,EAAIrrB,KAAOqrB,CAC1B9gC,MAAKijB,gBAAgB6d,EAAIrrB,IAAK,GAAIzU,GAAW8/B,EAAIrrB,KAEjD,OAAOqrB,GAGAN,GAAAjgC,UAAAshC,gBAAR,WAEC,GAAIxiC,EACJ,IAAIyM,EACJ,IAAIyyB,EAEJA,GAAQv+B,KAAKsK,UAAUsG,mBACvB5Q,MAAKqhC,SAAS5nB,MAAQ,GAAI7S,OAAc23B,EAAM,EAE9Cl/B,GAAI,CACJyM,GAAM9L,KAAKqhC,SAAS5nB,MAAM7Z,MAC1B,OAAOP,EAAIyM,EAAK,CACf,GAAIwN,GAAUC,EAAUC,CAExBF,GAAItZ,KAAKsK,UAAUuI,WACnB0G,GAAIvZ,KAAKsK,UAAUuI,WACnB2G,GAAIxZ,KAAKsK,UAAUuI,WAEnB7S,MAAKqhC,SAAS5nB,MAAMpa,KAAOia,CAC3BtZ,MAAKqhC,SAAS5nB,MAAMpa,KAAOma,CAC3BxZ,MAAKqhC,SAAS5nB,MAAMpa,KAAOka,GAIrBinB,GAAAjgC,UAAAuhC,cAAR,WAEC,GAAIziC,EACJ,IAAIyM,EACJ,IAAIyyB,EAEJA,GAAQv+B,KAAKsK,UAAUsG,mBACvB5Q,MAAKqhC,SAAS1wB,QAAU,GAAI/J,OAAc23B,EAAM,EAEhDl/B,GAAI,CACJyM,GAAM9L,KAAKqhC,SAAS1wB,QAAQ/Q,MAC5B,OAAOP,EAAIyM,EAAK,CACf,GAAI42B,GAAoBC,EAAoBC,CAE5CF,GAAK1iC,KAAKsK,UAAUsG,mBACpB+xB,GAAK3iC,KAAKsK,UAAUsG,mBACpBgyB,GAAK5iC,KAAKsK,UAAUsG,mBAEpB5Q,MAAKqhC,SAAS1wB,QAAQtR,KAAOqjC,CAC7B1iC,MAAKqhC,SAAS1wB,QAAQtR,KAAOujC,CAC7B5iC,MAAKqhC,SAAS1wB,QAAQtR,KAAOsjC,CAG7B3iC,MAAKsK,UAAU+C,UAAY,EAG5BrN,KAAKqhC,SAASwB,gBAAkB,GAAIj8B,OAAc23B,GAG3CiC,GAAAjgC,UAAA4hC,qBAAR,WAEC,GAAIr2B,GAAsB9L,KAAKqhC,SAAS1wB,QAAQ/Q,OAAO,CACvD,IAAIP,GAAoB,CACxB,OAAOA,EAAIyM,EAAK,CACf9L,KAAKqhC,SAASwB,gBAAgBxjC,GAAKW,KAAKsK,UAAU0B,iBAClD3M,MAIMmhC,GAAAjgC,UAAAwhC,YAAR,WAEC,GAAI1iC,EACJ,IAAIyM,EACJ,IAAIyyB,EAEJA,GAAQv+B,KAAKsK,UAAUsG,mBACvB5Q,MAAKqhC,SAASnwB,IAAM,GAAItK,OAAc23B,EAAM,EAE5Cl/B,GAAI,CACJyM,GAAM9L,KAAKqhC,SAASnwB,IAAItR,MACxB,OAAOP,EAAIyM,EAAK,CACf9L,KAAKqhC,SAASnwB,IAAI7R,KAAOW,KAAKsK,UAAUuI,WACxC7S,MAAKqhC,SAASnwB,IAAI7R,KAAO,EAAMW,KAAKsK,UAAUuI,aAIxC2tB,GAAAjgC,UAAAyhC,sBAAR,WAEC,GAAIh5B,EACJ,IAAIu1B,EACJ,IAAIl/B,EACJ,IAAIyjC,EAEJ95B,GAAMhJ,KAAK2hC,mBACXpD,GAAQv+B,KAAKsK,UAAUsG,mBAEvBkyB,GAAQ,GAAIl8B,OAAc23B,EAC1Bl/B,GAAI,CACJ,OAAOA,EAAIyjC,EAAMljC,OAChBkjC,EAAMzjC,KAAOW,KAAKsK,UAAUsG,mBAE7B5Q,MAAKqhC,SAASrsB,UAAUhO,KAAKgC,EAC7BhJ,MAAKqhC,SAASO,cAAc54B,GAAO85B,EAG5BtC,GAAAjgC,UAAA2hC,qBAAR,SAA6B5D,GAE5B,GAAIyE,EACJ;GAAIzmB,EACJ,IAAIE,EACJ,IAAIrT,EACJ,IAAI65B,EAGJxmB,GAAQ,GAAI1b,EAEZ,OAAOd,KAAKsK,UAAU+C,SAAWixB,EAAK,CACrC,GAAImD,EACJ,IAAI31B,EAEJ21B,GAAMzhC,KAAKsK,UAAUsG,mBACrB9E,GAAM9L,KAAKsK,UAAU0B,iBAErB,QAAQy1B,GACP,IAAK,OACJt4B,EAAOnJ,KAAK2hC,mBACZ3hC,MAAKsK,UAAU+C,UAAY,CAC3B21B,GAAOhjC,KAAKsK,UAAUkU,WACtB,MAED,KAAK,OACJhC,EAAMlD,EAAItZ,KAAKsK,UAAUuI,WACzB2J,GAAMhD,EAAIxZ,KAAKsK,UAAUuI,WACzB2J,GAAMjD,EAAIvZ,KAAKsK,UAAUuI,WACzB,MAED,SACC7S,KAAKsK,UAAU+C,UAAavB,EAAM,CAClC,QAOH,GAAI3C,GAAQ,YAAcnJ,KAAKihC,qBAAqB7gC,eAAe+I,GAAO,CACzE45B,EAAK/iC,KAAKihC,qBAAqB93B,EAC/BmT,GAAMtc,KAAKoiC,gBAAgBW,EAAIvmB,EAE/B,IAAIF,EAAK,CAEkBtc,KAAKuL,UAAWgR,SAASD,EAEnDtc,MAAKoJ,gBAAgBkT,EAAKymB,EAAG55B,YAIvBnJ,MAAKihC,qBAAqB93B,IAI3Bq3B,GAAAjgC,UAAA6hC,gBAAR,SAAwB9lB,EAAcE,GAAA,GAAAA,QAAA,GAAqB,CAArBA,EAAA,KAErC,GAAIF,EAAI1Q,MAAQ3J,EAAK8P,UAAW,CAC/B,GAAI1S,EACJ,IAAI4jC,EACJ,IAAIpuB,EACJ,IAAI7L,EACJ,IAAIoM,EACJ,IAAI0G,EACJ,IAAIikB,EACJ,IAAI+C,EAEJ,IAAIxmB,EAAItH,UAAUpV,OAAS,EAC1ByJ,QAAQC,IAAI,oFAGb,KAAKgT,EAAI3L,SAAW2L,EAAI3L,QAAQ/Q,QAAU,EACzC,MAAO,KAERmgC,GAAW,GAAIn5B,OAAgB0V,EAAI7C,MAAM7Z,OAAO,EAChDkjC,GAAQ,GAAIl8B,OAAc0V,EAAI3L,QAAQ/Q,OAAO,EAE7CI,MAAKkjC,YAAYnD,EAAU+C,EAAOxmB,EAElC,IAAItc,KAAK0gC,oBACR1gC,KAAKmjC,kBAAkBpD,EAAU+C,EAElCxmB,GAAI7C,MAAQ,GAAI7S,OAAcm5B,EAASngC,OAAO,EAC9C,KAAKP,EAAI,EAAGA,EAAI0gC,EAASngC,OAAQP,IAAK,CACrCid,EAAI7C,MAAMpa,EAAE,GAAK0gC,EAAS1gC,GAAGia,CAC7BgD,GAAI7C,MAAMpa,EAAE,EAAI,GAAK0gC,EAAS1gC,GAAGka,CACjC+C,GAAI7C,MAAMpa,EAAE,EAAI,GAAK0gC,EAAS1gC,GAAGma,EAElC8C,EAAI3L,QAAU,GAAI/J,OAAck8B,EAAMljC,OAAO,EAE7C,KAAKP,EAAI,EAAGA,EAAIyjC,EAAMljC,OAAQP,IAAK,CAClCid,EAAI3L,QAAQtR,EAAE,GAAKyjC,EAAMzjC,GAAGD,CAC5Bkd,GAAI3L,QAAQtR,EAAE,EAAI,GAAKyjC,EAAMzjC,GAAGa,CAChCoc,GAAI3L,QAAQtR,EAAE,EAAI,GAAKyjC,EAAMzjC,GAAGmM,EAGjC,GAAI8Q,EAAIpL,IAAK,CAIZoL,EAAIpL,IAAM,GAAItK,OAAcm5B,EAASngC,OAAO,EAC5C,KAAKP,EAAI,EAAGA,EAAI0gC,EAASngC,OAAQP,IAAK,CACrCid,EAAIpL,IAAI7R,EAAE,GAAK0gC,EAAS1gC,GAAGF,CAC3Bmd,GAAIpL,IAAI7R,EAAE,EAAI,GAAK0gC,EAAS1gC,GAAG+jC,GAIjCvuB,EAAO,GAAIpU,EAIXwiC,GAAM,GAAItiC,GAAoB,KAC9BsiC,GAAI5xB,cAAciL,EAAI3L,QACtBsyB,GAAI3xB,gBAAgBgL,EAAI7C,MACxBwpB,GAAIzxB,UAAU8K,EAAIpL,IAElB2D,GAAK8E,eAAespB,EAEpB,IAAI3mB,EAAItH,UAAUpV,OAAS,EAAG,CAC7B,GAAIyjC,EACJA,GAAQ/mB,EAAItH,UAAU,EACtBhM,GAAMhJ,KAAKghC,WAAWqC,GAAO3vB,SAK9B,GAAI8I,EAAO,CACV,GAAIF,EAAIH,UAAW,CL2mIH,GKxmIXmnB,GAAoBhnB,EAAIH,UAAUonB,QACtCD,GAAI,IAAM,CACVA,GAAI,IAAM,CACVA,GAAI,IAAM,CACVxnB,GAAM,GAAIjb,GAASyiC,EACnB9mB,GAAQV,EAAIqkB,gBAAgB3jB,GAG7BA,EAAMgnB,SAAS,EAEf1nB,GAAM,GAAIjb,EACVib,GAAI8iB,kBAAkBpiB,EAAMlD,EAAGkD,EAAMjD,EAAGiD,EAAMhD,EAC9C3E,GAAK4uB,oBAAoB3nB,GAK1B,GAAIQ,EAAIH,UAAW,CAClBL,EAAM,GAAIjb,GAASyb,EAAIH,UACvBL,GAAIgjB,QACJjqB,GAAK4uB,oBAAoB3nB,GAK1B9b,KAAKoJ,gBAAgByL,EAAMyH,EAAInT,KAAKo6B,OAAO,SAG3CnuB,GAAO,GAAInT,GAAK4S,EAAM7L,EACtBoM,GAAK+G,UAAUC,SAAW,GAAIvb,GAASyb,EAAIH,UAC3C,OAAO/G,GAIR,MAAO,MAGAorB,GAAAjgC,UAAA2iC,YAAR,SAAoBnD,EAA0B+C,EAAqBxmB,GLmmI5D,GKhmIFjd,EACJ,IAAIwW,EACJ,IAAIC,EACJ,IAAIhK,GAAqBwQ,EAAI7C,MAAM7Z,MACnC,KAAKP,EAAI,EAAGwW,EAAI,EAAGC,EAAI,EAAGzW,EAAIyM,GAAM,CACnC,GAAIs3B,GAAa,GAAIM,EACrBN,GAAE9pB,EAAIgD,EAAI7C,MAAMpa,IAChB+jC,GAAE7pB,EAAI+C,EAAI7C,MAAMpa,IAChB+jC,GAAE5pB,EAAI8C,EAAI7C,MAAMpa,IAChB,IAAIid,EAAIpL,IAAK,CACZkyB,EAAEjkC,EAAImd,EAAIpL,IAAI2E,IACdutB,GAAEA,EAAI9mB,EAAIpL,IAAI2E,KAEfkqB,EAASjqB,KAAOstB,EAEjBt3B,EAAMwQ,EAAI3L,QAAQ/Q,MAClB,KAAKP,EAAI,EAAGyW,EAAI,EAAGzW,EAAIyM,GAAM,CAC5B,GAAIxM,GAAW,GAAIqkC,EACnBrkC,GAAEF,EAAIkd,EAAI3L,QAAQtR,IAClBC,GAAEY,EAAIoc,EAAI3L,QAAQtR,IAClBC,GAAEkM,EAAI8Q,EAAI3L,QAAQtR,IAClBC,GAAEskC,YAActnB,EAAIumB,gBAAgB/sB,IAAM,CAC1CgtB,GAAMhtB,KAAOxW,GAIPkhC,GAAAjgC,UAAA4iC,kBAAR,SAA0BpD,EAA0B+C,GAMnD,GAAIzjC,EACJ,IAAIwW,EACJ,IAAIC,EACJ,IAAIrW,EACJ,IAAIqM,EACJ,IAAIgyB,GAA2BiC,EAASngC,MACxC,IAAIikC,GAA2Bf,EAAMljC,ML+lI/B,IK5lIFkkC,GAAwC,GAAIl9B,OAAqBk3B,EACrE,KAAKz+B,EAAI,EAAGA,EAAIy+B,EAAUz+B,IACzBykC,EAAQzkC,GAAK,GAAIuH,MAClB,KAAKvH,EAAI,EAAGA,EAAIwkC,EAAUxkC,IAAK,CAC9B,GAAI0kC,GAAcjB,EAAMzjC,EACxB,KAAKwW,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvB,GAAImuB,GAAgCF,EAASjuB,GAAK,EAAIkuB,EAAK3kC,EAAMyW,GAAK,EAAIkuB,EAAK7jC,EAAI6jC,EAAKv4B,EACxF,IAAIy4B,GAAwBF,EAAKH,WACjC,KAAK9tB,EAAIkuB,EAAOpkC,OAAS,EAAGkW,GAAK,EAAGA,IAAK,CACxC,IAAKmuB,EAAQD,EAAOluB,IAAM,EAAG,CAC5BmuB,GAASD,EAAOluB,EAChBkuB,GAAOE,OAAOpuB,EAAG,EACjBA,GAAIkuB,EAAOpkC,OAAS,GAGtBokC,EAAOh9B,KAAKi9B,ILgmIR,GK5lIFE,GAAwC,GAAIv9B,OAAqBk3B,EACrE,KAAKz+B,EAAI,EAAGA,EAAIy+B,EAAUz+B,IAAK,CAC9B,IAAKyM,EAAMg4B,EAAQzkC,GAAGO,QAAU,EAC/B,QACD,IAAIwkC,GAAgC,GAAIx9B,OAAckF,EACtDq4B,GAAQ9kC,GAAK+kC,CACbA,GAAO,GAAK/kC,CACZ,IAAIglC,GAActE,EAAS1gC,EAC3B,KAAKwW,EAAI,EAAGA,EAAI/J,EAAK+J,IAAK,CACzB,GAAI8pB,GAAc,GAAI+D,EACtB/D,GAAGrmB,EAAI+qB,EAAG/qB,CACVqmB,GAAGpmB,EAAI8qB,EAAG9qB,CACVomB,GAAGnmB,EAAI6qB,EAAG7qB,CACVmmB,GAAGxgC,EAAIklC,EAAGllC,CACVwgC,GAAGyD,EAAIiB,EAAGjB,CACVgB,GAAOvuB,GAAKkqB,EAASngC,MACrBmgC,GAAS/4B,KAAK24B,IAGhB7B,EAAWiC,EAASngC,MAEpB,KAAKP,EAAI,EAAGA,EAAIwkC,EAAUxkC,IAAK,CAC9B0kC,EAAOjB,EAAMzjC,EACb4kC,GAAQF,EAAKH,WACb,KAAK/tB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvBC,EAAKD,GAAK,EAAIkuB,EAAK3kC,EAAMyW,GAAK,EAAIkuB,EAAK7jC,EAAI6jC,EAAKv4B,CAChDw4B,GAASF,EAAQhuB,EACjBhK,GAAMk4B,EAAOpkC,MACbwkC,GAASD,EAAQruB,EACjB,KAAKrW,EAAI,EAAGA,EAAIqM,EAAKrM,IAAK,CACzB,GAAMwkC,GAAS,GAAOD,EAAOvkC,IAAM,IAASwkC,EAAQD,EAAOvkC,IAAM,EAAI,CACpE,GAAI82B,GAAwB6N,EAAO3kC,EACnC,IAAIwkC,GAAS,EAAG,CAEfD,EAAOE,OAAOzkC,EAAG,EACjB2kC,GAAOF,OAAOzkC,EAAG,GAElB,GAAIoW,GAAK,EACRkuB,EAAK3kC,EAAIm3B,MAAY,IAAI1gB,GAAK,EAC9BkuB,EAAK7jC,EAAIq2B,MACTwN,GAAKv4B,EAAI+qB,CACV92B,GAAIqM,MAOD00B,GAAAjgC,UAAA6gC,wBAAR,WAEC,GAAIp4B,EAEJ,IAAIhJ,KAAKkhC,SAASsB,SACjBx5B,EAAM,GAAIjF,GAAe/D,KAAKkhC,SAASsB,SAAS5hB,SAAWve,EAAuBygB,yBAElF9Z,GAAM,GAAIjF,GAAe/D,KAAKkhC,SAAS/iB,aAExCnV,GAAIyY,aAAezhB,KAAKkhC,SAASzf,YACjCzY,GAAI2Y,cAAgB3hB,KAAKkhC,SAASvf,aAElC,IAAI3hB,KAAK2f,cAAgB,EACxB3W,EAAI4W,KAAO9b,EAAmB+b,UAE/B7W,GAAIwJ,UAAYxS,KAAKkhC,SAASqB,QAE9BviC,MAAKoJ,gBAAgBJ,EAAKhJ,KAAKkhC,SAAS/3B,KAExCnJ,MAAKghC,WAAWhhC,KAAKkhC,SAAS/3B,MAAQnJ,KAAKkhC,QAC3ClhC,MAAKkhC,SAASxtB,SAAW1K,CAEzBhJ,MAAKkhC,SAAW,KAGTV,GAAAjgC,UAAAohC,kBAAR,WAEC,GAAI2C,EACJ,IAAI5H,GAAa,EAEjB,QAAQ4H,EAAMtkC,KAAKsK,UAAU2B,oBAAsB,EAClDywB,GAAOlF,OAAOC,aAAa6M,EAE5B,OAAO5H,GAGA8D,GAAAjgC,UAAA0hC,cAAR,WAEC,GAAIn7B,EAEJA,GAAO,GAAIF,OAAc,GAGzBE,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,GAAK,CAGVA,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,IAAM9G,KAAKsK,UAAUuI,WAC1B/L,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,IAAM,CAGXA,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,GAAK9G,KAAKsK,UAAUuI,WACzB/L,GAAK,GAAK,CAGVA,GAAK,IAAM9G,KAAKsK,UAAUuI,WAC1B/L,GAAK,IAAM9G,KAAKsK,UAAUuI,WAC1B/L,GAAK,IAAM9G,KAAKsK,UAAUuI,WAC1B/L,GAAK,IAAM,CAEX,OAAOA,GAGA05B,GAAAjgC,UAAA+hC,UAAR,WAEC,GAAIb,EACJ,IAAI31B,EACJ,IAAI9M,GAAkBulC,EAAkBrkC,CAExCuhC,GAAMzhC,KAAKsK,UAAUsG,mBACrB9E,GAAM9L,KAAKsK,UAAU0B,iBAErB,QAAQy1B,GACP,IAAK,IACJziC,EAAIgB,KAAKsK,UAAUuI,YAAY,GAC/B0xB,GAAIvkC,KAAKsK,UAAUuI,YAAY,GAC/B3S,GAAIF,KAAKsK,UAAUuI,YAAY,GAC/B,MACD,KAAK,IACJ7T,EAAIgB,KAAKsK,UAAU2B,kBACnBs4B,GAAIvkC,KAAKsK,UAAU2B,kBACnB/L,GAAIF,KAAKsK,UAAU2B,kBACnB,MACD,SACCjM,KAAKsK,UAAU+C,UAAavB,EAAM,CAClC,OAGF,MAAQ9M,IAAK,GAAOulC,GAAK,EAAKrkC,EAEhC,OAAAsgC,IA1xB2Bv/B,ELk2J3B,IKjkIM0iC,GAAM,WAAZ,QAAMA,MAMN,MAAAA,KLmkIA,IK9jIMtB,GAAU,WAAhB,QAAMA,MAUN,MAAAA,KL4jIA,IKvjIMX,GAAQ,WAAd,QAAMA,MAcN,MAAAA,KLijIA,IK5iIMe,GAAS,WAAf,QAAMA,MAIN,MAAAA,KLgjIA,IK3iIMiB,GAAQ,WAAd,QAAMA,MASN,MAAAA,KApEA5jC,GAAAJ,QAAS8gC,IL8mINrT,gCAAgCF,UAAUG,2CAA2CH,UAAUK,gCAAgCL,UAAUM,gCAAgCN,UAAUO,0CAA0CP,UAAUQ,iCAAiCR,UAAUS,qCAAqCT,UAAUU,sCAAsCV,UAAUiB,uCAAuCjB,UAAUqB,uDAAuDrB,UAAUyB,mCAAmCzB,UAAU6B,qDAAqD7B,UAAU+C,4CAA4C/C,UAAUgD,gDAAgDhD,YAAYuX,gCAAgC,SAAS5lC,EAAQkB,EAAOJ,GAC5vB,GAAIK,GAAYC,KAAKD,WAAa,SAAUE,EAAGC,GAC3C,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCI,EAAGE,UAAYL,EAAEK,SACjBN,GAAEM,UAAY,GAAIF,GMx6JtB,IAAOM,GAAmB/B,EAAc,2CACxC,IAAO6B,GAAQ7B,EAAiB,gCAKhC,IAAOmC,GAAmBnC,EAAc,0CACxC,IAAOoC,GAAUpC,EAAgB,iCACjC,IAAOqC,GAAUrC,EAAgB,qCACjC,IAAOsC,GAAWtC,EAAgB,sCAGlC,IAAO6C,GAAW7C,EAAgB,uCAElC,IAAOgD,GAAsBhD,EAAa,uDAC1C,IAAOqD,GAAIrD,EAAkB,mCAC7B,IAAOyD,GAAsBzD,EAAa,qDAG1C,IAAOmF,GAAcnF,EAAe,4CACpC,IAAOkF,GAAkBlF,EAAc,gDACvC,IAAO6lC,GAAmB7lC,EAAc,yDNq6JxC,IMh6JM8lC,GAAS,SAAAr+B,GAAStG,EAAlB2kC,EAASr+B,EAgCd,SAhCKq+B,GAgCOC,GAAA,GAAAA,QAAA,GAAgB,CAAhBA,EAAA,EAEXt+B,EAAA1G,KAAAK,KAAMe,EAAoBg3B,KAVnB/3B,MAAA4kC,cAAwB,IACxB5kC,MAAA6kC,kBAA2B,EAUlC7kC,MAAK8kC,OAASH,EAOfzR,OAAA6R,eAAWL,EAAAnkC,UAAA,SNy4JJyoB,IMz4JP,SAAiBkD,GAEhBlsB,KAAK8kC,OAAS5Y,GN04JR8Y,WAAY,KACZC,aAAc,MMn4JPP,GAAAz8B,aAAd,SAA2BC,GAE1BA,EAAYA,EAAUC,aACtB,OAAOD,IAAa,MAQPw8B,GAAAt8B,aAAd,SAA2BtB,GAE1B,GAAIo+B,GAAiBhkC,EAAYmH,SAASvB,EAC1C,IAAIq+B,GAAe,KACnB,IAAIC,GAAe,KAEnB,IAAIF,EAAS,CACZC,EAAOD,EAAQzP,QAAQ,UAAY,CACnC2P,GAAOF,EAAQzP,QAAQ,UAAY,EAGpC,MAAO0P,IAAQC,EAMTV,GAAAnkC,UAAA+H,oBAAP,SAA2BC,GAE1B,GAAIA,EAAmBG,IAAM,MAAO,CACnC,GAAIg0B,GAAax7B,EAAYmH,SAASE,EAAmBzB,KACzD9G,MAAKqlC,SAAS3I,OAER,CACN,GAAI7zB,EAEJ,IAAIN,EAAmBC,OAAO5I,QAAU,EAAG,CAC1C,OAGDiJ,EAAQN,EAAmBC,OAAO,EAElC,IAAIK,EAAMg4B,QAAQp/B,GAAc,CAE/B,GAAI6jC,GAAoB,GAAIC,EAC5BD,GAAGE,WAAaj9B,EAAmBG,EACnC48B,GAAG1kB,QAA0B/X,CAE7B7I,MAAKylC,gBAAgBz+B,KAAKs+B,EAE1B,IAAItlC,KAAK0lC,QAAQ9lC,OAAS,EAAG,CAC5BI,KAAK2lC,cAAcL,MAShBZ,GAAAnkC,UAAAyJ,2BAAP,SAAkCzB,GAEjC,GAAIA,EAAmBG,IAAM,MAAO,CACnC1I,KAAK4lC,QAAU,KACf5lC,MAAK4kC,cAAgB,UACf,CACN,GAAIU,GAAoB,GAAIC,EAC5BD,GAAGE,WAAaj9B,EAAmBG,EACnC1I,MAAKylC,gBAAgBz+B,KAAKs+B,GAG3B,GAAItlC,KAAK0lC,QAAQ9lC,OAAS,EACzBI,KAAK2lC,cAAcL,GAMdZ,GAAAnkC,UAAA8J,iBAAP,WAEC,GAAIw7B,EACJ,IAAIC,GAAiBtO,OAAOC,aAAa,GACzC,IAAIsO,EAEJ,KAAK/lC,KAAKwG,gBAAiB,CAC1BxG,KAAK44B,UAAY54B,KAAK64B,eAGtB74B,MAAK44B,UAAY54B,KAAK44B,UAAUrD,QAAQ,iBAAkB,KAG3D,GAAIv1B,KAAK44B,UAAUnD,QAAQqQ,KAAa,EACvCA,EAAUtO,OAAOC,aAAa,GAE/B,KAAKz3B,KAAKwG,gBAAiB,CAC1BxG,KAAKwG,gBAAkB,IACvBxG,MAAKgmC,UAAY,GAAIp/B,MACrB5G,MAAKimC,eAAiB,GAAIr/B,MAC1B5G,MAAKkmC,aAAe,GAAIt/B,MACxB5G,MAAKylC,gBAAkB,GAAI7+B,MAC3B5G,MAAK0lC,QAAU,GAAI9+B,MACnB5G,MAAK41B,KAAO,GAAIhvB,MAChB5G,MAAKmmC,cAAgBnmC,KAAK44B,UAAUh5B,MACpCI,MAAKomC,WAAapmC,KAAK44B,UAAUnD,QAAQqQ,EAAS,EAClD9lC,MAAKqmC,UAAY,CACjBrmC,MAAKsmC,SAAW,GAAI1/B,MACpB5G,MAAKumC,aAAe,EAGrB,MAAOvmC,KAAKomC,WAAapmC,KAAKmmC,eAAiBnmC,KAAKyzB,YAAa,CAChEzzB,KAAKomC,WAAapmC,KAAK44B,UAAUnD,QAAQqQ,EAAS9lC,KAAKqmC,UAEvD,IAAIrmC,KAAKomC,aAAe,EACvBpmC,KAAKomC,WAAapmC,KAAKmmC,aAExBN,GAAO7lC,KAAK44B,UAAUlD,UAAU11B,KAAKqmC,UAAWrmC,KAAKomC,WACrDP,GAAOA,EAAKl9B,MAAM,MAAM69B,KAAK,GAC7BX,GAAOA,EAAKtQ,QAAQ,KAAM,IAC1BwQ,GAAQF,EAAKl9B,MAAM,IACnB3I,MAAKqmC,UAAYrmC,KAAKomC,WAAa,CACnCpmC,MAAKymC,UAAUV,EAKf,IAAI/lC,KAAKgL,cAAe,CACvB,MAAO/J,GAAWmK,eAKpB,GAAIpL,KAAKomC,YAAcpmC,KAAKmmC,cAAe,CAE1C,GAAInmC,KAAK4lC,UAAY5lC,KAAK4kC,cAAe,CACxC,MAAO3jC,GAAWmK,cAGnBpL,KAAKg7B,WACLh7B,MAAK0mC,gBAEL,OAAOzlC,GAAWkK,aAGnB,MAAOlK,GAAWmK,cAGZs5B,GAAAnkC,UAAA8K,eAAP,SAAsBC,GAErBjF,EAAA9F,UAAM8K,eAAc1L,KAAAK,KAACsL,EAGrBtL,MAAKuL,UAAY,GAAI3J,GAMd8iC,GAAAnkC,UAAAkmC,UAAR,SAAkBV,GAEjB,OAAQA,EAAM,IAEb,IAAK,SAEJ/lC,KAAK4lC,QAAU,IACf5lC,MAAK4kC,cAAgB,KACrB5kC,MAAK2mC,QAAQZ,EAAM,GAEnB,MAED,KAAK,IAEJ/lC,KAAK4mC,YAAYb,EAEjB,MAED,KAAK,IAEJ/lC,KAAK6mC,aAAad,EAElB,MAED,KAAK,SAEJ,GAAI/lC,KAAK4lC,QAAS,CAEjB,IAAKG,EAAM,GACVA,EAAM,GAAK,QAEZ/lC,MAAKkmC,aAAal/B,KAAK++B,EAAM,GAC7B/lC,MAAK6kC,kBAAoBkB,EAAM,EAE/B,IAAI/lC,KAAK8mC,cACR9mC,KAAK8mC,cAActB,WAAaxlC,KAAK6kC,kBAGvC,KAED,KAAK,IAEJ7kC,KAAKq/B,YAAY0G,EAEjB,MAED,KAAK,KAEJ/lC,KAAK8zB,QAAQiS,EAEb,MAED,KAAK,KAEJ/lC,KAAK+mC,kBAAkBhB,EAEvB,MAED,KAAK,IAEJ/lC,KAAKgnC,UAAUjB,IAQVrB,GAAAnkC,UAAAy6B,UAAR,WAEC,IAAK,GAAIiM,GAAkB,EAAGA,EAAWjnC,KAAKsmC,SAAS1mC,SAAUqnC,EAAU,CAC1E,GAAIjD,GAAsBhkC,KAAKsmC,SAASW,GAAUjD,MAClD,IAAIkD,GAAmBlD,EAAOpkC,MAC9B,IAAIunC,EACJ,IAAIC,EACJ,IAAIzhB,EACJ,IAAIvQ,EAEJ,IAAID,EACJ,IAAIkyB,EACJ,IAAIC,EAEJ,KAAK,GAAI/C,GAAW,EAAGA,EAAI2C,IAAa3C,EAAG,CAC1C5e,EAAW,GAAIllB,EACf0mC,GAAiBnD,EAAOO,GAAG4C,cAC3BC,GAAoBD,EAAevnC,MAEnC,KAAKuV,EAAI,EAAGA,EAAIiyB,IAAqBjyB,EACpCnV,KAAKunC,uBAAuBJ,EAAehyB,GAAIwQ,EAEhD,IAAIA,EAASU,cAAczmB,QAAU,EACpC,QAGDI,MAAKoJ,gBAAyBuc,EAE9B2hB,GAAa,GAAIvjC,GAAe1B,EAAuBygB,oBAGvD,IAAI9iB,KAAK2f,cAAgB,EACxB2nB,EAAW1nB,KAAO9b,EAAmB+b,UAEtCzK,GAAO,GAAInT,GAAK0jB,EAAU2hB,EAE1B,IAAItnC,KAAKsmC,SAASW,GAAU99B,KAAM,CAEjCiM,EAAKjM,KAAOnJ,KAAKsmC,SAASW,GAAU99B,SAE9B,IAAI66B,EAAOO,GAAGp7B,KAAM,CAG1BiM,EAAKjM,KAAO66B,EAAOO,GAAGp7B,SAEhB,CAGNiM,EAAKjM,KAAO,GAGbnJ,KAAK0lC,QAAQ1+B,KAAKoO,EAElB,IAAI4uB,EAAOO,GAAGiB,YAAc,GAC3B8B,EAAWn+B,KAAO66B,EAAOO,GAAGiB,WAAa,IAAMpwB,EAAKjM,SACpDm+B,GAAWn+B,KAAOnJ,KAAKwnC,WAAa,IAAMpyB,EAAKjM,IAEhD,IAAIiM,EAAKC,UAAUzV,OAAS,EAAG,CAC9B,IAAKynC,EAAK,EAAGA,EAAKjyB,EAAKC,UAAUzV,SAAUynC,EAC1CjyB,EAAKC,UAAUgyB,GAAI3zB,SAAW4zB,EAINtnC,KAAKuL,UAAWgR,SAASnH,EAEnDpV,MAAKoJ,gBAAyBgM,KAUzBsvB,GAAAnkC,UAAAgnC,uBAAR,SAA+BE,EAA6B9hB,GAE3D,GAAImd,GAAwB2E,EAAc3E,KAC1C,IAAIiB,EACJ,IAAIF,GAAkBf,EAAMljC,MAC5B,IAAIk+B,EACJ,IAAImF,EAEJ,IAAIlD,GAAyB,GAAIn5B,MACjC,IAAIsK,GAAoB,GAAItK,MAC5B,IAAI8S,GAAwB,GAAI9S,MAChC,IAAI+J,GAAiC,GAAI/J,MAEzC5G,MAAK0nC,eACL1nC,MAAK2nC,aAAe,CAEpB,IAAI9xB,EACJ,KAAK,GAAIxW,GAAW,EAAGA,EAAIwkC,IAAYxkC,EAAG,CAEzC0kC,EAAOjB,EAAMzjC,EACby+B,GAAWiG,EAAK6D,SAAShoC,OAAS,CAElC,KAAKiW,EAAI,EAAGA,EAAIioB,IAAYjoB,EAAG,CAE9B7V,KAAK6nC,oBAAoB9D,EAAMluB,EAAGkqB,EAAU7uB,EAAKP,EAAS+I,EAC1D1Z,MAAK6nC,oBAAoB9D,EAAM,EAAGhE,EAAU7uB,EAAKP,EAAS+I,EAC1D1Z,MAAK6nC,oBAAoB9D,EAAMluB,EAAI,EAAGkqB,EAAU7uB,EAAKP,EAAS+I,IAGhE,GAAIqmB,EAASngC,OAAS,EAAG,CACxBqjC,EAAM,GAAItiC,GAAoB,KAC9BsiC,GAAInpB,kBAAoBJ,EAAQ9Z,OAAQ,MAAQ,IAChDqjC,GAAI5xB,cAAcV,EAClBsyB,GAAI3xB,gBAAgByuB,EACpBkD,GAAIhpB,oBAAoBP,EACxBupB,GAAIzxB,UAAUN,EAEdyU,GAAShM,eAAespB,IAIlByB,GAAAnkC,UAAAsnC,oBAAR,SAA4B9D,EAAe1N,EAAoB0J,EAAwB7uB,EAAmBP,EAAgC+I,GAEzI,GAAI6c,EACJ,IAAI4H,EACJ,IAAI2J,EACJ,IAAIC,EAEJ,KAAK/nC,KAAK0nC,aAAa3D,EAAK6D,SAASvR,IAAe,CAEnDE,EAAQv2B,KAAK2nC,YACb3nC,MAAK0nC,aAAa3D,EAAK6D,SAASvR,MAAkBr2B,KAAK2nC,YACvDxJ,GAASn+B,KAAKgmC,UAAUjC,EAAKiE,cAAc3R,GAAe,EAC1D0J,GAAS/4B,KAAKm3B,EAAO7kB,EAAEtZ,KAAK8kC,OAAQ3G,EAAO5kB,EAAEvZ,KAAK8kC,OAAQ3G,EAAO3kB,EAAExZ,KAAK8kC,OAExE,IAAIf,EAAKkE,cAAcroC,OAAS,EAAG,CAClCkoC,EAAe9nC,KAAKimC,eAAelC,EAAKkE,cAAc5R,GAAe,EACrE3c,GAAQ1S,KAAK8gC,EAAaxuB,EAAGwuB,EAAavuB,EAAGuuB,EAAatuB,GAG3D,GAAIuqB,EAAKmE,UAAUtoC,OAAS,EAAG,CAE9B,IACCmoC,EAAK/nC,KAAK41B,KAAKmO,EAAKmE,UAAU7R,GAAe,EAC7CnlB,GAAIlK,KAAK+gC,EAAG5oC,EAAG4oC,EAAG3E,GAEjB,MAAOvkC,GAER,OAAQw3B,GACP,IAAK,GACJnlB,EAAIlK,KAAK,EAAG,EACZ,MACD,KAAK,GACJkK,EAAIlK,KAAK,GAAI,EACb,MACD,KAAK,GACJkK,EAAIlK,KAAK,EAAG,UAMV,CACNuvB,EAAQv2B,KAAK0nC,aAAa3D,EAAK6D,SAASvR,IAAgB,EAGzD1lB,EAAQ3J,KAAKuvB,GAONmO,GAAAnkC,UAAAsmC,aAAR,SAAqBd,GAEpB/lC,KAAK8mC,cAAgB,IACrB9mC,MAAKmoC,sBAAwB,IAC7BnoC,MAAKsmC,SAASt/B,KAAKhH,KAAKooC,eAAiB,GAAIC,GAE7C,IAAItC,EACH/lC,KAAKooC,eAAej/B,KAAO48B,EAAM,GAO3BrB,GAAAnkC,UAAAqmC,YAAR,SAAoBb,GAEnB,IAAK/lC,KAAKooC,eACTpoC,KAAK6mC,aAAa,KACnB7mC,MAAK8mC,cAAgB,GAAIwB,EAEzBtoC,MAAK8mC,cAActB,WAAaxlC,KAAK6kC,iBAErC,IAAIkB,EACH/lC,KAAK8mC,cAAc39B,KAAO48B,EAAM,EACjC/lC,MAAKooC,eAAepE,OAAOh9B,KAAKhH,KAAK8mC,cAErC9mC,MAAKuoC,oBAAoB,MAOlB7D,GAAAnkC,UAAAgoC,oBAAR,SAA4BxC,GAE3B/lC,KAAKmoC,sBAAwB,GAAIK,EACjC,IAAIzC,EACH/lC,KAAKmoC,sBAAsB1yB,IAAMswB,EAAM,EACxC/lC,MAAK8mC,cAAcK,eAAengC,KAAKhH,KAAKmoC,uBAOrCzD,GAAAnkC,UAAA8+B,YAAR,SAAoB0G,GAInB,GAAIpG,GAAWC,EAAYC,CAC3B,IAAIkG,EAAMnmC,OAAS,EAAG,CACrB,GAAI6oC,KACJ,IAAI3e,EAEJ,KAAK,GAAIzqB,GAAW,EAAGA,EAAI0mC,EAAMnmC,SAAUP,EAAG,CAC7CyqB,EAAMyS,WAAWwJ,EAAM1mC,GACvB,KAAKwsB,MAAM/B,GACV2e,EAAOzhC,KAAK8iB,GAGd6V,EAAc8I,EAAO,EACrB7I,GAAc6I,EAAO,EACrB5I,IAAe4I,EAAO,EACtBzoC,MAAKgmC,UAAUh/B,KAAK,GAAI0hC,GAAO/I,EAAIC,EAAIC,QAEjC,CACNF,EAAcpD,WAAWwJ,EAAM,GAC/BnG,GAAcrD,WAAWwJ,EAAM,GAC/BlG,IAAetD,WAAWwJ,EAAM,GAEhC/lC,MAAKgmC,UAAUh/B,KAAK,GAAI0hC,GAAO/I,EAAIC,EAAIC,KASjC6E,GAAAnkC,UAAAuzB,QAAR,SAAgBiS,GAEf,GAAIA,EAAMnmC,OAAS,EAAG,CACrB,GAAI6oC,KACJ,IAAI3e,EACJ,KAAK,GAAIzqB,GAAW,EAAGA,EAAI0mC,EAAMnmC,SAAUP,EAAG,CAC7CyqB,EAAMyS,WAAWwJ,EAAM1mC,GACvB,KAAKwsB,MAAM/B,GACV2e,EAAOzhC,KAAK8iB,GAEd9pB,KAAK41B,KAAK5uB,KAAK,GAAI2hC,GAAGF,EAAO,GAAI,EAAIA,EAAO,SAEtC,CACNzoC,KAAK41B,KAAK5uB,KAAK,GAAI2hC,GAAGpM,WAAWwJ,EAAM,IAAK,EAAIxJ,WAAWwJ,EAAM,OAS3DrB,GAAAnkC,UAAAwmC,kBAAR,SAA0BhB,GAEzB,GAAIA,EAAMnmC,OAAS,EAAG,CACrB,GAAI6oC,KACJ,IAAI3e,EACJ,KAAK,GAAIzqB,GAAW,EAAGA,EAAI0mC,EAAMnmC,SAAUP,EAAG,CAC7CyqB,EAAMyS,WAAWwJ,EAAM1mC,GACvB,KAAKwsB,MAAM/B,GACV2e,EAAOzhC,KAAK8iB,GAEd9pB,KAAKimC,eAAej/B,KAAK,GAAI0hC,GAAOD,EAAO,GAAIA,EAAO,IAAKA,EAAO,SAE5D,CACNzoC,KAAKimC,eAAej/B,KAAK,GAAI0hC,GAAOnM,WAAWwJ,EAAM,IAAKxJ,WAAWwJ,EAAM,KAAMxJ,WAAWwJ,EAAM,OAQ5FrB,GAAAnkC,UAAAymC,UAAR,SAAkBjB,GAEjB,GAAIj6B,GAAai6B,EAAMnmC,MACvB,IAAImkC,GAAgB,GAAI6E,EAExB,KAAK5oC,KAAK8mC,cAAe,CACxB9mC,KAAK4mC,YAAY,MAGlB,GAAIj2B,EACJ,KAAK,GAAItR,GAAW,EAAGA,EAAIyM,IAAOzM,EAAG,CAEpC,GAAI0mC,EAAM1mC,IAAM,GAAI,CACnB,SAGDsR,EAAUo1B,EAAM1mC,GAAGsJ,MAAM,IACzBo7B,GAAKiE,cAAchhC,KAAKhH,KAAK6oC,WAAW1+B,SAASwG,EAAQ,IAAK3Q,KAAKgmC,UAAUpmC,QAE7E,IAAI+Q,EAAQ,IAAM6mB,OAAO7mB,EAAQ,IAAI/Q,OAAS,EAC7CmkC,EAAKmE,UAAUlhC,KAAKhH,KAAK6oC,WAAW1+B,SAASwG,EAAQ,IAAK3Q,KAAK41B,KAAKh2B,QAErE,IAAI+Q,EAAQ,IAAM6mB,OAAO7mB,EAAQ,IAAI/Q,OAAS,EAC7CmkC,EAAKkE,cAAcjhC,KAAKhH,KAAK6oC,WAAW1+B,SAASwG,EAAQ,IAAK3Q,KAAKimC,eAAermC,QAEnFmkC,GAAK6D,SAAS5gC,KAAK++B,EAAM1mC,IAG1BW,KAAKmoC,sBAAsBrF,MAAM97B,KAAK+8B,GAM/BW,GAAAnkC,UAAAsoC,WAAR,SAAmBtS,EAAc32B,GAEhC,GAAI22B,EAAQ,EACX,MAAOA,GAAQ32B,EAAS,MACxB,OAAO22B,GAGDmO,GAAAnkC,UAAA8kC,SAAR,SAAiBv+B,GAEhB,GAAIgiC,GAAsBhiC,EAAK6B,MAAM,SACrC,IAAIogC,EACJ,IAAIhD,EACJ,IAAIlwB,EAEJ,IAAImzB,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIznB,EACJ,IAAIzD,EACJ,IAAI2D,EACJ,IAAI1D,EACJ,IAAI+B,EACJ,IAAImpB,EAEJ,KAAK,GAAI9pC,GAAW,EAAGA,EAAIypC,EAAoBlpC,SAAUP,EAAG,CAG3D0pC,EAASD,EAAoBzpC,GAAGsJ,MAAM,MAAO69B,KAAK,IAAI79B,MAAM,KAG5D,IAAIogC,EAAMnpC,QAAU,EACnBmpC,EAAQD,EAAoBzpC,GAAGsJ,MAAM6uB,OAAOC,aAAa,IAE1DhW,GAAezD,EAAQ2D,EAAgB,QACvC1D,GAAW,CACXgrB,GAAc,KACdC,GAAW,KACXlpB,GAAQ,CACRmpB,GAAQ,EAER,KAAKtzB,EAAI,EAAGA,EAAIkzB,EAAMnpC,SAAUiW,EAAG,CAElCkzB,EAAMlzB,GAAKkzB,EAAMlzB,GAAG0f,QAAQ,OAAQ,GAEpC,IAAIwT,EAAMlzB,GAAG6f,UAAU,EAAG,IAAM,MAAQ7f,GAAK,GAAKkzB,EAAMlzB,IAAM,IAAK,CAClEkwB,EAAQgD,EAAMlzB,GAAGlN,MAAM,IAEvB,IAAI6uB,OAAOuO,EAAM,IAAIqD,WAAW,IAAM,GAAK5R,OAAOuO,EAAM,IAAIqD,WAAW,IAAM,GAC5ErD,EAAM,GAAKA,EAAM,GAAGrQ,UAAU,EAAGqQ,EAAM,GAAGnmC,OAE3C,IAAIiW,GAAK,EAAG,CACX7V,KAAKwnC,WAAazB,EAAMS,KAAK,GAC7BxmC,MAAKwnC,WAAcxnC,KAAKwnC,YAAc,GAAK,SAAWxnC,KAAKwnC,eAErD,CAEN,OAAQzB,EAAM,IAEb,IAAK,KACJ,GAAIA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,MAAQA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,MAAQA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,KACnH/nB,EAAQ+nB,EAAM,GAAG,KAAO,GAAKA,EAAM,GAAG,KAAO,EAAIA,EAAM,GAAG,GAC3D,MAED,KAAK,KACJ,GAAIA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,MAAQA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,MAAQA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,KAAM,CACzHpkB,EAAgBokB,EAAM,GAAG,KAAO,GAAKA,EAAM,GAAG,KAAO,EAAIA,EAAM,GAAG,GAClEkD,GAAc,KAEf,KAED,KAAK,KACJ,GAAIlD,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,KACnC9nB,EAAWsjB,OAAOwE,EAAM,IAAI,IAC7B,IAAI9nB,GAAY,EACfgrB,EAAc,KACf,MAED,KAAK,KACJ,GAAIlD,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,MAAQA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,MAAQA,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,KAAM,CACzHtkB,EAAeskB,EAAM,GAAG,KAAO,GAAKA,EAAM,GAAG,KAAO,EAAIA,EAAM,GAAG,GACjEmD,GAAW,KAEZ,KAED,KAAK,KACL,IAAK,IACJ,GAAInD,EAAM,KAAOla,MAAM0V,OAAOwE,EAAM,KACnC/lB,EAAQuhB,OAAOwE,EAAM,GACtB,MAED,KAAK,SACJoD,EAAQnpC,KAAKqpC,iBAAiBtD,EAC9BoD,GAAQA,EAAM5T,QAAQ,MAAO,QAMlC,GAAI4T,GAAS,GAAI,CAEhB,GAAIF,EAAa,CAEhBD,EAAsB,GAAIvE,EAC1BuE,GAAoBrnB,cAAgBA,CACpCqnB,GAAoB/qB,SAAWA,CAE/B,IAAIqrB,GAA4B,GAAIC,EACpCD,GAAatpB,MAAQA,CACrBspB,GAAaN,oBAAsBA,CACnCM,GAAa9D,WAAaxlC,KAAKwnC,UAE/B,KAAKxnC,KAAKwpC,sBACTxpC,KAAKwpC,sBAAwB,GAAI5iC,MAElC5G,MAAKwpC,sBAAsBxiC,KAAKsiC,GAIjCtpC,KAAKijB,gBAAgBjjB,KAAKwnC,WAAY,GAAIxmC,GAAWmoC,QAE/C,IAAID,IAAard,MAAM7N,GAAQ,CAErC,GAAIsnB,GAAoB,GAAIC,EAC5BD,GAAGE,WAAaxlC,KAAKwnC,UAErB,IAAIxnB,GAAS,EACZ3W,QAAQC,IAAI,yEAA2EtJ,KAAKwnC,WAAa,yCAE1G,IAAI9uB,EAEJ,IAAI1Y,KAAK2f,aAAe,EAAG,CAC1BjH,EAAK,GAAI3U,GAAeia,EAExB,IAAIyrB,GAA2C/wB,CAE/C+wB,GAASzpB,MAAQA,CACjBypB,GAAShoB,aAAeA,CACxBgoB,GAASvpB,OAAS,IAElB,IAAI+oB,EAAa,CAChBQ,EAAS9nB,cAAgBA,CACzB8nB,GAASxrB,SAAWA,OAGf,CACNvF,EAAK,GAAI3U,GAAeia,EACxBtF,GAAGkH,KAAO9b,EAAmB+b,UAE7B,IAAI6pB,GAAgDhxB,CAGpDgxB,GAAcjoB,aAAeA,CAC7BioB,GAAcxpB,OAAS,IAEvB,IAAI+oB,EAAa,CAChBS,EAAc/nB,cAAgBA,CAC9B+nB,GAAczrB,SAAWA,GAI3BqnB,EAAG5sB,GAAKA,CAER1Y,MAAKylC,gBAAgBz+B,KAAKs+B,EAE1B,IAAItlC,KAAK0lC,QAAQ9lC,OAAS,EACzBI,KAAK2lC,cAAcL,IAKtBtlC,KAAK4kC,cAAgB,KAGdF,GAAAnkC,UAAA8oC,iBAAR,SAAyBtD,GAExB,GAAItwB,GAAa,EACjB,IAAIpW,EACJ,IAAIsqC,EAEJ,KAAKtqC,EAAI,EAAGA,EAAI0mC,EAAMnmC,QAAS,CAC9B,OAAQmmC,EAAM1mC,IACb,IAAK,UACL,IAAK,UACL,IAAK,MACL,IAAK,SACL,IAAK,UACJA,GAAK,CACL,MACD,KAAK,MACJA,GAAK,CACL,MACD,KAAK,KACL,IAAK,KACL,IAAK,KACJA,GAAK,CACL,SACD,SACCsqC,EAAY,IACZ,OAGF,GAAIA,EACH,MAIF,IAAKtqC,EAAGA,EAAI0mC,EAAMnmC,OAAQP,IAAK,CAC9BoW,GAAOswB,EAAM1mC,EACboW,IAAO,IAIRA,EAAMA,EAAI8f,QAAQ,OAAQ,GAE1B,OAAO9f,GAGAivB,GAAAnkC,UAAAomC,QAAR,SAAgBiD,GAIf5pC,KAAKijB,gBAAgB,MAAO,GAAIjiB,GAAW4oC,GAAS,KACpD5pC,MAAK2V,iCAGE+uB,GAAAnkC,UAAAolC,cAAR,SAAsBL,GAErB,GAAIuE,EACJ,IAAIz0B,EACJ,IAAI00B,EACJ,IAAIj0B,EACJ,IAAIyzB,EAEJ,KAAK,GAAIjqC,GAAW,EAAGA,EAAIW,KAAK0lC,QAAQ9lC,SAAUP,EAAG,CACpD+V,EAAOpV,KAAK0lC,QAAQrmC,EACpBwqC,GAAcz0B,EAAK1B,SAASvK,KAAKR,MAAM,IAEvC,IAAIkhC,EAAY,IAAMvE,EAAGE,WAAY,CAEpC,GAAIF,EAAG5sB,GAAI,CACV,GAAItD,EAAK1B,SACR0B,EAAK1B,SAAW,IACjB0B,GAAK1B,SAAW4xB,EAAG5sB,OAEb,IAAI4sB,EAAG1kB,QAAS,CACtB,GAAI5gB,KAAK2f,aAAe,EAAG,CAC1BmqB,EAAuB10B,EAAK1B,QAE5Bo2B,GAAGlpB,QAAU0kB,EAAG1kB,OAChBkpB,GAAG9rB,MAAQsnB,EAAGtnB,KACd8rB,GAAG9pB,MAAQslB,EAAGtlB,KACd8pB,GAAG5pB,OAAS,IAEZ,IAAIolB,EAAG5iB,eAAgB,CAMtBonB,EAAGpnB,eAAiB,IACpBonB,GAAGpnB,eAAiB4iB,EAAG5iB,mBAEjB,IAAI1iB,KAAKwpC,sBAAuB,CAEtC,IAAK3zB,EAAI,EAAGA,EAAI7V,KAAKwpC,sBAAsB5pC,SAAUiW,EAAG,CACvDyzB,EAAetpC,KAAKwpC,sBAAsB3zB,EAE1C,IAAIyzB,EAAa9D,YAAcF,EAAGE,WAAY,CAC7CsE,EAAGpnB,eAAiB,IACpBonB,GAAGpnB,eAAiB4mB,EAAaN,mBACjCc,GAAG9rB,MAAQsrB,EAAatrB,KACxB8rB,GAAG9pB,MAAQspB,EAAatpB,KACxB,cAIG,CACN8pB,EAAsB10B,EAAK1B,QAC3Bo2B,GAAGlqB,KAAO9b,EAAmB+b,UAE7BiqB,GAAGlpB,QAAU0kB,EAAG1kB,OAChBkpB,GAAG9rB,MAAQsnB,EAAGtnB,KACd8rB,GAAG5pB,OAAS,IAEZ,IAAIolB,EAAG5iB,eAAgB,CAKtBonB,EAAGpnB,eAAiB,IACpBonB,GAAGpnB,eAAiB4iB,EAAG5iB,mBACjB,IAAI1iB,KAAKwpC,sBAAuB,CACtC,IAAK3zB,EAAI,EAAGA,EAAI7V,KAAKwpC,sBAAsB5pC,SAAUiW,EAAG,CACvDyzB,EAAetpC,KAAKwpC,sBAAsB3zB,EAE1C,IAAIyzB,EAAa9D,YAAcF,EAAGE,WAAY,CAC7CsE,EAAGpnB,eAAiB,IACpBonB,GAAGpnB,eAAiB4mB,EAAaN,mBACjCc,GAAG9rB,MAAQsrB,EAAatrB,KAExB,WAQL5I,EAAK1B,SAASvK,KAAO0gC,EAAY,GAAIA,EAAY,GAAKA,EAAY,EAClE7pC,MAAK0lC,QAAQxB,OAAO7kC,EAAG,KACrBA,GAIJ,GAAIimC,EAAG5sB,IAAMoxB,EACZ9pC,KAAKoJ,gBAAgBk8B,EAAG5sB,IAAMoxB,GAGxBpF,GAAAnkC,UAAAmmC,eAAR,WAEC,GAAI1mC,KAAKylC,gBAAgB7lC,QAAU,EAClC,MAED,KAAK,GAAIP,GAAW,EAAGA,EAAIW,KAAKylC,gBAAgB7lC,SAAUP,EACzDW,KAAK2lC,cAAc3lC,KAAKylC,gBAAgBpmC,IAE3C,OAAAqlC,IAh6BwBzjC,EAo6BxB,IAAMonC,GAAW,WAAjB,QAAMA,KAGEroC,KAAAgkC,OAAiB,GAAIp9B,OAC7B,MAAAyhC,KAEA,IAAMC,GAAK,WAAX,QAAMA,KAIEtoC,KAAAmnC,eAAiC,GAAIvgC,OAC7C,MAAA0hC,KAEA,IAAME,GAAa,WAAnB,QAAMA,KAGExoC,KAAA8iC,MAAmB,GAAIl8B,OAC/B,MAAA4hC,KAEA,IAAMe,GAAY,WAAlB,QAAMA,KAIEvpC,KAAAge,MAAe,QACfhe,MAAAggB,MAAe,EACvB,MAAAupB,KAEA,IAAMhE,GAAc,WAApB,QAAMA,KAMEvlC,KAAAge,MAAe,QACfhe,MAAAggB,MAAe,EACvB,MAAAulB,KAEA,IAAMqD,GAAQ,WAAd,QAAMA,KAEE5oC,KAAAgoC,cAAuC,GAAIphC,MAC3C5G,MAAAkoC,UAAmC,GAAIthC,MACvC5G,MAAAioC,cAAuC,GAAIrhC,MAC3C5G,MAAA4nC,SAAoB,GAAIhhC,OAChC,MAAAgiC,KN+rJA,IM1rJMD,GAAE,WAWP,QAXKA,GAWOxpC,EAAcikC,GAAd,GAAAjkC,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAikC,QAAA,GAAY,CAAZA,EAAA,EAEzBpjC,KAAK+pC,GAAK5qC,CACVa,MAAKgqC,GAAK5G,EAMXlQ,OAAA6R,eAAW4D,EAAApoC,UAAA,KNurJJgT,IMvrJP,WAEC,MAAOvT,MAAKgqC,INwrJNhhB,IMrrJP,SAAakD,GAEZlsB,KAAKgqC,GAAK9d,GNsrJJ8Y,WAAY,KACZC,aAAc,MMjrJrB/R,QAAA6R,eAAW4D,EAAApoC,UAAA,KNurJJgT,IMvrJP,WAEC,MAAOvT,MAAK+pC,INwrJN/gB,IMrrJP,SAAakD,GAEZlsB,KAAK+pC,GAAK7d,GNsrJJ8Y,WAAY,KACZC,aAAc,MMjrJd0D,GAAApoC,UAAA6zB,MAAP,WAEC,MAAO,IAAIuU,GAAG3oC,KAAK+pC,GAAI/pC,KAAKgqC,IAMtBrB,GAAApoC,UAAA8H,SAAP,WAEC,MAAOrI,MAAK+pC,GAAK,IAAM/pC,KAAKgqC,GAE9B,OAAArB,KAEA,IAAMD,GAAM,WAeX,QAfKA,GAeOpvB,EAAcC,EAAcC,EAAc+c,GAA1C,GAAAjd,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAC,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAC,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAA+c,QAAA,GAAgB,CAAhBA,EAAA,EAErDv2B,KAAKiqC,GAAK3wB,CACVtZ,MAAKkqC,GAAK3wB,CACVvZ,MAAKmqC,GAAK3wB,CACVxZ,MAAKoqC,OAAS7T,EAOfrD,OAAA6R,eAAW2D,EAAAnoC,UAAA,SN4qJJgT,IMvqJP,WAEC,MAAOvT,MAAKoqC,QN4qJNphB,IMnrJP,SAAiBqhB,GAEhBrqC,KAAKoqC,OAASC,GNorJRrF,WAAY,KACZC,aAAc,MMzqJrB/R,QAAA6R,eAAW2D,EAAAnoC,UAAA,KNgrJJgT,IMhrJP,WAEC,MAAOvT,MAAKiqC,INirJNjhB,IM9qJP,SAAakD,GAEZlsB,KAAKiqC,GAAK/d,GN+qJJ8Y,WAAY,KACZC,aAAc,MMzqJrB/R,QAAA6R,eAAW2D,EAAAnoC,UAAA,KNgrJJgT,IMhrJP,WAEC,MAAOvT,MAAKkqC,INirJNlhB,IM9qJP,SAAakD,GAEZlsB,KAAKkqC,GAAKhe,GN+qJJ8Y,WAAY,KACZC,aAAc,MMzqJrB/R,QAAA6R,eAAW2D,EAAAnoC,UAAA,KNgrJJgT,IMhrJP,WAEC,MAAOvT,MAAKmqC,INirJNnhB,IM9qJP,SAAakD,GAEZlsB,KAAKmqC,GAAKje,GN+qJJ8Y,WAAY,KACZC,aAAc,MM1qJdyD,GAAAnoC,UAAA6zB,MAAP,WAEC,MAAO,IAAIsU,GAAO1oC,KAAKiqC,GAAIjqC,KAAKkqC,GAAIlqC,KAAKmqC,IAE3C,OAAAzB,KApMA5oC,GAAAJ,QAASglC,INu3JNvX,gCAAgCF,UAAUG,2CAA2CH,UAAUO,0CAA0CP,UAAUQ,iCAAiCR,UAAUS,qCAAqCT,UAAUU,sCAAsCV,UAAUiB,uCAAuCjB,UAAUqB,uDAAuDrB,UAAUyB,mCAAmCzB,UAAU6B,qDAAqD7B,UAAU+C,4CAA4C/C,UAAUgD,gDAAgDhD,UAAUqd,yDAAyDrd,YAAYsd,8BAA8B,SAAS3rC,EAAQkB,EAAOJ,GOnzLzuB,GAAO8qC,GAAW5rC,EAAgB,sCAElC,IAAOwH,GAASxH,EAAgB,+BAChC,IAAO4hC,GAAY5hC,EAAgB,kCACnC,IAAOk0B,GAASl0B,EAAgB,+BAChC,IAAO8lC,GAAS9lC,EAAgB,+BPuzLhC,IOlzLM6rC,GAAO,WAAb,QAAMA,MA8CSA,EAAAC,iBAAd,WAECF,EAAYG,cAAcF,EAAQG,aAbrBH,GAAAG,YAA4BhkC,MAAcR,EAAWo6B,EAAc1N,EAAW4R,EAe7F,OAAA+F,KAEA3qC,GAAiBJ,QAAR+qC,IPozLNI,sCAAsC5d,UAAUptB,+BAA+B,+BAA+BgzB,+BAA+B,+BAA+B0N,kCAAkC,kCAAkCiE,+BAA+B",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapData\");\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\nimport SubGeometryBase\t\t\t\t\t= require(\"awayjs-core/lib/data/SubGeometryBase\");\nimport CurveSubGeometry\t\t\t\t\t= require(\"awayjs-core/lib/data/CurveSubGeometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport AnimationNodeBase\t\t\t\t= require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport TextField\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/TextField\");\nimport Billboard\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\n\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\n\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\n\nimport CurveMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/CurveMaterial\")\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\n\nimport TimelineSceneGraphFactory \t= require(\"awayjs-player/lib/factories/TimelineSceneGraphFactory\");\nimport AS2SceneGraphFactory \t\t= require(\"awayjs-player/lib/factories/AS2SceneGraphFactory\");\nimport MovieClip \t\t\t\t\t= require(\"awayjs-player/lib/display/MovieClip\");\nimport TimelineKeyFrame \t\t\t= require(\"awayjs-player/lib/timeline/TimelineKeyFrame\");\nimport AddChildCommand \t\t\t\t= require(\"awayjs-player/lib/timeline/commands/AddChildCommand\");\nimport UpdatePropertyCommand \t\t= require(\"awayjs-player/lib/timeline/commands/UpdatePropertyCommand\");\nimport RemoveChildCommand \t\t\t= require(\"awayjs-player/lib/timeline/commands/RemoveChildCommand\");\nimport ApplyAS2DepthsCommand\t\t= require(\"awayjs-player/lib/timeline/commands/ApplyAS2DepthsCommand\");\n\nimport Font\t\t\t\t\t\t\t= require(\"awayjs-display/lib/text/Font\");\nimport TesselatedFontTable\t\t\t= require(\"awayjs-display/lib/text/TesselatedFontTable\");\nimport TextFormat\t\t\t= require(\"awayjs-display/lib/text/TextFormat\");\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = true;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _matrixNrType:number;\n\tprivate _geoNrType:number;\n\tprivate _propsNrType:number;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\n\tprivate _cubeTextures:Array<any>;\n\tprivate _defaultBitmapMaterial:MethodMaterial;\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\tprivate _allFontTables:Array<TesselatedFontTable>;\n\n\t/**\n\t * Creates a new AWDParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor()\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock();\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\n\t\t\tvar asset:TextureBase;\n\t\t\tvar thisBitmapTexture:Texture2DBase;\n\t\t\tvar block:AWDBlock;\n\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\n\t\t\t{\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\n\t\t\t\tif (asset) {\n\t\t\t\t\tvar mat:MethodMaterial;\n\t\t\t\t\tvar users:Array<string>;\n\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\n\t\t\t{\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\n\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\n\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\n\t\t\t\tthis._texture_users[ressourceID].push(1);\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\n\t\t\t\t}\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\n\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\n\n\t\t\t\t\tasset = <TextureBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\n\t\t\t\t\tblock = this._blocks[ressourceID];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWDParser.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWDParser.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t{\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t}\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\n\t\t}\n\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate dispose():void\n\t{\n\n\t\tfor (var c in this._blocks) {\n\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\n\t\t\tb.dispose();\n\n\t\t}\n\n\t}\n\n\tprivate parseNextBlock():void\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar assetData:IAsset;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyGeo) {\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyMatrix) {\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyProps) {\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t\t}\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\t\tthis._newBlockBytes = new ByteArray();\n\n\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tthis._newBlockBytes.position = 0;\n\t\tblock = new AWDBlock();\n\t\tblock.len = this._newBlockBytes.position + len;\n\t\tblock.id = this._cur_block_id;\n\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory();\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 24:\n\t\t\t\t\tthis.parseMeshLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 25:\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 44:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 134:\n\t\t\t\t\tthis.paresTextField(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 135:\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 136:\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//*/\n\t\t}\n\t\t//*\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\t\t\t\t\t}\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//*/\n\n\t\tvar msgCnt:number = 0;\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\n\t\t\tif (this._debug) {\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(\"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._debug) {\n\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\n\tprivate parseTesselatedFont(blockID:number):void {\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\t//console.log(\"Font name = \"+this._blocks[blockID].name);\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\t//console.log(\"Font font_style_cnt = \"+font_style_cnt);\n\t\tvar new_font:Font=new Font();\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\n\t\t\tvar font_style_name:string = this.parseVarStr();\n\t\t\t//console.log(\"Font font_style_name = \"+font_style_name);\n\t\t\tvar new_font_style:TesselatedFontTable=new_font.get_font_table(font_style_name);\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n\t\t\t//console.log(\"Font new_font_style.font_em_size = \"+new_font_style.get_font_em_size);\n\t\t\tvar font_style_char_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"Font font_style_char_cnt = \"+font_style_char_cnt);\n\t\t\tfor (var i:number = 0; i < font_style_char_cnt; ++i) {\n\n\t\t\t\tvar font_style_char:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"Font font_style_char = \"+font_style_char);\n\t\t\t\t// todo: this is basically a simplified version of the subgeom-parsing done in parseTriangleGeometry. Make a parseSubGeom() instead (?)\n\t\t\t\tvar sm_len:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar sm_end:number = this._newBlockBytes.position + sm_len;\n\t\t\t\t//console.log(\"Font sm_len = \"+sm_len);\n\n\t\t\t\t//this.parseProperties(null); // no properties for font-table subgeos\n\t\t\t\t// Loop through data streams\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\t\tvar idx:number = 0;\n\t\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t\t// Type, field type, length\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\t\tif (str_type == 2) {//face indicies positions\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\n\t\t\t\t\t\tvar idx_pos:number = 0;\n\t\t\t\t\t\tvar idx_curves:number = 0;\n\t\t\t\t\t\tvar idx_uvs:number = 0;\n\n\t\t\t\t\t\tvar positions:Array<number> = new Array<number>();\n\t\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\n\t\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// type\n\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\n\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//this.parseProperties(null);// no attributes for font-table subgeos\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\n\t\t\t\tnew_font_style.set_subgeo_for_char(font_style_char.toString(), curve_sub_geom);\n\t\t\t}\n\t\t\tconsole.log(\"Parsed a font-table\");\n\n\t\t}\n\t\t//console.log(\"Parsed a font\");\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\n\t\tthis._blocks[blockID].data = new_font;\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a font: Name = '\" + name);\n\t\t}\n\n\t}\n\n\tprivate parseTextFormat(blockID:number):void {\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\t//console.log(\"this._blocks[blockID].name  '\" + this._blocks[blockID].name );\n\t\tvar font_id:number = this._newBlockBytes.readUnsignedInt();\n\t\t//console.log(\"font_id  '\" + font_id);\n\t\tvar font_style_name:string = this.parseVarStr();\n\t\t//console.log(\"font_style_name  '\" + font_style_name);\n\t\tvar returnArrayFont:Array<any> = this.getAssetByID(font_id, [Font.assetType]);\n\t\tvar font:Font;\n\t\tif (returnArrayFont[0]) {\n\t\t\tfont = <Font> returnArrayFont[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Font for this TextFormat. A empty Font is created!\");\n\t\t\tfont = new Font();\n\t\t}\n\t\tvar newTextFormat:TextFormat = new TextFormat();\n\t\tnewTextFormat.font_name = font.name;\n\t\tvar font_table:TesselatedFontTable = font.get_font_table(font_style_name);\n\t\tif(font_table!=null){\n\t\t\tnewTextFormat.font_style = font_style_name;\n\t\t\tnewTextFormat.font_table = font_table;\n\t\t}\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\t//console.log(\"mat  '\" + data_id);\n\t\tvar mat:BasicMaterial;\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [MaterialBase.assetType]);\n\n\t\tif (returnedArrayMaterial[0]) {\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this TextFormat. Default Material will be used!\");\n\t\t\tmat = new BasicMaterial();\n\t\t}\n\t\tmat.bothSides=true;\n\n\t\tvar num_uv_values:number = this._newBlockBytes.readUnsignedByte();\n\t\t//console.log(\"num_uv_values  '\" + num_uv_values);\n\t\tvar uv_values:Array<number>=[];\n\t\tfor(var uvcnt:number=0; uvcnt<num_uv_values; uvcnt++){\n\t\t\tvar uv_value:number=this._newBlockBytes.readFloat();\n\t\t\tuv_values.push(uv_value);\n\t\t\t//console.log(\"uv_value  '\" + uv_value);\n\t\t}\n\t\tnewTextFormat.uv_values=uv_values;\n\t\tvar format_props:AWDProperties = this.parseProperties({1:AWDParser.UINT16, 2:AWDParser.UINT16, 3:AWDParser.UINT8,4:AWDParser.UINT8,5:AWDParser.UINT8});\n\n\t\tnewTextFormat.size = format_props.get(1,12);\n\t\tnewTextFormat.letterSpacing = format_props.get(2,0);\n\t\t//newTextFormat.rotated = format_props.get(3,false);\n\t\tnewTextFormat.kerning = format_props.get(4,true);\n\t\t//newTextFormat.baseline_shift = format_props.get(5,1);\n\t\tnewTextFormat.material = mat;\n\t\tthis.parseUserAttributes();// textformat has no extra-properties\n\t\t//newTextFormat.extra =\n\n\t\tthis._pFinalizeAsset(<IAsset> newTextFormat, name);\n\t\tthis._blocks[blockID].data = newTextFormat;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a TextFormat: Name = '\" + name + \" font: \"+font.name);\n\t\t}\n\n\t}\n\n\tprivate paresTextField(blockID:number):void {\n\t\tvar name:string = this.parseVarStr();\n\t\tthis._blocks[blockID].name = name;\n\t\t//console.log(\"name  '\" + name);\n\t\tvar newTextField:TextField = new TextField();\n\t\tvar num_paragraphs:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar complete_text:string = \"\";\n\t\t//console.log(\"num_paragraphs  '\" + num_paragraphs);\n\t\tvar text_format:TextFormat;\n\t\tfor(var paracnt:number=0; paracnt<num_paragraphs; paracnt++){\n\n\t\t\tvar num_textruns:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"num_textruns  '\" + num_textruns);\n\t\t\tfor(var textrun_cnt:number=0; textrun_cnt<num_textruns; textrun_cnt++) {\n\n\t\t\t\tvar format_id:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"format_id  '\" + format_id);\n\t\t\t\tvar textFormatArray:Array<any> = this.getAssetByID(format_id, [TextFormat.assetType]);\n\t\t\t\tif (textFormatArray[0]) {\n\t\t\t\t\ttext_format = <TextFormat> textFormatArray[1];\n\t\t\t\t} else {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\n\t\t\t\t\ttext_format = new TextFormat();\n\t\t\t\t}\n\t\t\t\t//console.log(\"text_format  '\" + text_format.name);\n\t\t\t\tvar txt_length = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"txt_length  '\" + txt_length);\n\t\t\t\tif (txt_length > 0) {\n\t\t\t\t\tvar this_txt:string = this._newBlockBytes.readUTFBytes(txt_length);\n\t\t\t\t\t//newTextField.appendText(this_txt, text_format);\n\t\t\t\t\tcomplete_text+=this_txt;\n\t\t\t\t\t//console.log(\"this_txt  '\" + this_txt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//newTextField.closeParagraph();\n\t\t}\n\t\tnewTextField.textFormat=text_format;\n\t\tnewTextField.text=complete_text;\n\t\t//newTextField.construct_geometry();\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tnewTextField.extra = this.parseUserAttributes();\n\n\t\t//console.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t\tthis._pFinalizeAsset(<IAsset> newTextField, name);\n\t\tthis._blocks[blockID].data = newTextField;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a TextField: Name = '\" + name + \"| text  = \" + complete_text);\n\t\t}\n\n\t}\n\n\t// Block ID = 25\n\tprivate parseBillBoardLibraryBlock(blockID:number):void {\n\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mat:BasicMaterial;\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [MaterialBase.assetType]);\n\n\t\tif (returnedArrayMaterial[0]) {\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\n\t\t\tmat = new BasicMaterial();\n\t\t}\n\t\tmat.bothSides=true;\n\t\tvar billboard:Billboard = new Billboard(mat);\n\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tbillboard.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\n\t\tthis._blocks[blockID].data = billboard;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n\t\t}\n\t}\n\t// Block ID = 24\n\tprivate parseMeshLibraryBlock(blockID:number):void {\n\t\tvar num_materials:number;\n\t\tvar materials_parsed:number;\n\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar geom:Geometry;\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [Geometry.assetType])\n\n\t\tif (returnedArrayGeometry[0]) {\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\n\t\t\tgeom = new Geometry();\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tmaterials_parsed = 0;\n\n\t\tvar returnedArrayMaterial:Array<any>;\n\n\t\twhile (materials_parsed < num_materials) {\n\t\t\tvar mat_id:number;\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [MaterialBase.assetType])\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\n\t\t\t}\n\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\n\n\t\t\tmaterials.push(m);\n\t\t\tmaterialNames.push(m.name);\n\n\t\t\tmaterials_parsed++;\n\t\t}\n\n\t\tvar mesh:Mesh = new Mesh(geom, null);\n\n\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\tvar i:number;\n\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\n\t\t\t}\n\t\t}\n\t\tthis.parseProperties(null);\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Library-Mesh: Name = '\" + name + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\n\t\t}\n\t}\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\n\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t\tconsole.log(\"Audio url = \"+url);\n\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\n\t\t}\n\t}\n\n\t//Block ID = 4\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\n\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar k:number;\n\t\tvar timeLineContainer = factory.createMovieClip();\n\t\tvar name = this.parseVarStr();\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\n\t\tvar fps:number = this._newBlockBytes.readFloat();\n\t\tvar ms_per_frame = 1000 / fps;\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\n\t\tvar objectIDMap : { [id:string]:number; } = {};\n\n\t\t// var previousTimeLine:TimeLineFrame;\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\n\n\t\tvar totalDuration = 0;\n\t\tfor (i = 0; i < numFrames; i++) {\n\n\t\t\tvar frame = new TimelineKeyFrame();\n\t\t\tvar traceString = \"frame = \" + i;\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt() * ms_per_frame;\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\n\t\t\ttotalDuration += frameDuration;\n\t\t\t//console.log(\"duration = \" + frameDuration);\n\t\t\ttraceString += \"duration = \" + frameDuration;\n\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedShort();\n\t\t\tfor (j = 0; j < numLabels; j++) {\n\t\t\t\tvar labelType = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tvar label = this.parseVarStr();\n\t\t\t\t// TODO: Handle labels differently\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\n\t\t\t\ttraceString += \"\\n     label = \" + label + \" - labelType = \" + labelType;\n\t\t\t}\n\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\n\t\t\ttraceString += \"\\n      Commands \" + numCommands;\n\t\t\tvar hasDepthChanges = false;\n\t\t\tvar commandString = \"\";\n\t\t\tfor (j = 0; j < numCommands; j++) {\n\t\t\t\tvar objectID:number;\n\t\t\t\tvar resourceID:number;\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t// 1 = Add object by local id (awd-block-id) + update properties\n\t\t\t\t// 2 = Add object by global id (string identifier) + update properties !Not used yet.!\n\t\t\t\t// 3 = UpdateObject - update a object that is already present\n\t\t\t\t// 4 = remove object\n\t\t\t\t// 5 = add / update sound\n\n\t\t\t\tswitch (commandType) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tvar valid_command:boolean = false;\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar instanceID = 0; // must be set in folling conditions:\n\t\t\t\t\t\tif (commandType == 1) {\n\t\t\t\t\t\t\t// this commands looks for a object by awd-id and puts it into the timeline\n\t\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\n\t\t\t\t\t\t\t// sound is added to timeline with dedicated Command, as it is no display-object (has no matrix etc)\n\t\t\t\t\t\t\t// check if a Geometry can be found at the resourceID (AWD-ID)\n\t\t\t\t\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\n\t\t\t\t\t\t\tif (cmd_asset != null) {\n\t\t\t\t\t\t\t\tinstanceID = timeLineContainer.registerPotentialChild(cmd_asset);\n\t\t\t\t\t\t\t\tobjectIDMap[objectID] = instanceID;\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildCommand(instanceID));\n\n\t\t\t\t\t\t\t\tif (instanceName.length) {\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"name\", instanceName));\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                instanceName = \" + instanceName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalid_command = true;\n\t\t\t\t\t\t\t\tcommandString += \"\\n      - Add new Resource = \" + resourceID + \" as object_id = \" + objectID;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tcommandString += \"\\n      - ERROR - object_id = \" + objectID + \" - NO DISPLAY_OBJECT AT ID = \" + resourceID;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (commandType == 3) {\n\t\t\t\t\t\t\tinstanceID = objectIDMap[objectID];\n\t\t\t\t\t\t\tvalid_command = true;\n\t\t\t\t\t\t\tcommandString += \"\\n      - Update object_id = \" + objectID;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// read the command properties\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\n\t\t\t\t\t\t// 4: blendmode (uint8)\n\t\t\t\t\t\t// 5: visibilty (uint8)\n\t\t\t\t\t\t// 6: depth (uint32)\n\t\t\t\t\t\t// 7: mask (uint32)\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({\n\t\t\t\t\t\t\t1: this._matrixNrType,\n\t\t\t\t\t\t\t2: this._matrixNrType,\n\t\t\t\t\t\t\t3: this._propsNrType,\n\t\t\t\t\t\t\t4: AWDParser.UINT8,\n\t\t\t\t\t\t\t5: AWDParser.UINT8,\n\t\t\t\t\t\t\t6: AWDParser.UINT32\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// todo: fix property parsing so we can read variable size list (atm list with size = 1 is returned as single number)\n\t\t\t\t\t\t// for this reason, for now the mask-property is read sepperatly\n\t\t\t\t\t\tvar mask_id_nums:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar mask_ids:Array<number> = new Array<number>();\n\t\t\t\t\t\tfor (var mi_cnt:number = 0; mi_cnt < mask_id_nums; mi_cnt++) {\n\t\t\t\t\t\t\tmask_ids.push(this._newBlockBytes.readUnsignedInt());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (valid_command) {\n\n\t\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\n\t\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\n\t\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\n\t\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\n\t\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\n\t\t\t\t\t\t\tvar depth:number = props.get(6, -1);\n\t\t\t\t\t\t\tvar mask:Array<number> = props.get(7, []);\n\t\t\t\t\t\t\t// todo: handle filters\n\n\t\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\n\n\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d.length;\n\t\t\t\t\t\t\tif (matrix_2d.length == 6) {\n\t\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\n\t\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\n\t\t\t\t\t\t\t\t// todo is this correct for 2d -> 3d scale and rotation. (i doubt it)\n\t\t\t\t\t\t\t\tthisMatrix.rawData[0] = matrix_2d[0];\n\t\t\t\t\t\t\t\tthisMatrix.rawData[1] = matrix_2d[1];\n\t\t\t\t\t\t\t\tthisMatrix.rawData[4] = matrix_2d[2];\n\t\t\t\t\t\t\t\tthisMatrix.rawData[5] = matrix_2d[3];\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"_iMatrix3D\", thisMatrix));\n\n\t\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\n\t\t\t\t\t\t\tif (colortransform.length == 20) {\n\t\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\n\t\t\t\t\t\t\t\tcommandString += \"\\n                colorMatrix = \" + colortransform;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// blendmode must be positive to be valid\n\t\t\t\t\t\t\tif (blendmode >= 0) {\n\t\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\n\t\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\n\t\t\t\t\t\t\t\tcommandString += \"\\n                BlendMode = \" + blendmode_string;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// visibilty must be positive to be valid\n\t\t\t\t\t\t\tif (visibilty >= 0) {\n\t\t\t\t\t\t\t\tif (visibilty == 0)\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", false));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", true));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// depth must be positive to be valid\n\t\t\t\t\t\t\tif (depth >= 0) {\n\t\t\t\t\t\t\t\tcommandString += \"\\n                Depth = \" + depth;\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"__AS2Depth\", depth));\n\t\t\t\t\t\t\t\thasDepthChanges = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\n\t\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\n\t\t\t\t\t\t\tif (mask_ids.length > 0) {\n\t\t\t\t\t\t\t\tif((mask_ids.length==1)&&(mask_ids[0]==0)){\n\t\t\t\t\t\t\t\t\t// TODO: this object is used as mask\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                obj is used as mask\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// TODO: this object is masked by one or more objects defined by ids in mask-array\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                obj is masked by \"+mask_ids.length+\" objects\";\n\t\t\t\t\t\t\t\t\tfor (var cm:number = 0; cm < mask_ids.length; cm++) {\n\t\t\t\t\t\t\t\t\t\tcommandString += \"\\n                obj is masked by \"+mask_ids[cm];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// todo: handle filters\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 4:\n\n\t\t\t\t\t\t// Remove Object Command\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar instanceID = objectIDMap[objectID];\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildCommand(instanceID));\n\t\t\t\t\t\tcommandString += \"\\n       - Remove object with ID: \" + objectID;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 5:\n\n\t\t\t\t\t\t// Add Sound Command\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t// TODO: implement sound in timeline\n\t\t\t\t\t\tcommandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tcommandString += \"\\n       - Unknown Command Type = \" + commandType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasDepthChanges) {\n\t\t\t\t// only want to do this once after all children's depth values are updated\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\n\t\t\t\thasDepthChanges = false;\n\t\t\t}\n\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\n\t\t\tif (length_code > 0) {\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\n\t\t\t\t//frame.addToScript(frame_code);\n\t\t\t\ttraceString += \"\\nframe-code = \" + frame_code;\n\t\t\t}\n\t\t\ttraceString += commandString;\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\n\t\t\tconsole.log(traceString);\n\t\t\ttimeLineContainer.addFrame(frame);\n\n\t\t}\n\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\n\t\tthis._blocks[blockID].data = timeLineContainer;\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t}\n\t//Block ID = 1\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\n\t{\n\n\t\tvar geom:Geometry = new Geometry();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t// Loop through sub meshes\n\t\tvar subs_parsed:number = 0;\n\t\twhile (subs_parsed < num_subs) {\n\t\t\tvar is_curve_geom:boolean=false;\n\t\t\tvar i:number;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 4) {\n\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 7) {\n\n\t\t\t\t\tweights = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\n\t\t\t\t\tis_curve_geom=true;\n\t\t\t\t\tvar idx_pos:number = 0;\n\t\t\t\t\tvar idx_curves:number = 0;\n\t\t\t\t\tvar idx_uvs:number = 0;\n\n\t\t\t\t\tvar positions:Array<number> = new Array<number>();\n\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\n\t\t\t\t\t\tpositions[idx_pos++] =  this.readNumber(this._accuracyGeo);// type\n\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\n\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\n\t\t\tif(is_curve_geom){\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\n\t\t\t\tgeom.addSubGeometry(curve_sub_geom);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a CurveSubGeometry\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar triangle_sub_geom = new TriangleSubGeometry(true);\n\t\t\t\tif (weights)\n\t\t\t\t\ttriangle_sub_geom.jointsPerVertex = weights.length / (verts.length / 3);\n\t\t\t\tif (normals)\n\t\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\n\t\t\t\tif (uvs)\n\t\t\t\t\ttriangle_sub_geom.autoDeriveUVs = false;\n\t\t\t\t//triangle_sub_geom.autoDeriveNormals = false;\n\t\t\t\tif (true) {\n\t\t\t\t\ttriangle_sub_geom.autoDeriveTangents = true;\n\t\t\t\t}\n\t\t\t\ttriangle_sub_geom.updateIndices(indices);\n\t\t\t\ttriangle_sub_geom.updatePositions(verts);\n\t\t\t\ttriangle_sub_geom.updateVertexNormals(normals);\n\t\t\t\ttriangle_sub_geom.updateUVs(uvs);\n\t\t\t\ttriangle_sub_geom.updateVertexTangents(null);\n\t\t\t\ttriangle_sub_geom.updateJointWeights(weights);\n\t\t\t\ttriangle_sub_geom.updateJointIndices(w_indices);\n\n\t\t\t\tvar scaleU:number = subProps.get(1, 1);\n\t\t\t\tvar scaleV:number = subProps.get(2, 1);\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\n\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\t\tsetSubUVs = true;\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\n\t\t\t\t}\n\n\t\t\t\tif (setSubUVs)\n\t\t\t\t\ttriangle_sub_geom.scaleUV(scaleU, scaleV);\n\t\t\t\tgeom.addSubGeometry(triangle_sub_geom);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleSubGeometry\");\n\t\t\t}\n\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating meshes (and their material assignments.)\n\n\t\t\tsubs_parsed++;\n\t\t}\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\n\t\tthis._blocks[blockID].data = geom;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name);\n\t\t}\n\n\t}\n\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar subs_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\n\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\n\n\t\tswitch (primType) {\n\t\t\t// to do, not all properties are set on all primitives\n\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//geom.subGeometries;\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7)) {\n\t\t\t\tprimType = 0;\n\t\t\t}\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\n\t\t}\n\t}\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar par_id:number;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer;\n\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t}\n\t\t// in other versions we do not read the Container properties\n\t\telse {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t\t}\n\t}\n\n\t// Block ID = 23\n\tprivate parseMeshInstance(blockID:number):void\n\t{\n\t\tvar num_materials:number;\n\t\tvar materials_parsed:number;\n\t\tvar parent:DisplayObjectContainer;\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar geom:Geometry;\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [Geometry.assetType])\n\n\t\tif (returnedArrayGeometry[0]) {\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\n\t\t\tgeom = new Geometry();\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tmaterials_parsed = 0;\n\n\t\tvar returnedArrayMaterial:Array<any>;\n\n\t\twhile (materials_parsed < num_materials) {\n\t\t\tvar mat_id:number;\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [MaterialBase.assetType])\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\n\t\t\t}\n\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\n\n\t\t\tmaterials.push(m);\n\t\t\tmaterialNames.push(m.name);\n\n\t\t\tmaterials_parsed++;\n\t\t}\n\n\t\tvar mesh:Mesh = new Mesh(geom, null);\n\t\tmesh.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\n\n\t\tif (returnedArrayParent[0]) {\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(mesh);\n\t\t\tparentName = objC.name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\t\t}\n\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\tvar i:number;\n\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\n\t\t\tmesh.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [TextureBase.assetType], \"CubeTexture\");\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\n\n\t\tthis.parseProperties(null)\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\n\n\t}\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number):void\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\n\t\t}\n\n\t\tif (lightType == 2) {\n\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\n\t\t}\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tif (par_id != 0) {\n\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\n\n\t\t\tif (returnedArrayParent[0]) {\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\n\t\t\t}\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\n\t}\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number):void\n\t{\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType])\n\n\t\tif (returnedArrayParent[0]) {\n\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(camera);\n\n\t\t\tparentName = objC.name;\n\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t\t}\n\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\t\tvar k:number = 0;\n\t\tvar lightID:number = 0;\n\n\t\tvar returnedArrayLight:Array<any>;\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (k = 0; k < numLights; k++) {\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [LightBase.assetType])\n\n\t\t\tif (returnedArrayLight[0]) {\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\n\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\n\t\t\t}\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\n\t\t}\n\t}\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number):void\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar attributes:Object;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\t\tvar debugString:string = \"\";\n\t\tattributes = this.parseUserAttributes();\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number;\n\t\t\tcolor = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar tex_addr:number = props.get(2, 0);\n\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [TextureBase.assetType]);\n\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\n\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = attributes;\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.repeat = props.get(13, false);\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\n\t\t}\n\t}\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number):void\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar normalTexture:Texture2DBase;\n\t\tvar specTexture:Texture2DBase;\n\t\tvar returnedArray:Array<any>;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [TextureBase.assetType]);\n\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\n\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\n\n\t\t\t\t\tmat = new MethodMaterial(texture);\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar diffuseTexture:Texture2DBase;\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\n\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [TextureBase.assetType]);\n\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\n\t\t\t\tif (returnedArray[0])\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\n\n\t\t\t\tif (diffuseTexture) {\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\n\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [TextureBase.assetType]);\n\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\n\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\tnormalTexture = returnedArray[1];\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [TextureBase.assetType]);\n\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\tspecTexture = returnedArray[1];\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [LightPickerBase.assetType])\n\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\n\t\t\t\t} else {\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\n\t\t\t\t}\n\n\t\t\t\tmat.smooth = props.get(5, true);\n\t\t\t\tmat.mipmap = props.get(6, true);\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\t\t\t\tmat.repeat = props.get(13, false);\n\n\t\t\t\tif (normalTexture)\n\t\t\t\t\tmat.normalMap = normalTexture;\n\n\t\t\t\tif (specTexture)\n\t\t\t\t\tmat.specularMap = specTexture;\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambient = props.get(15, 1.0);\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\n\t\t\t\tmat.specular = props.get(18, 1.0);\n\t\t\t\tmat.gloss = props.get(19, 50);\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\n\n\t\t\t\tvar methods_parsed:number = 0;\n\t\t\t\tvar targetID:number;\n\n\t\t\t\twhile (methods_parsed < num_methods) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties({\n\t\t\t\t\t\t1: AWDParser.BADDR,\n\t\t\t\t\t\t2: AWDParser.BADDR,\n\t\t\t\t\t\t3: AWDParser.BADDR,\n\t\t\t\t\t\t101: this._propsNrType,\n\t\t\t\t\t\t102: this._propsNrType,\n\t\t\t\t\t\t103: this._propsNrType,\n\t\t\t\t\t\t201: AWDParser.UINT32,\n\t\t\t\t\t\t202: AWDParser.UINT32,\n\t\t\t\t\t\t301: AWDParser.UINT16,\n\t\t\t\t\t\t302: AWDParser.UINT16,\n\t\t\t\t\t\t401: AWDParser.UINT8,\n\t\t\t\t\t\t402: AWDParser.UINT8,\n\t\t\t\t\t\t601: AWDParser.COLOR,\n\t\t\t\t\t\t602: AWDParser.COLOR,\n\t\t\t\t\t\t701: AWDParser.BOOL,\n\t\t\t\t\t\t702: AWDParser.BOOL,\n\t\t\t\t\t\t801: AWDParser.MTX4x4\n\t\t\t\t\t});\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [EffectMethodBase.assetType]);\n\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\n\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\n\t\t\t\t\t\t\tif (!mat.normalMap)\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\n\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t\tmethods_parsed += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: we should not need this anymore (if using texture-atlas)\n\t\telse if ((type>=3)&&(type<=7)){\n\t\t\t// if this is a curve material, we create it, finalize it, assign it to block-cache and return and return.\n\t\t\tvar color:number = props.get(1, 0xcccccc);\n\t\t\tdebugString+=color;\n\n\t\t\tvar diffuseTexture:Texture2DBase;\n\t\t\tvar diffuseTex_addr:number = props.get(2, 0);\n\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [TextureBase.assetType]);\n\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\tdiffuseTexture = DefaultMaterialManager.getDefaultTexture();\n\t\t\t}\n\n\t\t\tif (returnedArray[0])\n\t\t\t\tdiffuseTexture = returnedArray[1];\n\t\t\tvar curve_mat:CurveMaterial = new CurveMaterial(diffuseTexture);\n\t\t\t//debugString+= \" alpha = \"+props.get(10, 1.0)+\" \";\n\t\t\tdebugString+= \" texture = \"+diffuseTex_addr+\" \";\n\t\t\tcurve_mat.bothSides = true;\n\t\t\tcurve_mat.preserveAlpha = true;\n\t\t\tcurve_mat.alphaBlending = true;\n\t\t\tcurve_mat.extra = this.parseUserAttributes();\n\t\t\tthis._pFinalizeAsset(<IAsset> curve_mat, name);\n\t\t\tthis._blocks[blockID].data = curve_mat;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(debugString);\n\t\t\treturn;\n\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\t\t}\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number):void\n\t{\n\n\t\tvar asset:Texture2DBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\n\t\t}\n\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number):void\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar asset:CubeTextureBase;\n\t\tvar i:number;\n\n\t\tthis._cubeTextures = new Array<any>();\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\t\t\tthis._cubeTextures.push(null);\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray;\n\t\t\t\tdata = new ByteArray();\n\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\n\t\t}\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number):void\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t\t}\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number):void\n\t{\n\t\tvar type:number;\n\t\tvar data_len:number;\n\t\tvar asset:ShadowMethodBase;\n\t\tvar shadowLightID:number;\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [LightBase.assetType]);\n\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\n\t\t\treturn;\n\t\t}\n\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\n\t\t}\n\t}\n\n\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number):void\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar parentObject:DisplayObjectContainer;\n\t\tvar targetObject:DisplayObjectContainer;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [DisplayObjectContainer.assetType, LightBase.assetType, Mesh.assetType]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\n\t\t}\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\n\t\t\t\tvar targetID:number = props.get(1, 0);\n\t\t\t\t//var returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [LightBase.assetType, TextureProjector.assetType]); //for no only light is requested!!!!\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [LightBase.assetType]); //for no only light is requested!!!!\n\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttargetObject = returnedArrayTarget[1];\n\n\t\t\t\tif (parentObject) {\n\t\t\t\t\tparentObject.addChild(targetObject);\n\t\t\t\t}\n\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\n\t\t}\n\t\tthis._blocks[blockID].data = targetObject\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t\t}\n\n\t}\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number):void\n\t{\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number):void\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ShadowMapMethodBase.assetType]);\n\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\n\t\t\t\t\treturn shadowMethod;\n\t\t\t\t}\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\n\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t\tjoints_parsed++;\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\t\tthis._blocks[blockID].data = skeleton;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t\tjoints_parsed++;\n\t\t}\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\t\tthis._blocks[blockID].data = pose;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_addr:number /*uint*/;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar returnedArray:Array<any>;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [SkeletonPose.assetType]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\n\t\t\telse\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\n\t{\n\t\tvar num_frames:number /*uint*/ = 1;\n\t\tvar num_submeshes:number /*uint*/;\n\t\tvar frames_parsed:number /*uint*/;\n\t\tvar subMeshParsed:number /*uint*/;\n\t\tvar frame_dur:number;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Array<number> /*uint*/;\n\t\tvar verts:Array<number>;\n\t\tvar num_Streams:number /*int*/ = 0;\n\t\tvar streamsParsed:number /*int*/ = 0;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar thisGeo:Geometry;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [Geometry.assetType]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\n\t\t\treturn;\n\t\t}\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\n\t\tif (!poseOnly)\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\n\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\n\t\tstreamsParsed = 0;\n\t\twhile (streamsParsed < num_Streams) {\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\t\t\tstreamsParsed++;\n\t\t}\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tframes_parsed = 0;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgeometry = new Geometry();\n\t\t\tsubMeshParsed = 0;\n\t\t\twhile (subMeshParsed < num_submeshes) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\n\t\t\t\t\t\tsubMeshParsed++;\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(geometry, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\n\t{\n\t\tvar poseBlockAdress:number /*int*/\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AnimationNodeBase.assetType]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\n\t\t\telse {\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\n\t\t\t}\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AnimationNodeBase.assetType]);\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\n\n\t\t}\n\t}\n\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\n\t{\n\t\tvar targetMesh:Mesh;\n\t\tvar animSetBlockAdress:number /*int*/\n\t\tvar targetAnimationSet:AnimationSetBase;\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar returnedArray:Array<any>;\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\n\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [Mesh.assetType]);\n\t\t\tif (returnedArray[0])\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\n\t\t}\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AnimationSetBase.assetType]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\n\t\t\treturn\n\t\t}\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1) {\n\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [Skeleton.assetType]);\n\t\t\tif (!returnedArray[0]) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\n\n\t\t} else if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\tif (type == 2)\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\n\n\t\t}\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\tconsole.log('ENV MAP', targetID);\n\n\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ TextureBase.assetType ], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\n\t\t\t\ttargetID = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\n\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureProjector.assetType]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [TextureBase.assetType], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar attributes:Object;\n\t\tvar list_len:number;\n\t\tvar attibuteCnt:number;\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\n\t\t\tvar list_end:number;\n\n\t\t\tattributes = {};\n\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\t\t\t\tattibuteCnt += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_end:number;\n\t\tvar list_len:number;\n\t\tvar propertyCnt:number = 0;\n\t\tvar props:AWDProperties = new AWDProperties();\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar len:number;\n\t\t\t\tvar key:number;\n\t\t\t\tvar type:number;\n\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\n\t\t\t\tpropertyCnt += 1;\n\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\n\t\tswitch (type) {\n\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_read:number = 0;\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\twhile (num_read < num_elems) {\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\n\t\t\t\tnum_read++;\n\t\t\t}\n\n\t\t\treturn list;\n\t\t} else {\n\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tprivate parseHeader():void\n\t{\n\t\tvar flags:number;\n\t\tvar body_len:number;\n\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\n\t\t// set storagePrecision types\n\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyGeo) {\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyMatrix) {\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyProps) {\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tbody_len = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\t\t}\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\n\t{\n\t\tif (this._blocks[meshID].data instanceof Mesh)\n\t\t\tmeshID = this._blocks[meshID].geoID;\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\n\t\tvar geoCnt:number /*int*/ = 0;\n\t\tvar ud:Array<number>;\n\t\tvar uStride:number /*uint*/;\n\t\tvar uOffs:number /*uint*/;\n\t\tvar numPoints:number /*uint*/;\n\t\tvar i:number /*int*/;\n\t\tvar newUvs:Array<number>;\n\t\tvar sub_geom:TriangleSubGeometry;\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\n\t\twhile (geoCnt < geometry.subGeometries.length) {\n\t\t\tnewUvs = new Array<number>();\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\n\t\t\tnumPoints = sub_geom.numVertices;\n\t\t\tud = sub_geom.uvs;\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\n\t\t\tfor (i = 0; i < numPoints; i++) {\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\n\t\t\t}\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\n\t\t\tgeoCnt++;\n\t\t}\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\n\t\treturn this._newBlockBytes.readUTFBytes(len);\n\t}\n\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\n\t{\n\t\tvar returnArray:Array<any> = new Array<any>();\n\t\tvar typeCnt:number = 0;\n\t\tif (assetID > 0) {\n\t\t\tif (this._blocks[assetID]) {\n\t\t\t\tif (this._blocks[assetID].data) {\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\n\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\n\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\n\t\t\t\t\t\t\t//if the right assetType was found\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == TextureBase.assetType) && (extraTypeInfo == \"CubeTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == TextureBase.assetType) && (extraTypeInfo == \"SingleTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == Geometry.assetType) && (IAsset(_blocks[assetID].data).assetType == Mesh.assetType)) {\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == Geometry.assetType) && (iasset.assetType == Mesh.assetType)) {\n\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\n\n\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\n\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttypeCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\n\t\treturnArray.push(false);\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\n\t\treturn returnArray;\n\t}\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\n\t{\n\t\tswitch (true) {\n\t\t\tcase (assetType == TextureBase.assetType):\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\n\t\t\t\t\treturn this.getDefaultCubeTexture();\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\n\t\t\t\tbreak;\n\t\t\tcase (assetType == MaterialBase.assetType):\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getDefaultCubeTexture():IAsset\n\t{\n\t\tif (!this._defaultCubeTexture) {\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\n\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\n\t\t}\n\n\t\treturn <IAsset> this._defaultCubeTexture;\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\t\treturn this._newBlockBytes.readFloat();\n\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar i:number;\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n}\n\nexport = AWDParser;\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic data:any;\n\tpublic len:any;\n\tpublic geoID:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\n\n\tconstructor()\n\t{\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any):void\n\t{\n\t\tthis[ key.toString() ] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\tif (this.hasOwnProperty(key.toString())) {\n\t\t\treturn this[key.toString()];\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapData\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\n\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current subgeom being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstSubGeom:TriangleSubGeometry;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _mesh:Mesh;\n\tprivate _geometry:Geometry;\n\n\tprivate materialFinal:boolean = false;\n\tprivate geoCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\n\n\t\tif (asset) {\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\n\n\t\t\tif (this.materialMode >= 2)\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\tmaterial.name = this._mesh.material.name;\n\t\t\tthis._mesh.material = material;\n\t\t\tthis._pFinalizeAsset(material);\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t}\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\tthis._pFinalizeAsset(this._mesh);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._geometry = new Geometry();\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.geoCreated) {\n\t\t\t\tthis.geoCreated = true;\n\t\t\t\t//create default subgeometry\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._mesh.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader()\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames()\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the mesh.\n\t */\n\tprivate parseUV()\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces()\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame geometries.\n\t */\n\tprivate parseFrames()\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\tsubGeom = new TriangleSubGeometry(true);\n\n\t\t\tif (this._firstSubGeom == null)\n\t\t\t\tthis._firstSubGeom = subGeom;\n\n\t\t\tgeometry = new Geometry();\n\t\t\tgeometry.addSubGeometry(subGeom);\n\n\t\t\tsubGeom.updateIndices(this._indices);\n\t\t\tsubGeom.updatePositions(fvertices);\n\t\t\tsubGeom.updateUVs(this._finalUV);\n\t\t\tsubGeom.vertexNormals;\n\t\t\tsubGeom.vertexTangents;\n\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\tsubGeom.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _mesh:Mesh;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _meshData:Array<MeshData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _geometry:Geometry;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5mesh\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\n\t\t\t\tthis._geometry = this._mesh.geometry;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\n\n\t\t\t\t//_geometry.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\n\t\t\tvar meshData:MeshData = this._meshData[i];\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = vertex.startWeight;\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh geometry.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar vertexData:Array<VertexData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(vertexData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._meshData == null)\n\t\t\tthis._meshData = new Array<MeshData>();\n\n\t\tvar i:number /*uint*/ = this._meshData.length;\n\t\tthis._meshData[i] = new MeshData();\n\t\tthis._meshData[i].vertexData = vertexData;\n\t\tthis._meshData[i].weightData = weights;\n\t\tthis._meshData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the mesh data to a SkinnedSub instance.\n\t * @param vertexData The mesh's vertices.\n\t * @param weights The joint weights per vertex.\n\t * @param indices The indices for the faces.\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\n\t */\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\n\t{\n\t\tvar len:number /*int*/ = vertexData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar vertex:VertexData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tvertex = vertexData[i];\n\t\t\tv1 = vertex.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\n\t\t\t\tweight = weights[vertex.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = vertex.index << 1;\n\t\t\tuvs[v1++] = vertex.s;\n\t\t\tuvs[v1] = vertex.t;\n\t\t}\n\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\n\t\tsubGeom.updateIndices(indices);\n\t\tsubGeom.updatePositions(vertices);\n\t\tsubGeom.updateUVs(uvs);\n\t\tsubGeom.updateJointIndices(jointIndices);\n\t\tsubGeom.updateJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\tsubGeom.vertexNormals;\n\t\tsubGeom.vertexTangents;\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\tsubGeom.autoDeriveTangents = false;\n\t\tsubGeom.autoDeriveNormals = false;\n\n\t\treturn subGeom;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of vertex indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single vertex.\n\t * @param vertexData The list to contain the vertex data.\n\t */\n\tprivate parseVertex(vertexData:Array<VertexData>):void\n\t{\n\t\tvar vertex:VertexData = new VertexData();\n\t\tvertex.index = this.getNextInt();\n\t\tthis.parseUV(vertex);\n\t\tvertex.startWeight = this.getNextInt();\n\t\tvertex.countWeight = this.getNextInt();\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\n\t\tvertexData[vertex.index] = vertex;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param vertexData The vertexData to contain the UV coordinates.\n\t */\n\tprivate parseUV(vertexData:VertexData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvertexData.s = this.getNextNumber();\n\t\tvertexData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5MeshParser;\n\n\nclass VertexData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass MeshData\n{\n\tpublic vertexData:Array<VertexData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.isAsset(TextureBase)) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = <Texture2DBase> asset;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = Mesh.assetType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == Mesh.assetType) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleSubGeometry;\n\t\t\tvar geom:Geometry;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar mesh:Mesh;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeom = new Geometry();\n\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\n\t\t\t// and add them to geometry.\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.updateIndices(obj.indices);\n\t\t\tsub.updatePositions(obj.verts);\n\t\t\tsub.updateUVs(obj.uvs);\n\n\t\t\tgeom.addSubGeometry(sub);\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Apply pivot translation to geometry if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\n\t\t\t\t\tdat[12] = 0;\n\t\t\t\t\tdat[13] = 0;\n\t\t\t\t\tdat[14] = 0;\n\t\t\t\t\tmtx = new Matrix3D(dat);\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to geometry if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\n\n\t\t\t// Build mesh and return it\n\t\t\tmesh = new Mesh(geom, mat);\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\n\t\t\treturn mesh;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\n\t\telse\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\n\t\tmat.specularColor = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Array<number>\n\t{\n\t\tvar data:Array<number>;\n\n\t\tdata = new Array<number>(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport = Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Array<number>;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Texture2DBase;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Geometry\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _meshes:Array<Mesh>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.isAsset(TextureBase)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = <Texture2DBase> asset;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._meshes.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._meshes = new Array<Mesh>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar geometry:Geometry;\n\t\t\tvar mesh:Mesh;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tgeometry = new Geometry();\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\n\n\t\t\t\tif (geometry.subGeometries.length == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\n\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\n\t\t\t\t\tmesh.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tmesh.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._meshes.push(mesh);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\n\n\t\t\t\tif (mesh.subMeshes.length > 1) {\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgeometry.\n\t * @param materialGroup The material group data to convert.\n\t * @param geometry The Geometry to contain the converted SubGeometry.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar sub:TriangleSubGeometry;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\n\t\t\tsub.updateIndices(indices);\n\t\t\tsub.updatePositions(vertices);\n\t\t\tsub.updateVertexNormals(normals);\n\t\t\tsub.updateUVs(uvs);\n\n\t\t\tgeometry.addSubGeometry(sub);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial;\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm = new MethodMaterial(color);\n\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\n\n\t\t\t\t\tcolorMat.alpha = alpha;\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMat.specular = specular;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcm = new MethodMaterial(color);\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\n\n\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMultiMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar mesh:Mesh;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\n\t\t\tmesh = this._meshes[i];\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (mesh.material)\n\t\t\t\t\t\tmesh.material = null;\n\t\t\t\t\tmesh.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._meshes.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport = OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Texture2DBase;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\n\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport = Parsers;"
  ],
  "sourceRoot": ""
}