{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "AssetType",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "ByteArray",
    "DisplayObjectContainer",
    "Geometry",
    "TriangleSubGeometry",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "Billboard",
    "Skybox",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "DefaultMaterialManager",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "CurveSubGeometry",
    "CurveMaterial",
    "BasicMaterial",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildCommand",
    "UpdatePropertyCommand",
    "RemoveChildCommand",
    "ApplyAS2DepthsCommand",
    "Font",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseMeshLibraryBlock",
    "parseBillBoardLibraryBlock",
    "parseAudioBlock",
    "parseTimeLine",
    "paresTextField",
    "parseTesselatedFont",
    "parseTextFormat",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "font_style_cnt",
    "new_font",
    "font_style_name",
    "new_font_style",
    "get_font_table",
    "set_font_em_size",
    "font_style_char_cnt",
    "font_style_char",
    "sm_len",
    "sm_end",
    "idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "indices",
    "readUnsignedShort",
    "idx_pos",
    "idx_curves",
    "idx_uvs",
    "positions",
    "curveData",
    "uvs",
    "readNumber",
    "curve_sub_geom",
    "updateIndices",
    "updatePositions",
    "updateCurves",
    "updateUVs",
    "set_subgeo_for_char",
    "parseProperties",
    "parseUserAttributes",
    "data_id",
    "returnedArrayMaterial",
    "getAssetByID",
    "MATERIAL",
    "addError",
    "bothSides",
    "billboard",
    "extra",
    "num_materials",
    "materials_parsed",
    "geom",
    "returnedArrayGeometry",
    "GEOMETRY",
    "geoID",
    "materials",
    "materialNames",
    "mat_id",
    "m",
    "mesh",
    "subMeshes",
    "material",
    "Math",
    "min",
    "data_len",
    "url",
    "readUTFBytes",
    "extras",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "k",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "readFloat",
    "ms_per_frame",
    "numFrames",
    "objectIDMap",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "labelType",
    "label",
    "numCommands",
    "hasDepthChanges",
    "commandString",
    "objectID",
    "resourceID",
    "commandType",
    "valid_command",
    "instanceID",
    "instanceName",
    "cmd_asset",
    "registerPotentialChild",
    "addConstructCommand",
    "props",
    1,
    2,
    3,
    4,
    "UINT8",
    5,
    6,
    "UINT32",
    7,
    "matrix_2d",
    "get",
    "colortransform",
    "blendmode",
    "visibilty",
    "depth",
    "mask",
    "thisMatrix",
    "rawData",
    "blendmode_string",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_curve_geom",
    "w_indices",
    "weights",
    "subProps",
    "x",
    "y",
    "z",
    "verts",
    "normals",
    "addSubGeometry",
    "triangle_sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateVertexNormals",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    "UINT16",
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "returnedArray",
    "CONTAINER",
    "LIGHT",
    "MESH",
    "obj",
    "addChild",
    "pivot",
    "returnedArrayParent",
    "objC",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "TEXTURE",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "LIGHT_PICKER",
    "lightPicker",
    "smooth",
    "mipmap",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "EFFECTS_METHOD",
    "addEffectMethod",
    "SHADOW_MAP_METHOD",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "getDefaultTexture",
    "curve_mat",
    "preserveAlpha",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "TEXTURE_PROJECTOR",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "SKELETON_POSE",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "ANIMATION_NODE",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "ANIMATION_SET",
    "thisAnimator",
    "SKELETON",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "sub_geom",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "assetType",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/base/BlendMode",
    "undefined",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/library/AssetType",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/CurveSubGeometry",
    "awayjs-display/lib/base/Geometry",
    "awayjs-display/lib/base/TriangleSubGeometry",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Billboard",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/materials/CurveMaterial",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-display/lib/text/Font",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/fl/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/fl/timeline/TimelineKeyFrame",
    "awayjs-player/lib/fl/timeline/commands/AddChildCommand",
    "awayjs-player/lib/fl/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/fl/timeline/commands/RemoveChildCommand",
    "awayjs-player/lib/fl/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-renderergl/lib/managers/DefaultMaterialManager",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "v",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "g",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BlendMode\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport Billboard\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\n\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\n\nimport SubGeometryBase\t\t\t\t\t= require(\"awayjs-display/lib/base/SubGeometryBase\");\nimport CurveSubGeometry\t\t\t\t\t= require(\"awayjs-display/lib/base/CurveSubGeometry\");\nimport CurveMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/CurveMaterial\")\nimport BasicMaterial\t\t\t\t\t= require(\"awayjs-display/lib/materials/BasicMaterial\");\n\n\nimport TimelineSceneGraphFactory \t= require(\"awayjs-player/lib/fl/factories/TimelineSceneGraphFactory\");\nimport AS2SceneGraphFactory \t\t= require(\"awayjs-player/lib/fl/factories/AS2SceneGraphFactory\");\nimport MovieClip \t\t\t\t\t= require(\"awayjs-player/lib/fl/display/MovieClip\");\nimport TimelineKeyFrame \t\t\t= require(\"awayjs-player/lib/fl/timeline/TimelineKeyFrame\");\nimport AddChildCommand \t\t\t\t= require(\"awayjs-player/lib/fl/timeline/commands/AddChildCommand\");\nimport UpdatePropertyCommand \t\t= require(\"awayjs-player/lib/fl/timeline/commands/UpdatePropertyCommand\");\nimport RemoveChildCommand \t\t\t= require(\"awayjs-player/lib/fl/timeline/commands/RemoveChildCommand\");\nimport ApplyAS2DepthsCommand\t\t= require(\"awayjs-player/lib/fl/timeline/commands/ApplyAS2DepthsCommand\");\n\nimport Font\t\t\t\t\t\t\t= require(\"awayjs-display/lib/text/Font\");\nimport TesselatedFontTable\t\t\t= require(\"awayjs-display/lib/text/TesselatedFontTable\");\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = true;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _matrixNrType:number;\n\tprivate _geoNrType:number;\n\tprivate _propsNrType:number;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\n\tprivate _cubeTextures:Array<any>;\n\tprivate _defaultBitmapMaterial:MethodMaterial;\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\t/**\n\t * Creates a new AWDParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor()\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock();\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\n\t\t\tvar asset:TextureProxyBase;\n\t\t\tvar thisBitmapTexture:Texture2DBase;\n\t\t\tvar block:AWDBlock;\n\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\n\t\t\t{\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\n\t\t\t\tif (asset) {\n\t\t\t\t\tvar mat:MethodMaterial;\n\t\t\t\t\tvar users:Array<string>;\n\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\n\t\t\t{\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\n\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\n\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\n\t\t\t\tthis._texture_users[ressourceID].push(1);\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\n\t\t\t\t}\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\n\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\n\n\t\t\t\t\tasset = <TextureProxyBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\n\t\t\t\t\tblock = this._blocks[ressourceID];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWDParser.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWDParser.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t{\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t}\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\n\t\t}\n\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate dispose():void\n\t{\n\n\t\tfor (var c in this._blocks) {\n\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\n\t\t\tb.dispose();\n\n\t\t}\n\n\t}\n\n\tprivate parseNextBlock():void\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar assetData:IAsset;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyGeo) {\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyMatrix) {\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyProps) {\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t\t}\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\t\tthis._newBlockBytes = new ByteArray();\n\n\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tthis._newBlockBytes.position = 0;\n\t\tblock = new AWDBlock();\n\t\tblock.len = this._newBlockBytes.position + len;\n\t\tblock.id = this._cur_block_id;\n\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory();\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 24:\n\t\t\t\t\tthis.parseMeshLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 25:\n\t\t\t\t\tthis.parseBillBoardLibraryBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 44:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 134:\n\t\t\t\t\tthis.paresTextField(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 135:\n\t\t\t\t\tthis.parseTesselatedFont(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 136:\n\t\t\t\t\tthis.parseTextFormat(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//*/\n\t\t}\n\t\t//*\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\t\t\t\t\t}\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//*/\n\n\t\tvar msgCnt:number = 0;\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\n\t\t\tif (this._debug) {\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(\"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._debug) {\n\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\n\tprivate parseTesselatedFont(blockID:number):void {\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\t//console.log(\"Font name = \"+this._blocks[blockID].name);\n\t\tvar font_style_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\t//console.log(\"Font font_style_cnt = \"+font_style_cnt);\n\t\tvar new_font:Font=new Font();\n\t\tfor (var i:number = 0; i < font_style_cnt; ++i) {\n\t\t\tvar font_style_name:string = this.parseVarStr();\n\t\t\t//console.log(\"Font font_style_name = \"+font_style_name);\n\t\t\tvar new_font_style:TesselatedFontTable=new_font.get_font_table(font_style_name);\n\t\t\tnew_font_style.set_font_em_size(this._newBlockBytes.readUnsignedInt());\n\t\t\t//console.log(\"Font new_font_style.font_em_size = \"+new_font_style.get_font_em_size);\n\t\t\tvar font_style_char_cnt:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t//console.log(\"Font font_style_char_cnt = \"+font_style_char_cnt);\n\t\t\tfor (var i:number = 0; i < font_style_char_cnt; ++i) {\n\n\t\t\t\tvar font_style_char:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t//console.log(\"Font font_style_char = \"+font_style_char);\n\t\t\t\t// todo: this is basically a simplified version of the subgeom-parsing done in parseTriangleGeometry. Make a parseSubGeom() instead (?)\n\t\t\t\tvar sm_len:number = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar sm_end:number = this._newBlockBytes.position + sm_len;\n\t\t\t\t//console.log(\"Font sm_len = \"+sm_len);\n\n\t\t\t\t//this.parseProperties(null); // no properties for font-table subgeos\n\t\t\t\t// Loop through data streams\n\t\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\t\tvar idx:number = 0;\n\t\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t\t// Type, field type, length\n\t\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\t\tif (str_type == 2) {//face indicies positions\n\t\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\n\t\t\t\t\t\tvar idx_pos:number = 0;\n\t\t\t\t\t\tvar idx_curves:number = 0;\n\t\t\t\t\t\tvar idx_uvs:number = 0;\n\n\t\t\t\t\t\tvar positions:Array<number> = new Array<number>();\n\t\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\n\t\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\n\t\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// type\n\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\n\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//this.parseProperties(null);// no attributes for font-table subgeos\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\n\t\t\t\tnew_font_style.set_subgeo_for_char(font_style_char.toString(), curve_sub_geom);\n\t\t\t}\n\n\t\t}\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset>new_font, name);\n\t\tthis._blocks[blockID].data = new_font;\n\t}\n\n\tprivate parseTextFormat(blockID:number):void {\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t}\n\tprivate paresTextField(blockID:number):void {\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t}\n\n\t// Block ID = 25\n\tprivate parseBillBoardLibraryBlock(blockID:number):void {\n\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mat:BasicMaterial;\n\t\tvar returnedArrayMaterial:Array<any> = this.getAssetByID(data_id, [AssetType.MATERIAL])\n\n\t\tif (returnedArrayMaterial[0]) {\n\t\t\tmat = <BasicMaterial> returnedArrayMaterial[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Material for this Billboard. A empty material is created!\");\n\t\t\tmat = new BasicMaterial();\n\t\t}\n\t\tmat.bothSides=true;\n\t\tvar billboard:Billboard = new Billboard(mat);\n\n\t\t// todo: optional matrix etc can be put in properties.\n\t\tthis.parseProperties(null);\n\n\t\tbillboard.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> billboard, name);\n\t\tthis._blocks[blockID].data = billboard;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Library-Billboard: Name = '\" + name + \"| Material-Name = \" + mat.name);\n\t\t}\n\t}\n\t// Block ID = 24\n\tprivate parseMeshLibraryBlock(blockID:number):void {\n\t\tvar num_materials:number;\n\t\tvar materials_parsed:number;\n\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar geom:Geometry;\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\n\n\t\tif (returnedArrayGeometry[0]) {\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\n\t\t\tgeom = new Geometry();\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tmaterials_parsed = 0;\n\n\t\tvar returnedArrayMaterial:Array<any>;\n\n\t\twhile (materials_parsed < num_materials) {\n\t\t\tvar mat_id:number;\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\n\t\t\t}\n\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\n\n\t\t\tmaterials.push(m);\n\t\t\tmaterialNames.push(m.name);\n\n\t\t\tmaterials_parsed++;\n\t\t}\n\n\t\tvar mesh:Mesh = new Mesh(geom, null);\n\n\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\tvar i:number;\n\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\n\t\t\t}\n\t\t}\n\t\tthis.parseProperties(null);\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Library-Mesh: Name = '\" + name + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\n\t\t}\n\t}\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\n\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t\tconsole.log(\"Audio url = \"+url);\n\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\n\t\t}\n\t}\n\n\t//Block ID = 4\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\n\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar k:number;\n\t\tvar timeLineContainer = factory.createMovieClip();\n\t\tvar name = this.parseVarStr();\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\n\t\tvar fps:number = this._newBlockBytes.readFloat();\n\t\tvar ms_per_frame = 1000 / fps;\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\n\t\tvar objectIDMap : { [id:string]:number; } = {};\n\n\t\t// var previousTimeLine:TimeLineFrame;\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\n\n\t\tvar totalDuration = 0;\n\t\tfor (i = 0; i < numFrames; i++) {\n\n\t\t\tvar frame = new TimelineKeyFrame();\n\t\t\tvar traceString = \"frame = \" + i;\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt() * ms_per_frame;\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\n\t\t\ttotalDuration += frameDuration;\n\t\t\t//console.log(\"duration = \" + frameDuration);\n\t\t\ttraceString += \"duration = \" + frameDuration;\n\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedShort();\n\t\t\tfor (j = 0; j < numLabels; j++) {\n\t\t\t\tvar labelType = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tvar label = this.parseVarStr();\n\t\t\t\t// TODO: Handle labels differently\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\n\t\t\t\ttraceString += \"\\n     label = \" + label + \" - labelType = \" + labelType;\n\t\t\t}\n\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\n\t\t\ttraceString += \"\\n      Commands \" + numCommands;\n\t\t\tvar hasDepthChanges = false;\n\t\t\tvar commandString = \"\";\n\t\t\tfor (j = 0; j < numCommands; j++) {\n\t\t\t\tvar objectID:number;\n\t\t\t\tvar resourceID:number;\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t// 1 = Add object by local id (awd-block-id) + update properties\n\t\t\t\t// 2 = Add object by global id (string identifier) + update properties !Not used yet.!\n\t\t\t\t// 3 = UpdateObject - update a object that is already present\n\t\t\t\t// 4 = remove object\n\t\t\t\t// 5 = add / update sound\n\n\t\t\t\tswitch (commandType) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tvar valid_command:boolean = false;\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar instanceID = 0; // must be set in folling conditions:\n\t\t\t\t\t\tif (commandType == 1) {\n\t\t\t\t\t\t\t// this commands looks for a object by awd-id and puts it into the timeline\n\t\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\n\t\t\t\t\t\t\t// sound is added to timeline with dedicated Command, as it is no display-object (has no matrix etc)\n\t\t\t\t\t\t\t// check if a Geometry can be found at the resourceID (AWD-ID)\n\t\t\t\t\t\t\tvar cmd_asset:DisplayObject = <DisplayObject>this._blocks[resourceID].data;\n\t\t\t\t\t\t\tif (cmd_asset != null) {\n\t\t\t\t\t\t\t\tinstanceID = timeLineContainer.registerPotentialChild(cmd_asset);\n\t\t\t\t\t\t\t\tobjectIDMap[objectID] = instanceID;\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildCommand(instanceID));\n\n\t\t\t\t\t\t\t\tif (instanceName.length) {\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"name\", instanceName));\n\t\t\t\t\t\t\t\t\tcommandString += \"\\n                instanceName = \" + instanceName;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalid_command = true;\n\t\t\t\t\t\t\t\tcommandString += \"\\n      - Add new Resource = \" + resourceID + \" as object_id = \" + objectID;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tcommandString += \"\\n      - ERROR - object_id = \" + objectID + \" - NO DISPLAY_OBJECT AT ID = \" + resourceID;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (commandType == 3) {\n\t\t\t\t\t\t\tinstanceID = objectIDMap[objectID];\n\t\t\t\t\t\t\tvalid_command = true;\n\t\t\t\t\t\t\tcommandString += \"\\n      - Update object_id = \" + objectID;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// read the command properties\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\n\t\t\t\t\t\t// 4: blendmode (uint8)\n\t\t\t\t\t\t// 5: visibilty (uint8)\n\t\t\t\t\t\t// 6: depth (uint32)\n\t\t\t\t\t\t// 7: mask (uint32)\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({\n\t\t\t\t\t\t\t1: this._matrixNrType,\n\t\t\t\t\t\t\t2: this._matrixNrType,\n\t\t\t\t\t\t\t3: this._propsNrType,\n\t\t\t\t\t\t\t4: AWDParser.UINT8,\n\t\t\t\t\t\t\t5: AWDParser.UINT8,\n\t\t\t\t\t\t\t6: AWDParser.UINT32,\n\t\t\t\t\t\t\t7: AWDParser.UINT32\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (valid_command) {\n\n\t\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\n\t\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\n\t\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\n\t\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\n\t\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\n\t\t\t\t\t\t\tvar depth:number = props.get(6, -1);\n\t\t\t\t\t\t\tvar mask:number = props.get(7, -1);\n\t\t\t\t\t\t\t// todo: handle filters\n\n\t\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\n\n\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d.length;\n\t\t\t\t\t\t\tif (matrix_2d.length == 6) {\n\t\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\n\t\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\n\t\t\t\t\t\t\t\t// todo is this correct for 2d -> 3d scale and rotation. (i doubt it)\n\t\t\t\t\t\t\t\tthisMatrix.rawData[0] = matrix_2d[0];\n\t\t\t\t\t\t\t\tthisMatrix.rawData[1] = matrix_2d[1];\n\t\t\t\t\t\t\t\tthisMatrix.rawData[4] = matrix_2d[2];\n\t\t\t\t\t\t\t\tthisMatrix.rawData[5] = matrix_2d[3];\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"_iMatrix3D\", thisMatrix));\n\n\t\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\n\t\t\t\t\t\t\tif (colortransform.length == 20) {\n\t\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\n\t\t\t\t\t\t\t\tcommandString += \"\\n                colorMatrix = \" + colortransform;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// blendmode must be positive to be valid\n\t\t\t\t\t\t\tif (blendmode >= 0) {\n\t\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\n\t\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\n\t\t\t\t\t\t\t\tcommandString += \"\\n                BlendMode = \" + blendmode_string;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// visibilty must be positive to be valid\n\t\t\t\t\t\t\tif (visibilty >= 0) {\n\t\t\t\t\t\t\t\tif (visibilty == 0)\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", false));\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", true));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// depth must be positive to be valid\n\t\t\t\t\t\t\tif (depth >= 0) {\n\t\t\t\t\t\t\t\tcommandString += \"\\n                Depth = \" + depth;\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"__AS2Depth\", depth));\n\t\t\t\t\t\t\t\thasDepthChanges = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\n\t\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\n\t\t\t\t\t\t\tif (mask >= 0) {\n\t\t\t\t\t\t\t\tcommandString += \"\\n                Mask-up to obj-id: \" + mask;\n\t\t\t\t\t\t\t\t// TODO: set depthClipChange on objectProps\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// todo: handle filters\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 4:\n\n\t\t\t\t\t\t// Remove Object Command\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar instanceID = objectIDMap[objectID];\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildCommand(instanceID));\n\t\t\t\t\t\tcommandString += \"\\n       - Remove object with ID: \" + objectID;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 5:\n\n\t\t\t\t\t\t// Add Sound Command\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t// TODO: implement sound in timeline\n\t\t\t\t\t\tcommandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tcommandString += \"\\n       - Unknown Command Type = \" + commandType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasDepthChanges) {\n\t\t\t\t// only want to do this once after all children's depth values are updated\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\n\t\t\t\thasDepthChanges = false;\n\t\t\t}\n\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\n\t\t\tif (length_code > 0) {\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\n\t\t\t\t//frame.addToScript(frame_code);\n\t\t\t\ttraceString += \"\\nframe-code = \" + frame_code;\n\t\t\t}\n\t\t\ttraceString += commandString;\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\n\t\t\tconsole.log(traceString);\n\t\t\ttimeLineContainer.addFrame(frame);\n\n\t\t}\n\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\n\t\tthis._blocks[blockID].data = timeLineContainer;\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t}\n\t//Block ID = 1\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\n\t{\n\n\t\tvar geom:Geometry = new Geometry();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t// Loop through sub meshes\n\t\tvar subs_parsed:number = 0;\n\t\twhile (subs_parsed < num_subs) {\n\t\t\tvar is_curve_geom:boolean=false;\n\t\t\tvar i:number;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 4) {\n\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 7) {\n\n\t\t\t\t\tweights = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 5 x float32\n\t\t\t\t\tis_curve_geom=true;\n\t\t\t\t\tvar idx_pos:number = 0;\n\t\t\t\t\tvar idx_curves:number = 0;\n\t\t\t\t\tvar idx_uvs:number = 0;\n\n\t\t\t\t\tvar positions:Array<number> = new Array<number>();\n\t\t\t\t\tvar curveData:Array<number> = new Array<number>();\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// x\n\t\t\t\t\t\tpositions[idx_pos++] = this.readNumber(this._accuracyGeo);// y\n\t\t\t\t\t\tpositions[idx_pos++] =  this.readNumber(this._accuracyGeo);// type\n\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\tcurveData[idx_curves++] = this.readNumber(this._accuracyGeo);// curve value 2\n\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t\tuvs[idx_uvs++] = this.readNumber(this._accuracyGeo);// curve value 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\n\t\t\tif(is_curve_geom){\n\t\t\t\tvar curve_sub_geom:CurveSubGeometry = new CurveSubGeometry(true);\n\t\t\t\tcurve_sub_geom.updateIndices(indices);\n\t\t\t\tcurve_sub_geom.updatePositions(positions);\n\t\t\t\tcurve_sub_geom.updateCurves(curveData);\n\t\t\t\tcurve_sub_geom.updateUVs(uvs);\n\t\t\t\tgeom.addSubGeometry(curve_sub_geom);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a CurveSubGeometry\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar triangle_sub_geom = new TriangleSubGeometry(true);\n\t\t\t\tif (weights)\n\t\t\t\t\ttriangle_sub_geom.jointsPerVertex = weights.length / (verts.length / 3);\n\t\t\t\tif (normals)\n\t\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\n\t\t\t\tif (uvs)\n\t\t\t\t\ttriangle_sub_geom.autoDeriveUVs = false;\n\t\t\t\ttriangle_sub_geom.autoDeriveNormals = false;\n\t\t\t\tif (true) {\n\t\t\t\t\ttriangle_sub_geom.autoDeriveTangents = true;\n\t\t\t\t}\n\t\t\t\ttriangle_sub_geom.updateIndices(indices);\n\t\t\t\ttriangle_sub_geom.updatePositions(verts);\n\t\t\t\ttriangle_sub_geom.updateVertexNormals(normals);\n\t\t\t\ttriangle_sub_geom.updateUVs(uvs);\n\t\t\t\ttriangle_sub_geom.updateVertexTangents(null);\n\t\t\t\ttriangle_sub_geom.updateJointWeights(weights);\n\t\t\t\ttriangle_sub_geom.updateJointIndices(w_indices);\n\n\t\t\t\tvar scaleU:number = subProps.get(1, 1);\n\t\t\t\tvar scaleV:number = subProps.get(2, 1);\n\t\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\n\n\t\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\t\tsetSubUVs = true;\n\t\t\t\t\tscaleU = geoScaleU / scaleU;\n\t\t\t\t\tscaleV = geoScaleV / scaleV;\n\t\t\t\t}\n\n\t\t\t\tif (setSubUVs)\n\t\t\t\t\ttriangle_sub_geom.scaleUV(scaleU, scaleV);\n\t\t\t\tgeom.addSubGeometry(triangle_sub_geom);\n\t\t\t\tif (this._debug)\n\t\t\t\t\tconsole.log(\"Parsed a TriangleSubGeometry\");\n\t\t\t}\n\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating meshes (and their material assignments.)\n\n\t\t\tsubs_parsed++;\n\t\t}\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\n\t\tthis._blocks[blockID].data = geom;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name);\n\t\t}\n\n\t}\n\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar subs_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\n\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\n\n\t\tswitch (primType) {\n\t\t\t// to do, not all properties are set on all primitives\n\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//geom.subGeometries;\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7)) {\n\t\t\t\tprimType = 0;\n\t\t\t}\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\n\t\t}\n\t}\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar par_id:number;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer;\n\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t}\n\t\t// in other versions we do not read the Container properties\n\t\telse {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t\t}\n\t}\n\n\t// Block ID = 23\n\tprivate parseMeshInstance(blockID:number):void\n\t{\n\t\tvar num_materials:number;\n\t\tvar materials_parsed:number;\n\t\tvar parent:DisplayObjectContainer;\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar geom:Geometry;\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\n\n\t\tif (returnedArrayGeometry[0]) {\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\n\t\t\tgeom = new Geometry();\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tmaterials_parsed = 0;\n\n\t\tvar returnedArrayMaterial:Array<any>;\n\n\t\twhile (materials_parsed < num_materials) {\n\t\t\tvar mat_id:number;\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\n\t\t\t}\n\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\n\n\t\t\tmaterials.push(m);\n\t\t\tmaterialNames.push(m.name);\n\n\t\t\tmaterials_parsed++;\n\t\t}\n\n\t\tvar mesh:Mesh = new Mesh(geom, null);\n\t\tmesh.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\tif (returnedArrayParent[0]) {\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(mesh);\n\t\t\tparentName = objC.name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\t\t}\n\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\tvar i:number;\n\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\n\t\t\tmesh.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [AssetType.TEXTURE], \"CubeTexture\");\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\n\n\t\tthis.parseProperties(null)\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\n\n\t}\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number):void\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\n\t\t}\n\n\t\tif (lightType == 2) {\n\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\n\t\t}\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tif (par_id != 0) {\n\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\t\tif (returnedArrayParent[0]) {\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\n\t\t\t}\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\n\t}\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number):void\n\t{\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\tif (returnedArrayParent[0]) {\n\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(camera);\n\n\t\t\tparentName = objC.name;\n\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t\t}\n\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\t\tvar k:number = 0;\n\t\tvar lightID:number = 0;\n\n\t\tvar returnedArrayLight:Array<any>;\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (k = 0; k < numLights; k++) {\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [AssetType.LIGHT])\n\n\t\t\tif (returnedArrayLight[0]) {\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\n\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\n\t\t\t}\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\n\t\t}\n\t}\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number):void\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar attributes:Object;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\t\tvar debugString:string = \"\";\n\t\tattributes = this.parseUserAttributes();\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number;\n\t\t\tcolor = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar tex_addr:number = props.get(2, 0);\n\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\n\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = attributes;\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.repeat = props.get(13, false);\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\n\t\t}\n\t}\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number):void\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar normalTexture:Texture2DBase;\n\t\tvar specTexture:Texture2DBase;\n\t\tvar returnedArray:Array<any>;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\n\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\n\n\t\t\t\t\tmat = new MethodMaterial(texture);\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar diffuseTexture:Texture2DBase;\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\n\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\n\t\t\t\tif (returnedArray[0])\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\n\n\t\t\t\tif (diffuseTexture) {\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\n\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\n\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\tnormalTexture = returnedArray[1];\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\tspecTexture = returnedArray[1];\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [AssetType.LIGHT_PICKER])\n\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\n\t\t\t\t} else {\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\n\t\t\t\t}\n\n\t\t\t\tmat.smooth = props.get(5, true);\n\t\t\t\tmat.mipmap = props.get(6, true);\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\t\t\t\tmat.repeat = props.get(13, false);\n\n\t\t\t\tif (normalTexture)\n\t\t\t\t\tmat.normalMap = normalTexture;\n\n\t\t\t\tif (specTexture)\n\t\t\t\t\tmat.specularMap = specTexture;\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambient = props.get(15, 1.0);\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\n\t\t\t\tmat.specular = props.get(18, 1.0);\n\t\t\t\tmat.gloss = props.get(19, 50);\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\n\n\t\t\t\tvar methods_parsed:number = 0;\n\t\t\t\tvar targetID:number;\n\n\t\t\t\twhile (methods_parsed < num_methods) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties({\n\t\t\t\t\t\t1: AWDParser.BADDR,\n\t\t\t\t\t\t2: AWDParser.BADDR,\n\t\t\t\t\t\t3: AWDParser.BADDR,\n\t\t\t\t\t\t101: this._propsNrType,\n\t\t\t\t\t\t102: this._propsNrType,\n\t\t\t\t\t\t103: this._propsNrType,\n\t\t\t\t\t\t201: AWDParser.UINT32,\n\t\t\t\t\t\t202: AWDParser.UINT32,\n\t\t\t\t\t\t301: AWDParser.UINT16,\n\t\t\t\t\t\t302: AWDParser.UINT16,\n\t\t\t\t\t\t401: AWDParser.UINT8,\n\t\t\t\t\t\t402: AWDParser.UINT8,\n\t\t\t\t\t\t601: AWDParser.COLOR,\n\t\t\t\t\t\t602: AWDParser.COLOR,\n\t\t\t\t\t\t701: AWDParser.BOOL,\n\t\t\t\t\t\t702: AWDParser.BOOL,\n\t\t\t\t\t\t801: AWDParser.MTX4x4\n\t\t\t\t\t});\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.EFFECTS_METHOD]);\n\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\n\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\n\t\t\t\t\t\t\tif (!mat.normalMap)\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\n\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t\tmethods_parsed += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: we should not need this anymore (if using texture-atlas)\n\t\telse if ((type>=3)&&(type<=7)){\n\t\t\t// if this is a curve material, we create it, finalize it, assign it to block-cache and return and return.\n\t\t\tvar color:number = props.get(1, 0xcccccc);\n\t\t\tdebugString+=color;\n\n\t\t\tvar diffuseTexture:Texture2DBase;\n\t\t\tvar diffuseTex_addr:number = props.get(2, 0);\n\n\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\tdiffuseTexture = DefaultMaterialManager.getDefaultTexture();\n\t\t\t}\n\n\t\t\tif (returnedArray[0])\n\t\t\t\tdiffuseTexture = returnedArray[1];\n\t\t\tvar curve_mat:CurveMaterial = new CurveMaterial(diffuseTexture);\n\t\t\t//debugString+= \" alpha = \"+props.get(10, 1.0)+\" \";\n\t\t\tdebugString+= \" texture = \"+diffuseTex_addr+\" \";\n\t\t\tcurve_mat.bothSides = true;\n\t\t\tcurve_mat.preserveAlpha = true;\n\t\t\tcurve_mat.alphaBlending = true;\n\t\t\tcurve_mat.extra = this.parseUserAttributes();\n\t\t\tthis._pFinalizeAsset(<IAsset> curve_mat, name);\n\t\t\tthis._blocks[blockID].data = curve_mat;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(debugString);\n\t\t\treturn;\n\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\t\t}\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number):void\n\t{\n\n\t\tvar asset:Texture2DBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\n\t\t}\n\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number):void\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar asset:CubeTextureBase;\n\t\tvar i:number;\n\n\t\tthis._cubeTextures = new Array<any>();\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\t\t\tthis._cubeTextures.push(null);\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray;\n\t\t\t\tdata = new ByteArray();\n\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\n\t\t}\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number):void\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t\t}\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number):void\n\t{\n\t\tvar type:number;\n\t\tvar data_len:number;\n\t\tvar asset:ShadowMethodBase;\n\t\tvar shadowLightID:number;\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [AssetType.LIGHT]);\n\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\n\t\t\treturn;\n\t\t}\n\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\n\t\t}\n\t}\n\n\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number):void\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar parentObject:DisplayObjectContainer;\n\t\tvar targetObject:DisplayObjectContainer;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\n\t\t}\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\n\t\t\t\tvar targetID:number = props.get(1, 0);\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [AssetType.LIGHT, AssetType.TEXTURE_PROJECTOR]); //for no only light is requested!!!!\n\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttargetObject = returnedArrayTarget[1];\n\n\t\t\t\tif (parentObject) {\n\t\t\t\t\tparentObject.addChild(targetObject);\n\t\t\t\t}\n\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\n\t\t}\n\t\tthis._blocks[blockID].data = targetObject\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t\t}\n\n\t}\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number):void\n\t{\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number):void\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\n\t\t\t\t\treturn shadowMethod;\n\t\t\t\t}\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\n\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t\tjoints_parsed++;\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\t\tthis._blocks[blockID].data = skeleton;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t\tjoints_parsed++;\n\t\t}\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\t\tthis._blocks[blockID].data = pose;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_addr:number /*uint*/;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar returnedArray:Array<any>;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [AssetType.SKELETON_POSE]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\n\t\t\telse\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\n\t{\n\t\tvar num_frames:number /*uint*/ = 1;\n\t\tvar num_submeshes:number /*uint*/;\n\t\tvar frames_parsed:number /*uint*/;\n\t\tvar subMeshParsed:number /*uint*/;\n\t\tvar frame_dur:number;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Array<number> /*uint*/;\n\t\tvar verts:Array<number>;\n\t\tvar num_Streams:number /*int*/ = 0;\n\t\tvar streamsParsed:number /*int*/ = 0;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar thisGeo:Geometry;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [AssetType.GEOMETRY]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\n\t\t\treturn;\n\t\t}\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\n\t\tif (!poseOnly)\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\n\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\n\t\tstreamsParsed = 0;\n\t\twhile (streamsParsed < num_Streams) {\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\t\t\tstreamsParsed++;\n\t\t}\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tframes_parsed = 0;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgeometry = new Geometry();\n\t\t\tsubMeshParsed = 0;\n\t\t\twhile (subMeshParsed < num_submeshes) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\n\t\t\t\t\t\tsubMeshParsed++;\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(geometry, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\n\t{\n\t\tvar poseBlockAdress:number /*int*/\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\n\t\t\telse {\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\n\t\t\t}\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\n\n\t\t}\n\t}\n\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\n\t{\n\t\tvar targetMesh:Mesh;\n\t\tvar animSetBlockAdress:number /*int*/\n\t\tvar targetAnimationSet:AnimationSetBase;\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar returnedArray:Array<any>;\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\n\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [AssetType.MESH]);\n\t\t\tif (returnedArray[0])\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\n\t\t}\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AssetType.ANIMATION_SET]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\n\t\t\treturn\n\t\t}\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1) {\n\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [AssetType.SKELETON]);\n\t\t\tif (!returnedArray[0]) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\n\n\t\t} else if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\tif (type == 2)\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\n\n\t\t}\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\tconsole.log('ENV MAP', targetID);\n\n\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ AssetType.TEXTURE ], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\n\t\t\t\ttargetID = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE_PROJECTOR]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar attributes:Object;\n\t\tvar list_len:number;\n\t\tvar attibuteCnt:number;\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\n\t\t\tvar list_end:number;\n\n\t\t\tattributes = {};\n\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\t\t\t\tattibuteCnt += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_end:number;\n\t\tvar list_len:number;\n\t\tvar propertyCnt:number = 0;\n\t\tvar props:AWDProperties = new AWDProperties();\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar len:number;\n\t\t\t\tvar key:number;\n\t\t\t\tvar type:number;\n\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\n\t\t\t\tpropertyCnt += 1;\n\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\n\t\tswitch (type) {\n\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_read:number = 0;\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\twhile (num_read < num_elems) {\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\n\t\t\t\tnum_read++;\n\t\t\t}\n\n\t\t\treturn list;\n\t\t} else {\n\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tprivate parseHeader():void\n\t{\n\t\tvar flags:number;\n\t\tvar body_len:number;\n\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\n\t\t// set storagePrecision types\n\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyGeo) {\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyMatrix) {\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyProps) {\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tbody_len = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\t\t}\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\n\t{\n\t\tif (this._blocks[meshID].data instanceof Mesh)\n\t\t\tmeshID = this._blocks[meshID].geoID;\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\n\t\tvar geoCnt:number /*int*/ = 0;\n\t\tvar ud:Array<number>;\n\t\tvar uStride:number /*uint*/;\n\t\tvar uOffs:number /*uint*/;\n\t\tvar numPoints:number /*uint*/;\n\t\tvar i:number /*int*/;\n\t\tvar newUvs:Array<number>;\n\t\tvar sub_geom:TriangleSubGeometry;\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\n\t\twhile (geoCnt < geometry.subGeometries.length) {\n\t\t\tnewUvs = new Array<number>();\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\n\t\t\tnumPoints = sub_geom.numVertices;\n\t\t\tud = sub_geom.uvs;\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\n\t\t\tfor (i = 0; i < numPoints; i++) {\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\n\t\t\t}\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\n\t\t\tgeoCnt++;\n\t\t}\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\n\t\treturn this._newBlockBytes.readUTFBytes(len);\n\t}\n\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\n\t{\n\t\tvar returnArray:Array<any> = new Array<any>();\n\t\tvar typeCnt:number = 0;\n\t\tif (assetID > 0) {\n\t\t\tif (this._blocks[assetID]) {\n\t\t\t\tif (this._blocks[assetID].data) {\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\n\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\n\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\n\t\t\t\t\t\t\t//if the right assetType was found\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"CubeTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"SingleTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (IAsset(_blocks[assetID].data).assetType == AssetType.MESH)) {\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (iasset.assetType == AssetType.MESH)) {\n\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\n\n\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\n\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttypeCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\n\t\treturnArray.push(false);\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\n\t\treturn returnArray;\n\t}\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\n\t{\n\t\tswitch (true) {\n\t\t\tcase (assetType == AssetType.TEXTURE):\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\n\t\t\t\t\treturn this.getDefaultCubeTexture();\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\n\t\t\t\tbreak;\n\t\t\tcase (assetType == AssetType.MATERIAL):\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getDefaultCubeTexture():IAsset\n\t{\n\t\tif (!this._defaultCubeTexture) {\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\n\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\n\t\t}\n\n\t\treturn <IAsset> this._defaultCubeTexture;\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\t\treturn this._newBlockBytes.readFloat();\n\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar i:number;\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n}\n\nexport = AWDParser;\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic data:any;\n\tpublic len:any;\n\tpublic geoID:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\n\n\tconstructor()\n\t{\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any):void\n\t{\n\t\tthis[ key.toString() ] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\tif (this.hasOwnProperty(key.toString())) {\n\t\t\treturn this[key.toString()];\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current subgeom being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstSubGeom:TriangleSubGeometry;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _mesh:Mesh;\n\tprivate _geometry:Geometry;\n\n\tprivate materialFinal:boolean = false;\n\tprivate geoCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\n\n\t\tif (asset) {\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\n\n\t\t\tif (this.materialMode >= 2)\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\tmaterial.name = this._mesh.material.name;\n\t\t\tthis._mesh.material = material;\n\t\t\tthis._pFinalizeAsset(material);\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t}\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\tthis._pFinalizeAsset(this._mesh);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._geometry = new Geometry();\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.geoCreated) {\n\t\t\t\tthis.geoCreated = true;\n\t\t\t\t//create default subgeometry\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._mesh.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader()\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames()\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the mesh.\n\t */\n\tprivate parseUV()\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces()\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame geometries.\n\t */\n\tprivate parseFrames()\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\tsubGeom = new TriangleSubGeometry(true);\n\n\t\t\tif (this._firstSubGeom == null)\n\t\t\t\tthis._firstSubGeom = subGeom;\n\n\t\t\tgeometry = new Geometry();\n\t\t\tgeometry.addSubGeometry(subGeom);\n\n\t\t\tsubGeom.updateIndices(this._indices);\n\t\t\tsubGeom.updatePositions(fvertices);\n\t\t\tsubGeom.updateUVs(this._finalUV);\n\t\t\tsubGeom.vertexNormals;\n\t\t\tsubGeom.vertexTangents;\n\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\tsubGeom.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _mesh:Mesh;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _meshData:Array<MeshData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _geometry:Geometry;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5mesh\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\n\t\t\t\tthis._geometry = this._mesh.geometry;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\n\n\t\t\t\t//_geometry.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\n\t\t\tvar meshData:MeshData = this._meshData[i];\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = vertex.startWeight;\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh geometry.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar vertexData:Array<VertexData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(vertexData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._meshData == null)\n\t\t\tthis._meshData = new Array<MeshData>();\n\n\t\tvar i:number /*uint*/ = this._meshData.length;\n\t\tthis._meshData[i] = new MeshData();\n\t\tthis._meshData[i].vertexData = vertexData;\n\t\tthis._meshData[i].weightData = weights;\n\t\tthis._meshData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the mesh data to a SkinnedSub instance.\n\t * @param vertexData The mesh's vertices.\n\t * @param weights The joint weights per vertex.\n\t * @param indices The indices for the faces.\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\n\t */\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\n\t{\n\t\tvar len:number /*int*/ = vertexData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar vertex:VertexData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tvertex = vertexData[i];\n\t\t\tv1 = vertex.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\n\t\t\t\tweight = weights[vertex.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = vertex.index << 1;\n\t\t\tuvs[v1++] = vertex.s;\n\t\t\tuvs[v1] = vertex.t;\n\t\t}\n\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\n\t\tsubGeom.updateIndices(indices);\n\t\tsubGeom.updatePositions(vertices);\n\t\tsubGeom.updateUVs(uvs);\n\t\tsubGeom.updateJointIndices(jointIndices);\n\t\tsubGeom.updateJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\tsubGeom.vertexNormals;\n\t\tsubGeom.vertexTangents;\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\tsubGeom.autoDeriveTangents = false;\n\t\tsubGeom.autoDeriveNormals = false;\n\n\t\treturn subGeom;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of vertex indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single vertex.\n\t * @param vertexData The list to contain the vertex data.\n\t */\n\tprivate parseVertex(vertexData:Array<VertexData>):void\n\t{\n\t\tvar vertex:VertexData = new VertexData();\n\t\tvertex.index = this.getNextInt();\n\t\tthis.parseUV(vertex);\n\t\tvertex.startWeight = this.getNextInt();\n\t\tvertex.countWeight = this.getNextInt();\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\n\t\tvertexData[vertex.index] = vertex;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param vertexData The vertexData to contain the UV coordinates.\n\t */\n\tprivate parseUV(vertexData:VertexData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvertexData.s = this.getNextNumber();\n\t\tvertexData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5MeshParser;\n\n\nclass VertexData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass MeshData\n{\n\tpublic vertexData:Array<VertexData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = <Texture2DBase> asset;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = AssetType.MESH;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == AssetType.MESH) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleSubGeometry;\n\t\t\tvar geom:Geometry;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar mesh:Mesh;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeom = new Geometry();\n\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\n\t\t\t// and add them to geometry.\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.updateIndices(obj.indices);\n\t\t\tsub.updatePositions(obj.verts);\n\t\t\tsub.updateUVs(obj.uvs);\n\n\t\t\tgeom.addSubGeometry(sub);\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Apply pivot translation to geometry if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\n\t\t\t\t\tdat[12] = 0;\n\t\t\t\t\tdat[13] = 0;\n\t\t\t\t\tdat[14] = 0;\n\t\t\t\t\tmtx = new Matrix3D(dat);\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to geometry if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\n\n\t\t\t// Build mesh and return it\n\t\t\tmesh = new Mesh(geom, mat);\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\n\t\t\treturn mesh;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\n\t\telse\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\n\t\tmat.specularColor = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Array<number>\n\t{\n\t\tvar data:Array<number>;\n\n\t\tdata = new Array<number>(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport = Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Array<number>;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Texture2DBase;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _meshes:Array<Mesh>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = <Texture2DBase> asset;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._meshes.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._meshes = new Array<Mesh>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar geometry:Geometry;\n\t\t\tvar mesh:Mesh;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tgeometry = new Geometry();\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\n\n\t\t\t\tif (geometry.subGeometries.length == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\n\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\n\t\t\t\t\tmesh.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tmesh.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._meshes.push(mesh);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\n\n\t\t\t\tif (mesh.subMeshes.length > 1) {\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgeometry.\n\t * @param materialGroup The material group data to convert.\n\t * @param geometry The Geometry to contain the converted SubGeometry.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar sub:TriangleSubGeometry;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\n\t\t\tsub.updateIndices(indices);\n\t\t\tsub.updatePositions(vertices);\n\t\t\tsub.updateVertexNormals(normals);\n\t\t\tsub.updateUVs(uvs);\n\n\t\t\tgeometry.addSubGeometry(sub);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial;\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm = new MethodMaterial(color);\n\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\n\n\t\t\t\t\tcolorMat.alpha = alpha;\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMat.specular = specular;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcm = new MethodMaterial(color);\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\n\n\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMultiMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar mesh:Mesh;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\n\t\t\tmesh = this._meshes[i];\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (mesh.material)\n\t\t\t\t\t\tmesh.material = null;\n\t\t\t\t\tmesh.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._meshes.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport = OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Texture2DBase;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\n\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport = Parsers;"
  ],
  "sourceRoot": ""
}