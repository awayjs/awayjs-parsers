{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-parsers.js",
    "awayjs-parsers/lib/AWDParser.ts",
    "awayjs-parsers/lib/MD2Parser.ts",
    "awayjs-parsers/lib/MD5AnimParser.ts",
    "awayjs-parsers/lib/MD5MeshParser.ts",
    "awayjs-parsers/lib/Max3DSParser.ts",
    "awayjs-parsers/lib/OBJParser.ts",
    "awayjs-parsers/lib/Parsers.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-parsers/lib/AWDParser",
    "module",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "BlendMode",
    "ColorTransform",
    "Matrix3D",
    "Vector3D",
    "URLLoaderDataFormat",
    "URLRequest",
    "AssetType",
    "ParserBase",
    "ParserUtils",
    "PerspectiveProjection",
    "OrthographicProjection",
    "OrthographicOffCenterProjection",
    "BitmapCubeTexture",
    "ImageCubeTexture",
    "ImageTexture",
    "ByteArray",
    "DisplayObjectContainer",
    "Geometry",
    "TriangleSubGeometry",
    "DirectionalLight",
    "PointLight",
    "Camera",
    "Mesh",
    "Skybox",
    "StaticLightPicker",
    "CubeMapShadowMapper",
    "DirectionalShadowMapper",
    "PrefabBase",
    "PrimitiveCapsulePrefab",
    "PrimitiveConePrefab",
    "PrimitiveCubePrefab",
    "PrimitiveCylinderPrefab",
    "PrimitivePlanePrefab",
    "PrimitiveSpherePrefab",
    "PrimitiveTorusPrefab",
    "VertexAnimationSet",
    "VertexAnimator",
    "SkeletonAnimationSet",
    "SkeletonAnimator",
    "JointPose",
    "Skeleton",
    "SkeletonPose",
    "SkeletonJoint",
    "SkeletonClipNode",
    "VertexClipNode",
    "DefaultMaterialManager",
    "MethodMaterialMode",
    "MethodMaterial",
    "AmbientEnvMapMethod",
    "DiffuseDepthMethod",
    "DiffuseCelMethod",
    "DiffuseGradientMethod",
    "DiffuseLightMapMethod",
    "DiffuseWrapMethod",
    "EffectAlphaMaskMethod",
    "EffectColorMatrixMethod",
    "EffectColorTransformMethod",
    "EffectEnvMapMethod",
    "EffectFogMethod",
    "EffectFresnelEnvMapMethod",
    "EffectLightMapMethod",
    "EffectRimLightMethod",
    "NormalSimpleWaterMethod",
    "ShadowDitheredMethod",
    "ShadowFilteredMethod",
    "SpecularFresnelMethod",
    "ShadowHardMethod",
    "SpecularAnisotropicMethod",
    "SpecularCelMethod",
    "SpecularPhongMethod",
    "ShadowNearMethod",
    "ShadowSoftMethod",
    "AS2SceneGraphFactory",
    "TimelineKeyFrame",
    "AddChildCommand",
    "UpdatePropertyCommand",
    "RemoveChildCommand",
    "ApplyAS2DepthsCommand",
    "AWDParser",
    "_super",
    "ARRAY_BUFFER",
    "_debug",
    "_startedParsing",
    "_texture_users",
    "_parsed_header",
    "_blocks",
    "Array",
    "AWDBlock",
    "data",
    "blendModeDic",
    "push",
    "NORMAL",
    "ADD",
    "ALPHA",
    "DARKEN",
    "DIFFERENCE",
    "ERASE",
    "HARDLIGHT",
    "INVERT",
    "LAYER",
    "LIGHTEN",
    "MULTIPLY",
    "OVERLAY",
    "SCREEN",
    "SHADER",
    "_depthSizeDic",
    "_version",
    "supportsType",
    "extension",
    "toLowerCase",
    "supportsData",
    "toString",
    "_iResolveDependency",
    "resourceDependency",
    "assets",
    "isCubeTextureArray",
    "id",
    "split",
    "ressourceID",
    "asset",
    "thisBitmapTexture",
    "block",
    "mat",
    "users",
    "resetAssetPath",
    "name",
    "_pFinalizeAsset",
    "console",
    "log",
    "tx",
    "_cubeTextures",
    "htmlImageElement",
    "posX",
    "negX",
    "posY",
    "negY",
    "posZ",
    "negZ",
    "_iResolveDependencyFailure",
    "_iResolveDependencyName",
    "oldName",
    "parseInt",
    "newName",
    "_pProceedParsing",
    "_byteData",
    "_pGetByteData",
    "parseHeader",
    "_compression",
    "DEFLATE",
    "LZMA",
    "_pDieWithError",
    "UNCOMPRESSED",
    "_body",
    "getBytesAvailable",
    "parsingPaused",
    "parseNextBlock",
    "dispose",
    "PARSING_DONE",
    "MORE_TO_PARSE",
    "_pStartParsing",
    "frameLimit",
    "_pContent",
    "c",
    "assetData",
    "isParsed",
    "ns",
    "type",
    "flags",
    "len",
    "_cur_block_id",
    "readUnsignedInt",
    "readUnsignedByte",
    "blockCompression",
    "BitFlags",
    "test",
    "FLAG4",
    "blockCompressionLZMA",
    "FLAG5",
    "_accuracyOnBlocks",
    "_accuracyMatrix",
    "FLAG1",
    "_accuracyGeo",
    "FLAG2",
    "_accuracyProps",
    "FLAG3",
    "_geoNrType",
    "FLOAT32",
    "FLOAT64",
    "_matrixNrType",
    "_propsNrType",
    "blockEndAll",
    "position",
    "_newBlockBytes",
    "readBytes",
    "blockEndBlock",
    "factory",
    "parseAudioBlock",
    "parseTimeLine",
    "parsePrimitves",
    "parseSkyboxInstance",
    "parseLight",
    "parseCamera",
    "parseLightPicker",
    "parseMaterial_v1",
    "parseCubeTexture",
    "parseSharedMethodBlock",
    "parseShadowMethodBlock",
    "parseMeshPoseAnimation",
    "parseVertexAnimationSet",
    "parseAnimatorSet",
    "parseCommand",
    "parseTriangleGeometrieBlock",
    "parseContainer",
    "parseMeshInstance",
    "parseMaterial",
    "parseTexture",
    "parseSkeleton",
    "parseSkeletonPose",
    "parseSkeletonAnimation",
    "parseNameSpace",
    "parseMetaData",
    "msgCnt",
    "errorMessages",
    "blockID",
    "parseVarStr",
    "data_len",
    "url",
    "readUTFBytes",
    "parseProperties",
    "extras",
    "parseUserAttributes",
    "_pPauseAndRetrieveDependencies",
    "textureStylesNames",
    "j",
    "k",
    "timeLineContainer",
    "createMovieClip",
    "isScene",
    "sceneID",
    "fps",
    "readFloat",
    "ms_per_frame",
    "numFrames",
    "readUnsignedShort",
    "objectIDMap",
    "totalDuration",
    "frame",
    "traceString",
    "frameDuration",
    "setFrameTime",
    "numLabels",
    "labelType",
    "label",
    "numCommands",
    "commandString",
    "hasDepthChanges",
    "objectID",
    "resourceID",
    "commandType",
    "instanceID",
    "newChild",
    "numFills",
    "returnedArray",
    "getAssetByID",
    "GEOMETRY",
    "geom",
    "returnedArray2",
    "MATERIAL",
    "subMeshes",
    "material",
    "TIMELINE",
    "registerPotentialChild",
    "addConstructCommand",
    "instanceName",
    "global_ressource_id",
    "props",
    1,
    2,
    3,
    4,
    "UINT8",
    5,
    6,
    "UINT32",
    7,
    "matrix_2d",
    "get",
    "colortransform",
    "blendmode",
    "visibilty",
    "depth",
    "mask",
    "thisMatrix",
    "blendmode_string",
    "length_code",
    "frame_code",
    "addFrame",
    "num_subs",
    "geoScaleU",
    "geoScaleV",
    "subs_parsed",
    "is_2d_geom",
    "sm_len",
    "sm_end",
    "w_indices",
    "weights",
    "subProps",
    "idx",
    "uv_idx",
    "n_idx",
    "t_idx",
    "str_ftype",
    "str_type",
    "str_len",
    "str_end",
    "x",
    "y",
    "z",
    "verts",
    "readNumber",
    "indices",
    "uvs",
    "normals",
    "g",
    "v",
    "tangents",
    "sub_geom",
    "jointsPerVertex",
    "autoDeriveNormals",
    "autoDeriveUVs",
    "autoDeriveTangents",
    "updateIndices",
    "updatePositions",
    "updateVertexNormals",
    "updateUVs",
    "updateVertexTangents",
    "updateJointWeights",
    "updateJointIndices",
    "scaleU",
    "scaleV",
    "setSubUVs",
    "scaleUV",
    "addSubGeometry",
    "prefab",
    "primType",
    "bsm",
    101,
    102,
    103,
    110,
    111,
    301,
    "UINT16",
    302,
    303,
    701,
    "BOOL",
    702,
    703,
    704,
    "primitiveTypes",
    "topClosed",
    "bottomClosed",
    "yUp",
    "par_id",
    "mtx",
    "ctr",
    "parent",
    "parseMatrix3D",
    "parentName",
    "transform",
    "matrix3D",
    "CONTAINER",
    "LIGHT",
    "MESH",
    "obj",
    "addChild",
    "addError",
    "pivot",
    "extra",
    "num_materials",
    "materials_parsed",
    "data_id",
    "returnedArrayGeometry",
    "geoID",
    "materials",
    "materialNames",
    "returnedArrayMaterial",
    "mat_id",
    "m",
    "mesh",
    "returnedArrayParent",
    "objC",
    "Math",
    "min",
    "castsShadows",
    "cubeTexAddr",
    "returnedArrayCubeTex",
    "TEXTURE",
    "light",
    "newShadowMapper",
    "lightType",
    "COLOR",
    8,
    9,
    10,
    11,
    12,
    21,
    22,
    23,
    "shadowMapperType",
    "lightTypes",
    "shadowMapperTypes",
    "radius",
    "fallOff",
    "color",
    "specular",
    "diffuse",
    "ambientColor",
    "ambient",
    "depthMapSize",
    "shadowMapper",
    "projection",
    "readShort",
    "projectiontype",
    104,
    "camera",
    "numLights",
    "lightsArray",
    "lightID",
    "returnedArrayLight",
    "lightsArrayNames",
    "lightPick",
    "attributes",
    "finalize",
    "num_methods",
    "methods_parsed",
    "INT32",
    "BADDR",
    13,
    "method_type",
    "debugString",
    "materialMode",
    "mode",
    "MULTI_PASS",
    "tex_addr",
    "alphaBlending",
    "alpha",
    "alphaThreshold",
    "repeat",
    "normalTexture",
    "specTexture",
    15,
    16,
    17,
    18,
    19,
    20,
    "spezialType",
    "texture",
    "diffuseTexture",
    "diffuseTex_addr",
    "normalTex_addr",
    "specTex_addr",
    "lightPickerAddr",
    "LIGHT_PICKER",
    "lightPicker",
    "smooth",
    "mipmap",
    "bothSides",
    "alphaPremultiplied",
    "blendMode",
    "normalMap",
    "specularMap",
    "diffuseColor",
    "gloss",
    "specularColor",
    "targetID",
    201,
    202,
    401,
    402,
    601,
    602,
    801,
    "MTX4x4",
    "EFFECTS_METHOD",
    "addEffectMethod",
    "SHADOW_MAP_METHOD",
    "shadowMethod",
    "ambientMethod",
    "diffuseMethod",
    "smoothness",
    "specularMethod",
    "fresnelPower",
    "normalReflectance",
    "normalMethod",
    "_pAddDependency",
    "byteArrayToImage",
    "parseSharedMethodList",
    "shadowLightID",
    "parseShadowMethodList",
    "hasBlocks",
    "parentObject",
    "targetObject",
    "typeCommand",
    "returnedArrayTarget",
    "TEXTURE_PROJECTOR",
    "AWDSTRING",
    "nameSpaceString",
    "methodType",
    "epsilon",
    "range",
    "num_joints",
    "skeleton",
    "joints_parsed",
    "joint",
    "ibp",
    "parentIndex",
    "inverseBindPose",
    "rawData",
    "joints",
    "pose",
    "joint_pose",
    "has_transform",
    "mtx_data",
    "parseMatrix43RawData",
    "orientation",
    "fromMatrix",
    "translation",
    "copyFrom",
    "jointPoses",
    "frame_dur",
    "pose_addr",
    "clip",
    "num_frames",
    "frames_parsed",
    "SKELETON_POSE",
    "frames",
    "poseOnly",
    "num_submeshes",
    "subMeshParsed",
    "geometry",
    "subGeom",
    "num_Streams",
    "streamsParsed",
    "streamtypes",
    "thisGeo",
    "geoAdress",
    "getUVForVertexAnimation",
    "looping",
    "stitchFinalFrame",
    "subGeometries",
    "poseBlockAdress",
    "outputString",
    "skeletonFrames",
    "vertexFrames",
    "ANIMATION_NODE",
    "newVertexAnimationSet",
    "addAnimation",
    "animations",
    "animationNames",
    "newSkeletonAnimationSet",
    "targetMesh",
    "animSetBlockAdress",
    "targetAnimationSet",
    "targetMeshLength",
    "meshAdresses",
    "activeState",
    "autoplay",
    "targetMeshes",
    "ANIMATION_SET",
    "thisAnimator",
    "SKELETON",
    "animator",
    "effectMethodReturn",
    105,
    106,
    107,
    "offCol",
    "colorTransform",
    "list_len",
    "attibuteCnt",
    "list_end",
    "ns_id",
    "attr_key",
    "attr_type",
    "attr_len",
    "attr_val",
    "INT8",
    "readByte",
    "INT16",
    "readInt",
    "readDouble",
    "expected",
    "propertyCnt",
    "AWDProperties",
    "key",
    "set",
    "parseAttrValue",
    "elem_len",
    "read_func",
    "VECTOR2x1",
    "VECTOR3x1",
    "VECTOR4x1",
    "MTX3x2",
    "MTX3x3",
    "MTX4x3",
    "list",
    "num_read",
    "num_elems",
    "apply",
    "val",
    "body_len",
    "_streaming",
    "meshID",
    "uvsForVertexAnimation",
    "geoCnt",
    "ud",
    "uStride",
    "uOffs",
    "numPoints",
    "newUvs",
    "numVertices",
    "getStride",
    "UV_DATA",
    "getOffset",
    "assetID",
    "assetTypesToGet",
    "extraTypeInfo",
    "returnArray",
    "typeCnt",
    "iasset",
    "assetType",
    "getDefaultAsset",
    "getDefaultCubeTexture",
    "getDefaultTexture",
    "getDefaultMaterial",
    "_defaultCubeTexture",
    "defaultBitmap",
    "createCheckeredBitmapData",
    "precision",
    "parseMatrix32RawData",
    "mtx_raw",
    "isNaN",
    "COMPRESSIONMODE_LZMA",
    "AWDBYTEARRAY",
    "bytes",
    "errorMsg",
    "value",
    "fallback",
    "testFlag",
    "FLAG6",
    "FLAG7",
    "FLAG8",
    "FLAG9",
    "FLAG10",
    "FLAG11",
    "FLAG12",
    "FLAG13",
    "FLAG14",
    "FLAG15",
    "FLAG16",
    "awayjs-core/lib/base/BlendMode",
    "undefined",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-core/lib/library/AssetType",
    "awayjs-core/lib/net/URLLoaderDataFormat",
    "awayjs-core/lib/net/URLRequest",
    "awayjs-core/lib/parsers/ParserBase",
    "awayjs-core/lib/parsers/ParserUtils",
    "awayjs-core/lib/projections/OrthographicOffCenterProjection",
    "awayjs-core/lib/projections/OrthographicProjection",
    "awayjs-core/lib/projections/PerspectiveProjection",
    "awayjs-core/lib/textures/BitmapCubeTexture",
    "awayjs-core/lib/textures/ImageCubeTexture",
    "awayjs-core/lib/textures/ImageTexture",
    "awayjs-core/lib/utils/ByteArray",
    "awayjs-display/lib/base/Geometry",
    "awayjs-display/lib/base/TriangleSubGeometry",
    "awayjs-display/lib/containers/DisplayObjectContainer",
    "awayjs-display/lib/entities/Camera",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-display/lib/entities/Mesh",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-display/lib/entities/Skybox",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper",
    "awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper",
    "awayjs-display/lib/prefabs/PrefabBase",
    "awayjs-display/lib/prefabs/PrimitiveCapsulePrefab",
    "awayjs-display/lib/prefabs/PrimitiveConePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCubePrefab",
    "awayjs-display/lib/prefabs/PrimitiveCylinderPrefab",
    "awayjs-display/lib/prefabs/PrimitivePlanePrefab",
    "awayjs-display/lib/prefabs/PrimitiveSpherePrefab",
    "awayjs-display/lib/prefabs/PrimitiveTorusPrefab",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "awayjs-player/lib/fl/factories/AS2SceneGraphFactory",
    "awayjs-player/lib/fl/timeline/TimelineKeyFrame",
    "awayjs-player/lib/fl/timeline/commands/AddChildCommand",
    "awayjs-player/lib/fl/timeline/commands/ApplyAS2DepthsCommand",
    "awayjs-player/lib/fl/timeline/commands/RemoveChildCommand",
    "awayjs-player/lib/fl/timeline/commands/UpdatePropertyCommand",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "awayjs-renderergl/lib/managers/DefaultMaterialManager",
    "awayjs-parsers/lib/MD2Parser",
    "MD2Parser",
    "textureType",
    "ignoreTexturePath",
    "_clipNodes",
    "Object",
    "_animationSet",
    "materialFinal",
    "geoCreated",
    "_textureType",
    "_ignoreTexturePath",
    "_mesh",
    "_pHasTime",
    "_parsedHeader",
    "_geometry",
    "parseMaterialNames",
    "_parsedUV",
    "parseUV",
    "_parsedFaces",
    "parseFaces",
    "_parsedFrames",
    "parseFrames",
    "_firstSubGeom",
    "clone",
    "_ident",
    "_skinWidth",
    "_skinHeight",
    "_numSkins",
    "_numVertices",
    "_numST",
    "_numTris",
    "_numFrames",
    "_offsetSkins",
    "_offsetST",
    "_offsetTris",
    "_offsetFrames",
    "_offsetEnd",
    "extIndex",
    "slashIndex",
    "_materialNames",
    "regExp",
    "RegExp",
    "replace",
    "lastIndexOf",
    "indexOf",
    "substring",
    "dependencies",
    "_uvs",
    "ta",
    "tb",
    "tc",
    "_vertIndices",
    "_uvIndices",
    "_indices",
    "addIndex",
    "_finalUV",
    "vertexIndex",
    "uvIndex",
    "index",
    "findIndex",
    "sx",
    "sy",
    "sz",
    "ty",
    "tz",
    "vertLen",
    "fvertices",
    "tvertices",
    "prevClip",
    "readFrameName",
    "vertexNormals",
    "vertexTangents",
    "FPS",
    "ch",
    "floor",
    "String",
    "fromCharCode",
    "awayjs-parsers/lib/MD5AnimParser",
    "Quaternion",
    "MD5AnimParser",
    "additionalRotationAxis",
    "additionalRotationRadians",
    "TEXT",
    "_parseIndex",
    "_line",
    "_charLineIndex",
    "_rotationQuat",
    "t1",
    "t2",
    "fromAxisAngle",
    "X_AXIS",
    "PI",
    "Y_AXIS",
    "multiply",
    "token",
    "_textData",
    "_pGetTextData",
    "getNextToken",
    "COMMENT_TOKEN",
    "ignoreLine",
    "VERSION_TOKEN",
    "getNextInt",
    "COMMAND_LINE_TOKEN",
    "parseCMD",
    "NUM_FRAMES_TOKEN",
    "_bounds",
    "_frameData",
    "NUM_JOINTS_TOKEN",
    "_numJoints",
    "_hierarchy",
    "_baseFrameData",
    "FRAME_RATE_TOKEN",
    "_frameRate",
    "NUM_ANIMATED_COMPONENTS_TOKEN",
    "_numAnimatedComponents",
    "HIERARCHY_TOKEN",
    "parseHierarchy",
    "BOUNDS_TOKEN",
    "parseBounds",
    "BASE_FRAME_TOKEN",
    "parseBaseFrame",
    "FRAME_TOKEN",
    "parseFrame",
    "_reachedEOF",
    "sendUnknownKeywordError",
    "_clip",
    "translateClip",
    "translatePose",
    "frameData",
    "hierarchy",
    "base",
    "translate",
    "components",
    "skelPose",
    "startIndex",
    "w",
    "sqrt",
    "rotatePoint",
    "sendEOFError",
    "HierarchyData",
    "parseLiteralstring",
    "getNextChar",
    "putBack",
    "BoundsData",
    "parseVector3D",
    "max",
    "BaseFrameData",
    "parseQuaternion",
    "frameIndex",
    "FrameData",
    "getNextNumber",
    "skipWhiteSpace",
    "charAt",
    "sendParseError",
    "parseFloat",
    "vec",
    "quat",
    "str",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-parsers/lib/MD5MeshParser",
    "MD5MeshParser",
    "_bindPoses",
    "NUM_MESHES_TOKEN",
    "_numMeshes",
    "JOINTS_TOKEN",
    "parseJoints",
    "MESH_TOKEN",
    "parseMesh",
    "calculateMaxJointCount",
    "_maxJointCount",
    "_meshData",
    "translateGeom",
    "vertexData",
    "weightData",
    "_skeleton",
    "numMeshData",
    "meshData",
    "numVerts",
    "zeroWeights",
    "countZeroWeightJoints",
    "totalJoints",
    "countWeight",
    "vertex",
    "start",
    "startWeight",
    "end",
    "count",
    "weight",
    "bias",
    "pos",
    "toMatrix3D",
    "appendTranslation",
    "inv",
    "invert",
    "_shaders",
    "MESH_SHADER_TOKEN",
    "MESH_NUM_VERTS_TOKEN",
    "MESH_NUM_TRIS_TOKEN",
    "MESH_NUM_WEIGHTS_TOKEN",
    "MESH_VERT_TOKEN",
    "parseVertex",
    "MESH_TRI_TOKEN",
    "parseTri",
    "MESH_WEIGHT_TOKEN",
    "parseJoint",
    "MeshData",
    "v1",
    "v2",
    "v3",
    "bindPose",
    "vertices",
    "jointIndices",
    "jointWeights",
    "nonZeroWeights",
    "transformVector",
    "JointData",
    "VertexData",
    "rotQuat",
    "awayjs-parsers/lib/Max3DSParser",
    "Max3DSParser",
    "useSmoothingGroups",
    "_useSmoothingGroups",
    "ba",
    "toByteArray",
    "tex",
    "_textures",
    "_materials",
    "_unfinalized_objects",
    "_cur_mat",
    "_cur_mat_end",
    "finalizeCurrentMaterial",
    "_cur_obj",
    "_cur_obj_end",
    "Number",
    "MAX_VALUE",
    "cid",
    "ObjectVO",
    "readNulTermstring",
    "materialFaces",
    "parseVertexList",
    "parseFaceList",
    "parseUVList",
    "parseFaceMaterialList",
    "readTransform",
    "parseObjectAnimation",
    "parseSmoothingGroups",
    "constructObject",
    "MaterialVO",
    "readColor",
    "twoSided",
    "colorMap",
    "TextureVO",
    "i0",
    "i1",
    "i2",
    "smoothingGroups",
    "faces",
    "vo",
    "hier",
    "sub",
    "prepareData",
    "applySmoothGroups",
    "mname",
    "dat",
    "concat",
    "scaleBy",
    "applyTransformation",
    "VertexVO",
    "FaceVO",
    "smoothGroup",
    "numFaces",
    "vGroups",
    "face",
    "groups",
    "group",
    "splice",
    "vClones",
    "clones",
    "v0",
    "chr",
    "awayjs-parsers/lib/OBJParser",
    "SpecularBasicMethod",
    "OBJParser",
    "scale",
    "_mtlLibLoaded",
    "_activeMaterialID",
    "_scale",
    "defineProperty",
    "enumerable",
    "configurable",
    "content",
    "hasV",
    "hasF",
    "parseMtl",
    "lm",
    "LoadedMaterial",
    "materialID",
    "_materialLoaded",
    "_meshes",
    "applyMaterial",
    "_mtlLib",
    "line",
    "creturn",
    "trunk",
    "_vertices",
    "_vertexNormals",
    "_materialIDs",
    "_stringLength",
    "_charIndex",
    "_oldIndex",
    "_objects",
    "_objectIndex",
    "join",
    "parseLine",
    "applyMaterials",
    "loadMtl",
    "createGroup",
    "createObject",
    "_currentGroup",
    "parseVertexNormal",
    "parseFace",
    "objIndex",
    "numGroups",
    "materialGroups",
    "numMaterialGroups",
    "sm",
    "bmMaterial",
    "translateMaterialGroup",
    "_lastMtlID",
    "materialGroup",
    "_realIndices",
    "_vertexIndex",
    "indexIds",
    "translateVertexData",
    "vertexNormal",
    "uv",
    "vertexIndices",
    "normalIndices",
    "uvIndices",
    "_currentMaterialGroup",
    "_currentObject",
    "ObjectGroup",
    "Group",
    "createMaterialGroup",
    "MaterialGroup",
    "nTrunk",
    "Vertex",
    "UV",
    "FaceData",
    "parseIndex",
    "materialDefinitions",
    "lines",
    "basicSpecularMethod",
    "useSpecular",
    "useColor",
    "mapkd",
    "charCodeAt",
    "parseMapKdString",
    "specularData",
    "SpecularData",
    "_materialSpecularData",
    "cm",
    "colorMat",
    "colorMultiMat",
    "breakflag",
    "mtlurl",
    "decomposeID",
    "tm",
    "_u",
    "_v",
    "_x",
    "_y",
    "_z",
    "_index",
    "ind",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-parsers/lib/Parsers",
    "AssetLoader",
    "Parsers",
    "enableAllBundled",
    "enableParsers",
    "ALL_BUNDLED",
    "awayjs-core/lib/library/AssetLoader"
  ],
  "mappings": "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",
  "file": "awayjs-parsers.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    null,
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BlendMode\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport ProjectionBase\t\t\t\t\t= require(\"awayjs-core/lib/projections/ProjectionBase\");\nimport PerspectiveProjection\t\t\t= require(\"awayjs-core/lib/projections/PerspectiveProjection\");\nimport OrthographicProjection\t\t\t= require(\"awayjs-core/lib/projections/OrthographicProjection\");\nimport OrthographicOffCenterProjection\t= require(\"awayjs-core/lib/projections/OrthographicOffCenterProjection\");\nimport BitmapCubeTexture\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapCubeTexture\");\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\nimport CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport ImageCubeTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageCubeTexture\");\nimport ImageTexture\t\t\t\t\t\t= require(\"awayjs-core/lib/textures/ImageTexture\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport Skybox\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport CubeMapShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CubeMapShadowMapper\");\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\nimport PrefabBase\t\t\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrefabBase\");\nimport PrimitiveCapsulePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCapsulePrefab\");\nimport PrimitiveConePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveConePrefab\");\nimport PrimitiveCubePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCubePrefab\");\nimport PrimitiveCylinderPrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveCylinderPrefab\");\nimport PrimitivePlanePrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitivePlanePrefab\");\nimport PrimitiveSpherePrefab\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveSpherePrefab\");\nimport PrimitiveTorusPrefab\t\t\t\t= require(\"awayjs-display/lib/prefabs/PrimitiveTorusPrefab\");\n\nimport AnimationSetBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\nimport AnimatorBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport VertexAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimator\");\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport SkeletonAnimator\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimator\");\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport AmbientEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod\");\nimport DiffuseDepthMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseDepthMethod\");\nimport DiffuseCelMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCelMethod\");\nimport DiffuseGradientMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseGradientMethod\");\nimport DiffuseLightMapMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod\");\nimport DiffuseWrapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseWrapMethod\");\nimport EffectAlphaMaskMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod\");\nimport EffectColorMatrixMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectEnvMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectEnvMapMethod\");\nimport EffectFogMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFogMethod\");\nimport EffectFresnelEnvMapMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod\");\nimport EffectLightMapMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectLightMapMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport EffectRimLightMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectRimLightMethod\");\nimport NormalSimpleWaterMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod\");\nimport ShadowDitheredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowDitheredMethod\");\nimport ShadowFilteredMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowFilteredMethod\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\nimport SpecularFresnelMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularFresnelMethod\");\nimport ShadowHardMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowHardMethod\");\nimport SpecularAnisotropicMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod\");\nimport SpecularCelMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCelMethod\");\nimport SpecularPhongMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularPhongMethod\");\nimport ShadowNearMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowNearMethod\");\nimport ShadowSoftMethod\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowSoftMethod\");\n\nimport TimelineSceneGraphFactory = require(\"awayjs-player/lib/fl/factories/TimelineSceneGraphFactory\");\nimport AS2SceneGraphFactory = require(\"awayjs-player/lib/fl/factories/AS2SceneGraphFactory\");\nimport MovieClip = require(\"awayjs-player/lib/fl/display/MovieClip\");\nimport TimelineKeyFrame = require(\"awayjs-player/lib/fl/timeline/TimelineKeyFrame\");\nimport AddChildCommand = require(\"awayjs-player/lib/fl/timeline/commands/AddChildCommand\");\nimport UpdatePropertyCommand = require(\"awayjs-player/lib/fl/timeline/commands/UpdatePropertyCommand\");\nimport RemoveChildCommand = require(\"awayjs-player/lib/fl/timeline/commands/RemoveChildCommand\");\nimport ApplyAS2DepthsCommand = require(\"awayjs-player/lib/fl/timeline/commands/ApplyAS2DepthsCommand\");\n\n/**\n * AWDParser provides a parser for the AWD data type.\n */\nclass AWDParser extends ParserBase\n{\n\t//set to \"true\" to have some console.logs in the Console\n\tprivate _debug:boolean = false;\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean = false;\n\tprivate _cur_block_id:number;\n\tprivate _blocks:Array<AWDBlock>;\n\tprivate _newBlockBytes:ByteArray;\n\tprivate _version:Array<number>;\n\tprivate _compression:number;\n\tprivate _accuracyOnBlocks:boolean;\n\tprivate _accuracyMatrix:boolean;\n\tprivate _accuracyGeo:boolean;\n\tprivate _accuracyProps:boolean;\n\tprivate _matrixNrType:number;\n\tprivate _geoNrType:number;\n\tprivate _propsNrType:number;\n\tprivate _streaming:boolean;\n\tprivate _texture_users:Object = {};\n\tprivate _parsed_header:boolean = false;\n\tprivate _body:ByteArray;\n\tprivate _defaultTexture:BitmapTexture;     // HTML IMAGE TEXTURE >? !\n\tprivate _cubeTextures:Array<any>;\n\tprivate _defaultBitmapMaterial:MethodMaterial;\n\tprivate _defaultCubeTexture:BitmapCubeTexture;\n\n\tpublic static COMPRESSIONMODE_LZMA:string = \"lzma\";\n\tpublic static UNCOMPRESSED:number = 0;\n\tpublic static DEFLATE:number = 1;\n\tpublic static LZMA:number = 2;\n\tpublic static INT8:number = 1;\n\tpublic static INT16:number = 2;\n\tpublic static INT32:number = 3;\n\tpublic static UINT8:number = 4;\n\tpublic static UINT16:number = 5;\n\tpublic static UINT32:number = 6;\n\tpublic static FLOAT32:number = 7;\n\tpublic static FLOAT64:number = 8;\n\tpublic static BOOL:number = 21;\n\tpublic static COLOR:number = 22;\n\tpublic static BADDR:number = 23;\n\tpublic static AWDSTRING:number = 31;\n\tpublic static AWDBYTEARRAY:number = 32;\n\tpublic static VECTOR2x1:number = 41;\n\tpublic static VECTOR3x1:number = 42;\n\tpublic static VECTOR4x1:number = 43;\n\tpublic static MTX3x2:number = 44;\n\tpublic static MTX3x3:number = 45;\n\tpublic static MTX4x3:number = 46;\n\tpublic static MTX4x4:number = 47;\n\n\tprivate blendModeDic:Array<string>;\n\tprivate _depthSizeDic:Array<number>;\n\n\t/**\n\t * Creates a new AWDParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor()\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._blocks = new Array<AWDBlock>();\n\t\tthis._blocks[0] = new AWDBlock();\n\t\tthis._blocks[0].data = null; // Zero address means null in AWD\n\n\t\tthis.blendModeDic = new Array<string>(); // used to translate ints to blendMode-strings\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.ADD);\n\t\tthis.blendModeDic.push(BlendMode.ALPHA);\n\t\tthis.blendModeDic.push(BlendMode.DARKEN);\n\t\tthis.blendModeDic.push(BlendMode.DIFFERENCE);\n\t\tthis.blendModeDic.push(BlendMode.ERASE);\n\t\tthis.blendModeDic.push(BlendMode.HARDLIGHT);\n\t\tthis.blendModeDic.push(BlendMode.INVERT);\n\t\tthis.blendModeDic.push(BlendMode.LAYER);\n\t\tthis.blendModeDic.push(BlendMode.LIGHTEN);\n\t\tthis.blendModeDic.push(BlendMode.MULTIPLY);\n\t\tthis.blendModeDic.push(BlendMode.NORMAL);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\t\tthis.blendModeDic.push(BlendMode.SCREEN);\n\t\tthis.blendModeDic.push(BlendMode.SHADER);\n\t\tthis.blendModeDic.push(BlendMode.OVERLAY);\n\n\t\tthis._depthSizeDic = new Array<number>(); // used to translate ints to depthSize-values\n\t\tthis._depthSizeDic.push(256);\n\t\tthis._depthSizeDic.push(512);\n\t\tthis._depthSizeDic.push(2048);\n\t\tthis._depthSizeDic.push(1024);\n\t\tthis._version = Array<number>(); // will contain 2 int (major-version, minor-version) for awd-version-check\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"awd\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 3) == 'AWD');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\t// this will be called when Dependency has finished loading.\n\t\t// the Assets waiting for this Bitmap, can be Texture or CubeTexture.\n\t\t// if the Bitmap is awaited by a CubeTexture, we need to check if its the last Bitmap of the CubeTexture,\n\t\t// so we know if we have to finalize the Asset (CubeTexture) or not.\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar isCubeTextureArray:Array<string> = resourceDependency.id.split(\"#\");\n\t\t\tvar ressourceID:string = isCubeTextureArray[0];\n\t\t\tvar asset:TextureProxyBase;\n\t\t\tvar thisBitmapTexture:Texture2DBase;\n\t\t\tvar block:AWDBlock;\n\n\t\t\tif (isCubeTextureArray.length == 1) // Not a cube texture\n\t\t\t{\n\t\t\t\tasset = <Texture2DBase> resourceDependency.assets[0];\n\t\t\t\tif (asset) {\n\t\t\t\t\tvar mat:MethodMaterial;\n\t\t\t\t\tvar users:Array<string>;\n\n\t\t\t\t\tblock = this._blocks[ resourceDependency.id ];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap for texture\");\n\t\t\t\t\t\tconsole.log(\"Parsed texture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCubeTextureArray.length > 1) // Cube Texture\n\t\t\t{\n\t\t\t\tthisBitmapTexture = <BitmapTexture> resourceDependency.assets[0];\n\n\t\t\t\tvar tx:ImageTexture = <ImageTexture> thisBitmapTexture;\n\n\t\t\t\tthis._cubeTextures[ isCubeTextureArray[1] ] = tx.htmlImageElement; // ?\n\t\t\t\tthis._texture_users[ressourceID].push(1);\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"Successfully loaded Bitmap \" + this._texture_users[ressourceID].length + \" / 6 for Cubetexture\");\n\t\t\t\t}\n\t\t\t\tif (this._texture_users[ressourceID].length == this._cubeTextures.length) {\n\n\t\t\t\t\tvar posX:any = this._cubeTextures[0];\n\t\t\t\t\tvar negX:any = this._cubeTextures[1];\n\t\t\t\t\tvar posY:any = this._cubeTextures[2];\n\t\t\t\t\tvar negY:any = this._cubeTextures[3];\n\t\t\t\t\tvar posZ:any = this._cubeTextures[4];\n\t\t\t\t\tvar negZ:any = this._cubeTextures[5];\n\n\t\t\t\t\tasset = <TextureProxyBase> new ImageCubeTexture(posX, negX, posY, negY, posZ, negZ);\n\t\t\t\t\tblock = this._blocks[ressourceID];\n\t\t\t\t\tblock.data = asset; // Store finished asset\n\n\t\t\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t\t\t\tblock.name = asset.name;\n\t\t\t\t\t// Finalize texture asset to dispatch texture event, which was\n\t\t\t\t\t// previously suppressed while the dependency was loaded.\n\t\t\t\t\tthis._pFinalizeAsset(<IAsset> asset);\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"Parsed CubeTexture: Name = \" + block.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t//not used - if a dependcy fails, the awaiting Texture or CubeTexture will never be finalized, and the default-bitmaps will be used.\n\t\t// this means, that if one Bitmap of a CubeTexture fails, the CubeTexture will have the DefaultTexture applied for all six Bitmaps.\n\t}\n\n\t/**\n\t * Resolve a dependency name\n\t *\n\t * @param resourceDependency The dependency to be resolved.\n\t */\n\tpublic _iResolveDependencyName(resourceDependency:ResourceDependency, asset:IAsset):string\n\t{\n\t\tvar oldName:string = asset.name;\n\n\t\tif (asset) {\n\t\t\tvar block:AWDBlock = this._blocks[parseInt(resourceDependency.id)];\n\t\t\t// Reset name of texture to the one defined in the AWD file,\n\t\t\t// as opposed to whatever the image parser came up with.\n\t\t\tasset.resetAssetPath(block.name, null, true);\n\t\t}\n\n\t\tvar newName:string = asset.name;\n\n\t\tasset.name = oldName;\n\n\t\treturn newName;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();//getByteData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\tif (!this._parsed_header) {\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Parse header and decompress body if needed\n\t\t\tthis.parseHeader();\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\t\t\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AWDParser.UNCOMPRESSED:\n\t\t\t\t\tthis._body = this._byteData;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// Compressed AWD Formats not yet supported\n\t\t\t\t//----------------------------------------------------------------------------\n\n\t\t\t\t/*\n\t\t\t\t case AWDParser.DEFLATE:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress();\n\n\t\t\t\t break;\n\t\t\t\t case AWDParser.LZMA:\n\n\t\t\t\t this._body = new ByteArray();\n\t\t\t\t this._byteData.readBytes(this._body, 0, this._byteData.getBytesAvailable());\n\t\t\t\t this._body.uncompress(COMPRESSIONMODE_LZMA);\n\n\t\t\t\t break;\n\t\t\t\t //*/\n\n\t\t\t}\n\n\t\t\tthis._parsed_header = true;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._body.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t}\n\n\t\tif (this._body) {\n\n\t\t\twhile (this._body.getBytesAvailable() > 0 && !this.parsingPaused) //&& this._pHasTime() )\n\t\t\t{\n\t\t\t\tthis.parseNextBlock();\n\n\t\t\t}\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// Return complete status\n\t\t\tif (this._body.getBytesAvailable() == 0) {\n\t\t\t\tthis.dispose();\n\t\t\t\treturn  ParserBase.PARSING_DONE;\n\t\t\t} else {\n\t\t\t\treturn  ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\t\t} else {\n\n\t\t\tswitch (this._compression) {\n\n\t\t\t\tcase AWDParser.DEFLATE:\n\t\t\t\tcase AWDParser.LZMA:\n\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"(!) AWDParser Error: Compressed AWD formats not yet supported (!)\");\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\t// Error - most likely _body not set because we do not support compression.\n\t\t\treturn  ParserBase.PARSING_DONE;\n\n\t\t}\n\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate dispose():void\n\t{\n\n\t\tfor (var c in this._blocks) {\n\n\t\t\tvar b:AWDBlock = <AWDBlock> this._blocks[ c ];\n\t\t\tb.dispose();\n\n\t\t}\n\n\t}\n\n\tprivate parseNextBlock():void\n\t{\n\t\tvar block:AWDBlock;\n\t\tvar assetData:IAsset;\n\t\tvar isParsed:boolean = false;\n\t\tvar ns:number;\n\t\tvar type:number;\n\t\tvar flags:number;\n\t\tvar len:number;\n\n\t\tthis._cur_block_id = this._body.readUnsignedInt();\n\n\t\tns = this._body.readUnsignedByte();\n\t\ttype = this._body.readUnsignedByte();\n\t\tflags = this._body.readUnsignedByte();\n\t\tlen = this._body.readUnsignedInt();\n\n\t\tvar blockCompression:boolean = BitFlags.test(flags, BitFlags.FLAG4);\n\t\tvar blockCompressionLZMA:boolean = BitFlags.test(flags, BitFlags.FLAG5);\n\n\t\tif (this._accuracyOnBlocks) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG1);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyGeo) {\n\t\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyMatrix) {\n\t\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t\t}\n\n\t\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\t\tif (this._accuracyProps) {\n\t\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t\t}\n\t\t}\n\n\t\tvar blockEndAll:number = this._body.position + len;\n\n\t\tif (len > this._body.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 block length is bigger than the bytes that are available!');\n\t\t\tthis._body.position += this._body.getBytesAvailable();\n\t\t\treturn;\n\t\t}\n\t\tthis._newBlockBytes = new ByteArray();\n\n\n\t\tthis._body.readBytes(this._newBlockBytes, 0, len);\n\n\t\t//----------------------------------------------------------------------------\n\t\t// Compressed AWD Formats not yet supported\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\n\t\t\t/*\n\t\t\t if (blockCompressionLZMA)\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress(AWDParser.COMPRESSIONMODE_LZMA);\n\t\t\t }\n\t\t\t else\n\t\t\t {\n\t\t\t this._newBlockBytes.uncompress();\n\t\t\t }\n\t\t\t */\n\n\t\t}\n\n\t\t//----------------------------------------------------------------------------\n\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t//----------------------------------------------------------------------------\n\t\t//this._newBlockBytes.endian = Endian.LITTLE_ENDIAN;\n\t\t//----------------------------------------------------------------------------\n\n\t\tthis._newBlockBytes.position = 0;\n\t\tblock = new AWDBlock();\n\t\tblock.len = this._newBlockBytes.position + len;\n\t\tblock.id = this._cur_block_id;\n\n\t\tvar blockEndBlock:number = this._newBlockBytes.position + len;\n\n\t\tif (blockCompression) {\n\t\t\tthis._pDieWithError('Compressed AWD formats not yet supported');\n\t\t\t//blockEndBlock   = this._newBlockBytes.position + this._newBlockBytes.length;\n\t\t\t//block.len       = blockEndBlock;\n\t\t}\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"AWDBlock:  ID = \" + this._cur_block_id + \" | TypeID = \" + type + \" | Compression = \" + blockCompression + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\tthis._blocks[this._cur_block_id] = block;\n\n\t\tif ((this._version[0] == 3) && (this._version[1] == 0)) {\n\t\t\t// probably should contain some info about the type of animation\n\t\t\tvar factory = new AS2SceneGraphFactory();\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 44:\n\t\t\t\t\tthis.parseAudioBlock(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:// just because i used blockID 4 in first exporter earlier\n\t\t\t\tcase 133:\n\t\t\t\t\tthis.parseTimeLine(this._cur_block_id, factory);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] > 2)||((this._version[0] >= 2) && (this._version[1] >= 1))) {\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 11:\n\t\t\t\t\tthis.parsePrimitves(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 31:\n\t\t\t\t\tthis.parseSkyboxInstance(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 41:\n\t\t\t\t\tthis.parseLight(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 42:\n\t\t\t\t\tthis.parseCamera(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t//  case 43:\n\t\t\t\t//      parseTextureProjector(_cur_block_id);\n\t\t\t\t//      isParsed = true;\n\t\t\t\t//      break;\n\n\t\t\t\tcase 51:\n\t\t\t\t\tthis.parseLightPicker(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial_v1(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 83:\n\t\t\t\t\tthis.parseCubeTexture(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 91:\n\t\t\t\t\tthis.parseSharedMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 92:\n\t\t\t\t\tthis.parseShadowMethodBlock(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 111:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id, true);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 112:\n\t\t\t\t\tthis.parseMeshPoseAnimation(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 113:\n\t\t\t\t\tthis.parseVertexAnimationSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 122:\n\t\t\t\t\tthis.parseAnimatorSet(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 253:\n\t\t\t\t\tthis.parseCommand(this._cur_block_id);\n\t\t\t\t\tisParsed = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//*/\n\t\t}\n\t\t//*\n\t\tif (isParsed == false) {\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.parseTriangleGeometrieBlock(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 22:\n\t\t\t\t\tthis.parseContainer(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 23:\n\t\t\t\t\tthis.parseMeshInstance(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 81:\n\t\t\t\t\tthis.parseMaterial(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 82:\n\t\t\t\t\tthis.parseTexture(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 101:\n\t\t\t\t\tthis.parseSkeleton(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 102:\n\t\t\t\t\tthis.parseSkeletonPose(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 103:\n\t\t\t\t\tthis.parseSkeletonAnimation(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 121:\n\t\t\t\t//this.parseUVAnimation(this._cur_block_id);\n\t\t\t\t//break;\n\t\t\t\tcase 254:\n\t\t\t\t\tthis.parseNameSpace(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 255:\n\t\t\t\t\tthis.parseMetaData(this._cur_block_id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (this._debug) {\n\t\t\t\t\t\tconsole.log(\"AWDBlock:   Unknown BlockType  (BlockID = \" + this._cur_block_id + \") - Skip \" + len + \" bytes\");\n\t\t\t\t\t}\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//*/\n\n\t\tvar msgCnt:number = 0;\n\t\tif (this._newBlockBytes.position == blockEndBlock) {\n\t\t\tif (this._debug) {\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(\"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._debug) {\n\n\t\t\t\tconsole.log(\"  (!)(!)(!) Error while reading AWDBlock ID \" + this._cur_block_id + \" = skip to next block\");\n\n\t\t\t\tif (block.errorMessages) {\n\t\t\t\t\twhile (msgCnt < block.errorMessages.length) {\n\t\t\t\t\t\tconsole.log(\"        (!) Error: \" + block.errorMessages[msgCnt] + \" (!)\");\n\t\t\t\t\t\tmsgCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._body.position = blockEndAll;\n\t\tthis._newBlockBytes = null;\n\n\t}\n\n\n\t//--Parser Blocks---------------------------------------------------------------------------\n\n\tprivate parseAudioBlock(blockID:number, factory:TimelineSceneGraphFactory):void {\n\n\t\t//var asset:Audio;todo create asset for audio\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\t//this._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\t// todo parser needs to be able to handle mp3 and wav files if we trigger the loading of external ressource\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\t\t\tconsole.log(\"Audio url = \"+url);\n\n\t\t} else {\n\t\t\t// todo: exporter does not export embed sounds yet\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t// todo parse sound from bytes\n\t\t\t// this._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.by(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\t//this._blocks[blockID].data = asset;todo\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Audio file\");\n\t\t}\n\t}\n\n\t//Block ID = 4\n\tprivate parseTimeLine(blockID:number, factory:TimelineSceneGraphFactory):void {\n\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar k:number;\n\t\tvar timeLineContainer = factory.createMovieClip();\n\t\tvar name = this.parseVarStr();\n\t\tvar isScene = !!this._newBlockBytes.readUnsignedByte();\n\t\tvar sceneID = this._newBlockBytes.readUnsignedByte();\n\t\tvar fps:number = this._newBlockBytes.readFloat();\n\t\tvar ms_per_frame = 1000 / fps;\n\t\tvar numFrames = this._newBlockBytes.readUnsignedShort();\n\t\tvar objectIDMap : { [id:string]:number; } = {};\n\n\t\t// var previousTimeLine:TimeLineFrame;\n\t\t// var fill_props:AWDProperties = this.parseProperties({1:AWDParser.UINT32});// { 1:UINT32, 6:AWDSTRING }  ); //; , 2:UINT32, 3:UINT32, 5:BOOL } );\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a TIMELINE: Name = \" + name + \"| isScene = \" + isScene + \"| sceneID = \" + sceneID + \"| numFrames = \" + numFrames);\n\n\t\tvar totalDuration = 0;\n\t\tfor (i = 0; i < numFrames; i++) {\n\n\t\t\tvar frame = new TimelineKeyFrame();\n\t\t\tvar traceString = \"frame = \" + i;\n\t\t\t// TODO: remove the ms_per_frame to set the duration in frames\n\t\t\tvar frameDuration = this._newBlockBytes.readUnsignedInt() * ms_per_frame;\n\t\t\tframe.setFrameTime(totalDuration, frameDuration);\n\t\t\ttotalDuration += frameDuration;\n\t\t\t//console.log(\"duration = \" + frameDuration);\n\n\t\t\tvar numLabels = this._newBlockBytes.readUnsignedShort();\n\t\t\tfor (j = 0; j < numLabels; j++) {\n\t\t\t\tvar labelType = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tvar label = this.parseVarStr();\n\t\t\t\t// TODO: Handle labels differently\n\t\t\t\t//timeLineContainer.addFrameLabel(new FrameLabel(label, labelType, frame));\n\t\t\t\ttraceString += \"\\n     label = \" + label + \" - labelType = \" + labelType;\n\t\t\t}\n\n\t\t\tvar numCommands = this._newBlockBytes.readUnsignedShort();\n\t\t\tvar commandString = \"\\n      Commands \" + numCommands;\n\t\t\tvar hasDepthChanges = false;\n\t\t\tfor (j = 0; j < numCommands; j++) {\n\t\t\t\tvar objectID:number;\n\t\t\t\tvar resourceID:number;\n\t\t\t\tvar commandType = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t// 1 = Add object by local id (awd-block-id) + update properties\n\t\t\t\t// 2 = Add object by global id (string identifier) + update properties !Not used yet.!\n\t\t\t\t// 3 = UpdateObject - update a object that is already present\n\t\t\t\t// 4 = remove object\n\t\t\t\t// 5 = add / update sound\n\n\t\t\t\tswitch (commandType) {\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\tcase 2:\n\t\t\t\t\tcase 3:\n\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar instanceID=0; // must be set in folling conditions:\n\t\t\t\t\t\tif (commandType==1) {\n\t\t\t\t\t\t\t// this commands looks for a object by awd-id and puts it into the timeline\n\t\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\t\t\t\tvar newChild;\n\n\t\t\t\t\t\t\tvar numFills = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\t\tcommandString += \"\\n                number of fills = \" + numFills;\n\n\t\t\t\t\t\t\t// sound is added to timeline with dedicated Command, as it is no display-object (has no matrix etc)\n\t\t\t\t\t\t\t// check if a Geometry can be found at the resourceID (AWD-ID)\n\t\t\t\t\t\t\tvar returnedArray:any[] = this.getAssetByID(resourceID, [ AssetType.GEOMETRY ]);\n\t\t\t\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\t\t\t\tvar geom = <Geometry>returnedArray[1];\n\t\t\t\t\t\t\t\tnewChild = new Mesh(geom);\n\t\t\t\t\t\t\t\t// geometry found. create new Command, add the props and the materials to it\n\t\t\t\t\t\t\t\tfor (k = 0; k < numFills; k++) {\n\t\t\t\t\t\t\t\t\tvar returnedArray2:any[] = this.getAssetByID(this._newBlockBytes.readUnsignedInt(), [ AssetType.MATERIAL ]);\n\t\t\t\t\t\t\t\t\tif (returnedArray2[0] && newChild.subMeshes.length > k)\n\t\t\t\t\t\t\t\t\t\tnewChild.subMeshes[k].material = returnedArray2[1];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// no geometry found, so we check for TIMELINE.\n\t\t\t\t\t\t\t\t// there should be no fills in this case, but geometry check might have failed, and fill-ids still need to be parsed\n\t\t\t\t\t\t\t\tfor (k = 0; k < numFills; k++)\n\t\t\t\t\t\t\t\t\tthis._newBlockBytes.readUnsignedInt();\n\n\t\t\t\t\t\t\t\tvar returnedArray:any[] = this.getAssetByID(resourceID, [ AssetType.TIMELINE ]);\n\t\t\t\t\t\t\t\tif (returnedArray[0])\n\t\t\t\t\t\t\t\t\tnewChild = <MovieClip>returnedArray[1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tinstanceID = timeLineContainer.registerPotentialChild(newChild);\n\t\t\t\t\t\t\tobjectIDMap[objectID] = instanceID;\n\t\t\t\t\t\t\tframe.addConstructCommand(new AddChildCommand(instanceID));\n\n\t\t\t\t\t\t\tvar instanceName = this.parseVarStr();\n\t\t\t\t\t\t\tif (instanceName.length) {\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"name\", instanceName));\n\t\t\t\t\t\t\t\tcommandString += \"\\n                instanceName = \" + instanceName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcommandString += \"\\n      - Add new Resource = \" + resourceID + \" as object_id = \" + objectID;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (commandType==2) {\n\t\t\t\t\t\t\t// this commands looks for a object by global string identifier and puts it into the timeline\n\t\t\t\t\t\t\t// this is not used yet, but might be useful to do things like text-localization\n\t\t\t\t\t\t\tvar global_ressource_id = this.parseVarStr();\n\t\t\t\t\t\t\t// todo (if needed)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tinstanceID = objectIDMap[objectID];\n\t\t\t\t\t\t\tcommandString += \"\\n      - Update object_id = \" + objectID;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// read the command properties\n\t\t\t\t\t\t// 1: matrix2d (6 x number with storage precision matrix)\n\t\t\t\t\t\t// 2: matrix2d (12 x number with storage precision matrix) not used yet\n\t\t\t\t\t\t// 3: colortransform (20 x number with storage precision properties)\n\t\t\t\t\t\t// 4: blendmode (uint8)\n\t\t\t\t\t\t// 5: visibilty (uint8)\n\t\t\t\t\t\t// 6: depth (uint32)\n\t\t\t\t\t\t// 7: mask (uint32)\n\n\t\t\t\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._propsNrType, 4:AWDParser.UINT8, 5:AWDParser.UINT8, 6:AWDParser.UINT32, 7:AWDParser.UINT32});\n\n\t\t\t\t\t\tvar matrix_2d:Float32Array = props.get(1, []);\n\t\t\t\t\t\t//var matrix_3d:Float32Array = props.get(2, []);\n\t\t\t\t\t\tvar colortransform:Float32Array = props.get(3, []);\n\t\t\t\t\t\tvar blendmode:number = props.get(4, -1);\n\t\t\t\t\t\tvar visibilty:number = props.get(5, -1);\n\t\t\t\t\t\tvar depth:number = props.get(6, -1);\n\t\t\t\t\t\tvar mask:number = props.get(7, -1);\n\t\t\t\t\t\t// todo: handle filters\n\n\t\t\t\t\t\t//matrix2d must provide 6 values to be valid\n\n\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d.length;\n\t\t\t\t\t\tif (matrix_2d.length==6) {\n\t\t\t\t\t\t\tvar thisMatrix = new Matrix3D();\n\t\t\t\t\t\t\t// todo set rotation + scale from matrix 2x3 to matrix3d\n\t\t\t\t\t\t\tthisMatrix.position = new Vector3D(matrix_2d[4], matrix_2d[5], 0);\n\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"_iMatrix3D\", thisMatrix));\n\n\t\t\t\t\t\t\tcommandString += \"\\n                transformArray = \" + matrix_2d;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//matrix2d must provide 20 values to be valid\n\t\t\t\t\t\tif (colortransform.length==20) {\n\t\t\t\t\t\t\t// TODO: set ColorTransform on objectProps\n\t\t\t\t\t\t\tcommandString += \"\\n                colorMatrix = \" + colortransform;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// blendmode must be positive to be valid\n\t\t\t\t\t\tif (blendmode>=0) {\n\t\t\t\t\t\t\tvar blendmode_string:string = this.blendModeDic[blendmode];\n\t\t\t\t\t\t\t// TODO: set Blendmode on objectProps\n\t\t\t\t\t\t\tcommandString += \"\\n                BlendMode = \" + blendmode_string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// visibilty must be positive to be valid\n\t\t\t\t\t\tif (visibilty>=0) {\n\t\t\t\t\t\t\tif(visibilty==0)\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", false));\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"visible\", true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// depth must be positive to be valid\n\t\t\t\t\t\tif (depth>=0) {\n\t\t\t\t\t\t\tcommandString += \"\\n                Depth = \" + depth;\n\t\t\t\t\t\t\tframe.addConstructCommand(new UpdatePropertyCommand(instanceID, \"__AS2Depth\", depth));\n\t\t\t\t\t\t\thasDepthChanges = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// mask must be positive to be valid. i think only add-commands will have this value.\n\t\t\t\t\t\t// e.g. it should never be updated on already existing objects. (because depth of objects can change, i am not sure)\n\t\t\t\t\t\tif (mask>=0) {\n\t\t\t\t\t\t\tcommandString += \"\\n                Mask-up to obj-id: \" + mask;\n\t\t\t\t\t\t\t// TODO: set depthClipChange on objectProps\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// todo: handle filters\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 4:\n\n\t\t\t\t\t\t// Remove Object Command\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tvar instanceID = objectIDMap[objectID];\n\t\t\t\t\t\tframe.addConstructCommand(new RemoveChildCommand(instanceID));\n\t\t\t\t\t\tcommandString += \"\\n       - Remove object with ID: \" + objectID;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 5:\n\n\t\t\t\t\t\t// Add Sound Command\n\t\t\t\t\t\t// TODO: create CommandPropsSound and check which asset to use\n\t\t\t\t\t\tobjectID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tresourceID = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\t// TODO: implement sound in timeline\n\t\t\t\t\t\tcommandString += \"\\n      - Add new Sound AWD-ID = \" + resourceID.toString() + \" as object_id = \" + objectID.toString();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tcommandString += \"\\n       - Unknown Command Type = \" + commandType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasDepthChanges) {\n\t\t\t\t// only want to do this once after all children's depth values are updated\n\t\t\t\tframe.addConstructCommand(new ApplyAS2DepthsCommand());\n\t\t\t\thasDepthChanges = false;\n\t\t\t}\n\n\t\t\tvar length_code = this._newBlockBytes.readUnsignedInt();\n\t\t\tif (length_code > 0) {\n\t\t\t\t// TODO: Script should probably not be attached to keyframes?\n\t\t\t\tvar frame_code = this._newBlockBytes.readUTFBytes(length_code);\n\t\t\t\t//frame.addToScript(frame_code);\n\t\t\t\ttraceString += \"\\nframe-code = \" + frame_code;\n\t\t\t}\n\t\t\ttraceString += commandString;\n\t\t\t//trace(\"length_code = \"+length_code+\" frame_code = \"+frame_code);\n\t\t\tthis._newBlockBytes.readUnsignedInt();// user attributes - skip for now\n\t\t\t//console.log(traceString);\n\t\t\ttimeLineContainer.addFrame(frame);\n\n\t\t}\n\n\t\tthis._pFinalizeAsset(<IAsset>timeLineContainer, name);\n\t\tthis._blocks[blockID].data = timeLineContainer;\n\t\tthis.parseProperties(null);\n\t\tthis.parseUserAttributes();\n\t}\n\n\t//Block ID = 1\n\tprivate parseTriangleGeometrieBlock(blockID:number):void\n\t{\n\n\t\tvar geom:Geometry = new Geometry();\n\n\t\t// Read name and sub count\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_subs:number = this._newBlockBytes.readUnsignedShort();\n\n\t\t// Read optional properties\n\t\tvar props:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\tvar geoScaleU:number = props.get(1, 1);\n\t\tvar geoScaleV:number = props.get(2, 1);\n\n\t\t// Loop through sub meshes\n\t\tvar subs_parsed:number = 0;\n\t\twhile (subs_parsed < num_subs) {\n\t\t\tvar is_2d_geom:boolean=false;\n\t\t\tvar i:number;\n\t\t\tvar sm_len:number, sm_end:number;\n\t\t\tvar w_indices:Array<number>;\n\t\t\tvar weights:Array<number>;\n\n\t\t\tsm_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tsm_end = this._newBlockBytes.position + sm_len;\n\n\t\t\tvar subProps:AWDProperties = this.parseProperties({1:this._geoNrType, 2:this._geoNrType});\n\t\t\t// Loop through data streams\n\t\t\twhile (this._newBlockBytes.position < sm_end) {\n\t\t\t\tvar idx:number = 0;\n\t\t\t\tvar uv_idx:number = 0;\n\t\t\t\tvar n_idx:number = 0;\n\t\t\t\tvar t_idx:number = 0;\n\t\t\t\tvar str_ftype:number, str_type:number, str_len:number, str_end:number;\n\n\t\t\t\t// Type, field type, length\n\t\t\t\tstr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_ftype = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\n\t\t\t\tvar x:number, y:number, z:number;\n\n\t\t\t\tif (str_type == 1) {//vertex 3d positions\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 2) {//face indicies positions\n\t\t\t\t\tvar indices:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tindices[idx++] = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 3) {\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tuvs[idx++] = this.readNumber(this._accuracyGeo);\n\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 4) {\n\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tnormals[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 6) {\n\t\t\t\t\tw_indices = Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tw_indices[idx++] = this._newBlockBytes.readUnsignedShort()*3;\n\t\t\t\t\t}\n\n\t\t\t\t} else if (str_type == 7) {\n\n\t\t\t\t\tweights = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\tweights[idx++] = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 8) {// 2d-positions - not used yet.\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 9) {// combined vertex3D stream 13 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t} else if (str_type == 10) {// combined vertex2D stream 9 x float32\n\n\t\t\t\t\tvar x:number, y:number, z:number;\n\t\t\t\t\tvar type:number;\n\t\t\t\t\tvar r:number, g:number, b:number,a:number;\n\t\t\t\t\tvar u:number, v:number;\n\n\t\t\t\t\tvar verts:Array<number> = new Array<number>();\n\t\t\t\t\tvar uvs:Array<number> = new Array<number>();\n\t\t\t\t\tvar normals:Array<number> = new Array<number>();\n\t\t\t\t\tvar tangents:Array<number> = new Array<number>();\n\n\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\n\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tz = -0.1 * subs_parsed;\n\t\t\t\t\t\t//z = subs_parsed;\n\t\t\t\t\t\t//z = (blockID*0.001) + subs_parsed\n\t\t\t\t\t\ttype = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tu = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\tv = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t/* r = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t g = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t b = this.readNumber(this._accuracyGeo);\n\t\t\t\t\t\t a = this.readNumber(this._accuracyGeo);*/\n\n\t\t\t\t\t\t// while this is true, be parse the vertex-data, so it can be rendered as \"normal\" 3d-geometry\n\t\t\t\t\t\tif (true) {\n\t\t\t\t\t\t\tuvs[idx] = 0.0;\n\t\t\t\t\t\t\tnormals[idx] = 0.0;\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tuvs[idx] = 0.0;\n\t\t\t\t\t\t\tnormals[idx] = 0.0;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tnormals[idx] = 1.0;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t// parse and set-data, so the 3d-geometry contains all data (but is no longer valid for normal 3d-render)\n\t\t\t\t\t\t\t// away3d-vertexdata    |   awayJS-shape-data\n\t\t\t\t\t\t\t// -----------------------------------------------------------------------\n\t\t\t\t\t\t\t// pos.x                |   pos.x\n\t\t\t\t\t\t\t// pos.y                |   pos.y\n\t\t\t\t\t\t\t// pos.z                |   pos.z (for now we just use this as depth (set each subgeo to its own depth))\n\t\t\t\t\t\t\t// normal.x             |   curve-type (0:notCurved, 1: convex, 2:concave)\n\t\t\t\t\t\t\t// normal.y             |   alpha\n\t\t\t\t\t\t\t// normal.z             |   not used\n\t\t\t\t\t\t\t// uv.u                 |   curve.u\n\t\t\t\t\t\t\t// uv.v                 |   curve.v\n\t\t\t\t\t\t\t// tangent.x            |   red\n\t\t\t\t\t\t\t// tangent.y            |   green\n\t\t\t\t\t\t\t// tangent.z            |   blue\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\t//uv2[idx] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\t//uv2[idx] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t\tuvs[uv_idx++] = u;\n\t\t\t\t\t\t\tuvs[uv_idx++] = v;\n\t\t\t\t\t\t\tnormals[n_idx++] = type;\n\t\t\t\t\t\t\tnormals[n_idx++] = a;\n\t\t\t\t\t\t\tnormals[n_idx++] = 0;\n\t\t\t\t\t\t\t// trace(\"r=\" + r + \" g=\" + g + \" b=\" + b + \" a=\" + a);\n\t\t\t\t\t\t\ttangents[t_idx++] = r;\n\t\t\t\t\t\t\ttangents[t_idx++] = g;\n\t\t\t\t\t\t\ttangents[t_idx++] = b;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (str_type == 11) {// combined vertex2D stream 5 x float32\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}else {\n\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.parseUserAttributes(); // Ignore sub-mesh attributes for now\n\t\t\tvar sub_geom:TriangleSubGeometry;\n\t\t\tsub_geom = new TriangleSubGeometry(true);\n\t\t\tif (weights)\n\t\t\t\tsub_geom.jointsPerVertex = weights.length/(verts.length/3);\n\t\t\tif (normals)\n\t\t\t\tsub_geom.autoDeriveNormals = false;\n\t\t\tif (uvs)\n\t\t\t\tsub_geom.autoDeriveUVs = false;\n\t\t\tsub_geom.autoDeriveNormals = false;\n\t\t\t// when rendering as \"normal\" 3d-geometry, we need to autoDerive tangents\n\t\t\tif(true){\n\t\t\t\tsub_geom.autoDeriveTangents = true;\n\t\t\t}\n\t\t\tsub_geom.updateIndices(indices);\n\t\t\tsub_geom.updatePositions(verts);\n\t\t\tsub_geom.updateVertexNormals(normals);\n\t\t\tsub_geom.updateUVs(uvs);\n\t\t\tsub_geom.updateVertexTangents(null);\n\t\t\tsub_geom.updateJointWeights(weights);\n\t\t\tsub_geom.updateJointIndices(w_indices);\n\n\t\t\tvar scaleU:number = subProps.get(1, 1);\n\t\t\tvar scaleV:number = subProps.get(2, 1);\n\t\t\tvar setSubUVs:boolean = false; //this should remain false atm, because in AwayBuilder the uv is only scaled by the geometry\n\n\t\t\tif ((geoScaleU != scaleU) || (geoScaleV != scaleV)) {\n\t\t\t\tsetSubUVs = true;\n\t\t\t\tscaleU = geoScaleU/scaleU;\n\t\t\t\tscaleV = geoScaleV/scaleV;\n\t\t\t}\n\n\t\t\tif (setSubUVs)\n\t\t\t\tsub_geom.scaleUV(scaleU, scaleV);\n\n\t\t\tgeom.addSubGeometry(sub_geom);\n\n\t\t\t// TODO: Somehow map in-sub to out-sub indices to enable look-up\n\t\t\t// when creating meshes (and their material assignments.)\n\n\t\t\tsubs_parsed++;\n\t\t}\n\t\tif ((geoScaleU != 1) || (geoScaleV != 1))\n\t\t\tgeom.scaleUV(geoScaleU, geoScaleV);\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> geom, name);\n\t\tthis._blocks[blockID].data = geom;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a TriangleGeometry: Name = \" + name + \"| Id = \" + sub_geom.id);\n\t\t}\n\n\t}\n\n\n\t//Block ID = 11\n\tprivate parsePrimitves(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar prefab:PrefabBase;\n\t\tvar primType:number;\n\t\tvar subs_parsed:number;\n\t\tvar props:AWDProperties;\n\t\tvar bsm:Matrix3D;\n\n\t\t// Read name and sub count\n\t\tname = this.parseVarStr();\n\t\tprimType = this._newBlockBytes.readUnsignedByte();\n\t\tprops = this.parseProperties({101:this._geoNrType, 102:this._geoNrType, 103:this._geoNrType, 110:this._geoNrType, 111:this._geoNrType, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 303:AWDParser.UINT16, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 703:AWDParser.BOOL, 704:AWDParser.BOOL});\n\n\t\tvar primitiveTypes:Array<string> = [\"Unsupported Type-ID\", \"PrimitivePlanePrefab\", \"PrimitiveCubePrefab\", \"PrimitiveSpherePrefab\", \"PrimitiveCylinderPrefab\", \"PrimitivesConePrefab\", \"PrimitivesCapsulePrefab\", \"PrimitivesTorusPrefab\"]\n\n\t\tswitch (primType) {\n\t\t\t// to do, not all properties are set on all primitives\n\n\t\t\tcase 1:\n\t\t\t\tprefab = new PrimitivePlanePrefab(props.get(101, 100), props.get(102, 100), props.get(301, 1), props.get(302, 1), props.get(701, true), props.get(702, false));\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tprefab = new PrimitiveCubePrefab(props.get(101, 100), props.get(102, 100), props.get(103, 100), props.get(301, 1), props.get(302, 1), props.get(303, 1), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tprefab = new PrimitiveSpherePrefab(props.get(101, 50), props.get(301, 16), props.get(302, 12), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 4:\n\t\t\t\tprefab = new PrimitiveCylinderPrefab(props.get(101, 50), props.get(102, 50), props.get(103, 100), props.get(301, 16), props.get(302, 1), true, true, true); // bool701, bool702, bool703, bool704);\n\t\t\t\tif (!props.get(701, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).topClosed = false;\n\t\t\t\tif (!props.get(702, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).bottomClosed = false;\n\t\t\t\tif (!props.get(703, true))\n\t\t\t\t\t(<PrimitiveCylinderPrefab>prefab).yUp = false;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tprefab = new PrimitiveConePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 1), props.get(701, true), props.get(702, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 6:\n\t\t\t\tprefab = new PrimitiveCapsulePrefab(props.get(101, 50), props.get(102, 100), props.get(301, 16), props.get(302, 15), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tcase 7:\n\t\t\t\tprefab = new PrimitiveTorusPrefab(props.get(101, 50), props.get(102, 50), props.get(301, 16), props.get(302, 8), props.get(701, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tprefab = new PrefabBase();\n\t\t\t\tconsole.log(\"ERROR: UNSUPPORTED PREFAB_TYPE\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ((props.get(110, 1) != 1) || (props.get(111, 1) != 1)) {\n\t\t\t//geom.subGeometries;\n\t\t\t//geom.scaleUV(props.get(110, 1), props.get(111, 1)); //TODO add back scaling to prefabs\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\t\tprefab.name = name;\n\t\tthis._pFinalizeAsset(prefab, name);\n\t\tthis._blocks[blockID].data = prefab;\n\n\t\tif (this._debug) {\n\t\t\tif ((primType < 0) || (primType > 7)) {\n\t\t\t\tprimType = 0;\n\t\t\t}\n\t\t\tconsole.log(\"Parsed a Primivite: Name = \" + name + \"| type = \" + primitiveTypes[primType]);\n\t\t}\n\t}\n\n\t// Block ID = 22\n\tprivate parseContainer(blockID:number):void\n\t{\n\t\tvar name:string;\n\t\tvar par_id:number;\n\t\tvar mtx:Matrix3D;\n\t\tvar ctr:DisplayObjectContainer;\n\t\tvar parent:DisplayObjectContainer;\n\n\t\tpar_id = this._newBlockBytes.readUnsignedInt();\n\t\tmtx = this.parseMatrix3D();\n\t\tname = this.parseVarStr();\n\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tctr = new DisplayObjectContainer();\n\t\tctr.transform.matrix3D = mtx;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tvar obj:DisplayObject = (<DisplayObjectContainer> returnedArray[1]).addChild(ctr);\n\t\t\tparentName = (<DisplayObjectContainer> returnedArray[1]).name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[ blockID ].addError(\"Could not find a parent for this ObjectContainer3D\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(ctr);\n\t\t}\n\n\t\t// in AWD version 2.1 we read the Container properties\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\t\tctr.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t}\n\t\t// in other versions we do not read the Container properties\n\t\telse {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\t// the extraProperties should only be set for AWD2.1-Files, but is read for both versions\n\t\tctr.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> ctr, name);\n\t\tthis._blocks[blockID].data = ctr;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Container: Name = '\" + name + \"' | Parent-Name = \" + parentName);\n\t\t}\n\t}\n\n\t// Block ID = 23\n\tprivate parseMeshInstance(blockID:number):void\n\t{\n\t\tvar num_materials:number;\n\t\tvar materials_parsed:number;\n\t\tvar parent:DisplayObjectContainer;\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar data_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar geom:Geometry;\n\t\tvar returnedArrayGeometry:Array<any> = this.getAssetByID(data_id, [AssetType.GEOMETRY])\n\n\t\tif (returnedArrayGeometry[0]) {\n\t\t\tgeom = <Geometry> returnedArrayGeometry[1];\n\t\t} else {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a Geometry for this Mesh. A empty Geometry is created!\");\n\t\t\tgeom = new Geometry();\n\t\t}\n\n\t\tthis._blocks[blockID].geoID = data_id;\n\t\tvar materials:Array<MaterialBase> = new Array<MaterialBase>();\n\t\tnum_materials = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar materialNames:Array<string> = new Array<string>();\n\t\tmaterials_parsed = 0;\n\n\t\tvar returnedArrayMaterial:Array<any>;\n\n\t\twhile (materials_parsed < num_materials) {\n\t\t\tvar mat_id:number;\n\t\t\tmat_id = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayMaterial = this.getAssetByID(mat_id, [AssetType.MATERIAL])\n\t\t\tif ((!returnedArrayMaterial[0]) && (mat_id > 0)) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find Material Nr \" + materials_parsed + \" (ID = \" + mat_id + \" ) for this Mesh\");\n\t\t\t}\n\n\t\t\tvar m:MaterialBase = <MaterialBase> returnedArrayMaterial[1];\n\n\t\t\tmaterials.push(m);\n\t\t\tmaterialNames.push(m.name);\n\n\t\t\tmaterials_parsed++;\n\t\t}\n\n\t\tvar mesh:Mesh = new Mesh(geom, null);\n\t\tmesh.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\tif (returnedArrayParent[0]) {\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(mesh);\n\t\t\tparentName = objC.name;\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Mesh\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\t\t}\n\n\t\tif (materials.length >= 1 && mesh.subMeshes.length == 1) {\n\t\t\tmesh.material = materials[0];\n\t\t} else if (materials.length > 1) {\n\t\t\tvar i:number;\n\n\t\t\t// Assign each sub-mesh in the mesh a material from the list. If more sub-meshes\n\t\t\t// than materials, repeat the last material for all remaining sub-meshes.\n\t\t\tfor (i = 0; i < mesh.subMeshes.length; i++) {\n\t\t\t\tmesh.subMeshes[i].material = materials[Math.min(materials.length - 1, i)];\n\t\t\t}\n\t\t}\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tvar props:AWDProperties = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8, 5:AWDParser.BOOL});\n\t\t\tmesh.pivot = new Vector3D(<number>props.get(1, 0), <number>props.get(2, 0), <number> props.get(3, 0));\n\t\t\tmesh.castsShadows = props.get(5, true);\n\t\t} else {\n\t\t\tthis.parseProperties(null);\n\t\t}\n\n\t\tmesh.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(<IAsset> mesh, name);\n\t\tthis._blocks[blockID].data = mesh;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Mesh: Name = '\" + name + \"' | Parent-Name = \" + parentName + \"| Geometry-Name = \" + geom.name + \" | SubMeshes = \" + mesh.subMeshes.length + \" | Mat-Names = \" + materialNames.toString());\n\t\t}\n\t}\n\n\n\t//Block ID 31\n\tprivate parseSkyboxInstance(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar cubeTexAddr:number = this._newBlockBytes.readUnsignedInt();\n\n\t\tvar returnedArrayCubeTex:Array<any> = this.getAssetByID(cubeTexAddr, [AssetType.TEXTURE], \"CubeTexture\");\n\t\tif ((!returnedArrayCubeTex[0]) && (cubeTexAddr != 0))\n\t\t\tthis._blocks[blockID].addError(\"Could not find the Cubetexture (ID = \" + cubeTexAddr + \" ) for this Skybox\");\n\t\tvar asset:Skybox = new Skybox(<ImageCubeTexture> returnedArrayCubeTex[1]);\n\n\t\tthis.parseProperties(null)\n\t\tasset.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(asset, name);\n\t\tthis._blocks[blockID].data = asset;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skybox: Name = '\" + name + \"' | CubeTexture-Name = \" + (<ImageCubeTexture> returnedArrayCubeTex[1]).name);\n\n\t}\n\n\t//Block ID = 41\n\tprivate parseLight(blockID:number):void\n\t{\n\t\tvar light:LightBase;\n\t\tvar newShadowMapper:ShadowMapperBase;\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar lightType:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:this._propsNrType, 2:this._propsNrType, 3:AWDParser.COLOR, 4:this._propsNrType, 5:this._propsNrType, 6:AWDParser.BOOL, 7:AWDParser.COLOR, 8:this._propsNrType, 9:AWDParser.UINT8, 10:AWDParser.UINT8, 11:this._propsNrType, 12:AWDParser.UINT16, 21:this._matrixNrType, 22:this._matrixNrType, 23:this._matrixNrType});\n\t\tvar shadowMapperType:number = props.get(9, 0);\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar lightTypes:Array<string> = [\"Unsupported LightType\", \"PointLight\", \"DirectionalLight\"];\n\t\tvar shadowMapperTypes:Array<string> = [\"No ShadowMapper\", \"DirectionalShadowMapper\", \"NearDirectionalShadowMapper\", \"CascadeShadowMapper\", \"CubeMapShadowMapper\"];\n\n\t\tif (lightType == 1) {\n\t\t\tlight = new PointLight();\n\n\t\t\t(<PointLight> light).radius = props.get(1, 90000);\n\t\t\t(<PointLight> light).fallOff = props.get(2, 100000);\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 4) {\n\t\t\t\t\tnewShadowMapper = new CubeMapShadowMapper();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.transform.matrix3D = mtx;\n\n\t\t}\n\n\t\tif (lightType == 2) {\n\n\t\t\tlight = new DirectionalLight(props.get(21, 0), props.get(22, -1), props.get(23, 1));\n\n\t\t\tif (shadowMapperType > 0) {\n\t\t\t\tif (shadowMapperType == 1) {\n\t\t\t\t\tnewShadowMapper = new DirectionalShadowMapper();\n\t\t\t\t}\n\n\t\t\t\t//if (shadowMapperType == 2)\n\t\t\t\t//  newShadowMapper = new NearDirectionalShadowMapper(props.get(11, 0.5));\n\t\t\t\t//if (shadowMapperType == 3)\n\t\t\t\t//   newShadowMapper = new CascadeShadowMapper(props.get(12, 3));\n\n\t\t\t}\n\n\t\t}\n\t\tlight.color = props.get(3, 0xffffff);\n\t\tlight.specular = props.get(4, 1.0);\n\t\tlight.diffuse = props.get(5, 1.0);\n\t\tlight.ambientColor = props.get(7, 0xffffff);\n\t\tlight.ambient = props.get(8, 0.0);\n\n\t\t// if a shadowMapper has been created, adjust the depthMapSize if needed, assign to light and set castShadows to true\n\t\tif (newShadowMapper) {\n\t\t\tif (newShadowMapper instanceof CubeMapShadowMapper) {\n\t\t\t\tif (props.get(10, 1) != 1) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 1)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (props.get(10, 2) != 2) {\n\t\t\t\t\tnewShadowMapper.depthMapSize = this._depthSizeDic[props.get(10, 2)];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlight.shadowMapper = newShadowMapper;\n\t\t\tlight.castsShadows = true;\n\t\t}\n\n\t\tif (par_id != 0) {\n\n\t\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\t\tif (returnedArrayParent[0]) {\n\t\t\t\t(<DisplayObjectContainer> returnedArrayParent[1]).addChild(light);\n\t\t\t\tparentName = (<DisplayObjectContainer> returnedArrayParent[1]).name;\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Light\");\n\t\t\t}\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(light);\n\t\t}\n\n\t\tthis.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(< IAsset> light, name);\n\n\t\tthis._blocks[blockID].data = light;\n\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Light: Name = '\" + name + \"' | Type = \" + lightTypes[lightType] + \" | Parent-Name = \" + parentName + \" | ShadowMapper-Type = \" + shadowMapperTypes[shadowMapperType]);\n\n\t}\n\n\t//Block ID = 43\n\tprivate parseCamera(blockID:number):void\n\t{\n\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\t\tvar parentName:string = \"Root (TopLevel)\";\n\t\tvar projection:ProjectionBase;\n\n\t\tthis._newBlockBytes.readUnsignedByte(); //set as active camera\n\t\tthis._newBlockBytes.readShort(); //lengthof lenses - not used yet\n\n\t\tvar projectiontype:number = this._newBlockBytes.readShort();\n\t\tvar props:AWDProperties = this.parseProperties({101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType});\n\n\t\tswitch (projectiontype) {\n\t\t\tcase 5001:\n\t\t\t\tprojection = new PerspectiveProjection(props.get(101, 60));\n\t\t\t\tbreak;\n\t\t\tcase 5002:\n\t\t\t\tprojection = new OrthographicProjection(props.get(101, 500));\n\t\t\t\tbreak;\n\t\t\tcase 5003:\n\t\t\t\tprojection = new OrthographicOffCenterProjection(props.get(101, -400), props.get(102, 400), props.get(103, -300), props.get(104, 300));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"unsupportedLenstype\");\n\t\t\t\treturn;\n\t\t}\n\n\t\tvar camera:Camera = new Camera(projection);\n\t\tcamera.transform.matrix3D = mtx;\n\n\t\tvar returnedArrayParent:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH])\n\n\t\tif (returnedArrayParent[0]) {\n\n\t\t\tvar objC:DisplayObjectContainer = <DisplayObjectContainer> returnedArrayParent[1];\n\t\t\tobjC.addChild(camera);\n\n\t\t\tparentName = objC.name;\n\n\t\t} else if (par_id > 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find a parent for this Camera\");\n\t\t} else {\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(camera);\n\t\t}\n\n\t\tcamera.name = name;\n\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\t\tcamera.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\tcamera.extra = this.parseUserAttributes();\n\n\t\tthis._pFinalizeAsset(camera, name);\n\n\t\tthis._blocks[blockID].data = camera\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a Camera: Name = '\" + name + \"' | Projectiontype = \" + projection + \" | Parent-Name = \" + parentName);\n\t\t}\n\n\t}\n\n\t//Block ID = 51\n\tprivate parseLightPicker(blockID:number):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar numLights:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar lightsArray:Array<LightBase> = new Array<LightBase>();\n\t\tvar k:number = 0;\n\t\tvar lightID:number = 0;\n\n\t\tvar returnedArrayLight:Array<any>;\n\t\tvar lightsArrayNames:Array<string> = new Array<string>();\n\n\t\tfor (k = 0; k < numLights; k++) {\n\t\t\tlightID = this._newBlockBytes.readUnsignedInt();\n\t\t\treturnedArrayLight = this.getAssetByID(lightID, [AssetType.LIGHT])\n\n\t\t\tif (returnedArrayLight[0]) {\n\t\t\t\tlightsArray.push(<LightBase> returnedArrayLight[1]);\n\t\t\t\tlightsArrayNames.push(( <LightBase> returnedArrayLight[1]).name);\n\n\t\t\t} else {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find a Light Nr \" + k + \" (ID = \" + lightID + \" ) for this LightPicker\");\n\t\t\t}\n\t\t}\n\n\t\tif (lightsArray.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this LightPicker, cause no Light was found.\");\n\t\t\tthis.parseUserAttributes();\n\t\t\treturn; //return without any more parsing for this block\n\t\t}\n\n\t\tvar lightPick:LightPickerBase = new StaticLightPicker(lightsArray);\n\t\tlightPick.name = name;\n\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> lightPick, name);\n\n\t\tthis._blocks[blockID].data = lightPick\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a StaticLightPicker: Name = '\" + name + \"' | Texture-Name = \" + lightsArrayNames.toString());\n\t\t}\n\t}\n\n\t//Block ID = 81\n\tprivate parseMaterial(blockID:number):void\n\t{\n\t\t// TODO: not used\n\t\t////blockLength = block.len;\n\t\tvar name:string;\n\t\tvar type:number;\n\t\tvar props:AWDProperties;\n\t\tvar mat:MethodMaterial;\n\t\tvar attributes:Object;\n\t\tvar finalize:boolean;\n\t\tvar num_methods:number;\n\t\tvar methods_parsed:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tname = this.parseVarStr();\n\t\ttype = this._newBlockBytes.readUnsignedByte();\n\t\tnum_methods = this._newBlockBytes.readUnsignedByte();\n\n\t\t// Read material numerical properties\n\t\t// (1=color, 2=bitmap url, 10=alpha, 11=alpha_blending, 12=alpha_threshold, 13=repeat)\n\t\tprops = this.parseProperties({ 1:AWDParser.INT32, 2:AWDParser.BADDR, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL});\n\n\t\tmethods_parsed = 0;\n\t\twhile (methods_parsed < num_methods) {\n\t\t\tvar method_type:number;\n\n\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tmethods_parsed += 1;\n\t\t}\n\t\tvar debugString:string = \"\";\n\t\tattributes = this.parseUserAttributes();\n\t\tif (type === 1) { // Color material\n\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\tvar color:number;\n\t\t\tcolor = props.get(1, 0xffffff);\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t} else {\n\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t}\n\t\t} else if (type === 2) {\n\t\t\tvar tex_addr:number = props.get(2, 0);\n\n\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\n\n\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffsueTexture (ID = \" + tex_addr + \" ) for this Material\");\n\n\t\t\tmat = new MethodMaterial(<Texture2DBase> returnedArray[1]);\n\n\t\t\tif (this.materialMode < 2) {\n\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t} else {\n\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + mat.name;\n\t\t\t}\n\t\t}\n\n\t\tmat.extra = attributes;\n\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\tmat.repeat = props.get(13, false);\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\t\tthis._blocks[blockID].data = mat;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\n\t\t}\n\t}\n\n\t// Block ID = 81 AWD2.1\n\tprivate parseMaterial_v1(blockID:number):void\n\t{\n\t\tvar mat:MethodMaterial;\n\t\tvar normalTexture:Texture2DBase;\n\t\tvar specTexture:Texture2DBase;\n\t\tvar returnedArray:Array<any>;\n\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar num_methods:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 4:AWDParser.UINT8, 5:AWDParser.BOOL, 6:AWDParser.BOOL, 7:AWDParser.BOOL, 8:AWDParser.BOOL, 9:AWDParser.UINT8, 10:this._propsNrType, 11:AWDParser.BOOL, 12:this._propsNrType, 13:AWDParser.BOOL, 15:this._propsNrType, 16:AWDParser.UINT32, 17:AWDParser.BADDR, 18:this._propsNrType, 19:this._propsNrType, 20:AWDParser.UINT32, 21:AWDParser.BADDR, 22:AWDParser.BADDR});\n\t\tvar spezialType:number = props.get(4, 0);\n\t\tvar debugString:string = \"Parsed Material \";\n\n\t\tif (spezialType >= 2) {//this is no supported material\n\t\t\tthis._blocks[blockID].addError(\"Material-spezialType '\" + spezialType + \"' is not supported, can only be 0:singlePass, 1:MultiPass !\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (type <= 2) {// Color material\n\t\t\tif (this.materialMode == 1)\n\t\t\t\tspezialType = 0;\n\t\t\telse if (this.materialMode == 2)\n\t\t\t\tspezialType = 1;\n\n\t\t\tif (spezialType < 2) {//this is SinglePass or MultiPass\n\n\t\t\t\tif (type == 1) {// Color material\n\t\t\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\n\t\t\t\t\tif (spezialType == 1) {//\tMultiPassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color);\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(MultiPass): Name = '\" + name + \"' | \";\n\n\t\t\t\t\t} else { //\tSinglePassMaterial\n\t\t\t\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\t\t\t\t\t\tdebugString += \"Parsed a ColorMaterial(SinglePass): Name = '\" + name + \"' | \";\n\t\t\t\t\t}\n\n\t\t\t\t} else if (type == 2) {// texture material\n\t\t\t\t\tvar tex_addr:number = props.get(2, 0);//TODO temporarily swapped so that diffuse texture goes to ambient\n\t\t\t\t\treturnedArray = this.getAssetByID(tex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\t\tif ((!returnedArray[0]) && (tex_addr > 0))\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AmbientTexture (ID = \" + tex_addr + \" ) for this MethodMaterial\");\n\n\t\t\t\t\tvar texture:Texture2DBase = returnedArray[1];\n\n\t\t\t\t\tmat = new MethodMaterial(texture);\n\n\t\t\t\t\tif (spezialType == 1) {// MultiPassMaterial\n\t\t\t\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(MultiPass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t\t} else {//\tSinglePassMaterial\n\t\t\t\t\t\tmat.alpha = props.get(10, 1.0);\n\t\t\t\t\t\tmat.alphaBlending = props.get(11, false);\n\n\t\t\t\t\t\tdebugString += \"Parsed a MethodMaterial(SinglePass): Name = '\" + name + \"' | Texture-Name = \" + texture.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar diffuseTexture:Texture2DBase;\n\t\t\t\tvar diffuseTex_addr:number = props.get(17, 0);\n\n\t\t\t\treturnedArray = this.getAssetByID(diffuseTex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (diffuseTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the DiffuseTexture (ID = \" + diffuseTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\n\t\t\t\tif (returnedArray[0])\n\t\t\t\t\tdiffuseTexture = returnedArray[1];\n\n\t\t\t\tif (diffuseTexture) {\n\t\t\t\t\tmat.diffuseTexture = diffuseTexture;\n\t\t\t\t\tdebugString += \" | DiffuseTexture-Name = \" + diffuseTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar normalTex_addr:number = props.get(3, 0);\n\n\t\t\t\treturnedArray = this.getAssetByID(normalTex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (normalTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the NormalTexture (ID = \" + normalTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\n\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\tnormalTexture = returnedArray[1];\n\t\t\t\t\tdebugString += \" | NormalTexture-Name = \" + normalTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar specTex_addr:number = props.get(21, 0);\n\t\t\t\treturnedArray = this.getAssetByID(specTex_addr, [AssetType.TEXTURE]);\n\n\t\t\t\tif ((!returnedArray[0]) && (specTex_addr != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SpecularTexture (ID = \" + specTex_addr + \" ) for this MethodMaterial\");\n\t\t\t\t}\n\t\t\t\tif (returnedArray[0]) {\n\t\t\t\t\tspecTexture = returnedArray[1];\n\t\t\t\t\tdebugString += \" | SpecularTexture-Name = \" + specTexture.name;\n\t\t\t\t}\n\n\t\t\t\tvar lightPickerAddr:number = props.get(22, 0);\n\t\t\t\treturnedArray = this.getAssetByID(lightPickerAddr, [AssetType.LIGHT_PICKER])\n\n\t\t\t\tif ((!returnedArray[0]) && (lightPickerAddr)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightPicker (ID = \" + lightPickerAddr + \" ) for this MethodMaterial\");\n\t\t\t\t} else {\n\t\t\t\t\tmat.lightPicker = <LightPickerBase> returnedArray[1];\n\t\t\t\t\t//debugString+=\" | Lightpicker-Name = \"+LightPickerBase(returnedArray[1]).name;\n\t\t\t\t}\n\n\t\t\t\tmat.smooth = props.get(5, true);\n\t\t\t\tmat.mipmap = props.get(6, true);\n\t\t\t\tmat.bothSides = props.get(7, false);\n\t\t\t\tmat.alphaPremultiplied = props.get(8, false);\n\t\t\t\tmat.blendMode = this.blendModeDic[props.get(9, 0)];\n\t\t\t\tmat.repeat = props.get(13, false);\n\n\t\t\t\tif (normalTexture)\n\t\t\t\t\tmat.normalMap = normalTexture;\n\n\t\t\t\tif (specTexture)\n\t\t\t\t\tmat.specularMap = specTexture;\n\n\t\t\t\tmat.alphaThreshold = props.get(12, 0.0);\n\t\t\t\tmat.ambient = props.get(15, 1.0);\n\t\t\t\tmat.diffuseColor = props.get(16, 0xffffff);\n\t\t\t\tmat.specular = props.get(18, 1.0);\n\t\t\t\tmat.gloss = props.get(19, 50);\n\t\t\t\tmat.specularColor = props.get(20, 0xffffff);\n\n\t\t\t\tvar methods_parsed:number = 0;\n\t\t\t\tvar targetID:number;\n\n\t\t\t\twhile (methods_parsed < num_methods) {\n\t\t\t\t\tvar method_type:number;\n\t\t\t\t\tmethod_type = this._newBlockBytes.readUnsignedShort();\n\n\t\t\t\t\tprops = this.parseProperties({\n\t\t\t\t\t\t1: AWDParser.BADDR,\n\t\t\t\t\t\t2: AWDParser.BADDR,\n\t\t\t\t\t\t3: AWDParser.BADDR,\n\t\t\t\t\t\t101: this._propsNrType,\n\t\t\t\t\t\t102: this._propsNrType,\n\t\t\t\t\t\t103: this._propsNrType,\n\t\t\t\t\t\t201: AWDParser.UINT32,\n\t\t\t\t\t\t202: AWDParser.UINT32,\n\t\t\t\t\t\t301: AWDParser.UINT16,\n\t\t\t\t\t\t302: AWDParser.UINT16,\n\t\t\t\t\t\t401: AWDParser.UINT8,\n\t\t\t\t\t\t402: AWDParser.UINT8,\n\t\t\t\t\t\t601: AWDParser.COLOR,\n\t\t\t\t\t\t602: AWDParser.COLOR,\n\t\t\t\t\t\t701: AWDParser.BOOL,\n\t\t\t\t\t\t702: AWDParser.BOOL,\n\t\t\t\t\t\t801: AWDParser.MTX4x4\n\t\t\t\t\t});\n\n\t\t\t\t\tswitch (method_type) {\n\t\t\t\t\t\tcase 999: //wrapper-Methods that will load a previous parsed EffektMethod returned\n\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.EFFECTS_METHOD]);\n\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EffectMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmat.addEffectMethod(returnedArray[1]);\n\n\t\t\t\t\t\t\t\tdebugString += \" | EffectMethod-Name = \" + (<EffectMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 998: //wrapper-Methods that will load a previous parsed ShadowMapMethod\n\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\n\t\t\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowMethod (ID = \" + targetID + \" ) for this Material\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmat.shadowMethod = returnedArray[1];\n\t\t\t\t\t\t\t\tdebugString += \" | ShadowMethod-Name = \" + (<ShadowMethodBase> returnedArray[1]).name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1: //EnvMapAmbientMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapAmbientMethodMaterial\");\n\t\t\t\t\t\t\tmat.ambientMethod = new AmbientEnvMapMethod(returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | AmbientEnvMapMethod | EnvMap-Name =\" + (<CubeTextureBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 51: //DepthDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseDepthMethod();\n\t\t\t\t\t\t\tdebugString += \" | DiffuseDepthMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 52: //GradientDiffuseMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the GradientDiffuseTexture (ID = \" + targetID + \" ) for this GradientDiffuseMethod\");\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseGradientMethod(returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseGradientMethod | GradientDiffuseTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 53: //WrapDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseWrapMethod(props.get(101, 5));\n\t\t\t\t\t\t\tdebugString += \" | DiffuseWrapMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 54: //LightMapDiffuseMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapDiffuseMethod\");\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)], false, mat.diffuseMethod);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseLightMapMethod | LightMapTexture-Name =\" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 55: //CelDiffuseMethod\n\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseCelMethod(props.get(401, 3), mat.diffuseMethod);\n\t\t\t\t\t\t\t(<DiffuseCelMethod> mat.diffuseMethod).smoothness = props.get(101, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | DiffuseCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 56: //SubSurfaceScatteringMethod\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tmat.diffuseMethod = new DiffuseSubSurfaceMethod(); //depthMapSize and depthMapOffset ?\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scattering = props.get(101, 0.2);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).translucency = props.get(102, 1);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\t(<DiffuseSubSurfaceMethod> mat.diffuseMethod).scatterColor = props.get(601, 0xffffff);\n\t\t\t\t\t\t\t//\t\t\t\t\t\t\tdebugString += \" | DiffuseSubSurfaceMethod\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 101: //AnisotropicSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularAnisotropicMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularAnisotropicMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 102: //SpecularPhongMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularPhongMethod();\n\t\t\t\t\t\t\tdebugString += \" | SpecularPhongMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 103: //CellSpecularMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularCelMethod(props.get(101, 0.5), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularCelMethod> mat.specularMethod).smoothness = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularCelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 104: //SpecularFresnelMethod\n\t\t\t\t\t\t\tmat.specularMethod = new SpecularFresnelMethod(props.get(701, true), mat.specularMethod);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).fresnelPower = props.get(101, 5);\n\t\t\t\t\t\t\t(<SpecularFresnelMethod> mat.specularMethod).normalReflectance = props.get(102, 0.1);\n\t\t\t\t\t\t\tdebugString += \" | SpecularFresnelMethod\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 151://HeightMapNormalMethod - thios is not implemented for now, but might appear later\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 152: //SimpleWaterNormalMethod\n\t\t\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SecoundNormalMap (ID = \" + targetID + \" ) for this SimpleWaterNormalMethod\");\n\t\t\t\t\t\t\tif (!mat.normalMap)\n\t\t\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find a normal Map on this Material to use with this SimpleWaterNormalMethod\");\n\n\t\t\t\t\t\t\tmat.normalMap = returnedArray[1];\n\t\t\t\t\t\t\tmat.normalMethod = new NormalSimpleWaterMethod(mat.normalMap, returnedArray[1]);\n\t\t\t\t\t\t\tdebugString += \" | NormalSimpleWaterMethod | Second-NormalTexture-Name = \" + (<Texture2DBase> returnedArray[1]).name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseUserAttributes();\n\t\t\t\t\tmethods_parsed += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (type==3){\n\t\t\tvar color:number = props.get(1, 0xcccccc);//TODO temporarily swapped so that diffuse color goes to ambient\n\t\t\tdebugString+=color;\n\t\t\tmat = new MethodMaterial(color, props.get(10, 1.0));\n\t\t\tdebugString+= \"alpha = \"+props.get(10, 1.0)+\" \";\n\t\t\tmat.bothSides = true;\n\n\t\t}\n\t\tmat.extra = this.parseUserAttributes();\n\t\tthis._pFinalizeAsset(<IAsset> mat, name);\n\n\t\tthis._blocks[blockID].data = mat;\n\t\tif (this._debug) {\n\t\t\tconsole.log(debugString);\n\t\t}\n\t}\n\n\t//Block ID = 82\n\tprivate parseTexture(blockID:number):void\n\t{\n\n\t\tvar asset:Texture2DBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar data_len:number;\n\n\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\n\t\t// External\n\t\tif (type == 0) {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar url:string;\n\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), new URLRequest(url), false, null, true);\n\n\t\t} else {\n\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\tvar data:ByteArray;\n\t\t\tdata = new ByteArray();\n\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t//\n\t\t\t// AWDParser - Fix for FireFox Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=715075 .\n\t\t\t//\n\t\t\t// Converting data to image here instead of parser - fix FireFox bug where image width / height is 0 when created from data\n\t\t\t// This gives the browser time to initialise image width / height.\n\n\t\t\tthis._pAddDependency(this._cur_block_id.toString(), null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t//this._pAddDependency(this._cur_block_id.toString(), null, false, data, true);\n\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing a \" + textureStylesNames[type] + \" Bitmap for Texture\");\n\t\t}\n\n\t}\n\n\t//Block ID = 83\n\tprivate parseCubeTexture(blockID:number):void\n\t{\n\t\t//blockLength = block.len;\n\t\tvar data_len:number;\n\t\tvar asset:CubeTextureBase;\n\t\tvar i:number;\n\n\t\tthis._cubeTextures = new Array<any>();\n\t\tthis._texture_users[ this._cur_block_id.toString() ] = [];\n\n\t\tvar type:number = this._newBlockBytes.readUnsignedByte();\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tthis._texture_users[this._cur_block_id.toString()] = [];\n\t\t\tthis._cubeTextures.push(null);\n\n\t\t\t// External\n\t\t\tif (type == 0) {\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar url:string;\n\t\t\t\turl = this._newBlockBytes.readUTFBytes(data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, new URLRequest(url), false, null, true);\n\t\t\t} else {\n\n\t\t\t\tdata_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tvar data:ByteArray;\n\t\t\t\tdata = new ByteArray();\n\n\t\t\t\tthis._newBlockBytes.readBytes(data, 0, data_len);\n\n\t\t\t\tthis._pAddDependency(this._cur_block_id.toString() + \"#\" + i, null, false, ParserUtils.byteArrayToImage(data), true);\n\t\t\t}\n\t\t}\n\n\t\t// Ignore for now\n\t\tthis.parseProperties(null);\n\t\tthis._blocks[blockID].extras = this.parseUserAttributes();\n\t\tthis._pPauseAndRetrieveDependencies();\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tvar textureStylesNames:Array<string> = [\"external\", \"embed\"]\n\t\t\tconsole.log(\"Start parsing 6 \" + textureStylesNames[type] + \" Bitmaps for CubeTexture\");\n\t\t}\n\t}\n\n\t//Block ID = 91\n\tprivate parseSharedMethodBlock(blockID:number):void\n\t{\n\t\tvar asset:EffectMethodBase;\n\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\t\tasset = this.parseSharedMethodList(blockID);\n\t\tthis.parseUserAttributes();\n\t\tthis._blocks[blockID].data = asset;\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a EffectMethod: Name = \" + asset.name + \" Type = \" + asset);\n\t\t}\n\t}\n\n\t//Block ID = 92\n\tprivate parseShadowMethodBlock(blockID:number):void\n\t{\n\t\tvar type:number;\n\t\tvar data_len:number;\n\t\tvar asset:ShadowMethodBase;\n\t\tvar shadowLightID:number;\n\t\tthis._blocks[blockID].name = this.parseVarStr();\n\n\t\tshadowLightID = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(shadowLightID, [AssetType.LIGHT]);\n\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the TargetLight (ID = \" + shadowLightID + \" ) for this ShadowMethod - ShadowMethod not created\");\n\t\t\treturn;\n\t\t}\n\n\t\tasset = this.parseShadowMethodList(<LightBase> returnedArray[1], blockID);\n\n\t\tif (!asset)\n\t\t\treturn;\n\n\t\tthis.parseUserAttributes(); // Ignore for now\n\t\tthis._pFinalizeAsset(<IAsset> asset, this._blocks[blockID].name);\n\t\tthis._blocks[blockID].data = asset;\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a ShadowMapMethodMethod: Name = \" + asset.name + \" | Type = \" + asset + \" | Light-Name = \", ( <LightBase> returnedArray[1] ).name);\n\t\t}\n\t}\n\n\n\t//Block ID = 253\n\tprivate parseCommand(blockID:number):void\n\t{\n\t\tvar hasBlocks:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tvar par_id:number = this._newBlockBytes.readUnsignedInt();\n\t\tvar mtx:Matrix3D = this.parseMatrix3D();\n\t\tvar name:string = this.parseVarStr();\n\n\t\tvar parentObject:DisplayObjectContainer;\n\t\tvar targetObject:DisplayObjectContainer;\n\n\t\tvar returnedArray:Array<any> = this.getAssetByID(par_id, [AssetType.CONTAINER, AssetType.LIGHT, AssetType.MESH]);\n\n\t\tif (returnedArray[0]) {\n\t\t\tparentObject = <DisplayObjectContainer> returnedArray[1];\n\t\t}\n\n\t\tvar numCommands:number = this._newBlockBytes.readShort();\n\t\tvar typeCommand:number = this._newBlockBytes.readShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tswitch (typeCommand) {\n\t\t\tcase 1:\n\n\t\t\t\tvar targetID:number = props.get(1, 0);\n\t\t\t\tvar returnedArrayTarget:Array<any> = this.getAssetByID(targetID, [AssetType.LIGHT, AssetType.TEXTURE_PROJECTOR]); //for no only light is requested!!!!\n\n\t\t\t\tif ((!returnedArrayTarget[0]) && (targetID != 0)) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the light (ID = \" + targetID + \" ( for this CommandBock!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttargetObject = returnedArrayTarget[1];\n\n\t\t\t\tif (parentObject) {\n\t\t\t\t\tparentObject.addChild(targetObject);\n\t\t\t\t}\n\n\t\t\t\ttargetObject.transform.matrix3D = mtx;\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (targetObject) {\n\t\t\tprops = this.parseProperties({1:this._matrixNrType, 2:this._matrixNrType, 3:this._matrixNrType, 4:AWDParser.UINT8});\n\n\t\t\ttargetObject.pivot = new Vector3D(props.get(1, 0), props.get(2, 0), props.get(3, 0));\n\t\t\ttargetObject.extra = this.parseUserAttributes();\n\n\t\t}\n\t\tthis._blocks[blockID].data = targetObject\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a CommandBlock: Name = '\" + name);\n\t\t}\n\n\t}\n\n\t//blockID 255\n\tprivate parseMetaData(blockID:number):void\n\t{\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT32, 2:AWDParser.AWDSTRING, 3:AWDParser.AWDSTRING, 4:AWDParser.AWDSTRING, 5:AWDParser.AWDSTRING});\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Parsed a MetaDataBlock: TimeStamp         = \" + props.get(1, 0));\n\t\t\tconsole.log(\"                        EncoderName       = \" + props.get(2, \"unknown\"));\n\t\t\tconsole.log(\"                        EncoderVersion    = \" + props.get(3, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorName     = \" + props.get(4, \"unknown\"));\n\t\t\tconsole.log(\"                        GeneratorVersion  = \" + props.get(5, \"unknown\"));\n\t\t}\n\t}\n\n\t//blockID 254\n\tprivate parseNameSpace(blockID:number):void\n\t{\n\t\tvar id:number = this._newBlockBytes.readUnsignedByte();\n\t\tvar nameSpaceString:string = this.parseVarStr();\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a NameSpaceBlock: ID = \" + id + \" | String = \" + nameSpaceString);\n\t}\n\n\t//--Parser UTILS---------------------------------------------------------------------------\n\n\t// this functions reads and creates a ShadowMethodMethod\n\tprivate parseShadowMethodList(light:LightBase, blockID:number):ShadowMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar shadowMethod:ShadowMethodBase;\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL, 801:AWDParser.MTX4x4});\n\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>\n\t\tswitch (methodType) {\n\t\t\t//\t\t\t\tcase 1001: //CascadeShadowMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0]) {\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this CascadeShadowMapMethod - ShadowMethod not created\");\n\t\t\t//\t\t\t\t\t\treturn shadowMethod;\n\t\t\t//\t\t\t\t\t}\n\t\t\t//\t\t\t\t\tshadowMethod = new CascadeShadowMapMethod(returnedArray[1]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 1002: //ShadowNearMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.SHADOW_MAP_METHOD]);\n\t\t\t\tif (!returnedArray[0]) {\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the ShadowBaseMethod (ID = \" + targetID + \" ) for this ShadowNearMethod - ShadowMethod not created\");\n\t\t\t\t\treturn shadowMethod;\n\t\t\t\t}\n\t\t\t\tshadowMethod = new ShadowNearMethod(<ShadowMethodBase> returnedArray[1]);\n\t\t\t\tbreak;\n\t\t\tcase 1101: //ShadowFilteredMethod\n\n\t\t\t\tshadowMethod = new ShadowFilteredMethod(<DirectionalLight> light);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowFilteredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t\tcase 1102: //ShadowDitheredMethod\n\n\n\t\t\t\tshadowMethod = new ShadowDitheredMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowDitheredMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1103: //ShadowSoftMethod\n\n\t\t\t\tshadowMethod = new ShadowSoftMethod(<DirectionalLight> light, <number> props.get(201, 5));\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\t(<ShadowSoftMethod> shadowMethod).range = props.get(103, 1);\n\n\t\t\t\tbreak;\n\t\t\tcase 1104: //ShadowHardMethod\n\t\t\t\tshadowMethod = new ShadowHardMethod(light);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).alpha = props.get(101, 1);\n\t\t\t\t(<ShadowHardMethod> shadowMethod).epsilon = props.get(102, 0.002);\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn shadowMethod;\n\t}\n\n\t//Block ID 101\n\tprivate parseSkeleton(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar skeleton:Skeleton = new Skeleton();\n\t\tthis.parseProperties(null); // Discard properties for now\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint:SkeletonJoint;\n\t\t\tvar ibp:Matrix3D;\n\t\t\t// Ignore joint id\n\t\t\tthis._newBlockBytes.readUnsignedShort();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.parentIndex = this._newBlockBytes.readUnsignedShort() - 1; // 0=null in AWD\n\t\t\tjoint.name = this.parseVarStr();\n\n\t\t\tibp = this.parseMatrix3D();\n\t\t\tjoint.inverseBindPose = ibp.rawData;\n\t\t\t// Ignore joint props/attributes for now\n\t\t\tthis.parseProperties(null);\n\t\t\tthis.parseUserAttributes();\n\t\t\tskeleton.joints.push(joint);\n\t\t\tjoints_parsed++;\n\t\t}\n\n\t\t// Discard attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(skeleton, name);\n\t\tthis._blocks[blockID].data = skeleton;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Skeleton: Name = \" + skeleton.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//Block ID = 102\n\tprivate parseSkeletonPose(blockID:number /*uint*/):void\n\t{\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_joints:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar pose:SkeletonPose = new SkeletonPose();\n\n\t\tvar joints_parsed:number /*uint*/ = 0;\n\t\twhile (joints_parsed < num_joints) {\n\t\t\tvar joint_pose:JointPose;\n\t\t\tvar has_transform:number /*uint*/;\n\t\t\tjoint_pose = new JointPose();\n\t\t\thas_transform = this._newBlockBytes.readUnsignedByte();\n\t\t\tif (has_transform == 1) {\n\t\t\t\tvar mtx_data:Array<number> = this.parseMatrix43RawData();\n\n\t\t\t\tvar mtx:Matrix3D = new Matrix3D(mtx_data);\n\t\t\t\tjoint_pose.orientation.fromMatrix(mtx);\n\t\t\t\tjoint_pose.translation.copyFrom(mtx.position);\n\n\t\t\t\tpose.jointPoses[joints_parsed] = joint_pose;\n\t\t\t}\n\t\t\tjoints_parsed++;\n\t\t}\n\t\t// Skip attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(pose, name);\n\t\tthis._blocks[blockID].data = pose;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonPose: Name = \" + pose.name + \" | Number of Joints = \" + joints_parsed);\n\t}\n\n\t//blockID 103\n\tprivate parseSkeletonAnimation(blockID:number /*uint*/):void\n\t{\n\t\tvar frame_dur:number;\n\t\tvar pose_addr:number /*uint*/;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar clip:SkeletonClipNode = new SkeletonClipNode();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tthis.parseProperties(null); // Ignore properties for now\n\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar returnedArray:Array<any>;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tpose_addr = this._newBlockBytes.readUnsignedInt();\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\treturnedArray = this.getAssetByID(pose_addr, [AssetType.SKELETON_POSE]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the SkeletonPose Frame # \" + frames_parsed + \" (ID = \" + pose_addr + \" ) for this SkeletonClipNode\");\n\t\t\telse\n\t\t\t\tclip.addFrame(<SkeletonPose> this._blocks[pose_addr].data, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif (clip.frames.length == 0) {\n\t\t\tthis._blocks[blockID].addError(\"Could not this SkeletonClipNode, because no Frames where set.\");\n\t\t\treturn;\n\t\t}\n\t\t// Ignore attributes for now\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a SkeletonClipNode: Name = \" + clip.name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//Block ID = 111 /  Block ID = 112\n\tprivate parseMeshPoseAnimation(blockID:number /*uint*/, poseOnly:boolean = false):void\n\t{\n\t\tvar num_frames:number /*uint*/ = 1;\n\t\tvar num_submeshes:number /*uint*/;\n\t\tvar frames_parsed:number /*uint*/;\n\t\tvar subMeshParsed:number /*uint*/;\n\t\tvar frame_dur:number;\n\t\tvar x:number;\n\t\tvar y:number;\n\t\tvar z:number;\n\t\tvar str_len:number;\n\t\tvar str_end:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar idx:number /*int*/ = 0;\n\t\tvar clip:VertexClipNode = new VertexClipNode();\n\t\tvar indices:Array<number> /*uint*/;\n\t\tvar verts:Array<number>;\n\t\tvar num_Streams:number /*int*/ = 0;\n\t\tvar streamsParsed:number /*int*/ = 0;\n\t\tvar streamtypes:Array<number> /*int*/ = new Array<number>() /*int*/;\n\t\tvar props:AWDProperties;\n\t\tvar thisGeo:Geometry;\n\t\tvar name:string = this.parseVarStr();\n\t\tvar geoAdress:number /*int*/ = this._newBlockBytes.readUnsignedInt();\n\t\tvar returnedArray:Array<any> = this.getAssetByID(geoAdress, [AssetType.GEOMETRY]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the target-Geometry-Object \" + geoAdress + \" ) for this VertexClipNode\");\n\t\t\treturn;\n\t\t}\n\t\tvar uvs:Array<Array<number>> = this.getUVForVertexAnimation(geoAdress);\n\t\tif (!poseOnly)\n\t\t\tnum_frames = this._newBlockBytes.readUnsignedShort();\n\n\t\tnum_submeshes = this._newBlockBytes.readUnsignedShort();\n\t\tnum_Streams = this._newBlockBytes.readUnsignedShort();\n\t\tstreamsParsed = 0;\n\t\twhile (streamsParsed < num_Streams) {\n\t\t\tstreamtypes.push(this._newBlockBytes.readUnsignedShort());\n\t\t\tstreamsParsed++;\n\t\t}\n\t\tprops = this.parseProperties({1:AWDParser.BOOL, 2:AWDParser.BOOL});\n\n\t\tclip.looping = props.get(1, true);\n\t\tclip.stitchFinalFrame = props.get(2, false);\n\n\t\tframes_parsed = 0;\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tframe_dur = this._newBlockBytes.readUnsignedShort();\n\t\t\tgeometry = new Geometry();\n\t\t\tsubMeshParsed = 0;\n\t\t\twhile (subMeshParsed < num_submeshes) {\n\t\t\t\tstreamsParsed = 0;\n\t\t\t\tstr_len = this._newBlockBytes.readUnsignedInt();\n\t\t\t\tstr_end = this._newBlockBytes.position + str_len;\n\t\t\t\twhile (streamsParsed < num_Streams) {\n\t\t\t\t\tif (streamtypes[streamsParsed] == 1) {\n\t\t\t\t\t\tindices = (<Geometry> returnedArray[1]).subGeometries[subMeshParsed].indices;\n\t\t\t\t\t\tverts = new Array<number>();\n\t\t\t\t\t\tidx = 0;\n\t\t\t\t\t\twhile (this._newBlockBytes.position < str_end) {\n\t\t\t\t\t\t\tx = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\ty = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tz = this.readNumber(this._accuracyGeo)\n\t\t\t\t\t\t\tverts[idx++] = x;\n\t\t\t\t\t\t\tverts[idx++] = y;\n\t\t\t\t\t\t\tverts[idx++] = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubGeom = new TriangleSubGeometry(true);\n\t\t\t\t\t\tsubGeom.updateIndices(indices);\n\t\t\t\t\t\tsubGeom.updatePositions(verts);\n\t\t\t\t\t\tsubGeom.updateUVs(uvs[subMeshParsed]);\n\t\t\t\t\t\tsubGeom.updateVertexNormals(null);\n\t\t\t\t\t\tsubGeom.updateVertexTangents(null);\n\t\t\t\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\t\t\t\tsubGeom.autoDeriveTangents = false;\n\t\t\t\t\t\tsubMeshParsed++;\n\t\t\t\t\t\tgeometry.addSubGeometry(subGeom)\n\t\t\t\t\t} else\n\t\t\t\t\t\tthis._newBlockBytes.position = str_end;\n\t\t\t\t\tstreamsParsed++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tclip.addFrame(geometry, frame_dur);\n\t\t\tframes_parsed++;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tthis._pFinalizeAsset(clip, name);\n\n\t\tthis._blocks[blockID].data = clip;\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a VertexClipNode: Name = \" + clip.name + \" | Target-Geometry-Name = \" + (<Geometry> returnedArray[1]).name + \" | Number of Frames = \" + clip.frames.length);\n\t}\n\n\t//BlockID 113\n\tprivate parseVertexAnimationSet(blockID:number /*uint*/):void\n\t{\n\t\tvar poseBlockAdress:number /*int*/\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar num_frames:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.UINT16});\n\t\tvar frames_parsed:number /*uint*/ = 0;\n\t\tvar skeletonFrames:Array<SkeletonClipNode> = new Array<SkeletonClipNode>();\n\t\tvar vertexFrames:Array<VertexClipNode> = new Array<VertexClipNode>();\n\t\twhile (frames_parsed < num_frames) {\n\t\t\tposeBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\t\tvar returnedArray:Array<any> = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\n\t\t\tif (!returnedArray[0])\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationClipNode Nr \" + frames_parsed + \" ( \" + poseBlockAdress + \" ) for this AnimationSet\");\n\t\t\telse {\n\t\t\t\tif (returnedArray[1] instanceof VertexClipNode)\n\t\t\t\t\tvertexFrames.push(returnedArray[1])\n\t\t\t\tif (returnedArray[1] instanceof SkeletonClipNode)\n\t\t\t\t\tskeletonFrames.push(returnedArray[1])\n\t\t\t}\n\t\t\tframes_parsed++;\n\t\t}\n\t\tif ((vertexFrames.length == 0) && (skeletonFrames.length == 0)) {\n\t\t\tthis._blocks[blockID].addError(\"Could not create this AnimationSet, because it contains no animations\");\n\t\t\treturn;\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\tif (vertexFrames.length > 0) {\n\t\t\tvar newVertexAnimationSet:VertexAnimationSet = new VertexAnimationSet();\n\t\t\tfor (var i:number /*int*/ = 0; i < vertexFrames.length; i++)\n\t\t\t\tnewVertexAnimationSet.addAnimation(vertexFrames[i]);\n\t\t\tthis._pFinalizeAsset(newVertexAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newVertexAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a VertexAnimationSet: Name = \" + name + \" | Animations = \" + newVertexAnimationSet.animations.length + \" | Animation-Names = \" + newVertexAnimationSet.animationNames.toString());\n\n\t\t} else if (skeletonFrames.length > 0) {\n\t\t\treturnedArray = this.getAssetByID(poseBlockAdress, [AssetType.ANIMATION_NODE]);\n\t\t\tvar newSkeletonAnimationSet:SkeletonAnimationSet = new SkeletonAnimationSet(props.get(1, 4)); //props.get(1,4));\n\t\t\tfor (var i:number /*int*/ = 0; i < skeletonFrames.length; i++)\n\t\t\t\tnewSkeletonAnimationSet.addAnimation(skeletonFrames[i]);\n\t\t\tthis._pFinalizeAsset(newSkeletonAnimationSet, name);\n\t\t\tthis._blocks[blockID].data = newSkeletonAnimationSet;\n\t\t\tif (this._debug)\n\t\t\t\tconsole.log(\"Parsed a SkeletonAnimationSet: Name = \" + name + \" | Animations = \" + newSkeletonAnimationSet.animations.length + \" | Animation-Names = \" + newSkeletonAnimationSet.animationNames.toString());\n\n\t\t}\n\t}\n\n\t//BlockID 122\n\tprivate parseAnimatorSet(blockID:number /*uint*/):void\n\t{\n\t\tvar targetMesh:Mesh;\n\t\tvar animSetBlockAdress:number /*int*/\n\t\tvar targetAnimationSet:AnimationSetBase;\n\t\tvar outputString:string = \"\";\n\t\tvar name:string = this.parseVarStr();\n\t\tvar type:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR});\n\n\t\tanimSetBlockAdress = this._newBlockBytes.readUnsignedInt();\n\t\tvar targetMeshLength:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar meshAdresses:Array<number> /*uint*/ = new Array<number>() /*uint*/;\n\t\tfor (var i:number /*int*/ = 0; i < targetMeshLength; i++)\n\t\t\tmeshAdresses.push(this._newBlockBytes.readUnsignedInt());\n\n\t\tvar activeState:number /*uint*/ = this._newBlockBytes.readUnsignedShort();\n\t\tvar autoplay:boolean = ( this._newBlockBytes.readUnsignedByte() == 1 );\n\t\tthis.parseUserAttributes();\n\t\tthis.parseUserAttributes();\n\n\t\tvar returnedArray:Array<any>;\n\t\tvar targetMeshes:Array<Mesh> = new Array<Mesh>();\n\n\t\tfor (i = 0; i < meshAdresses.length; i++) {\n\t\t\treturnedArray = this.getAssetByID(meshAdresses[i], [AssetType.MESH]);\n\t\t\tif (returnedArray[0])\n\t\t\t\ttargetMeshes.push(<Mesh> returnedArray[1]);\n\t\t}\n\t\treturnedArray = this.getAssetByID(animSetBlockAdress, [AssetType.ANIMATION_SET]);\n\t\tif (!returnedArray[0]) {\n\t\t\tthis._blocks[blockID].addError(\"Could not find the AnimationSet ( \" + animSetBlockAdress + \" ) for this Animator\");;\n\t\t\treturn\n\t\t}\n\t\ttargetAnimationSet = <AnimationSetBase> returnedArray[1];\n\t\tvar thisAnimator:AnimatorBase;\n\t\tif (type == 1) {\n\n\t\t\treturnedArray = this.getAssetByID(props.get(1, 0), [AssetType.SKELETON]);\n\t\t\tif (!returnedArray[0]) {\n\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Skeleton ( \" + props.get(1, 0) + \" ) for this Animator\");\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthisAnimator = new SkeletonAnimator(<SkeletonAnimationSet> targetAnimationSet, <Skeleton> returnedArray[1]);\n\n\t\t} else if (type == 2)\n\t\t\tthisAnimator = new VertexAnimator(<VertexAnimationSet> targetAnimationSet);\n\n\t\tthis._pFinalizeAsset(thisAnimator, name);\n\t\tthis._blocks[blockID].data = thisAnimator;\n\t\tfor (i = 0; i < targetMeshes.length; i++) {\n\t\t\tif (type == 1)\n\t\t\t\ttargetMeshes[i].animator = (<SkeletonAnimator> thisAnimator);\n\t\t\tif (type == 2)\n\t\t\t\ttargetMeshes[i].animator = (<VertexAnimator> thisAnimator);\n\n\t\t}\n\t\tif (this._debug)\n\t\t\tconsole.log(\"Parsed a Animator: Name = \" + name);\n\t}\n\n\t// this functions reads and creates a EffectMethod\n\tprivate parseSharedMethodList(blockID:number):EffectMethodBase\n\t{\n\n\t\tvar methodType:number = this._newBlockBytes.readUnsignedShort();\n\t\tvar effectMethodReturn:EffectMethodBase;\n\n\t\tvar props:AWDProperties = this.parseProperties({1:AWDParser.BADDR, 2:AWDParser.BADDR, 3:AWDParser.BADDR, 101:this._propsNrType, 102:this._propsNrType, 103:this._propsNrType, 104:this._propsNrType, 105:this._propsNrType, 106:this._propsNrType, 107:this._propsNrType, 201:AWDParser.UINT32, 202:AWDParser.UINT32, 301:AWDParser.UINT16, 302:AWDParser.UINT16, 401:AWDParser.UINT8, 402:AWDParser.UINT8, 601:AWDParser.COLOR, 602:AWDParser.COLOR, 701:AWDParser.BOOL, 702:AWDParser.BOOL});\n\t\tvar targetID:number;\n\t\tvar returnedArray:Array<any>;\n\n\t\tswitch (methodType) {\n\t\t\t// Effect Methods\n\t\t\tcase 401: //ColorMatrix\n\t\t\t\teffectMethodReturn = new EffectColorMatrixMethod(props.get(101, new Array(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));\n\t\t\t\tbreak;\n\t\t\tcase 402: //ColorTransform\n\t\t\t\teffectMethodReturn = new EffectColorTransformMethod();\n\t\t\t\tvar offCol:number /*uint*/ = props.get(601, 0x00000000);\n\t\t\t\t(<EffectColorTransformMethod> effectMethodReturn).colorTransform = new ColorTransform(props.get(102, 1), props.get(103, 1), props.get(104, 1), props.get(101, 1), ((offCol >> 16) & 0xFF), ((offCol >> 8) & 0xFF), (offCol & 0xFF), ((offCol >> 24) & 0xFF));\n\t\t\t\tbreak;\n\t\t\tcase 403: //EnvMap\n\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\tconsole.log('ENV MAP', targetID);\n\n\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [ AssetType.TEXTURE ], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectEnvMapMethod(<CubeTextureBase> returnedArray[1], <number> props.get(101, 1));\n\t\t\t\ttargetID = props.get(2, 0);\n\t\t\t\tif (targetID > 0) {\n\t\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Mask-texture (ID = \" + targetID + \" ) for this EnvMapMethod\");\n\n\t\t\t\t\t// Todo: test mask with EnvMapMethod\n\t\t\t\t\t//(<EnvMapMethod> effectMethodReturn).mask = <Texture2DBase> returnedArray[1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 404: //LightMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the LightMap (ID = \" + targetID + \" ) for this LightMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectLightMapMethod(returnedArray[1], this.blendModeDic[props.get(401, 10)]); //usesecondaryUV not set\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 405: //ProjectiveTextureMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE_PROJECTOR]);\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the TextureProjector (ID = \" + targetID + \" ) for this ProjectiveTextureMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new ProjectiveTextureMethod(returnedArray[1], blendModeDic[props.get(401, 10)]);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 406: //RimLightMethod\n\t\t\t\teffectMethodReturn = new EffectRimLightMethod(props.get(601, 0xffffff), props.get(101, 0.4), props.get(101, 2)); //blendMode\n\t\t\t\tbreak;\n\t\t\tcase 407: //AlphaMaskMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE]);\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the Alpha-texture (ID = \" + targetID + \" ) for this AlphaMaskMethod\");\n\t\t\t\teffectMethodReturn = new EffectAlphaMaskMethod(returnedArray[1], props.get(701, false));\n\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 408: //RefractionEnvMapMethod\n\t\t\t//\t\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t//\t\t\t\t\treturnedArray = getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t//\t\t\t\t\tif (!returnedArray[0])\n\t\t\t//\t\t\t\t\t\t_blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this RefractionEnvMapMethod\");\n\t\t\t//\t\t\t\t\teffectMethodReturn = new RefractionEnvMapMethod(returnedArray[1], props.get(101, 0.1), props.get(102, 0.01), props.get(103, 0.01), props.get(104, 0.01));\n\t\t\t//\t\t\t\t\tRefractionEnvMapMethod(effectMethodReturn).alpha = props.get(104, 1);\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\t//\t\t\t\tcase 409: //OutlineMethod\n\t\t\t//\t\t\t\t\teffectMethodReturn = new OutlineMethod(props.get(601, 0x00000000), props.get(101, 1), props.get(701, true), props.get(702, false));\n\t\t\t//\t\t\t\t\tbreak;\n\t\t\tcase 410: //FresnelEnvMapMethod\n\t\t\t\ttargetID = props.get(1, 0);\n\t\t\t\treturnedArray = this.getAssetByID(targetID, [AssetType.TEXTURE], \"CubeTexture\");\n\t\t\t\tif (!returnedArray[0])\n\t\t\t\t\tthis._blocks[blockID].addError(\"Could not find the EnvMap (ID = \" + targetID + \" ) for this FresnelEnvMapMethod\");\n\t\t\t\teffectMethodReturn = new EffectFresnelEnvMapMethod(returnedArray[1], props.get(101, 1));\n\t\t\t\tbreak;\n\t\t\tcase 411: //FogMethod\n\t\t\t\teffectMethodReturn = new EffectFogMethod(props.get(101, 0), props.get(102, 1000), props.get(601, 0x808080));\n\t\t\t\tbreak;\n\n\t\t}\n\t\tthis.parseUserAttributes();\n\t\treturn effectMethodReturn;\n\n\t}\n\n\tprivate parseUserAttributes():Object\n\t{\n\t\tvar attributes:Object;\n\t\tvar list_len:number;\n\t\tvar attibuteCnt:number;\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\n\t\tif (list_len > 0) {\n\n\t\t\tvar list_end:number;\n\n\t\t\tattributes = {};\n\n\t\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar ns_id:number;\n\t\t\t\tvar attr_key:string;\n\t\t\t\tvar attr_type:number;\n\t\t\t\tvar attr_len:number;\n\t\t\t\tvar attr_val:any;\n\n\t\t\t\t// TODO: Properly tend to namespaces in attributes\n\t\t\t\tns_id = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_key = this.parseVarStr();\n\t\t\t\tattr_type = this._newBlockBytes.readUnsignedByte();\n\t\t\t\tattr_len = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + attr_len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading attribute # \" + attibuteCnt + \" = skipped to end of attribute-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn attributes;\n\t\t\t\t}\n\n\t\t\t\tswitch (attr_type) {\n\t\t\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUTFBytes(attr_len);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.INT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.BOOL:\n\t\t\t\t\tcase AWDParser.UINT8:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedByte();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT16:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedShort();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.UINT32:\n\t\t\t\t\tcase AWDParser.BADDR:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readUnsignedInt();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readFloat();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\t\t\tattr_val = this._newBlockBytes.readDouble();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tattr_val = 'unimplemented attribute type ' + attr_type;\n\t\t\t\t\t\tthis._newBlockBytes.position += attr_len;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (this._debug) {\n\t\t\t\t\tconsole.log(\"attribute = name: \" + attr_key + \"  / value = \" + attr_val);\n\t\t\t\t}\n\n\t\t\t\tattributes[attr_key] = attr_val;\n\t\t\t\tattibuteCnt += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tprivate parseProperties(expected:Object):AWDProperties\n\t{\n\t\tvar list_end:number;\n\t\tvar list_len:number;\n\t\tvar propertyCnt:number = 0;\n\t\tvar props:AWDProperties = new AWDProperties();\n\n\t\tlist_len = this._newBlockBytes.readUnsignedInt();\n\t\tlist_end = this._newBlockBytes.position + list_len;\n\n\t\tif (expected) {\n\n\t\t\twhile (this._newBlockBytes.position < list_end) {\n\t\t\t\tvar len:number;\n\t\t\t\tvar key:number;\n\t\t\t\tvar type:number;\n\n\t\t\t\tkey = this._newBlockBytes.readUnsignedShort();\n\t\t\t\tlen = this._newBlockBytes.readUnsignedInt();\n\n\t\t\t\tif ((this._newBlockBytes.position + len) > list_end) {\n\t\t\t\t\tconsole.log(\"           Error in reading property # \" + propertyCnt + \" = skipped to end of propertie-list\");\n\t\t\t\t\tthis._newBlockBytes.position = list_end;\n\t\t\t\t\treturn props;\n\t\t\t\t}\n\n\t\t\t\tif (expected.hasOwnProperty(key.toString())) {\n\t\t\t\t\ttype = expected[key];\n\t\t\t\t\tprops.set(key, this.parseAttrValue(type, len));\n\t\t\t\t} else {\n\t\t\t\t\tthis._newBlockBytes.position += len;\n\t\t\t\t}\n\n\t\t\t\tpropertyCnt += 1;\n\n\t\t\t}\n\t\t} else {\n\t\t\tthis._newBlockBytes.position = list_end;\n\t\t}\n\n\t\treturn props;\n\n\t}\n\n\tprivate parseAttrValue(type:number, len:number):any\n\t{\n\t\tvar elem_len:number;\n\t\tvar read_func:Function;\n\n\t\tswitch (type) {\n\n\t\t\tcase AWDParser.BOOL:\n\t\t\tcase AWDParser.INT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.INT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT8:\n\t\t\t\telem_len = 1;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedByte;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT16:\n\t\t\t\telem_len = 2;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedShort;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.UINT32:\n\t\t\tcase AWDParser.COLOR:\n\t\t\tcase AWDParser.BADDR:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readUnsignedInt;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT32:\n\t\t\t\telem_len = 4;\n\t\t\t\tread_func = this._newBlockBytes.readFloat;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.FLOAT64:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t\tcase AWDParser.AWDSTRING:\n\t\t\t\treturn this._newBlockBytes.readUTFBytes(len);\n\n\t\t\tcase AWDParser.VECTOR2x1:\n\t\t\tcase AWDParser.VECTOR3x1:\n\t\t\tcase AWDParser.VECTOR4x1:\n\t\t\tcase AWDParser.MTX3x2:\n\t\t\tcase AWDParser.MTX3x3:\n\t\t\tcase AWDParser.MTX4x3:\n\t\t\tcase AWDParser.MTX4x4:\n\t\t\t\telem_len = 8;\n\t\t\t\tread_func = this._newBlockBytes.readDouble;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif (elem_len < len) {\n\t\t\tvar list:Array<any> = [];\n\t\t\tvar num_read:number = 0;\n\t\t\tvar num_elems:number = len/elem_len;\n\n\t\t\twhile (num_read < num_elems) {\n\t\t\t\tlist.push(read_func.apply(this._newBlockBytes)); // list.push(read_func());\n\t\t\t\tnum_read++;\n\t\t\t}\n\n\t\t\treturn list;\n\t\t} else {\n\n\t\t\tvar val:any = read_func.apply(this._newBlockBytes);//read_func();\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tprivate parseHeader():void\n\t{\n\t\tvar flags:number;\n\t\tvar body_len:number;\n\n\t\tthis._byteData.position = 3; // Skip magic string and parse version\n\n\t\tthis._version[0] = this._byteData.readUnsignedByte();\n\t\tthis._version[1] = this._byteData.readUnsignedByte();\n\n\t\tflags = this._byteData.readUnsignedShort(); // Parse bit flags\n\n\t\tthis._streaming = BitFlags.test(flags, BitFlags.FLAG1);\n\n\t\tif ((this._version[0] == 2) && (this._version[1] == 1)) {\n\t\t\tthis._accuracyMatrix = BitFlags.test(flags, BitFlags.FLAG2);\n\t\t\tthis._accuracyGeo = BitFlags.test(flags, BitFlags.FLAG3);\n\t\t\tthis._accuracyProps = BitFlags.test(flags, BitFlags.FLAG4);\n\t\t}\n\n\t\t// if we set _accuracyOnBlocks, the precision-values are read from each block-header.\n\n\t\t// set storagePrecision types\n\t\tthis._geoNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyGeo) {\n\t\t\tthis._geoNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._matrixNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyMatrix) {\n\t\t\tthis._matrixNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._propsNrType = AWDParser.FLOAT32;\n\n\t\tif (this._accuracyProps) {\n\t\t\tthis._propsNrType = AWDParser.FLOAT64;\n\t\t}\n\n\t\tthis._compression = this._byteData.readUnsignedByte(); // compression\n\n\t\tif (this._debug) {\n\t\t\tconsole.log(\"Import AWDFile of version = \" + this._version[0] + \" - \" + this._version[1]);\n\t\t\tconsole.log(\"Global Settings = Compression = \" + this._compression + \" | Streaming = \" + this._streaming + \" | Matrix-Precision = \" + this._accuracyMatrix + \" | Geometry-Precision = \" + this._accuracyGeo + \" | Properties-Precision = \" + this._accuracyProps);\n\t\t}\n\n\t\t// Check file integrity\n\t\tbody_len = this._byteData.readUnsignedInt();\n\t\tif (!this._streaming && body_len != this._byteData.getBytesAvailable()) {\n\t\t\tthis._pDieWithError('AWD2 body length does not match header integrity field');\n\t\t}\n\n\t}\n\t// Helper - functions\n\tprivate getUVForVertexAnimation(meshID:number /*uint*/):Array<Array<number>>\n\t{\n\t\tif (this._blocks[meshID].data instanceof Mesh)\n\t\t\tmeshID = this._blocks[meshID].geoID;\n\t\tif (this._blocks[meshID].uvsForVertexAnimation)\n\t\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t\tvar geometry:Geometry = (<Geometry> this._blocks[meshID].data);\n\t\tvar geoCnt:number /*int*/ = 0;\n\t\tvar ud:Array<number>;\n\t\tvar uStride:number /*uint*/;\n\t\tvar uOffs:number /*uint*/;\n\t\tvar numPoints:number /*uint*/;\n\t\tvar i:number /*int*/;\n\t\tvar newUvs:Array<number>;\n\t\tvar sub_geom:TriangleSubGeometry;\n\t\tthis._blocks[meshID].uvsForVertexAnimation = new Array<Array<number>>();\n\t\twhile (geoCnt < geometry.subGeometries.length) {\n\t\t\tnewUvs = new Array<number>();\n\t\t\tsub_geom = <TriangleSubGeometry> geometry.subGeometries[geoCnt];\n\t\t\tnumPoints = sub_geom.numVertices;\n\t\t\tud = sub_geom.uvs;\n\t\t\tuStride = sub_geom.getStride(TriangleSubGeometry.UV_DATA);\n\t\t\tuOffs = sub_geom.getOffset(TriangleSubGeometry.UV_DATA);\n\t\t\tfor (i = 0; i < numPoints; i++) {\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 0]);\n\t\t\t\tnewUvs.push(ud[uOffs + i*uStride + 1]);\n\t\t\t}\n\t\t\tthis._blocks[meshID].uvsForVertexAnimation.push(newUvs);\n\t\t\tgeoCnt++;\n\t\t}\n\t\treturn this._blocks[meshID].uvsForVertexAnimation;\n\t}\n\n\tprivate parseVarStr():string\n\t{\n\n\t\tvar len:number = this._newBlockBytes.readUnsignedShort();\n\t\treturn this._newBlockBytes.readUTFBytes(len);\n\t}\n\n\tprivate getAssetByID(assetID:number, assetTypesToGet:Array<string>, extraTypeInfo:string = \"SingleTexture\"):Array<any>\n\t{\n\t\tvar returnArray:Array<any> = new Array<any>();\n\t\tvar typeCnt:number = 0;\n\t\tif (assetID > 0) {\n\t\t\tif (this._blocks[assetID]) {\n\t\t\t\tif (this._blocks[assetID].data) {\n\t\t\t\t\twhile (typeCnt < assetTypesToGet.length) {\n\n\t\t\t\t\t\tvar iasset:IAsset = <IAsset> this._blocks[assetID].data;\n\n\t\t\t\t\t\tif (iasset.assetType == assetTypesToGet[typeCnt]) {\n\t\t\t\t\t\t\t//if the right assetType was found\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"CubeTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageCubeTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.TEXTURE) && (extraTypeInfo == \"SingleTexture\")) {\n\t\t\t\t\t\t\t\tif (this._blocks[assetID].data instanceof ImageTexture) {\n\t\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\t\treturn returnArray;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\t\treturnArray.push(this._blocks[assetID].data);\n\t\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (IAsset(_blocks[assetID].data).assetType == AssetType.MESH)) {\n\t\t\t\t\t\tif ((assetTypesToGet[typeCnt] == AssetType.GEOMETRY) && (iasset.assetType == AssetType.MESH)) {\n\n\t\t\t\t\t\t\tvar mesh:Mesh = <Mesh> this._blocks[assetID].data\n\n\t\t\t\t\t\t\treturnArray.push(true);\n\t\t\t\t\t\t\treturnArray.push(mesh.geometry);\n\t\t\t\t\t\t\treturn returnArray;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttypeCnt++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if the has not returned anything yet, the asset is not found, or the found asset is not the right type.\n\t\treturnArray.push(false);\n\t\treturnArray.push(this.getDefaultAsset(assetTypesToGet[0], extraTypeInfo));\n\t\treturn returnArray;\n\t}\n\n\tprivate getDefaultAsset(assetType:string, extraTypeInfo:string):IAsset\n\t{\n\t\tswitch (true) {\n\t\t\tcase (assetType == AssetType.TEXTURE):\n\t\t\t\tif (extraTypeInfo == \"CubeTexture\")\n\t\t\t\t\treturn this.getDefaultCubeTexture();\n\t\t\t\tif (extraTypeInfo == \"SingleTexture\")\n\t\t\t\t\treturn DefaultMaterialManager.getDefaultTexture();\n\t\t\t\tbreak;\n\t\t\tcase (assetType == AssetType.MATERIAL):\n\t\t\t\treturn DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getDefaultCubeTexture():IAsset\n\t{\n\t\tif (!this._defaultCubeTexture) {\n\t\t\tvar defaultBitmap:BitmapData = DefaultMaterialManager.createCheckeredBitmapData();\n\n\t\t\tthis._defaultCubeTexture = new BitmapCubeTexture(defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap, defaultBitmap);\n\t\t\tthis._defaultCubeTexture.name = \"defaultCubeTexture\";\n\t\t}\n\n\t\treturn <IAsset> this._defaultCubeTexture;\n\t}\n\n\tprivate readNumber(precision:boolean = false):number\n\t{\n\t\tif (precision)\n\t\t\treturn this._newBlockBytes.readDouble();\n\t\treturn this._newBlockBytes.readFloat();\n\n\t}\n\n\tprivate parseMatrix3D():Matrix3D\n\t{\n\t\treturn new Matrix3D(this.parseMatrix43RawData());\n\t}\n\n\tprivate parseMatrix32RawData():Array<number>\n\t{\n\t\tvar i:number;\n\t\tvar mtx_raw:Array<number> = new Array<number>(6);\n\t\tfor (i = 0; i < 6; i++) {\n\t\t\tmtx_raw[i] = this._newBlockBytes.readFloat();\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n\tprivate parseMatrix43RawData():Array<number>\n\t{\n\t\tvar mtx_raw:Array<number> = new Array<number>(16);\n\n\t\tmtx_raw[0] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[1] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[2] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[3] = 0.0;\n\t\tmtx_raw[4] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[5] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[6] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[7] = 0.0;\n\t\tmtx_raw[8] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[9] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[10] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[11] = 0.0;\n\t\tmtx_raw[12] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[13] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[14] = this.readNumber(this._accuracyMatrix);\n\t\tmtx_raw[15] = 1.0;\n\n\t\t//TODO: fix max exporter to remove NaN values in joint 0 inverse bind pose\n\n\t\tif (isNaN(mtx_raw[0])) {\n\t\t\tmtx_raw[0] = 1;\n\t\t\tmtx_raw[1] = 0;\n\t\t\tmtx_raw[2] = 0;\n\t\t\tmtx_raw[4] = 0;\n\t\t\tmtx_raw[5] = 1;\n\t\t\tmtx_raw[6] = 0;\n\t\t\tmtx_raw[8] = 0;\n\t\t\tmtx_raw[9] = 0;\n\t\t\tmtx_raw[10] = 1;\n\t\t\tmtx_raw[12] = 0;\n\t\t\tmtx_raw[13] = 0;\n\t\t\tmtx_raw[14] = 0;\n\n\t\t}\n\n\t\treturn mtx_raw;\n\t}\n\n}\n\nexport = AWDParser;\n\nclass AWDBlock\n{\n\tpublic id:number;\n\tpublic name:string;\n\tpublic data:any;\n\tpublic len:any;\n\tpublic geoID:number;\n\tpublic extras:Object;\n\tpublic bytes:ByteArray;\n\tpublic errorMessages:Array<string>;\n\tpublic uvsForVertexAnimation:Array<Array<number>>;\n\n\tconstructor()\n\t{\n\t}\n\n\tpublic dispose()\n\t{\n\n\t\tthis.id = null;\n\t\tthis.bytes = null;\n\t\tthis.errorMessages = null;\n\t\tthis.uvsForVertexAnimation = null;\n\n\t}\n\n\tpublic addError(errorMsg:string):void\n\t{\n\t\tif (!this.errorMessages)\n\t\t\tthis.errorMessages = new Array<string>();\n\n\t\tthis.errorMessages.push(errorMsg);\n\t}\n}\n\nclass AWDProperties\n{\n\tpublic set(key:number, value:any):void\n\t{\n\t\tthis[ key.toString() ] = value;\n\t}\n\n\tpublic get(key:number, fallback:any):any\n\t{\n\t\tif (this.hasOwnProperty(key.toString())) {\n\t\t\treturn this[key.toString()];\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n}\n\n/**\n *\n */\nclass BitFlags\n{\n\tpublic static FLAG1:number = 1;\n\tpublic static FLAG2:number = 2;\n\tpublic static FLAG3:number = 4;\n\tpublic static FLAG4:number = 8;\n\tpublic static FLAG5:number = 16;\n\tpublic static FLAG6:number = 32;\n\tpublic static FLAG7:number = 64;\n\tpublic static FLAG8:number = 128;\n\tpublic static FLAG9:number = 256;\n\tpublic static FLAG10:number = 512;\n\tpublic static FLAG11:number = 1024;\n\tpublic static FLAG12:number = 2048;\n\tpublic static FLAG13:number = 4096;\n\tpublic static FLAG14:number = 8192;\n\tpublic static FLAG15:number = 16384;\n\tpublic static FLAG16:number = 32768;\n\n\tpublic static test(flags:number, testFlag:number):boolean\n\t{\n\t\treturn (flags & testFlag) == testFlag;\n\t}\n}\n",
    "import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport DisplayObject\t\t\t\t\t= require(\"awayjs-display/lib/base/DisplayObject\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport VertexClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\");\nimport VertexAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/VertexAnimationSet\");\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * MD2Parser provides a parser for the MD2 data type.\n */\nclass MD2Parser extends ParserBase\n{\n\tpublic static FPS:number /*int*/ = 6;\n\n\tprivate _clipNodes:Object = new Object();\n\tprivate _byteData:ByteArray;\n\tprivate _startedParsing:boolean;\n\tprivate _parsedHeader:boolean;\n\tprivate _parsedUV:boolean;\n\tprivate _parsedFaces:boolean;\n\tprivate _parsedFrames:boolean;\n\n\tprivate _ident:number /*uint*/;\n\tprivate _version:number /*uint*/;\n\tprivate _skinWidth:number /*uint*/;\n\tprivate _skinHeight:number /*uint*/;\n\t//private _frameSize : number /*uint*/;\n\tprivate _numSkins:number /*uint*/;\n\tprivate _numVertices:number /*uint*/;\n\tprivate _numST:number /*uint*/;\n\tprivate _numTris:number /*uint*/;\n\t//private _numGlCmds : number /*uint*/;\n\tprivate _numFrames:number /*uint*/;\n\tprivate _offsetSkins:number /*uint*/;\n\tprivate _offsetST:number /*uint*/;\n\tprivate _offsetTris:number /*uint*/;\n\tprivate _offsetFrames:number /*uint*/;\n\t//private _offsetGlCmds : number /*uint*/;\n\tprivate _offsetEnd:number /*uint*/;\n\n\tprivate _uvIndices:Array<number>;\n\tprivate _indices:Array<number> /*uint*/;\n\tprivate _vertIndices:Array<number>;\n\n\t// the current subgeom being built\n\tprivate _animationSet:VertexAnimationSet = new VertexAnimationSet();\n\tprivate _firstSubGeom:TriangleSubGeometry;\n\tprivate _uvs:Array<number>;\n\tprivate _finalUV:Array<number>;\n\n\tprivate _materialNames:Array<string>;\n\tprivate _textureType:string;\n\tprivate _ignoreTexturePath:boolean;\n\tprivate _mesh:Mesh;\n\tprivate _geometry:Geometry;\n\n\tprivate materialFinal:boolean = false;\n\tprivate geoCreated:boolean = false;\n\n\t/**\n\t * Creates a new MD2Parser object.\n\t * @param textureType The extension of the texture (e.g. jpg/png/...)\n\t * @param ignoreTexturePath If true, the path of the texture is ignored\n\t */\n\tconstructor(textureType:string = \"jpg\", ignoreTexturePath:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\t\tthis._textureType = textureType;\n\t\tthis._ignoreTexturePath = ignoreTexturePath;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md2\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn (ParserUtils.toString(data, 4) == 'IDP2');\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.assets.length != 1)\n\t\t\treturn;\n\n\t\tvar asset:Texture2DBase = <Texture2DBase> resourceDependency.assets[0];\n\n\t\tif (asset) {\n\t\t\tvar material:MethodMaterial = new MethodMaterial(asset);\n\n\t\t\tif (this.materialMode >= 2)\n\t\t\t\tmaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t//add to the content property\n\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\tmaterial.name = this._mesh.material.name;\n\t\t\tthis._mesh.material = material;\n\t\t\tthis._pFinalizeAsset(material);\n\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t}\n\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\t// apply system default\n\t\tif (this.materialMode < 2) {\n\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t} else {\n\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t}\n\n\t\t//add to the content property\n\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\tthis._pFinalizeAsset(this._mesh);\n\t\tthis.materialFinal = true;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._startedParsing) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._startedParsing = true;\n\n\t\t\t// Reset bytearray read position (which may have been\n\t\t\t// moved forward by the supportsData() function.)\n\t\t\tthis._byteData.position = 0;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\tif (!this._parsedHeader) {\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t\t//----------------------------------------------------------------------------\n\t\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;\n\n\t\t\t\t// TODO: Create a mesh only when encountered (if it makes sense\n\t\t\t\t// for this file format) and return it using this._pFinalizeAsset()\n\t\t\t\tthis._geometry = new Geometry();\n\t\t\t\tthis._mesh = new Mesh(this._geometry, null);\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tthis._mesh.material = DefaultMaterialManager.getDefaultMaterial();\n\t\t\t\t} else {\n\t\t\t\t\tthis._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\t\t\t\t\t(<MethodMaterial> this._mesh.material).mode = MethodMaterialMode.MULTI_PASS;\n\t\t\t\t}\n\n\t\t\t\t//_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);\n\t\t\t\t//_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));\n\n\t\t\t\t// Parse header and decompress body\n\t\t\t\tthis.parseHeader();\n\t\t\t\tthis.parseMaterialNames();\n\t\t\t} else if (!this._parsedUV) {\n\t\t\t\tthis.parseUV();\n\t\t\t} else if (!this._parsedFaces) {\n\t\t\t\tthis.parseFaces();\n\t\t\t} else if (!this._parsedFrames) {\n\t\t\t\tthis.parseFrames();\n\t\t\t} else if ((this.geoCreated) && (this.materialFinal)) {\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t} else if (!this.geoCreated) {\n\t\t\t\tthis.geoCreated = true;\n\t\t\t\t//create default subgeometry\n\t\t\t\tthis._geometry.addSubGeometry(this._firstSubGeom.clone());\n\t\t\t\t// Force name to be chosen by this._pFinalizeAsset()\n\t\t\t\tthis._mesh.name = \"\";\n\t\t\t\tif (this.materialFinal) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh.geometry);\n\t\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\t}\n\n\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t}\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Reads in all that MD2 Header data that is declared as private variables.\n\t * I know its a lot, and it looks ugly, but only way to do it in Flash\n\t */\n\tprivate parseHeader()\n\t{\n\t\tthis._ident = this._byteData.readInt();\n\t\tthis._version = this._byteData.readInt();\n\t\tthis._skinWidth = this._byteData.readInt();\n\t\tthis._skinHeight = this._byteData.readInt();\n\t\t//skip this._frameSize\n\t\tthis._byteData.readInt();\n\t\tthis._numSkins = this._byteData.readInt();\n\t\tthis._numVertices = this._byteData.readInt();\n\t\tthis._numST = this._byteData.readInt();\n\t\tthis._numTris = this._byteData.readInt();\n\t\t//skip this._numGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._numFrames = this._byteData.readInt();\n\t\tthis._offsetSkins = this._byteData.readInt();\n\t\tthis._offsetST = this._byteData.readInt();\n\t\tthis._offsetTris = this._byteData.readInt();\n\t\tthis._offsetFrames = this._byteData.readInt();\n\t\t//skip this._offsetGlCmds\n\t\tthis._byteData.readInt();\n\t\tthis._offsetEnd = this._byteData.readInt();\n\n\t\tthis._parsedHeader = true;\n\t}\n\n\t/**\n\t * Parses the file names for the materials.\n\t */\n\tprivate parseMaterialNames()\n\t{\n\t\tvar url:string;\n\t\tvar name:string;\n\t\tvar extIndex:number /*int*/;\n\t\tvar slashIndex:number /*int*/;\n\t\tthis._materialNames = new Array<string>();\n\t\tthis._byteData.position = this._offsetSkins;\n\n\t\tvar regExp:RegExp = new RegExp(\"[^a-zA-Z0-9\\\\_\\/.]\", \"g\");\n\t\tfor (var i:number /*uint*/ = 0; i < this._numSkins; ++i) {\n\t\t\tname = this._byteData.readUTFBytes(64);\n\t\t\tname = name.replace(regExp, \"\");\n\t\t\textIndex = name.lastIndexOf(\".\");\n\t\t\tif (this._ignoreTexturePath)\n\t\t\t\tslashIndex = name.lastIndexOf(\"/\");\n\t\t\tif (name.toLowerCase().indexOf(\".jpg\") == -1 && name.toLowerCase().indexOf(\".png\") == -1) {\n\t\t\t\tname = name.substring(slashIndex + 1, extIndex);\n\t\t\t\turl = name + \".\" + this._textureType;\n\t\t\t} else {\n\t\t\t\turl = name;\n\t\t\t}\n\n\t\t\tthis._materialNames[i] = name;\n\n\t\t\t// only support 1 skin TODO: really?\n\t\t\tif (this.dependencies.length == 0)\n\t\t\t\tthis._pAddDependency(name, new URLRequest(url));\n\t\t}\n\n\t\tif (this._materialNames.length > 0)\n\t\t\tthis._mesh.material.name = this._materialNames[0]; else\n\t\t\tthis.materialFinal = true;\n\t}\n\n\t/**\n\t * Parses the uv data for the mesh.\n\t */\n\tprivate parseUV()\n\t{\n\t\tvar j:number /*uint*/ = 0;\n\n\t\tthis._uvs = new Array<number>(this._numST*2);\n\t\tthis._byteData.position = this._offsetST;\n\t\tfor (var i:number /*uint*/ = 0; i < this._numST; i++) {\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinWidth;\n\t\t\tthis._uvs[j++] = this._byteData.readShort()/this._skinHeight;\n\t\t}\n\n\t\tthis._parsedUV = true;\n\t}\n\n\t/**\n\t * Parses unique indices for the faces.\n\t */\n\tprivate parseFaces()\n\t{\n\t\tvar a:number /*uint*/, b:number /*uint*/, c:number /*uint*/, ta:number /*uint*/, tb:number /*uint*/, tc:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\n\t\tthis._vertIndices = new Array<number>();\n\t\tthis._uvIndices = new Array<number>();\n\t\tthis._indices = new Array<number>() /*uint*/;\n\n\t\tthis._byteData.position = this._offsetTris;\n\n\t\tfor (i = 0; i < this._numTris; i++) {\n\t\t\t//collect vertex indices\n\t\t\ta = this._byteData.readUnsignedShort();\n\t\t\tb = this._byteData.readUnsignedShort();\n\t\t\tc = this._byteData.readUnsignedShort();\n\n\t\t\t//collect uv indices\n\t\t\tta = this._byteData.readUnsignedShort();\n\t\t\ttb = this._byteData.readUnsignedShort();\n\t\t\ttc = this._byteData.readUnsignedShort();\n\n\t\t\tthis.addIndex(a, ta);\n\t\t\tthis.addIndex(b, tb);\n\t\t\tthis.addIndex(c, tc);\n\t\t}\n\n\t\tvar len:number /*uint*/ = this._uvIndices.length;\n\t\tthis._finalUV = new Array<number>(len*2);\n\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];\n\t\t\tthis._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];\n\t\t}\n\n\t\tthis._parsedFaces = true;\n\t}\n\n\t/**\n\t * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the\n\t * corresponding vertex and uv data in the correct location.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t */\n\tprivate addIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/)\n\t{\n\t\tvar index:number /*int*/ = this.findIndex(vertexIndex, uvIndex);\n\n\t\tif (index == -1) {\n\t\t\tthis._indices.push(this._vertIndices.length);\n\t\t\tthis._vertIndices.push(vertexIndex);\n\t\t\tthis._uvIndices.push(uvIndex);\n\t\t} else\n\t\t\tthis._indices.push(index);\n\t}\n\n\t/**\n\t * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.\n\t * @param vertexIndex The original index in the vertex list.\n\t * @param uvIndex The original index in the uv list.\n\t * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.\n\t */\n\tprivate findIndex(vertexIndex:number /*uint*/, uvIndex:number /*uint*/):number /*int*/\n\t{\n\t\tvar len:number /*uint*/ = this._vertIndices.length;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tif (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)\n\t\t\t\treturn i;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Parses all the frame geometries.\n\t */\n\tprivate parseFrames()\n\t{\n\t\tvar sx:number, sy:number, sz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar geometry:Geometry;\n\t\tvar subGeom:TriangleSubGeometry;\n\t\tvar vertLen:number /*uint*/ = this._vertIndices.length;\n\t\tvar fvertices:Array<number>;\n\t\tvar tvertices:Array<number>;\n\t\tvar i:number /*uint*/, j:number /*int*/, k:number /*uint*/;\n\t\t//var ch : number /*uint*/;\n\t\tvar name:string = \"\";\n\t\tvar prevClip:VertexClipNode = null;\n\n\t\tthis._byteData.position = this._offsetFrames;\n\n\t\tfor (i = 0; i < this._numFrames; i++) {\n\n\t\t\ttvertices = new Array<number>();\n\t\t\tfvertices = new Array<number>(vertLen*3);\n\n\t\t\tsx = this._byteData.readFloat();\n\t\t\tsy = this._byteData.readFloat();\n\t\t\tsz = this._byteData.readFloat();\n\n\t\t\ttx = this._byteData.readFloat();\n\t\t\tty = this._byteData.readFloat();\n\t\t\ttz = this._byteData.readFloat();\n\n\t\t\tname = this.readFrameName();\n\n\t\t\t// Note, the extra data.position++ in the for loop is there\n\t\t\t// to skip over a byte that holds the \"vertex normal index\"\n\t\t\tfor (j = 0; j < this._numVertices; j++, this._byteData.position++)\n\t\t\t\ttvertices.push(sx*this._byteData.readUnsignedByte() + tx, sy*this._byteData.readUnsignedByte() + ty, sz*this._byteData.readUnsignedByte() + tz);\n\n\t\t\tk = 0;\n\t\t\tfor (j = 0; j < vertLen; j++) {\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 2];\n\t\t\t\tfvertices[k++] = tvertices[this._vertIndices[j]*3 + 1];\n\t\t\t}\n\n\t\t\tsubGeom = new TriangleSubGeometry(true);\n\n\t\t\tif (this._firstSubGeom == null)\n\t\t\t\tthis._firstSubGeom = subGeom;\n\n\t\t\tgeometry = new Geometry();\n\t\t\tgeometry.addSubGeometry(subGeom);\n\n\t\t\tsubGeom.updateIndices(this._indices);\n\t\t\tsubGeom.updatePositions(fvertices);\n\t\t\tsubGeom.updateUVs(this._finalUV);\n\t\t\tsubGeom.vertexNormals;\n\t\t\tsubGeom.vertexTangents;\n\t\t\tsubGeom.autoDeriveNormals = false;\n\t\t\tsubGeom.autoDeriveTangents = false;\n\n\t\t\tvar clip:VertexClipNode = this._clipNodes[name];\n\n\t\t\tif (!clip) {\n\t\t\t\t// If another sequence was parsed before this one, starting\n\t\t\t\t// a new state means the previous one is complete and can\n\t\t\t\t// hence be finalized.\n\t\t\t\tif (prevClip) {\n\t\t\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t\t\t}\n\n\t\t\t\tclip = new VertexClipNode();\n\t\t\t\tclip.name = name;\n\t\t\t\tclip.stitchFinalFrame = true;\n\n\t\t\t\tthis._clipNodes[name] = clip;\n\n\t\t\t\tprevClip = clip;\n\t\t\t}\n\t\t\tclip.addFrame(geometry, 1000/MD2Parser.FPS);\n\t\t}\n\n\t\t// Finalize the last state\n\t\tif (prevClip) {\n\t\t\tthis._pFinalizeAsset(prevClip);\n\t\t\tthis._animationSet.addAnimation(prevClip);\n\t\t}\n\n\t\t// Force this._pFinalizeAsset() to decide name\n\t\tthis._pFinalizeAsset(this._animationSet);\n\n\t\tthis._parsedFrames = true;\n\t}\n\n\tprivate readFrameName():string\n\t{\n\t\tvar name:string = \"\";\n\t\tvar k:number /*uint*/ = 0;\n\t\tfor (var j:number /*uint*/ = 0; j < 16; j++) {\n\t\t\tvar ch:number /*uint*/ = this._byteData.readUnsignedByte();\n\n\t\t\tif (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)\n\t\t\t\tname += String.fromCharCode(ch);\n\n\t\t\tif (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)\n\t\t\t\tk++;\n\t\t}\n\t\treturn name;\n\t}\n}\n\nexport = MD2Parser;",
    "import Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport JointPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/JointPose\");\nimport SkeletonPose\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonPose\");\nimport SkeletonClipNode\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\");\n\n/**\n * MD5AnimParser provides a parser for the md5anim data type, providing an animation sequence for the md5 format.\n *\n * todo: optimize\n */\nclass MD5AnimParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_FRAMES_TOKEN:string = \"numFrames\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static FRAME_RATE_TOKEN:string = \"frameRate\";\n\tpublic static NUM_ANIMATED_COMPONENTS_TOKEN:string = \"numAnimatedComponents\";\n\n\tpublic static HIERARCHY_TOKEN:string = \"hierarchy\";\n\tpublic static BOUNDS_TOKEN:string = \"bounds\";\n\tpublic static BASE_FRAME_TOKEN:string = \"baseframe\";\n\tpublic static FRAME_TOKEN:string = \"frame\";\n\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _frameRate:number /*int*/;\n\tprivate _numFrames:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numAnimatedComponents:number /*int*/;\n\n\tprivate _hierarchy:Array<HierarchyData>;\n\tprivate _bounds:Array<BoundsData>;\n\tprivate _frameData:Array<FrameData>;\n\tprivate _baseFrameData:Array<BaseFrameData>;\n\n\tprivate _rotationQuat:Quaternion;\n\tprivate _clip:SkeletonClipNode;\n\n\t/**\n\t * Creates a new MD5AnimParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\t\tvar t1:Quaternion = new Quaternion();\n\t\tvar t2:Quaternion = new Quaternion();\n\n\t\tt1.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\t\tt2.fromAxisAngle(Vector3D.Y_AXIS, -Math.PI*.5);\n\n\t\tthis._rotationQuat.multiply(t2, t1);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tthis._rotationQuat.multiply(t2, t1);\n\t\t\tt1.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(t1, this._rotationQuat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5anim\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5AnimParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\":\n\t\t\t\t\t// can occur at the end of a file\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_FRAMES_TOKEN:\n\t\t\t\t\tthis._numFrames = this.getNextInt();\n\t\t\t\t\tthis._bounds = new Array<BoundsData>();\n\t\t\t\t\tthis._frameData = new Array<FrameData>();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._hierarchy = new Array<HierarchyData>(this._numJoints);\n\t\t\t\t\tthis._baseFrameData = new Array<BaseFrameData>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_RATE_TOKEN:\n\t\t\t\t\tthis._frameRate = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.NUM_ANIMATED_COMPONENTS_TOKEN:\n\t\t\t\t\tthis._numAnimatedComponents = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.HIERARCHY_TOKEN:\n\t\t\t\t\tthis.parseHierarchy();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BOUNDS_TOKEN:\n\t\t\t\t\tthis.parseBounds();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.BASE_FRAME_TOKEN:\n\t\t\t\t\tthis.parseBaseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5AnimParser.FRAME_TOKEN:\n\t\t\t\t\tthis.parseFrame();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis._clip = new SkeletonClipNode();\n\t\t\t\tthis.translateClip();\n\t\t\t\tthis._pFinalizeAsset(this._clip);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\t/**\n\t * Converts all key frame data to an SkinnedAnimationSequence.\n\t */\n\tprivate translateClip():void\n\t{\n\t\tfor (var i:number /*int*/ = 0; i < this._numFrames; ++i)\n\t\t\tthis._clip.addFrame(this.translatePose(this._frameData[i]), 1000/this._frameRate);\n\t}\n\n\t/**\n\t * Converts a single key frame data to a SkeletonPose.\n\t * @param frameData The actual frame data.\n\t * @return A SkeletonPose containing the frame data's pose.\n\t */\n\tprivate translatePose(frameData:FrameData):SkeletonPose\n\t{\n\t\tvar hierarchy:HierarchyData;\n\t\tvar pose:JointPose;\n\t\tvar base:BaseFrameData;\n\t\tvar flags:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar translate:Vector3D = new Vector3D();\n\t\tvar orientation:Quaternion = new Quaternion();\n\t\tvar components:Array<number> = frameData.components;\n\t\tvar skelPose:SkeletonPose = new SkeletonPose();\n\t\tvar jointPoses:Array<JointPose> = skelPose.jointPoses;\n\n\t\tfor (var i:number /*int*/ = 0; i < this._numJoints; ++i) {\n\t\t\tj = 0;\n\t\t\tpose = new JointPose();\n\t\t\thierarchy = this._hierarchy[i];\n\t\t\tbase = this._baseFrameData[i];\n\t\t\tflags = hierarchy.flags;\n\t\t\ttranslate.x = base.position.x;\n\t\t\ttranslate.y = base.position.y;\n\t\t\ttranslate.z = base.position.z;\n\t\t\torientation.x = base.orientation.x;\n\t\t\torientation.y = base.orientation.y;\n\t\t\torientation.z = base.orientation.z;\n\n\t\t\tif (flags & 1)\n\t\t\t\ttranslate.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 2)\n\t\t\t\ttranslate.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 4)\n\t\t\t\ttranslate.z = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 8)\n\t\t\t\torientation.x = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 16)\n\t\t\t\torientation.y = components[hierarchy.startIndex + (j++)];\n\t\t\tif (flags & 32)\n\t\t\t\torientation.z = components[hierarchy.startIndex + (j++)];\n\n\t\t\tvar w:number = 1 - orientation.x*orientation.x - orientation.y*orientation.y - orientation.z*orientation.z;\n\t\t\torientation.w = w < 0? 0 : -Math.sqrt(w);\n\n\t\t\tif (hierarchy.parentIndex < 0) {\n\t\t\t\tpose.orientation.multiply(this._rotationQuat, orientation);\n\t\t\t\tpose.translation = this._rotationQuat.rotatePoint(translate);\n\t\t\t} else {\n\t\t\t\tpose.orientation.copyFrom(orientation);\n\t\t\t\tpose.translation.x = translate.x;\n\t\t\t\tpose.translation.y = translate.y;\n\t\t\t\tpose.translation.z = translate.z;\n\t\t\t}\n\t\t\tpose.orientation.y = -pose.orientation.y;\n\t\t\tpose.orientation.z = -pose.orientation.z;\n\t\t\tpose.translation.x = -pose.translation.x;\n\n\t\t\tjointPoses[i] = pose;\n\t\t}\n\n\t\treturn skelPose;\n\t}\n\n\t/**\n\t * Parses the skeleton's hierarchy data.\n\t */\n\tprivate parseHierarchy():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:HierarchyData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new HierarchyData();\n\t\t\tdata.name = this.parseLiteralstring();\n\t\t\tdata.parentIndex = this.getNextInt();\n\t\t\tdata.flags = this.getNextInt();\n\t\t\tdata.startIndex = this.getNextInt();\n\t\t\tthis._hierarchy[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses frame bounds.\n\t */\n\tprivate parseBounds():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BoundsData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BoundsData();\n\t\t\tdata.min = this.parseVector3D();\n\t\t\tdata.max = this.parseVector3D();\n\t\t\tthis._bounds[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses the base frame.\n\t */\n\tprivate parseBaseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:BaseFrameData;\n\t\tvar token:string = this.getNextToken();\n\t\tvar i:number /*int*/ = 0;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new BaseFrameData();\n\t\t\tdata.position = this.parseVector3D();\n\t\t\tdata.orientation = this.parseQuaternion();\n\t\t\tthis._baseFrameData[i++] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Parses a single frame.\n\t */\n\tprivate parseFrame():void\n\t{\n\t\tvar ch:string;\n\t\tvar data:FrameData;\n\t\tvar token:string;\n\t\tvar frameIndex:number /*int*/;\n\n\t\tframeIndex = this.getNextInt();\n\n\t\ttoken = this.getNextToken();\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tdata = new FrameData();\n\t\t\tdata.components = new Array<number>(this._numAnimatedComponents);\n\n\t\t\tfor (var i:number /*int*/ = 0; i < this._numAnimatedComponents; ++i)\n\t\t\t\tdata.components[i] = this.getNextNumber();\n\n\t\t\tthis._frameData[frameIndex] = data;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5AnimParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex == this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = this.getNextNumber();\n\t\tquat.z = this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - (quat.x*quat.x) - (quat.y*quat.y) - (quat.z*quat.z);\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn quat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5AnimParser;\n\n\n/**\n *\n */\nclass BaseFrameData\n{\n\t/**\n\t *\n\t */\n\tpublic position:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic orientation:Quaternion;\n}\n\n/**\n *\n */\nclass BoundsData\n{\n\t/**\n\t *\n\t */\n\tpublic min:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic max:Vector3D;\n}\n\n/**\n *\n */\nclass FrameData\n{\n\t/**\n\t *\n\t */\n\tpublic index:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic components:Array<number>;\n}\n\n/**\n *\n */\nclass HierarchyData\n{\n\t/**\n\t *\n\t */\n\tpublic name:string;\n\n\t/**\n\t *\n\t */\n\tpublic parentIndex:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic flags:number /*int*/;\n\n\t/**\n\t *\n\t */\n\tpublic startIndex:number /*int*/;\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\n\nimport SkeletonAnimationSet\t\t\t\t= require(\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\");\nimport Skeleton\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/Skeleton\");\nimport SkeletonJoint\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/data/SkeletonJoint\");\n\n// todo: create animation system, parse skeleton\n\n/**\n * MD5MeshParser provides a parser for the md5mesh data type, providing the geometry of the md5 format.\n *\n * todo: optimize\n */\nclass MD5MeshParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tpublic static VERSION_TOKEN:string = \"MD5Version\";\n\tpublic static COMMAND_LINE_TOKEN:string = \"commandline\";\n\tpublic static NUM_JOINTS_TOKEN:string = \"numJoints\";\n\tpublic static NUM_MESHES_TOKEN:string = \"numMeshes\";\n\tpublic static COMMENT_TOKEN:string = \"//\";\n\tpublic static JOINTS_TOKEN:string = \"joints\";\n\tpublic static MESH_TOKEN:string = \"mesh\";\n\n\tpublic static MESH_SHADER_TOKEN:string = \"shader\";\n\tpublic static MESH_NUM_VERTS_TOKEN:string = \"numverts\";\n\tpublic static MESH_VERT_TOKEN:string = \"vert\";\n\tpublic static MESH_NUM_TRIS_TOKEN:string = \"numtris\";\n\tpublic static MESH_TRI_TOKEN:string = \"tri\";\n\tpublic static MESH_NUM_WEIGHTS_TOKEN:string = \"numweights\";\n\tpublic static MESH_WEIGHT_TOKEN:string = \"weight\";\n\n\tprivate _parseIndex:number /*int*/ = 0;\n\tprivate _reachedEOF:boolean;\n\tprivate _line:number /*int*/ = 0;\n\tprivate _charLineIndex:number /*int*/ = 0;\n\tprivate _version:number /*int*/;\n\tprivate _numJoints:number /*int*/;\n\tprivate _numMeshes:number /*int*/;\n\n\tprivate _mesh:Mesh;\n\tprivate _shaders:Array<string>;\n\n\tprivate _maxJointCount:number /*int*/;\n\tprivate _meshData:Array<MeshData>;\n\tprivate _bindPoses:Array<Matrix3D>;\n\tprivate _geometry:Geometry;\n\n\tprivate _skeleton:Skeleton;\n\tprivate _animationSet:SkeletonAnimationSet;\n\n\tprivate _rotationQuat:Quaternion;\n\n\t/**\n\t * Creates a new MD5MeshParser object.\n\t */\n\tconstructor(additionalRotationAxis:Vector3D = null, additionalRotationRadians:number = 0)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._rotationQuat = new Quaternion();\n\n\t\tthis._rotationQuat.fromAxisAngle(Vector3D.X_AXIS, -Math.PI*.5);\n\n\t\tif (additionalRotationAxis) {\n\t\t\tvar quat:Quaternion = new Quaternion();\n\t\t\tquat.fromAxisAngle(additionalRotationAxis, additionalRotationRadians);\n\t\t\tthis._rotationQuat.multiply(this._rotationQuat, quat);\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"md5mesh\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar token:string;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\tthis._startedParsing = true;\n\t\t}\n\n\t\twhile (this._pHasTime()) {\n\t\t\ttoken = this.getNextToken();\n\t\t\tswitch (token) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.VERSION_TOKEN:\n\t\t\t\t\tthis._version = this.getNextInt();\n\t\t\t\t\tif (this._version != 10)\n\t\t\t\t\t\tthrow new Error(\"Unknown version number encountered!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.COMMAND_LINE_TOKEN:\n\t\t\t\t\tthis.parseCMD();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_JOINTS_TOKEN:\n\t\t\t\t\tthis._numJoints = this.getNextInt();\n\t\t\t\t\tthis._bindPoses = new Array<Matrix3D>(this._numJoints);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.NUM_MESHES_TOKEN:\n\t\t\t\t\tthis._numMeshes = this.getNextInt();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.JOINTS_TOKEN:\n\t\t\t\t\tthis.parseJoints();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TOKEN:\n\t\t\t\t\tthis.parseMesh();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!this._reachedEOF)\n\t\t\t\t\t\tthis.sendUnknownKeywordError();\n\t\t\t}\n\n\t\t\tif (this._reachedEOF) {\n\t\t\t\tthis.calculateMaxJointCount();\n\t\t\t\tthis._animationSet = new SkeletonAnimationSet(this._maxJointCount);\n\n\t\t\t\tthis._mesh = new Mesh(new Geometry(), null);\n\t\t\t\tthis._geometry = this._mesh.geometry;\n\n\t\t\t\tfor (var i:number /*int*/ = 0; i < this._meshData.length; ++i)\n\t\t\t\t\tthis._geometry.addSubGeometry(this.translateGeom(this._meshData[i].vertexData, this._meshData[i].weightData, this._meshData[i].indices));\n\n\t\t\t\t//_geometry.animation = _animation;\n\t\t\t\t//\t\t\t\t\t_mesh.animationController = _animationController;\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(this._mesh);\n\n\t\t\t\tthis._pFinalizeAsset(this._geometry);\n\t\t\t\tthis._pFinalizeAsset(this._mesh);\n\t\t\t\tthis._pFinalizeAsset(this._skeleton);\n\t\t\t\tthis._pFinalizeAsset(this._animationSet);\n\t\t\t\treturn ParserBase.PARSING_DONE;\n\t\t\t}\n\t\t}\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate calculateMaxJointCount():void\n\t{\n\t\tthis._maxJointCount = 0;\n\n\t\tvar numMeshData:number /*int*/ = this._meshData.length;\n\t\tfor (var i:number /*int*/ = 0; i < numMeshData; ++i) {\n\t\t\tvar meshData:MeshData = this._meshData[i];\n\t\t\tvar vertexData:Array<VertexData> = meshData.vertexData;\n\t\t\tvar numVerts:number /*int*/ = vertexData.length;\n\n\t\t\tfor (var j:number /*int*/ = 0; j < numVerts; ++j) {\n\t\t\t\tvar zeroWeights:number /*int*/ = this.countZeroWeightJoints(vertexData[j], meshData.weightData);\n\t\t\t\tvar totalJoints:number /*int*/ = vertexData[j].countWeight - zeroWeights;\n\t\t\t\tif (totalJoints > this._maxJointCount)\n\t\t\t\t\tthis._maxJointCount = totalJoints;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate countZeroWeightJoints(vertex:VertexData, weights:Array<JointData>):number /*int*/\n\t{\n\t\tvar start:number /*int*/ = vertex.startWeight;\n\t\tvar end:number /*int*/ = vertex.startWeight + vertex.countWeight;\n\t\tvar count:number /*int*/ = 0;\n\t\tvar weight:number;\n\n\t\tfor (var i:number /*int*/ = start; i < end; ++i) {\n\t\t\tweight = weights[i].bias;\n\t\t\tif (weight == 0)\n\t\t\t\t++count;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Parses the skeleton's joints.\n\t */\n\tprivate parseJoints():void\n\t{\n\t\tvar ch:string;\n\t\tvar joint:SkeletonJoint;\n\t\tvar pos:Vector3D;\n\t\tvar quat:Quaternion;\n\t\tvar i:number /*int*/ = 0;\n\t\tvar token:string = this.getNextToken();\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tthis._skeleton = new Skeleton();\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tjoint = new SkeletonJoint();\n\t\t\tjoint.name = this.parseLiteralstring();\n\t\t\tjoint.parentIndex = this.getNextInt();\n\t\t\tpos = this.parseVector3D();\n\t\t\tpos = this._rotationQuat.rotatePoint(pos);\n\t\t\tquat = this.parseQuaternion();\n\n\t\t\t// todo: check if this is correct, or maybe we want to actually store it as quats?\n\t\t\tthis._bindPoses[i] = quat.toMatrix3D();\n\t\t\tthis._bindPoses[i].appendTranslation(pos.x, pos.y, pos.z);\n\t\t\tvar inv:Matrix3D = this._bindPoses[i].clone();\n\t\t\tinv.invert();\n\t\t\tjoint.inverseBindPose = inv.rawData;\n\n\t\t\tthis._skeleton.joints[i++] = joint;\n\n\t\t\tch = this.getNextChar();\n\n\t\t\tif (ch == \"/\") {\n\t\t\t\tthis.putBack();\n\t\t\t\tch = this.getNextToken();\n\t\t\t\tif (ch == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\tch = this.getNextChar();\n\n\t\t\t}\n\n\t\t\tif (ch != \"}\")\n\t\t\t\tthis.putBack();\n\t\t} while (ch != \"}\");\n\t}\n\n\t/**\n\t * Puts back the last read character into the data stream.\n\t */\n\tprivate putBack():void\n\t{\n\t\tthis._parseIndex--;\n\t\tthis._charLineIndex--;\n\t\tthis._reachedEOF = this._parseIndex >= this._textData.length;\n\t}\n\n\t/**\n\t * Parses the mesh geometry.\n\t */\n\tprivate parseMesh():void\n\t{\n\t\tvar token:string = this.getNextToken();\n\t\tvar ch:string;\n\t\tvar vertexData:Array<VertexData>;\n\t\tvar weights:Array<JointData>;\n\t\tvar indices:Array<number> /*uint*/;\n\n\t\tif (token != \"{\")\n\t\t\tthis.sendUnknownKeywordError();\n\n\t\tif (this._shaders == null)\n\t\t\tthis._shaders = new Array<string>();\n\n\t\twhile (ch != \"}\") {\n\t\t\tch = this.getNextToken();\n\t\t\tswitch (ch) {\n\t\t\t\tcase MD5MeshParser.COMMENT_TOKEN:\n\t\t\t\t\tthis.ignoreLine();\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_SHADER_TOKEN:\n\t\t\t\t\tthis._shaders.push(this.parseLiteralstring());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_VERTS_TOKEN:\n\t\t\t\t\tvertexData = new Array<VertexData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_TRIS_TOKEN:\n\t\t\t\t\tindices = new Array<number>(this.getNextInt()*3) /*uint*/;\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_NUM_WEIGHTS_TOKEN:\n\t\t\t\t\tweights = new Array<JointData>(this.getNextInt());\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_VERT_TOKEN:\n\t\t\t\t\tthis.parseVertex(vertexData);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_TRI_TOKEN:\n\t\t\t\t\tthis.parseTri(indices);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MD5MeshParser.MESH_WEIGHT_TOKEN:\n\t\t\t\t\tthis.parseJoint(weights);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._meshData == null)\n\t\t\tthis._meshData = new Array<MeshData>();\n\n\t\tvar i:number /*uint*/ = this._meshData.length;\n\t\tthis._meshData[i] = new MeshData();\n\t\tthis._meshData[i].vertexData = vertexData;\n\t\tthis._meshData[i].weightData = weights;\n\t\tthis._meshData[i].indices = indices;\n\t}\n\n\t/**\n\t * Converts the mesh data to a SkinnedSub instance.\n\t * @param vertexData The mesh's vertices.\n\t * @param weights The joint weights per vertex.\n\t * @param indices The indices for the faces.\n\t * @return A SubGeometry instance containing all geometrical data for the current mesh.\n\t */\n\tprivate translateGeom(vertexData:Array<VertexData>, weights:Array<JointData>, indices:Array<number> /*uint*/):TriangleSubGeometry\n\t{\n\t\tvar len:number /*int*/ = vertexData.length;\n\t\tvar v1:number /*int*/, v2:number /*int*/, v3:number /*int*/;\n\t\tvar vertex:VertexData;\n\t\tvar weight:JointData;\n\t\tvar bindPose:Matrix3D;\n\t\tvar pos:Vector3D;\n\t\tvar subGeom:TriangleSubGeometry = new TriangleSubGeometry(true);\n\t\tvar uvs:Array<number> = new Array<number>(len*2);\n\t\tvar vertices:Array<number> = new Array<number>(len*3);\n\t\tvar jointIndices:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar jointWeights:Array<number> = new Array<number>(len*this._maxJointCount);\n\t\tvar l:number /*int*/ = 0;\n\t\tvar nonZeroWeights:number /*int*/;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i) {\n\t\t\tvertex = vertexData[i];\n\t\t\tv1 = vertex.index*3;\n\t\t\tv2 = v1 + 1;\n\t\t\tv3 = v1 + 2;\n\t\t\tvertices[v1] = vertices[v2] = vertices[v3] = 0;\n\n\t\t\tnonZeroWeights = 0;\n\t\t\tfor (var j:number /*int*/ = 0; j < vertex.countWeight; ++j) {\n\t\t\t\tweight = weights[vertex.startWeight + j];\n\t\t\t\tif (weight.bias > 0) {\n\t\t\t\t\tbindPose = this._bindPoses[weight.joint];\n\t\t\t\t\tpos = bindPose.transformVector(weight.pos);\n\t\t\t\t\tvertices[v1] += pos.x*weight.bias;\n\t\t\t\t\tvertices[v2] += pos.y*weight.bias;\n\t\t\t\t\tvertices[v3] += pos.z*weight.bias;\n\n\t\t\t\t\t// indices need to be multiplied by 3 (amount of matrix registers)\n\t\t\t\t\tjointIndices[l] = weight.joint*3;\n\t\t\t\t\tjointWeights[l++] = weight.bias;\n\t\t\t\t\t++nonZeroWeights;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (j = nonZeroWeights; j < this._maxJointCount; ++j) {\n\t\t\t\tjointIndices[l] = 0;\n\t\t\t\tjointWeights[l++] = 0;\n\t\t\t}\n\n\t\t\tv1 = vertex.index << 1;\n\t\t\tuvs[v1++] = vertex.s;\n\t\t\tuvs[v1] = vertex.t;\n\t\t}\n\n\t\tsubGeom.jointsPerVertex = this._maxJointCount;\n\t\tsubGeom.updateIndices(indices);\n\t\tsubGeom.updatePositions(vertices);\n\t\tsubGeom.updateUVs(uvs);\n\t\tsubGeom.updateJointIndices(jointIndices);\n\t\tsubGeom.updateJointWeights(jointWeights);\n\t\t// cause explicit updates\n\t\tsubGeom.vertexNormals;\n\t\tsubGeom.vertexTangents;\n\t\t// turn auto updates off because they may be animated and set explicitly\n\t\tsubGeom.autoDeriveTangents = false;\n\t\tsubGeom.autoDeriveNormals = false;\n\n\t\treturn subGeom;\n\t}\n\n\t/**\n\t * Retrieve the next triplet of vertex indices that form a face.\n\t * @param indices The index list in which to store the read data.\n\t */\n\tprivate parseTri(indices:Array<number> /*uint*/):void\n\t{\n\t\tvar index:number /*int*/ = this.getNextInt()*3;\n\t\tindices[index] = this.getNextInt();\n\t\tindices[index + 1] = this.getNextInt();\n\t\tindices[index + 2] = this.getNextInt();\n\t}\n\n\t/**\n\t * Reads a new joint data set for a single joint.\n\t * @param weights the target list to contain the weight data.\n\t */\n\tprivate parseJoint(weights:Array<JointData>):void\n\t{\n\t\tvar weight:JointData = new JointData();\n\t\tweight.index = this.getNextInt();\n\t\tweight.joint = this.getNextInt();\n\t\tweight.bias = this.getNextNumber();\n\t\tweight.pos = this.parseVector3D();\n\t\tweights[weight.index] = weight;\n\t}\n\n\t/**\n\t * Reads the data for a single vertex.\n\t * @param vertexData The list to contain the vertex data.\n\t */\n\tprivate parseVertex(vertexData:Array<VertexData>):void\n\t{\n\t\tvar vertex:VertexData = new VertexData();\n\t\tvertex.index = this.getNextInt();\n\t\tthis.parseUV(vertex);\n\t\tvertex.startWeight = this.getNextInt();\n\t\tvertex.countWeight = this.getNextInt();\n\t\t//\t\t\tif (vertex.countWeight > _maxJointCount) _maxJointCount = vertex.countWeight;\n\t\tvertexData[vertex.index] = vertex;\n\t}\n\n\t/**\n\t * Reads the next uv coordinate.\n\t * @param vertexData The vertexData to contain the UV coordinates.\n\t */\n\tprivate parseUV(vertexData:VertexData):void\n\t{\n\t\tvar ch:string = this.getNextToken();\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvertexData.s = this.getNextNumber();\n\t\tvertexData.t = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\t}\n\n\t/**\n\t * Gets the next token in the data stream.\n\t */\n\tprivate getNextToken():string\n\t{\n\t\tvar ch:string;\n\t\tvar token:string = \"\";\n\n\t\twhile (!this._reachedEOF) {\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch == \" \" || ch == \"\\r\" || ch == \"\\n\" || ch == \"\\t\") {\n\t\t\t\tif (token != MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\t\tthis.skipWhiteSpace();\n\t\t\t\tif (token != \"\")\n\t\t\t\t\treturn token;\n\t\t\t} else\n\t\t\t\ttoken += ch;\n\n\t\t\tif (token == MD5MeshParser.COMMENT_TOKEN)\n\t\t\t\treturn token;\n\t\t}\n\n\t\treturn token;\n\t}\n\n\t/**\n\t * Skips all whitespace in the data stream.\n\t */\n\tprivate skipWhiteSpace():void\n\t{\n\t\tvar ch:string;\n\n\t\tdo\n\t\t\tch = this.getNextChar(); while (ch == \"\\n\" || ch == \" \" || ch == \"\\r\" || ch == \"\\t\");\n\n\t\tthis.putBack();\n\t}\n\n\t/**\n\t * Skips to the next line.\n\t */\n\tprivate ignoreLine():void\n\t{\n\t\tvar ch:string;\n\t\twhile (!this._reachedEOF && ch != \"\\n\")\n\t\t\tch = this.getNextChar();\n\t}\n\n\t/**\n\t * Retrieves the next single character in the data stream.\n\t */\n\tprivate getNextChar():string\n\t{\n\t\tvar ch:string = this._textData.charAt(this._parseIndex++);\n\n\t\tif (ch == \"\\n\") {\n\t\t\t++this._line;\n\t\t\tthis._charLineIndex = 0;\n\t\t} else if (ch != \"\\r\")\n\t\t\t++this._charLineIndex;\n\n\t\tif (this._parseIndex >= this._textData.length)\n\t\t\tthis._reachedEOF = true;\n\n\t\treturn ch;\n\t}\n\n\t/**\n\t * Retrieves the next integer in the data stream.\n\t */\n\tprivate getNextInt():number /*int*/\n\t{\n\t\tvar i:number = parseInt(this.getNextToken());\n\t\tif (isNaN(i))\n\t\t\tthis.sendParseError(\"int type\");\n\t\treturn i;\n\t}\n\n\t/**\n\t * Retrieves the next floating point number in the data stream.\n\t */\n\tprivate getNextNumber():number\n\t{\n\t\tvar f:number = parseFloat(this.getNextToken());\n\t\tif (isNaN(f))\n\t\t\tthis.sendParseError(\"float type\");\n\t\treturn f;\n\t}\n\n\t/**\n\t * Retrieves the next 3d vector in the data stream.\n\t */\n\tprivate parseVector3D():Vector3D\n\t{\n\t\tvar vec:Vector3D = new Vector3D();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tvec.x = -this.getNextNumber();\n\t\tvec.y = this.getNextNumber();\n\t\tvec.z = this.getNextNumber();\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\treturn vec;\n\t}\n\n\t/**\n\t * Retrieves the next quaternion in the data stream.\n\t */\n\tprivate parseQuaternion():Quaternion\n\t{\n\t\tvar quat:Quaternion = new Quaternion();\n\t\tvar ch:string = this.getNextToken();\n\n\t\tif (ch != \"(\")\n\t\t\tthis.sendParseError(\"(\");\n\t\tquat.x = this.getNextNumber();\n\t\tquat.y = -this.getNextNumber();\n\t\tquat.z = -this.getNextNumber();\n\n\t\t// quat supposed to be unit length\n\t\tvar t:number = 1 - quat.x*quat.x - quat.y*quat.y - quat.z*quat.z;\n\t\tquat.w = t < 0? 0 : -Math.sqrt(t);\n\n\t\tif (this.getNextToken() != \")\")\n\t\t\tthis.sendParseError(\")\");\n\n\t\tvar rotQuat:Quaternion = new Quaternion();\n\t\trotQuat.multiply(this._rotationQuat, quat);\n\t\treturn rotQuat;\n\t}\n\n\t/**\n\t * Parses the command line data.\n\t */\n\tprivate parseCMD():void\n\t{\n\t\t// just ignore the command line property\n\t\tthis.parseLiteralstring();\n\t}\n\n\t/**\n\t * Retrieves the next literal string in the data stream. A literal string is a sequence of characters bounded\n\t * by double quotes.\n\t */\n\tprivate parseLiteralstring():string\n\t{\n\t\tthis.skipWhiteSpace();\n\n\t\tvar ch:string = this.getNextChar();\n\t\tvar str:string = \"\";\n\n\t\tif (ch != \"\\\"\")\n\t\t\tthis.sendParseError(\"\\\"\");\n\n\t\tdo {\n\t\t\tif (this._reachedEOF)\n\t\t\t\tthis.sendEOFError();\n\t\t\tch = this.getNextChar();\n\t\t\tif (ch != \"\\\"\")\n\t\t\t\tstr += ch;\n\t\t} while (ch != \"\\\"\");\n\n\t\treturn str;\n\t}\n\n\t/**\n\t * Throws an end-of-file error when a premature end of file was encountered.\n\t */\n\tprivate sendEOFError():void\n\t{\n\t\tthrow new Error(\"Unexpected end of file\");\n\t}\n\n\t/**\n\t * Throws an error when an unexpected token was encountered.\n\t * @param expected The token type that was actually expected.\n\t */\n\tprivate sendParseError(expected:string):void\n\t{\n\t\tthrow new Error(\"Unexpected token at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \" + expected + \" expected, but \" + this._textData.charAt(this._parseIndex - 1) + \" encountered\");\n\t}\n\n\t/**\n\t * Throws an error when an unknown keyword was encountered.\n\t */\n\tprivate sendUnknownKeywordError():void\n\t{\n\t\tthrow new Error(\"Unknown keyword at line \" + (this._line + 1) + \", character \" + this._charLineIndex + \". \");\n\t}\n}\n\nexport = MD5MeshParser;\n\n\nclass VertexData\n{\n\tpublic index:number /*int*/;\n\tpublic s:number;\n\tpublic t:number;\n\tpublic startWeight:number /*int*/;\n\tpublic countWeight:number /*int*/;\n}\n\nclass JointData\n{\n\tpublic index:number /*int*/;\n\tpublic joint:number /*int*/;\n\tpublic bias:number;\n\tpublic pos:Vector3D;\n}\n\nclass MeshData\n{\n\tpublic vertexData:Array<VertexData>;\n\tpublic weightData:Array<JointData>;\n\tpublic indices:Array<number> /*uint*/;\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\nimport TextureProxyBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * Max3DSParser provides a parser for the 3ds data type.\n */\nclass Max3DSParser extends ParserBase\n{\n\tprivate _byteData:ByteArray;\n\n\tprivate _textures:Object;\n\tprivate _materials:Object;\n\tprivate _unfinalized_objects:Object;\n\n\tprivate _cur_obj_end:number;\n\tprivate _cur_obj:ObjectVO;\n\n\tprivate _cur_mat_end:number;\n\tprivate _cur_mat:MaterialVO;\n\tprivate _useSmoothingGroups:boolean;\n\n\t/**\n\t * Creates a new <code>Max3DSParser</code> object.\n\t *\n\t * @param useSmoothingGroups Determines whether the parser looks for smoothing groups in the 3ds file or assumes uniform smoothing. Defaults to true.\n\t */\n\tconstructor(useSmoothingGroups:boolean = true)\n\t{\n\t\tsuper(URLLoaderDataFormat.ARRAY_BUFFER);\n\n\t\tthis._useSmoothingGroups = useSmoothingGroups;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"3ds\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar ba:ByteArray;\n\n\t\tba = ParserUtils.toByteArray(data);\n\t\tif (ba) {\n\t\t\tba.position = 0;\n\t\t\tif (ba.readShort() == 0x4d4d)\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency):void\n\t{\n\t\tif (resourceDependency.assets.length == 1) {\n\t\t\tvar asset:IAsset;\n\n\t\t\tasset = resourceDependency.assets[0];\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\n\t\t\t\tvar tex:TextureVO;\n\n\t\t\t\ttex = this._textures[resourceDependency.id];\n\t\t\t\ttex.texture = <Texture2DBase> asset;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency):void\n\t{\n\t\t// TODO: Implement\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tif (!this._byteData) {\n\t\t\tthis._byteData = this._pGetByteData();\n\t\t\tthis._byteData.position = 0;\n\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t// LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray\n\t\t\t//----------------------------------------------------------------------------\n\t\t\t//this._byteData.endian = Endian.LITTLE_ENDIAN;// Should be default\n\t\t\t//----------------------------------------------------------------------------\n\n\t\t\tthis._textures = {};\n\t\t\tthis._materials = {};\n\t\t\tthis._unfinalized_objects = {};\n\t\t}\n\n\t\t// TODO: With this construct, the loop will run no-op for as long\n\t\t// as there is time once file has finished reading. Consider a nice\n\t\t// way to stop loop when byte array is empty, without putting it in\n\t\t// the while-conditional, which will prevent finalizations from\n\t\t// happening after the last chunk.\n\t\twhile (this._pHasTime()) {\n\n\t\t\t// If we are currently working on an object, and the most recent chunk was\n\t\t\t// the last one in that object, finalize the current object.\n\t\t\tif (this._cur_mat && this._byteData.position >= this._cur_mat_end)\n\t\t\t\tthis.finalizeCurrentMaterial();\n\t\t\telse if (this._cur_obj && this._byteData.position >= this._cur_obj_end) {\n\t\t\t\t// Can't finalize at this point, because we have to wait until the full\n\t\t\t\t// animation section has been parsed for any potential pivot definitions\n\t\t\t\tthis._unfinalized_objects[this._cur_obj.name] = this._cur_obj;\n\t\t\t\tthis._cur_obj_end = Number.MAX_VALUE /*uint*/;\n\t\t\t\tthis._cur_obj = null;\n\t\t\t}\n\n\t\t\tif (this._byteData.getBytesAvailable() > 0) {\n\t\t\t\tvar cid:number /*uint*/;\n\t\t\t\tvar len:number /*uint*/;\n\t\t\t\tvar end:number /*uint*/;\n\n\t\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\t\tswitch (cid) {\n\t\t\t\t\tcase 0x4D4D: // MAIN3DS\n\t\t\t\t\tcase 0x3D3D: // EDIT3DS\n\t\t\t\t\tcase 0xB000: // KEYF3DS\n\t\t\t\t\t\t// This types are \"container chunks\" and contain only\n\t\t\t\t\t\t// sub-chunks (no data on their own.) This means that\n\t\t\t\t\t\t// there is nothing more to parse at this point, and\n\t\t\t\t\t\t// instead we should progress to the next chunk, which\n\t\t\t\t\t\t// will be the first sub-chunk of this one.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xAFFF: // MATERIAL\n\t\t\t\t\t\tthis._cur_mat_end = end;\n\t\t\t\t\t\tthis._cur_mat = this.parseMaterial();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4000: // EDIT_OBJECT\n\t\t\t\t\t\tthis._cur_obj_end = end;\n\t\t\t\t\t\tthis._cur_obj = new ObjectVO();\n\t\t\t\t\t\tthis._cur_obj.name = this.readNulTermstring();\n\t\t\t\t\t\tthis._cur_obj.materials = new Array<string>();\n\t\t\t\t\t\tthis._cur_obj.materialFaces = {};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4100: // OBJ_TRIMESH\n\t\t\t\t\t\tthis._cur_obj.type = AssetType.MESH;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4110: // TRI_VERTEXL\n\t\t\t\t\t\tthis.parseVertexList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4120: // TRI_FACELIST\n\t\t\t\t\t\tthis.parseFaceList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4140: // TRI_MAPPINGCOORDS\n\t\t\t\t\t\tthis.parseUVList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4130: // Face materials\n\t\t\t\t\t\tthis.parseFaceMaterialList();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4160: // Transform\n\t\t\t\t\t\tthis._cur_obj.transform = this.readTransform();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xB002: // Object animation (including pivot)\n\t\t\t\t\t\tthis.parseObjectAnimation(end);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0x4150: // Smoothing groups\n\t\t\t\t\t\tthis.parseSmoothingGroups();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Skip this (unknown) chunk\n\t\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Pause parsing if there were any dependencies found during this\n\t\t\t\t// iteration (i.e. if there are any dependencies that need to be\n\t\t\t\t// retrieved at this time.)\n\t\t\t\tif (this.dependencies.length) {\n\t\t\t\t\tthis._pPauseAndRetrieveDependencies();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// More parsing is required if the entire byte array has not yet\n\t\t// been read, or if there is a currently non-finalized object in\n\t\t// the pipeline.\n\t\tif (this._byteData.getBytesAvailable() || this._cur_obj || this._cur_mat) {\n\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t} else {\n\t\t\tvar name:string;\n\n\t\t\t// Finalize any remaining objects before ending.\n\t\t\tfor (name in this._unfinalized_objects) {\n\t\t\t\tvar obj:DisplayObjectContainer;\n\t\t\t\tobj = this.constructObject(this._unfinalized_objects[name]);\n\t\t\t\tif (obj) {\n\t\t\t\t\t//add to the content property\n\t\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\t\tthis._pFinalizeAsset(obj, name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\tprivate parseMaterial():MaterialVO\n\t{\n\t\tvar mat:MaterialVO;\n\n\t\tmat = new MaterialVO();\n\n\t\twhile (this._byteData.position < this._cur_mat_end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar end:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\t\t\tend = this._byteData.position + (len - 6);\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA000: // Material name\n\t\t\t\t\tmat.name = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA010: // Ambient color\n\t\t\t\t\tmat.ambientColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA020: // Diffuse color\n\t\t\t\t\tmat.diffuseColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA030: // Specular color\n\t\t\t\t\tmat.specularColor = this.readColor();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA081: // Two-sided, existence indicates \"true\"\n\t\t\t\t\tmat.twoSided = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA200: // Main (color) texture\n\t\t\t\t\tmat.colorMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xA204: // Specular map\n\t\t\t\t\tmat.specularMap = this.parseTexture(end);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position = end;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn mat;\n\t}\n\n\tprivate parseTexture(end:number /*uint*/):TextureVO\n\t{\n\t\tvar tex:TextureVO;\n\n\t\ttex = new TextureVO();\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xA300:\n\t\t\t\t\ttex.url = this.readNulTermstring();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// Skip this unknown texture sub-chunk\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._textures[tex.url] = tex;\n\t\tthis._pAddDependency(tex.url, new URLRequest(tex.url));\n\n\t\treturn tex;\n\t}\n\n\tprivate parseVertexList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.verts = new Array<number>(count*3);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.verts.length;\n\t\twhile (i < len) {\n\t\t\tvar x:number, y:number, z:number;\n\n\t\t\tx = this._byteData.readFloat();\n\t\t\ty = this._byteData.readFloat();\n\t\t\tz = this._byteData.readFloat();\n\n\t\t\tthis._cur_obj.verts[i++] = x;\n\t\t\tthis._cur_obj.verts[i++] = z;\n\t\t\tthis._cur_obj.verts[i++] = y;\n\t\t}\n\t}\n\n\tprivate parseFaceList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.indices = new Array<number>(count*3) /*uint*/;\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.indices.length;\n\t\twhile (i < len) {\n\t\t\tvar i0:number /*uint*/, i1:number /*uint*/, i2:number /*uint*/;\n\n\t\t\ti0 = this._byteData.readUnsignedShort();\n\t\t\ti1 = this._byteData.readUnsignedShort();\n\t\t\ti2 = this._byteData.readUnsignedShort();\n\n\t\t\tthis._cur_obj.indices[i++] = i0;\n\t\t\tthis._cur_obj.indices[i++] = i2;\n\t\t\tthis._cur_obj.indices[i++] = i1;\n\n\t\t\t// Skip \"face info\", irrelevant in Away3D\n\t\t\tthis._byteData.position += 2;\n\t\t}\n\n\t\tthis._cur_obj.smoothingGroups = new Array<number>(count) /*uint*/;\n\t}\n\n\tprivate parseSmoothingGroups():void\n\t{\n\t\tvar len:number /*uint*/ = this._cur_obj.indices.length/3;\n\t\tvar i:number /*uint*/ = 0;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.smoothingGroups[i] = this._byteData.readUnsignedInt();\n\t\t\ti++;\n\t\t}\n\t}\n\n\tprivate parseUVList():void\n\t{\n\t\tvar i:number /*uint*/;\n\t\tvar len:number /*uint*/;\n\t\tvar count:number /*uint*/;\n\n\t\tcount = this._byteData.readUnsignedShort();\n\t\tthis._cur_obj.uvs = new Array<number>(count*2);\n\n\t\ti = 0;\n\t\tlen = this._cur_obj.uvs.length;\n\t\twhile (i < len) {\n\t\t\tthis._cur_obj.uvs[i++] = this._byteData.readFloat();\n\t\t\tthis._cur_obj.uvs[i++] = 1.0 - this._byteData.readFloat();\n\t\t}\n\t}\n\n\tprivate parseFaceMaterialList():void\n\t{\n\t\tvar mat:string;\n\t\tvar count:number /*uint*/;\n\t\tvar i:number /*uint*/;\n\t\tvar faces:Array<number> /*uint*/;\n\n\t\tmat = this.readNulTermstring();\n\t\tcount = this._byteData.readUnsignedShort();\n\n\t\tfaces = new Array<number>(count) /*uint*/;\n\t\ti = 0;\n\t\twhile (i < faces.length)\n\t\t\tfaces[i++] = this._byteData.readUnsignedShort();\n\n\t\tthis._cur_obj.materials.push(mat);\n\t\tthis._cur_obj.materialFaces[mat] = faces;\n\t}\n\n\tprivate parseObjectAnimation(end:number):void\n\t{\n\t\tvar vo:ObjectVO;\n\t\tvar obj:DisplayObjectContainer;\n\t\tvar pivot:Vector3D;\n\t\tvar name:string;\n\t\tvar hier:number /*uint*/;\n\n\t\t// Pivot defaults to origin\n\t\tpivot = new Vector3D;\n\n\t\twhile (this._byteData.position < end) {\n\t\t\tvar cid:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tcid = this._byteData.readUnsignedShort();\n\t\t\tlen = this._byteData.readUnsignedInt();\n\n\t\t\tswitch (cid) {\n\t\t\t\tcase 0xb010: // Name/hierarchy\n\t\t\t\t\tname = this.readNulTermstring();\n\t\t\t\t\tthis._byteData.position += 4;\n\t\t\t\t\thier = this._byteData.readShort();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0xb013: // Pivot\n\t\t\t\t\tpivot.x = this._byteData.readFloat();\n\t\t\t\t\tpivot.z = this._byteData.readFloat();\n\t\t\t\t\tpivot.y = this._byteData.readFloat();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If name is \"$$$DUMMY\" this is an empty object (e.g. a container)\n\t\t// and will be ignored in this version of the parser\n\t\t// TODO: Implement containers in 3DS parser.\n\t\tif (name != '$$$DUMMY' && this._unfinalized_objects.hasOwnProperty(name)) {\n\t\t\tvo = this._unfinalized_objects[name];\n\t\t\tobj = this.constructObject(vo, pivot);\n\n\t\t\tif (obj) {\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(obj);\n\n\t\t\t\tthis._pFinalizeAsset(obj, vo.name);\n\t\t\t}\n\n\n\t\t\tdelete this._unfinalized_objects[name];\n\t\t}\n\t}\n\n\tprivate constructObject(obj:ObjectVO, pivot:Vector3D = null):DisplayObjectContainer\n\t{\n\t\tif (obj.type == AssetType.MESH) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar sub:TriangleSubGeometry;\n\t\t\tvar geom:Geometry;\n\t\t\tvar mat:MaterialBase;\n\t\t\tvar mesh:Mesh;\n\t\t\tvar mtx:Matrix3D;\n\t\t\tvar vertices:Array<VertexVO>;\n\t\t\tvar faces:Array<FaceVO>;\n\n\t\t\tif (obj.materials.length > 1)\n\t\t\t\tconsole.log(\"The Away3D 3DS parser does not support multiple materials per mesh at this point.\");\n\n\t\t\t// Ignore empty objects\n\t\t\tif (!obj.indices || obj.indices.length == 0)\n\t\t\t\treturn null;\n\n\t\t\tvertices = new Array<VertexVO>(obj.verts.length/3);\n\t\t\tfaces = new Array<FaceVO>(obj.indices.length/3);\n\n\t\t\tthis.prepareData(vertices, faces, obj);\n\n\t\t\tif (this._useSmoothingGroups)\n\t\t\t\tthis.applySmoothGroups(vertices, faces);\n\n\t\t\tobj.verts = new Array<number>(vertices.length*3);\n\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\tobj.verts[i*3] = vertices[i].x;\n\t\t\t\tobj.verts[i*3 + 1] = vertices[i].y;\n\t\t\t\tobj.verts[i*3 + 2] = vertices[i].z;\n\t\t\t}\n\t\t\tobj.indices = new Array<number>(faces.length*3) /*uint*/;\n\n\t\t\tfor (i = 0; i < faces.length; i++) {\n\t\t\t\tobj.indices[i*3] = faces[i].a;\n\t\t\t\tobj.indices[i*3 + 1] = faces[i].b;\n\t\t\t\tobj.indices[i*3 + 2] = faces[i].c;\n\t\t\t}\n\n\t\t\tif (obj.uvs) {\n\t\t\t\t// If the object had UVs to start with, use UVs generated by\n\t\t\t\t// smoothing group splitting algorithm. Otherwise those UVs\n\t\t\t\t// will be nonsense and should be skipped.\n\t\t\t\tobj.uvs = new Array<number>(vertices.length*2);\n\t\t\t\tfor (i = 0; i < vertices.length; i++) {\n\t\t\t\t\tobj.uvs[i*2] = vertices[i].u;\n\t\t\t\t\tobj.uvs[i*2 + 1] = vertices[i].v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeom = new Geometry();\n\n\t\t\t// Construct sub-geometries (potentially splitting buffers)\n\t\t\t// and add them to geometry.\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.updateIndices(obj.indices);\n\t\t\tsub.updatePositions(obj.verts);\n\t\t\tsub.updateUVs(obj.uvs);\n\n\t\t\tgeom.addSubGeometry(sub);\n\n\t\t\tif (obj.materials.length > 0) {\n\t\t\t\tvar mname:string;\n\t\t\t\tmname = obj.materials[0];\n\t\t\t\tmat = this._materials[mname].material;\n\t\t\t}\n\n\t\t\t// Apply pivot translation to geometry if a pivot was\n\t\t\t// found while parsing the keyframe chunk earlier.\n\t\t\tif (pivot) {\n\t\t\t\tif (obj.transform) {\n\t\t\t\t\t// If a transform was found while parsing the\n\t\t\t\t\t// object chunk, use it to find the local pivot vector\n\t\t\t\t\tvar dat:Array<number> = obj.transform.concat();\n\t\t\t\t\tdat[12] = 0;\n\t\t\t\t\tdat[13] = 0;\n\t\t\t\t\tdat[14] = 0;\n\t\t\t\t\tmtx = new Matrix3D(dat);\n\t\t\t\t\tpivot = mtx.transformVector(pivot);\n\t\t\t\t}\n\n\t\t\t\tpivot.scaleBy(-1);\n\n\t\t\t\tmtx = new Matrix3D();\n\t\t\t\tmtx.appendTranslation(pivot.x, pivot.y, pivot.z);\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Apply transformation to geometry if a transformation\n\t\t\t// was found while parsing the object chunk earlier.\n\t\t\tif (obj.transform) {\n\t\t\t\tmtx = new Matrix3D(obj.transform);\n\t\t\t\tmtx.invert();\n\t\t\t\tgeom.applyTransformation(mtx);\n\t\t\t}\n\n\t\t\t// Final transform applied to geometry. Finalize the geometry,\n\t\t\t// which will no longer be modified after this point.\n\t\t\tthis._pFinalizeAsset(geom, obj.name.concat('_geom'));\n\n\t\t\t// Build mesh and return it\n\t\t\tmesh = new Mesh(geom, mat);\n\t\t\tmesh.transform.matrix3D = new Matrix3D(obj.transform);\n\t\t\treturn mesh;\n\t\t}\n\n\t\t// If reached, unknown\n\t\treturn null;\n\t}\n\n\tprivate prepareData(vertices:Array<VertexVO>, faces:Array<FaceVO>, obj:ObjectVO):void\n\t{\n\t\t// convert raw ObjectVO's data to structured VertexVO and FaceVO\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar len:number /*int*/ = obj.verts.length;\n\t\tfor (i = 0, j = 0, k = 0; i < len;) {\n\t\t\tvar v:VertexVO = new VertexVO;\n\t\t\tv.x = obj.verts[i++];\n\t\t\tv.y = obj.verts[i++];\n\t\t\tv.z = obj.verts[i++];\n\t\t\tif (obj.uvs) {\n\t\t\t\tv.u = obj.uvs[j++];\n\t\t\t\tv.v = obj.uvs[j++];\n\t\t\t}\n\t\t\tvertices[k++] = v;\n\t\t}\n\t\tlen = obj.indices.length;\n\t\tfor (i = 0, k = 0; i < len;) {\n\t\t\tvar f:FaceVO = new FaceVO();\n\t\t\tf.a = obj.indices[i++];\n\t\t\tf.b = obj.indices[i++];\n\t\t\tf.c = obj.indices[i++];\n\t\t\tf.smoothGroup = obj.smoothingGroups[k] || 0;\n\t\t\tfaces[k++] = f;\n\t\t}\n\t}\n\n\tprivate applySmoothGroups(vertices:Array<VertexVO>, faces:Array<FaceVO>):void\n\t{\n\t\t// clone vertices according to following rule:\n\t\t// clone if vertex's in faces from groups 1+2 and 3\n\t\t// don't clone if vertex's in faces from groups 1+2, 3 and 1+3\n\n\t\tvar i:number /*int*/;\n\t\tvar j:number /*int*/;\n\t\tvar k:number /*int*/;\n\t\tvar l:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar numVerts:number /*uint*/ = vertices.length;\n\t\tvar numFaces:number /*uint*/ = faces.length;\n\n\t\t// extract groups data for vertices\n\t\tvar vGroups:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++)\n\t\t\tvGroups[i] = new Array<number>() /*uint*/;\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tvar face:FaceVO = faces[i];\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tvar groups:Array<number> /*uint*/ = vGroups[(j == 0)? face.a : ((j == 1)? face.b : face.c)];\n\t\t\t\tvar group:number /*uint*/ = face.smoothGroup;\n\t\t\t\tfor (k = groups.length - 1; k >= 0; k--) {\n\t\t\t\t\tif ((group & groups[k]) > 0) {\n\t\t\t\t\t\tgroup |= groups[k];\n\t\t\t\t\t\tgroups.splice(k, 1);\n\t\t\t\t\t\tk = groups.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t}\n\t\t// clone vertices\n\t\tvar vClones:Array<Array<number>> /*uint*/ = new Array<Array<number>>(numVerts) /*uint*/;\n\t\tfor (i = 0; i < numVerts; i++) {\n\t\t\tif ((len = vGroups[i].length) < 1)\n\t\t\t\tcontinue;\n\t\t\tvar clones:Array<number> /*uint*/ = new Array<number>(len) /*uint*/;\n\t\t\tvClones[i] = clones;\n\t\t\tclones[0] = i;\n\t\t\tvar v0:VertexVO = vertices[i];\n\t\t\tfor (j = 1; j < len; j++) {\n\t\t\t\tvar v1:VertexVO = new VertexVO;\n\t\t\t\tv1.x = v0.x;\n\t\t\t\tv1.y = v0.y;\n\t\t\t\tv1.z = v0.z;\n\t\t\t\tv1.u = v0.u;\n\t\t\t\tv1.v = v0.v;\n\t\t\t\tclones[j] = vertices.length;\n\t\t\t\tvertices.push(v1);\n\t\t\t}\n\t\t}\n\t\tnumVerts = vertices.length;\n\n\t\tfor (i = 0; i < numFaces; i++) {\n\t\t\tface = faces[i];\n\t\t\tgroup = face.smoothGroup;\n\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\tk = (j == 0)? face.a : ((j == 1)? face.b : face.c);\n\t\t\t\tgroups = vGroups[k];\n\t\t\t\tlen = groups.length;\n\t\t\t\tclones = vClones[k];\n\t\t\t\tfor (l = 0; l < len; l++) {\n\t\t\t\t\tif (((group == 0) && (groups[l] == 0)) || ((group & groups[l]) > 0)) {\n\t\t\t\t\t\tvar index:number /*uint*/ = clones[l];\n\t\t\t\t\t\tif (group == 0) {\n\t\t\t\t\t\t\t// vertex is unique if no smoothGroup found\n\t\t\t\t\t\t\tgroups.splice(l, 1);\n\t\t\t\t\t\t\tclones.splice(l, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j == 0)\n\t\t\t\t\t\t\tface.a = index; else if (j == 1)\n\t\t\t\t\t\t\tface.b = index; else\n\t\t\t\t\t\t\tface.c = index;\n\t\t\t\t\t\tl = len;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate finalizeCurrentMaterial():void\n\t{\n\t\tvar mat:MethodMaterial;\n\n\t\tif (this._cur_mat.colorMap)\n\t\t\tmat = new MethodMaterial(this._cur_mat.colorMap.texture || DefaultMaterialManager.getDefaultTexture());\n\t\telse\n\t\t\tmat = new MethodMaterial(this._cur_mat.ambientColor);\n\n\t\tmat.diffuseColor = this._cur_mat.diffuseColor;\n\t\tmat.specularColor = this._cur_mat.specularColor;\n\n\t\tif (this.materialMode >= 2)\n\t\t\tmat.mode = MethodMaterialMode.MULTI_PASS\n\n\t\tmat.bothSides = this._cur_mat.twoSided;\n\n\t\tthis._pFinalizeAsset(mat, this._cur_mat.name);\n\n\t\tthis._materials[this._cur_mat.name] = this._cur_mat;\n\t\tthis._cur_mat.material = mat;\n\n\t\tthis._cur_mat = null;\n\t}\n\n\tprivate readNulTermstring():string\n\t{\n\t\tvar chr:number /*int*/;\n\t\tvar str:string = \"\";\n\n\t\twhile ((chr = this._byteData.readUnsignedByte()) > 0)\n\t\t\tstr += String.fromCharCode(chr);\n\n\t\treturn str;\n\t}\n\n\tprivate readTransform():Array<number>\n\t{\n\t\tvar data:Array<number>;\n\n\t\tdata = new Array<number>(16);\n\n\t\t// X axis\n\t\tdata[0] = this._byteData.readFloat(); // X\n\t\tdata[2] = this._byteData.readFloat(); // Z\n\t\tdata[1] = this._byteData.readFloat(); // Y\n\t\tdata[3] = 0;\n\n\t\t// Z axis\n\t\tdata[8] = this._byteData.readFloat(); // X\n\t\tdata[10] = this._byteData.readFloat(); // Z\n\t\tdata[9] = this._byteData.readFloat(); // Y\n\t\tdata[11] = 0;\n\n\t\t// Y Axis\n\t\tdata[4] = this._byteData.readFloat(); // X\n\t\tdata[6] = this._byteData.readFloat(); // Z\n\t\tdata[5] = this._byteData.readFloat(); // Y\n\t\tdata[7] = 0;\n\n\t\t// Translation\n\t\tdata[12] = this._byteData.readFloat(); // X\n\t\tdata[14] = this._byteData.readFloat(); // Z\n\t\tdata[13] = this._byteData.readFloat(); // Y\n\t\tdata[15] = 1;\n\n\t\treturn data;\n\t}\n\n\tprivate readColor():number /*int*/\n\t{\n\t\tvar cid:number /*int*/;\n\t\tvar len:number /*int*/;\n\t\tvar r:number /*int*/, g:number /*int*/, b:number /*int*/;\n\n\t\tcid = this._byteData.readUnsignedShort();\n\t\tlen = this._byteData.readUnsignedInt();\n\n\t\tswitch (cid) {\n\t\t\tcase 0x0010: // Floats\n\t\t\t\tr = this._byteData.readFloat()*255;\n\t\t\t\tg = this._byteData.readFloat()*255;\n\t\t\t\tb = this._byteData.readFloat()*255;\n\t\t\t\tbreak;\n\t\t\tcase 0x0011: // 24-bit color\n\t\t\t\tr = this._byteData.readUnsignedByte();\n\t\t\t\tg = this._byteData.readUnsignedByte();\n\t\t\t\tb = this._byteData.readUnsignedByte();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._byteData.position += (len - 6);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn (r << 16) | (g << 8) | b;\n\t}\n}\n\nexport = Max3DSParser;\n\n/**\n *\n */\nclass FaceVO\n{\n\tpublic a:number /*int*/;\n\tpublic b:number /*int*/;\n\tpublic c:number /*int*/;\n\tpublic smoothGroup:number /*int*/;\n}\n\n/**\n *\n */\nclass MaterialVO\n{\n\tpublic name:string;\n\tpublic ambientColor:number /*int*/;\n\tpublic diffuseColor:number /*int*/;\n\tpublic specularColor:number /*int*/;\n\tpublic twoSided:boolean;\n\tpublic colorMap:TextureVO;\n\tpublic specularMap:TextureVO;\n\tpublic material:MaterialBase;\n}\n\n/**\n *\n */\nclass ObjectVO\n{\n\tpublic name:string;\n\tpublic type:string;\n\tpublic pivotX:number;\n\tpublic pivotY:number;\n\tpublic pivotZ:number;\n\tpublic transform:Array<number>;\n\tpublic verts:Array<number>;\n\tpublic indices:Array<number> /*int*/;\n\tpublic uvs:Array<number>;\n\tpublic materialFaces:Object;\n\tpublic materials:Array<string>;\n\tpublic smoothingGroups:Array<number> /*int*/;\n}\n\n/**\n *\n */\nclass TextureVO\n{\n\tpublic url:string;\n\tpublic texture:Texture2DBase;\n}\n\n/**\n *\n */\nclass VertexVO\n{\n\tpublic x:number;\n\tpublic y:number;\n\tpublic z:number;\n\tpublic u:number;\n\tpublic v:number;\n\tpublic normal:Vector3D;\n\tpublic tangent:Vector3D;\n}",
    "import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Quaternion\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Quaternion\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AssetType\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport URLLoaderDataFormat\t\t\t\t= require(\"awayjs-core/lib/net/URLLoaderDataFormat\");\nimport URLRequest\t\t\t\t\t\t= require(\"awayjs-core/lib/net/URLRequest\");\nimport ParserBase\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserBase\");\nimport ParserUtils\t\t\t\t\t\t= require(\"awayjs-core/lib/parsers/ParserUtils\");\nimport ResourceDependency\t\t\t\t= require(\"awayjs-core/lib/parsers/ResourceDependency\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport DisplayObjectContainer\t\t\t= require(\"awayjs-display/lib/containers/DisplayObjectContainer\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Geometry\t\t\t\t\t\t\t= require(\"awayjs-display/lib/base/Geometry\");\nimport Mesh\t\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Mesh\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport DefaultMaterialManager\t\t\t= require(\"awayjs-renderergl/lib/managers/DefaultMaterialManager\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * OBJParser provides a parser for the OBJ data type.\n */\nclass OBJParser extends ParserBase\n{\n\tprivate _textData:string;\n\tprivate _startedParsing:boolean;\n\tprivate _charIndex:number;\n\tprivate _oldIndex:number;\n\tprivate _stringLength:number;\n\tprivate _currentObject:ObjectGroup;\n\tprivate _currentGroup:Group;\n\tprivate _currentMaterialGroup:MaterialGroup;\n\tprivate _objects:Array<ObjectGroup>;\n\tprivate _materialIDs:string[];\n\tprivate _materialLoaded:Array<LoadedMaterial>;\n\tprivate _materialSpecularData:Array<SpecularData>;\n\tprivate _meshes:Array<Mesh>;\n\tprivate _lastMtlID:string;\n\tprivate _objectIndex:number;\n\tprivate _realIndices;\n\tprivate _vertexIndex:number;\n\tprivate _vertices:Array<Vertex>;\n\tprivate _vertexNormals:Array<Vertex>;\n\tprivate _uvs:Array<UV>;\n\tprivate _scale:number;\n\tprivate _mtlLib:boolean;\n\tprivate _mtlLibLoaded:boolean = true;\n\tprivate _activeMaterialID:string = \"\";\n\n\t/**\n\t * Creates a new OBJParser object.\n\t * @param uri The url or id of the data or file to be parsed.\n\t * @param extra The holder for extra contextual data that the parser might need.\n\t */\n\tconstructor(scale:number = 1)\n\t{\n\t\tsuper(URLLoaderDataFormat.TEXT);\n\t\tthis._scale = scale;\n\t}\n\n\t/**\n\t * Scaling factor applied directly to vertices data\n\t * @param value The scaling factor.\n\t */\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\t}\n\n\t/**\n\t * Indicates whether or not a given file extension is supported by the parser.\n\t * @param extension The file extension of a potential file to be parsed.\n\t * @return Whether or not the given file type is supported.\n\t */\n\tpublic static supportsType(extension:string):boolean\n\t{\n\t\textension = extension.toLowerCase();\n\t\treturn extension == \"obj\";\n\t}\n\n\t/**\n\t * Tests whether a data block can be parsed by the parser.\n\t * @param data The data block to potentially be parsed.\n\t * @return Whether or not the given data is supported.\n\t */\n\tpublic static supportsData(data:any):boolean\n\t{\n\t\tvar content:string = ParserUtils.toString(data);\n\t\tvar hasV:boolean = false;\n\t\tvar hasF:boolean = false;\n\n\t\tif (content) {\n\t\t\thasV = content.indexOf(\"\\nv \") != -1;\n\t\t\thasF = content.indexOf(\"\\nf \") != -1;\n\t\t}\n\n\t\treturn hasV && hasF;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependency(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == 'mtl') {\n\t\t\tvar str:string = ParserUtils.toString(resourceDependency.data);\n\t\t\tthis.parseMtl(str);\n\n\t\t} else {\n\t\t\tvar asset:IAsset;\n\n\t\t\tif (resourceDependency.assets.length != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tasset = resourceDependency.assets[0];\n\n\t\t\tif (asset.assetType == AssetType.TEXTURE) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = resourceDependency.id;\n\t\t\t\tlm.texture = <Texture2DBase> asset;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0) {\n\t\t\t\t\tthis.applyMaterial(lm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iResolveDependencyFailure(resourceDependency:ResourceDependency)\n\t{\n\t\tif (resourceDependency.id == \"mtl\") {\n\t\t\tthis._mtlLib = false;\n\t\t\tthis._mtlLibLoaded = false;\n\t\t} else {\n\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\tlm.materialID = resourceDependency.id;\n\t\t\tthis._materialLoaded.push(lm);\n\t\t}\n\n\t\tif (this._meshes.length > 0)\n\t\t\tthis.applyMaterial(lm);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pProceedParsing():boolean\n\t{\n\t\tvar line:string;\n\t\tvar creturn:string = String.fromCharCode(10);\n\t\tvar trunk;\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._textData = this._pGetTextData();\n\t\t\t// Merge linebreaks that are immediately preceeded by\n\t\t\t// the \"escape\" backward slash into single lines.\n\t\t\tthis._textData = this._textData.replace(/\\\\[\\r\\n]+\\s*/gm, ' ');\n\t\t}\n\n\t\tif (this._textData.indexOf(creturn) == -1)\n\t\t\tcreturn = String.fromCharCode(13);\n\n\t\tif (!this._startedParsing) {\n\t\t\tthis._startedParsing = true;\n\t\t\tthis._vertices = new Array<Vertex>();\n\t\t\tthis._vertexNormals = new Array<Vertex>();\n\t\t\tthis._materialIDs = new Array<string>();\n\t\t\tthis._materialLoaded = new Array<LoadedMaterial>();\n\t\t\tthis._meshes = new Array<Mesh>();\n\t\t\tthis._uvs = new Array<UV>();\n\t\t\tthis._stringLength = this._textData.length;\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, 0);\n\t\t\tthis._oldIndex = 0;\n\t\t\tthis._objects = new Array<ObjectGroup>();\n\t\t\tthis._objectIndex = 0;\n\t\t}\n\n\t\twhile (this._charIndex < this._stringLength && this._pHasTime()) {\n\t\t\tthis._charIndex = this._textData.indexOf(creturn, this._oldIndex);\n\n\t\t\tif (this._charIndex == -1)\n\t\t\t\tthis._charIndex = this._stringLength;\n\n\t\t\tline = this._textData.substring(this._oldIndex, this._charIndex);\n\t\t\tline = line.split('\\r').join(\"\");\n\t\t\tline = line.replace(\"  \", \" \");\n\t\t\ttrunk = line.split(\" \");\n\t\t\tthis._oldIndex = this._charIndex + 1;\n\t\t\tthis.parseLine(trunk);\n\n\t\t\t// If whatever was parsed on this line resulted in the\n\t\t\t// parsing being paused to retrieve dependencies, break\n\t\t\t// here and do not continue parsing until un-paused.\n\t\t\tif (this.parsingPaused) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._charIndex >= this._stringLength) {\n\n\t\t\tif (this._mtlLib && !this._mtlLibLoaded) {\n\t\t\t\treturn ParserBase.MORE_TO_PARSE;\n\t\t\t}\n\n\t\t\tthis.translate();\n\t\t\tthis.applyMaterials();\n\n\t\t\treturn ParserBase.PARSING_DONE;\n\t\t}\n\n\t\treturn ParserBase.MORE_TO_PARSE;\n\t}\n\n\tpublic _pStartParsing(frameLimit:number)\n\t{\n\t\tsuper._pStartParsing(frameLimit);\n\n\t\t//create a content object for Loaders\n\t\tthis._pContent = new DisplayObjectContainer();\n\t}\n\n\t/**\n\t * Parses a single line in the OBJ file.\n\t */\n\tprivate parseLine(trunk)\n\t{\n\t\tswitch (trunk[0]) {\n\n\t\t\tcase \"mtllib\":\n\n\t\t\t\tthis._mtlLib = true;\n\t\t\t\tthis._mtlLibLoaded = false;\n\t\t\t\tthis.loadMtl(trunk[1]);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"g\":\n\n\t\t\t\tthis.createGroup(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"o\":\n\n\t\t\t\tthis.createObject(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"usemtl\":\n\n\t\t\t\tif (this._mtlLib) {\n\n\t\t\t\t\tif (!trunk[1])\n\t\t\t\t\t\ttrunk[1] = \"def000\";\n\n\t\t\t\t\tthis._materialIDs.push(trunk[1]);\n\t\t\t\t\tthis._activeMaterialID = trunk[1];\n\n\t\t\t\t\tif (this._currentGroup)\n\t\t\t\t\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"v\":\n\n\t\t\t\tthis.parseVertex(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vt\":\n\n\t\t\t\tthis.parseUV(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"vn\":\n\n\t\t\t\tthis.parseVertexNormal(trunk);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"f\":\n\n\t\t\t\tthis.parseFace(trunk);\n\n\t\t}\n\t}\n\n\t/**\n\t * Converts the parsed data into an Away3D scenegraph structure\n\t */\n\tprivate translate()\n\t{\n\t\tfor (var objIndex:number = 0; objIndex < this._objects.length; ++objIndex) {\n\t\t\tvar groups:Array<Group> = this._objects[objIndex].groups;\n\t\t\tvar numGroups:number = groups.length;\n\t\t\tvar materialGroups:Array<MaterialGroup>;\n\t\t\tvar numMaterialGroups:number;\n\t\t\tvar geometry:Geometry;\n\t\t\tvar mesh:Mesh;\n\n\t\t\tvar m:number;\n\t\t\tvar sm:number;\n\t\t\tvar bmMaterial:MethodMaterial;\n\n\t\t\tfor (var g:number = 0; g < numGroups; ++g) {\n\t\t\t\tgeometry = new Geometry();\n\t\t\t\tmaterialGroups = groups[g].materialGroups;\n\t\t\t\tnumMaterialGroups = materialGroups.length;\n\n\t\t\t\tfor (m = 0; m < numMaterialGroups; ++m)\n\t\t\t\t\tthis.translateMaterialGroup(materialGroups[m], geometry);\n\n\t\t\t\tif (geometry.subGeometries.length == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// Finalize and force type-based name\n\t\t\t\tthis._pFinalizeAsset(<IAsset> geometry);//, \"\");\n\n\t\t\t\tbmMaterial = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());\n\n\t\t\t\t//check for multipass\n\t\t\t\tif (this.materialMode >= 2)\n\t\t\t\t\tbmMaterial.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\tmesh = new Mesh(geometry, bmMaterial);\n\n\t\t\t\tif (this._objects[objIndex].name) {\n\t\t\t\t\t// this is a full independent object ('o' tag in OBJ file)\n\t\t\t\t\tmesh.name = this._objects[objIndex].name;\n\n\t\t\t\t} else if (groups[g].name) {\n\n\t\t\t\t\t// this is a group so the sub groups contain the actual mesh object names ('g' tag in OBJ file)\n\t\t\t\t\tmesh.name = groups[g].name;\n\n\t\t\t\t} else {\n\t\t\t\t\t// No name stored. Use empty string which will force it\n\t\t\t\t\t// to be overridden by finalizeAsset() to type default.\n\t\t\t\t\tmesh.name = \"\";\n\t\t\t\t}\n\n\t\t\t\tthis._meshes.push(mesh);\n\n\t\t\t\tif (groups[g].materialID != \"\")\n\t\t\t\t\tbmMaterial.name = groups[g].materialID + \"~\" + mesh.name; else\n\t\t\t\t\tbmMaterial.name = this._lastMtlID + \"~\" + mesh.name;\n\n\t\t\t\tif (mesh.subMeshes.length > 1) {\n\t\t\t\t\tfor (sm = 1; sm < mesh.subMeshes.length; ++sm)\n\t\t\t\t\t\tmesh.subMeshes[sm].material = bmMaterial;\n\t\t\t\t}\n\n\t\t\t\t//add to the content property\n\t\t\t\t(<DisplayObjectContainer> this._pContent).addChild(mesh);\n\n\t\t\t\tthis._pFinalizeAsset(<IAsset> mesh);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Translates an obj's material group to a subgeometry.\n\t * @param materialGroup The material group data to convert.\n\t * @param geometry The Geometry to contain the converted SubGeometry.\n\t */\n\tprivate translateMaterialGroup(materialGroup:MaterialGroup, geometry:Geometry)\n\t{\n\t\tvar faces:Array<FaceData> = materialGroup.faces;\n\t\tvar face:FaceData;\n\t\tvar numFaces:number = faces.length;\n\t\tvar numVerts:number;\n\t\tvar sub:TriangleSubGeometry;\n\n\t\tvar vertices:Array<number> = new Array<number>();\n\t\tvar uvs:Array<number> = new Array<number>();\n\t\tvar normals:Array<number> = new Array<number>();\n\t\tvar indices:Array<number> /*uint*/ = new Array<number>();\n\n\t\tthis._realIndices = [];\n\t\tthis._vertexIndex = 0;\n\n\t\tvar j:number;\n\t\tfor (var i:number = 0; i < numFaces; ++i) {\n\n\t\t\tface = faces[i];\n\t\t\tnumVerts = face.indexIds.length - 1;\n\n\t\t\tfor (j = 1; j < numVerts; ++j) {\n\n\t\t\t\tthis.translateVertexData(face, j, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, 0, vertices, uvs, indices, normals);\n\t\t\t\tthis.translateVertexData(face, j + 1, vertices, uvs, indices, normals);\n\t\t\t}\n\t\t}\n\t\tif (vertices.length > 0) {\n\t\t\tsub = new TriangleSubGeometry(true);\n\t\t\tsub.autoDeriveNormals = normals.length? false : true;\n\t\t\tsub.updateIndices(indices);\n\t\t\tsub.updatePositions(vertices);\n\t\t\tsub.updateVertexNormals(normals);\n\t\t\tsub.updateUVs(uvs);\n\n\t\t\tgeometry.addSubGeometry(sub);\n\t\t}\n\t}\n\n\tprivate translateVertexData(face:FaceData, vertexIndex:number, vertices:Array<number>, uvs:Array<number>, indices:Array<number> /*uint*/, normals:Array<number>)\n\t{\n\t\tvar index:number;\n\t\tvar vertex:Vertex;\n\t\tvar vertexNormal:Vertex;\n\t\tvar uv:UV;\n\n\t\tif (!this._realIndices[face.indexIds[vertexIndex]]) {\n\n\t\t\tindex = this._vertexIndex;\n\t\t\tthis._realIndices[face.indexIds[vertexIndex]] = ++this._vertexIndex;\n\t\t\tvertex = this._vertices[face.vertexIndices[vertexIndex] - 1];\n\t\t\tvertices.push(vertex.x*this._scale, vertex.y*this._scale, vertex.z*this._scale);\n\n\t\t\tif (face.normalIndices.length > 0) {\n\t\t\t\tvertexNormal = this._vertexNormals[face.normalIndices[vertexIndex] - 1];\n\t\t\t\tnormals.push(vertexNormal.x, vertexNormal.y, vertexNormal.z);\n\t\t\t}\n\n\t\t\tif (face.uvIndices.length > 0) {\n\n\t\t\t\ttry {\n\t\t\t\t\tuv = this._uvs[face.uvIndices[vertexIndex] - 1];\n\t\t\t\t\tuvs.push(uv.u, uv.v);\n\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\tswitch (vertexIndex) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tuvs.push(0, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tuvs.push(.5, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tuvs.push(1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tindex = this._realIndices[face.indexIds[vertexIndex]] - 1;\n\t\t}\n\n\t\tindices.push(index);\n\t}\n\n\t/**\n\t * Creates a new object group.\n\t * @param trunk The data block containing the object tag and its parameters\n\t */\n\tprivate createObject(trunk)\n\t{\n\t\tthis._currentGroup = null;\n\t\tthis._currentMaterialGroup = null;\n\t\tthis._objects.push(this._currentObject = new ObjectGroup());\n\n\t\tif (trunk)\n\t\t\tthis._currentObject.name = trunk[1];\n\t}\n\n\t/**\n\t * Creates a new group.\n\t * @param trunk The data block containing the group tag and its parameters\n\t */\n\tprivate createGroup(trunk)\n\t{\n\t\tif (!this._currentObject)\n\t\t\tthis.createObject(null);\n\t\tthis._currentGroup = new Group();\n\n\t\tthis._currentGroup.materialID = this._activeMaterialID;\n\n\t\tif (trunk)\n\t\t\tthis._currentGroup.name = trunk[1];\n\t\tthis._currentObject.groups.push(this._currentGroup);\n\n\t\tthis.createMaterialGroup(null);\n\t}\n\n\t/**\n\t * Creates a new material group.\n\t * @param trunk The data block containing the material tag and its parameters\n\t */\n\tprivate createMaterialGroup(trunk)\n\t{\n\t\tthis._currentMaterialGroup = new MaterialGroup();\n\t\tif (trunk)\n\t\t\tthis._currentMaterialGroup.url = trunk[1];\n\t\tthis._currentGroup.materialGroups.push(this._currentMaterialGroup);\n\t}\n\n\t/**\n\t * Reads the next vertex coordinates.\n\t * @param trunk The data block containing the vertex tag and its parameters\n\t */\n\tprivate parseVertex(trunk)\n\t{\n\t\t//for the very rare cases of other delimiters/charcodes seen in some obj files\n\n\t\tvar v1:number, v2:number , v3:number;\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\n\t\t\tv1 = <number> nTrunk[0];\n\t\t\tv2 = <number> nTrunk[1];\n\t\t\tv3 = <number> -nTrunk[2];\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\n\t\t} else {\n\t\t\tv1 = <number> parseFloat(trunk[1]);\n\t\t\tv2 = <number> parseFloat(trunk[2]);\n\t\t\tv3 = <number> -parseFloat(trunk[3]);\n\n\t\t\tthis._vertices.push(new Vertex(v1, v2, v3));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next uv coordinates.\n\t * @param trunk The data block containing the uv tag and its parameters\n\t */\n\tprivate parseUV(trunk)\n\t{\n\t\tif (trunk.length > 3) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._uvs.push(new UV(nTrunk[0], 1 - nTrunk[1]));\n\n\t\t} else {\n\t\t\tthis._uvs.push(new UV(parseFloat(trunk[1]), 1 - parseFloat(trunk[2])));\n\t\t}\n\n\t}\n\n\t/**\n\t * Reads the next vertex normal coordinates.\n\t * @param trunk The data block containing the vertex normal tag and its parameters\n\t */\n\tprivate parseVertexNormal(trunk)\n\t{\n\t\tif (trunk.length > 4) {\n\t\t\tvar nTrunk = [];\n\t\t\tvar val:number;\n\t\t\tfor (var i:number = 1; i < trunk.length; ++i) {\n\t\t\t\tval = parseFloat(trunk[i]);\n\t\t\t\tif (!isNaN(val))\n\t\t\t\t\tnTrunk.push(val);\n\t\t\t}\n\t\t\tthis._vertexNormals.push(new Vertex(nTrunk[0], nTrunk[1], -nTrunk[2]));\n\n\t\t} else {\n\t\t\tthis._vertexNormals.push(new Vertex(parseFloat(trunk[1]), parseFloat(trunk[2]), -parseFloat(trunk[3])));\n\t\t}\n\t}\n\n\t/**\n\t * Reads the next face's indices.\n\t * @param trunk The data block containing the face tag and its parameters\n\t */\n\tprivate parseFace(trunk)\n\t{\n\t\tvar len:number = trunk.length;\n\t\tvar face:FaceData = new FaceData();\n\n\t\tif (!this._currentGroup) {\n\t\t\tthis.createGroup(null);\n\t\t}\n\n\t\tvar indices;\n\t\tfor (var i:number = 1; i < len; ++i) {\n\n\t\t\tif (trunk[i] == \"\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices = trunk[i].split(\"/\");\n\t\t\tface.vertexIndices.push(this.parseIndex(parseInt(indices[0]), this._vertices.length));\n\n\t\t\tif (indices[1] && String(indices[1]).length > 0)\n\t\t\t\tface.uvIndices.push(this.parseIndex(parseInt(indices[1]), this._uvs.length));\n\n\t\t\tif (indices[2] && String(indices[2]).length > 0)\n\t\t\t\tface.normalIndices.push(this.parseIndex(parseInt(indices[2]), this._vertexNormals.length));\n\n\t\t\tface.indexIds.push(trunk[i]);\n\t\t}\n\n\t\tthis._currentMaterialGroup.faces.push(face);\n\t}\n\n\t/**\n\t * This is a hack around negative face coords\n\t */\n\tprivate parseIndex(index:number, length:number):number\n\t{\n\t\tif (index < 0)\n\t\t\treturn index + length + 1; else\n\t\t\treturn index;\n\t}\n\n\tprivate parseMtl(data:string)\n\t{\n\t\tvar materialDefinitions = data.split('newmtl');\n\t\tvar lines;\n\t\tvar trunk;\n\t\tvar j:number;\n\n\t\tvar basicSpecularMethod:SpecularBasicMethod;\n\t\tvar useSpecular:boolean;\n\t\tvar useColor:boolean;\n\t\tvar diffuseColor:number;\n\t\tvar color:number;\n\t\tvar specularColor:number;\n\t\tvar specular:number;\n\t\tvar alpha:number;\n\t\tvar mapkd:string;\n\n\t\tfor (var i:number = 0; i < materialDefinitions.length; ++i) {\n\n\n\t\t\tlines = (materialDefinitions[i].split('\\r')).join(\"\").split('\\n');\n\t\t\t//lines = (materialDefinitions[i].split('\\r') as Array).join(\"\").split('\\n');\n\n\t\t\tif (lines.length == 1)\n\t\t\t\tlines = materialDefinitions[i].split(String.fromCharCode(13));\n\n\t\t\tdiffuseColor = color = specularColor = 0xFFFFFF;\n\t\t\tspecular = 0;\n\t\t\tuseSpecular = false;\n\t\t\tuseColor = false;\n\t\t\talpha = 1;\n\t\t\tmapkd = \"\";\n\n\t\t\tfor (j = 0; j < lines.length; ++j) {\n\n\t\t\t\tlines[j] = lines[j].replace(/\\s+$/, \"\");\n\n\t\t\t\tif (lines[j].substring(0, 1) != \"#\" && (j == 0 || lines[j] != \"\")) {\n\t\t\t\t\ttrunk = lines[j].split(\" \");\n\n\t\t\t\t\tif (String(trunk[0]).charCodeAt(0) == 9 || String(trunk[0]).charCodeAt(0) == 32)\n\t\t\t\t\t\ttrunk[0] = trunk[0].substring(1, trunk[0].length);\n\n\t\t\t\t\tif (j == 0) {\n\t\t\t\t\t\tthis._lastMtlID = trunk.join(\"\");\n\t\t\t\t\t\tthis._lastMtlID = (this._lastMtlID == \"\")? \"def000\" : this._lastMtlID;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch (trunk[0]) {\n\n\t\t\t\t\t\t\tcase \"Ka\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3])))\n\t\t\t\t\t\t\t\t\tcolor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ks\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tspecularColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseSpecular = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Ns\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\tspecular = Number(trunk[1])*0.001;\n\t\t\t\t\t\t\t\tif (specular == 0)\n\t\t\t\t\t\t\t\t\tuseSpecular = false;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"Kd\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])) && trunk[2] && !isNaN(Number(trunk[2])) && trunk[3] && !isNaN(Number(trunk[3]))) {\n\t\t\t\t\t\t\t\t\tdiffuseColor = trunk[1]*255 << 16 | trunk[2]*255 << 8 | trunk[3]*255;\n\t\t\t\t\t\t\t\t\tuseColor = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"tr\":\n\t\t\t\t\t\t\tcase \"d\":\n\t\t\t\t\t\t\t\tif (trunk[1] && !isNaN(Number(trunk[1])))\n\t\t\t\t\t\t\t\t\talpha = Number(trunk[1]);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"map_Kd\":\n\t\t\t\t\t\t\t\tmapkd = this.parseMapKdString(trunk);\n\t\t\t\t\t\t\t\tmapkd = mapkd.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (mapkd != \"\") {\n\n\t\t\t\tif (useSpecular) {\n\n\t\t\t\t\tbasicSpecularMethod = new SpecularBasicMethod();\n\t\t\t\t\tbasicSpecularMethod.specularColor = specularColor;\n\t\t\t\t\tbasicSpecularMethod.specular = specular;\n\n\t\t\t\t\tvar specularData:SpecularData = new SpecularData();\n\t\t\t\t\tspecularData.alpha = alpha;\n\t\t\t\t\tspecularData.basicSpecularMethod = basicSpecularMethod;\n\t\t\t\t\tspecularData.materialID = this._lastMtlID;\n\n\t\t\t\t\tif (!this._materialSpecularData)\n\t\t\t\t\t\tthis._materialSpecularData = new Array<SpecularData>();\n\n\t\t\t\t\tthis._materialSpecularData.push(specularData);\n\n\t\t\t\t}\n\n\t\t\t\tthis._pAddDependency(this._lastMtlID, new URLRequest(mapkd));\n\n\t\t\t} else if (useColor && !isNaN(color)) {\n\n\t\t\t\tvar lm:LoadedMaterial = new LoadedMaterial();\n\t\t\t\tlm.materialID = this._lastMtlID;\n\n\t\t\t\tif (alpha == 0)\n\t\t\t\t\tconsole.log(\"Warning: an alpha value of 0 was found in mtl color tag (Tr or d) ref:\" + this._lastMtlID + \", mesh(es) using it will be invisible!\");\n\n\t\t\t\tvar cm:MethodMaterial;\n\n\t\t\t\tif (this.materialMode < 2) {\n\t\t\t\t\tcm = new MethodMaterial(color);\n\n\t\t\t\t\tvar colorMat:MethodMaterial = <MethodMaterial> cm;\n\n\t\t\t\t\tcolorMat.alpha = alpha;\n\t\t\t\t\tcolorMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMat.specular = specular;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tcm = new MethodMaterial(color);\n\t\t\t\t\tcm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\tvar colorMultiMat:MethodMaterial = <MethodMaterial> cm;\n\n\n\t\t\t\t\tcolorMultiMat.diffuseColor = diffuseColor;\n\t\t\t\t\tcolorMultiMat.repeat = true;\n\n\t\t\t\t\tif (useSpecular) {\n\t\t\t\t\t\tcolorMultiMat.specularColor = specularColor;\n\t\t\t\t\t\tcolorMultiMat.specular = specular;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlm.cm = cm;\n\n\t\t\t\tthis._materialLoaded.push(lm);\n\n\t\t\t\tif (this._meshes.length > 0)\n\t\t\t\t\tthis.applyMaterial(lm);\n\n\t\t\t}\n\t\t}\n\n\t\tthis._mtlLibLoaded = true;\n\t}\n\n\tprivate parseMapKdString(trunk):string\n\t{\n\t\tvar url:string = \"\";\n\t\tvar i:number;\n\t\tvar breakflag:boolean;\n\n\t\tfor (i = 1; i < trunk.length;) {\n\t\t\tswitch (trunk[i]) {\n\t\t\t\tcase \"-blendu\":\n\t\t\t\tcase \"-blendv\":\n\t\t\t\tcase \"-cc\":\n\t\t\t\tcase \"-clamp\":\n\t\t\t\tcase \"-texres\":\n\t\t\t\t\ti += 2; //Skip ahead 1 attribute\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-mm\":\n\t\t\t\t\ti += 3; //Skip ahead 2 attributes\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"-o\":\n\t\t\t\tcase \"-s\":\n\t\t\t\tcase \"-t\":\n\t\t\t\t\ti += 4; //Skip ahead 3 attributes\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tbreakflag = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (breakflag)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Reconstruct URL/filename\n\t\tfor (i; i < trunk.length; i++) {\n\t\t\turl += trunk[i];\n\t\t\turl += \" \";\n\t\t}\n\n\t\t//Remove the extraneous space and/or newline from the right side\n\t\turl = url.replace(/\\s+$/, \"\");\n\n\t\treturn url;\n\t}\n\n\tprivate loadMtl(mtlurl:string)\n\t{\n\t\t// Add raw-data dependency to queue and load dependencies now,\n\t\t// which will pause the parsing in the meantime.\n\t\tthis._pAddDependency('mtl', new URLRequest(mtlurl), true);\n\t\tthis._pPauseAndRetrieveDependencies();//\n\t}\n\n\tprivate applyMaterial(lm:LoadedMaterial)\n\t{\n\t\tvar decomposeID;\n\t\tvar mesh:Mesh;\n\t\tvar tm:MethodMaterial;\n\t\tvar j:number;\n\t\tvar specularData:SpecularData;\n\n\t\tfor (var i:number = 0; i < this._meshes.length; ++i) {\n\t\t\tmesh = this._meshes[i];\n\t\t\tdecomposeID = mesh.material.name.split(\"~\");\n\n\t\t\tif (decomposeID[0] == lm.materialID) {\n\n\t\t\t\tif (lm.cm) {\n\t\t\t\t\tif (mesh.material)\n\t\t\t\t\t\tmesh.material = null;\n\t\t\t\t\tmesh.material = lm.cm;\n\n\t\t\t\t} else if (lm.texture) {\n\t\t\t\t\tif (this.materialMode < 2) { // if materialMode is 0 or 1, we create a SinglePass\n\t\t\t\t\t\ttm = <MethodMaterial > mesh.material;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.alpha = lm.alpha;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\t\t\t\t\t\t\t\t\ttm.alpha = specularData.alpha;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //if materialMode==2 this is a MultiPassTexture\n\t\t\t\t\t\ttm = <MethodMaterial> mesh.material;\n\t\t\t\t\t\ttm.mode = MethodMaterialMode.MULTI_PASS;\n\n\t\t\t\t\t\ttm.texture = lm.texture;\n\t\t\t\t\t\ttm.color = lm.color;\n\t\t\t\t\t\ttm.repeat = true;\n\n\t\t\t\t\t\tif (lm.specularMethod) {\n\t\t\t\t\t\t\t// By setting the specularMethod property to null before assigning\n\t\t\t\t\t\t\t// the actual method instance, we avoid having the properties of\n\t\t\t\t\t\t\t// the new method being overridden with the settings from the old\n\t\t\t\t\t\t\t// one, which is default behavior of the setter.\n\t\t\t\t\t\t\ttm.specularMethod = null;\n\t\t\t\t\t\t\ttm.specularMethod = lm.specularMethod;\n\t\t\t\t\t\t} else if (this._materialSpecularData) {\n\t\t\t\t\t\t\tfor (j = 0; j < this._materialSpecularData.length; ++j) {\n\t\t\t\t\t\t\t\tspecularData = this._materialSpecularData[j];\n\n\t\t\t\t\t\t\t\tif (specularData.materialID == lm.materialID) {\n\t\t\t\t\t\t\t\t\ttm.specularMethod = null; // Prevent property overwrite (see above)\n\t\t\t\t\t\t\t\t\ttm.specularMethod = specularData.basicSpecularMethod;\n\t\t\t\t\t\t\t\t\ttm.color = specularData.color;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmesh.material.name = decomposeID[1]? decomposeID[1] : decomposeID[0];\n\t\t\t\tthis._meshes.splice(i, 1);\n\t\t\t\t--i;\n\t\t\t}\n\t\t}\n\n\t\tif (lm.cm || tm)\n\t\t\tthis._pFinalizeAsset(lm.cm || tm);\n\t}\n\n\tprivate applyMaterials()\n\t{\n\t\tif (this._materialLoaded.length == 0)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._materialLoaded.length; ++i)\n\t\t\tthis.applyMaterial(this._materialLoaded[i]);\n\t}\n}\n\nexport = OBJParser;\n\nclass ObjectGroup\n{\n\tpublic name:string;\n\tpublic groups:Group[] = new Array<Group>();\n}\n\nclass Group\n{\n\tpublic name:string;\n\tpublic materialID:string;\n\tpublic materialGroups:MaterialGroup[] = new Array<MaterialGroup>();\n}\n\nclass MaterialGroup\n{\n\tpublic url:string;\n\tpublic faces:FaceData[] = new Array<FaceData>();\n}\n\nclass SpecularData\n{\n\tpublic materialID:string;\n\tpublic basicSpecularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass LoadedMaterial\n{\n\tpublic materialID:string;\n\tpublic texture:Texture2DBase;\n\tpublic cm:MaterialBase;\n\tpublic specularMethod:SpecularBasicMethod;\n\tpublic color:number = 0xFFFFFF;\n\tpublic alpha:number = 1;\n}\n\nclass FaceData\n{\n\tpublic vertexIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic uvIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic normalIndices:Array<number> /*uint*/ = new Array<number>();\n\tpublic indexIds:string[] = new Array<string>(); // used for real index lookups\n}\n\n/**\n* Texture coordinates value object.\n*/\nclass UV\n{\n\tprivate _u:number;\n\tprivate _v:number;\n\n\t/**\n\t * Creates a new <code>UV</code> object.\n\t *\n\t * @param    u        [optional]    The horizontal coordinate of the texture value. Defaults to 0.\n\t * @param    v        [optional]    The vertical coordinate of the texture value. Defaults to 0.\n\t */\n\tconstructor(u:number = 0, v:number = 0)\n\t{\n\t\tthis._u = u;\n\t\tthis._v = v;\n\t}\n\n\t/**\n\t * Defines the vertical coordinate of the texture value.\n\t */\n\tpublic get v():number\n\t{\n\t\treturn this._v;\n\t}\n\n\tpublic set v(value:number)\n\t{\n\t\tthis._v = value;\n\t}\n\n\t/**\n\t * Defines the horizontal coordinate of the texture value.\n\t */\n\tpublic get u():number\n\t{\n\t\treturn this._u;\n\t}\n\n\tpublic set u(value:number)\n\t{\n\t\tthis._u = value;\n\t}\n\n\t/**\n\t * returns a new UV value Object\n\t */\n\tpublic clone():UV\n\t{\n\t\treturn new UV(this._u, this._v);\n\t}\n\n\t/**\n\t * returns the value object as a string for trace/debug purpose\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._u + \",\" + this._v;\n\t}\n}\n\nclass Vertex\n{\n\tprivate _x:number;\n\tprivate _y:number;\n\tprivate _z:number;\n\tprivate _index:number;\n\n\t/**\n\t * Creates a new <code>Vertex</code> value object.\n\t *\n\t * @param    x            [optional]    The x value. Defaults to 0.\n\t * @param    y            [optional]    The y value. Defaults to 0.\n\t * @param    z            [optional]    The z value. Defaults to 0.\n\t * @param    index        [optional]    The index value. Defaults is NaN.\n\t */\n\tconstructor(x:number = 0, y:number = 0, z:number = 0, index:number = 0)\n\t{\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._index = index;\n\t}\n\n\t/**\n\t * To define/store the index of value object\n\t * @param    ind        The index\n\t */\n\tpublic set index(ind:number)\n\t{\n\t\tthis._index = ind;\n\t}\n\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n\n\t/**\n\t * To define/store the x value of the value object\n\t * @param    value        The x value\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tthis._x = value;\n\t}\n\n\t/**\n\t * To define/store the y value of the value object\n\t * @param    value        The y value\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tthis._y = value;\n\t}\n\n\t/**\n\t * To define/store the z value of the value object\n\t * @param    value        The z value\n\t */\n\tpublic get z():number\n\t{\n\t\treturn this._z;\n\t}\n\n\tpublic set z(value:number)\n\t{\n\t\tthis._z = value;\n\t}\n\n\t/**\n\t * returns a new Vertex value Object\n\t */\n\tpublic clone():Vertex\n\t{\n\t\treturn new Vertex(this._x, this._y, this._z);\n\t}\n}",
    "import AssetLoader\t\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetLoader\");\n\nimport AWDParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/AWDParser\");\nimport Max3DSParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/Max3DSParser\");\nimport MD2Parser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/MD2Parser\");\nimport OBJParser\t\t\t\t\t\t= require(\"awayjs-parsers/lib/OBJParser\");\n\n/**\n *\n */\nclass Parsers\n{\n\t/**\n\t * A list of all parsers that come bundled with Away3D. Use this to quickly\n\t * enable support for all bundled parsers to the file format auto-detection\n\t * feature, using any of the enableParsers() methods on loaders, e.g.:\n\t *\n\t * <code>AssetLibrary.enableParsers(Parsers.ALL_BUNDLED);</code>\n\t *\n\t * Beware however that this requires all parser classes to be included in the\n\t * SWF file, which will add 50-100 kb to the file. When only a limited set of\n\t * file formats are used, SWF file size can be saved by adding the parsers\n\t * individually using AssetLibrary.enableParser()\n\t *\n\t * A third way is to specify a parser for each loaded file, thereby bypassing\n\t * the auto-detection mechanisms altogether, while at the same time allowing\n\t * any properties that are unique to that parser to be set for that load.\n\t *\n\t * The bundled parsers are:\n\t *\n\t * <ul>\n\t * <li>AC3D (.ac)</li>\n\t * <li>Away Data version 1 ASCII and version 2 binary (.awd). AWD1 BSP unsupported</li>\n\t * <li>3DMax (.3ds)</li>\n\t * <li>DXF (.dxf)</li>\n\t * <li>Quake 2 MD2 models (.md2)</li>\n\t * <li>Doom 3 MD5 animation clips (.md5anim)</li>\n\t * <li>Doom 3 MD5 meshes (.md5mesh)</li>\n\t * <li>Wavefront OBJ (.obj)</li>\n\t * <li>Collada (.dae)</li>\n\t * <li>Images (.jpg, .png)</li>\n\t * </ul>\n\t *\n\t * @see away.library.AssetLibrary.enableParser\n\t */\n\tpublic static ALL_BUNDLED:Array<Object> = Array<Object>(AWDParser, Max3DSParser, MD2Parser, OBJParser);\n\n\t/**\n\t * Short-hand function to enable all bundled parsers for auto-detection. In practice,\n\t * this is the same as invoking enableParsers(Parsers.ALL_BUNDLED) on any of the\n\t * loader classes SingleFileLoader, AssetLoader, AssetLibrary or Loader3D.\n\t *\n\t * See notes about file size in the documentation for the ALL_BUNDLED constant.\n\t *\n\t * @see away.parsers.Parsers.ALL_BUNDLED\n\t */\n\tpublic static enableAllBundled():void\n\t{\n\t\tAssetLoader.enableParsers(Parsers.ALL_BUNDLED);\n\t}\n}\n\nexport = Parsers;"
  ],
  "sourceRoot": ""
}