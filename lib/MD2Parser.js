var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var ParserBase = require("awayjs-core/lib/parsers/ParserBase");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
var Geometry = require("awayjs-display/lib/base/Geometry");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var Mesh = require("awayjs-display/lib/entities/Mesh");
var VertexClipNode = require("awayjs-renderergl/lib/animators/nodes/VertexClipNode");
var VertexAnimationSet = require("awayjs-renderergl/lib/animators/VertexAnimationSet");
var DefaultMaterialManager = require("awayjs-renderergl/lib/managers/DefaultMaterialManager");
var MethodMaterial = require("awayjs-methodmaterials/lib/MethodMaterial");
var MethodMaterialMode = require("awayjs-methodmaterials/lib/MethodMaterialMode");
/**
 * MD2Parser provides a parser for the MD2 data type.
 */
var MD2Parser = (function (_super) {
    __extends(MD2Parser, _super);
    /**
     * Creates a new MD2Parser object.
     * @param textureType The extension of the texture (e.g. jpg/png/...)
     * @param ignoreTexturePath If true, the path of the texture is ignored
     */
    function MD2Parser(textureType, ignoreTexturePath) {
        if (textureType === void 0) { textureType = "jpg"; }
        if (ignoreTexturePath === void 0) { ignoreTexturePath = true; }
        _super.call(this, URLLoaderDataFormat.ARRAY_BUFFER);
        this._clipNodes = new Object();
        // the current subgeom being built
        this._animationSet = new VertexAnimationSet();
        this.materialFinal = false;
        this.geoCreated = false;
        this._textureType = textureType;
        this._ignoreTexturePath = ignoreTexturePath;
    }
    /**
     * Indicates whether or not a given file extension is supported by the parser.
     * @param extension The file extension of a potential file to be parsed.
     * @return Whether or not the given file type is supported.
     */
    MD2Parser.supportsType = function (extension) {
        extension = extension.toLowerCase();
        return extension == "md2";
    };
    /**
     * Tests whether a data block can be parsed by the parser.
     * @param data The data block to potentially be parsed.
     * @return Whether or not the given data is supported.
     */
    MD2Parser.supportsData = function (data) {
        return (ParserUtils.toString(data, 4) == 'IDP2');
    };
    /**
     * @inheritDoc
     */
    MD2Parser.prototype._iResolveDependency = function (resourceDependency) {
        if (resourceDependency.assets.length != 1)
            return;
        var asset = resourceDependency.assets[0];
        if (asset) {
            var material = new MethodMaterial(asset);
            if (this.materialMode >= 2)
                material.mode = MethodMaterialMode.MULTI_PASS;
            //add to the content property
            this._pContent.addChild(this._mesh);
            material.name = this._mesh.material.name;
            this._mesh.material = material;
            this._pFinalizeAsset(material);
            this._pFinalizeAsset(this._mesh.geometry);
            this._pFinalizeAsset(this._mesh);
        }
        this.materialFinal = true;
    };
    /**
     * @inheritDoc
     */
    MD2Parser.prototype._iResolveDependencyFailure = function (resourceDependency) {
        // apply system default
        if (this.materialMode < 2) {
            this._mesh.material = DefaultMaterialManager.getDefaultMaterial();
        }
        else {
            this._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());
            this._mesh.material.mode = MethodMaterialMode.MULTI_PASS;
        }
        //add to the content property
        this._pContent.addChild(this._mesh);
        this._pFinalizeAsset(this._mesh.geometry);
        this._pFinalizeAsset(this._mesh);
        this.materialFinal = true;
    };
    /**
     * @inheritDoc
     */
    MD2Parser.prototype._pProceedParsing = function () {
        if (!this._startedParsing) {
            this._byteData = this._pGetByteData();
            this._startedParsing = true;
            // Reset bytearray read position (which may have been
            // moved forward by the supportsData() function.)
            this._byteData.position = 0;
        }
        while (this._pHasTime()) {
            if (!this._parsedHeader) {
                //----------------------------------------------------------------------------
                // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray
                //----------------------------------------------------------------------------
                //this._byteData.endian = Endian.LITTLE_ENDIAN;
                // TODO: Create a mesh only when encountered (if it makes sense
                // for this file format) and return it using this._pFinalizeAsset()
                this._geometry = new Geometry();
                this._mesh = new Mesh(this._geometry, null);
                if (this.materialMode < 2) {
                    this._mesh.material = DefaultMaterialManager.getDefaultMaterial();
                }
                else {
                    this._mesh.material = new MethodMaterial(DefaultMaterialManager.getDefaultTexture());
                    this._mesh.material.mode = MethodMaterialMode.MULTI_PASS;
                }
                //_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);
                //_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));
                // Parse header and decompress body
                this.parseHeader();
                this.parseMaterialNames();
            }
            else if (!this._parsedUV) {
                this.parseUV();
            }
            else if (!this._parsedFaces) {
                this.parseFaces();
            }
            else if (!this._parsedFrames) {
                this.parseFrames();
            }
            else if ((this.geoCreated) && (this.materialFinal)) {
                return ParserBase.PARSING_DONE;
            }
            else if (!this.geoCreated) {
                this.geoCreated = true;
                //create default subgeometry
                this._geometry.addSubGeometry(this._firstSubGeom.clone());
                // Force name to be chosen by this._pFinalizeAsset()
                this._mesh.name = "";
                if (this.materialFinal) {
                    //add to the content property
                    this._pContent.addChild(this._mesh);
                    this._pFinalizeAsset(this._mesh.geometry);
                    this._pFinalizeAsset(this._mesh);
                }
                this._pPauseAndRetrieveDependencies();
            }
        }
        return ParserBase.MORE_TO_PARSE;
    };
    MD2Parser.prototype._pStartParsing = function (frameLimit) {
        _super.prototype._pStartParsing.call(this, frameLimit);
        //create a content object for Loaders
        this._pContent = new DisplayObjectContainer();
    };
    /**
     * Reads in all that MD2 Header data that is declared as private variables.
     * I know its a lot, and it looks ugly, but only way to do it in Flash
     */
    MD2Parser.prototype.parseHeader = function () {
        this._ident = this._byteData.readInt();
        this._version = this._byteData.readInt();
        this._skinWidth = this._byteData.readInt();
        this._skinHeight = this._byteData.readInt();
        //skip this._frameSize
        this._byteData.readInt();
        this._numSkins = this._byteData.readInt();
        this._numVertices = this._byteData.readInt();
        this._numST = this._byteData.readInt();
        this._numTris = this._byteData.readInt();
        //skip this._numGlCmds
        this._byteData.readInt();
        this._numFrames = this._byteData.readInt();
        this._offsetSkins = this._byteData.readInt();
        this._offsetST = this._byteData.readInt();
        this._offsetTris = this._byteData.readInt();
        this._offsetFrames = this._byteData.readInt();
        //skip this._offsetGlCmds
        this._byteData.readInt();
        this._offsetEnd = this._byteData.readInt();
        this._parsedHeader = true;
    };
    /**
     * Parses the file names for the materials.
     */
    MD2Parser.prototype.parseMaterialNames = function () {
        var url;
        var name;
        var extIndex /*int*/;
        var slashIndex /*int*/;
        this._materialNames = new Array();
        this._byteData.position = this._offsetSkins;
        var regExp = new RegExp("[^a-zA-Z0-9\\_\/.]", "g");
        for (var i = 0; i < this._numSkins; ++i) {
            name = this._byteData.readUTFBytes(64);
            name = name.replace(regExp, "");
            extIndex = name.lastIndexOf(".");
            if (this._ignoreTexturePath)
                slashIndex = name.lastIndexOf("/");
            if (name.toLowerCase().indexOf(".jpg") == -1 && name.toLowerCase().indexOf(".png") == -1) {
                name = name.substring(slashIndex + 1, extIndex);
                url = name + "." + this._textureType;
            }
            else {
                url = name;
            }
            this._materialNames[i] = name;
            // only support 1 skin TODO: really?
            if (this.dependencies.length == 0)
                this._pAddDependency(name, new URLRequest(url));
        }
        if (this._materialNames.length > 0)
            this._mesh.material.name = this._materialNames[0];
        else
            this.materialFinal = true;
    };
    /**
     * Parses the uv data for the mesh.
     */
    MD2Parser.prototype.parseUV = function () {
        var j = 0;
        this._uvs = new Array(this._numST * 2);
        this._byteData.position = this._offsetST;
        for (var i = 0; i < this._numST; i++) {
            this._uvs[j++] = this._byteData.readShort() / this._skinWidth;
            this._uvs[j++] = this._byteData.readShort() / this._skinHeight;
        }
        this._parsedUV = true;
    };
    /**
     * Parses unique indices for the faces.
     */
    MD2Parser.prototype.parseFaces = function () {
        var a /*uint*/, b /*uint*/, c /*uint*/, ta /*uint*/, tb /*uint*/, tc /*uint*/;
        var i /*uint*/;
        this._vertIndices = new Array();
        this._uvIndices = new Array();
        this._indices = new Array();
        this._byteData.position = this._offsetTris;
        for (i = 0; i < this._numTris; i++) {
            //collect vertex indices
            a = this._byteData.readUnsignedShort();
            b = this._byteData.readUnsignedShort();
            c = this._byteData.readUnsignedShort();
            //collect uv indices
            ta = this._byteData.readUnsignedShort();
            tb = this._byteData.readUnsignedShort();
            tc = this._byteData.readUnsignedShort();
            this.addIndex(a, ta);
            this.addIndex(b, tb);
            this.addIndex(c, tc);
        }
        var len = this._uvIndices.length;
        this._finalUV = new Array(len * 2);
        for (i = 0; i < len; ++i) {
            this._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];
            this._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];
        }
        this._parsedFaces = true;
    };
    /**
     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the
     * corresponding vertex and uv data in the correct location.
     * @param vertexIndex The original index in the vertex list.
     * @param uvIndex The original index in the uv list.
     */
    MD2Parser.prototype.addIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {
        var index = this.findIndex(vertexIndex, uvIndex);
        if (index == -1) {
            this._indices.push(this._vertIndices.length);
            this._vertIndices.push(vertexIndex);
            this._uvIndices.push(uvIndex);
        }
        else
            this._indices.push(index);
    };
    /**
     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.
     * @param vertexIndex The original index in the vertex list.
     * @param uvIndex The original index in the uv list.
     * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.
     */
    MD2Parser.prototype.findIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {
        var len = this._vertIndices.length;
        for (var i = 0; i < len; ++i) {
            if (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)
                return i;
        }
        return -1;
    };
    /**
     * Parses all the frame geometries.
     */
    MD2Parser.prototype.parseFrames = function () {
        var sx, sy, sz;
        var tx, ty, tz;
        var geometry;
        var subGeom;
        var vertLen = this._vertIndices.length;
        var fvertices;
        var tvertices;
        var i /*uint*/, j /*int*/, k /*uint*/;
        //var ch : number /*uint*/;
        var name = "";
        var prevClip = null;
        this._byteData.position = this._offsetFrames;
        for (i = 0; i < this._numFrames; i++) {
            tvertices = new Array();
            fvertices = new Array(vertLen * 3);
            sx = this._byteData.readFloat();
            sy = this._byteData.readFloat();
            sz = this._byteData.readFloat();
            tx = this._byteData.readFloat();
            ty = this._byteData.readFloat();
            tz = this._byteData.readFloat();
            name = this.readFrameName();
            for (j = 0; j < this._numVertices; j++, this._byteData.position++)
                tvertices.push(sx * this._byteData.readUnsignedByte() + tx, sy * this._byteData.readUnsignedByte() + ty, sz * this._byteData.readUnsignedByte() + tz);
            k = 0;
            for (j = 0; j < vertLen; j++) {
                fvertices[k++] = tvertices[this._vertIndices[j] * 3];
                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 2];
                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 1];
            }
            subGeom = new TriangleSubGeometry(true);
            if (this._firstSubGeom == null)
                this._firstSubGeom = subGeom;
            geometry = new Geometry();
            geometry.addSubGeometry(subGeom);
            subGeom.updateIndices(this._indices);
            subGeom.updatePositions(fvertices);
            subGeom.updateUVs(this._finalUV);
            subGeom.vertexNormals;
            subGeom.vertexTangents;
            subGeom.autoDeriveNormals = false;
            subGeom.autoDeriveTangents = false;
            var clip = this._clipNodes[name];
            if (!clip) {
                // If another sequence was parsed before this one, starting
                // a new state means the previous one is complete and can
                // hence be finalized.
                if (prevClip) {
                    this._pFinalizeAsset(prevClip);
                    this._animationSet.addAnimation(prevClip);
                }
                clip = new VertexClipNode();
                clip.name = name;
                clip.stitchFinalFrame = true;
                this._clipNodes[name] = clip;
                prevClip = clip;
            }
            clip.addFrame(geometry, 1000 / MD2Parser.FPS);
        }
        // Finalize the last state
        if (prevClip) {
            this._pFinalizeAsset(prevClip);
            this._animationSet.addAnimation(prevClip);
        }
        // Force this._pFinalizeAsset() to decide name
        this._pFinalizeAsset(this._animationSet);
        this._parsedFrames = true;
    };
    MD2Parser.prototype.readFrameName = function () {
        var name = "";
        var k = 0;
        for (var j = 0; j < 16; j++) {
            var ch = this._byteData.readUnsignedByte();
            if (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)
                name += String.fromCharCode(ch);
            if (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)
                k++;
        }
        return name;
    };
    MD2Parser.FPS = 6;
    return MD2Parser;
})(ParserBase);
module.exports = MD2Parser;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1wYXJzZXJzL2xpYi9NRDJQYXJzZXIudHMiXSwibmFtZXMiOlsiTUQyUGFyc2VyIiwiTUQyUGFyc2VyLmNvbnN0cnVjdG9yIiwiTUQyUGFyc2VyLnN1cHBvcnRzVHlwZSIsIk1EMlBhcnNlci5zdXBwb3J0c0RhdGEiLCJNRDJQYXJzZXIuX2lSZXNvbHZlRGVwZW5kZW5jeSIsIk1EMlBhcnNlci5faVJlc29sdmVEZXBlbmRlbmN5RmFpbHVyZSIsIk1EMlBhcnNlci5fcFByb2NlZWRQYXJzaW5nIiwiTUQyUGFyc2VyLl9wU3RhcnRQYXJzaW5nIiwiTUQyUGFyc2VyLnBhcnNlSGVhZGVyIiwiTUQyUGFyc2VyLnBhcnNlTWF0ZXJpYWxOYW1lcyIsIk1EMlBhcnNlci5wYXJzZVVWIiwiTUQyUGFyc2VyLnBhcnNlRmFjZXMiLCJNRDJQYXJzZXIuYWRkSW5kZXgiLCJNRDJQYXJzZXIuZmluZEluZGV4IiwiTUQyUGFyc2VyLnBhcnNlRnJhbWVzIiwiTUQyUGFyc2VyLnJlYWRGcmFtZU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU8sbUJBQW1CLFdBQWMseUNBQXlDLENBQUMsQ0FBQztBQUNuRixJQUFPLFVBQVUsV0FBZ0IsZ0NBQWdDLENBQUMsQ0FBQztBQUNuRSxJQUFPLFVBQVUsV0FBZ0Isb0NBQW9DLENBQUMsQ0FBQztBQUN2RSxJQUFPLFdBQVcsV0FBZ0IscUNBQXFDLENBQUMsQ0FBQztBQUt6RSxJQUFPLHNCQUFzQixXQUFhLHNEQUFzRCxDQUFDLENBQUM7QUFFbEcsSUFBTyxRQUFRLFdBQWlCLGtDQUFrQyxDQUFDLENBQUM7QUFDcEUsSUFBTyxtQkFBbUIsV0FBYyw2Q0FBNkMsQ0FBQyxDQUFDO0FBRXZGLElBQU8sSUFBSSxXQUFrQixrQ0FBa0MsQ0FBQyxDQUFDO0FBRWpFLElBQU8sY0FBYyxXQUFlLHNEQUFzRCxDQUFDLENBQUM7QUFDNUYsSUFBTyxrQkFBa0IsV0FBYyxvREFBb0QsQ0FBQyxDQUFDO0FBQzdGLElBQU8sc0JBQXNC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QUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN6Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDM0NBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzVDQSxBQUNBQSxzQkFEc0JBO1FBQ3RCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDMUNBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzdDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN2Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDekNBLEFBQ0FBLHNCQURzQkE7UUFDdEJBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3pCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUMzQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDN0NBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzFDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUM1Q0Es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TUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQUNBLElBQUlBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUM1QkEsQ0FBQ0E7SUFFRFQ7O09BRUdBO0lBQ0tBLDJCQUFPQSxHQUFmQTtRQUVDVSxJQUFJQSxDQUFDQSxHQUFtQkEsQ0FBQ0EsQ0FBQ0E7UUFFMUJBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLEtBQUtBLENBQVNBLElBQUlBLENBQUNBLE1BQU1BLEdBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzdDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUN6Q0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBbUJBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ3REQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtZQUM1REEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFDOURBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3ZCQSxDQUFDQTtJQUVEVjs7T0FFR0E7SUFDS0EsOEJBQVVBLEdBQWxCQTtRQUVDVyxJQUFJQSxDQUFDQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxDQUFDQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxDQUFDQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxFQUFFQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxFQUFFQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxFQUFFQSxDQUFRQSxRQUFEQSxBQUFTQSxDQUFDQTtRQUN4SEEsSUFBSUEsQ0FBQ0EsQ0FBUUEsUUFBREEsQUFBU0EsQ0FBQ0E7UUFFdEJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLEtBQUtBLEVBQVVBLENBQUNBO1FBQ3hDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUN0Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsS0FBS0EsRUFBVUEsQ0FBVUE7UUFFN0NBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1FBRTNDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUNwQ0EsQUFDQUEsd0JBRHdCQTtZQUN4QkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUN2Q0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUN2Q0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUV2Q0EsQUFDQUEsb0JBRG9CQTtZQUNwQkEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUN4Q0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUN4Q0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtZQUV4Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3JCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUN0QkEsQ0FBQ0E7UUFFREEsSUFBSUEsR0FBR0EsR0FBbUJBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBO1FBQ2pEQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFTQSxHQUFHQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV6Q0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1lBQzNEQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN4RUEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FB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QVNBLE9BQU9BLEdBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRXpDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUNoQ0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFDaENBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBRWhDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUNoQ0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFDaENBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBRWhDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtZQUk1QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsRUFBRUE7Z0JBQ2hFQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLEdBQUdBLEVBQUVBLEVBQUVBLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGdCQUFnQkEsRUFBRUEsR0FBR0EsRUFBRUEsRUFBRUEsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUVqSkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDTkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsT0FBT0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQzlCQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkRBLFNBQVNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUN2REEsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeERBLENBQUNBO1lBRURBLE9BQU9BLEdBQUdBLElBQUlBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFFeENBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLElBQUlBLElBQUlBLENBQUNBO2dCQUM5QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsT0FBT0EsQ0FBQ0E7WUFFOUJBLFFBQVFBLEdBQUdBLElBQUlBLFFBQVFBLEVBQUVBLENBQUNBO1lBQzFCQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtZQUVqQ0EsT0FBT0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDckNBLE9BQU9BLENBQUNBLGVBQWVBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1lBQ25DQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNqQ0EsT0FBT0EsQ0FBQ0EsYUFBYUEsQ0FBQ0E7WUFDdEJBLE9BQU9BLENBQUNBLGNBQWNBLENBQUNBO1lBQ3ZCQSxPQUFPQSxDQUFDQSxpQkFBaUJBLEdBQUdBLEtBQUtBLENBQUNBO1lBQ2xDQSxPQUFPQSxDQUFDQSxrQkFBa0JBLEdBQUdBLEtBQUtBLENBQUNBO1lBRW5DQSxJQUFJQSxJQUFJQSxHQUFrQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFFaERBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxBQUdBQSwyREFIMkRBO2dCQUMzREEseURBQXlEQTtnQkFDekRBLHNCQUFzQkE7Z0JBQ3RCQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDZEEsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7b0JBQy9CQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxZQUFZQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDM0NBLENBQUNBO2dCQUVEQSxJQUFJQSxHQUFHQSxJQUFJQSxjQUFjQSxFQUFFQSxDQUFDQTtnQkFDNUJBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO2dCQUNqQkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFFN0JBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO2dCQUU3QkEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDakJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLEdBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQzdDQSxDQUFDQTtRQUVEQSxBQUNBQSwwQkFEMEJBO1FBQzFCQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNkQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMvQkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDM0NBLENBQUNBO1FBRURBLEFBQ0FBLDhDQUQ4Q0E7UUFDOUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBRXpDQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7SUFFT2QsaUNBQWFBLEdBQXJCQTtRQUVDZSxJQUFJQSxJQUFJQSxHQUFVQSxFQUFFQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBbUJBLENBQUNBLENBQUNBO1FBQzFCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFtQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDN0NBLElBQUlBLEVBQUVBLEdBQW1CQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLENBQUNBO1lBRTNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDN0RBLElBQUlBLElBQUlBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBRWpDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDcERBLENBQUNBLEVBQUVBLENBQUNBO1FBQ05BLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2JBLENBQUNBO0lBN2RhZixhQUFHQSxHQUFrQkEsQ0FBQ0EsQ0FBQ0E7SUE4ZHRDQSxnQkFBQ0E7QUFBREEsQ0FoZUEsQUFnZUNBLEVBaGV1QixVQUFVLEVBZ2VqQztBQUVELEFBQW1CLGlCQUFWLFNBQVMsQ0FBQyIsImZpbGUiOiJNRDJQYXJzZXIuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcERhdGFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CaXRtYXBEYXRhXCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBVUkxMb2FkZXJEYXRhRm9ybWF0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTExvYWRlckRhdGFGb3JtYXRcIik7XG5pbXBvcnQgVVJMUmVxdWVzdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMUmVxdWVzdFwiKTtcbmltcG9ydCBQYXJzZXJCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUGFyc2VyQmFzZVwiKTtcbmltcG9ydCBQYXJzZXJVdGlsc1x0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wYXJzZXJzL1BhcnNlclV0aWxzXCIpO1xuaW1wb3J0IFJlc291cmNlRGVwZW5kZW5jeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUmVzb3VyY2VEZXBlbmRlbmN5XCIpO1xuaW1wb3J0IFRleHR1cmUyREJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3RleHR1cmVzL1RleHR1cmUyREJhc2VcIik7XG5pbXBvcnQgQnl0ZUFycmF5XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheVwiKTtcblxuaW1wb3J0IERpc3BsYXlPYmplY3RDb250YWluZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvY29udGFpbmVycy9EaXNwbGF5T2JqZWN0Q29udGFpbmVyXCIpO1xuaW1wb3J0IERpc3BsYXlPYmplY3RcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvRGlzcGxheU9iamVjdFwiKTtcbmltcG9ydCBHZW9tZXRyeVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvR2VvbWV0cnlcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5pbXBvcnQgTWVzaFx0XHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvTWVzaFwiKTtcblxuaW1wb3J0IFZlcnRleENsaXBOb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvVmVydGV4Q2xpcE5vZGVcIik7XG5pbXBvcnQgVmVydGV4QW5pbWF0aW9uU2V0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1ZlcnRleEFuaW1hdGlvblNldFwiKTtcbmltcG9ydCBEZWZhdWx0TWF0ZXJpYWxNYW5hZ2VyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hbmFnZXJzL0RlZmF1bHRNYXRlcmlhbE1hbmFnZXJcIik7XG5cbmltcG9ydCBNZXRob2RNYXRlcmlhbFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9NZXRob2RNYXRlcmlhbFwiKTtcbmltcG9ydCBNZXRob2RNYXRlcmlhbE1vZGVcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL01ldGhvZE1hdGVyaWFsTW9kZVwiKTtcblxuLyoqXG4gKiBNRDJQYXJzZXIgcHJvdmlkZXMgYSBwYXJzZXIgZm9yIHRoZSBNRDIgZGF0YSB0eXBlLlxuICovXG5jbGFzcyBNRDJQYXJzZXIgZXh0ZW5kcyBQYXJzZXJCYXNlXG57XG5cdHB1YmxpYyBzdGF0aWMgRlBTOm51bWJlciAvKmludCovID0gNjtcblxuXHRwcml2YXRlIF9jbGlwTm9kZXM6T2JqZWN0ID0gbmV3IE9iamVjdCgpO1xuXHRwcml2YXRlIF9ieXRlRGF0YTpCeXRlQXJyYXk7XG5cdHByaXZhdGUgX3N0YXJ0ZWRQYXJzaW5nOmJvb2xlYW47XG5cdHByaXZhdGUgX3BhcnNlZEhlYWRlcjpib29sZWFuO1xuXHRwcml2YXRlIF9wYXJzZWRVVjpib29sZWFuO1xuXHRwcml2YXRlIF9wYXJzZWRGYWNlczpib29sZWFuO1xuXHRwcml2YXRlIF9wYXJzZWRGcmFtZXM6Ym9vbGVhbjtcblxuXHRwcml2YXRlIF9pZGVudDpudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX3ZlcnNpb246bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9za2luV2lkdGg6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9za2luSGVpZ2h0Om51bWJlciAvKnVpbnQqLztcblx0Ly9wcml2YXRlIF9mcmFtZVNpemUgOiBudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX251bVNraW5zOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfbnVtVmVydGljZXM6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9udW1TVDpudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX251bVRyaXM6bnVtYmVyIC8qdWludCovO1xuXHQvL3ByaXZhdGUgX251bUdsQ21kcyA6IG51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfbnVtRnJhbWVzOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfb2Zmc2V0U2tpbnM6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9vZmZzZXRTVDpudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX29mZnNldFRyaXM6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9vZmZzZXRGcmFtZXM6bnVtYmVyIC8qdWludCovO1xuXHQvL3ByaXZhdGUgX29mZnNldEdsQ21kcyA6IG51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfb2Zmc2V0RW5kOm51bWJlciAvKnVpbnQqLztcblxuXHRwcml2YXRlIF91dkluZGljZXM6QXJyYXk8bnVtYmVyPjtcblx0cHJpdmF0ZSBfaW5kaWNlczpBcnJheTxudW1iZXI+IC8qdWludCovO1xuXHRwcml2YXRlIF92ZXJ0SW5kaWNlczpBcnJheTxudW1iZXI+O1xuXG5cdC8vIHRoZSBjdXJyZW50IHN1Ymdlb20gYmVpbmcgYnVpbHRcblx0cHJpdmF0ZSBfYW5pbWF0aW9uU2V0OlZlcnRleEFuaW1hdGlvblNldCA9IG5ldyBWZXJ0ZXhBbmltYXRpb25TZXQoKTtcblx0cHJpdmF0ZSBfZmlyc3RTdWJHZW9tOlRyaWFuZ2xlU3ViR2VvbWV0cnk7XG5cdHByaXZhdGUgX3V2czpBcnJheTxudW1iZXI+O1xuXHRwcml2YXRlIF9maW5hbFVWOkFycmF5PG51bWJlcj47XG5cblx0cHJpdmF0ZSBfbWF0ZXJpYWxOYW1lczpBcnJheTxzdHJpbmc+O1xuXHRwcml2YXRlIF90ZXh0dXJlVHlwZTpzdHJpbmc7XG5cdHByaXZhdGUgX2lnbm9yZVRleHR1cmVQYXRoOmJvb2xlYW47XG5cdHByaXZhdGUgX21lc2g6TWVzaDtcblx0cHJpdmF0ZSBfZ2VvbWV0cnk6R2VvbWV0cnk7XG5cblx0cHJpdmF0ZSBtYXRlcmlhbEZpbmFsOmJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBnZW9DcmVhdGVkOmJvb2xlYW4gPSBmYWxzZTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBNRDJQYXJzZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0gdGV4dHVyZVR5cGUgVGhlIGV4dGVuc2lvbiBvZiB0aGUgdGV4dHVyZSAoZS5nLiBqcGcvcG5nLy4uLilcblx0ICogQHBhcmFtIGlnbm9yZVRleHR1cmVQYXRoIElmIHRydWUsIHRoZSBwYXRoIG9mIHRoZSB0ZXh0dXJlIGlzIGlnbm9yZWRcblx0ICovXG5cdGNvbnN0cnVjdG9yKHRleHR1cmVUeXBlOnN0cmluZyA9IFwianBnXCIsIGlnbm9yZVRleHR1cmVQYXRoOmJvb2xlYW4gPSB0cnVlKVxuXHR7XG5cdFx0c3VwZXIoVVJMTG9hZGVyRGF0YUZvcm1hdC5BUlJBWV9CVUZGRVIpO1xuXHRcdHRoaXMuX3RleHR1cmVUeXBlID0gdGV4dHVyZVR5cGU7XG5cdFx0dGhpcy5faWdub3JlVGV4dHVyZVBhdGggPSBpZ25vcmVUZXh0dXJlUGF0aDtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgYSBnaXZlbiBmaWxlIGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQgYnkgdGhlIHBhcnNlci5cblx0ICogQHBhcmFtIGV4dGVuc2lvbiBUaGUgZmlsZSBleHRlbnNpb24gb2YgYSBwb3RlbnRpYWwgZmlsZSB0byBiZSBwYXJzZWQuXG5cdCAqIEByZXR1cm4gV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGZpbGUgdHlwZSBpcyBzdXBwb3J0ZWQuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHN1cHBvcnRzVHlwZShleHRlbnNpb246c3RyaW5nKTpib29sZWFuXG5cdHtcblx0XHRleHRlbnNpb24gPSBleHRlbnNpb24udG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gZXh0ZW5zaW9uID09IFwibWQyXCI7XG5cdH1cblxuXHQvKipcblx0ICogVGVzdHMgd2hldGhlciBhIGRhdGEgYmxvY2sgY2FuIGJlIHBhcnNlZCBieSB0aGUgcGFyc2VyLlxuXHQgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSBibG9jayB0byBwb3RlbnRpYWxseSBiZSBwYXJzZWQuXG5cdCAqIEByZXR1cm4gV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGRhdGEgaXMgc3VwcG9ydGVkLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBzdXBwb3J0c0RhdGEoZGF0YTphbnkpOmJvb2xlYW5cblx0e1xuXHRcdHJldHVybiAoUGFyc2VyVXRpbHMudG9TdHJpbmcoZGF0YSwgNCkgPT0gJ0lEUDInKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pUmVzb2x2ZURlcGVuZGVuY3kocmVzb3VyY2VEZXBlbmRlbmN5OlJlc291cmNlRGVwZW5kZW5jeSlcblx0e1xuXHRcdGlmIChyZXNvdXJjZURlcGVuZGVuY3kuYXNzZXRzLmxlbmd0aCAhPSAxKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dmFyIGFzc2V0OlRleHR1cmUyREJhc2UgPSA8VGV4dHVyZTJEQmFzZT4gcmVzb3VyY2VEZXBlbmRlbmN5LmFzc2V0c1swXTtcblxuXHRcdGlmIChhc3NldCkge1xuXHRcdFx0dmFyIG1hdGVyaWFsOk1ldGhvZE1hdGVyaWFsID0gbmV3IE1ldGhvZE1hdGVyaWFsKGFzc2V0KTtcblxuXHRcdFx0aWYgKHRoaXMubWF0ZXJpYWxNb2RlID49IDIpXG5cdFx0XHRcdG1hdGVyaWFsLm1vZGUgPSBNZXRob2RNYXRlcmlhbE1vZGUuTVVMVElfUEFTUztcblxuXHRcdFx0Ly9hZGQgdG8gdGhlIGNvbnRlbnQgcHJvcGVydHlcblx0XHRcdCg8RGlzcGxheU9iamVjdENvbnRhaW5lcj4gdGhpcy5fcENvbnRlbnQpLmFkZENoaWxkKHRoaXMuX21lc2gpO1xuXG5cdFx0XHRtYXRlcmlhbC5uYW1lID0gdGhpcy5fbWVzaC5tYXRlcmlhbC5uYW1lO1xuXHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXHRcdFx0dGhpcy5fcEZpbmFsaXplQXNzZXQobWF0ZXJpYWwpO1xuXHRcdFx0dGhpcy5fcEZpbmFsaXplQXNzZXQodGhpcy5fbWVzaC5nZW9tZXRyeSk7XG5cdFx0XHR0aGlzLl9wRmluYWxpemVBc3NldCh0aGlzLl9tZXNoKTtcblx0XHR9XG5cdFx0dGhpcy5tYXRlcmlhbEZpbmFsID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pUmVzb2x2ZURlcGVuZGVuY3lGYWlsdXJlKHJlc291cmNlRGVwZW5kZW5jeTpSZXNvdXJjZURlcGVuZGVuY3kpXG5cdHtcblx0XHQvLyBhcHBseSBzeXN0ZW0gZGVmYXVsdFxuXHRcdGlmICh0aGlzLm1hdGVyaWFsTW9kZSA8IDIpIHtcblx0XHRcdHRoaXMuX21lc2gubWF0ZXJpYWwgPSBEZWZhdWx0TWF0ZXJpYWxNYW5hZ2VyLmdldERlZmF1bHRNYXRlcmlhbCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9tZXNoLm1hdGVyaWFsID0gbmV3IE1ldGhvZE1hdGVyaWFsKERlZmF1bHRNYXRlcmlhbE1hbmFnZXIuZ2V0RGVmYXVsdFRleHR1cmUoKSk7XG5cdFx0XHQoPE1ldGhvZE1hdGVyaWFsPiB0aGlzLl9tZXNoLm1hdGVyaWFsKS5tb2RlID0gTWV0aG9kTWF0ZXJpYWxNb2RlLk1VTFRJX1BBU1M7XG5cdFx0fVxuXG5cdFx0Ly9hZGQgdG8gdGhlIGNvbnRlbnQgcHJvcGVydHlcblx0XHQoPERpc3BsYXlPYmplY3RDb250YWluZXI+IHRoaXMuX3BDb250ZW50KS5hZGRDaGlsZCh0aGlzLl9tZXNoKTtcblxuXHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2guZ2VvbWV0cnkpO1xuXHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2gpO1xuXHRcdHRoaXMubWF0ZXJpYWxGaW5hbCA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wUHJvY2VlZFBhcnNpbmcoKTpib29sZWFuXG5cdHtcblx0XHRpZiAoIXRoaXMuX3N0YXJ0ZWRQYXJzaW5nKSB7XG5cdFx0XHR0aGlzLl9ieXRlRGF0YSA9IHRoaXMuX3BHZXRCeXRlRGF0YSgpO1xuXHRcdFx0dGhpcy5fc3RhcnRlZFBhcnNpbmcgPSB0cnVlO1xuXG5cdFx0XHQvLyBSZXNldCBieXRlYXJyYXkgcmVhZCBwb3NpdGlvbiAod2hpY2ggbWF5IGhhdmUgYmVlblxuXHRcdFx0Ly8gbW92ZWQgZm9yd2FyZCBieSB0aGUgc3VwcG9ydHNEYXRhKCkgZnVuY3Rpb24uKVxuXHRcdFx0dGhpcy5fYnl0ZURhdGEucG9zaXRpb24gPSAwO1xuXHRcdH1cblxuXHRcdHdoaWxlICh0aGlzLl9wSGFzVGltZSgpKSB7XG5cdFx0XHRpZiAoIXRoaXMuX3BhcnNlZEhlYWRlcikge1xuXHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0Ly8gTElUVExFX0VORElBTiAtIERlZmF1bHQgZm9yIEFycmF5QnVmZmVyIC8gTm90IGltcGxlbWVudGVkIGluIEJ5dGVBcnJheVxuXHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0Ly90aGlzLl9ieXRlRGF0YS5lbmRpYW4gPSBFbmRpYW4uTElUVExFX0VORElBTjtcblxuXHRcdFx0XHQvLyBUT0RPOiBDcmVhdGUgYSBtZXNoIG9ubHkgd2hlbiBlbmNvdW50ZXJlZCAoaWYgaXQgbWFrZXMgc2Vuc2Vcblx0XHRcdFx0Ly8gZm9yIHRoaXMgZmlsZSBmb3JtYXQpIGFuZCByZXR1cm4gaXQgdXNpbmcgdGhpcy5fcEZpbmFsaXplQXNzZXQoKVxuXHRcdFx0XHR0aGlzLl9nZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXHRcdFx0XHR0aGlzLl9tZXNoID0gbmV3IE1lc2godGhpcy5fZ2VvbWV0cnksIG51bGwpO1xuXHRcdFx0XHRpZiAodGhpcy5tYXRlcmlhbE1vZGUgPCAyKSB7XG5cdFx0XHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IERlZmF1bHRNYXRlcmlhbE1hbmFnZXIuZ2V0RGVmYXVsdE1hdGVyaWFsKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IG5ldyBNZXRob2RNYXRlcmlhbChEZWZhdWx0TWF0ZXJpYWxNYW5hZ2VyLmdldERlZmF1bHRUZXh0dXJlKCkpO1xuXHRcdFx0XHRcdCg8TWV0aG9kTWF0ZXJpYWw+IHRoaXMuX21lc2gubWF0ZXJpYWwpLm1vZGUgPSBNZXRob2RNYXRlcmlhbE1vZGUuTVVMVElfUEFTUztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vX2dlb21ldHJ5LmFuaW1hdGlvbiA9IG5ldyBWZXJ0ZXhBbmltYXRpb24oMiwgVmVydGV4QW5pbWF0aW9uTW9kZS5BQlNPTFVURSk7XG5cdFx0XHRcdC8vX2FuaW1hdG9yID0gbmV3IFZlcnRleEFuaW1hdG9yKFZlcnRleEFuaW1hdGlvblN0YXRlKF9tZXNoLmFuaW1hdGlvblN0YXRlKSk7XG5cblx0XHRcdFx0Ly8gUGFyc2UgaGVhZGVyIGFuZCBkZWNvbXByZXNzIGJvZHlcblx0XHRcdFx0dGhpcy5wYXJzZUhlYWRlcigpO1xuXHRcdFx0XHR0aGlzLnBhcnNlTWF0ZXJpYWxOYW1lcygpO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5fcGFyc2VkVVYpIHtcblx0XHRcdFx0dGhpcy5wYXJzZVVWKCk7XG5cdFx0XHR9IGVsc2UgaWYgKCF0aGlzLl9wYXJzZWRGYWNlcykge1xuXHRcdFx0XHR0aGlzLnBhcnNlRmFjZXMoKTtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX3BhcnNlZEZyYW1lcykge1xuXHRcdFx0XHR0aGlzLnBhcnNlRnJhbWVzKCk7XG5cdFx0XHR9IGVsc2UgaWYgKCh0aGlzLmdlb0NyZWF0ZWQpICYmICh0aGlzLm1hdGVyaWFsRmluYWwpKSB7XG5cdFx0XHRcdHJldHVybiBQYXJzZXJCYXNlLlBBUlNJTkdfRE9ORTtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuZ2VvQ3JlYXRlZCkge1xuXHRcdFx0XHR0aGlzLmdlb0NyZWF0ZWQgPSB0cnVlO1xuXHRcdFx0XHQvL2NyZWF0ZSBkZWZhdWx0IHN1Ymdlb21ldHJ5XG5cdFx0XHRcdHRoaXMuX2dlb21ldHJ5LmFkZFN1Ykdlb21ldHJ5KHRoaXMuX2ZpcnN0U3ViR2VvbS5jbG9uZSgpKTtcblx0XHRcdFx0Ly8gRm9yY2UgbmFtZSB0byBiZSBjaG9zZW4gYnkgdGhpcy5fcEZpbmFsaXplQXNzZXQoKVxuXHRcdFx0XHR0aGlzLl9tZXNoLm5hbWUgPSBcIlwiO1xuXHRcdFx0XHRpZiAodGhpcy5tYXRlcmlhbEZpbmFsKSB7XG5cdFx0XHRcdFx0Ly9hZGQgdG8gdGhlIGNvbnRlbnQgcHJvcGVydHlcblx0XHRcdFx0XHQoPERpc3BsYXlPYmplY3RDb250YWluZXI+IHRoaXMuX3BDb250ZW50KS5hZGRDaGlsZCh0aGlzLl9tZXNoKTtcblxuXHRcdFx0XHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2guZ2VvbWV0cnkpO1xuXHRcdFx0XHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2gpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fcFBhdXNlQW5kUmV0cmlldmVEZXBlbmRlbmNpZXMoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gUGFyc2VyQmFzZS5NT1JFX1RPX1BBUlNFO1xuXHR9XG5cblx0cHVibGljIF9wU3RhcnRQYXJzaW5nKGZyYW1lTGltaXQ6bnVtYmVyKVxuXHR7XG5cdFx0c3VwZXIuX3BTdGFydFBhcnNpbmcoZnJhbWVMaW1pdCk7XG5cblx0XHQvL2NyZWF0ZSBhIGNvbnRlbnQgb2JqZWN0IGZvciBMb2FkZXJzXG5cdFx0dGhpcy5fcENvbnRlbnQgPSBuZXcgRGlzcGxheU9iamVjdENvbnRhaW5lcigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlYWRzIGluIGFsbCB0aGF0IE1EMiBIZWFkZXIgZGF0YSB0aGF0IGlzIGRlY2xhcmVkIGFzIHByaXZhdGUgdmFyaWFibGVzLlxuXHQgKiBJIGtub3cgaXRzIGEgbG90LCBhbmQgaXQgbG9va3MgdWdseSwgYnV0IG9ubHkgd2F5IHRvIGRvIGl0IGluIEZsYXNoXG5cdCAqL1xuXHRwcml2YXRlIHBhcnNlSGVhZGVyKClcblx0e1xuXHRcdHRoaXMuX2lkZW50ID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX3ZlcnNpb24gPSB0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fc2tpbldpZHRoID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX3NraW5IZWlnaHQgPSB0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0Ly9za2lwIHRoaXMuX2ZyYW1lU2l6ZVxuXHRcdHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9udW1Ta2lucyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9udW1WZXJ0aWNlcyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9udW1TVCA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9udW1UcmlzID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdC8vc2tpcCB0aGlzLl9udW1HbENtZHNcblx0XHR0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fbnVtRnJhbWVzID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX29mZnNldFNraW5zID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX29mZnNldFNUID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX29mZnNldFRyaXMgPSB0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fb2Zmc2V0RnJhbWVzID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdC8vc2tpcCB0aGlzLl9vZmZzZXRHbENtZHNcblx0XHR0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fb2Zmc2V0RW5kID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXG5cdFx0dGhpcy5fcGFyc2VkSGVhZGVyID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIGZpbGUgbmFtZXMgZm9yIHRoZSBtYXRlcmlhbHMuXG5cdCAqL1xuXHRwcml2YXRlIHBhcnNlTWF0ZXJpYWxOYW1lcygpXG5cdHtcblx0XHR2YXIgdXJsOnN0cmluZztcblx0XHR2YXIgbmFtZTpzdHJpbmc7XG5cdFx0dmFyIGV4dEluZGV4Om51bWJlciAvKmludCovO1xuXHRcdHZhciBzbGFzaEluZGV4Om51bWJlciAvKmludCovO1xuXHRcdHRoaXMuX21hdGVyaWFsTmFtZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXHRcdHRoaXMuX2J5dGVEYXRhLnBvc2l0aW9uID0gdGhpcy5fb2Zmc2V0U2tpbnM7XG5cblx0XHR2YXIgcmVnRXhwOlJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXmEtekEtWjAtOVxcXFxfXFwvLl1cIiwgXCJnXCIpO1xuXHRcdGZvciAodmFyIGk6bnVtYmVyIC8qdWludCovID0gMDsgaSA8IHRoaXMuX251bVNraW5zOyArK2kpIHtcblx0XHRcdG5hbWUgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVVRGQnl0ZXMoNjQpO1xuXHRcdFx0bmFtZSA9IG5hbWUucmVwbGFjZShyZWdFeHAsIFwiXCIpO1xuXHRcdFx0ZXh0SW5kZXggPSBuYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtcblx0XHRcdGlmICh0aGlzLl9pZ25vcmVUZXh0dXJlUGF0aClcblx0XHRcdFx0c2xhc2hJbmRleCA9IG5hbWUubGFzdEluZGV4T2YoXCIvXCIpO1xuXHRcdFx0aWYgKG5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiLmpwZ1wiKSA9PSAtMSAmJiBuYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIi5wbmdcIikgPT0gLTEpIHtcblx0XHRcdFx0bmFtZSA9IG5hbWUuc3Vic3RyaW5nKHNsYXNoSW5kZXggKyAxLCBleHRJbmRleCk7XG5cdFx0XHRcdHVybCA9IG5hbWUgKyBcIi5cIiArIHRoaXMuX3RleHR1cmVUeXBlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dXJsID0gbmFtZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbWF0ZXJpYWxOYW1lc1tpXSA9IG5hbWU7XG5cblx0XHRcdC8vIG9ubHkgc3VwcG9ydCAxIHNraW4gVE9ETzogcmVhbGx5P1xuXHRcdFx0aWYgKHRoaXMuZGVwZW5kZW5jaWVzLmxlbmd0aCA9PSAwKVxuXHRcdFx0XHR0aGlzLl9wQWRkRGVwZW5kZW5jeShuYW1lLCBuZXcgVVJMUmVxdWVzdCh1cmwpKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fbWF0ZXJpYWxOYW1lcy5sZW5ndGggPiAwKVxuXHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbC5uYW1lID0gdGhpcy5fbWF0ZXJpYWxOYW1lc1swXTsgZWxzZVxuXHRcdFx0dGhpcy5tYXRlcmlhbEZpbmFsID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIHV2IGRhdGEgZm9yIHRoZSBtZXNoLlxuXHQgKi9cblx0cHJpdmF0ZSBwYXJzZVVWKClcblx0e1xuXHRcdHZhciBqOm51bWJlciAvKnVpbnQqLyA9IDA7XG5cblx0XHR0aGlzLl91dnMgPSBuZXcgQXJyYXk8bnVtYmVyPih0aGlzLl9udW1TVCoyKTtcblx0XHR0aGlzLl9ieXRlRGF0YS5wb3NpdGlvbiA9IHRoaXMuX29mZnNldFNUO1xuXHRcdGZvciAodmFyIGk6bnVtYmVyIC8qdWludCovID0gMDsgaSA8IHRoaXMuX251bVNUOyBpKyspIHtcblx0XHRcdHRoaXMuX3V2c1tqKytdID0gdGhpcy5fYnl0ZURhdGEucmVhZFNob3J0KCkvdGhpcy5fc2tpbldpZHRoO1xuXHRcdFx0dGhpcy5fdXZzW2orK10gPSB0aGlzLl9ieXRlRGF0YS5yZWFkU2hvcnQoKS90aGlzLl9za2luSGVpZ2h0O1xuXHRcdH1cblxuXHRcdHRoaXMuX3BhcnNlZFVWID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdW5pcXVlIGluZGljZXMgZm9yIHRoZSBmYWNlcy5cblx0ICovXG5cdHByaXZhdGUgcGFyc2VGYWNlcygpXG5cdHtcblx0XHR2YXIgYTpudW1iZXIgLyp1aW50Ki8sIGI6bnVtYmVyIC8qdWludCovLCBjOm51bWJlciAvKnVpbnQqLywgdGE6bnVtYmVyIC8qdWludCovLCB0YjpudW1iZXIgLyp1aW50Ki8sIHRjOm51bWJlciAvKnVpbnQqLztcblx0XHR2YXIgaTpudW1iZXIgLyp1aW50Ki87XG5cblx0XHR0aGlzLl92ZXJ0SW5kaWNlcyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cdFx0dGhpcy5fdXZJbmRpY2VzID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblx0XHR0aGlzLl9pbmRpY2VzID0gbmV3IEFycmF5PG51bWJlcj4oKSAvKnVpbnQqLztcblxuXHRcdHRoaXMuX2J5dGVEYXRhLnBvc2l0aW9uID0gdGhpcy5fb2Zmc2V0VHJpcztcblxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLl9udW1UcmlzOyBpKyspIHtcblx0XHRcdC8vY29sbGVjdCB2ZXJ0ZXggaW5kaWNlc1xuXHRcdFx0YSA9IHRoaXMuX2J5dGVEYXRhLnJlYWRVbnNpZ25lZFNob3J0KCk7XG5cdFx0XHRiID0gdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkU2hvcnQoKTtcblx0XHRcdGMgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRTaG9ydCgpO1xuXG5cdFx0XHQvL2NvbGxlY3QgdXYgaW5kaWNlc1xuXHRcdFx0dGEgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRTaG9ydCgpO1xuXHRcdFx0dGIgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRTaG9ydCgpO1xuXHRcdFx0dGMgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRTaG9ydCgpO1xuXG5cdFx0XHR0aGlzLmFkZEluZGV4KGEsIHRhKTtcblx0XHRcdHRoaXMuYWRkSW5kZXgoYiwgdGIpO1xuXHRcdFx0dGhpcy5hZGRJbmRleChjLCB0Yyk7XG5cdFx0fVxuXG5cdFx0dmFyIGxlbjpudW1iZXIgLyp1aW50Ki8gPSB0aGlzLl91dkluZGljZXMubGVuZ3RoO1xuXHRcdHRoaXMuX2ZpbmFsVVYgPSBuZXcgQXJyYXk8bnVtYmVyPihsZW4qMik7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdHRoaXMuX2ZpbmFsVVZbaSA8PCAxXSA9IHRoaXMuX3V2c1t0aGlzLl91dkluZGljZXNbaV0gPDwgMV07XG5cdFx0XHR0aGlzLl9maW5hbFVWWyhpIDw8IDEpICsgMV0gPSB0aGlzLl91dnNbKHRoaXMuX3V2SW5kaWNlc1tpXSA8PCAxKSArIDFdO1xuXHRcdH1cblxuXHRcdHRoaXMuX3BhcnNlZEZhY2VzID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgZmFjZSBpbmRleCB0byB0aGUgbGlzdCBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldCwgYmFzZWQgb24gdmVydGV4SW5kZXggYW5kIHV2SW5kZXgsIGFuZCBhZGRzIHRoZVxuXHQgKiBjb3JyZXNwb25kaW5nIHZlcnRleCBhbmQgdXYgZGF0YSBpbiB0aGUgY29ycmVjdCBsb2NhdGlvbi5cblx0ICogQHBhcmFtIHZlcnRleEluZGV4IFRoZSBvcmlnaW5hbCBpbmRleCBpbiB0aGUgdmVydGV4IGxpc3QuXG5cdCAqIEBwYXJhbSB1dkluZGV4IFRoZSBvcmlnaW5hbCBpbmRleCBpbiB0aGUgdXYgbGlzdC5cblx0ICovXG5cdHByaXZhdGUgYWRkSW5kZXgodmVydGV4SW5kZXg6bnVtYmVyIC8qdWludCovLCB1dkluZGV4Om51bWJlciAvKnVpbnQqLylcblx0e1xuXHRcdHZhciBpbmRleDpudW1iZXIgLyppbnQqLyA9IHRoaXMuZmluZEluZGV4KHZlcnRleEluZGV4LCB1dkluZGV4KTtcblxuXHRcdGlmIChpbmRleCA9PSAtMSkge1xuXHRcdFx0dGhpcy5faW5kaWNlcy5wdXNoKHRoaXMuX3ZlcnRJbmRpY2VzLmxlbmd0aCk7XG5cdFx0XHR0aGlzLl92ZXJ0SW5kaWNlcy5wdXNoKHZlcnRleEluZGV4KTtcblx0XHRcdHRoaXMuX3V2SW5kaWNlcy5wdXNoKHV2SW5kZXgpO1xuXHRcdH0gZWxzZVxuXHRcdFx0dGhpcy5faW5kaWNlcy5wdXNoKGluZGV4KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGaW5kcyB0aGUgZmluYWwgaW5kZXggY29ycmVzcG9uZGluZyB0byB0aGUgb3JpZ2luYWwgTUQyJ3MgdmVydGV4IGFuZCB1diBpbmRpY2VzLiBSZXR1cm5zIC0xIGlmIGl0IHdhc24ndCBhZGRlZCB5ZXQuXG5cdCAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCBUaGUgb3JpZ2luYWwgaW5kZXggaW4gdGhlIHZlcnRleCBsaXN0LlxuXHQgKiBAcGFyYW0gdXZJbmRleCBUaGUgb3JpZ2luYWwgaW5kZXggaW4gdGhlIHV2IGxpc3QuXG5cdCAqIEByZXR1cm4gVGhlIGluZGV4IG9mIHRoZSBmaW5hbCBtZXNoIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG9yaWdpbmFsIHZlcnRleCBhbmQgdXYgaW5kZXguIC0xIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0LlxuXHQgKi9cblx0cHJpdmF0ZSBmaW5kSW5kZXgodmVydGV4SW5kZXg6bnVtYmVyIC8qdWludCovLCB1dkluZGV4Om51bWJlciAvKnVpbnQqLyk6bnVtYmVyIC8qaW50Ki9cblx0e1xuXHRcdHZhciBsZW46bnVtYmVyIC8qdWludCovID0gdGhpcy5fdmVydEluZGljZXMubGVuZ3RoO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdGlmICh0aGlzLl92ZXJ0SW5kaWNlc1tpXSA9PSB2ZXJ0ZXhJbmRleCAmJiB0aGlzLl91dkluZGljZXNbaV0gPT0gdXZJbmRleClcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyBhbGwgdGhlIGZyYW1lIGdlb21ldHJpZXMuXG5cdCAqL1xuXHRwcml2YXRlIHBhcnNlRnJhbWVzKClcblx0e1xuXHRcdHZhciBzeDpudW1iZXIsIHN5Om51bWJlciwgc3o6bnVtYmVyO1xuXHRcdHZhciB0eDpudW1iZXIsIHR5Om51bWJlciwgdHo6bnVtYmVyO1xuXHRcdHZhciBnZW9tZXRyeTpHZW9tZXRyeTtcblx0XHR2YXIgc3ViR2VvbTpUcmlhbmdsZVN1Ykdlb21ldHJ5O1xuXHRcdHZhciB2ZXJ0TGVuOm51bWJlciAvKnVpbnQqLyA9IHRoaXMuX3ZlcnRJbmRpY2VzLmxlbmd0aDtcblx0XHR2YXIgZnZlcnRpY2VzOkFycmF5PG51bWJlcj47XG5cdFx0dmFyIHR2ZXJ0aWNlczpBcnJheTxudW1iZXI+O1xuXHRcdHZhciBpOm51bWJlciAvKnVpbnQqLywgajpudW1iZXIgLyppbnQqLywgazpudW1iZXIgLyp1aW50Ki87XG5cdFx0Ly92YXIgY2ggOiBudW1iZXIgLyp1aW50Ki87XG5cdFx0dmFyIG5hbWU6c3RyaW5nID0gXCJcIjtcblx0XHR2YXIgcHJldkNsaXA6VmVydGV4Q2xpcE5vZGUgPSBudWxsO1xuXG5cdFx0dGhpcy5fYnl0ZURhdGEucG9zaXRpb24gPSB0aGlzLl9vZmZzZXRGcmFtZXM7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpcy5fbnVtRnJhbWVzOyBpKyspIHtcblxuXHRcdFx0dHZlcnRpY2VzID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblx0XHRcdGZ2ZXJ0aWNlcyA9IG5ldyBBcnJheTxudW1iZXI+KHZlcnRMZW4qMyk7XG5cblx0XHRcdHN4ID0gdGhpcy5fYnl0ZURhdGEucmVhZEZsb2F0KCk7XG5cdFx0XHRzeSA9IHRoaXMuX2J5dGVEYXRhLnJlYWRGbG9hdCgpO1xuXHRcdFx0c3ogPSB0aGlzLl9ieXRlRGF0YS5yZWFkRmxvYXQoKTtcblxuXHRcdFx0dHggPSB0aGlzLl9ieXRlRGF0YS5yZWFkRmxvYXQoKTtcblx0XHRcdHR5ID0gdGhpcy5fYnl0ZURhdGEucmVhZEZsb2F0KCk7XG5cdFx0XHR0eiA9IHRoaXMuX2J5dGVEYXRhLnJlYWRGbG9hdCgpO1xuXG5cdFx0XHRuYW1lID0gdGhpcy5yZWFkRnJhbWVOYW1lKCk7XG5cblx0XHRcdC8vIE5vdGUsIHRoZSBleHRyYSBkYXRhLnBvc2l0aW9uKysgaW4gdGhlIGZvciBsb29wIGlzIHRoZXJlXG5cdFx0XHQvLyB0byBza2lwIG92ZXIgYSBieXRlIHRoYXQgaG9sZHMgdGhlIFwidmVydGV4IG5vcm1hbCBpbmRleFwiXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgdGhpcy5fbnVtVmVydGljZXM7IGorKywgdGhpcy5fYnl0ZURhdGEucG9zaXRpb24rKylcblx0XHRcdFx0dHZlcnRpY2VzLnB1c2goc3gqdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkQnl0ZSgpICsgdHgsIHN5KnRoaXMuX2J5dGVEYXRhLnJlYWRVbnNpZ25lZEJ5dGUoKSArIHR5LCBzeip0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRCeXRlKCkgKyB0eik7XG5cblx0XHRcdGsgPSAwO1xuXHRcdFx0Zm9yIChqID0gMDsgaiA8IHZlcnRMZW47IGorKykge1xuXHRcdFx0XHRmdmVydGljZXNbaysrXSA9IHR2ZXJ0aWNlc1t0aGlzLl92ZXJ0SW5kaWNlc1tqXSozXTtcblx0XHRcdFx0ZnZlcnRpY2VzW2srK10gPSB0dmVydGljZXNbdGhpcy5fdmVydEluZGljZXNbal0qMyArIDJdO1xuXHRcdFx0XHRmdmVydGljZXNbaysrXSA9IHR2ZXJ0aWNlc1t0aGlzLl92ZXJ0SW5kaWNlc1tqXSozICsgMV07XG5cdFx0XHR9XG5cblx0XHRcdHN1Ykdlb20gPSBuZXcgVHJpYW5nbGVTdWJHZW9tZXRyeSh0cnVlKTtcblxuXHRcdFx0aWYgKHRoaXMuX2ZpcnN0U3ViR2VvbSA9PSBudWxsKVxuXHRcdFx0XHR0aGlzLl9maXJzdFN1Ykdlb20gPSBzdWJHZW9tO1xuXG5cdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXHRcdFx0Z2VvbWV0cnkuYWRkU3ViR2VvbWV0cnkoc3ViR2VvbSk7XG5cblx0XHRcdHN1Ykdlb20udXBkYXRlSW5kaWNlcyh0aGlzLl9pbmRpY2VzKTtcblx0XHRcdHN1Ykdlb20udXBkYXRlUG9zaXRpb25zKGZ2ZXJ0aWNlcyk7XG5cdFx0XHRzdWJHZW9tLnVwZGF0ZVVWcyh0aGlzLl9maW5hbFVWKTtcblx0XHRcdHN1Ykdlb20udmVydGV4Tm9ybWFscztcblx0XHRcdHN1Ykdlb20udmVydGV4VGFuZ2VudHM7XG5cdFx0XHRzdWJHZW9tLmF1dG9EZXJpdmVOb3JtYWxzID0gZmFsc2U7XG5cdFx0XHRzdWJHZW9tLmF1dG9EZXJpdmVUYW5nZW50cyA9IGZhbHNlO1xuXG5cdFx0XHR2YXIgY2xpcDpWZXJ0ZXhDbGlwTm9kZSA9IHRoaXMuX2NsaXBOb2Rlc1tuYW1lXTtcblxuXHRcdFx0aWYgKCFjbGlwKSB7XG5cdFx0XHRcdC8vIElmIGFub3RoZXIgc2VxdWVuY2Ugd2FzIHBhcnNlZCBiZWZvcmUgdGhpcyBvbmUsIHN0YXJ0aW5nXG5cdFx0XHRcdC8vIGEgbmV3IHN0YXRlIG1lYW5zIHRoZSBwcmV2aW91cyBvbmUgaXMgY29tcGxldGUgYW5kIGNhblxuXHRcdFx0XHQvLyBoZW5jZSBiZSBmaW5hbGl6ZWQuXG5cdFx0XHRcdGlmIChwcmV2Q2xpcCkge1xuXHRcdFx0XHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHByZXZDbGlwKTtcblx0XHRcdFx0XHR0aGlzLl9hbmltYXRpb25TZXQuYWRkQW5pbWF0aW9uKHByZXZDbGlwKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNsaXAgPSBuZXcgVmVydGV4Q2xpcE5vZGUoKTtcblx0XHRcdFx0Y2xpcC5uYW1lID0gbmFtZTtcblx0XHRcdFx0Y2xpcC5zdGl0Y2hGaW5hbEZyYW1lID0gdHJ1ZTtcblxuXHRcdFx0XHR0aGlzLl9jbGlwTm9kZXNbbmFtZV0gPSBjbGlwO1xuXG5cdFx0XHRcdHByZXZDbGlwID0gY2xpcDtcblx0XHRcdH1cblx0XHRcdGNsaXAuYWRkRnJhbWUoZ2VvbWV0cnksIDEwMDAvTUQyUGFyc2VyLkZQUyk7XG5cdFx0fVxuXG5cdFx0Ly8gRmluYWxpemUgdGhlIGxhc3Qgc3RhdGVcblx0XHRpZiAocHJldkNsaXApIHtcblx0XHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHByZXZDbGlwKTtcblx0XHRcdHRoaXMuX2FuaW1hdGlvblNldC5hZGRBbmltYXRpb24ocHJldkNsaXApO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIHRoaXMuX3BGaW5hbGl6ZUFzc2V0KCkgdG8gZGVjaWRlIG5hbWVcblx0XHR0aGlzLl9wRmluYWxpemVBc3NldCh0aGlzLl9hbmltYXRpb25TZXQpO1xuXG5cdFx0dGhpcy5fcGFyc2VkRnJhbWVzID0gdHJ1ZTtcblx0fVxuXG5cdHByaXZhdGUgcmVhZEZyYW1lTmFtZSgpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIG5hbWU6c3RyaW5nID0gXCJcIjtcblx0XHR2YXIgazpudW1iZXIgLyp1aW50Ki8gPSAwO1xuXHRcdGZvciAodmFyIGo6bnVtYmVyIC8qdWludCovID0gMDsgaiA8IDE2OyBqKyspIHtcblx0XHRcdHZhciBjaDpudW1iZXIgLyp1aW50Ki8gPSB0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRCeXRlKCk7XG5cblx0XHRcdGlmIChNYXRoLmZsb29yKGNoKSA+IDB4MzkgJiYgTWF0aC5mbG9vcihjaCkgPD0gMHg3QSAmJiBrID09IDApXG5cdFx0XHRcdG5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG5cblx0XHRcdGlmIChNYXRoLmZsb29yKGNoKSA+PSAweDMwICYmIE1hdGguZmxvb3IoY2gpIDw9IDB4MzkpXG5cdFx0XHRcdGsrKztcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn1cblxuZXhwb3J0ID0gTUQyUGFyc2VyOyJdfQ==