var BitmapImage2D = require("awayjs-core/lib/image/BitmapImage2D");
var Sampler2D = require("awayjs-core/lib/image/Sampler2D");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Debug = require("awayjs-core/lib/utils/Debug");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/containers/View");
var DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
var Mesh = require("awayjs-display/lib/entities/Mesh");
var StaticLightPicker = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitiveTorusPrefab = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var PrimitiveCubePrefab = require("awayjs-display/lib/prefabs/PrimitiveCubePrefab");
var PrimitiveCapsulePrefab = require("awayjs-display/lib/prefabs/PrimitiveCapsulePrefab");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial = require("awayjs-methodmaterials/lib/MethodMaterial");
var OBJParser = require("awayjs-parsers/lib/OBJParser");
var ElementsType = require("awayjs-display/lib/graphics/ElementsType");
var MaterialAlphaTest = (function () {
    function MaterialAlphaTest() {
        var _this = this;
        this.meshes = new Array();
        this.aValues = Array(0, .1, .5, .8, .9, .99, 1);
        this.aValuesP = 0;
        Debug.LOG_PI_ERRORS = false;
        Debug.THROW_ERRORS = false;
        this.view = new View(new DefaultRenderer());
        this.raf = new RequestAnimationFrame(this.render, this);
        this.onResize();
        this.light = new DirectionalLight();
        this.light.color = 0xFFFFFF;
        this.light.direction = new Vector3D(1, 1, 0);
        this.light.ambient = 0;
        this.light.ambientColor = 0xFFFFFF;
        this.light.diffuse = 1;
        this.light.specular = 1;
        this.lightB = new DirectionalLight();
        this.lightB.color = 0xFF0000;
        this.lightB.direction = new Vector3D(-1, 0, 1);
        this.lightB.ambient = 0;
        this.lightB.ambientColor = 0xFFFFFF;
        this.lightB.diffuse = 1;
        this.lightB.specular = 1;
        this.view.scene.addChild(this.light);
        this.view.scene.addChild(this.lightB);
        this.view.backgroundColor = 0x222222;
        AssetLibrary.enableParser(OBJParser);
        var session;
        session = AssetLibrary.getLoader();
        session.addEventListener(LoaderEvent.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.load(new URLRequest('assets/platonic.obj'));
        session = AssetLibrary.getLoader();
        session.addEventListener(LoaderEvent.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.load(new URLRequest('assets/dots.png'));
        window.onresize = function (event) { return _this.onResize(event); };
        document.onmousedown = function (event) { return _this.onMouseDown(event); };
    }
    MaterialAlphaTest.prototype.onMouseDown = function (event) {
        this.cubeColorMaterial.alpha = this.torusTextureMaterial.alpha = this.loadedMeshMaterial.alpha = this.aValues[this.aValuesP];
        alert('Alpha: ' + this.aValues[this.aValuesP]);
        this.aValuesP++;
        if (this.aValuesP > this.aValues.length - 1)
            this.aValuesP = 0;
    };
    MaterialAlphaTest.prototype.render = function (dt) {
        if (this.meshes)
            for (var c = 0; c < this.meshes.length; c++)
                this.meshes[c].rotationY += .35;
        this.view.render();
    };
    MaterialAlphaTest.prototype.onLoadComplete = function (event) {
        var loader = event.target;
        var l = loader.baseDependency.assets.length;
        for (var c = 0; c < l; c++) {
            var d = loader.baseDependency.assets[c];
            console.log(d.name);
            switch (d.assetType) {
                case Mesh.assetType:
                    var mesh = d;
                    this.loadedMesh = mesh;
                    if (d.name == 'Mesh_g0') {
                        this.loadedMesh = mesh;
                        mesh.y = -400;
                        mesh.transform.scaleTo(5, 5, 5);
                    }
                    else {
                        mesh.transform.scaleTo(3.5, 3.5, 3.5);
                    }
                    if (this.loadedMeshMaterial)
                        mesh.material = this.loadedMeshMaterial;
                    this.view.scene.addChild(mesh);
                    this.meshes.push(mesh);
                    this.raf.start();
                    break;
                case BitmapImage2D.assetType:
                    // Light Picker
                    this.staticLightPicker = new StaticLightPicker([this.light, this.lightB]);
                    // Material for loaded mesh
                    this.loadedMeshMaterial = new MethodMaterial(d);
                    this.loadedMeshMaterial.style.sampler = new Sampler2D(true, true, false);
                    this.loadedMeshMaterial.lightPicker = this.staticLightPicker;
                    this.loadedMeshMaterial.alpha = 1;
                    this.loadedMeshMaterial.bothSides = true;
                    if (this.loadedMesh)
                        this.loadedMesh.material = this.loadedMeshMaterial;
                    // Torus Texture Material
                    this.torusTextureMaterial = new MethodMaterial(d);
                    this.torusTextureMaterial.style.sampler = new Sampler2D(true, true, false);
                    this.torusTextureMaterial.lightPicker = this.staticLightPicker;
                    this.torusTextureMaterial.bothSides = true;
                    this.torusTextureMaterial.alpha = .8;
                    // Torus
                    var torus = new PrimitiveTorusPrefab(this.torusTextureMaterial, ElementsType.TRIANGLE, 150, 50, 64, 64);
                    // Torus Mesh ( left )
                    var torusMesh = torus.getNewObject();
                    torusMesh.rotationX = 90;
                    torusMesh.x = 600;
                    this.meshes.push(torusMesh);
                    this.view.scene.addChild(torusMesh);
                    // Torus Color Material
                    this.cubeColorMaterial = new MethodMaterial(0x0090ff);
                    this.cubeColorMaterial.lightPicker = this.staticLightPicker;
                    this.cubeColorMaterial.alpha = .8;
                    this.cubeColorMaterial.bothSides = true;
                    var cube = new PrimitiveCubePrefab(this.cubeColorMaterial, ElementsType.TRIANGLE, 300, 300, 300, 20, 20, 20);
                    // Torus Mesh ( right )
                    var cubeMesh = cube.getNewObject();
                    cubeMesh.rotationX = 90;
                    cubeMesh.x = -600;
                    this.meshes.push(cubeMesh);
                    this.view.scene.addChild(cubeMesh);
                    this.capsuleColorMaterial = new MethodMaterial(0x00ffff);
                    this.capsuleColorMaterial.lightPicker = this.staticLightPicker;
                    var capsule = new PrimitiveCapsulePrefab(this.capsuleColorMaterial, ElementsType.TRIANGLE, 100, 200);
                    // Torus Mesh ( right )
                    var capsuleMesh = capsule.getNewObject();
                    this.meshes.push(capsuleMesh);
                    this.view.scene.addChild(capsuleMesh);
                    this.cubeColorMaterial.alpha = this.torusTextureMaterial.alpha = this.loadedMeshMaterial.alpha = 1;
                    break;
            }
        }
    };
    MaterialAlphaTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return MaterialAlphaTest;
})();

//# sourceMappingURL=data:application/json;base64,