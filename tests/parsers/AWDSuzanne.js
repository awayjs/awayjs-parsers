"use strict";
var AssetEvent_1 = require("awayjs-core/lib/events/AssetEvent");
var LoaderEvent_1 = require("awayjs-core/lib/events/LoaderEvent");
var Vector3D_1 = require("awayjs-core/lib/geom/Vector3D");
var AssetLibrary_1 = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Graphics_1 = require("awayjs-display/lib/graphics/Graphics");
var View_1 = require("awayjs-display/lib/View");
var DirectionalLight_1 = require("awayjs-display/lib/display/DirectionalLight");
var Sprite_1 = require("awayjs-display/lib/display/Sprite");
var StaticLightPicker_1 = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial_1 = require("awayjs-methodmaterials/lib/MethodMaterial");
var AWDParser_1 = require("awayjs-parsers/lib/AWDParser");
var AWDSuzanne = (function () {
    function AWDSuzanne() {
        var _this = this;
        this.lookAtPosition = new Vector3D_1.default();
        this._cameraIncrement = 0;
        Debug_1.default.LOG_PI_ERRORS = true;
        Debug_1.default.THROW_ERRORS = false;
        AssetLibrary_1.default.enableParser(AWDParser_1.default);
        var session = AssetLibrary_1.default.getLoader();
        session.addEventListener(LoaderEvent_1.default.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.addEventListener(AssetEvent_1.default.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        session.load(new URLRequest_1.default('assets/suzanne.awd'));
        this._view = new View_1.default(new DefaultRenderer_1.default());
        this._view.camera.projection.far = 6000;
        this._timer = new RequestAnimationFrame_1.default(this.render, this);
        this._light = new DirectionalLight_1.default();
        this._light.color = 0x683019; //683019;
        this._light.direction = new Vector3D_1.default(1, 0, 0);
        this._light.ambient = 0.1; //0.05;//.4;
        this._light.ambientColor = 0x85b2cd; //4F6877;//313D51;
        this._light.diffuse = 2.8;
        this._light.specular = 1.8;
        this._view.scene.addChild(this._light);
        this._lightPicker = new StaticLightPicker_1.default([this._light]);
        window.onresize = function (event) { return _this.resize(event); };
        this._timer.start();
        this.resize();
    }
    AWDSuzanne.prototype.resize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    AWDSuzanne.prototype.render = function (dt) {
        if (this._view.camera) {
            this._view.camera.lookAt(this.lookAtPosition);
            this._cameraIncrement += 0.01;
            this._view.camera.x = Math.cos(this._cameraIncrement) * 1400;
            this._view.camera.z = Math.sin(this._cameraIncrement) * 1400;
            this._light.x = Math.cos(this._cameraIncrement) * 1400;
            this._light.y = Math.sin(this._cameraIncrement) * 1400;
        }
        this._view.render();
    };
    AWDSuzanne.prototype.onAssetComplete = function (event) {
        console.log('------------------------------------------------------------------------------');
        console.log('away.events.AssetEvent.ASSET_COMPLETE', AssetLibrary_1.default.getAsset(event.asset.name));
        console.log('------------------------------------------------------------------------------');
    };
    AWDSuzanne.prototype.onLoadComplete = function (event) {
        console.log('------------------------------------------------------------------------------');
        console.log('away.events.LoaderEvent.RESOURCE_COMPLETE', event);
        console.log('------------------------------------------------------------------------------');
        var loader = event.target;
        var numAssets = loader.baseDependency.assets.length;
        for (var i = 0; i < numAssets; ++i) {
            var asset = loader.baseDependency.assets[i];
            switch (asset.assetType) {
                case Sprite_1.default.assetType:
                    this._suzanne = asset;
                    this._suzanne.material.lightPicker = this._lightPicker;
                    this._suzanne.y = -100;
                    for (var c = 0; c < 80; c++) {
                        var scale = this.getRandom(50, 200);
                        var clone = this._suzanne.clone();
                        clone.x = this.getRandom(-2000, 2000);
                        clone.y = this.getRandom(-2000, 2000);
                        clone.z = this.getRandom(-2000, 2000);
                        clone.transform.scaleTo(scale, scale, scale);
                        clone.rotationY = this.getRandom(0, 360);
                        this._view.scene.addChild(clone);
                    }
                    this._suzanne.transform.scaleTo(500, 500, 500);
                    this._view.scene.addChild(this._suzanne);
                    break;
                case Graphics_1.default.assetType:
                    break;
                case MethodMaterial_1.default.assetType:
                    break;
            }
        }
    };
    AWDSuzanne.prototype.getRandom = function (min, max) {
        return Math.random() * (max - min) + min;
    };
    return AWDSuzanne;
}());

//# sourceMappingURL=data:application/json;base64,
