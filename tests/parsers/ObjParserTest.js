var AssetEvent = require("awayjs-core/lib/events/AssetEvent");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Debug = require("awayjs-core/lib/utils/Debug");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/View");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var OBJParser = require("awayjs-parsers/lib/OBJParser");
/**
 *
 */
var ObjParserTest = (function () {
    function ObjParserTest() {
        var _this = this;
        Debug.LOG_PI_ERRORS = true;
        Debug.THROW_ERRORS = false;
        AssetLibrary.enableParser(OBJParser);
        var session = AssetLibrary.getLoader();
        session.addEventListener(LoaderEvent.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.addEventListener(AssetEvent.ASSET_COMPLETE, function (event) { return _this.onAssetComplete(event); });
        session.load(new URLRequest('assets/t800.obj'));
        this._view = new View(new DefaultRenderer());
        this._timer = new RequestAnimationFrame(this.render, this);
        window.onresize = function (event) { return _this.resize(event); };
        this._timer.start();
        this.resize();
    }
    ObjParserTest.prototype.resize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    ObjParserTest.prototype.render = function (dt) {
        if (this._t800)
            this._t800.rotationY += 1;
        this._view.render();
    };
    ObjParserTest.prototype.onAssetComplete = function (event) {
        console.log('------------------------------------------------------------------------------');
        console.log('events.AssetEvent.ASSET_COMPLETE', AssetLibrary.getAsset(event.asset.name));
        console.log('------------------------------------------------------------------------------');
    };
    ObjParserTest.prototype.onLoadComplete = function (event) {
        console.log('------------------------------------------------------------------------------');
        console.log('events.LoaderEvent.RESOURCE_COMPLETE', event);
        console.log('------------------------------------------------------------------------------');
        console.log(AssetLibrary.getAsset('Mesh_g0'));
        this._t800 = AssetLibrary.getAsset('Mesh_g0');
        this._t800.y = -200;
        this._t800.transform.scaleTo(4, 4, 4);
        this._view.scene.addChild(this._t800);
    };
    return ObjParserTest;
})();

//# sourceMappingURL=data:application/json;base64,